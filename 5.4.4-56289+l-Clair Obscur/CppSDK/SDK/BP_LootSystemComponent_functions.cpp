#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LootSystemComponent

#include "Basic.hpp"

#include "BP_LootSystemComponent_classes.hpp"
#include "BP_LootSystemComponent_parameters.hpp"


namespace SDK
{

// Function BP_LootSystemComponent.BP_LootSystemComponent_C.ComputeLootChromaFromItem
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_Item_Chroma_C*      ChromaItem                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_LootContext&                  LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_LootSystemComponent_C::ComputeLootChromaFromItem(class UBP_DataAsset_Item_Chroma_C* ChromaItem, struct FS_LootContext& LootContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LootSystemComponent_C", "ComputeLootChromaFromItem");

	Params::BP_LootSystemComponent_C_ComputeLootChromaFromItem Parms{};

	Parms.ChromaItem = ChromaItem;
	Parms.LootContext = std::move(LootContext);

	UObject::ProcessEvent(Func, &Parms);

	LootContext = std::move(Parms.LootContext);

	return Parms.ReturnValue;
}


// Function BP_LootSystemComponent.BP_LootSystemComponent_C.RollLootTable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       LootTableDT                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FS_LootContext&            LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChanceMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FS_LootTableEntry>*       RolledLootEntries                                      (Parm, OutParm)

void UBP_LootSystemComponent_C::RollLootTable(class UDataTable* LootTableDT, const struct FS_LootContext& LootContext, double ChanceMultiplier, const class FString& DebugReason, TArray<struct FS_LootTableEntry>* RolledLootEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LootSystemComponent_C", "RollLootTable");

	Params::BP_LootSystemComponent_C_RollLootTable Parms{};

	Parms.LootTableDT = LootTableDT;
	Parms.LootContext = std::move(LootContext);
	Parms.ChanceMultiplier = ChanceMultiplier;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);

	if (RolledLootEntries != nullptr)
		*RolledLootEntries = std::move(Parms.RolledLootEntries);
}


// Function BP_LootSystemComponent.BP_LootSystemComponent_C.RollLootTableReference
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLootTableReference&       LootTableReference                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// const struct FS_LootContext&            LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChanceMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FS_LootTableEntry>*       RolledLootEntries                                      (Parm, OutParm)

void UBP_LootSystemComponent_C::RollLootTableReference(const struct FLootTableReference& LootTableReference, const struct FS_LootContext& LootContext, double ChanceMultiplier, const class FString& DebugReason, TArray<struct FS_LootTableEntry>* RolledLootEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LootSystemComponent_C", "RollLootTableReference");

	Params::BP_LootSystemComponent_C_RollLootTableReference Parms{};

	Parms.LootTableReference = std::move(LootTableReference);
	Parms.LootContext = std::move(LootContext);
	Parms.ChanceMultiplier = ChanceMultiplier;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);

	if (RolledLootEntries != nullptr)
		*RolledLootEntries = std::move(Parms.RolledLootEntries);
}


// Function BP_LootSystemComponent.BP_LootSystemComponent_C.RollLootTableReferences
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FLootTableReference>&     LootTableRefs                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FS_LootContext&            LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChanceMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FS_LootTableEntry>*       RolledLootEntries                                      (Parm, OutParm)

void UBP_LootSystemComponent_C::RollLootTableReferences(TArray<struct FLootTableReference>& LootTableRefs, const struct FS_LootContext& LootContext, double ChanceMultiplier, const class FString& DebugReason, TArray<struct FS_LootTableEntry>* RolledLootEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LootSystemComponent_C", "RollLootTableReferences");

	Params::BP_LootSystemComponent_C_RollLootTableReferences Parms{};

	Parms.LootTableRefs = std::move(LootTableRefs);
	Parms.LootContext = std::move(LootContext);
	Parms.ChanceMultiplier = ChanceMultiplier;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);

	LootTableRefs = std::move(Parms.LootTableRefs);

	if (RolledLootEntries != nullptr)
		*RolledLootEntries = std::move(Parms.RolledLootEntries);
}


// Function BP_LootSystemComponent.BP_LootSystemComponent_C.RollLootTableSection
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_LootTableSection&       Section                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// double                                  ChanceMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LootTableEntry*               RolledLootEntry                                        (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_LootSystemComponent_C::RollLootTableSection(const struct FS_LootTableSection& Section, double ChanceMultiplier, bool* IsValid, struct FS_LootTableEntry* RolledLootEntry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LootSystemComponent_C", "RollLootTableSection");

	Params::BP_LootSystemComponent_C_RollLootTableSection Parms{};

	Parms.Section = std::move(Section);
	Parms.ChanceMultiplier = ChanceMultiplier;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	if (RolledLootEntry != nullptr)
		*RolledLootEntry = std::move(Parms.RolledLootEntry);
}


// Function BP_LootSystemComponent.BP_LootSystemComponent_C.RollLootTableSectionList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_LootTableSection>&     LootTableSectionList                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FS_LootContext&            LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ChanceMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TArray<struct FS_LootTableEntry>*       RolledLootEntries                                      (Parm, OutParm)

void UBP_LootSystemComponent_C::RollLootTableSectionList(TArray<struct FS_LootTableSection>& LootTableSectionList, const struct FS_LootContext& LootContext, double ChanceMultiplier, const class FString& DebugReason, TArray<struct FS_LootTableEntry>* RolledLootEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LootSystemComponent_C", "RollLootTableSectionList");

	Params::BP_LootSystemComponent_C_RollLootTableSectionList Parms{};

	Parms.LootTableSectionList = std::move(LootTableSectionList);
	Parms.LootContext = std::move(LootContext);
	Parms.ChanceMultiplier = ChanceMultiplier;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);

	LootTableSectionList = std::move(Parms.LootTableSectionList);

	if (RolledLootEntries != nullptr)
		*RolledLootEntries = std::move(Parms.RolledLootEntries);
}

}

