#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameDifficultyManager

#include "Basic.hpp"

#include "E_GameDifficulty_structs.hpp"
#include "S_GameDifficultySaveData_structs.hpp"


namespace SDK::Params
{

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.ApplySelectedGameDifficulty
// 0x0002 (0x0002 - 0x0000)
struct BP_GameDifficultyManager_C_ApplySelectedGameDifficulty final
{
public:
	bool                                          DispatchChanges;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_ApplySelectedGameDifficulty) == 0x000001, "Wrong alignment on BP_GameDifficultyManager_C_ApplySelectedGameDifficulty");
static_assert(sizeof(BP_GameDifficultyManager_C_ApplySelectedGameDifficulty) == 0x000002, "Wrong size on BP_GameDifficultyManager_C_ApplySelectedGameDifficulty");
static_assert(offsetof(BP_GameDifficultyManager_C_ApplySelectedGameDifficulty, DispatchChanges) == 0x000000, "Member 'BP_GameDifficultyManager_C_ApplySelectedGameDifficulty::DispatchChanges' has a wrong offset!");
static_assert(offsetof(BP_GameDifficultyManager_C_ApplySelectedGameDifficulty, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_GameDifficultyManager_C_ApplySelectedGameDifficulty::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.GetCurrentDifficulty
// 0x0001 (0x0001 - 0x0000)
struct BP_GameDifficultyManager_C_GetCurrentDifficulty final
{
public:
	E_GameDifficulty                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_GetCurrentDifficulty) == 0x000001, "Wrong alignment on BP_GameDifficultyManager_C_GetCurrentDifficulty");
static_assert(sizeof(BP_GameDifficultyManager_C_GetCurrentDifficulty) == 0x000001, "Wrong size on BP_GameDifficultyManager_C_GetCurrentDifficulty");
static_assert(offsetof(BP_GameDifficultyManager_C_GetCurrentDifficulty, ReturnValue) == 0x000000, "Member 'BP_GameDifficultyManager_C_GetCurrentDifficulty::ReturnValue' has a wrong offset!");

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.IsCurrentDifficultyDirty
// 0x0002 (0x0002 - 0x0000)
struct BP_GameDifficultyManager_C_IsCurrentDifficultyDirty final
{
public:
	bool                                          IsDirty;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_IsCurrentDifficultyDirty) == 0x000001, "Wrong alignment on BP_GameDifficultyManager_C_IsCurrentDifficultyDirty");
static_assert(sizeof(BP_GameDifficultyManager_C_IsCurrentDifficultyDirty) == 0x000002, "Wrong size on BP_GameDifficultyManager_C_IsCurrentDifficultyDirty");
static_assert(offsetof(BP_GameDifficultyManager_C_IsCurrentDifficultyDirty, IsDirty) == 0x000000, "Member 'BP_GameDifficultyManager_C_IsCurrentDifficultyDirty::IsDirty' has a wrong offset!");
static_assert(offsetof(BP_GameDifficultyManager_C_IsCurrentDifficultyDirty, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_GameDifficultyManager_C_IsCurrentDifficultyDirty::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.LoadState
// 0x0002 (0x0002 - 0x0000)
struct BP_GameDifficultyManager_C_LoadState final
{
public:
	struct FS_GameDifficultySaveData              SaveData;                                          // 0x0000(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_LoadState) == 0x000001, "Wrong alignment on BP_GameDifficultyManager_C_LoadState");
static_assert(sizeof(BP_GameDifficultyManager_C_LoadState) == 0x000002, "Wrong size on BP_GameDifficultyManager_C_LoadState");
static_assert(offsetof(BP_GameDifficultyManager_C_LoadState, SaveData) == 0x000000, "Member 'BP_GameDifficultyManager_C_LoadState::SaveData' has a wrong offset!");

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.SaveState
// 0x0002 (0x0002 - 0x0000)
struct BP_GameDifficultyManager_C_SaveState final
{
public:
	struct FS_GameDifficultySaveData              SaveData;                                          // 0x0000(0x0002)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_SaveState) == 0x000001, "Wrong alignment on BP_GameDifficultyManager_C_SaveState");
static_assert(sizeof(BP_GameDifficultyManager_C_SaveState) == 0x000002, "Wrong size on BP_GameDifficultyManager_C_SaveState");
static_assert(offsetof(BP_GameDifficultyManager_C_SaveState, SaveData) == 0x000000, "Member 'BP_GameDifficultyManager_C_SaveState::SaveData' has a wrong offset!");

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.SelectGameDifficulty
// 0x0001 (0x0001 - 0x0000)
struct BP_GameDifficultyManager_C_SelectGameDifficulty final
{
public:
	E_GameDifficulty                              Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_SelectGameDifficulty) == 0x000001, "Wrong alignment on BP_GameDifficultyManager_C_SelectGameDifficulty");
static_assert(sizeof(BP_GameDifficultyManager_C_SelectGameDifficulty) == 0x000001, "Wrong size on BP_GameDifficultyManager_C_SelectGameDifficulty");
static_assert(offsetof(BP_GameDifficultyManager_C_SelectGameDifficulty, Difficulty) == 0x000000, "Member 'BP_GameDifficultyManager_C_SelectGameDifficulty::Difficulty' has a wrong offset!");

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.SetCurrentDifficulty
// 0x0010 (0x0010 - 0x0000)
struct BP_GameDifficultyManager_C_SetCurrentDifficulty final
{
public:
	E_GameDifficulty                              Difficulty;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue_1;             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameDifficultyManager_C_SetCurrentDifficulty) == 0x000004, "Wrong alignment on BP_GameDifficultyManager_C_SetCurrentDifficulty");
static_assert(sizeof(BP_GameDifficultyManager_C_SetCurrentDifficulty) == 0x000010, "Wrong size on BP_GameDifficultyManager_C_SetCurrentDifficulty");
static_assert(offsetof(BP_GameDifficultyManager_C_SetCurrentDifficulty, Difficulty) == 0x000000, "Member 'BP_GameDifficultyManager_C_SetCurrentDifficulty::Difficulty' has a wrong offset!");
static_assert(offsetof(BP_GameDifficultyManager_C_SetCurrentDifficulty, CallFunc_Conv_ByteToInt_ReturnValue) == 0x000004, "Member 'BP_GameDifficultyManager_C_SetCurrentDifficulty::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameDifficultyManager_C_SetCurrentDifficulty, CallFunc_Conv_ByteToInt_ReturnValue_1) == 0x000008, "Member 'BP_GameDifficultyManager_C_SetCurrentDifficulty::CallFunc_Conv_ByteToInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameDifficultyManager_C_SetCurrentDifficulty, CallFunc_Less_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GameDifficultyManager_C_SetCurrentDifficulty::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

