#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_DynamicCameraPath

#include "Basic.hpp"

#include "E_jRPG_CameraPathType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_DynamicCameraPath.BP_jRPG_DynamicCameraPath_C
// 0x0090 (0x0320 - 0x0290)
class ABP_jRPG_DynamicCameraPath_C final : public AActor
{
public:
	class USplineComponent*                       Spline;                                            // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       PreviewCamera;                                     // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class FName                                   PathID;                                            // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_jRPG_CameraPathType                         PathType;                                          // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointsAmount;                                      // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LoopRadius;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LoopClosed;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpiralRadius;                                      // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        SpiralLength;                                      // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        SpiralOffset;                                      // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        PreviewTime;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraFocusPoint;                                  // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               PathInitialRotation;                               // 0x0300(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          UseFocusPoint;                                     // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void GetCameraFocusPoint(struct FVector* FocusLocation);
	void GetPathLocationAtDistance(double Time, struct FVector* WorldLocation);
	void SetCameraFocusPoint(const struct FVector& WorldLocation);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_DynamicCameraPath_C">();
	}
	static class ABP_jRPG_DynamicCameraPath_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_DynamicCameraPath_C>();
	}
};
static_assert(alignof(ABP_jRPG_DynamicCameraPath_C) == 0x000008, "Wrong alignment on ABP_jRPG_DynamicCameraPath_C");
static_assert(sizeof(ABP_jRPG_DynamicCameraPath_C) == 0x000320, "Wrong size on ABP_jRPG_DynamicCameraPath_C");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, Spline) == 0x000290, "Member 'ABP_jRPG_DynamicCameraPath_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, Scene) == 0x000298, "Member 'ABP_jRPG_DynamicCameraPath_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, PreviewCamera) == 0x0002A0, "Member 'ABP_jRPG_DynamicCameraPath_C::PreviewCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, PathID) == 0x0002A8, "Member 'ABP_jRPG_DynamicCameraPath_C::PathID' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, PathType) == 0x0002B0, "Member 'ABP_jRPG_DynamicCameraPath_C::PathType' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, PointsAmount) == 0x0002B4, "Member 'ABP_jRPG_DynamicCameraPath_C::PointsAmount' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, LoopRadius) == 0x0002B8, "Member 'ABP_jRPG_DynamicCameraPath_C::LoopRadius' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, LoopClosed) == 0x0002C0, "Member 'ABP_jRPG_DynamicCameraPath_C::LoopClosed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, SpiralRadius) == 0x0002C8, "Member 'ABP_jRPG_DynamicCameraPath_C::SpiralRadius' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, SpiralLength) == 0x0002D0, "Member 'ABP_jRPG_DynamicCameraPath_C::SpiralLength' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, SpiralOffset) == 0x0002D8, "Member 'ABP_jRPG_DynamicCameraPath_C::SpiralOffset' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, PreviewTime) == 0x0002E0, "Member 'ABP_jRPG_DynamicCameraPath_C::PreviewTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, CameraFocusPoint) == 0x0002E8, "Member 'ABP_jRPG_DynamicCameraPath_C::CameraFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, PathInitialRotation) == 0x000300, "Member 'ABP_jRPG_DynamicCameraPath_C::PathInitialRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_DynamicCameraPath_C, UseFocusPoint) == 0x000318, "Member 'ABP_jRPG_DynamicCameraPath_C::UseFocusPoint' has a wrong offset!");

}

