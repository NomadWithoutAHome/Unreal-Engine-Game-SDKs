#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AICompanion_TargetPointsComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AICompanion_TargetPointsComponent.BP_AICompanion_TargetPointsComponent_C
// 0x0078 (0x0118 - 0x00A0)
class UBP_AICompanion_TargetPointsComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<struct FVector>                        TargetPoints;                                      // 0x00A8(0x0010)(Edit, BlueprintVisible)
	bool                                          ShouldUpdatePointsBasedOnDistance;                 // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class ABP_Pawn_AICompanion_C*, int32>    AcquiredPointsByCompanions;                        // 0x00C0(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_Pawn_AICompanion_C*                 Companion;                                         // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_AICompanion_TargetPointsComponent(int32 EntryPoint);
	void FindBestPointBasedOnDistance(class ABP_Pawn_AICompanion_C* Companion_0, TArray<int32>& ForbiddenIndexes, int32* Index_0);
	void GetOrTryAcquirePoint(class ABP_Pawn_AICompanion_C* Companion_0, struct FVector* Point, bool* Success);
	int32 GetTotalNumberOfPoints();
	void HasAnyPointAvailable(bool* Result);
	void ReceiveTick(float DeltaSeconds);
	void ReleaseAllPoints();
	void ReleasePoint(class ABP_Pawn_AICompanion_C* Companion_0);
	void SearchNextAvailablePointIndex(int32* Index_0);
	void TryAcquireNextPoint(class ABP_Pawn_AICompanion_C* Companion_0, struct FVector* Point, bool* Success);
	void UpdatePointsBasedOnDistance();

	void ComputeTargetPoint(const struct FVector& LocalPoint, struct FVector* Result) const;
	bool Editor_DrawDebugShapes() const;
	bool Editor_GetDebugShapes(TArray<struct FEditorDebugShape_Arrow>& Arrows, TArray<struct FEditorDebugShape_Arrow>& Lines) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AICompanion_TargetPointsComponent_C">();
	}
	static class UBP_AICompanion_TargetPointsComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AICompanion_TargetPointsComponent_C>();
	}
};
static_assert(alignof(UBP_AICompanion_TargetPointsComponent_C) == 0x000008, "Wrong alignment on UBP_AICompanion_TargetPointsComponent_C");
static_assert(sizeof(UBP_AICompanion_TargetPointsComponent_C) == 0x000118, "Wrong size on UBP_AICompanion_TargetPointsComponent_C");
static_assert(offsetof(UBP_AICompanion_TargetPointsComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_AICompanion_TargetPointsComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AICompanion_TargetPointsComponent_C, TargetPoints) == 0x0000A8, "Member 'UBP_AICompanion_TargetPointsComponent_C::TargetPoints' has a wrong offset!");
static_assert(offsetof(UBP_AICompanion_TargetPointsComponent_C, ShouldUpdatePointsBasedOnDistance) == 0x0000B8, "Member 'UBP_AICompanion_TargetPointsComponent_C::ShouldUpdatePointsBasedOnDistance' has a wrong offset!");
static_assert(offsetof(UBP_AICompanion_TargetPointsComponent_C, AcquiredPointsByCompanions) == 0x0000C0, "Member 'UBP_AICompanion_TargetPointsComponent_C::AcquiredPointsByCompanions' has a wrong offset!");
static_assert(offsetof(UBP_AICompanion_TargetPointsComponent_C, Companion) == 0x000110, "Member 'UBP_AICompanion_TargetPointsComponent_C::Companion' has a wrong offset!");

}

