#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CustomMoveZone_Climbing

#include "Basic.hpp"

#include "BPI_CustomMoveZone_Climbing_classes.hpp"
#include "BPI_CustomMoveZone_Climbing_parameters.hpp"


namespace SDK
{

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckEnter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Character_Bottom_Location                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Input_Direction                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Input_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CustomMoveZone_Climbing_C::CheckEnter(const struct FVector& Character_Bottom_Location, const struct FVector& Input_Direction, double Input_Scale, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "CheckEnter");

	Params::BPI_CustomMoveZone_Climbing_C_CheckEnter Parms{};

	Parms.Character_Bottom_Location = std::move(Character_Bottom_Location);
	Parms.Input_Direction = std::move(Input_Direction);
	Parms.Input_Scale = Input_Scale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckEnterToTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Character_Bottom_Location                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Input_Direction                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Input_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CustomMoveZone_Climbing_C::CheckEnterToTop(const struct FVector& Character_Bottom_Location, const struct FVector& Input_Direction, double Input_Scale, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "CheckEnterToTop");

	Params::BPI_CustomMoveZone_Climbing_C_CheckEnterToTop Parms{};

	Parms.Character_Bottom_Location = std::move(Character_Bottom_Location);
	Parms.Input_Direction = std::move(Input_Direction);
	Parms.Input_Scale = Input_Scale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckExitToBottom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Input_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CustomMoveZone_Climbing_C::CheckExitToBottom(double Input_Scale, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "CheckExitToBottom");

	Params::BPI_CustomMoveZone_Climbing_C_CheckExitToBottom Parms{};

	Parms.Input_Scale = Input_Scale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckExitToTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Input_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CustomMoveZone_Climbing_C::CheckExitToTop(double Input_Scale, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "CheckExitToTop");

	Params::BPI_CustomMoveZone_Climbing_C_CheckExitToTop Parms{};

	Parms.Input_Scale = Input_Scale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckMoveToNextHold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Input_Direction                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Input_Scale                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor**                          Next_Hold                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Is_Far_Hold                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CustomMoveZone_Climbing_C::CheckMoveToNextHold(const struct FVector& Input_Direction, double Input_Scale, bool* Result, class AActor** Next_Hold, bool* Is_Far_Hold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "CheckMoveToNextHold");

	Params::BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold Parms{};

	Parms.Input_Direction = std::move(Input_Direction);
	Parms.Input_Scale = Input_Scale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;

	if (Next_Hold != nullptr)
		*Next_Hold = Parms.Next_Hold;

	if (Is_Far_Hold != nullptr)
		*Is_Far_Hold = Parms.Is_Far_Hold;
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.GetHoldLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Hold_Location                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Character_Bottom_Location                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_CustomMoveZone_Climbing_C::GetHoldLocation(struct FVector* Hold_Location, struct FVector* Character_Bottom_Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "GetHoldLocation");

	Params::BPI_CustomMoveZone_Climbing_C_GetHoldLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Hold_Location != nullptr)
		*Hold_Location = std::move(Parms.Hold_Location);

	if (Character_Bottom_Location != nullptr)
		*Character_Bottom_Location = std::move(Parms.Character_Bottom_Location);
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.GetHoldRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        Hold_Rotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CustomMoveZone_Climbing_C::GetHoldRotation(struct FRotator* Hold_Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "GetHoldRotation");

	Params::BPI_CustomMoveZone_Climbing_C_GetHoldRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Hold_Rotation != nullptr)
		*Hold_Rotation = std::move(Parms.Hold_Rotation);
}


// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.GetTopEnterLocatoin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Top_Enter_Location                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Top_Enter_Rotation                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_CustomMoveZone_Climbing_C::GetTopEnterLocatoin(struct FVector* Top_Enter_Location, struct FRotator* Top_Enter_Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_CustomMoveZone_Climbing_C", "GetTopEnterLocatoin");

	Params::BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Top_Enter_Location != nullptr)
		*Top_Enter_Location = std::move(Parms.Top_Enter_Location);

	if (Top_Enter_Rotation != nullptr)
		*Top_Enter_Rotation = std::move(Parms.Top_Enter_Rotation);
}

}

