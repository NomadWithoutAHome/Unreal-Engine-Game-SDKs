#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightSafeArea

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_jRPG_InteractionObject_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightSafeArea.BP_LightSafeArea_C
// 0x0018 (0x0308 - 0x02F0)
class ABP_LightSafeArea_C final : public ABP_jRPG_InteractionObject_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_LightSafeArea_C;                 // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UPointLightComponent*                   PointLight;                                        // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Shape;                                             // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_LightSafeArea_shape_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_LightSafeArea_shape_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_LightSafeArea(int32 EntryPoint);
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void TrySetInSafeArea(class AActor* TargetActor, bool IsInSafeLightArea, bool* Output_IsInSafeLightArea);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightSafeArea_C">();
	}
	static class ABP_LightSafeArea_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightSafeArea_C>();
	}
};
static_assert(alignof(ABP_LightSafeArea_C) == 0x000008, "Wrong alignment on ABP_LightSafeArea_C");
static_assert(sizeof(ABP_LightSafeArea_C) == 0x000308, "Wrong size on ABP_LightSafeArea_C");
static_assert(offsetof(ABP_LightSafeArea_C, UberGraphFrame_BP_LightSafeArea_C) == 0x0002F0, "Member 'ABP_LightSafeArea_C::UberGraphFrame_BP_LightSafeArea_C' has a wrong offset!");
static_assert(offsetof(ABP_LightSafeArea_C, PointLight) == 0x0002F8, "Member 'ABP_LightSafeArea_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_LightSafeArea_C, Shape) == 0x000300, "Member 'ABP_LightSafeArea_C::Shape' has a wrong offset!");

}

