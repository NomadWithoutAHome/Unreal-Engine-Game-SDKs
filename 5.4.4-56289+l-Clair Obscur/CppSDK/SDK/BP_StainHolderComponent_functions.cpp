#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StainHolderComponent

#include "Basic.hpp"

#include "BP_StainHolderComponent_classes.hpp"
#include "BP_StainHolderComponent_parameters.hpp"


namespace SDK
{

// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Achievement_UnlockLuneStains
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::Achievement_UnlockLuneStains()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Achievement_UnlockLuneStains");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.CanOverchargeWithDarkStains
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_StainHolderComponent_C::CanOverchargeWithDarkStains()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "CanOverchargeWithDarkStains");

	Params::BP_StainHolderComponent_C_CanOverchargeWithDarkStains Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.CanSkillOverpowerMechanic
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SkillDataComponent_StainsMechanic_C*SkillData                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanOvercharge                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::CanSkillOverpowerMechanic(class UBP_SkillDataComponent_StainsMechanic_C* SkillData, bool* CanOvercharge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "CanSkillOverpowerMechanic");

	Params::BP_StainHolderComponent_C_CanSkillOverpowerMechanic Parms{};

	Parms.SkillData = SkillData;

	UObject::ProcessEvent(Func, &Parms);

	if (CanOvercharge != nullptr)
		*CanOvercharge = Parms.CanOvercharge;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Construction
// (BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::Construction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Construction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ConsumeAllStains
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ConsumeAllStains(EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ConsumeAllStains");

	Params::BP_StainHolderComponent_C_ConsumeAllStains Parms{};

	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ConsumeStain
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_StainBase_C*                  StainToConsume                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_StainBase_C**                 StainConsumed                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ConsumeStain(class ABP_StainBase_C* StainToConsume, EStainChangeReason Reason, class ABP_StainBase_C** StainConsumed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ConsumeStain");

	Params::BP_StainHolderComponent_C_ConsumeStain Parms{};

	Parms.StainToConsume = StainToConsume;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);

	if (StainConsumed != nullptr)
		*StainConsumed = Parms.StainConsumed;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ConsumeStainAtIndex
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   StainIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ConsumeStainAtIndex(int32 StainIndex, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ConsumeStainAtIndex");

	Params::BP_StainHolderComponent_C_ConsumeStainAtIndex Parms{};

	Parms.StainIndex = StainIndex;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ConsumeStainByType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             StainToConsume                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ConsumeStainByType(EAttackType StainToConsume, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ConsumeStainByType");

	Params::BP_StainHolderComponent_C_ConsumeStainByType Parms{};

	Parms.StainToConsume = StainToConsume;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ConsumeStains
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_StainBase_C*>&         StainActors                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ConsumeStains(TArray<class ABP_StainBase_C*>& StainActors, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ConsumeStains");

	Params::BP_StainHolderComponent_C_ConsumeStains Parms{};

	Parms.StainActors = std::move(StainActors);
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);

	StainActors = std::move(Parms.StainActors);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ConsumeStainsAtIndexes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          StainIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ConsumeStainsAtIndexes(TArray<int32>& StainIndex, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ConsumeStainsAtIndexes");

	Params::BP_StainHolderComponent_C_ConsumeStainsAtIndexes Parms{};

	Parms.StainIndex = std::move(StainIndex);
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);

	StainIndex = std::move(Parms.StainIndex);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.CreatePortraitWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget**                     CreatedUserWidget                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32*                                  SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::CreatePortraitWidget(class UUserWidget** CreatedUserWidget, int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "CreatePortraitWidget");

	Params::BP_StainHolderComponent_C_CreatePortraitWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CreatedUserWidget != nullptr)
		*CreatedUserWidget = Parms.CreatedUserWidget;

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.CreateStainByClass
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           StainBP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayAnim                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::CreateStainByClass(class UClass* StainBP, bool PlayAnim, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "CreateStainByClass");

	Params::BP_StainHolderComponent_C_CreateStainByClass Parms{};

	Parms.StainBP = StainBP;
	Parms.PlayAnim = PlayAnim;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.CreateStainByType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             StainType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PlayAnim                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::CreateStainByType(EAttackType StainType, bool PlayAnim, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "CreateStainByType");

	Params::BP_StainHolderComponent_C_CreateStainByType Parms{};

	Parms.StainType = StainType;
	Parms.PlayAnim = PlayAnim;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.DEBUG_AlphaMapToString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const TMap<int32, double>&              TargetMap                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FText*                            Result                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::DEBUG_AlphaMapToString(const TMap<int32, double>& TargetMap, class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "DEBUG_AlphaMapToString");

	Params::BP_StainHolderComponent_C_DEBUG_AlphaMapToString Parms{};

	Parms.TargetMap = std::move(TargetMap);

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.DEPRECATED_Get Spline Slot Base Time
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_StainBase_C*                  DEBUG_StainInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::DEPRECATED_Get_Spline_Slot_Base_Time(class USplineComponent* Spline, int32 SlotIndex, int32 SlotCount, class ABP_StainBase_C* DEBUG_StainInfo, double* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "DEPRECATED_Get Spline Slot Base Time");

	Params::BP_StainHolderComponent_C_DEPRECATED_Get_Spline_Slot_Base_Time Parms{};

	Parms.Spline = Spline;
	Parms.SlotIndex = SlotIndex;
	Parms.SlotCount = SlotCount;
	Parms.DEBUG_StainInfo = DEBUG_StainInfo;

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.DEPRECATED_GetSplinePosition
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   ElementIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ElementCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_StainBase_C*                  DEBUG_StainInfo                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform UBP_StainHolderComponent_C::DEPRECATED_GetSplinePosition(class USplineComponent* Spline, int32 ElementIndex, int32 ElementCount, class ABP_StainBase_C* DEBUG_StainInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "DEPRECATED_GetSplinePosition");

	Params::BP_StainHolderComponent_C_DEPRECATED_GetSplinePosition Parms{};

	Parms.Spline = Spline;
	Parms.ElementIndex = ElementIndex;
	Parms.ElementCount = ElementCount;
	Parms.DEBUG_StainInfo = DEBUG_StainInfo;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ExecuteUbergraph_BP_StainHolderComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ExecuteUbergraph_BP_StainHolderComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ExecuteUbergraph_BP_StainHolderComponent");

	Params::BP_StainHolderComponent_C_ExecuteUbergraph_BP_StainHolderComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Find All Active Stains Of Type
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_StainBase_C*>*         StainsOfType                                           (Parm, OutParm)
// TArray<int32>*                          Indices                                                (Parm, OutParm)

void UBP_StainHolderComponent_C::Find_All_Active_Stains_Of_Type(EAttackType Type, TArray<class ABP_StainBase_C*>* StainsOfType, TArray<int32>* Indices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Find All Active Stains Of Type");

	Params::BP_StainHolderComponent_C_Find_All_Active_Stains_Of_Type Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (StainsOfType != nullptr)
		*StainsOfType = std::move(Parms.StainsOfType);

	if (Indices != nullptr)
		*Indices = std::move(Parms.Indices);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.FindStainsObjectsByQuantities
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EAttackType, int32>&         TargetMap                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TMap<EAttackType, int32>*               AvailableCountByType                                   (ConstParm, Parm, OutParm)
// bool*                                   CanAfford                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          StainIndexes                                           (Parm, OutParm)

void UBP_StainHolderComponent_C::FindStainsObjectsByQuantities(const TMap<EAttackType, int32>& TargetMap, TMap<EAttackType, int32>* AvailableCountByType, bool* CanAfford, TArray<int32>* StainIndexes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "FindStainsObjectsByQuantities");

	Params::BP_StainHolderComponent_C_FindStainsObjectsByQuantities Parms{};

	Parms.TargetMap = std::move(TargetMap);

	UObject::ProcessEvent(Func, &Parms);

	if (AvailableCountByType != nullptr)
		*AvailableCountByType = std::move(Parms.AvailableCountByType);

	if (CanAfford != nullptr)
		*CanAfford = Parms.CanAfford;

	if (StainIndexes != nullptr)
		*StainIndexes = std::move(Parms.StainIndexes);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.FindStainsSkillComponent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_Skill_C*            SkillDefinition                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_SkillDataComponent_StainsMechanic_C**StainSkillComponent                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::FindStainsSkillComponent(class UBP_DataAsset_Skill_C* SkillDefinition, class UBP_SkillDataComponent_StainsMechanic_C** StainSkillComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "FindStainsSkillComponent");

	Params::BP_StainHolderComponent_C_FindStainsSkillComponent Parms{};

	Parms.SkillDefinition = SkillDefinition;

	UObject::ProcessEvent(Func, &Parms);

	if (StainSkillComponent != nullptr)
		*StainSkillComponent = Parms.StainSkillComponent;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.FinishDeleteSlot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeletionIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::FinishDeleteSlot(int32 DeletionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "FinishDeleteSlot");

	Params::BP_StainHolderComponent_C_FinishDeleteSlot Parms{};

	Parms.DeletionIndex = DeletionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.FinishInsertSlot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InsertedIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::FinishInsertSlot(int32 InsertedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "FinishInsertSlot");

	Params::BP_StainHolderComponent_C_FinishInsertSlot Parms{};

	Parms.InsertedIndex = InsertedIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.FN_ApplyArrayRemap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>&                          NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<int32>&                          RemapTable                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_StainHolderComponent_C::FN_ApplyArrayRemap(TArray<int32>& NewParam, TArray<int32>& RemapTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "FN_ApplyArrayRemap");

	Params::BP_StainHolderComponent_C_FN_ApplyArrayRemap Parms{};

	Parms.NewParam = std::move(NewParam);
	Parms.RemapTable = std::move(RemapTable);

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);
	RemapTable = std::move(Parms.RemapTable);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.FN_ApplyMapRemap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const TMap<int32, double>&              InMap                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<int32, int32>&               RemapTable                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// TMap<int32, double>*                    OutMap                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::FN_ApplyMapRemap(const TMap<int32, double>& InMap, const TMap<int32, int32>& RemapTable, TMap<int32, double>* OutMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "FN_ApplyMapRemap");

	Params::BP_StainHolderComponent_C_FN_ApplyMapRemap Parms{};

	Parms.InMap = std::move(InMap);
	Parms.RemapTable = std::move(RemapTable);

	UObject::ProcessEvent(Func, &Parms);

	if (OutMap != nullptr)
		*OutMap = std::move(Parms.OutMap);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GenerateStainsFromSkill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Battle_SkillScript_C*         SkillScript                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GenerateStainsFromSkill(class ABP_Battle_SkillScript_C* SkillScript)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GenerateStainsFromSkill");

	Params::BP_StainHolderComponent_C_GenerateStainsFromSkill Parms{};

	Parms.SkillScript = SkillScript;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Get Active Stain Count By Type
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TMap<EAttackType, int32>*               Result                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::Get_Active_Stain_Count_By_Type(TMap<EAttackType, int32>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Get Active Stain Count By Type");

	Params::BP_StainHolderComponent_C_Get_Active_Stain_Count_By_Type Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Get N Stains
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Number                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NewestFirst                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    OldestFirst                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Random                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_StainBase_C*>          ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class ABP_StainBase_C*> UBP_StainHolderComponent_C::Get_N_Stains(int32 Number, bool NewestFirst, bool OldestFirst, bool Random)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Get N Stains");

	Params::BP_StainHolderComponent_C_Get_N_Stains Parms{};

	Parms.Number = Number;
	Parms.NewestFirst = NewestFirst;
	Parms.OldestFirst = OldestFirst;
	Parms.Random = Random;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Get Slot Width Multiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_StainHolderComponent_C::Get_Slot_Width_Multiplier(int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Get Slot Width Multiplier");

	Params::BP_StainHolderComponent_C_Get_Slot_Width_Multiplier Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Get Stain Class by Type
// (Public, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType                             ElementType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::Get_Stain_Class_by_Type(EAttackType ElementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Get Stain Class by Type");

	Params::BP_StainHolderComponent_C_Get_Stain_Class_by_Type Parms{};

	Parms.ElementType = ElementType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetActiveStains
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_StainBase_C*>*         Stains                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::GetActiveStains(TArray<class ABP_StainBase_C*>* Stains)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetActiveStains");

	Params::BP_StainHolderComponent_C_GetActiveStains Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stains != nullptr)
		*Stains = std::move(Parms.Stains);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetActiveStainsByType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_StainBase_C*>*         Stains                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::GetActiveStainsByType(EAttackType Type, TArray<class ABP_StainBase_C*>* Stains)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetActiveStainsByType");

	Params::BP_StainHolderComponent_C_GetActiveStainsByType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Stains != nullptr)
		*Stains = std::move(Parms.Stains);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetAllSlotsStartTimesAndWidth
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<double>*                         StartTimes                                             (Parm, OutParm)
// TArray<double>*                         Widths                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::GetAllSlotsStartTimesAndWidth(int32 Count, TArray<double>* StartTimes, TArray<double>* Widths)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetAllSlotsStartTimesAndWidth");

	Params::BP_StainHolderComponent_C_GetAllSlotsStartTimesAndWidth Parms{};

	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);

	if (StartTimes != nullptr)
		*StartTimes = std::move(Parms.StartTimes);

	if (Widths != nullptr)
		*Widths = std::move(Parms.Widths);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetCurrentStainQueue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<EAttackType>*                    Stains                                                 (Parm, OutParm)

void UBP_StainHolderComponent_C::GetCurrentStainQueue(TArray<EAttackType>* Stains)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetCurrentStainQueue");

	Params::BP_StainHolderComponent_C_GetCurrentStainQueue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stains != nullptr)
		*Stains = std::move(Parms.Stains);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetFirstAvailableSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GetFirstAvailableSlotIndex(int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetFirstAvailableSlotIndex");

	Params::BP_StainHolderComponent_C_GetFirstAvailableSlotIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetMaxElementType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EAttackType, int32>&         CountPerType                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// bool*                                   IsEmpty                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<EAttackType>*                    Types                                                  (Parm, OutParm)
// int32*                                  Count                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GetMaxElementType(const TMap<EAttackType, int32>& CountPerType, bool* IsEmpty, TArray<EAttackType>* Types, int32* Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetMaxElementType");

	Params::BP_StainHolderComponent_C_GetMaxElementType Parms{};

	Parms.CountPerType = std::move(CountPerType);

	UObject::ProcessEvent(Func, &Parms);

	if (IsEmpty != nullptr)
		*IsEmpty = Parms.IsEmpty;

	if (Types != nullptr)
		*Types = std::move(Parms.Types);

	if (Count != nullptr)
		*Count = Parms.Count;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetMaxSlotsCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_StainHolderComponent_C::GetMaxSlotsCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetMaxSlotsCount");

	Params::BP_StainHolderComponent_C_GetMaxSlotsCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetNextRandomStainToRemove
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Random                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_StainBase_C**                 OutItem                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GetNextRandomStainToRemove(bool Random, class ABP_StainBase_C** OutItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetNextRandomStainToRemove");

	Params::BP_StainHolderComponent_C_GetNextRandomStainToRemove Parms{};

	Parms.Random = Random;

	UObject::ProcessEvent(Func, &Parms);

	if (OutItem != nullptr)
		*OutItem = Parms.OutItem;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetSplineSlotBounds
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   SlotCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 StartTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 EndTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GetSplineSlotBounds(class USplineComponent* Spline, int32 SlotCount, double* StartTime, double* EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetSplineSlotBounds");

	Params::BP_StainHolderComponent_C_GetSplineSlotBounds Parms{};

	Parms.Spline = Spline;
	Parms.SlotCount = SlotCount;

	UObject::ProcessEvent(Func, &Parms);

	if (StartTime != nullptr)
		*StartTime = Parms.StartTime;

	if (EndTime != nullptr)
		*EndTime = Parms.EndTime;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetStainCountOfType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             StainType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  StainCount                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GetStainCountOfType(EAttackType StainType, int32* StainCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetStainCountOfType");

	Params::BP_StainHolderComponent_C_GetStainCountOfType Parms{};

	Parms.StainType = StainType;

	UObject::ProcessEvent(Func, &Parms);

	if (StainCount != nullptr)
		*StainCount = Parms.StainCount;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetValidStainsTypes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<EAttackType>*                    StainsArray                                            (Parm, OutParm)

void UBP_StainHolderComponent_C::GetValidStainsTypes(TArray<EAttackType>* StainsArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetValidStainsTypes");

	Params::BP_StainHolderComponent_C_GetValidStainsTypes Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StainsArray != nullptr)
		*StainsArray = std::move(Parms.StainsArray);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetWeaponActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_WeaponSkin_Lune_Base_C**      WeaponActor                                            (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::GetWeaponActor(class ABP_WeaponSkin_Lune_Base_C** WeaponActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetWeaponActor");

	Params::BP_StainHolderComponent_C_GetWeaponActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponActor != nullptr)
		*WeaponActor = Parms.WeaponActor;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.GetWidthPerSlot
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_StainHolderComponent_C::GetWidthPerSlot()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "GetWidthPerSlot");

	Params::BP_StainHolderComponent_C_GetWidthPerSlot Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Has All Types for Void
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EAttackType, int32>&         CountPerType                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// bool*                                   hasVoid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::Has_All_Types_for_Void(const TMap<EAttackType, int32>& CountPerType, bool* hasVoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Has All Types for Void");

	Params::BP_StainHolderComponent_C_Has_All_Types_for_Void Parms{};

	Parms.CountPerType = std::move(CountPerType);

	UObject::ProcessEvent(Func, &Parms);

	if (hasVoid != nullptr)
		*hasVoid = Parms.hasVoid;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.HasOverchargedSkill
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_StainHolderComponent_C::HasOverchargedSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "HasOverchargedSkill");

	Params::BP_StainHolderComponent_C_HasOverchargedSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.HasStainQuantities
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const TMap<EAttackType, int32>&         StainQuantities                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_StainHolderComponent_C::HasStainQuantities(const TMap<EAttackType, int32>& StainQuantities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "HasStainQuantities");

	Params::BP_StainHolderComponent_C_HasStainQuantities Parms{};

	Parms.StainQuantities = std::move(StainQuantities);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.InsertStain
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             StainType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::InsertStain(EAttackType StainType, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "InsertStain");

	Params::BP_StainHolderComponent_C_InsertStain Parms{};

	Parms.StainType = StainType;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Is Valid to Create Stain Type
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType                             StainType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Valid                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::Is_Valid_to_Create_Stain_Type(EAttackType StainType, bool* Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Is Valid to Create Stain Type");

	Params::BP_StainHolderComponent_C_Is_Valid_to_Create_Stain_Type Parms{};

	Parms.StainType = StainType;

	UObject::ProcessEvent(Func, &Parms);

	if (Valid != nullptr)
		*Valid = Parms.Valid;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnBattleFinished
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Victory                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::OnBattleFinished(bool Victory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnBattleFinished");

	Params::BP_StainHolderComponent_C_OnBattleFinished Parms{};

	Parms.Victory = Victory;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnOwnerKilled
// (BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::OnOwnerKilled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnOwnerKilled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnResetBattleActionValidation
// (BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::OnResetBattleActionValidation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnResetBattleActionValidation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnStainConsumed
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TMap<EAttackType, int32>&         ConsumedStains                                         (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_StainHolderComponent_C::OnStainConsumed(EStainChangeReason Reason, const TMap<EAttackType, int32>& ConsumedStains)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnStainConsumed");

	Params::BP_StainHolderComponent_C_OnStainConsumed Parms{};

	Parms.Reason = Reason;
	Parms.ConsumedStains = std::move(ConsumedStains);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnStainsChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EAttackType, int32>&         GainedStains                                           (BlueprintVisible, BlueprintReadOnly, Parm)
// const TMap<EAttackType, int32>&         LostStains                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// EStainChangeReason                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::OnStainsChanged(const TMap<EAttackType, int32>& GainedStains, const TMap<EAttackType, int32>& LostStains, EStainChangeReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnStainsChanged");

	Params::BP_StainHolderComponent_C_OnStainsChanged Parms{};

	Parms.GainedStains = std::move(GainedStains);
	Parms.LostStains = std::move(LostStains);
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnTurnEnd
// (BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::OnTurnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnTurnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OnTurnStart
// (BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::OnTurnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OnTurnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.OverrideStainCreatedFromSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             NewStainType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackType*                            OverridenStainType                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::OverrideStainCreatedFromSkill(EAttackType NewStainType, EAttackType* OverridenStainType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "OverrideStainCreatedFromSkill");

	Params::BP_StainHolderComponent_C_OverrideStainCreatedFromSkill Parms{};

	Parms.NewStainType = NewStainType;

	UObject::ProcessEvent(Func, &Parms);

	if (OverridenStainType != nullptr)
		*OverridenStainType = Parms.OverridenStainType;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.PrintDebugText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::PrintDebugText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "PrintDebugText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_StainHolderComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ReceiveEndPlay");

	Params::BP_StainHolderComponent_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.RefreshWeaponActor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::RefreshWeaponActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "RefreshWeaponActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.ResetStains
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::ResetStains()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "ResetStains");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Sandfall_AddStain
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Element                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::Sandfall_AddStain(const class FString& Element, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Sandfall_AddStain");

	Params::BP_StainHolderComponent_C_Sandfall_AddStain Parms{};

	Parms.Element = std::move(Element);
	Parms.Count = Count;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.SetIsOverchargedWithDarkStains
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::SetIsOverchargedWithDarkStains()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "SetIsOverchargedWithDarkStains");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Shift Array By Array
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<int32>&                          IndexArray                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   FirstIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LastIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShiftAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<int32, int32>*                     RemapTable                                             (Parm, OutParm)

void UBP_StainHolderComponent_C::Shift_Array_By_Array(TArray<int32>& IndexArray, int32 FirstIndex, int32 LastIndex, int32 ShiftAmount, TMap<int32, int32>* RemapTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Shift Array By Array");

	Params::BP_StainHolderComponent_C_Shift_Array_By_Array Parms{};

	Parms.IndexArray = std::move(IndexArray);
	Parms.FirstIndex = FirstIndex;
	Parms.LastIndex = LastIndex;
	Parms.ShiftAmount = ShiftAmount;

	UObject::ProcessEvent(Func, &Parms);

	IndexArray = std::move(Parms.IndexArray);

	if (RemapTable != nullptr)
		*RemapTable = std::move(Parms.RemapTable);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Shift Array By Indices
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   FirstIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   LastIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShiftFirstIndex                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShiftLastIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   ShiftAmount                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<int32, int32>*                     RemapTable                                             (Parm, OutParm)

void UBP_StainHolderComponent_C::Shift_Array_By_Indices(int32 FirstIndex, int32 LastIndex, int32 ShiftFirstIndex, int32 ShiftLastIndex, int32 ShiftAmount, TMap<int32, int32>* RemapTable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Shift Array By Indices");

	Params::BP_StainHolderComponent_C_Shift_Array_By_Indices Parms{};

	Parms.FirstIndex = FirstIndex;
	Parms.LastIndex = LastIndex;
	Parms.ShiftFirstIndex = ShiftFirstIndex;
	Parms.ShiftLastIndex = ShiftLastIndex;
	Parms.ShiftAmount = ShiftAmount;

	UObject::ProcessEvent(Func, &Parms);

	if (RemapTable != nullptr)
		*RemapTable = std::move(Parms.RemapTable);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.SlotIndexToStainIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   SlotIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  StainIndex                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::SlotIndexToStainIndex(int32 SlotIndex, int32* StainIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "SlotIndexToStainIndex");

	Params::BP_StainHolderComponent_C_SlotIndexToStainIndex Parms{};

	Parms.SlotIndex = SlotIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (StainIndex != nullptr)
		*StainIndex = Parms.StainIndex;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.SortArrayOfInts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UOrderingResult*                  OrderingResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::SortArrayOfInts(int32 A, int32 B, class UOrderingResult* OrderingResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "SortArrayOfInts");

	Params::BP_StainHolderComponent_C_SortArrayOfInts Parms{};

	Parms.A = A;
	Parms.B = B;
	Parms.OrderingResult = OrderingResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.StainIndexToSlotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   StainIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::StainIndexToSlotIndex(int32 StainIndex, int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "StainIndexToSlotIndex");

	Params::BP_StainHolderComponent_C_StainIndexToSlotIndex Parms{};

	Parms.StainIndex = StainIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.StartDeleteSlot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeleteAtSlotIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::StartDeleteSlot(int32 DeleteAtSlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "StartDeleteSlot");

	Params::BP_StainHolderComponent_C_StartDeleteSlot Parms{};

	Parms.DeleteAtSlotIndex = DeleteAtSlotIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.StartInsertSlot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   InsertAtIndex                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::StartInsertSlot(int32 InsertAtIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "StartInsertSlot");

	Params::BP_StainHolderComponent_C_StartInsertSlot Parms{};

	Parms.InsertAtIndex = InsertAtIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.Test
// (BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::Test()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "Test");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.TryConsumeOverchargeStainsFromSkill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Battle_SkillScript_C*         SkillScript                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::TryConsumeOverchargeStainsFromSkill(class ABP_Battle_SkillScript_C* SkillScript)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "TryConsumeOverchargeStainsFromSkill");

	Params::BP_StainHolderComponent_C_TryConsumeOverchargeStainsFromSkill Parms{};

	Parms.SkillScript = SkillScript;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.UpdateOverpoweredMechanic
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::UpdateOverpoweredMechanic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "UpdateOverpoweredMechanic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.UpdateSlotAnimations
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::UpdateSlotAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "UpdateSlotAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.UpdateSlotLocations
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_StainHolderComponent_C::UpdateSlotLocations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "UpdateSlotLocations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_StainHolderComponent.BP_StainHolderComponent_C.UpdateStainQueueInitialIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32*                                  StainQueueInitialIndex                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_StainHolderComponent_C::UpdateStainQueueInitialIndex(int32* StainQueueInitialIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_StainHolderComponent_C", "UpdateStainQueueInitialIndex");

	Params::BP_StainHolderComponent_C_UpdateStainQueueInitialIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StainQueueInitialIndex != nullptr)
		*StainQueueInitialIndex = Parms.StainQueueInitialIndex;
}

}

