#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateTreeModule

#include "Basic.hpp"

#include "AIModule_classes.hpp"
#include "StateTreeModule_structs.hpp"
#include "StateTreeModule_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class GameplayStateTreeModule.BTTask_RunDynamicStateTree
// 0x0058 (0x00C8 - 0x0070)
class UBTTask_RunDynamicStateTree final : public UBTTaskNode
{
public:
	struct FStateTreeReference                    StateTreeRef;                                      // 0x0070(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FStateTreeInstanceData                 InstanceData;                                      // 0x0098(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           InjectionTag;                                      // 0x00A8(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_RunDynamicStateTree">();
	}
	static class UBTTask_RunDynamicStateTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_RunDynamicStateTree>();
	}
};
static_assert(alignof(UBTTask_RunDynamicStateTree) == 0x000008, "Wrong alignment on UBTTask_RunDynamicStateTree");
static_assert(sizeof(UBTTask_RunDynamicStateTree) == 0x0000C8, "Wrong size on UBTTask_RunDynamicStateTree");
static_assert(offsetof(UBTTask_RunDynamicStateTree, StateTreeRef) == 0x000070, "Member 'UBTTask_RunDynamicStateTree::StateTreeRef' has a wrong offset!");
static_assert(offsetof(UBTTask_RunDynamicStateTree, InstanceData) == 0x000098, "Member 'UBTTask_RunDynamicStateTree::InstanceData' has a wrong offset!");
static_assert(offsetof(UBTTask_RunDynamicStateTree, InjectionTag) == 0x0000A8, "Member 'UBTTask_RunDynamicStateTree::InjectionTag' has a wrong offset!");

// Class GameplayStateTreeModule.BTTask_RunStateTree
// 0x0048 (0x00B8 - 0x0070)
class UBTTask_RunStateTree final : public UBTTaskNode
{
public:
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTreeReference                    StateTreeRef;                                      // 0x0078(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FStateTreeInstanceData                 InstanceData;                                      // 0x00A0(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	float                                         Interval;                                          // 0x00B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RandomDeviation;                                   // 0x00B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTTask_RunStateTree">();
	}
	static class UBTTask_RunStateTree* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_RunStateTree>();
	}
};
static_assert(alignof(UBTTask_RunStateTree) == 0x000008, "Wrong alignment on UBTTask_RunStateTree");
static_assert(sizeof(UBTTask_RunStateTree) == 0x0000B8, "Wrong size on UBTTask_RunStateTree");
static_assert(offsetof(UBTTask_RunStateTree, StateTreeRef) == 0x000078, "Member 'UBTTask_RunStateTree::StateTreeRef' has a wrong offset!");
static_assert(offsetof(UBTTask_RunStateTree, InstanceData) == 0x0000A0, "Member 'UBTTask_RunStateTree::InstanceData' has a wrong offset!");
static_assert(offsetof(UBTTask_RunStateTree, Interval) == 0x0000B0, "Member 'UBTTask_RunStateTree::Interval' has a wrong offset!");
static_assert(offsetof(UBTTask_RunStateTree, RandomDeviation) == 0x0000B4, "Member 'UBTTask_RunStateTree::RandomDeviation' has a wrong offset!");

// Class GameplayStateTreeModule.StateTreeComponent
// 0x0068 (0x0160 - 0x00F8)
class UStateTreeComponent : public UBrainComponent
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EStateTreeRunStatus StateTreeRunStatus)> OnStateTreeRunStatusChanged; // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FStateTreeReference                    StateTreeRef;                                      // 0x0118(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	bool                                          bStartLogicAutomatically;                          // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateTreeInstanceData                 InstanceData;                                      // 0x0148(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_158[0x8];                                      // 0x0158(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SendStateTreeEvent(const struct FStateTreeEvent& Event);
	void SetStartLogicAutomatically(const bool bInStartLogicAutomatically);

	EStateTreeRunStatus GetStateTreeRunStatus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeComponent">();
	}
	static class UStateTreeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeComponent>();
	}
};
static_assert(alignof(UStateTreeComponent) == 0x000008, "Wrong alignment on UStateTreeComponent");
static_assert(sizeof(UStateTreeComponent) == 0x000160, "Wrong size on UStateTreeComponent");
static_assert(offsetof(UStateTreeComponent, OnStateTreeRunStatusChanged) == 0x000108, "Member 'UStateTreeComponent::OnStateTreeRunStatusChanged' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, StateTreeRef) == 0x000118, "Member 'UStateTreeComponent::StateTreeRef' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, bStartLogicAutomatically) == 0x000140, "Member 'UStateTreeComponent::bStartLogicAutomatically' has a wrong offset!");
static_assert(offsetof(UStateTreeComponent, InstanceData) == 0x000148, "Member 'UStateTreeComponent::InstanceData' has a wrong offset!");

// Class GameplayStateTreeModule.StateTreeAIComponent
// 0x0000 (0x0160 - 0x0160)
class UStateTreeAIComponent final : public UStateTreeComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeAIComponent">();
	}
	static class UStateTreeAIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeAIComponent>();
	}
};
static_assert(alignof(UStateTreeAIComponent) == 0x000008, "Wrong alignment on UStateTreeAIComponent");
static_assert(sizeof(UStateTreeAIComponent) == 0x000160, "Wrong size on UStateTreeAIComponent");

// Class GameplayStateTreeModule.StateTreeComponentSchema
// 0x0030 (0x0058 - 0x0028)
class UStateTreeComponentSchema : public UStateTreeSchema
{
public:
	TSubclassOf<class AActor>                     ContextActorClass;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FStateTreeExternalDataDesc             ContextActorDataDesc;                              // 0x0030(0x0018)(NoDestructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FStateTreeExternalDataDesc>     ContextDataDescs;                                  // 0x0048(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeComponentSchema">();
	}
	static class UStateTreeComponentSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeComponentSchema>();
	}
};
static_assert(alignof(UStateTreeComponentSchema) == 0x000008, "Wrong alignment on UStateTreeComponentSchema");
static_assert(sizeof(UStateTreeComponentSchema) == 0x000058, "Wrong size on UStateTreeComponentSchema");
static_assert(offsetof(UStateTreeComponentSchema, ContextActorClass) == 0x000028, "Member 'UStateTreeComponentSchema::ContextActorClass' has a wrong offset!");
static_assert(offsetof(UStateTreeComponentSchema, ContextActorDataDesc) == 0x000030, "Member 'UStateTreeComponentSchema::ContextActorDataDesc' has a wrong offset!");
static_assert(offsetof(UStateTreeComponentSchema, ContextDataDescs) == 0x000048, "Member 'UStateTreeComponentSchema::ContextDataDescs' has a wrong offset!");

// Class GameplayStateTreeModule.StateTreeAIComponentSchema
// 0x0008 (0x0060 - 0x0058)
class UStateTreeAIComponentSchema final : public UStateTreeComponentSchema
{
public:
	TSubclassOf<class AAIController>              AIControllerClass;                                 // 0x0058(0x0008)(Edit, ZeroConstructor, NoClear, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StateTreeAIComponentSchema">();
	}
	static class UStateTreeAIComponentSchema* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStateTreeAIComponentSchema>();
	}
};
static_assert(alignof(UStateTreeAIComponentSchema) == 0x000008, "Wrong alignment on UStateTreeAIComponentSchema");
static_assert(sizeof(UStateTreeAIComponentSchema) == 0x000060, "Wrong size on UStateTreeAIComponentSchema");
static_assert(offsetof(UStateTreeAIComponentSchema, AIControllerClass) == 0x000058, "Member 'UStateTreeAIComponentSchema::AIControllerClass' has a wrong offset!");

}

