#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_jRPG_BattleEndCharacterSlot

#include "Basic.hpp"

#include "E_jRPG_StatType_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_jRPG_BattleEndCharacterSlot.WBP_jRPG_BattleEndCharacterSlot_C
// 0x0138 (0x0418 - 0x02E0)
class UWBP_jRPG_BattleEndCharacterSlot_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_OpenMenu;                                     // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_LevelUpColorfulBlinking;                      // 0x02F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBorder*                                Border_0;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                Border_Stats;                                      // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_CharacterIcon;                               // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LevelUpFX;                                         // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UProgressBar*                           ProgressBar_XP;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_Level;                                   // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_LevelUp;                                 // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_XPToNext;                                // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_CriticalPower;                   // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_CriticalRate;                    // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_Defence;                         // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_Evasion;                         // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_HP;                              // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_Initiative;                      // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_MP;                              // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_jRPG_StatSlot_C*                   WBP_jRPG_StatSlot_Power;                           // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWBP_jRPG_StatSlot_C*>           CharacterStatSlots;                                // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<E_jRPG_StatType, double>                 InitialStats;                                      // 0x0388(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         InitialLevel;                                      // 0x03D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AssignedCharacter;                                 // 0x03DC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	int32                                         CurrentLevelInterpolation;                         // 0x03E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetLevelInterpolation;                          // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentXPInterpolation;                            // 0x03EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TargetXPInterpolation;                             // 0x03F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterpolateBarFilling_;                            // 0x03F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3F5[0x3];                                      // 0x03F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LerpFrom;                                          // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpTo;                                            // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextBlock*                             TextBlock_LevelUp_0;                               // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LevelUpSound;                                      // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateTimer();
	void CheckForLevelUp();
	void Construct();
	void ExecuteUbergraph_WBP_jRPG_BattleEndCharacterSlot(int32 EntryPoint);
	void InterpolateGainedXP(int32 TargetLevel, int32 TargetXP);
	void ShowLevelUpStatsComparison();
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void UpdateCharacterImage(class UTexture2D* CharacterIcon);
	void UpdateCharacterStats(const TMap<E_jRPG_StatType, double>& CharacterStats);
	void UpdateDataIncludingLevelUp(int32 CurrentLevel, int32 CurrentExperience);
	void UpdateLevelAndXP(int32 CurrentLevel, int32 CurrentXP);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_jRPG_BattleEndCharacterSlot_C">();
	}
	static class UWBP_jRPG_BattleEndCharacterSlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_jRPG_BattleEndCharacterSlot_C>();
	}
};
static_assert(alignof(UWBP_jRPG_BattleEndCharacterSlot_C) == 0x000008, "Wrong alignment on UWBP_jRPG_BattleEndCharacterSlot_C");
static_assert(sizeof(UWBP_jRPG_BattleEndCharacterSlot_C) == 0x000418, "Wrong size on UWBP_jRPG_BattleEndCharacterSlot_C");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, Anim_OpenMenu) == 0x0002E8, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::Anim_OpenMenu' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, Anim_LevelUpColorfulBlinking) == 0x0002F0, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::Anim_LevelUpColorfulBlinking' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, Border_0) == 0x0002F8, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::Border_0' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, Border_Stats) == 0x000300, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::Border_Stats' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, Image_CharacterIcon) == 0x000308, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::Image_CharacterIcon' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, LevelUpFX) == 0x000310, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::LevelUpFX' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, ProgressBar_XP) == 0x000318, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::ProgressBar_XP' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, TextBlock_Level) == 0x000320, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::TextBlock_Level' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, TextBlock_LevelUp) == 0x000328, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::TextBlock_LevelUp' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, TextBlock_XPToNext) == 0x000330, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::TextBlock_XPToNext' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_CriticalPower) == 0x000338, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_CriticalPower' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_CriticalRate) == 0x000340, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_CriticalRate' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_Defence) == 0x000348, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_Defence' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_Evasion) == 0x000350, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_Evasion' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_HP) == 0x000358, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_HP' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_Initiative) == 0x000360, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_Initiative' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_MP) == 0x000368, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_MP' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, WBP_jRPG_StatSlot_Power) == 0x000370, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::WBP_jRPG_StatSlot_Power' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, CharacterStatSlots) == 0x000378, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::CharacterStatSlots' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, InitialStats) == 0x000388, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::InitialStats' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, InitialLevel) == 0x0003D8, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::InitialLevel' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, AssignedCharacter) == 0x0003DC, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::AssignedCharacter' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, CurrentLevelInterpolation) == 0x0003E4, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::CurrentLevelInterpolation' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, TargetLevelInterpolation) == 0x0003E8, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::TargetLevelInterpolation' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, CurrentXPInterpolation) == 0x0003EC, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::CurrentXPInterpolation' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, TargetXPInterpolation) == 0x0003F0, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::TargetXPInterpolation' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, InterpolateBarFilling_) == 0x0003F4, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::InterpolateBarFilling_' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, LerpFrom) == 0x0003F8, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::LerpFrom' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, LerpTo) == 0x000400, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::LerpTo' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, TextBlock_LevelUp_0) == 0x000408, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::TextBlock_LevelUp_0' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_BattleEndCharacterSlot_C, LevelUpSound) == 0x000410, "Member 'UWBP_jRPG_BattleEndCharacterSlot_C::LevelUpSound' has a wrong offset!");

}

