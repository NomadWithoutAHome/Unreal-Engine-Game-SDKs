#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BattleInput_EnemyTurn

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C
// 0x0070 (0x0350 - 0x02E0)
class UWBP_BattleInput_EnemyTurn_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_Appear;                                       // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UOverlay*                               DodgeTutorialHighlightArea;                        // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               GradientTutorialHighlightArea;                     // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_190;                                         // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               JumpTutorialHighlightArea;                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               ParryTutorialHighlightArea;                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_BattleInputContainer_C*            WBP_BattleInputContainer;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DefenseButton_C*               WBP_HUD_DefenseButton_Dodge;                       // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DefenseButton_C*               WBP_HUD_DefenseButton_Gradient;                    // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DefenseButton_C*               WBP_HUD_DefenseButton_Jump;                        // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DefenseButton_C*               WBP_HUD_DefenseButton_Parry;                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       CharacterBattleBaseReference;                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked;                                          // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLastLockResolved;                                // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Appear();
	void DefensiveMoveEnd();
	void DodgeStart();
	void ExecuteUbergraph_WBP_BattleInput_EnemyTurn(int32 EntryPoint);
	void OnJumpStart(class ABP_jRPG_Character_Battle_Base_C* Character);
	void OnLockEnd();
	void OnLockStart();
	void ParryStart();
	void SetCurrentCharacter(class ABP_jRPG_Character_Battle_Base_C* CharacterBattleBaseReference_0);
	void UpdateUnlockedFeatures();
	void UpdateVisibilityAndBindingsFromTargets(const TArray<class ABP_jRPG_Character_Battle_Base_C*>& Targets, bool* IsVisible_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_BattleInput_EnemyTurn_C">();
	}
	static class UWBP_BattleInput_EnemyTurn_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_BattleInput_EnemyTurn_C>();
	}
};
static_assert(alignof(UWBP_BattleInput_EnemyTurn_C) == 0x000008, "Wrong alignment on UWBP_BattleInput_EnemyTurn_C");
static_assert(sizeof(UWBP_BattleInput_EnemyTurn_C) == 0x000350, "Wrong size on UWBP_BattleInput_EnemyTurn_C");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_BattleInput_EnemyTurn_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, Anim_Appear) == 0x0002E8, "Member 'UWBP_BattleInput_EnemyTurn_C::Anim_Appear' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, DodgeTutorialHighlightArea) == 0x0002F0, "Member 'UWBP_BattleInput_EnemyTurn_C::DodgeTutorialHighlightArea' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, GradientTutorialHighlightArea) == 0x0002F8, "Member 'UWBP_BattleInput_EnemyTurn_C::GradientTutorialHighlightArea' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, Image_190) == 0x000300, "Member 'UWBP_BattleInput_EnemyTurn_C::Image_190' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, JumpTutorialHighlightArea) == 0x000308, "Member 'UWBP_BattleInput_EnemyTurn_C::JumpTutorialHighlightArea' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, ParryTutorialHighlightArea) == 0x000310, "Member 'UWBP_BattleInput_EnemyTurn_C::ParryTutorialHighlightArea' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, WBP_BattleInputContainer) == 0x000318, "Member 'UWBP_BattleInput_EnemyTurn_C::WBP_BattleInputContainer' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, WBP_HUD_DefenseButton_Dodge) == 0x000320, "Member 'UWBP_BattleInput_EnemyTurn_C::WBP_HUD_DefenseButton_Dodge' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, WBP_HUD_DefenseButton_Gradient) == 0x000328, "Member 'UWBP_BattleInput_EnemyTurn_C::WBP_HUD_DefenseButton_Gradient' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, WBP_HUD_DefenseButton_Jump) == 0x000330, "Member 'UWBP_BattleInput_EnemyTurn_C::WBP_HUD_DefenseButton_Jump' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, WBP_HUD_DefenseButton_Parry) == 0x000338, "Member 'UWBP_BattleInput_EnemyTurn_C::WBP_HUD_DefenseButton_Parry' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, CharacterBattleBaseReference) == 0x000340, "Member 'UWBP_BattleInput_EnemyTurn_C::CharacterBattleBaseReference' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, IsLocked) == 0x000348, "Member 'UWBP_BattleInput_EnemyTurn_C::IsLocked' has a wrong offset!");
static_assert(offsetof(UWBP_BattleInput_EnemyTurn_C, IsLastLockResolved) == 0x000349, "Member 'UWBP_BattleInput_EnemyTurn_C::IsLastLockResolved' has a wrong offset!");

}

