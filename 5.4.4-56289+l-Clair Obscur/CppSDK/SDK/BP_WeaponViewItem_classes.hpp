#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponViewItem

#include "Basic.hpp"

#include "S_jRPG_Item_DynamicData_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeaponViewItem.BP_WeaponViewItem_C
// 0x0170 (0x0198 - 0x0028)
class UBP_WeaponViewItem_C final : public UObject
{
public:
	struct FS_jRPG_Item_DynamicData               ItemDynamicData;                                   // 0x0028(0x0138)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, ExposeOnSpawn, HasGetValueTypeHash)
	class UBP_CharacterData_C*                    CurrentCharacterData;                              // 0x0160(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UBP_ItemUpgradeSystem_C*                ItemUpgradeSystem;                                 // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool IsEquipped)> OnWeaponEquippedChanged;                         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bIsBeingUpgraded;                                  // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool IsBeingUpgraded)> OnIsBeingUpgradedChanged;                   // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	bool Can_be_Upgraded(class UAC_jRPG_InventoryManager_C* InventoryManager, int32 MaxUpgradeLevel);
	void GetGearWeaponInstance(class UBP_ItemInstance_Gear_Weapon_C** Gear_Weapon_Instance_);
	void GetItemDynamicData(struct FS_jRPG_Item_DynamicData* ItemDynamicData_0);
	void GetOwnerData(class UBP_CharacterData_C** OwnerData);
	bool IsBeingUpgraded();
	void TriggerIsBeingUpgradedChanged(bool bIsBeingUpgraded_0);
	void TriggerWeaponEquippedChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeaponViewItem_C">();
	}
	static class UBP_WeaponViewItem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WeaponViewItem_C>();
	}
};
static_assert(alignof(UBP_WeaponViewItem_C) == 0x000008, "Wrong alignment on UBP_WeaponViewItem_C");
static_assert(sizeof(UBP_WeaponViewItem_C) == 0x000198, "Wrong size on UBP_WeaponViewItem_C");
static_assert(offsetof(UBP_WeaponViewItem_C, ItemDynamicData) == 0x000028, "Member 'UBP_WeaponViewItem_C::ItemDynamicData' has a wrong offset!");
static_assert(offsetof(UBP_WeaponViewItem_C, CurrentCharacterData) == 0x000160, "Member 'UBP_WeaponViewItem_C::CurrentCharacterData' has a wrong offset!");
static_assert(offsetof(UBP_WeaponViewItem_C, ItemUpgradeSystem) == 0x000168, "Member 'UBP_WeaponViewItem_C::ItemUpgradeSystem' has a wrong offset!");
static_assert(offsetof(UBP_WeaponViewItem_C, OnWeaponEquippedChanged) == 0x000170, "Member 'UBP_WeaponViewItem_C::OnWeaponEquippedChanged' has a wrong offset!");
static_assert(offsetof(UBP_WeaponViewItem_C, bIsBeingUpgraded) == 0x000180, "Member 'UBP_WeaponViewItem_C::bIsBeingUpgraded' has a wrong offset!");
static_assert(offsetof(UBP_WeaponViewItem_C, OnIsBeingUpgradedChanged) == 0x000188, "Member 'UBP_WeaponViewItem_C::OnIsBeingUpgradedChanged' has a wrong offset!");

}

