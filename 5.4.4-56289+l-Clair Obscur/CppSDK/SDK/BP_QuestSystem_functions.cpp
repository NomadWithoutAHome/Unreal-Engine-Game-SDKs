#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QuestSystem

#include "Basic.hpp"

#include "BP_QuestSystem_classes.hpp"
#include "BP_QuestSystem_parameters.hpp"


namespace SDK
{

// Function BP_QuestSystem.BP_QuestSystem_C.ASSERT_InvalidDebugReason
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::ASSERT_InvalidDebugReason(class FName QuestName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "ASSERT_InvalidDebugReason");

	Params::BP_QuestSystem_C_ASSERT_InvalidDebugReason Parms{};

	Parms.QuestName = QuestName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestSystem.BP_QuestSystem_C.ASSERT_ObjectiveNotFound
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ObjectiveName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::ASSERT_ObjectiveNotFound(class FName QuestName, class FName ObjectiveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "ASSERT_ObjectiveNotFound");

	Params::BP_QuestSystem_C_ASSERT_ObjectiveNotFound Parms{};

	Parms.QuestName = QuestName;
	Parms.ObjectiveName = ObjectiveName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestSystem.BP_QuestSystem_C.ASSERT_QuestNotFound
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::ASSERT_QuestNotFound(class FName QuestName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "ASSERT_QuestNotFound");

	Params::BP_QuestSystem_C_ASSERT_QuestNotFound Parms{};

	Parms.QuestName = QuestName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestSystem.BP_QuestSystem_C.FindQuestStatusData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName&                            QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_QuestStatusData*              Status                                                 (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::FindQuestStatusData(class FName& QuestName, struct FS_QuestStatusData* Status, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "FindQuestStatusData");

	Params::BP_QuestSystem_C_FindQuestStatusData Parms{};

	Parms.QuestName = QuestName;

	UObject::ProcessEvent(Func, &Parms);

	QuestName = Parms.QuestName;

	if (Status != nullptr)
		*Status = std::move(Parms.Status);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_QuestSystem.BP_QuestSystem_C.GetObjectiveList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName&                            QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FQuestObjectiveIdentifier>*Objectives                                             (Parm, OutParm)

void UBP_QuestSystem_C::GetObjectiveList(class FName& QuestName, TArray<struct FQuestObjectiveIdentifier>* Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "GetObjectiveList");

	Params::BP_QuestSystem_C_GetObjectiveList Parms{};

	Parms.QuestName = QuestName;

	UObject::ProcessEvent(Func, &Parms);

	QuestName = Parms.QuestName;

	if (Objectives != nullptr)
		*Objectives = std::move(Parms.Objectives);
}


// Function BP_QuestSystem.BP_QuestSystem_C.GetObjectiveStatus
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FQuestObjectiveIdentifier&       QuestObjective                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// E_QuestStatus*                          Status                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::GetObjectiveStatus(struct FQuestObjectiveIdentifier& QuestObjective, E_QuestStatus* Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "GetObjectiveStatus");

	Params::BP_QuestSystem_C_GetObjectiveStatus Parms{};

	Parms.QuestObjective = std::move(QuestObjective);

	UObject::ProcessEvent(Func, &Parms);

	QuestObjective = std::move(Parms.QuestObjective);

	if (Status != nullptr)
		*Status = Parms.Status;
}


// Function BP_QuestSystem.BP_QuestSystem_C.GetQuestList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FName>*                    Quests                                                 (Parm, OutParm)

void UBP_QuestSystem_C::GetQuestList(TArray<class FName>* Quests)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "GetQuestList");

	Params::BP_QuestSystem_C_GetQuestList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Quests != nullptr)
		*Quests = std::move(Parms.Quests);
}


// Function BP_QuestSystem.BP_QuestSystem_C.GetQuestStatus
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName&                            QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_QuestStatus*                          Status                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::GetQuestStatus(class FName& QuestName, E_QuestStatus* Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "GetQuestStatus");

	Params::BP_QuestSystem_C_GetQuestStatus Parms{};

	Parms.QuestName = QuestName;

	UObject::ProcessEvent(Func, &Parms);

	QuestName = Parms.QuestName;

	if (Status != nullptr)
		*Status = Parms.Status;
}


// Function BP_QuestSystem.BP_QuestSystem_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_QuestSystem_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestSystem.BP_QuestSystem_C.LoadState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FS_QuestStatusData>&InQuestStatuses                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_QuestSystem_C::LoadState(TMap<class FName, struct FS_QuestStatusData>& InQuestStatuses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "LoadState");

	Params::BP_QuestSystem_C_LoadState Parms{};

	Parms.InQuestStatuses = std::move(InQuestStatuses);

	UObject::ProcessEvent(Func, &Parms);

	InQuestStatuses = std::move(Parms.InQuestStatuses);
}


// Function BP_QuestSystem.BP_QuestSystem_C.ResetAllActivities
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QuestSystem_C::ResetAllActivities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "ResetAllActivities");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestSystem.BP_QuestSystem_C.ResetState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QuestSystem_C::ResetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "ResetState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QuestSystem.BP_QuestSystem_C.SaveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FName, struct FS_QuestStatusData>&InQuestStatuses                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_QuestSystem_C::SaveState(TMap<class FName, struct FS_QuestStatusData>& InQuestStatuses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "SaveState");

	Params::BP_QuestSystem_C_SaveState Parms{};

	Parms.InQuestStatuses = std::move(InQuestStatuses);

	UObject::ProcessEvent(Func, &Parms);

	InQuestStatuses = std::move(Parms.InQuestStatuses);
}


// Function BP_QuestSystem.BP_QuestSystem_C.SetObjectiveStatus
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FQuestObjectiveIdentifier&       QuestObjective                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor)
// E_QuestStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::SetObjectiveStatus(struct FQuestObjectiveIdentifier& QuestObjective, E_QuestStatus Status, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "SetObjectiveStatus");

	Params::BP_QuestSystem_C_SetObjectiveStatus Parms{};

	Parms.QuestObjective = std::move(QuestObjective);
	Parms.Status = Status;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);

	QuestObjective = std::move(Parms.QuestObjective);
}


// Function BP_QuestSystem.BP_QuestSystem_C.SetObjectiveStatusInternal
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName&                            QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName&                            ObjectiveName                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_QuestStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasUpdated                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::SetObjectiveStatusInternal(class FName& QuestName, class FName& ObjectiveName, E_QuestStatus Status, bool* HasUpdated)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "SetObjectiveStatusInternal");

	Params::BP_QuestSystem_C_SetObjectiveStatusInternal Parms{};

	Parms.QuestName = QuestName;
	Parms.ObjectiveName = ObjectiveName;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);

	QuestName = Parms.QuestName;
	ObjectiveName = Parms.ObjectiveName;

	if (HasUpdated != nullptr)
		*HasUpdated = Parms.HasUpdated;
}


// Function BP_QuestSystem.BP_QuestSystem_C.SetQuestStatus
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName&                            QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_QuestStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::SetQuestStatus(class FName& QuestName, E_QuestStatus Status, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "SetQuestStatus");

	Params::BP_QuestSystem_C_SetQuestStatus Parms{};

	Parms.QuestName = QuestName;
	Parms.Status = Status;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);

	QuestName = Parms.QuestName;
}


// Function BP_QuestSystem.BP_QuestSystem_C.UpdateActivityStatus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_QuestStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::UpdateActivityStatus(class FName QuestName, E_QuestStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "UpdateActivityStatus");

	Params::BP_QuestSystem_C_UpdateActivityStatus Parms{};

	Parms.QuestName = QuestName;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestSystem.BP_QuestSystem_C.UpdateActivitySubTaskStatus
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ObjectiveName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_QuestStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QuestSystem_C::UpdateActivitySubTaskStatus(class FName ObjectiveName, E_QuestStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "UpdateActivitySubTaskStatus");

	Params::BP_QuestSystem_C_UpdateActivitySubTaskStatus Parms{};

	Parms.ObjectiveName = ObjectiveName;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QuestSystem.BP_QuestSystem_C.ValidateQuestData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QuestSystem_C::ValidateQuestData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QuestSystem_C", "ValidateQuestData");

	UObject::ProcessEvent(Func, nullptr);
}

}

