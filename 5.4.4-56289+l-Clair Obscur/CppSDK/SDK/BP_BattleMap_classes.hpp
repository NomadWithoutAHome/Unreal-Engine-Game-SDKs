#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleMap

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleMap.BP_BattleMap_C
// 0x02B8 (0x0548 - 0x0290)
class ABP_BattleMap_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UChildActorComponent*                   BP_jRPG_CameraPath_Overview_Static;                // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWorldPartitionStreamingSourceComponent* WorldPartitionStreamingSource;                    // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       EnemyLineSpline;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BattlemapMetricsMinimum;                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   EDITOR_CheckCylinder;                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TargetingEnemyCameraFocusPoint;                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_DynamicCameraPath3;                        // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TargetingAllyCameraFocusPoint;                     // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CameraPath_TargetingAlly;                  // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CameraPath_Overview;                       // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_DynamicCameraPath4;                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        IntroCameraFocusPoint1;                            // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CameraPath_Intro;                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        OverviewCameraFocusPoint;                          // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CameraPath_TargetingEnemy;                 // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Cameras;                                           // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_EnemyBattleSpot0;                          // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   OverviewFocusPreviz;                               // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TargetingAllyPreviz;                               // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TargetingEnemyPreviz;                              // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_EnemyBattleSpot3;                          // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_EnemyBattleSpot2;                          // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_EnemyBattleSpot1;                          // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CharacterBattleSpot2;                      // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CharacterBattleSpot1;                      // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_jRPG_CharacterBattleSpot;                       // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_LightingScenarioReference_C*        LightingScenarioForBattle;                         // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          UseStaticCharacterLocations;                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDoRandomRotationAtStart;                     // 0x0379(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         PreviewActors;                                     // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TSoftClassPtr<class UClass>                   Preview_EnemySpawn_0;                              // 0x0390(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Preview_EnemySpawn_1;                              // 0x03B8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Preview_EnemySpawn_2;                              // 0x03E0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Preview_EnemySpawn_3;                              // 0x0408(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Preview_CharacterSpawn_0;                          // 0x0430(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Preview_CharacterSpawn_1;                          // 0x0458(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Preview_CharacterSpawn_2;                          // 0x0480(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          IsPreviewEnabled;                                  // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class AActor>>          ActorsToHideDuringBattle;                          // 0x04B0(0x0010)(Edit, BlueprintVisible)
	bool                                          SetBattleMapVisible;                               // 0x04C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x7];                                      // 0x04C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class AActor>>          ActorsToUnHideDuringBattle;                        // 0x04C8(0x0010)(Edit, BlueprintVisible)
	TMap<struct FGameplayTag, TSoftObjectPtr<class AActor>> BattleActorReferences;                   // 0x04D8(0x0050)(Edit, BlueprintVisible)
	struct FSF_ReferenceCounterHandle             StreamingSourcesEnabledReferenceBlockerHandle;     // 0x0528(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void CheckForErrorsActorArray(const TArray<class FText>& ErrorMessages, TArray<TSoftObjectPtr<class AActor>>& Array, const class FString& ArrayName);
	void CustomEvent_0();
	bool EDITORCHECK_TraceFreeAimLineOfSight(class UChildActorComponent* HeroSpot, class UChildActorComponent* EnemySpot, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit);
	void ExecuteUbergraph_BP_BattleMap(int32 EntryPoint);
	void FindBattleActorByTag(const struct FGameplayTag& Tag, class AActor** Actor);
	void GetAlliesSpots(TArray<class UChildActorComponent*>* Array);
	void GetAllSpots(TArray<class UChildActorComponent*>* Array);
	void GetAllSpotsActors(TArray<class AActor*>* Array);
	struct FTransform GetBattleSpotTransform(class USceneComponent* self2);
	void GetEnemiesSpots(TArray<class UChildActorComponent*>* Array);
	void GetFurthestBound(struct FVector* Point);
	void ProcessActorsToHide(bool ShouldHide);
	void ProcessActorsToUnhide(bool ShouldUnhide);
	void ReceiveBeginPlay();
	void RotationUpdateMap();
	void SetBattleMapActive(bool IsActive);
	void SetBattleMapStreamingSourceActive(bool Active);
	bool ShouldProcessActorHiddenState(class AActor* Target);
	void SpawnPreviewActorAtSpot(TSoftClassPtr<class UClass> ActorClass, class USceneComponent* BattleSpotComponent);
	void TogglePreviewMeshes();
	void UpdateCamerasLookAtPoints();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleMap_C">();
	}
	static class ABP_BattleMap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BattleMap_C>();
	}
};
static_assert(alignof(ABP_BattleMap_C) == 0x000008, "Wrong alignment on ABP_BattleMap_C");
static_assert(sizeof(ABP_BattleMap_C) == 0x000548, "Wrong size on ABP_BattleMap_C");
static_assert(offsetof(ABP_BattleMap_C, UberGraphFrame) == 0x000290, "Member 'ABP_BattleMap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CameraPath_Overview_Static) == 0x000298, "Member 'ABP_BattleMap_C::BP_jRPG_CameraPath_Overview_Static' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, WorldPartitionStreamingSource) == 0x0002A0, "Member 'ABP_BattleMap_C::WorldPartitionStreamingSource' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, EnemyLineSpline) == 0x0002A8, "Member 'ABP_BattleMap_C::EnemyLineSpline' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BattlemapMetricsMinimum) == 0x0002B0, "Member 'ABP_BattleMap_C::BattlemapMetricsMinimum' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, EDITOR_CheckCylinder) == 0x0002B8, "Member 'ABP_BattleMap_C::EDITOR_CheckCylinder' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, TargetingEnemyCameraFocusPoint) == 0x0002C0, "Member 'ABP_BattleMap_C::TargetingEnemyCameraFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_DynamicCameraPath3) == 0x0002C8, "Member 'ABP_BattleMap_C::BP_jRPG_DynamicCameraPath3' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, TargetingAllyCameraFocusPoint) == 0x0002D0, "Member 'ABP_BattleMap_C::TargetingAllyCameraFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CameraPath_TargetingAlly) == 0x0002D8, "Member 'ABP_BattleMap_C::BP_jRPG_CameraPath_TargetingAlly' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CameraPath_Overview) == 0x0002E0, "Member 'ABP_BattleMap_C::BP_jRPG_CameraPath_Overview' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_DynamicCameraPath4) == 0x0002E8, "Member 'ABP_BattleMap_C::BP_jRPG_DynamicCameraPath4' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, IntroCameraFocusPoint1) == 0x0002F0, "Member 'ABP_BattleMap_C::IntroCameraFocusPoint1' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CameraPath_Intro) == 0x0002F8, "Member 'ABP_BattleMap_C::BP_jRPG_CameraPath_Intro' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, OverviewCameraFocusPoint) == 0x000300, "Member 'ABP_BattleMap_C::OverviewCameraFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CameraPath_TargetingEnemy) == 0x000308, "Member 'ABP_BattleMap_C::BP_jRPG_CameraPath_TargetingEnemy' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Cameras) == 0x000310, "Member 'ABP_BattleMap_C::Cameras' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_EnemyBattleSpot0) == 0x000318, "Member 'ABP_BattleMap_C::BP_jRPG_EnemyBattleSpot0' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, OverviewFocusPreviz) == 0x000320, "Member 'ABP_BattleMap_C::OverviewFocusPreviz' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, TargetingAllyPreviz) == 0x000328, "Member 'ABP_BattleMap_C::TargetingAllyPreviz' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, TargetingEnemyPreviz) == 0x000330, "Member 'ABP_BattleMap_C::TargetingEnemyPreviz' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_EnemyBattleSpot3) == 0x000338, "Member 'ABP_BattleMap_C::BP_jRPG_EnemyBattleSpot3' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_EnemyBattleSpot2) == 0x000340, "Member 'ABP_BattleMap_C::BP_jRPG_EnemyBattleSpot2' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_EnemyBattleSpot1) == 0x000348, "Member 'ABP_BattleMap_C::BP_jRPG_EnemyBattleSpot1' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CharacterBattleSpot2) == 0x000350, "Member 'ABP_BattleMap_C::BP_jRPG_CharacterBattleSpot2' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CharacterBattleSpot1) == 0x000358, "Member 'ABP_BattleMap_C::BP_jRPG_CharacterBattleSpot1' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BP_jRPG_CharacterBattleSpot) == 0x000360, "Member 'ABP_BattleMap_C::BP_jRPG_CharacterBattleSpot' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, DefaultSceneRoot) == 0x000368, "Member 'ABP_BattleMap_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, LightingScenarioForBattle) == 0x000370, "Member 'ABP_BattleMap_C::LightingScenarioForBattle' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, UseStaticCharacterLocations) == 0x000378, "Member 'ABP_BattleMap_C::UseStaticCharacterLocations' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, ShouldDoRandomRotationAtStart) == 0x000379, "Member 'ABP_BattleMap_C::ShouldDoRandomRotationAtStart' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, PreviewActors) == 0x000380, "Member 'ABP_BattleMap_C::PreviewActors' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_EnemySpawn_0) == 0x000390, "Member 'ABP_BattleMap_C::Preview_EnemySpawn_0' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_EnemySpawn_1) == 0x0003B8, "Member 'ABP_BattleMap_C::Preview_EnemySpawn_1' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_EnemySpawn_2) == 0x0003E0, "Member 'ABP_BattleMap_C::Preview_EnemySpawn_2' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_EnemySpawn_3) == 0x000408, "Member 'ABP_BattleMap_C::Preview_EnemySpawn_3' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_CharacterSpawn_0) == 0x000430, "Member 'ABP_BattleMap_C::Preview_CharacterSpawn_0' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_CharacterSpawn_1) == 0x000458, "Member 'ABP_BattleMap_C::Preview_CharacterSpawn_1' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, Preview_CharacterSpawn_2) == 0x000480, "Member 'ABP_BattleMap_C::Preview_CharacterSpawn_2' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, IsPreviewEnabled) == 0x0004A8, "Member 'ABP_BattleMap_C::IsPreviewEnabled' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, ActorsToHideDuringBattle) == 0x0004B0, "Member 'ABP_BattleMap_C::ActorsToHideDuringBattle' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, SetBattleMapVisible) == 0x0004C0, "Member 'ABP_BattleMap_C::SetBattleMapVisible' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, ActorsToUnHideDuringBattle) == 0x0004C8, "Member 'ABP_BattleMap_C::ActorsToUnHideDuringBattle' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, BattleActorReferences) == 0x0004D8, "Member 'ABP_BattleMap_C::BattleActorReferences' has a wrong offset!");
static_assert(offsetof(ABP_BattleMap_C, StreamingSourcesEnabledReferenceBlockerHandle) == 0x000528, "Member 'ABP_BattleMap_C::StreamingSourcesEnabledReferenceBlockerHandle' has a wrong offset!");

}

