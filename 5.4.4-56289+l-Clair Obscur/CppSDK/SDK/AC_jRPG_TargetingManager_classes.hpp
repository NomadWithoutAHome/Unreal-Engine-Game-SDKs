#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_TargetingManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_jRPG_TargetingType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_jRPG_TargetingManager.AC_jRPG_TargetingManager_C
// 0x00A0 (0x0140 - 0x00A0)
class UAC_jRPG_TargetingManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          TargetingEnabled_;                                 // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanTargetSelf_;                                    // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_jRPG_TargetingType                          SelectedTargetingType;                             // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Character_Battle_Base_C*> TargetedCharacters;                              // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UBP_jRPG_GI_Custom_C*                   GameInstanceReference;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	int32                                         SelectedTargetIndexWithGamepad;                    // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MustSelectEnemyAfterAlly;                          // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         multiTargetingPhase;                               // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_TargetingGroup_C*>           TargetGroups;                                      // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> PreviousTargetedCharacters;                      // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsPretargeting;                                    // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       LastTarget;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       PreferedNextInitialTarget;                         // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LastIsAlly;                                        // 0x0110(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AreTargetsDirty;                                   // 0x0111(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_112[0x6];                                      // 0x0112(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_TargetingGroup_C*                   FocusedTargetingGroup;                             // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         LastXNavigation;                                   // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           XInputCooldownTimer;                               // 0x0128(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnTargetConfirmed;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddSingleCharacterTargetingGroup(class ABP_jRPG_Character_Battle_Base_C* Character, const TArray<class UBP_TargetingGroup_C*>& TargetGroups_0, class UBP_TargetingGroup_C** TargetingGroup);
	void AddTargetingGroup(TArray<class ABP_jRPG_Character_Battle_Base_C*>& Characters, const TArray<class UBP_TargetingGroup_C*>& TargetGroups_0, class UBP_TargetingGroup_C** TargetingGroup);
	void CancelTargeting();
	void ComputeTargetGroups(E_jRPG_TargetingType TargetingType, bool BypassChecks, bool* IsAlly, TArray<class UBP_TargetingGroup_C*>* TargetGroups_0, class ABP_jRPG_Character_Battle_Base_C** PreferedNextInitialTarget_0);
	void ConfirmTarget();
	void DEPRECATED_GetTargetsWithGamepad(E_jRPG_TargetingType TargetingType, int32 SelectedTargetIndex, bool SelectDescendingForSingleAllyType_, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Targets, int32* SelectedTargetIndexOutput);
	void DEPRECATED_ShowTargets(class ABP_jRPG_Character_Battle_Base_C* IndicatedCharacter);
	void DisableTargeting();
	void EnablePreTargeting();
	void EnableTargeting(E_jRPG_TargetingType TargetingType);
	void EnableTargetingInternal(E_jRPG_TargetingType TargetingType, bool StartPreTargeting);
	void ExecuteUbergraph_AC_jRPG_TargetingManager(int32 EntryPoint);
	class UAC_jRPG_BattleManager_C* GetBattleManager();
	void GetTargetingGroupForCharacter(class ABP_jRPG_Character_Battle_Base_C* Character, class UBP_TargetingGroup_C** Array_Element);
	void HideTargets();
	bool IsCurrentlyTargetingAllies();
	bool IsCurrentlyTargetingEnemies();
	void NotifyTargetChange();
	void OnTargetChanged();
	void ReceiveTick(float DeltaSeconds);
	void RegisterTargetingGroupsInUINavigation(class ABP_jRPG_Character_Battle_Base_C* PreferedInitialTarget);
	void ResetTargetingSystem();
	void SetFocusedTargetingGroup(class UBP_TargetingGroup_C* TargetingGroup);
	void ShiftTargetingGroup(int32 Offset);
	void TryFocusTargetGroup(class UBP_TargetingGroup_C* TargetGroup);
	void TryUnfocusTargetGroup(class UBP_TargetingGroup_C* TargetGroup);
	void UpdateTargetGroups(E_jRPG_TargetingType TargetingType, bool* IsAlly);
	void ValidateTargetCandidates(TArray<class UAC_jRPG_CharacterBattleStats_C*>& TargetCharacterStats, bool* Validated, struct FS_BlockedActionFeedback* BlockedReason);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_jRPG_TargetingManager_C">();
	}
	static class UAC_jRPG_TargetingManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_jRPG_TargetingManager_C>();
	}
};
static_assert(alignof(UAC_jRPG_TargetingManager_C) == 0x000008, "Wrong alignment on UAC_jRPG_TargetingManager_C");
static_assert(sizeof(UAC_jRPG_TargetingManager_C) == 0x000140, "Wrong size on UAC_jRPG_TargetingManager_C");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, UberGraphFrame) == 0x0000A0, "Member 'UAC_jRPG_TargetingManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, TargetingEnabled_) == 0x0000A8, "Member 'UAC_jRPG_TargetingManager_C::TargetingEnabled_' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, CanTargetSelf_) == 0x0000A9, "Member 'UAC_jRPG_TargetingManager_C::CanTargetSelf_' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, SelectedTargetingType) == 0x0000AA, "Member 'UAC_jRPG_TargetingManager_C::SelectedTargetingType' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, TargetedCharacters) == 0x0000B0, "Member 'UAC_jRPG_TargetingManager_C::TargetedCharacters' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, GameInstanceReference) == 0x0000C0, "Member 'UAC_jRPG_TargetingManager_C::GameInstanceReference' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, SelectedTargetIndexWithGamepad) == 0x0000C8, "Member 'UAC_jRPG_TargetingManager_C::SelectedTargetIndexWithGamepad' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, MustSelectEnemyAfterAlly) == 0x0000CC, "Member 'UAC_jRPG_TargetingManager_C::MustSelectEnemyAfterAlly' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, multiTargetingPhase) == 0x0000D0, "Member 'UAC_jRPG_TargetingManager_C::multiTargetingPhase' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, TargetGroups) == 0x0000D8, "Member 'UAC_jRPG_TargetingManager_C::TargetGroups' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, PreviousTargetedCharacters) == 0x0000E8, "Member 'UAC_jRPG_TargetingManager_C::PreviousTargetedCharacters' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, IsPretargeting) == 0x0000F8, "Member 'UAC_jRPG_TargetingManager_C::IsPretargeting' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, LastTarget) == 0x000100, "Member 'UAC_jRPG_TargetingManager_C::LastTarget' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, PreferedNextInitialTarget) == 0x000108, "Member 'UAC_jRPG_TargetingManager_C::PreferedNextInitialTarget' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, LastIsAlly) == 0x000110, "Member 'UAC_jRPG_TargetingManager_C::LastIsAlly' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, AreTargetsDirty) == 0x000111, "Member 'UAC_jRPG_TargetingManager_C::AreTargetsDirty' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, FocusedTargetingGroup) == 0x000118, "Member 'UAC_jRPG_TargetingManager_C::FocusedTargetingGroup' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, LastXNavigation) == 0x000120, "Member 'UAC_jRPG_TargetingManager_C::LastXNavigation' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, XInputCooldownTimer) == 0x000128, "Member 'UAC_jRPG_TargetingManager_C::XInputCooldownTimer' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_TargetingManager_C, OnTargetConfirmed) == 0x000130, "Member 'UAC_jRPG_TargetingManager_C::OnTargetConfirmed' has a wrong offset!");

}

