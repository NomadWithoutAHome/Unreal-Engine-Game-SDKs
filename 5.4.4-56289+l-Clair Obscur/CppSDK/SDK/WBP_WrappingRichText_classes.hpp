#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WrappingRichText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_WrappingRichText.WBP_WrappingRichText_C
// 0x03E8 (0x06F0 - 0x0308)
class UWBP_WrappingRichText_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCommonRichTextBlock*                   Text;                                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TextSizeBox;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   ContentText;                                       // 0x0320(0x0010)(Edit, BlueprintVisible)
	double                                        TextMinDesiredWidth;                               // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextMaxDesiredWidth;                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Justification;                                     // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_341[0x7];                                      // 0x0341(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, double>                   OverrideWidthByLanguage;                           // 0x0348(0x0050)(Edit, BlueprintVisible)
	class UDataTable*                             RichTextStyleData;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<TSubclassOf<class URichTextBlockDecorator>> DecoratorClasses;                             // 0x03A0(0x0010)(Edit, BlueprintVisible)
	struct FTextBlockStyle                        TextStyle;                                         // 0x03B0(0x0340)(Edit, BlueprintVisible)

public:
	void Construct();
	void ExecuteUbergraph_WBP_WrappingRichText(int32 EntryPoint);
	void FindFinalMaxDesiredWidth(double* FinalMaxDesiredWidth);
	void PreConstruct(bool IsDesignTime);
	void Set_Text(class FText& InText);
	void SetStyle(class UClass* TextStyle_0);
	void SetTextMaxDesiredWidth(double TextMaxDesiredWidth_0);
	void SetTextMinDesiredWidth(double TextMaxDesiredWidth_0);
	void UpdateText();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_WrappingRichText_C">();
	}
	static class UWBP_WrappingRichText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_WrappingRichText_C>();
	}
};
static_assert(alignof(UWBP_WrappingRichText_C) == 0x000010, "Wrong alignment on UWBP_WrappingRichText_C");
static_assert(sizeof(UWBP_WrappingRichText_C) == 0x0006F0, "Wrong size on UWBP_WrappingRichText_C");
static_assert(offsetof(UWBP_WrappingRichText_C, UberGraphFrame) == 0x000308, "Member 'UWBP_WrappingRichText_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, Text) == 0x000310, "Member 'UWBP_WrappingRichText_C::Text' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, TextSizeBox) == 0x000318, "Member 'UWBP_WrappingRichText_C::TextSizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, ContentText) == 0x000320, "Member 'UWBP_WrappingRichText_C::ContentText' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, TextMinDesiredWidth) == 0x000330, "Member 'UWBP_WrappingRichText_C::TextMinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, TextMaxDesiredWidth) == 0x000338, "Member 'UWBP_WrappingRichText_C::TextMaxDesiredWidth' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, Justification) == 0x000340, "Member 'UWBP_WrappingRichText_C::Justification' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, OverrideWidthByLanguage) == 0x000348, "Member 'UWBP_WrappingRichText_C::OverrideWidthByLanguage' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, RichTextStyleData) == 0x000398, "Member 'UWBP_WrappingRichText_C::RichTextStyleData' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, DecoratorClasses) == 0x0003A0, "Member 'UWBP_WrappingRichText_C::DecoratorClasses' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingRichText_C, TextStyle) == 0x0003B0, "Member 'UWBP_WrappingRichText_C::TextStyle' has a wrong offset!");

}

