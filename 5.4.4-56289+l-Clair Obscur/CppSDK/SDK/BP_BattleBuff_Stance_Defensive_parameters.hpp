#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleBuff_Stance_Defensive

#include "Basic.hpp"

#include "EAPChangeReason_structs.hpp"
#include "S_BalancingTableFloatEntry_structs.hpp"
#include "FDamageModifier_structs.hpp"


namespace SDK::Params
{

// Function BP_BattleBuff_Stance_Defensive.BP_BattleBuff_Stance_Defensive_C.ActivateBuff
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleBuff_Stance_Defensive_C_ActivateBuff final
{
public:
	const class UAC_jRPG_CharacterBattleStats_C*  CharacterStats;                                    // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleBuff_Stance_Defensive_C_ActivateBuff) == 0x000008, "Wrong alignment on BP_BattleBuff_Stance_Defensive_C_ActivateBuff");
static_assert(sizeof(BP_BattleBuff_Stance_Defensive_C_ActivateBuff) == 0x000008, "Wrong size on BP_BattleBuff_Stance_Defensive_C_ActivateBuff");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ActivateBuff, CharacterStats) == 0x000000, "Member 'BP_BattleBuff_Stance_Defensive_C_ActivateBuff::CharacterStats' has a wrong offset!");

// Function BP_BattleBuff_Stance_Defensive.BP_BattleBuff_Stance_Defensive_C.APOnDodge
// 0x0010 (0x0010 - 0x0000)
struct BP_BattleBuff_Stance_Defensive_C_APOnDodge final
{
public:
	class ABP_jRPG_Character_Battle_Base_C*       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       Enemy;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleBuff_Stance_Defensive_C_APOnDodge) == 0x000008, "Wrong alignment on BP_BattleBuff_Stance_Defensive_C_APOnDodge");
static_assert(sizeof(BP_BattleBuff_Stance_Defensive_C_APOnDodge) == 0x000010, "Wrong size on BP_BattleBuff_Stance_Defensive_C_APOnDodge");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_APOnDodge, Character) == 0x000000, "Member 'BP_BattleBuff_Stance_Defensive_C_APOnDodge::Character' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_APOnDodge, Enemy) == 0x000008, "Member 'BP_BattleBuff_Stance_Defensive_C_APOnDodge::Enemy' has a wrong offset!");

// Function BP_BattleBuff_Stance_Defensive.BP_BattleBuff_Stance_Defensive_C.ExecuteUbergraph_BP_BattleBuff_Stance_Defensive
// 0x0040 (0x0040 - 0x0000)
struct BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       K2Node_CustomEvent_Character;                      // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       K2Node_CustomEvent_Enemy;                          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ABP_jRPG_Character_Battle_Base_C* Character, class ABP_jRPG_Character_Battle_Base_C* Enemy)> K2Node_CreateDelegate_OutputDelegate; // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsBuffTarget_IsTarget;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAC_jRPG_CharacterBattleStats_C*  K2Node_Event_CharacterStats;                       // 0x0030(0x0008)(ConstParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_BattleManager_C*               CallFunc_GetBattleManager_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive) == 0x000008, "Wrong alignment on BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive");
static_assert(sizeof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive) == 0x000040, "Wrong size on BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, EntryPoint) == 0x000000, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, K2Node_CustomEvent_Character) == 0x000008, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::K2Node_CustomEvent_Character' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, K2Node_CustomEvent_Enemy) == 0x000010, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::K2Node_CustomEvent_Enemy' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, CallFunc_IsBuffTarget_IsTarget) == 0x000028, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::CallFunc_IsBuffTarget_IsTarget' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, K2Node_Event_CharacterStats) == 0x000030, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::K2Node_Event_CharacterStats' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive, CallFunc_GetBattleManager_ReturnValue) == 0x000038, "Member 'BP_BattleBuff_Stance_Defensive_C_ExecuteUbergraph_BP_BattleBuff_Stance_Defensive::CallFunc_GetBattleManager_ReturnValue' has a wrong offset!");

// Function BP_BattleBuff_Stance_Defensive.BP_BattleBuff_Stance_Defensive_C.ProcessAPChange
// 0x001C (0x001C - 0x0000)
struct BP_BattleBuff_Stance_Defensive_C_ProcessAPChange final
{
public:
	int32                                         NewAPAmount;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousAPAmount;                                  // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAPChangeReason                               ChangeReason;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasChanged;                                        // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChangedValue;                                      // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange) == 0x000004, "Wrong alignment on BP_BattleBuff_Stance_Defensive_C_ProcessAPChange");
static_assert(sizeof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange) == 0x00001C, "Wrong size on BP_BattleBuff_Stance_Defensive_C_ProcessAPChange");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, NewAPAmount) == 0x000000, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::NewAPAmount' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, PreviousAPAmount) == 0x000004, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::PreviousAPAmount' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, ChangeReason) == 0x000008, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::ChangeReason' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, HasChanged) == 0x000009, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::HasChanged' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, ChangedValue) == 0x00000C, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::ChangedValue' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, Temp_int_Variable) == 0x000010, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000014, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessAPChange, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessAPChange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_BattleBuff_Stance_Defensive.BP_BattleBuff_Stance_Defensive_C.ProcessReceivedRawDamages
// 0x0040 (0x0040 - 0x0000)
struct BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages final
{
public:
	class UBP_BattleDamages_C*                    BattleDamages;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Out;                                               // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_BalancingTableFloatEntry            CallFunc_GetDataTableRowFromName_OutRow;           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFDamageModifier                       K2Node_MakeStruct_FDamageModifier;                 // 0x0018(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages) == 0x000008, "Wrong alignment on BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages");
static_assert(sizeof(BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages) == 0x000040, "Wrong size on BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages, BattleDamages) == 0x000000, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages::BattleDamages' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages, Out) == 0x000008, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages::Out' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages, CallFunc_GetDataTableRowFromName_OutRow) == 0x000010, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages, K2Node_MakeStruct_FDamageModifier) == 0x000018, "Member 'BP_BattleBuff_Stance_Defensive_C_ProcessReceivedRawDamages::K2Node_MakeStruct_FDamageModifier' has a wrong offset!");

// Function BP_BattleBuff_Stance_Defensive.BP_BattleBuff_Stance_Defensive_C.ShouldKeepOnDeath
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath final
{
public:
	bool                                          Keep;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath) == 0x000001, "Wrong alignment on BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath");
static_assert(sizeof(BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath) == 0x000001, "Wrong size on BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath");
static_assert(offsetof(BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath, Keep) == 0x000000, "Member 'BP_BattleBuff_Stance_Defensive_C_ShouldKeepOnDeath::Keep' has a wrong offset!");

}

