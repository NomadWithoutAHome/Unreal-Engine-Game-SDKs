#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Arm_Ring_V2

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Arm_Ring_V2.BP_Arm_Ring_V2_C.ArmRing_Enemy
// 0x0001 (0x0001 - 0x0000)
struct BP_Arm_Ring_V2_C_ArmRing_Enemy final
{
public:
	bool                                          HittingTarget;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Arm_Ring_V2_C_ArmRing_Enemy) == 0x000001, "Wrong alignment on BP_Arm_Ring_V2_C_ArmRing_Enemy");
static_assert(sizeof(BP_Arm_Ring_V2_C_ArmRing_Enemy) == 0x000001, "Wrong size on BP_Arm_Ring_V2_C_ArmRing_Enemy");
static_assert(offsetof(BP_Arm_Ring_V2_C_ArmRing_Enemy, HittingTarget) == 0x000000, "Member 'BP_Arm_Ring_V2_C_ArmRing_Enemy::HittingTarget' has a wrong offset!");

// Function BP_Arm_Ring_V2.BP_Arm_Ring_V2_C.ArmRing_Enviro
// 0x0001 (0x0001 - 0x0000)
struct BP_Arm_Ring_V2_C_ArmRing_Enviro final
{
public:
	bool                                          HittingTarget;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Arm_Ring_V2_C_ArmRing_Enviro) == 0x000001, "Wrong alignment on BP_Arm_Ring_V2_C_ArmRing_Enviro");
static_assert(sizeof(BP_Arm_Ring_V2_C_ArmRing_Enviro) == 0x000001, "Wrong size on BP_Arm_Ring_V2_C_ArmRing_Enviro");
static_assert(offsetof(BP_Arm_Ring_V2_C_ArmRing_Enviro, HittingTarget) == 0x000000, "Member 'BP_Arm_Ring_V2_C_ArmRing_Enviro::HittingTarget' has a wrong offset!");

// Function BP_Arm_Ring_V2.BP_Arm_Ring_V2_C.ArmRing_TP
// 0x0001 (0x0001 - 0x0000)
struct BP_Arm_Ring_V2_C_ArmRing_TP final
{
public:
	bool                                          HittingTarget;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Arm_Ring_V2_C_ArmRing_TP) == 0x000001, "Wrong alignment on BP_Arm_Ring_V2_C_ArmRing_TP");
static_assert(sizeof(BP_Arm_Ring_V2_C_ArmRing_TP) == 0x000001, "Wrong size on BP_Arm_Ring_V2_C_ArmRing_TP");
static_assert(offsetof(BP_Arm_Ring_V2_C_ArmRing_TP, HittingTarget) == 0x000000, "Member 'BP_Arm_Ring_V2_C_ArmRing_TP::HittingTarget' has a wrong offset!");

// Function BP_Arm_Ring_V2.BP_Arm_Ring_V2_C.ExecuteUbergraph_BP_Arm_Ring_V2
// 0x01B0 (0x01B0 - 0x0000)
struct BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HittingTarget_2;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HittingTarget_1;                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_HittingTarget;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Shard_ArmRing_C*                    K2Node_DynamicCast_AsBP_Shard_Arm_Ring;            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Shard_ArmRing_C*                    K2Node_DynamicCast_AsBP_Shard_Arm_Ring_1;          // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Shard_ArmRing_C*                    K2Node_DynamicCast_AsBP_Shard_Arm_Ring_2;          // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00A0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_Alpha_ImplicitCast_1;                // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2) == 0x000008, "Wrong alignment on BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2");
static_assert(sizeof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2) == 0x0001B0, "Wrong size on BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, EntryPoint) == 0x000000, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_CustomEvent_HittingTarget_2) == 0x000004, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_CustomEvent_HittingTarget_2' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_Lerp_ReturnValue_1) == 0x000010, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_CustomEvent_HittingTarget_1) == 0x000018, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_CustomEvent_HittingTarget_1' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000020, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_CustomEvent_HittingTarget) == 0x000038, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_CustomEvent_HittingTarget' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_DynamicCast_AsBP_Shard_Arm_Ring) == 0x000040, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_DynamicCast_AsBP_Shard_Arm_Ring' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_DynamicCast_bSuccess) == 0x000048, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_DynamicCast_AsBP_Shard_Arm_Ring_1) == 0x000050, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_DynamicCast_AsBP_Shard_Arm_Ring_1' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_DynamicCast_AsBP_Shard_Arm_Ring_2) == 0x000060, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_DynamicCast_AsBP_Shard_Arm_Ring_2' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, K2Node_DynamicCast_bSuccess_2) == 0x000068, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_LinearColorLerp_ReturnValue) == 0x00006C, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_BreakRotator_Roll) == 0x00007C, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_BreakRotator_Pitch) == 0x000080, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_BreakRotator_Yaw) == 0x000084, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_MakeRotator_ReturnValue) == 0x000088, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000A0, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000198, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_Lerp_Alpha_ImplicitCast_1) == 0x0001A0, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_Lerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x0001A8, "Member 'BP_Arm_Ring_V2_C_ExecuteUbergraph_BP_Arm_Ring_V2::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

// Function BP_Arm_Ring_V2.BP_Arm_Ring_V2_C.FlashOnShard
// 0x0080 (0x0080 - 0x0000)
struct BP_Arm_Ring_V2_C_FlashOnShard final
{
public:
	class AActor*                                 Shard;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAtLocation_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Arm_Ring_V2_C_FlashOnShard) == 0x000008, "Wrong alignment on BP_Arm_Ring_V2_C_FlashOnShard");
static_assert(sizeof(BP_Arm_Ring_V2_C_FlashOnShard) == 0x000080, "Wrong size on BP_Arm_Ring_V2_C_FlashOnShard");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, Shard) == 0x000000, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::Shard' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000008, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_BreakRotator_Roll) == 0x000038, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_BreakRotator_Pitch) == 0x00003C, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_BreakRotator_Yaw) == 0x000040, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000048, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_MakeRotator_ReturnValue) == 0x000050, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_SpawnSystemAtLocation_ReturnValue) == 0x000068, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_SpawnSystemAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000070, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Arm_Ring_V2_C_FlashOnShard, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000078, "Member 'BP_Arm_Ring_V2_C_FlashOnShard::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");

}

