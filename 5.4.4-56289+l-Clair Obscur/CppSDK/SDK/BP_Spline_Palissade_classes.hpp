#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Spline_Palissade

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Spline_Palissade.BP_Spline_Palissade_C
// 0x0190 (0x0420 - 0x0290)
class ABP_Spline_Palissade_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline1;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Spacing;                                           // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstance*                      Material;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Random_Mesh;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMesh*>                    List_Mesh;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible)
	double                                        Scale;                                             // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UStaticMesh*, class UInstancedStaticMeshComponent*> dictionary;                       // 0x02E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Length;                                            // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Roll;                                          // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Roll;                                          // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Pitch;                                         // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Pitch;                                         // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Yaw;                                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Yaw;                                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UInstancedStaticMeshComponent*>  Array_of_Instanced_Static_Mesh;                    // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          Instanciate;                                       // 0x0378(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_379[0x7];                                      // 0x0379(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UStaticMesh*, class UStaticMeshComponent*> dictionary_noneinstance;                   // 0x0380(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMeshComponent*>           Array_of__Static_Mesh;                             // 0x03D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          VariableScale;                                     // 0x03E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_a_BP;                                           // 0x03E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E2[0x6];                                      // 0x03E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Roll;                                              // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Yaw;                                               // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        min_0;                                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        random_scale_min;                                  // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        random_scale_max;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCollisionEnable;                                 // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCastingShadow;                                   // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ExecuteUbergraph_BP_Spline_Palissade(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Spline_Palissade_C">();
	}
	static class ABP_Spline_Palissade_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Spline_Palissade_C>();
	}
};
static_assert(alignof(ABP_Spline_Palissade_C) == 0x000008, "Wrong alignment on ABP_Spline_Palissade_C");
static_assert(sizeof(ABP_Spline_Palissade_C) == 0x000420, "Wrong size on ABP_Spline_Palissade_C");
static_assert(offsetof(ABP_Spline_Palissade_C, UberGraphFrame) == 0x000290, "Member 'ABP_Spline_Palissade_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Spline1) == 0x000298, "Member 'ABP_Spline_Palissade_C::Spline1' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_Spline_Palissade_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Spacing) == 0x0002A8, "Member 'ABP_Spline_Palissade_C::Spacing' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Material) == 0x0002B0, "Member 'ABP_Spline_Palissade_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Curve) == 0x0002B8, "Member 'ABP_Spline_Palissade_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Random_Mesh) == 0x0002C0, "Member 'ABP_Spline_Palissade_C::Random_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, List_Mesh) == 0x0002C8, "Member 'ABP_Spline_Palissade_C::List_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Scale) == 0x0002D8, "Member 'ABP_Spline_Palissade_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, dictionary) == 0x0002E0, "Member 'ABP_Spline_Palissade_C::dictionary' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Length) == 0x000330, "Member 'ABP_Spline_Palissade_C::Length' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Min_Roll) == 0x000338, "Member 'ABP_Spline_Palissade_C::Min_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Max_Roll) == 0x000340, "Member 'ABP_Spline_Palissade_C::Max_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Min_Pitch) == 0x000348, "Member 'ABP_Spline_Palissade_C::Min_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Max_Pitch) == 0x000350, "Member 'ABP_Spline_Palissade_C::Max_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Min_Yaw) == 0x000358, "Member 'ABP_Spline_Palissade_C::Min_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Max_Yaw) == 0x000360, "Member 'ABP_Spline_Palissade_C::Max_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Array_of_Instanced_Static_Mesh) == 0x000368, "Member 'ABP_Spline_Palissade_C::Array_of_Instanced_Static_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Instanciate) == 0x000378, "Member 'ABP_Spline_Palissade_C::Instanciate' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, dictionary_noneinstance) == 0x000380, "Member 'ABP_Spline_Palissade_C::dictionary_noneinstance' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Array_of__Static_Mesh) == 0x0003D0, "Member 'ABP_Spline_Palissade_C::Array_of__Static_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, VariableScale) == 0x0003E0, "Member 'ABP_Spline_Palissade_C::VariableScale' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Is_a_BP) == 0x0003E1, "Member 'ABP_Spline_Palissade_C::Is_a_BP' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Roll) == 0x0003E8, "Member 'ABP_Spline_Palissade_C::Roll' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Pitch) == 0x0003F0, "Member 'ABP_Spline_Palissade_C::Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, Yaw) == 0x0003F8, "Member 'ABP_Spline_Palissade_C::Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, min_0) == 0x000400, "Member 'ABP_Spline_Palissade_C::min_0' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, random_scale_min) == 0x000408, "Member 'ABP_Spline_Palissade_C::random_scale_min' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, random_scale_max) == 0x000410, "Member 'ABP_Spline_Palissade_C::random_scale_max' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, IsCollisionEnable) == 0x000418, "Member 'ABP_Spline_Palissade_C::IsCollisionEnable' has a wrong offset!");
static_assert(offsetof(ABP_Spline_Palissade_C, IsCastingShadow) == 0x000419, "Member 'ABP_Spline_Palissade_C::IsCastingShadow' has a wrong offset!");

}

