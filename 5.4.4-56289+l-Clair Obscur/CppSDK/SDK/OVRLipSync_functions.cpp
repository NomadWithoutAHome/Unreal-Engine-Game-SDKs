#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OVRLipSync

#include "Basic.hpp"

#include "OVRLipSync_classes.hpp"
#include "OVRLipSync_parameters.hpp"


namespace SDK
{

// Function OVRLipSync.OVRLipSyncActorComponentBase.AssignVisemesToMorphTargets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            MorphTargetNames                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UOVRLipSyncActorComponentBase::AssignVisemesToMorphTargets(class USkeletalMeshComponent* Mesh, const TArray<class FString>& MorphTargetNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponentBase", "AssignVisemesToMorphTargets");

	Params::OVRLipSyncActorComponentBase_AssignVisemesToMorphTargets Parms{};

	Parms.Mesh = Mesh;
	Parms.MorphTargetNames = std::move(MorphTargetNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncActorComponentBase.GetLaughterScore
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UOVRLipSyncActorComponentBase::GetLaughterScore() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponentBase", "GetLaughterScore");

	Params::OVRLipSyncActorComponentBase_GetLaughterScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OVRLipSync.OVRLipSyncActorComponentBase.GetVisemeNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FString>             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FString> UOVRLipSyncActorComponentBase::GetVisemeNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponentBase", "GetVisemeNames");

	Params::OVRLipSyncActorComponentBase_GetVisemeNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OVRLipSync.OVRLipSyncActorComponentBase.GetVisemes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<float>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<float> UOVRLipSyncActorComponentBase::GetVisemes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponentBase", "GetVisemes");

	Params::OVRLipSyncActorComponentBase_GetVisemes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OVRLipSync.OVRLipSyncActorComponent.FeedAudio
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<uint8>&                    AudioData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UOVRLipSyncActorComponent::FeedAudio(const TArray<uint8>& AudioData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponent", "FeedAudio");

	Params::OVRLipSyncActorComponent_FeedAudio Parms{};

	Parms.AudioData = std::move(AudioData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncActorComponent.OnVoiceCaptureTimer
// (Final, Native, Protected)

void UOVRLipSyncActorComponent::OnVoiceCaptureTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponent", "OnVoiceCaptureTimer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncActorComponent.PermissionCallback
// (Final, Native, Public, HasOutParams)
// Parameters:
// const TArray<class FString>&            Permissions                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<bool>&                     GrantResults                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UOVRLipSyncActorComponent::PermissionCallback(const TArray<class FString>& Permissions, const TArray<bool>& GrantResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponent", "PermissionCallback");

	Params::OVRLipSyncActorComponent_PermissionCallback Parms{};

	Parms.Permissions = std::move(Permissions);
	Parms.GrantResults = std::move(GrantResults);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncActorComponent.Start
// (Final, Native, Public, BlueprintCallable)

void UOVRLipSyncActorComponent::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponent", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncActorComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UOVRLipSyncActorComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncActorComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncPlaybackActorComponent.SetPlaybackSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOVRLipSyncFrameSequence*         InSequence                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOVRLipSyncPlaybackActorComponent::SetPlaybackSequence(class UOVRLipSyncFrameSequence* InSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncPlaybackActorComponent", "SetPlaybackSequence");

	Params::OVRLipSyncPlaybackActorComponent_SetPlaybackSequence Parms{};

	Parms.InSequence = InSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncPlaybackActorComponent.Start
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UAudioComponent*                  InAudioComponent                                       (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOVRLipSyncFrameSequence*         InSequence                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOVRLipSyncPlaybackActorComponent::Start(class UAudioComponent* InAudioComponent, class UOVRLipSyncFrameSequence* InSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncPlaybackActorComponent", "Start");

	Params::OVRLipSyncPlaybackActorComponent_Start Parms{};

	Parms.InAudioComponent = InAudioComponent;
	Parms.InSequence = InSequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OVRLipSync.OVRLipSyncPlaybackActorComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void UOVRLipSyncPlaybackActorComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OVRLipSyncPlaybackActorComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

