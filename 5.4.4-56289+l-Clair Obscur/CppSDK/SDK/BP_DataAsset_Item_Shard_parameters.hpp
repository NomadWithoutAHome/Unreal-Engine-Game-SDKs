#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DataAsset_Item_Shard

#include "Basic.hpp"

#include "S_ItemQuantity_structs.hpp"
#include "Engine_structs.hpp"
#include "S_LootContext_structs.hpp"
#include "S_jRPG_Item_StaticData_structs.hpp"


namespace SDK::Params
{

// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.GetShardUpgradeCost
// 0x0038 (0x0038 - 0x0000)
struct BP_DataAsset_Item_Shard_C_GetShardUpgradeCost final
{
public:
	TArray<struct FS_ItemQuantity>                RequiredItems;                                     // 0x0000(0x0010)(Parm, OutParm)
	struct FS_ItemQuantity                        K2Node_MakeStruct_S_ItemQuantity;                  // 0x0010(0x0018)(NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_ItemQuantity>                K2Node_MakeArray_Array;                            // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_DataAsset_Item_Shard_C_GetShardUpgradeCost) == 0x000008, "Wrong alignment on BP_DataAsset_Item_Shard_C_GetShardUpgradeCost");
static_assert(sizeof(BP_DataAsset_Item_Shard_C_GetShardUpgradeCost) == 0x000038, "Wrong size on BP_DataAsset_Item_Shard_C_GetShardUpgradeCost");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetShardUpgradeCost, RequiredItems) == 0x000000, "Member 'BP_DataAsset_Item_Shard_C_GetShardUpgradeCost::RequiredItems' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetShardUpgradeCost, K2Node_MakeStruct_S_ItemQuantity) == 0x000010, "Member 'BP_DataAsset_Item_Shard_C_GetShardUpgradeCost::K2Node_MakeStruct_S_ItemQuantity' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetShardUpgradeCost, K2Node_MakeArray_Array) == 0x000028, "Member 'BP_DataAsset_Item_Shard_C_GetShardUpgradeCost::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.GetConsumablesList
// 0x0010 (0x0010 - 0x0000)
struct BP_DataAsset_Item_Shard_C_GetConsumablesList final
{
public:
	TArray<struct FDataTableRowHandle>            ConsumableItemPerLevel_0;                          // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_DataAsset_Item_Shard_C_GetConsumablesList) == 0x000008, "Wrong alignment on BP_DataAsset_Item_Shard_C_GetConsumablesList");
static_assert(sizeof(BP_DataAsset_Item_Shard_C_GetConsumablesList) == 0x000010, "Wrong size on BP_DataAsset_Item_Shard_C_GetConsumablesList");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetConsumablesList, ConsumableItemPerLevel_0) == 0x000000, "Member 'BP_DataAsset_Item_Shard_C_GetConsumablesList::ConsumableItemPerLevel_0' has a wrong offset!");

// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.GetUpgradeLevelConsumableRow
// 0x0108 (0x0108 - 0x0000)
struct BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow final
{
public:
	int32                                         UpgradeLevel;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ReturnParm, NoDestructor)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0030(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0078(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    CallFunc_Array_Get_Item;                           // 0x00F8(0x0010)(NoDestructor)
};
static_assert(alignof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow) == 0x000008, "Wrong alignment on BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow");
static_assert(sizeof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow) == 0x000108, "Wrong size on BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, UpgradeLevel) == 0x000000, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::UpgradeLevel' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, ReturnValue) == 0x000008, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000018, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, K2Node_MakeStruct_FormatArgumentData) == 0x000030, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, CallFunc_Conv_StringToText_ReturnValue) == 0x000078, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, K2Node_MakeArray_Array) == 0x0000D0, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, CallFunc_Array_IsValidIndex_ReturnValue) == 0x0000E0, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, CallFunc_Format_ReturnValue) == 0x0000E8, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow::CallFunc_Array_Get_Item' has a wrong offset!");

// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.OnAddedToInventory
// 0x01E8 (0x01E8 - 0x0000)
struct BP_DataAsset_Item_Shard_C_OnAddedToInventory final
{
public:
	class UAC_jRPG_InventoryManager_C*            InventoryManager;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LootContext                         LootContext;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           GeneratedItem;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemDefinitionFromID_Found;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemDefinitionFromID_ReturnValue;      // 0x0028(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_ObjectToText_ReturnValue;            // 0x0158(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0168(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01B8(0x0010)(ReferenceParm)
	bool                                          CallFunc_CanAutoEquipConsumableShard_ReturnValue;  // 0x01C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x01D0(0x0010)()
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x01E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x01E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x01E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DataAsset_Item_Shard_C_OnAddedToInventory) == 0x000008, "Wrong alignment on BP_DataAsset_Item_Shard_C_OnAddedToInventory");
static_assert(sizeof(BP_DataAsset_Item_Shard_C_OnAddedToInventory) == 0x0001E8, "Wrong size on BP_DataAsset_Item_Shard_C_OnAddedToInventory");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, InventoryManager) == 0x000000, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::InventoryManager' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, ItemId) == 0x000008, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::ItemId' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, LootContext) == 0x000010, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::LootContext' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, GeneratedItem) == 0x000018, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::GeneratedItem' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_GetItemDefinitionFromID_Found) == 0x000020, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_GetItemDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_GetItemDefinitionFromID_ReturnValue) == 0x000028, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_GetItemDefinitionFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_Conv_ObjectToText_ReturnValue) == 0x000158, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_Conv_ObjectToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, K2Node_MakeStruct_FormatArgumentData) == 0x000168, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_Not_PreBool_ReturnValue) == 0x0001B0, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, K2Node_MakeArray_Array) == 0x0001B8, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_CanAutoEquipConsumableShard_ReturnValue) == 0x0001C8, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_CanAutoEquipConsumableShard_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_Format_ReturnValue) == 0x0001D0, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_Array_Contains_ReturnValue) == 0x0001E0, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_NotEqual_NameName_ReturnValue) == 0x0001E1, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_Not_PreBool_ReturnValue_1) == 0x0001E2, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_BooleanAND_ReturnValue) == 0x0001E3, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_Shard_C_OnAddedToInventory, CallFunc_Array_Add_ReturnValue) == 0x0001E4, "Member 'BP_DataAsset_Item_Shard_C_OnAddedToInventory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

