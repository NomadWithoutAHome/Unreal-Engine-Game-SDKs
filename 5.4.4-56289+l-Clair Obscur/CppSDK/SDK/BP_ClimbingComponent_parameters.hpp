#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ClimbingComponent

#include "Basic.hpp"

#include "E_ClimbingComponentState_structs.hpp"
#include "E_Climbing_Direction_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EnhancedInput_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CameraShake
// 0x0078 (0x0078 - 0x0000)
struct BP_ClimbingComponent_C_CameraShake final
{
public:
	E_Climbing_Direction                          Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable;                               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_1;                             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_2;                             // 0x0018(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_3;                             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_4;                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_5;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_6;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_7;                             // 0x0040(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_8;                             // 0x0048(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           Temp_class_Variable_9;                             // 0x0050(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           K2Node_Select_Default;                             // 0x0070(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_CameraShake) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_CameraShake");
static_assert(sizeof(BP_ClimbingComponent_C_CameraShake) == 0x000078, "Wrong size on BP_ClimbingComponent_C_CameraShake");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_byte_Variable) == 0x000000, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable) == 0x000008, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_1) == 0x000010, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_2) == 0x000018, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_3) == 0x000020, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_4) == 0x000028, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_5) == 0x000030, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_6) == 0x000038, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_7) == 0x000040, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_8) == 0x000048, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, Temp_class_Variable_9) == 0x000050, "Member 'BP_ClimbingComponent_C_CameraShake::Temp_class_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, CallFunc_GetPlayerController_ReturnValue) == 0x000058, "Member 'BP_ClimbingComponent_C_CameraShake::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000060, "Member 'BP_ClimbingComponent_C_CameraShake::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, K2Node_DynamicCast_bSuccess) == 0x000068, "Member 'BP_ClimbingComponent_C_CameraShake::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CameraShake, K2Node_Select_Default) == 0x000070, "Member 'BP_ClimbingComponent_C_CameraShake::K2Node_Select_Default' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CanUseClimbingElement
// 0x0004 (0x0004 - 0x0000)
struct BP_ClimbingComponent_C_CanUseClimbingElement final
{
public:
	bool                                          CanClimb;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCapabilityAllowed_isAllowed;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_CanUseClimbingElement) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_CanUseClimbingElement");
static_assert(sizeof(BP_ClimbingComponent_C_CanUseClimbingElement) == 0x000004, "Wrong size on BP_ClimbingComponent_C_CanUseClimbingElement");
static_assert(offsetof(BP_ClimbingComponent_C_CanUseClimbingElement, CanClimb) == 0x000000, "Member 'BP_ClimbingComponent_C_CanUseClimbingElement::CanClimb' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CanUseClimbingElement, CallFunc_IsCapabilityAllowed_isAllowed) == 0x000001, "Member 'BP_ClimbingComponent_C_CanUseClimbingElement::CallFunc_IsCapabilityAllowed_isAllowed' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CanUseClimbingElement, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_ClimbingComponent_C_CanUseClimbingElement::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CanUseClimbingElement, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_ClimbingComponent_C_CanUseClimbingElement::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ChangeState
// 0x0001 (0x0001 - 0x0000)
struct BP_ClimbingComponent_C_ChangeState final
{
public:
	E_ClimbingComponentState                      NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ChangeState) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_ChangeState");
static_assert(sizeof(BP_ClimbingComponent_C_ChangeState) == 0x000001, "Wrong size on BP_ClimbingComponent_C_ChangeState");
static_assert(offsetof(BP_ClimbingComponent_C_ChangeState, NewState) == 0x000000, "Member 'BP_ClimbingComponent_C_ChangeState::NewState' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CheckExitingClimbing
// 0x00A8 (0x00A8 - 0x0000)
struct BP_ClimbingComponent_C_CheckExitingClimbing final
{
public:
	struct FVector                                CallFunc_ComputeInputDirections_InputDirectionHorizontal; // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeInputDirections_InputDirectionVertical; // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeInputDirections_InputScale;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckCanExitToTop_CanExit;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CheckCanExitToTop_Location;               // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CheckCanExitToTop_Rotation;               // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_CheckCanExitToBottom_CanExit;             // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_CheckCanExitToBottom_Location;            // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_CheckCanExitToBottom_Rotation;            // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_ClimbingComponent_C_CheckExitingClimbing) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_CheckExitingClimbing");
static_assert(sizeof(BP_ClimbingComponent_C_CheckExitingClimbing) == 0x0000A8, "Wrong size on BP_ClimbingComponent_C_CheckExitingClimbing");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_ComputeInputDirections_InputDirectionHorizontal) == 0x000000, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_ComputeInputDirections_InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_ComputeInputDirections_InputDirectionVertical) == 0x000018, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_ComputeInputDirections_InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_ComputeInputDirections_InputScale) == 0x000030, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_ComputeInputDirections_InputScale' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_CheckCanExitToTop_CanExit) == 0x000038, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_CheckCanExitToTop_CanExit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_CheckCanExitToTop_Location) == 0x000040, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_CheckCanExitToTop_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_CheckCanExitToTop_Rotation) == 0x000058, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_CheckCanExitToTop_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_CheckCanExitToBottom_CanExit) == 0x000070, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_CheckCanExitToBottom_CanExit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_CheckCanExitToBottom_Location) == 0x000078, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_CheckCanExitToBottom_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckExitingClimbing, CallFunc_CheckCanExitToBottom_Rotation) == 0x000090, "Member 'BP_ClimbingComponent_C_CheckExitingClimbing::CallFunc_CheckCanExitToBottom_Rotation' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CheckNextHold
// 0x0050 (0x0050 - 0x0000)
struct BP_ClimbingComponent_C_CheckNextHold final
{
public:
	struct FVector                                CallFunc_ComputeInputDirections_InputDirectionHorizontal; // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeInputDirections_InputDirectionVertical; // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeInputDirections_InputScale;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckMoveToNextClimbingElement_CanMove;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ClimbingElement_C> CallFunc_CheckMoveToNextClimbingElement_NextHold; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_CheckNextHold) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_CheckNextHold");
static_assert(sizeof(BP_ClimbingComponent_C_CheckNextHold) == 0x000050, "Wrong size on BP_ClimbingComponent_C_CheckNextHold");
static_assert(offsetof(BP_ClimbingComponent_C_CheckNextHold, CallFunc_ComputeInputDirections_InputDirectionHorizontal) == 0x000000, "Member 'BP_ClimbingComponent_C_CheckNextHold::CallFunc_ComputeInputDirections_InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckNextHold, CallFunc_ComputeInputDirections_InputDirectionVertical) == 0x000018, "Member 'BP_ClimbingComponent_C_CheckNextHold::CallFunc_ComputeInputDirections_InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckNextHold, CallFunc_ComputeInputDirections_InputScale) == 0x000030, "Member 'BP_ClimbingComponent_C_CheckNextHold::CallFunc_ComputeInputDirections_InputScale' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckNextHold, CallFunc_CheckMoveToNextClimbingElement_CanMove) == 0x000038, "Member 'BP_ClimbingComponent_C_CheckNextHold::CallFunc_CheckMoveToNextClimbingElement_CanMove' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_CheckNextHold, CallFunc_CheckMoveToNextClimbingElement_NextHold) == 0x000040, "Member 'BP_ClimbingComponent_C_CheckNextHold::CallFunc_CheckMoveToNextClimbingElement_NextHold' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeAlpha
// 0x0038 (0x0038 - 0x0000)
struct BP_ClimbingComponent_C_ComputeAlpha final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_Value_ImplicitCast;                // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeAlpha) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ComputeAlpha");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeAlpha) == 0x000038, "Wrong size on BP_ClimbingComponent_C_ComputeAlpha");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, Time) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeAlpha::Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, Curve) == 0x000008, "Member 'BP_ClimbingComponent_C_ComputeAlpha::Curve' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, Alpha) == 0x000010, "Member 'BP_ClimbingComponent_C_ComputeAlpha::Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, CallFunc_GetFloatValue_ReturnValue) == 0x000018, "Member 'BP_ClimbingComponent_C_ComputeAlpha::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, CallFunc_FClamp_ReturnValue) == 0x000020, "Member 'BP_ClimbingComponent_C_ComputeAlpha::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000028, "Member 'BP_ClimbingComponent_C_ComputeAlpha::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeAlpha, CallFunc_FClamp_Value_ImplicitCast) == 0x000030, "Member 'BP_ClimbingComponent_C_ComputeAlpha::CallFunc_FClamp_Value_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeClimbingAngle
// 0x0180 (0x0180 - 0x0000)
struct BP_ClimbingComponent_C_ComputeClimbingAngle final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        local_DirectionAngle;                              // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_GetTransform_ReturnValue;                 // 0x0010(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_wildcard_Variable;                            // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Vector_Up_ReturnValue_1;                  // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DegAcos_ReturnValue;                      // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0168(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeClimbingAngle) == 0x000010, "Wrong alignment on BP_ClimbingComponent_C_ComputeClimbingAngle");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeClimbingAngle) == 0x000180, "Wrong size on BP_ClimbingComponent_C_ComputeClimbingAngle");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, Angle) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::Angle' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, local_DirectionAngle) == 0x000008, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::local_DirectionAngle' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_GetTransform_ReturnValue) == 0x000010, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_GetTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, Temp_wildcard_Variable) == 0x000070, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Vector_Up_ReturnValue) == 0x000088, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000A0, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Cross_VectorVector_ReturnValue) == 0x0000A8, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_BreakVector_X) == 0x0000C0, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_BreakVector_Y) == 0x0000C8, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_BreakVector_Z) == 0x0000D0, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Vector_Up_ReturnValue_1) == 0x0000D8, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Vector_Up_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000F0, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000F8, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_DegAcos_ReturnValue) == 0x000100, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_DegAcos_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000108, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_InverseTransformDirection_ReturnValue) == 0x000120, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_BreakVector_X_1) == 0x000138, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_BreakVector_Y_1) == 0x000140, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_BreakVector_Z_1) == 0x000148, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_MakeVector_ReturnValue) == 0x000150, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingAngle, CallFunc_Normal_ReturnValue) == 0x000168, "Member 'BP_ClimbingComponent_C_ComputeClimbingAngle::CallFunc_Normal_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeClimbingDirection
// 0x0110 (0x0110 - 0x0000)
struct BP_ClimbingComponent_C_ComputeClimbingDirection final
{
public:
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class ABP_Holds_C*                            K2Node_DynamicCast_AsBP_Holds;                     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0010)()
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0040(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0088(0x0010)()
	double                                        CallFunc_ComputeClimbingAngle_Angle;               // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00A0(0x0048)(HasGetValueTypeHash)
	E_Climbing_Direction                          CallFunc_GetClimbingDirectionFromAngle_ClimbingDirection; // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00F0(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeClimbingDirection) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ComputeClimbingDirection");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeClimbingDirection) == 0x000110, "Wrong size on BP_ClimbingComponent_C_ComputeClimbingDirection");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, K2Node_DynamicCast_AsBP_Holds) == 0x000010, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::K2Node_DynamicCast_AsBP_Holds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_GetDisplayName_ReturnValue) == 0x000030, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, K2Node_MakeStruct_FormatArgumentData) == 0x000040, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000088, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_ComputeClimbingAngle_Angle) == 0x000098, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_ComputeClimbingAngle_Angle' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000A0, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_GetClimbingDirectionFromAngle_ClimbingDirection) == 0x0000E8, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_GetClimbingDirectionFromAngle_ClimbingDirection' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, K2Node_MakeArray_Array) == 0x0000F0, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingDirection, CallFunc_Format_ReturnValue) == 0x000100, "Member 'BP_ClimbingComponent_C_ComputeClimbingDirection::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeClimbingLocation
// 0x0098 (0x0098 - 0x0000)
struct BP_ClimbingComponent_C_ComputeClimbingLocation final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetLastInputVector_ReturnValue;           // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeTime_Time;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LerpLocationAndRotation_Alpha;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LerpLocationAndRotation_Location;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LerpLocationAndRotation_Rotation;         // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeTime_MaxTime_ImplicitCast;         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeClimbingLocation) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ComputeClimbingLocation");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeClimbingLocation) == 0x000098, "Wrong size on BP_ClimbingComponent_C_ComputeClimbingLocation");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_GetLastInputVector_ReturnValue) == 0x000008, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_GetLastInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_VSize_ReturnValue) == 0x000020, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_GetTimeRange_MinTime) == 0x00002C, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_GetTimeRange_MaxTime) == 0x000030, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_ComputeTime_Time) == 0x000038, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_ComputeTime_Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_FClamp_ReturnValue) == 0x000048, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_LerpLocationAndRotation_Alpha) == 0x000050, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_LerpLocationAndRotation_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_LerpLocationAndRotation_Location) == 0x000058, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_LerpLocationAndRotation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_LerpLocationAndRotation_Rotation) == 0x000070, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_LerpLocationAndRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_BooleanAND_ReturnValue) == 0x000089, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeClimbingLocation, CallFunc_ComputeTime_MaxTime_ImplicitCast) == 0x000090, "Member 'BP_ClimbingComponent_C_ComputeClimbingLocation::CallFunc_ComputeTime_MaxTime_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeFootRaycast
// 0x0288 (0x0288 - 0x0000)
struct BP_ClimbingComponent_C_ComputeFootRaycast final
{
public:
	class FName                                   SocketName;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasHit;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0048(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x00B8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01B2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B3[0x1];                                      // 0x01B3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0228(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0230(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeFootRaycast) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ComputeFootRaycast");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeFootRaycast) == 0x000288, "Wrong size on BP_ClimbingComponent_C_ComputeFootRaycast");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, SocketName) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::SocketName' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, HasHit) == 0x000008, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::HasHit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, Location) == 0x000010, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000030, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, K2Node_MakeArray_Array) == 0x000048, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_GetSocketLocation_ReturnValue) == 0x000058, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_GetForwardVector_ReturnValue) == 0x000070, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_Add_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_LineTraceSingle_OutHit) == 0x0000B8, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_LineTraceSingle_ReturnValue) == 0x0001B0, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_bBlockingHit) == 0x0001B1, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001B2, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_Time) == 0x0001B4, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_Distance) == 0x0001B8, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_Location) == 0x0001C0, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_ImpactPoint) == 0x0001D8, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_Normal) == 0x0001F0, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_ImpactNormal) == 0x000208, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_PhysMat) == 0x000220, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_HitActor) == 0x000228, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_HitComponent) == 0x000230, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_HitBoneName) == 0x000238, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_BoneName) == 0x000240, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_HitItem) == 0x000248, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_ElementIndex) == 0x00024C, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_FaceIndex) == 0x000250, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_TraceStart) == 0x000258, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycast, CallFunc_BreakHitResult_TraceEnd) == 0x000270, "Member 'BP_ClimbingComponent_C_ComputeFootRaycast::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeFootRaycasts
// 0x0040 (0x0040 - 0x0000)
struct BP_ClimbingComponent_C_ComputeFootRaycasts final
{
public:
	bool                                          CallFunc_ComputeFootRaycast_HasHit;                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_ComputeFootRaycast_Location;              // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ComputeFootRaycast_HasHit_1;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_ComputeFootRaycast_Location_1;            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeFootRaycasts) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ComputeFootRaycasts");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeFootRaycasts) == 0x000040, "Wrong size on BP_ClimbingComponent_C_ComputeFootRaycasts");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycasts, CallFunc_ComputeFootRaycast_HasHit) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeFootRaycasts::CallFunc_ComputeFootRaycast_HasHit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycasts, CallFunc_ComputeFootRaycast_Location) == 0x000008, "Member 'BP_ClimbingComponent_C_ComputeFootRaycasts::CallFunc_ComputeFootRaycast_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycasts, CallFunc_ComputeFootRaycast_HasHit_1) == 0x000020, "Member 'BP_ClimbingComponent_C_ComputeFootRaycasts::CallFunc_ComputeFootRaycast_HasHit_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeFootRaycasts, CallFunc_ComputeFootRaycast_Location_1) == 0x000028, "Member 'BP_ClimbingComponent_C_ComputeFootRaycasts::CallFunc_ComputeFootRaycast_Location_1' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeInputDirections
// 0x0220 (0x0220 - 0x0000)
struct BP_ClimbingComponent_C_ComputeInputDirections final
{
public:
	struct FVector                                InputDirectionHorizontal;                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirectionVertical;                            // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CallFunc_GetCurrentClimbingElementTransform_ReturnValue; // 0x0040(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetLastInputVector_ReturnValue;           // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCameraLocation_ReturnValue;            // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0110(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_InverseTransformDirection_ReturnValue;    // 0x01D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GreaterGreater_VectorRotator_ReturnValue; // 0x01E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0200(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeInputDirections) == 0x000010, "Wrong alignment on BP_ClimbingComponent_C_ComputeInputDirections");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeInputDirections) == 0x000220, "Wrong size on BP_ClimbingComponent_C_ComputeInputDirections");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, InputDirectionHorizontal) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, InputDirectionVertical) == 0x000018, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, InputScale) == 0x000030, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::InputScale' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_GetCurrentClimbingElementTransform_ReturnValue) == 0x000040, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_GetCurrentClimbingElementTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_MakeRotator_ReturnValue) == 0x0000A0, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x0000B8, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_GetCameraRotation_ReturnValue) == 0x0000C0, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_GetLastInputVector_ReturnValue) == 0x0000D8, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_GetLastInputVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_GetCameraLocation_ReturnValue) == 0x0000F0, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_GetCameraLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_VSize_ReturnValue) == 0x000108, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_MakeTransform_ReturnValue) == 0x000110, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_BreakVector_X) == 0x000170, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_BreakVector_Y) == 0x000178, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_BreakVector_Z) == 0x000180, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_BreakVector_X_1) == 0x000188, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_BreakVector_Y_1) == 0x000190, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_BreakVector_Z_1) == 0x000198, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_MakeVector_ReturnValue) == 0x0001A0, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_MakeVector_ReturnValue_1) == 0x0001B8, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_InverseTransformDirection_ReturnValue) == 0x0001D0, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_InverseTransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_GreaterGreater_VectorRotator_ReturnValue) == 0x0001E8, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_GreaterGreater_VectorRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeInputDirections, CallFunc_TransformDirection_ReturnValue) == 0x000200, "Member 'BP_ClimbingComponent_C_ComputeInputDirections::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeTime
// 0x0028 (0x0028 - 0x0000)
struct BP_ClimbingComponent_C_ComputeTime final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxTime;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Time;                                              // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ComputeTime) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ComputeTime");
static_assert(sizeof(BP_ClimbingComponent_C_ComputeTime) == 0x000028, "Wrong size on BP_ClimbingComponent_C_ComputeTime");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeTime, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_ComputeTime::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeTime, MaxTime) == 0x000008, "Member 'BP_ClimbingComponent_C_ComputeTime::MaxTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeTime, Time) == 0x000010, "Member 'BP_ClimbingComponent_C_ComputeTime::Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeTime, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_ClimbingComponent_C_ComputeTime::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ComputeTime, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000020, "Member 'BP_ClimbingComponent_C_ComputeTime::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.DEBUG_OnDebugModeEnabled
// 0x0001 (0x0001 - 0x0000)
struct BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled");
static_assert(sizeof(BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled) == 0x000001, "Wrong size on BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled, Enabled) == 0x000000, "Member 'BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled::Enabled' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.DEBUG_UpdateClimbingComponent
// 0x0168 (0x0168 - 0x0000)
struct BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_InputDirectionVertical;                      // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_InputDirectionHorizontal;                    // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_CurrentLocation;                             // 0x0038(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClimbingElementLocation_Location;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidInterface_ReturnValue;             // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue_1;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue_1;      // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeInputDirections_InputDirectionHorizontal; // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeInputDirections_InputDirectionVertical; // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeInputDirections_InputScale;        // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckMoveToNextClimbingElement_CanMove;   // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ClimbingElement_C> CallFunc_CheckMoveToNextClimbingElement_NextHold; // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClimbingElementLocation_Location_1;    // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent");
static_assert(sizeof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent) == 0x000168, "Wrong size on BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, local_InputDirectionVertical) == 0x000008, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::local_InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, local_InputDirectionHorizontal) == 0x000020, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::local_InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, local_CurrentLocation) == 0x000038, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::local_CurrentLocation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_GetClimbingElementLocation_Location) == 0x000050, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_GetClimbingElementLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_IsValidInterface_ReturnValue) == 0x000068, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_IsValidInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000070, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000088, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_Conv_DoubleToVector_ReturnValue_1) == 0x0000A0, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_Conv_DoubleToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_Multiply_VectorVector_ReturnValue_1) == 0x0000B8, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_Multiply_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_Add_VectorVector_ReturnValue) == 0x0000D0, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_Add_VectorVector_ReturnValue_1) == 0x0000E8, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_ComputeInputDirections_InputDirectionHorizontal) == 0x000100, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_ComputeInputDirections_InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_ComputeInputDirections_InputDirectionVertical) == 0x000118, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_ComputeInputDirections_InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_ComputeInputDirections_InputScale) == 0x000130, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_ComputeInputDirections_InputScale' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_CheckMoveToNextClimbingElement_CanMove) == 0x000138, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_CheckMoveToNextClimbingElement_CanMove' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_CheckMoveToNextClimbingElement_NextHold) == 0x000140, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_CheckMoveToNextClimbingElement_NextHold' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent, CallFunc_GetClimbingElementLocation_Location_1) == 0x000150, "Member 'BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent::CallFunc_GetClimbingElementLocation_Location_1' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ExecuteUbergraph_BP_ClimbingComponent
// 0x0300 (0x0300 - 0x0000)
struct BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionValue                      K2Node_EnhancedInputActionEvent_ActionValue_1;     // 0x0008(0x0020)(NoDestructor)
	float                                         K2Node_EnhancedInputActionEvent_ElapsedTime_1;     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_EnhancedInputActionEvent_TriggeredTime_1;   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UInputAction*                     K2Node_EnhancedInputActionEvent_SourceAction_1;    // 0x0030(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UInputAction*                           Temp_object_Variable;                              // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_InputActionValueToAxis1D_ReturnValue; // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_0;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1_0;                            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FInputActionValue                      K2Node_EnhancedInputActionEvent_ActionValue;       // 0x0070(0x0020)(NoDestructor)
	float                                         K2Node_EnhancedInputActionEvent_ElapsedTime;       // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_EnhancedInputActionEvent_TriggeredTime;     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UInputAction*                     K2Node_EnhancedInputActionEvent_SourceAction;      // 0x0098(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_InputActionValueToAxis1D_ReturnValue_1; // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UInputAction*                           Temp_object_Variable_1;                            // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3_0;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_5;                              // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4_0;                            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_TotalDuration;                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x00F0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x01E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9[0x7];                                      // 0x01E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1; // 0x01F0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1; // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_UpdateClimbingComponent_DeltaSeconds_ImplicitCast; // 0x02F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_DEBUG_UpdateClimbingComponent_DeltaSeconds_ImplicitCast; // 0x02F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent");
static_assert(sizeof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent) == 0x000300, "Wrong size on BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, EntryPoint) == 0x000000, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_ActionValue_1) == 0x000008, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_ActionValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_ElapsedTime_1) == 0x000028, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_ElapsedTime_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_TriggeredTime_1) == 0x00002C, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_TriggeredTime_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_SourceAction_1) == 0x000030, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_SourceAction_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_object_Variable) == 0x000038, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_Conv_InputActionValueToAxis1D_ReturnValue) == 0x000040, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_Conv_InputActionValueToAxis1D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable) == 0x000048, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_1) == 0x000050, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_0) == 0x000058, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_0' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_1_0) == 0x000060, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_1_0' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_2) == 0x000068, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_ActionValue) == 0x000070, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_ActionValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_ElapsedTime) == 0x000090, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_ElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_TriggeredTime) == 0x000094, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_TriggeredTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_EnhancedInputActionEvent_SourceAction) == 0x000098, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_EnhancedInputActionEvent_SourceAction' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_Conv_InputActionValueToAxis1D_ReturnValue_1) == 0x0000A0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_Conv_InputActionValueToAxis1D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_object_Variable_1) == 0x0000A8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_3) == 0x0000B0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_3_0) == 0x0000B8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_3_0' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_4) == 0x0000C0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_5) == 0x0000C8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, Temp_real_Variable_4_0) == 0x0000D0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::Temp_real_Variable_4_0' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_CustomEvent_TotalDuration) == 0x0000D8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_CustomEvent_TotalDuration' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x0000E8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x0000F0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x0001E8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1) == 0x0001F0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1) == 0x0002E8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, K2Node_Event_DeltaSeconds) == 0x0002EC, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_UpdateClimbingComponent_DeltaSeconds_ImplicitCast) == 0x0002F0, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_UpdateClimbingComponent_DeltaSeconds_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent, CallFunc_DEBUG_UpdateClimbingComponent_DeltaSeconds_ImplicitCast) == 0x0002F8, "Member 'BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent::CallFunc_DEBUG_UpdateClimbingComponent_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetCharacterHandsLocation
// 0x0090 (0x0090 - 0x0000)
struct BP_ClimbingComponent_C_GetCharacterHandsLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Divide_VectorVector_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetCharacterHandsLocation) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_GetCharacterHandsLocation");
static_assert(sizeof(BP_ClimbingComponent_C_GetCharacterHandsLocation) == 0x000090, "Wrong size on BP_ClimbingComponent_C_GetCharacterHandsLocation");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsLocation, ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_GetCharacterHandsLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsLocation, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000018, "Member 'BP_ClimbingComponent_C_GetCharacterHandsLocation::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000030, "Member 'BP_ClimbingComponent_C_GetCharacterHandsLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsLocation, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000048, "Member 'BP_ClimbingComponent_C_GetCharacterHandsLocation::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000060, "Member 'BP_ClimbingComponent_C_GetCharacterHandsLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsLocation, CallFunc_Divide_VectorVector_ReturnValue) == 0x000078, "Member 'BP_ClimbingComponent_C_GetCharacterHandsLocation::CallFunc_Divide_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetCharacterHandsOffset
// 0x0060 (0x0060 - 0x0000)
struct BP_ClimbingComponent_C_GetCharacterHandsOffset final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCharacterHandsLocation_ReturnValue;    // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetCharacterHandsOffset) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_GetCharacterHandsOffset");
static_assert(sizeof(BP_ClimbingComponent_C_GetCharacterHandsOffset) == 0x000060, "Wrong size on BP_ClimbingComponent_C_GetCharacterHandsOffset");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsOffset, ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_GetCharacterHandsOffset::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsOffset, CallFunc_GetCharacterHandsLocation_ReturnValue) == 0x000018, "Member 'BP_ClimbingComponent_C_GetCharacterHandsOffset::CallFunc_GetCharacterHandsLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsOffset, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_ClimbingComponent_C_GetCharacterHandsOffset::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCharacterHandsOffset, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000048, "Member 'BP_ClimbingComponent_C_GetCharacterHandsOffset::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetClimbingDirection
// 0x0001 (0x0001 - 0x0000)
struct BP_ClimbingComponent_C_GetClimbingDirection final
{
public:
	E_Climbing_Direction                          ClimbingDirection;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetClimbingDirection) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_GetClimbingDirection");
static_assert(sizeof(BP_ClimbingComponent_C_GetClimbingDirection) == 0x000001, "Wrong size on BP_ClimbingComponent_C_GetClimbingDirection");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirection, ClimbingDirection) == 0x000000, "Member 'BP_ClimbingComponent_C_GetClimbingDirection::ClimbingDirection' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetClimbingDirectionFromAngle
// 0x00D8 (0x00D8 - 0x0000)
struct BP_ClimbingComponent_C_GetClimbingDirectionFromAngle final
{
public:
	double                                        Angle;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Climbing_Direction                          ClimbingDirection;                                 // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, E_Climbing_Direction>             IndexToClimbingDirection;                          // 0x0010(0x0050)(Edit, BlueprintVisible)
	TMap<int32, E_Climbing_Direction>             K2Node_MakeVariable_MakeVariableOutput;            // 0x0060(0x0050)()
	double                                        CallFunc_Percent_FloatFloat_ReturnValue;           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Climbing_Direction                          CallFunc_Map_Find_Value;                           // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_GetClimbingDirectionFromAngle");
static_assert(sizeof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle) == 0x0000D8, "Wrong size on BP_ClimbingComponent_C_GetClimbingDirectionFromAngle");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, Angle) == 0x000000, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::Angle' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, ClimbingDirection) == 0x000008, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::ClimbingDirection' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, IndexToClimbingDirection) == 0x000010, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::IndexToClimbingDirection' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, K2Node_MakeVariable_MakeVariableOutput) == 0x000060, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::K2Node_MakeVariable_MakeVariableOutput' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_Percent_FloatFloat_ReturnValue) == 0x0000B0, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_Percent_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000C0, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_FClamp_ReturnValue) == 0x0000C8, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_FTrunc_ReturnValue) == 0x0000D0, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_Map_Find_Value) == 0x0000D4, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingDirectionFromAngle, CallFunc_Map_Find_ReturnValue) == 0x0000D5, "Member 'BP_ClimbingComponent_C_GetClimbingDirectionFromAngle::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetClimbingState
// 0x0001 (0x0001 - 0x0000)
struct BP_ClimbingComponent_C_GetClimbingState final
{
public:
	E_ClimbingComponentState                      ClimbingState;                                     // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetClimbingState) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_GetClimbingState");
static_assert(sizeof(BP_ClimbingComponent_C_GetClimbingState) == 0x000001, "Wrong size on BP_ClimbingComponent_C_GetClimbingState");
static_assert(offsetof(BP_ClimbingComponent_C_GetClimbingState, ClimbingState) == 0x000000, "Member 'BP_ClimbingComponent_C_GetClimbingState::ClimbingState' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetCurrentClimbingElementTransform
// 0x00F0 (0x00F0 - 0x0000)
struct BP_ClimbingComponent_C_GetCurrentClimbingElementTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClimbingElementLocation_Location;      // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetClimbingElementRotation_Rotation;      // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0090(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetCurrentClimbingElementTransform) == 0x000010, "Wrong alignment on BP_ClimbingComponent_C_GetCurrentClimbingElementTransform");
static_assert(sizeof(BP_ClimbingComponent_C_GetCurrentClimbingElementTransform) == 0x0000F0, "Wrong size on BP_ClimbingComponent_C_GetCurrentClimbingElementTransform");
static_assert(offsetof(BP_ClimbingComponent_C_GetCurrentClimbingElementTransform, ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_GetCurrentClimbingElementTransform::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCurrentClimbingElementTransform, CallFunc_GetClimbingElementLocation_Location) == 0x000060, "Member 'BP_ClimbingComponent_C_GetCurrentClimbingElementTransform::CallFunc_GetClimbingElementLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCurrentClimbingElementTransform, CallFunc_GetClimbingElementRotation_Rotation) == 0x000078, "Member 'BP_ClimbingComponent_C_GetCurrentClimbingElementTransform::CallFunc_GetClimbingElementRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetCurrentClimbingElementTransform, CallFunc_MakeTransform_ReturnValue) == 0x000090, "Member 'BP_ClimbingComponent_C_GetCurrentClimbingElementTransform::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetDistanceToNextClimbingElement
// 0x0008 (0x0008 - 0x0000)
struct BP_ClimbingComponent_C_GetDistanceToNextClimbingElement final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetDistanceToNextClimbingElement) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_GetDistanceToNextClimbingElement");
static_assert(sizeof(BP_ClimbingComponent_C_GetDistanceToNextClimbingElement) == 0x000008, "Wrong size on BP_ClimbingComponent_C_GetDistanceToNextClimbingElement");
static_assert(offsetof(BP_ClimbingComponent_C_GetDistanceToNextClimbingElement, Value) == 0x000000, "Member 'BP_ClimbingComponent_C_GetDistanceToNextClimbingElement::Value' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetFootRaycasts
// 0x0030 (0x0030 - 0x0000)
struct BP_ClimbingComponent_C_GetFootRaycasts final
{
public:
	struct FVector                                LeftFootRaycastLocation_0;                         // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightFootRaycastLocation_0;                        // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetFootRaycasts) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_GetFootRaycasts");
static_assert(sizeof(BP_ClimbingComponent_C_GetFootRaycasts) == 0x000030, "Wrong size on BP_ClimbingComponent_C_GetFootRaycasts");
static_assert(offsetof(BP_ClimbingComponent_C_GetFootRaycasts, LeftFootRaycastLocation_0) == 0x000000, "Member 'BP_ClimbingComponent_C_GetFootRaycasts::LeftFootRaycastLocation_0' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_GetFootRaycasts, RightFootRaycastLocation_0) == 0x000018, "Member 'BP_ClimbingComponent_C_GetFootRaycasts::RightFootRaycastLocation_0' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetTimeToPerformStateChange
// 0x0008 (0x0008 - 0x0000)
struct BP_ClimbingComponent_C_GetTimeToPerformStateChange final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_GetTimeToPerformStateChange) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_GetTimeToPerformStateChange");
static_assert(sizeof(BP_ClimbingComponent_C_GetTimeToPerformStateChange) == 0x000008, "Wrong size on BP_ClimbingComponent_C_GetTimeToPerformStateChange");
static_assert(offsetof(BP_ClimbingComponent_C_GetTimeToPerformStateChange, Value) == 0x000000, "Member 'BP_ClimbingComponent_C_GetTimeToPerformStateChange::Value' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InitializeClimbingComponent
// 0x0018 (0x0018 - 0x0000)
struct BP_ClimbingComponent_C_InitializeClimbingComponent final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             K2Node_DynamicCast_AsBP_J_RPG_Character_World;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_InitializeClimbingComponent) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_InitializeClimbingComponent");
static_assert(sizeof(BP_ClimbingComponent_C_InitializeClimbingComponent) == 0x000018, "Wrong size on BP_ClimbingComponent_C_InitializeClimbingComponent");
static_assert(offsetof(BP_ClimbingComponent_C_InitializeClimbingComponent, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_InitializeClimbingComponent::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InitializeClimbingComponent, K2Node_DynamicCast_AsBP_J_RPG_Character_World) == 0x000008, "Member 'BP_ClimbingComponent_C_InitializeClimbingComponent::K2Node_DynamicCast_AsBP_J_RPG_Character_World' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InitializeClimbingComponent, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_ClimbingComponent_C_InitializeClimbingComponent::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InitializeDebug
// 0x0010 (0x0010 - 0x0000)
struct BP_ClimbingComponent_C_InitializeDebug final
{
public:
	TDelegate<void(bool NewValue)>                K2Node_CreateDelegate_OutputDelegate;              // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_InitializeDebug) == 0x000004, "Wrong alignment on BP_ClimbingComponent_C_InitializeDebug");
static_assert(sizeof(BP_ClimbingComponent_C_InitializeDebug) == 0x000010, "Wrong size on BP_ClimbingComponent_C_InitializeDebug");
static_assert(offsetof(BP_ClimbingComponent_C_InitializeDebug, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_ClimbingComponent_C_InitializeDebug::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1
// 0x0030 (0x0030 - 0x0000)
struct BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1 final
{
public:
	struct FInputActionValue                      ActionValue;                                       // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         ElapsedTime;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggeredTime;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UInputAction*                     SourceAction;                                      // 0x0028(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1");
static_assert(sizeof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1) == 0x000030, "Wrong size on BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1, ActionValue) == 0x000000, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1::ActionValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1, ElapsedTime) == 0x000020, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1::ElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1, TriggeredTime) == 0x000024, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1::TriggeredTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1, SourceAction) == 0x000028, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1::SourceAction' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0
// 0x0030 (0x0030 - 0x0000)
struct BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0 final
{
public:
	struct FInputActionValue                      ActionValue;                                       // 0x0000(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
	float                                         ElapsedTime;                                       // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TriggeredTime;                                     // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UInputAction*                     SourceAction;                                      // 0x0028(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0");
static_assert(sizeof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0) == 0x000030, "Wrong size on BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0, ActionValue) == 0x000000, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0::ActionValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0, ElapsedTime) == 0x000020, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0::ElapsedTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0, TriggeredTime) == 0x000024, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0::TriggeredTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0, SourceAction) == 0x000028, "Member 'BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0::SourceAction' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InputAxisClimbingRight
// 0x0048 (0x0048 - 0x0000)
struct BP_ClimbingComponent_C_InputAxisClimbingRight final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetClimbingElementRotation_Rotation;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_InputAxisClimbingRight) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_InputAxisClimbingRight");
static_assert(sizeof(BP_ClimbingComponent_C_InputAxisClimbingRight) == 0x000048, "Wrong size on BP_ClimbingComponent_C_InputAxisClimbingRight");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingRight, AxisValue) == 0x000000, "Member 'BP_ClimbingComponent_C_InputAxisClimbingRight::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingRight, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'BP_ClimbingComponent_C_InputAxisClimbingRight::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingRight, CallFunc_GetClimbingElementRotation_Rotation) == 0x000010, "Member 'BP_ClimbingComponent_C_InputAxisClimbingRight::CallFunc_GetClimbingElementRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingRight, CallFunc_GetRightVector_ReturnValue) == 0x000028, "Member 'BP_ClimbingComponent_C_InputAxisClimbingRight::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingRight, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000040, "Member 'BP_ClimbingComponent_C_InputAxisClimbingRight::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InputAxisClimbingUp
// 0x0048 (0x0048 - 0x0000)
struct BP_ClimbingComponent_C_InputAxisClimbingUp final
{
public:
	double                                        AxisValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetClimbingElementRotation_Rotation;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetUpVector_ReturnValue;                  // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AddMovementInput_ScaleValue_ImplicitCast; // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_InputAxisClimbingUp) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_InputAxisClimbingUp");
static_assert(sizeof(BP_ClimbingComponent_C_InputAxisClimbingUp) == 0x000048, "Wrong size on BP_ClimbingComponent_C_InputAxisClimbingUp");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingUp, AxisValue) == 0x000000, "Member 'BP_ClimbingComponent_C_InputAxisClimbingUp::AxisValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingUp, K2Node_SwitchEnum_CmpSuccess) == 0x000008, "Member 'BP_ClimbingComponent_C_InputAxisClimbingUp::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingUp, CallFunc_GetClimbingElementRotation_Rotation) == 0x000010, "Member 'BP_ClimbingComponent_C_InputAxisClimbingUp::CallFunc_GetClimbingElementRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingUp, CallFunc_GetUpVector_ReturnValue) == 0x000028, "Member 'BP_ClimbingComponent_C_InputAxisClimbingUp::CallFunc_GetUpVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_InputAxisClimbingUp, CallFunc_AddMovementInput_ScaleValue_ImplicitCast) == 0x000040, "Member 'BP_ClimbingComponent_C_InputAxisClimbingUp::CallFunc_AddMovementInput_ScaleValue_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.IsClimbing
// 0x0003 (0x0003 - 0x0000)
struct BP_ClimbingComponent_C_IsClimbing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ClimbingComponentState                      CallFunc_GetClimbingState_ClimbingState;           // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_IsClimbing) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_IsClimbing");
static_assert(sizeof(BP_ClimbingComponent_C_IsClimbing) == 0x000003, "Wrong size on BP_ClimbingComponent_C_IsClimbing");
static_assert(offsetof(BP_ClimbingComponent_C_IsClimbing, ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_IsClimbing::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsClimbing, CallFunc_GetClimbingState_ClimbingState) == 0x000001, "Member 'BP_ClimbingComponent_C_IsClimbing::CallFunc_GetClimbingState_ClimbingState' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsClimbing, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000002, "Member 'BP_ClimbingComponent_C_IsClimbing::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.IsMovingToTop
// 0x0006 (0x0006 - 0x0000)
struct BP_ClimbingComponent_C_IsMovingToTop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_IsMovingToTop) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_IsMovingToTop");
static_assert(sizeof(BP_ClimbingComponent_C_IsMovingToTop) == 0x000006, "Wrong size on BP_ClimbingComponent_C_IsMovingToTop");
static_assert(offsetof(BP_ClimbingComponent_C_IsMovingToTop, ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_IsMovingToTop::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsMovingToTop, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_ClimbingComponent_C_IsMovingToTop::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsMovingToTop, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_ClimbingComponent_C_IsMovingToTop::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsMovingToTop, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000003, "Member 'BP_ClimbingComponent_C_IsMovingToTop::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsMovingToTop, CallFunc_BooleanOR_ReturnValue) == 0x000004, "Member 'BP_ClimbingComponent_C_IsMovingToTop::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_IsMovingToTop, CallFunc_BooleanOR_ReturnValue_1) == 0x000005, "Member 'BP_ClimbingComponent_C_IsMovingToTop::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.LerpLocationAndRotation
// 0x0090 (0x0090 - 0x0000)
struct BP_ClimbingComponent_C_LerpLocationAndRotation final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_ComputeAlpha_Alpha;                       // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_wildcard_Variable;                            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RLerp_Alpha_ImplicitCast;                 // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_LerpLocationAndRotation) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_LerpLocationAndRotation");
static_assert(sizeof(BP_ClimbingComponent_C_LerpLocationAndRotation) == 0x000090, "Wrong size on BP_ClimbingComponent_C_LerpLocationAndRotation");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, Time) == 0x000000, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, Curve) == 0x000008, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::Curve' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, Alpha) == 0x000010, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, Location) == 0x000018, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, Rotation) == 0x000030, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, CallFunc_ComputeAlpha_Alpha) == 0x000048, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::CallFunc_ComputeAlpha_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, Temp_wildcard_Variable) == 0x000050, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, CallFunc_RLerp_ReturnValue) == 0x000058, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, CallFunc_VLerp_ReturnValue) == 0x000070, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, CallFunc_VLerp_Alpha_ImplicitCast) == 0x000088, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotation, CallFunc_RLerp_Alpha_ImplicitCast) == 0x00008C, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotation::CallFunc_RLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.LerpLocationAndRotationForEntry
// 0x0130 (0x0130 - 0x0000)
struct BP_ClimbingComponent_C_LerpLocationAndRotationForEntry final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        local_Alpha;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeAlpha_Alpha;                       // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_2;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_3;            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue_1;                      // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X_1;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingToTop_ReturnValue;                // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RLerp_Alpha_ImplicitCast;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RLerp_Alpha_ImplicitCast_1;               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_LerpLocationAndRotationForEntry");
static_assert(sizeof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry) == 0x000130, "Wrong size on BP_ClimbingComponent_C_LerpLocationAndRotationForEntry");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, Time) == 0x000000, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, Curve) == 0x000008, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::Curve' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, Alpha) == 0x000010, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, Location) == 0x000018, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, Rotation) == 0x000030, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, local_Alpha) == 0x000048, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::local_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_ComputeAlpha_Alpha) == 0x000050, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_ComputeAlpha_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_MapRangeClamped_ReturnValue) == 0x000058, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000060, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_RLerp_ReturnValue) == 0x000068, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_VLerp_ReturnValue) == 0x000080, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_MapRangeClamped_ReturnValue_2) == 0x000098, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_MapRangeClamped_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_MapRangeClamped_ReturnValue_3) == 0x0000A0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_MapRangeClamped_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_RLerp_ReturnValue_1) == 0x0000A8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_RLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_BreakVector_X) == 0x0000C0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_BreakVector_Y) == 0x0000C8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_BreakVector_Z) == 0x0000D0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_BreakVector_X_1) == 0x0000D8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_BreakVector_Y_1) == 0x0000E0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_BreakVector_Z_1) == 0x0000E8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_Lerp_ReturnValue) == 0x0000F0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_Lerp_ReturnValue_1) == 0x0000F8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_Lerp_ReturnValue_2) == 0x000100, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_IsMovingToTop_ReturnValue) == 0x000120, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_IsMovingToTop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_VLerp_Alpha_ImplicitCast) == 0x000124, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_RLerp_Alpha_ImplicitCast) == 0x000128, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_RLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForEntry, CallFunc_RLerp_Alpha_ImplicitCast_1) == 0x00012C, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForEntry::CallFunc_RLerp_Alpha_ImplicitCast_1' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.LerpLocationAndRotationForExit
// 0x0128 (0x0128 - 0x0000)
struct BP_ClimbingComponent_C_LerpLocationAndRotationForExit final
{
public:
	double                                        Time;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Alpha;                                             // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        local_Alpha;                                       // 0x0048(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LerpLocationAndRotation_Alpha;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LerpLocationAndRotation_Location;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LerpLocationAndRotation_Rotation;         // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_ComputeAlpha_Alpha;                       // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue_1;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_RLerp_ReturnValue;                        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_BreakVector_X;                            // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingToTop_ReturnValue;                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X_1;                          // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y_1;                          // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z_1;                          // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RLerp_Alpha_ImplicitCast;                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_LerpLocationAndRotationForExit");
static_assert(sizeof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit) == 0x000128, "Wrong size on BP_ClimbingComponent_C_LerpLocationAndRotationForExit");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, Time) == 0x000000, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, Curve) == 0x000008, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::Curve' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, Alpha) == 0x000010, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, Location) == 0x000018, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, Rotation) == 0x000030, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, local_Alpha) == 0x000048, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::local_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_LerpLocationAndRotation_Alpha) == 0x000050, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_LerpLocationAndRotation_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_LerpLocationAndRotation_Location) == 0x000058, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_LerpLocationAndRotation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_LerpLocationAndRotation_Rotation) == 0x000070, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_LerpLocationAndRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_ComputeAlpha_Alpha) == 0x000088, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_ComputeAlpha_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_MapRangeClamped_ReturnValue) == 0x000090, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_MapRangeClamped_ReturnValue_1) == 0x000098, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_MapRangeClamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_RLerp_ReturnValue) == 0x0000A0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_RLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_BreakVector_X) == 0x0000B8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_BreakVector_Y) == 0x0000C0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_BreakVector_Z) == 0x0000C8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_IsMovingToTop_ReturnValue) == 0x0000D0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_IsMovingToTop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_BreakVector_X_1) == 0x0000D8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_BreakVector_X_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_BreakVector_Y_1) == 0x0000E0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_BreakVector_Y_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_BreakVector_Z_1) == 0x0000E8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_BreakVector_Z_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_Lerp_ReturnValue) == 0x0000F0, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_Lerp_ReturnValue_1) == 0x0000F8, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_Lerp_ReturnValue_2) == 0x000100, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_MakeVector_ReturnValue) == 0x000108, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_LerpLocationAndRotationForExit, CallFunc_RLerp_Alpha_ImplicitCast) == 0x000120, "Member 'BP_ClimbingComponent_C_LerpLocationAndRotationForExit::CallFunc_RLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.OnClimbingJumpMovementStart
// 0x0008 (0x0008 - 0x0000)
struct BP_ClimbingComponent_C_OnClimbingJumpMovementStart final
{
public:
	double                                        TotalDuration;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_OnClimbingJumpMovementStart) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_OnClimbingJumpMovementStart");
static_assert(sizeof(BP_ClimbingComponent_C_OnClimbingJumpMovementStart) == 0x000008, "Wrong size on BP_ClimbingComponent_C_OnClimbingJumpMovementStart");
static_assert(offsetof(BP_ClimbingComponent_C_OnClimbingJumpMovementStart, TotalDuration) == 0x000000, "Member 'BP_ClimbingComponent_C_OnClimbingJumpMovementStart::TotalDuration' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.PrepareCharacterForClimbing
// 0x0018 (0x0018 - 0x0000)
struct BP_ClimbingComponent_C_PrepareCharacterForClimbing final
{
public:
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_WorldInfoComponent_C*               CallFunc_GetWorldInfoComponent_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         CallFunc_MakeLiteralByte_ReturnValue;              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SpringArmControl_Target_Arm_Length_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_PrepareCharacterForClimbing) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_PrepareCharacterForClimbing");
static_assert(sizeof(BP_ClimbingComponent_C_PrepareCharacterForClimbing) == 0x000018, "Wrong size on BP_ClimbingComponent_C_PrepareCharacterForClimbing");
static_assert(offsetof(BP_ClimbingComponent_C_PrepareCharacterForClimbing, CallFunc_GetInteractionSystem_ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_PrepareCharacterForClimbing::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_PrepareCharacterForClimbing, CallFunc_GetWorldInfoComponent_ReturnValue) == 0x000008, "Member 'BP_ClimbingComponent_C_PrepareCharacterForClimbing::CallFunc_GetWorldInfoComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_PrepareCharacterForClimbing, CallFunc_MakeLiteralByte_ReturnValue) == 0x000010, "Member 'BP_ClimbingComponent_C_PrepareCharacterForClimbing::CallFunc_MakeLiteralByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_PrepareCharacterForClimbing, CallFunc_SpringArmControl_Target_Arm_Length_ImplicitCast) == 0x000014, "Member 'BP_ClimbingComponent_C_PrepareCharacterForClimbing::CallFunc_SpringArmControl_Target_Arm_Length_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.PrepareCharacterForWalking
// 0x0010 (0x0010 - 0x0000)
struct BP_ClimbingComponent_C_PrepareCharacterForWalking final
{
public:
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_WorldInfoComponent_C*               CallFunc_GetWorldInfoComponent_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_PrepareCharacterForWalking) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_PrepareCharacterForWalking");
static_assert(sizeof(BP_ClimbingComponent_C_PrepareCharacterForWalking) == 0x000010, "Wrong size on BP_ClimbingComponent_C_PrepareCharacterForWalking");
static_assert(offsetof(BP_ClimbingComponent_C_PrepareCharacterForWalking, CallFunc_GetInteractionSystem_ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_PrepareCharacterForWalking::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_PrepareCharacterForWalking, CallFunc_GetWorldInfoComponent_ReturnValue) == 0x000008, "Member 'BP_ClimbingComponent_C_PrepareCharacterForWalking::CallFunc_GetWorldInfoComponent_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_ClimbingComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_ClimbingComponent_C_ReceiveTick");
static_assert(sizeof(BP_ClimbingComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_ClimbingComponent_C_ReceiveTick");
static_assert(offsetof(BP_ClimbingComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetCharacterCollisions
// 0x0001 (0x0001 - 0x0000)
struct BP_ClimbingComponent_C_SetCharacterCollisions final
{
public:
	ECollisionResponse                            NewResponse;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_SetCharacterCollisions) == 0x000001, "Wrong alignment on BP_ClimbingComponent_C_SetCharacterCollisions");
static_assert(sizeof(BP_ClimbingComponent_C_SetCharacterCollisions) == 0x000001, "Wrong size on BP_ClimbingComponent_C_SetCharacterCollisions");
static_assert(offsetof(BP_ClimbingComponent_C_SetCharacterCollisions, NewResponse) == 0x000000, "Member 'BP_ClimbingComponent_C_SetCharacterCollisions::NewResponse' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetDataForEnterTransition
// 0x00A0 (0x00A0 - 0x0000)
struct BP_ClimbingComponent_C_SetDataForEnterTransition final
{
public:
	struct FVector                                CallFunc_GetCharacterHandsOffset_ReturnValue;      // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClimbingElementLocation_Location;      // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetClimbingElementRotation_Rotation;      // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        K2Node_VariableSet_TimeToPerformStateChange_ImplicitCast; // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_SetDataForEnterTransition) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_SetDataForEnterTransition");
static_assert(sizeof(BP_ClimbingComponent_C_SetDataForEnterTransition) == 0x0000A0, "Wrong size on BP_ClimbingComponent_C_SetDataForEnterTransition");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_GetCharacterHandsOffset_ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_GetCharacterHandsOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_GetTimeRange_MinTime) == 0x000018, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_GetTimeRange_MaxTime) == 0x00001C, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_GetClimbingElementLocation_Location) == 0x000020, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_GetClimbingElementLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000038, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_Add_VectorVector_ReturnValue) == 0x000050, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, CallFunc_GetClimbingElementRotation_Rotation) == 0x000080, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::CallFunc_GetClimbingElementRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForEnterTransition, K2Node_VariableSet_TimeToPerformStateChange_ImplicitCast) == 0x000098, "Member 'BP_ClimbingComponent_C_SetDataForEnterTransition::K2Node_VariableSet_TimeToPerformStateChange_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetDataForExitTransition
// 0x00B8 (0x00B8 - 0x0000)
struct BP_ClimbingComponent_C_SetDataForExitTransition final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsMovingToTop_ReturnValue;                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetScaledCapsuleHalfHeight_ReturnValue;   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeVector_Z_ImplicitCast;                // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_SetDataForExitTransition) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_SetDataForExitTransition");
static_assert(sizeof(BP_ClimbingComponent_C_SetDataForExitTransition) == 0x0000B8, "Wrong size on BP_ClimbingComponent_C_SetDataForExitTransition");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, Location) == 0x000000, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, Rotation) == 0x000018, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_GetPlayerController_ReturnValue) == 0x000030, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_IsMovingToTop_ReturnValue) == 0x000038, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_IsMovingToTop_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_SelectFloat_ReturnValue) == 0x000040, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_GetScaledCapsuleHalfHeight_ReturnValue) == 0x000048, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_GetScaledCapsuleHalfHeight_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_MakeVector_ReturnValue) == 0x000050, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000068, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_Add_VectorVector_ReturnValue) == 0x000080, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000098, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForExitTransition, CallFunc_MakeVector_Z_ImplicitCast) == 0x0000B0, "Member 'BP_ClimbingComponent_C_SetDataForExitTransition::CallFunc_MakeVector_Z_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetDataForMove
// 0x00B0 (0x00B0 - 0x0000)
struct BP_ClimbingComponent_C_SetDataForMove final
{
public:
	TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCharacterHandsOffset_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetClimbingElementRotation_Rotation;      // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_GetClimbingElementLocation_Location;      // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_SetDataForMove) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_SetDataForMove");
static_assert(sizeof(BP_ClimbingComponent_C_SetDataForMove) == 0x0000B0, "Wrong size on BP_ClimbingComponent_C_SetDataForMove");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, ClimbingElement) == 0x000000, "Member 'BP_ClimbingComponent_C_SetDataForMove::ClimbingElement' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_GetCharacterHandsOffset_ReturnValue) == 0x000010, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_GetCharacterHandsOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_Vector_Distance_ReturnValue) == 0x000030, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_GetClimbingElementRotation_Rotation) == 0x000038, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_GetClimbingElementRotation_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_GetClimbingElementLocation_Location) == 0x000050, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_GetClimbingElementLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_Add_VectorVector_ReturnValue) == 0x000068, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000080, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_SetDataForMove, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000098, "Member 'BP_ClimbingComponent_C_SetDataForMove::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.StartClimbing
// 0x0018 (0x0018 - 0x0000)
struct BP_ClimbingComponent_C_StartClimbing final
{
public:
	TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseClimbingElement_CanClimb;           // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_StartClimbing) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_StartClimbing");
static_assert(sizeof(BP_ClimbingComponent_C_StartClimbing) == 0x000018, "Wrong size on BP_ClimbingComponent_C_StartClimbing");
static_assert(offsetof(BP_ClimbingComponent_C_StartClimbing, ClimbingElement) == 0x000000, "Member 'BP_ClimbingComponent_C_StartClimbing::ClimbingElement' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_StartClimbing, CallFunc_CanUseClimbingElement_CanClimb) == 0x000010, "Member 'BP_ClimbingComponent_C_StartClimbing::CallFunc_CanUseClimbingElement_CanClimb' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateClimbingComponent
// 0x0108 (0x0108 - 0x0000)
struct BP_ClimbingComponent_C_UpdateClimbingComponent final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0008(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0101(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0102(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0103(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_UpdateClimbingComponent) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_UpdateClimbingComponent");
static_assert(sizeof(BP_ClimbingComponent_C_UpdateClimbingComponent) == 0x000108, "Wrong size on BP_ClimbingComponent_C_UpdateClimbingComponent");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingComponent, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_UpdateClimbingComponent::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingComponent, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000008, "Member 'BP_ClimbingComponent_C_UpdateClimbingComponent::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingComponent, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000100, "Member 'BP_ClimbingComponent_C_UpdateClimbingComponent::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingComponent, CallFunc_Not_PreBool_ReturnValue) == 0x000101, "Member 'BP_ClimbingComponent_C_UpdateClimbingComponent::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingComponent, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000102, "Member 'BP_ClimbingComponent_C_UpdateClimbingComponent::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingComponent, K2Node_SwitchEnum_CmpSuccess) == 0x000103, "Member 'BP_ClimbingComponent_C_UpdateClimbingComponent::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateClimbingMovement
// 0x0130 (0x0130 - 0x0000)
struct BP_ClimbingComponent_C_UpdateClimbingMovement final
{
public:
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_MoveUpdatedComponent_OutHit;           // 0x0030(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_MoveUpdatedComponent_ReturnValue;      // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_UpdateClimbingMovement) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_UpdateClimbingMovement");
static_assert(sizeof(BP_ClimbingComponent_C_UpdateClimbingMovement) == 0x000130, "Wrong size on BP_ClimbingComponent_C_UpdateClimbingMovement");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingMovement, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000000, "Member 'BP_ClimbingComponent_C_UpdateClimbingMovement::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingMovement, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000018, "Member 'BP_ClimbingComponent_C_UpdateClimbingMovement::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingMovement, CallFunc_K2_MoveUpdatedComponent_OutHit) == 0x000030, "Member 'BP_ClimbingComponent_C_UpdateClimbingMovement::CallFunc_K2_MoveUpdatedComponent_OutHit' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateClimbingMovement, CallFunc_K2_MoveUpdatedComponent_ReturnValue) == 0x000128, "Member 'BP_ClimbingComponent_C_UpdateClimbingMovement::CallFunc_K2_MoveUpdatedComponent_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateEndLocationWithHandsOffset
// 0x0058 (0x0058 - 0x0000)
struct BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset final
{
public:
	TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCharacterHandsOffset_ReturnValue;      // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetClimbingElementLocation_Location;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset");
static_assert(sizeof(BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset) == 0x000058, "Wrong size on BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset, ClimbingElement) == 0x000000, "Member 'BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset::ClimbingElement' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset, CallFunc_GetCharacterHandsOffset_ReturnValue) == 0x000010, "Member 'BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset::CallFunc_GetCharacterHandsOffset_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset, CallFunc_GetClimbingElementLocation_Location) == 0x000028, "Member 'BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset::CallFunc_GetClimbingElementLocation_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset, CallFunc_Add_VectorVector_ReturnValue) == 0x000040, "Member 'BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateEnteringTransition
// 0x0158 (0x0158 - 0x0000)
struct BP_ClimbingComponent_C_UpdateEnteringTransition final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ComputeTime_Time;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LerpLocationAndRotationForEntry_Alpha;    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LerpLocationAndRotationForEntry_Location; // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LerpLocationAndRotationForEntry_Rotation; // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0050(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeTime_MaxTime_ImplicitCast;         // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_UpdateEnteringTransition) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_UpdateEnteringTransition");
static_assert(sizeof(BP_ClimbingComponent_C_UpdateEnteringTransition) == 0x000158, "Wrong size on BP_ClimbingComponent_C_UpdateEnteringTransition");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_GetTimeRange_MinTime) == 0x000008, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_GetTimeRange_MaxTime) == 0x00000C, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_ComputeTime_Time) == 0x000010, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_ComputeTime_Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_LerpLocationAndRotationForEntry_Alpha) == 0x000018, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_LerpLocationAndRotationForEntry_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_LerpLocationAndRotationForEntry_Location) == 0x000020, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_LerpLocationAndRotationForEntry_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_LerpLocationAndRotationForEntry_Rotation) == 0x000038, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_LerpLocationAndRotationForEntry_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000050, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000148, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateEnteringTransition, CallFunc_ComputeTime_MaxTime_ImplicitCast) == 0x000150, "Member 'BP_ClimbingComponent_C_UpdateEnteringTransition::CallFunc_ComputeTime_MaxTime_ImplicitCast' has a wrong offset!");

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateExitingTransition
// 0x0268 (0x0268 - 0x0000)
struct BP_ClimbingComponent_C_UpdateExitingTransition final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult; // 0x0008(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue; // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetTimeRange_MinTime;                     // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTimeRange_MaxTime;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeTime_Time;                         // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LerpLocationAndRotationForExit_Alpha;     // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_LerpLocationAndRotationForExit_Location;  // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_LerpLocationAndRotationForExit_Rotation;  // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1; // 0x0160(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1; // 0x0258(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_ComputeTime_MaxTime_ImplicitCast;         // 0x0260(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ClimbingComponent_C_UpdateExitingTransition) == 0x000008, "Wrong alignment on BP_ClimbingComponent_C_UpdateExitingTransition");
static_assert(sizeof(BP_ClimbingComponent_C_UpdateExitingTransition) == 0x000268, "Wrong size on BP_ClimbingComponent_C_UpdateExitingTransition");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, DeltaSeconds) == 0x000000, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult) == 0x000008, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_K2_SetActorLocationAndRotation_ReturnValue) == 0x000100, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_K2_SetActorLocationAndRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_GetTimeRange_MinTime) == 0x000104, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_GetTimeRange_MinTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_GetTimeRange_MaxTime) == 0x000108, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_GetTimeRange_MaxTime' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_ComputeTime_Time) == 0x000110, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_ComputeTime_Time' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000118, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_LerpLocationAndRotationForExit_Alpha) == 0x000120, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_LerpLocationAndRotationForExit_Alpha' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_LerpLocationAndRotationForExit_Location) == 0x000128, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_LerpLocationAndRotationForExit_Location' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_LerpLocationAndRotationForExit_Rotation) == 0x000140, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_LerpLocationAndRotationForExit_Rotation' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000158, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1) == 0x000160, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_K2_SetActorLocationAndRotation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1) == 0x000258, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_K2_SetActorLocationAndRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_ClimbingComponent_C_UpdateExitingTransition, CallFunc_ComputeTime_MaxTime_ImplicitCast) == 0x000260, "Member 'BP_ClimbingComponent_C_UpdateExitingTransition::CallFunc_ComputeTime_MaxTime_ImplicitCast' has a wrong offset!");

}

