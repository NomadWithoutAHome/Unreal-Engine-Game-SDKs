#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_NPC_Dialog

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "E_NPC_SpolightTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "E_CharacterList_structs.hpp"
#include "E_NpcDialogueCamera_structs.hpp"
#include "E_FacialExpressionsNPC_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_jRPG_NPC_Base_classes.hpp"
#include "EDialogueCameraType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_NPC_Dialog.BP_jRPG_NPC_Dialog_C
// 0x0450 (0x0B70 - 0x0720)
class ABP_jRPG_NPC_Dialog_C : public ABP_jRPG_NPC_Base_C
{
public:
	uint8                                         Pad_711[0x7];                                      // 0x0711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_jRPG_NPC_Dialog_C;               // 0x0718(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULODSyncComponent*                      LODSync_Groom;                                     // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSync_Base;                                      // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PlayerLocationIndicator;                           // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PlayerLocation;                                    // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Dialogue;                                    // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DialogueCameraControllerComponent_C* BP_DialogueCameraControllerComponent;             // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Camera_FocusLengthPoint;                           // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_CameraTargetPoint_Mid;                       // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene_CameraTargetPoint_High;                      // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Camera_2;                                          // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Camera_3;                                          // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Camera_1;                                          // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Rim_Left;                                // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Front_Right;                             // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Rim_Right;                               // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Front_Left;                              // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_CameraFocusPoint;                        // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_VO;                                             // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ConditionCheckerComponent_C*        BP_ConditionCheckerComponent;                      // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_CharacterWorldLookAt;                       // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_NPCAnimationComponent_C*            BP_NPCAnimationComponent;                          // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Camera_Main_Dialogue;                              // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Camera_5;                                          // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Camera_4;                                          // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineInteractingCharacterRotation_Float0To1_B6F8DB094396535D78054EAB21942B50; // 0x07F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimelineInteractingCharacterRotation__Direction_B6F8DB094396535D78054EAB21942B50; // 0x07F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7F5[0x3];                                      // 0x07F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimelineInteractingCharacterRotation;              // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_DialogueCharacter_C*      DialogueCharacter;                                 // 0x0800(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          IdleAnimation;                                     // 0x0808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FDialogueSpeakerSlotReferences         ExternalSpeakerSlots;                              // 0x0810(0x0010)(Edit, BlueprintVisible)
	class UClass*                                 DialogueToPlay;                                    // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_BattleMap_C>         BattleMap;                                         // 0x0828(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	class UW_UseWidget_C*                         UseWidget;                                         // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DialogSystem_C*                     DialogSystemReference;                             // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             InteractingWorldCharacter;                         // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_Dialogue_C*                         SpawnedDialog;                                     // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          IsInDialog;                                        // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_879[0x7];                                      // 0x0879(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Anim;                                              // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTalking;                                         // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_FacialExpressionsNPC                        FacialExpression;                                  // 0x0889(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NpcDialogueCamera                           Cameras;                                           // 0x088A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_88B[0x5];                                      // 0x088B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BaseCameraTransform;                               // 0x0890(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeInteractedWith;                               // 0x08F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F1[0x7];                                      // 0x08F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounterHandle             PauseBlocker;                                      // 0x08F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DependenciesLoaded;                                // 0x0918(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnCurrentPlayerCharacter;                       // 0x0919(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawnCompanionsAroundPlayerCharacter;              // 0x091A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91B[0x5];                                      // 0x091B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDialogueFinished;                                // 0x0920(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UObject*                                Target;                                            // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ASpotLight>>      SpotlightsToActivateDuringDialogues;               // 0x0938(0x0010)(Edit, BlueprintVisible)
	E_NPC_SpolightTypes                           TurnOnSpotlights;                                  // 0x0948(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MovePresetCamerasToOtherSide;                      // 0x0949(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94A[0x6];                                      // 0x094A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UCineCameraComponent*, struct FTransform> OriginalCamerasTransform;                   // 0x0950(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UCineCameraComponent*, struct FTransform> CamerasTransformOnDialogueStart;            // 0x09A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          UseReversedSpotlightForWorldCharacter;             // 0x09F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounterHandle             InteractionBlockerReference;                       // 0x09F8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_CharacterList                               ChangeWorldCharacter;                              // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_DialogCustomLocation_C> UseCustomDialogueLocation;                      // 0x0A20(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FSF_ReferenceCounterHandle             DialogInputLockBlockerRefenrece;                   // 0x0A48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	uint8                                         Pad_A68[0x8];                                      // 0x0A68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Cache_OriginalTransform;                           // 0x0A70(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Cache_PlayerTransformBeforeDialogue;               // 0x0AD0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Cache_PlayerCameraRotationBeforeDialogue;          // 0x0B30(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          AllowCharacterWorldLookAtDuringDialogue;           // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B49[0x7];                                      // 0x0B49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class AActor>>          ActorsToHideDuringDialogue;                        // 0x0B50(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class AActor>>          ActorsToUnhideDuringDialogue;                      // 0x0B60(0x0010)(Edit, BlueprintVisible)

public:
	void BPI_GetDialogueAudioComponent(class UAudioComponent** AudioComponent);
	void BPI_GetDialogueCameraByType(EDialogueCameraType CameraType, class UCameraComponent** CameraComponent);
	bool BPI_HasLightingAuthority();
	bool BPI_ShouldMoveCameraPresetsToOtherSide();
	TScriptInterface<class IBPI_DialogueCharacter_C> BPI_GetInteractingCharacter();
	struct FVector BPI_GetDialogueCameraOffset();
	TScriptInterface<class IBPI_DialogueCharacter_C> BPI_GetReverseSpotlightReceiver();
	E_NPC_SpolightTypes BPI_GetLightDirection();
	void BPI_GetLightingSet(E_NPC_SpolightTypes LightDirection, class ULightComponent** FrontLight, class ULightComponent** RimLight);
	void BPI_GetAllDialogueCameras(TArray<class UCineCameraComponent*>* CineCameraComponents);
	void BPI_GetDialogueFocusPoint(class USceneComponent** SceneComponent);
	void BPI_GetSpotlightsToActivateDuringDialogue(TArray<TSoftObjectPtr<class ASpotLight>>* SpotLightActors);
	TScriptInterface<class IBPI_DialogueCharacter_C> GetDialogueCharacterInterface();
	void AreDependenciesLoaded(bool* AreLoaded);
	void GetCharacterActor(class AActor** Character);
	void GetCameraComponent(class UCameraComponent** Camera);
	void GetAssetDialogueCharacter(class UBP_DataAsset_DialogueCharacter_C** DialogueCharacter_0);
	void ForceLODDuringDialogue();
	void UnpauseGameplayAfterDialog();
	void PauseGameplayBeforeDialog();
	void Validate_Hidden_Actors_Visiblity_Array(TArray<TSoftObjectPtr<class AActor>>& Array);
	void ForceActorsToUnhideVisibility(bool NewHidden);
	void SetActorsVisibilityForDialogue(bool ShouldBeVisible);
	void CanInteractWithMount(bool* CanInteract);
	void GoBackToOriginalLocationAfterDialogue();
	void RuntimeCheckSimulationAndPauseAnim();
	void UpdateWorldCharacterIfNeeded(E_CharacterList Character);
	void ComputeDialogueParameters(struct FS_DialogueParameters* S_DialogueParameters);
	void GetUseReversedSpotlightForWorldCharacter(bool* UseReversedSpotlightForWorldCharacter_0);
	void GetTurnOnSpotlights(E_NPC_SpolightTypes* TurnOnSpotlights_0);
	void GetAllDialogueCameras(TArray<class UCineCameraComponent*>* Array);
	void GetMovePresetCamerasToOtherSide(bool* MovePresetCamerasToOtherSide_0);
	void GetSpotlightsToActivateDuringDialogue(TArray<TSoftObjectPtr<class ASpotLight>>* SpotlightsToActivateDuringDialogues_0);
	void GetAllSpeakers(TArray<class AActor*>* Speakers);
	void UpdateInteractingCharactersVisibility(bool ShouldBeVisible);
	void PrepareInteractingCharacterAfterDialogue(const struct FS_DialogueParameters& DialogueParameters);
	void PrepareInteractingCharacterForDialogue(const struct FS_DialogueParameters& DialogueParameters);
	void UnloadAllDependencies();
	void LoadAllDependencies();
	void IsInteractionAvailable(bool* Available);
	void JoinParty();
	void UserConstructionScript();
	void TimelineInteractingCharacterRotation__FinishedFunc();
	void TimelineInteractingCharacterRotation__UpdateFunc();
	void LoadDependencies();
	void UnloadDependencies();
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter_0, bool Instant);
	void TriggerDialogInternal(const struct FS_DialogueParameters& DialogueParameters);
	void OnInteractionRequestedEvent();
	void OnPlayerEnteredInteractionRange();
	void OnDialogueFinishedInternal();
	void ReceiveBeginPlay();
	void TeleportAndTriggerDialogue(class ABP_jRPG_Character_World_C* InteractingWorldCharacter_0, const struct FS_DialogueParameters& DialogueParameters);
	void OnPlayerLeftInteractionRange();
	void BndEvt__BP_jRPG_NPC_Dialog_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_0_OnConditionChanged__DelegateSignature(bool Condition);
	void SpotLightDialoguePreviz();
	void MoveInteractingCharacterToPosition(const struct FS_DialogueParameters& DialogueParameters);
	void CancelInteractingCharacterRotation();
	void ReceiveTick(float DeltaSeconds);
	void ExecuteUbergraph_BP_jRPG_NPC_Dialog(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_NPC_Dialog_C">();
	}
	static class ABP_jRPG_NPC_Dialog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_NPC_Dialog_C>();
	}
};
static_assert(alignof(ABP_jRPG_NPC_Dialog_C) == 0x000010, "Wrong alignment on ABP_jRPG_NPC_Dialog_C");
static_assert(sizeof(ABP_jRPG_NPC_Dialog_C) == 0x000B70, "Wrong size on ABP_jRPG_NPC_Dialog_C");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, UberGraphFrame_BP_jRPG_NPC_Dialog_C) == 0x000718, "Member 'ABP_jRPG_NPC_Dialog_C::UberGraphFrame_BP_jRPG_NPC_Dialog_C' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, LODSync_Groom) == 0x000720, "Member 'ABP_jRPG_NPC_Dialog_C::LODSync_Groom' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, LODSync_Base) == 0x000728, "Member 'ABP_jRPG_NPC_Dialog_C::LODSync_Base' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, TextRender) == 0x000730, "Member 'ABP_jRPG_NPC_Dialog_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, PlayerLocationIndicator) == 0x000738, "Member 'ABP_jRPG_NPC_Dialog_C::PlayerLocationIndicator' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, PlayerLocation) == 0x000740, "Member 'ABP_jRPG_NPC_Dialog_C::PlayerLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, NavModifier) == 0x000748, "Member 'ABP_jRPG_NPC_Dialog_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Audio_Dialogue) == 0x000750, "Member 'ABP_jRPG_NPC_Dialog_C::Audio_Dialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, BP_DialogueCameraControllerComponent) == 0x000758, "Member 'ABP_jRPG_NPC_Dialog_C::BP_DialogueCameraControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_FocusLengthPoint) == 0x000760, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_FocusLengthPoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Scene_CameraTargetPoint_Mid) == 0x000768, "Member 'ABP_jRPG_NPC_Dialog_C::Scene_CameraTargetPoint_Mid' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Scene_CameraTargetPoint_High) == 0x000770, "Member 'ABP_jRPG_NPC_Dialog_C::Scene_CameraTargetPoint_High' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_2) == 0x000778, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_3) == 0x000780, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_1) == 0x000788, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpotLight_Rim_Left) == 0x000790, "Member 'ABP_jRPG_NPC_Dialog_C::SpotLight_Rim_Left' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpotLight_Front_Right) == 0x000798, "Member 'ABP_jRPG_NPC_Dialog_C::SpotLight_Front_Right' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpotLight_Rim_Right) == 0x0007A0, "Member 'ABP_jRPG_NPC_Dialog_C::SpotLight_Rim_Right' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpotLight_Front_Left) == 0x0007A8, "Member 'ABP_jRPG_NPC_Dialog_C::SpotLight_Front_Left' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpringArm_CameraFocusPoint) == 0x0007B0, "Member 'ABP_jRPG_NPC_Dialog_C::SpringArm_CameraFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, AC_VO) == 0x0007B8, "Member 'ABP_jRPG_NPC_Dialog_C::AC_VO' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, BP_ConditionCheckerComponent) == 0x0007C0, "Member 'ABP_jRPG_NPC_Dialog_C::BP_ConditionCheckerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Sphere_CharacterWorldLookAt) == 0x0007C8, "Member 'ABP_jRPG_NPC_Dialog_C::Sphere_CharacterWorldLookAt' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, BP_NPCAnimationComponent) == 0x0007D0, "Member 'ABP_jRPG_NPC_Dialog_C::BP_NPCAnimationComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_Main_Dialogue) == 0x0007D8, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_Main_Dialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_5) == 0x0007E0, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Camera_4) == 0x0007E8, "Member 'ABP_jRPG_NPC_Dialog_C::Camera_4' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, TimelineInteractingCharacterRotation_Float0To1_B6F8DB094396535D78054EAB21942B50) == 0x0007F0, "Member 'ABP_jRPG_NPC_Dialog_C::TimelineInteractingCharacterRotation_Float0To1_B6F8DB094396535D78054EAB21942B50' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, TimelineInteractingCharacterRotation__Direction_B6F8DB094396535D78054EAB21942B50) == 0x0007F4, "Member 'ABP_jRPG_NPC_Dialog_C::TimelineInteractingCharacterRotation__Direction_B6F8DB094396535D78054EAB21942B50' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, TimelineInteractingCharacterRotation) == 0x0007F8, "Member 'ABP_jRPG_NPC_Dialog_C::TimelineInteractingCharacterRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, DialogueCharacter) == 0x000800, "Member 'ABP_jRPG_NPC_Dialog_C::DialogueCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, IdleAnimation) == 0x000808, "Member 'ABP_jRPG_NPC_Dialog_C::IdleAnimation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, ExternalSpeakerSlots) == 0x000810, "Member 'ABP_jRPG_NPC_Dialog_C::ExternalSpeakerSlots' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, DialogueToPlay) == 0x000820, "Member 'ABP_jRPG_NPC_Dialog_C::DialogueToPlay' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, BattleMap) == 0x000828, "Member 'ABP_jRPG_NPC_Dialog_C::BattleMap' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, UseWidget) == 0x000850, "Member 'ABP_jRPG_NPC_Dialog_C::UseWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, HitActor) == 0x000858, "Member 'ABP_jRPG_NPC_Dialog_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, DialogSystemReference) == 0x000860, "Member 'ABP_jRPG_NPC_Dialog_C::DialogSystemReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, InteractingWorldCharacter) == 0x000868, "Member 'ABP_jRPG_NPC_Dialog_C::InteractingWorldCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpawnedDialog) == 0x000870, "Member 'ABP_jRPG_NPC_Dialog_C::SpawnedDialog' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, IsInDialog) == 0x000878, "Member 'ABP_jRPG_NPC_Dialog_C::IsInDialog' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Anim) == 0x000880, "Member 'ABP_jRPG_NPC_Dialog_C::Anim' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, IsTalking) == 0x000888, "Member 'ABP_jRPG_NPC_Dialog_C::IsTalking' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, FacialExpression) == 0x000889, "Member 'ABP_jRPG_NPC_Dialog_C::FacialExpression' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Cameras) == 0x00088A, "Member 'ABP_jRPG_NPC_Dialog_C::Cameras' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, BaseCameraTransform) == 0x000890, "Member 'ABP_jRPG_NPC_Dialog_C::BaseCameraTransform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, CanBeInteractedWith) == 0x0008F0, "Member 'ABP_jRPG_NPC_Dialog_C::CanBeInteractedWith' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, PauseBlocker) == 0x0008F8, "Member 'ABP_jRPG_NPC_Dialog_C::PauseBlocker' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, DependenciesLoaded) == 0x000918, "Member 'ABP_jRPG_NPC_Dialog_C::DependenciesLoaded' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpawnCurrentPlayerCharacter) == 0x000919, "Member 'ABP_jRPG_NPC_Dialog_C::SpawnCurrentPlayerCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpawnCompanionsAroundPlayerCharacter) == 0x00091A, "Member 'ABP_jRPG_NPC_Dialog_C::SpawnCompanionsAroundPlayerCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, OnDialogueFinished) == 0x000920, "Member 'ABP_jRPG_NPC_Dialog_C::OnDialogueFinished' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Target) == 0x000930, "Member 'ABP_jRPG_NPC_Dialog_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, SpotlightsToActivateDuringDialogues) == 0x000938, "Member 'ABP_jRPG_NPC_Dialog_C::SpotlightsToActivateDuringDialogues' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, TurnOnSpotlights) == 0x000948, "Member 'ABP_jRPG_NPC_Dialog_C::TurnOnSpotlights' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, MovePresetCamerasToOtherSide) == 0x000949, "Member 'ABP_jRPG_NPC_Dialog_C::MovePresetCamerasToOtherSide' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, OriginalCamerasTransform) == 0x000950, "Member 'ABP_jRPG_NPC_Dialog_C::OriginalCamerasTransform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, CamerasTransformOnDialogueStart) == 0x0009A0, "Member 'ABP_jRPG_NPC_Dialog_C::CamerasTransformOnDialogueStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, UseReversedSpotlightForWorldCharacter) == 0x0009F0, "Member 'ABP_jRPG_NPC_Dialog_C::UseReversedSpotlightForWorldCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, InteractionBlockerReference) == 0x0009F8, "Member 'ABP_jRPG_NPC_Dialog_C::InteractionBlockerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, ChangeWorldCharacter) == 0x000A18, "Member 'ABP_jRPG_NPC_Dialog_C::ChangeWorldCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, UseCustomDialogueLocation) == 0x000A20, "Member 'ABP_jRPG_NPC_Dialog_C::UseCustomDialogueLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, DialogInputLockBlockerRefenrece) == 0x000A48, "Member 'ABP_jRPG_NPC_Dialog_C::DialogInputLockBlockerRefenrece' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Cache_OriginalTransform) == 0x000A70, "Member 'ABP_jRPG_NPC_Dialog_C::Cache_OriginalTransform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Cache_PlayerTransformBeforeDialogue) == 0x000AD0, "Member 'ABP_jRPG_NPC_Dialog_C::Cache_PlayerTransformBeforeDialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, Cache_PlayerCameraRotationBeforeDialogue) == 0x000B30, "Member 'ABP_jRPG_NPC_Dialog_C::Cache_PlayerCameraRotationBeforeDialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, AllowCharacterWorldLookAtDuringDialogue) == 0x000B48, "Member 'ABP_jRPG_NPC_Dialog_C::AllowCharacterWorldLookAtDuringDialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, ActorsToHideDuringDialogue) == 0x000B50, "Member 'ABP_jRPG_NPC_Dialog_C::ActorsToHideDuringDialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_NPC_Dialog_C, ActorsToUnhideDuringDialogue) == 0x000B60, "Member 'ABP_jRPG_NPC_Dialog_C::ActorsToUnhideDuringDialogue' has a wrong offset!");

}

