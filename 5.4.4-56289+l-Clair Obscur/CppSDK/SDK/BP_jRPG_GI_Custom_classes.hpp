#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_GI_Custom

#include "Basic.hpp"

#include "S_jRPG_Item_DynamicData_structs.hpp"
#include "S_LevelSpawnPointsData_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_InteractiveMusicContext_structs.hpp"
#include "FVendorState_structs.hpp"
#include "S_jRPG_PartySlot_structs.hpp"
#include "S_jRPG_CharacterSaveState_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_AreaAudioParameters_structs.hpp"
#include "E_GPE_MovingAlongSplineDestination_structs.hpp"
#include "FSoundEvent_structs.hpp"
#include "E_WorldMap_Camps_structs.hpp"
#include "E_CharacterList_structs.hpp"
#include "S_CleasTowerBattle_structs.hpp"
#include "S_ManorDoors_structs.hpp"
#include "SlateCore_structs.hpp"
#include "S_MerchantSaveData_structs.hpp"
#include "FPassiveEffectProgression_structs.hpp"
#include "S_UINotificationPool_structs.hpp"
#include "S_UIFavoritePool_structs.hpp"
#include "S_LevelSpawnPointData_structs.hpp"
#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_GI_Custom.BP_jRPG_GI_Custom_C
// 0x0FD0 (0x1190 - 0x01C0)
class UBP_jRPG_GI_Custom_C final : public UExtendedGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_SpawnPointManager_C*                SpawnPointManager;                                 // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChangingMap;                                     // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WorldMapName;                                      // 0x01D4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SaveManager_C*                      SaveManager;                                       // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_EntitlementManager_C*               EntitlementManager;                                // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimePlayed;                                        // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LevelDestinationAssetName;                         // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastSavedLevelName;                                // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_208[0x8];                                      // 0x0208(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastSavedTransform;                                // 0x0210(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpawnPointTag;                                     // 0x0270(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LastWorldMapTransform;                             // 0x0280(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnSpawnPointTag;                               // 0x02E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   AreaName;                                          // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_jRPG_PartySlot>              CurrentParty;                                      // 0x02F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FS_jRPG_CharacterSaveState> CharactersCollection_Legacy;                // 0x0308(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TArray<struct FS_jRPG_Item_DynamicData>       Inventory;                                         // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	int32                                         Gold;                                              // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SpawningAfterBattle_;                              // 0x036C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36D[0x3];                                      // 0x036D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             WorldTransformBeforeBattle;                        // 0x0370(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CameraWorldRotationBeforeBattle;                   // 0x03D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TMap<class FName, struct FTransform>          WorldEnemiesTransformsBeforeBattle;                // 0x03E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PossibleEncounters;                                // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           PossibleBattleMaps;                                // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       GPE_States;                                        // 0x0458(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, E_GPE_MovingAlongSplineDestination> MovingPlatformsStates;                     // 0x04A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       TransientInteractedObjects;                        // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedObjects;                                 // 0x0548(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       TransientBattledEnemies;                           // 0x0598(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FTransform>          TransientEnemyTransforms;                          // 0x05E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      TransientEnemyRoamingPointIndexes;                 // 0x0638(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, TSoftObjectPtr<class ABP_FleePoint_C>> TransientEnemyLastFleePoints;           // 0x0688(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       BattledEnemies;                                    // 0x06D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          RandomEncountersEnabled;                           // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             FightTransitionSound;                              // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CinematicAfterBattle;                              // 0x0738(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_739[0x3];                                      // 0x0739(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Charactertoaddafterbattle;                         // 0x073C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_744[0x4];                                      // 0x0744(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       InteractedCinematics;                              // 0x0748(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedSoundNotif;                              // 0x0798(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedTutorials;                               // 0x07E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_InteractiveMusicSystem_C*           InteractiveMusicSystem;                            // 0x0838(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_AudioControlSystem_C*               AudioControlSystem;                                // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_Ambience_C*               LastAmbience;                                      // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AmbienceComponent;                                 // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FFSoundEvent                           CurrentMusicSoundEvent;                            // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          OnestCinematicSeen;                                // 0x0860(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LearnSkillAfterBattle;                             // 0x0861(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AddCharacterAfterBattle;                           // 0x0862(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_863[0x5];                                      // 0x0863(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       InteractedDialogs;                                 // 0x0868(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<class FName, bool>                       DEPRECATED_GlobalVariable;                         // 0x08B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ACameraActor*                           BattleCameraActor;                                 // 0x0908(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentCharacterWorld;                             // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CurrentVoiceName;                                  // 0x0918(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        VoicePersistentComponent;                          // 0x0920(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class UBP_CharacterData_C*> CharactersCollection;                              // 0x0928(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class FName>                SkinCollection;                                    // 0x0978(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<class FName, TSoftClassPtr<class UClass>> ActiveSkins;                                      // 0x09C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<class FName, bool>                       UnlockedManorGestrals;                             // 0x0A18(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnGameLoaded;                                      // 0x0A68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SaveLoaded;                                        // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A79[0x7];                                      // 0x0A79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActiveInteractiveObjects;                          // 0x0A80(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         AlreadyRegisteredActors_0;                         // 0x0A90(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           DestroyableObjects;                                // 0x0AA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FFSoundEvent                           SD_StopMusic;                                      // 0x0AB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TMap<class FName, class FName>                ActiveSkins_Default;                               // 0x0AB8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UWBP_LoadingScreen_C*                   LoadingScreenWidget;                               // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class FName                                   PROTO_WorldmapSpawnName;                           // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PROTO_LevelSpawnName;                              // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_WorldMap_Camps                              WorldMapCamp;                                      // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B21[0x7];                                      // 0x0B21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ExplorationProgressionSystem_C*     ExplorationProgressionState;                       // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_FullScreenNotificationContainer_C* WBP_FullScreenNotificationContainer;               // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<class UNamedID*, bool>                   NamedIDsStates;                                    // 0x0B38(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNamedID*>                       AllNamedIDs;                                       // 0x0B88(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UNamedID* NamedID)> OnPersistentFlagSet;                     // 0x0B98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FString                                 LastRelevantSaveName;                              // 0x0BA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	struct FDateTime                              LastSaveDateTime;                                  // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_CharacterList                               CurrentCharacterWorldEnum;                         // 0x0BC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC1[0x7];                                      // 0x0BC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BattleTowerSystem_C*                BattleTowerSystem;                                 // 0x0BC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_CleasTowerBattle                    CurrentTowerBattle;                                // 0x0BD0(0x001C)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTriggerTowerBattle;                          // 0x0BEC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTalkToNPCAfterCleasTowerBattle;              // 0x0BED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BEE[0x2];                                      // 0x0BEE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CleasTowerCurrentAccessibleStage;                  // 0x0BF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CleasTowerBattleIndex;                             // 0x0BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           EquippedConsumableShards;                          // 0x0BF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         AmbiencePlaybackPercent;                           // 0x0C08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C0C[0x4];                                      // 0x0C0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FFVendorState>       VendorsStates;                                     // 0x0C10(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	bool                                          ComeToWorldMapFromCamp;                            // 0x0C60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C61[0x7];                                      // 0x0C61(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_DataAsset_GameCredits_C*            CreditsToShow;                                     // 0x0C68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, int32>                      Lifts_CurrentFloor;                                // 0x0C70(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_QuestSystem_C*                      QuestSystem;                                       // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSoundPausedByCinematic;                          // 0x0CC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLoadingMapFromLoadGame;                          // 0x0CC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CCA[0x2];                                      // 0x0CCA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ManorDoors                          PreviousManorDoorInfo;                             // 0x0CCC(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CDC[0x4];                                      // 0x0CDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ItemUpgradeSystem_C*                InventorySystem;                                   // 0x0CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnAnyPersistentFlagSet;                            // 0x0CE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FName EnemyID)> OnEnemyBattled;                              // 0x0CF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnyEnemyBattled;                                 // 0x0D08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnyDialoguePlayed;                               // 0x0D18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnyCinematicPlayed;                              // 0x0D28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FDataTableRowHandle                    PartyHealShard;                                    // 0x0D38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMap<struct FGuid, int32>                     InteractedDialogues;                               // 0x0D48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_RelationshipSystem_C*               RelationshipSystem;                                // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   LevelDestinationNameAfterCamp;                     // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             LastMusicBeforeBattle;                             // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USoundBase*                             LastMusicBeforeCinematic;                          // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	class UWBP_CreditOverlay_C*                   CurrentCreditsOverlay;                             // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UAudioComponent*>                AudioComponentsToUnspawn;                          // 0x0DC0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsStillOnVictoryScreen;                            // 0x0DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DD1[0x7];                                      // 0x0DD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_DataAsset_ProjectConfiguration_C*   ProjectConfiguration;                              // 0x0DD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LightingScenarioReference_C> LastSavedLightingScenario;                 // 0x0DE0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_AreaAudioParameters                 LastSavedAudioParameters;                          // 0x0E08(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_GameDifficultyManager_C*            DifficultyManager;                                 // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDispatchModifications;                       // 0x0E48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E49[0x3];                                      // 0x0E49(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FinishedGameCount;                                 // 0x0E4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnFinishedGameCounterChanged;                      // 0x0E50(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FName LevelDestination)> OnChangeMapProcessStarted;          // 0x0E60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FName LevelDestination)> OnChangeMapProcessFinished;         // 0x0E70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, struct FS_MerchantSaveData> MerchantStates;                                    // 0x0E80(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnAnyTutorialCompleted;                            // 0x0ED0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	E_InteractiveMusicContext                     CurrentExplorationContext;                         // 0x0EE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EE1[0x7];                                      // 0x0EE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FFPassiveEffectProgression> SharedPassiveEffectProgression;             // 0x0EE8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ExternalCompanions;                                // 0x0F38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FS_LevelSpawnPointsData> UnlockedSpawnPoints;                           // 0x0F48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<uint8>                                 UnlockedMapSections;                               // 0x0F98(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsMountInUse;                                      // 0x0FA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA9[0x3];                                      // 0x0FA9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CurrentSettingsContext;                            // 0x0FAC(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FB4[0x4];                                      // 0x0FB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FGameplayTag& NewContext)> OnSettingsPageContextChanged; // 0x0FB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class FName, bool>                       EncounteredEnemies;                                // 0x0FC8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class FName EnemyID)> OnEnemyEncountered;                          // 0x1018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnyEnemyEncountered;                             // 0x1028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<struct FGameplayTag, struct FS_UINotificationPool> NotificationPools;                       // 0x1038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const struct FGameplayTag& PoolTag, class FName ObjectName, class UUserWidget* Mark_Caller)> OnObjectMarkedAsRead; // 0x1088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<struct FGameplayTag, struct FS_UIFavoritePool> FavoritePools;                               // 0x1098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const struct FGameplayTag& PoolTag, class FName ObjectId, bool IsFavorite)> OnFavoriteObjectChanged; // 0x10E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class FName PassiveEffectName)> OnPassiveEffectLearned;            // 0x10F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FS_LevelSpawnPointData                 LastUsedSavePoint;                                 // 0x1108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           VisitedLevelRowNames;                              // 0x1118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UNamedID*>                       NamedIDsStatesToKeepInNewGamePlus;                 // 0x1128(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, class UCharacterStats*>     TempCharacterStats;                                // 0x1138(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void AddInteractedDialogues(const struct FGuid& DialogueGUID, const int32& DialogueStage);
	void AddSkinToCollection(class FName Character, class FName SkinToAdd);
	void AddToUnlockedMapSections(uint8 SectionGrayscale, int32* AddedIndex);
	void AddVisitedLevel(class FName VisitedLevel);
	void AdjustAmbienceColume(float AdjustVolumeDuration, float AdjustVolumeLevel, const EAudioFaderCurve FadeCurve);
	void ApplyAccessibilitySettings();
	void ApplyAllUserSettings();
	void ApplyPostProcessSettings();
	void AreAllCharactersDead(bool* AllDead);
	void BindOnSaveLoaded(const TDelegate<void()>& Event, bool* AlreadyLoaded);
	bool CanUseStats();
	void ChangeMap();
	void CheckDestroyable(const class FName& ItemToFind, bool* CanDestroy);
	void CheckDialogueIsAtLeastAtStage(const struct FGuid& DialogueGUID, int32 Stage, bool* IsAtLeastAtStage);
	void CheckHasPlayedTutorial(const class FName& TutorialRowName, bool* HasPlayed);
	void CheckInteractionDone(TArray<class FName>& Interaction, bool* AllCheckTrue);
	void CheckInteractiveObjectUnicity(class FName InteractiveObjectGlobalID, const class AActor*& Actor);
	void ComputeAudioParametersForSave(struct FS_AreaAudioParameters* AudioParameters);
	void CreateNotificationWidget();
	void DEBUG_CVarChanged_MuteAMB(bool NewValue);
	void DEBUG_CVarChanged_MuteMusic(bool NewValue);
	void DEBUG_CVarChanged_MuteSFX(bool NewValue);
	void DEBUG_CVarChanged_MuteVO(bool NewValue);
	void DEBUG_CVarChanged_OnShowColorVisionDeficiencyChanged(bool NewValue);
	void DEBUG_CVarChanged_OnUnlockAllCleasTowerBattles(bool NewValue);
	void DEBUG_RegisterCvarCallbacks();
	void DEBUG_RegisterCVars();
	void DEBUG_ResetCinematics();
	void DestroyAllSounds();
	void DoesUnlockedMapSectionsContains(uint8 SectionGrayscale, bool* IsContained);
	void ExecuteUbergraph_BP_jRPG_GI_Custom(int32 EntryPoint);
	class UNamedID* FindNamedIDByGuid(const struct FGuid& Guid);
	void GameInstance_StartPerformanceMeasures(double Delay);
	void GetAllNamedIDs(TArray<class UNamedID*>* AllNamedIDs_0);
	void GetAllSharedPassiveEffectProgressions(TArray<struct FFPassiveEffectProgression>* PassiveEffectProgressions);
	void GetAudioControlSystem(class UBP_AudioControlSystem_C** AudioControlSystem_0);
	void GetCharacterByID(class FName CharacterId, class UBP_CharacterData_C** CharacterData);
	void GetCharacterCollection(bool With_Excluded_Characters, TArray<class UBP_CharacterData_C*>* Characters);
	void GetCharacterCollectionLeftToRight(bool With_Excluded_Characters, TArray<class UBP_CharacterData_C*>* Characters);
	void GetCharacterNameCollection(bool With_Excluded_Characters, TArray<class FName>* Characters);
	void GetCurrentCharacterWorld(E_CharacterList* CurrentCharacterWorldEnum_0);
	double GetFadeOutDurationFromAmbience(class UBP_DataAsset_Ambience_C* Ambience);
	void GetFavoritePools(TMap<struct FGameplayTag, struct FS_UIFavoritePool>* FavoritePools_0);
	void GetInteractedDialogues(TMap<struct FGuid, int32>* InteractedDialogues_0);
	void GetIsSaveLoaded(bool* ReturnNode);
	int32 GetItemQuantityInInventory(class FName ItemId);
	void GetNotificationPools(TMap<struct FGameplayTag, struct FS_UINotificationPool>* NotificationPools_0);
	void GetOrCreateSharedPassiveEffectProgression(const class FName& PassiveEffectID, struct FFPassiveEffectProgression* Progression);
	void GetOrCreateVendorState(class FName VendorID, struct FFVendorState* Value);
	void GetPersistentFlags(TArray<class UNamedID*>* Keys);
	void GetPersistentFlagValue(class UNamedID* NamedID, bool* Value);
	void GetSettingsPageContext(struct FGameplayTag* CurrentContext);
	class FName GetSpawnPointAsName();
	void GetUnlockedMapSections(TArray<uint8>* UnlockedMapSections_0);
	void GetUnlockedMapSectionsNormalized(TArray<double>* NormalizedUnlockedMapSections);
	void GoBackToMainMenu();
	void HandleNextAmbience(class UBP_DataAsset_Ambience_C* NextAmb, float StartTime);
	bool HasCharacterInCollectionByID(class FName CharacterId);
	bool HasUnlockedAnySpawnPointInLevel(const class FName& LevelName);
	bool HasUnlockedSpawnPointInCurrentLevel(const struct FGameplayTag& SpawnPointTag_0);
	bool HasVisitedLevel(const class FName& LevelName);
	void IncreaseFinishedGameCount();
	void InitCharStats();
	void InitializeSystemsAndManagers();
	bool IsCharacterInParty(class FName CharacterId);
	void IsMapChangeInProgress(bool* InProgress);
	void IsObjectFavorite(const struct FGameplayTag& PoolTag, class FName FavoriteObjectName, bool* IsFavorite);
	bool IsSoundPausedForCinematics();
	void IsThereAnyObjectNotifiedInPool(const struct FGameplayTag& PoolTag, bool* IsFound);
	void LoadFavoritePools(const TMap<struct FGameplayTag, struct FS_UIFavoritePool>& FavoritePools_0);
	void LoadNotificationPools(const TMap<struct FGameplayTag, struct FS_UINotificationPool>& NotificationPools_0);
	void LoadPersistentFlags(const TMap<struct FGuid, bool>& FlagStates);
	void LoadSharedPassiveEffectProgression(TArray<struct FFPassiveEffectProgression>& PassiveEffectProgression);
	void LoadUnlockSpawnPoints(TArray<struct FS_LevelSpawnPointsData>& SpawnPointList);
	void MarkAudioComponentForUnspawn(class UAudioComponent* AudioComponent, double FadeOutDuration);
	void MarkObjectAsRead(const struct FGameplayTag& PoolTag, class FName NotifiedObjectName, class UUserWidget* MarkCaller);
	void NotifyObject(const struct FGameplayTag& PoolTag, class FName NotifiedObjectName);
	void OnAudioPlayStateChanged(EAudioComponentPlayState PlayState);
	void OnCharacterExplorationDeath(class UBP_CharacterData_C* CharacterData);
	void OnControllerBeginPlay();
	void OnControllerEndPlay();
	void OnCreditsFinished();
	void OnCvarChanged_ScreenPercentage(int32 NewValue);
	void OnGameUserSettingsApplied(class UConfigurableGameUserSettings* UserConfig);
	void OnInitialCinematicCompleted();
	void OnLoaded_6940291243D1FB3D1A33C5BD82FB6BD8(TSubclassOf<class UObject> Loaded);
	void OnSaveLoaded();
	void OnStatUpdateReady();
	void OnWeaponChange();
	void PersistentGruntSound(class USoundBase* SoundPersistent);
	void PersistentSoundEffect(class USoundBase* SoundPersistent, double Volume, double Pitch, double tartTime);
	void PersistentVoice(class USoundBase* VoicePersistent, const struct FVector& Location, double PitchMultiplier, double FadeOutTime, class UAudioComponent** CurrentVoiceName_0);
	void PlayBattleTransition();
	void PlayCredits(class UBP_DataAsset_GameCredits_C* Credits, class USF_BlueprintLatentAction* LatentAction);
	void PrepareToChangeMap();
	void ProcessAudioParameters(const struct FS_AudioLevelParameters& AudioPrameters);
	void ProcessCharacterStat_Final();
	void ProcessCharacterStat_Step1(int32 StatId, int32 StatValue);
	void ProcessCharacterStat_Step2();
	void ProcessLevelParameters(const struct FFLevelDataEntry& LevelData);
	void QueueStatUpdate();
	void ReceiveInit();
	void ReceivePostInitSubsystemCollection();
	void ResetDataOnChangeMapIfNeeded(const struct FFLevelDataEntry& DestinationLevelData);
	void ResetNamedIDsStatesForNewGamePlus();
	void ResetState();
	void ResetStateByRestPointUsed();
	void ResetStateForNewGamePlus();
	void ResumeAmbience(float FadeInDuration);
	void SetBattledEnemy(const class FName& EnemyID);
	void SetBattleParty(TArray<class FName>& CharacterHardcodedName);
	void SetEncounteredEnemy(const class FName& EnemyID);
	void SetEnemyLastFleePoint(const class FName& EnemyID, TSoftObjectPtr<class ABP_FleePoint_C> RoamingPointIndex);
	void SetEnemyRoamingPointIndex(const class FName& EnemyID, int32 RoamingPointIndex);
	void SetEnemyTransform(const class FName& EnemyID, const struct FTransform& Transform);
	void SetGameplayPaused(bool Paused);
	void SetNewActiveSkin(class FName CharacterName, TSoftClassPtr<class UClass> NewActiveSkin, TSoftClassPtr<class UClass>* ActiveSkin);
	void SetPlayedCinematic(const class FName& Cinematic);
	void SetSettingsPageContext(const struct FGameplayTag& NewContext);
	void SetTutorialCompleted(const class FName& TutorialRowName, bool Completed);
	void ShouldObjectBeNotified(const struct FGameplayTag& PoolTag, class FName NotifiedObjectName, bool* IsNotified);
	void ShowCreditsIfNeeded();
	void SpawnNewSound(class USoundBase* SoundToPlay, float StartTime, class UAudioComponent** SpawnedComponent);
	void StopAmbience(float FadeOutDuration);
	void Test_Event1();
	void TickStats();
	void todelete(const class USoundWave* PlayingSoundWave, const float PlaybackPercent);
	void ToggleObjectAsFavorite(const struct FGameplayTag& PoolTag, class FName FavoriteObjectName);
	void UnlockSpawnPointForCurrentLevel(const struct FGameplayTag& SpawnPointTag_0);
	void UpdateCurrentCharacterWorld();
	void UpdateSharedPassiveEffectProgression(const struct FFPassiveEffectProgression& DirtyProgression, struct FFPassiveEffectProgression* UpdatedProgression);
	void UpdateVendorState(class FName VendorID, const struct FFVendorState& VendorState);
	void ValidateGameData();
	void WritePersistentFlag(class UNamedID* NamedID, bool Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_GI_Custom_C">();
	}
	static class UBP_jRPG_GI_Custom_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_jRPG_GI_Custom_C>();
	}
};
static_assert(alignof(UBP_jRPG_GI_Custom_C) == 0x000010, "Wrong alignment on UBP_jRPG_GI_Custom_C");
static_assert(sizeof(UBP_jRPG_GI_Custom_C) == 0x001190, "Wrong size on UBP_jRPG_GI_Custom_C");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, UberGraphFrame) == 0x0001C0, "Member 'UBP_jRPG_GI_Custom_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SpawnPointManager) == 0x0001C8, "Member 'UBP_jRPG_GI_Custom_C::SpawnPointManager' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, IsChangingMap) == 0x0001D0, "Member 'UBP_jRPG_GI_Custom_C::IsChangingMap' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, WorldMapName) == 0x0001D4, "Member 'UBP_jRPG_GI_Custom_C::WorldMapName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SaveManager) == 0x0001E0, "Member 'UBP_jRPG_GI_Custom_C::SaveManager' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, EntitlementManager) == 0x0001E8, "Member 'UBP_jRPG_GI_Custom_C::EntitlementManager' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TimePlayed) == 0x0001F0, "Member 'UBP_jRPG_GI_Custom_C::TimePlayed' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LevelDestinationAssetName) == 0x0001F8, "Member 'UBP_jRPG_GI_Custom_C::LevelDestinationAssetName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastSavedLevelName) == 0x000200, "Member 'UBP_jRPG_GI_Custom_C::LastSavedLevelName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastSavedTransform) == 0x000210, "Member 'UBP_jRPG_GI_Custom_C::LastSavedTransform' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SpawnPointTag) == 0x000270, "Member 'UBP_jRPG_GI_Custom_C::SpawnPointTag' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastWorldMapTransform) == 0x000280, "Member 'UBP_jRPG_GI_Custom_C::LastWorldMapTransform' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ReturnSpawnPointTag) == 0x0002E0, "Member 'UBP_jRPG_GI_Custom_C::ReturnSpawnPointTag' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AreaName) == 0x0002E8, "Member 'UBP_jRPG_GI_Custom_C::AreaName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentParty) == 0x0002F8, "Member 'UBP_jRPG_GI_Custom_C::CurrentParty' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CharactersCollection_Legacy) == 0x000308, "Member 'UBP_jRPG_GI_Custom_C::CharactersCollection_Legacy' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, Inventory) == 0x000358, "Member 'UBP_jRPG_GI_Custom_C::Inventory' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, Gold) == 0x000368, "Member 'UBP_jRPG_GI_Custom_C::Gold' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SpawningAfterBattle_) == 0x00036C, "Member 'UBP_jRPG_GI_Custom_C::SpawningAfterBattle_' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, WorldTransformBeforeBattle) == 0x000370, "Member 'UBP_jRPG_GI_Custom_C::WorldTransformBeforeBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CameraWorldRotationBeforeBattle) == 0x0003D0, "Member 'UBP_jRPG_GI_Custom_C::CameraWorldRotationBeforeBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, WorldEnemiesTransformsBeforeBattle) == 0x0003E8, "Member 'UBP_jRPG_GI_Custom_C::WorldEnemiesTransformsBeforeBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, PossibleEncounters) == 0x000438, "Member 'UBP_jRPG_GI_Custom_C::PossibleEncounters' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, PossibleBattleMaps) == 0x000448, "Member 'UBP_jRPG_GI_Custom_C::PossibleBattleMaps' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, GPE_States) == 0x000458, "Member 'UBP_jRPG_GI_Custom_C::GPE_States' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, MovingPlatformsStates) == 0x0004A8, "Member 'UBP_jRPG_GI_Custom_C::MovingPlatformsStates' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TransientInteractedObjects) == 0x0004F8, "Member 'UBP_jRPG_GI_Custom_C::TransientInteractedObjects' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractedObjects) == 0x000548, "Member 'UBP_jRPG_GI_Custom_C::InteractedObjects' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TransientBattledEnemies) == 0x000598, "Member 'UBP_jRPG_GI_Custom_C::TransientBattledEnemies' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TransientEnemyTransforms) == 0x0005E8, "Member 'UBP_jRPG_GI_Custom_C::TransientEnemyTransforms' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TransientEnemyRoamingPointIndexes) == 0x000638, "Member 'UBP_jRPG_GI_Custom_C::TransientEnemyRoamingPointIndexes' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TransientEnemyLastFleePoints) == 0x000688, "Member 'UBP_jRPG_GI_Custom_C::TransientEnemyLastFleePoints' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, BattledEnemies) == 0x0006D8, "Member 'UBP_jRPG_GI_Custom_C::BattledEnemies' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, RandomEncountersEnabled) == 0x000728, "Member 'UBP_jRPG_GI_Custom_C::RandomEncountersEnabled' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, FightTransitionSound) == 0x000730, "Member 'UBP_jRPG_GI_Custom_C::FightTransitionSound' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CinematicAfterBattle) == 0x000738, "Member 'UBP_jRPG_GI_Custom_C::CinematicAfterBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, Charactertoaddafterbattle) == 0x00073C, "Member 'UBP_jRPG_GI_Custom_C::Charactertoaddafterbattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractedCinematics) == 0x000748, "Member 'UBP_jRPG_GI_Custom_C::InteractedCinematics' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractedSoundNotif) == 0x000798, "Member 'UBP_jRPG_GI_Custom_C::InteractedSoundNotif' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractedTutorials) == 0x0007E8, "Member 'UBP_jRPG_GI_Custom_C::InteractedTutorials' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractiveMusicSystem) == 0x000838, "Member 'UBP_jRPG_GI_Custom_C::InteractiveMusicSystem' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AudioControlSystem) == 0x000840, "Member 'UBP_jRPG_GI_Custom_C::AudioControlSystem' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastAmbience) == 0x000848, "Member 'UBP_jRPG_GI_Custom_C::LastAmbience' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AmbienceComponent) == 0x000850, "Member 'UBP_jRPG_GI_Custom_C::AmbienceComponent' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentMusicSoundEvent) == 0x000858, "Member 'UBP_jRPG_GI_Custom_C::CurrentMusicSoundEvent' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnestCinematicSeen) == 0x000860, "Member 'UBP_jRPG_GI_Custom_C::OnestCinematicSeen' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LearnSkillAfterBattle) == 0x000861, "Member 'UBP_jRPG_GI_Custom_C::LearnSkillAfterBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AddCharacterAfterBattle) == 0x000862, "Member 'UBP_jRPG_GI_Custom_C::AddCharacterAfterBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractedDialogs) == 0x000868, "Member 'UBP_jRPG_GI_Custom_C::InteractedDialogs' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, DEPRECATED_GlobalVariable) == 0x0008B8, "Member 'UBP_jRPG_GI_Custom_C::DEPRECATED_GlobalVariable' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, BattleCameraActor) == 0x000908, "Member 'UBP_jRPG_GI_Custom_C::BattleCameraActor' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentCharacterWorld) == 0x000910, "Member 'UBP_jRPG_GI_Custom_C::CurrentCharacterWorld' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentVoiceName) == 0x000918, "Member 'UBP_jRPG_GI_Custom_C::CurrentVoiceName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, VoicePersistentComponent) == 0x000920, "Member 'UBP_jRPG_GI_Custom_C::VoicePersistentComponent' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CharactersCollection) == 0x000928, "Member 'UBP_jRPG_GI_Custom_C::CharactersCollection' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SkinCollection) == 0x000978, "Member 'UBP_jRPG_GI_Custom_C::SkinCollection' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ActiveSkins) == 0x0009C8, "Member 'UBP_jRPG_GI_Custom_C::ActiveSkins' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, UnlockedManorGestrals) == 0x000A18, "Member 'UBP_jRPG_GI_Custom_C::UnlockedManorGestrals' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnGameLoaded) == 0x000A68, "Member 'UBP_jRPG_GI_Custom_C::OnGameLoaded' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SaveLoaded) == 0x000A78, "Member 'UBP_jRPG_GI_Custom_C::SaveLoaded' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ActiveInteractiveObjects) == 0x000A80, "Member 'UBP_jRPG_GI_Custom_C::ActiveInteractiveObjects' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AlreadyRegisteredActors_0) == 0x000A90, "Member 'UBP_jRPG_GI_Custom_C::AlreadyRegisteredActors_0' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, DestroyableObjects) == 0x000AA0, "Member 'UBP_jRPG_GI_Custom_C::DestroyableObjects' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SD_StopMusic) == 0x000AB0, "Member 'UBP_jRPG_GI_Custom_C::SD_StopMusic' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ActiveSkins_Default) == 0x000AB8, "Member 'UBP_jRPG_GI_Custom_C::ActiveSkins_Default' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LoadingScreenWidget) == 0x000B08, "Member 'UBP_jRPG_GI_Custom_C::LoadingScreenWidget' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, PROTO_WorldmapSpawnName) == 0x000B10, "Member 'UBP_jRPG_GI_Custom_C::PROTO_WorldmapSpawnName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, PROTO_LevelSpawnName) == 0x000B18, "Member 'UBP_jRPG_GI_Custom_C::PROTO_LevelSpawnName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, WorldMapCamp) == 0x000B20, "Member 'UBP_jRPG_GI_Custom_C::WorldMapCamp' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ExplorationProgressionState) == 0x000B28, "Member 'UBP_jRPG_GI_Custom_C::ExplorationProgressionState' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, WBP_FullScreenNotificationContainer) == 0x000B30, "Member 'UBP_jRPG_GI_Custom_C::WBP_FullScreenNotificationContainer' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, NamedIDsStates) == 0x000B38, "Member 'UBP_jRPG_GI_Custom_C::NamedIDsStates' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AllNamedIDs) == 0x000B88, "Member 'UBP_jRPG_GI_Custom_C::AllNamedIDs' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnPersistentFlagSet) == 0x000B98, "Member 'UBP_jRPG_GI_Custom_C::OnPersistentFlagSet' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastRelevantSaveName) == 0x000BA8, "Member 'UBP_jRPG_GI_Custom_C::LastRelevantSaveName' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastSaveDateTime) == 0x000BB8, "Member 'UBP_jRPG_GI_Custom_C::LastSaveDateTime' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentCharacterWorldEnum) == 0x000BC0, "Member 'UBP_jRPG_GI_Custom_C::CurrentCharacterWorldEnum' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, BattleTowerSystem) == 0x000BC8, "Member 'UBP_jRPG_GI_Custom_C::BattleTowerSystem' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentTowerBattle) == 0x000BD0, "Member 'UBP_jRPG_GI_Custom_C::CurrentTowerBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ShouldTriggerTowerBattle) == 0x000BEC, "Member 'UBP_jRPG_GI_Custom_C::ShouldTriggerTowerBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ShouldTalkToNPCAfterCleasTowerBattle) == 0x000BED, "Member 'UBP_jRPG_GI_Custom_C::ShouldTalkToNPCAfterCleasTowerBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CleasTowerCurrentAccessibleStage) == 0x000BF0, "Member 'UBP_jRPG_GI_Custom_C::CleasTowerCurrentAccessibleStage' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CleasTowerBattleIndex) == 0x000BF4, "Member 'UBP_jRPG_GI_Custom_C::CleasTowerBattleIndex' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, EquippedConsumableShards) == 0x000BF8, "Member 'UBP_jRPG_GI_Custom_C::EquippedConsumableShards' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AmbiencePlaybackPercent) == 0x000C08, "Member 'UBP_jRPG_GI_Custom_C::AmbiencePlaybackPercent' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, VendorsStates) == 0x000C10, "Member 'UBP_jRPG_GI_Custom_C::VendorsStates' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ComeToWorldMapFromCamp) == 0x000C60, "Member 'UBP_jRPG_GI_Custom_C::ComeToWorldMapFromCamp' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CreditsToShow) == 0x000C68, "Member 'UBP_jRPG_GI_Custom_C::CreditsToShow' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, Lifts_CurrentFloor) == 0x000C70, "Member 'UBP_jRPG_GI_Custom_C::Lifts_CurrentFloor' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, QuestSystem) == 0x000CC0, "Member 'UBP_jRPG_GI_Custom_C::QuestSystem' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, IsSoundPausedByCinematic) == 0x000CC8, "Member 'UBP_jRPG_GI_Custom_C::IsSoundPausedByCinematic' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, IsLoadingMapFromLoadGame) == 0x000CC9, "Member 'UBP_jRPG_GI_Custom_C::IsLoadingMapFromLoadGame' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, PreviousManorDoorInfo) == 0x000CCC, "Member 'UBP_jRPG_GI_Custom_C::PreviousManorDoorInfo' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InventorySystem) == 0x000CE0, "Member 'UBP_jRPG_GI_Custom_C::InventorySystem' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnAnyPersistentFlagSet) == 0x000CE8, "Member 'UBP_jRPG_GI_Custom_C::OnAnyPersistentFlagSet' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnEnemyBattled) == 0x000CF8, "Member 'UBP_jRPG_GI_Custom_C::OnEnemyBattled' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnAnyEnemyBattled) == 0x000D08, "Member 'UBP_jRPG_GI_Custom_C::OnAnyEnemyBattled' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnAnyDialoguePlayed) == 0x000D18, "Member 'UBP_jRPG_GI_Custom_C::OnAnyDialoguePlayed' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnAnyCinematicPlayed) == 0x000D28, "Member 'UBP_jRPG_GI_Custom_C::OnAnyCinematicPlayed' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, PartyHealShard) == 0x000D38, "Member 'UBP_jRPG_GI_Custom_C::PartyHealShard' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, InteractedDialogues) == 0x000D48, "Member 'UBP_jRPG_GI_Custom_C::InteractedDialogues' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, RelationshipSystem) == 0x000D98, "Member 'UBP_jRPG_GI_Custom_C::RelationshipSystem' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LevelDestinationNameAfterCamp) == 0x000DA0, "Member 'UBP_jRPG_GI_Custom_C::LevelDestinationNameAfterCamp' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastMusicBeforeBattle) == 0x000DA8, "Member 'UBP_jRPG_GI_Custom_C::LastMusicBeforeBattle' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastMusicBeforeCinematic) == 0x000DB0, "Member 'UBP_jRPG_GI_Custom_C::LastMusicBeforeCinematic' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentCreditsOverlay) == 0x000DB8, "Member 'UBP_jRPG_GI_Custom_C::CurrentCreditsOverlay' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, AudioComponentsToUnspawn) == 0x000DC0, "Member 'UBP_jRPG_GI_Custom_C::AudioComponentsToUnspawn' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, IsStillOnVictoryScreen) == 0x000DD0, "Member 'UBP_jRPG_GI_Custom_C::IsStillOnVictoryScreen' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ProjectConfiguration) == 0x000DD8, "Member 'UBP_jRPG_GI_Custom_C::ProjectConfiguration' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastSavedLightingScenario) == 0x000DE0, "Member 'UBP_jRPG_GI_Custom_C::LastSavedLightingScenario' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastSavedAudioParameters) == 0x000E08, "Member 'UBP_jRPG_GI_Custom_C::LastSavedAudioParameters' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, DifficultyManager) == 0x000E40, "Member 'UBP_jRPG_GI_Custom_C::DifficultyManager' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ShouldDispatchModifications) == 0x000E48, "Member 'UBP_jRPG_GI_Custom_C::ShouldDispatchModifications' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, FinishedGameCount) == 0x000E4C, "Member 'UBP_jRPG_GI_Custom_C::FinishedGameCount' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnFinishedGameCounterChanged) == 0x000E50, "Member 'UBP_jRPG_GI_Custom_C::OnFinishedGameCounterChanged' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnChangeMapProcessStarted) == 0x000E60, "Member 'UBP_jRPG_GI_Custom_C::OnChangeMapProcessStarted' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnChangeMapProcessFinished) == 0x000E70, "Member 'UBP_jRPG_GI_Custom_C::OnChangeMapProcessFinished' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, MerchantStates) == 0x000E80, "Member 'UBP_jRPG_GI_Custom_C::MerchantStates' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnAnyTutorialCompleted) == 0x000ED0, "Member 'UBP_jRPG_GI_Custom_C::OnAnyTutorialCompleted' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentExplorationContext) == 0x000EE0, "Member 'UBP_jRPG_GI_Custom_C::CurrentExplorationContext' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, SharedPassiveEffectProgression) == 0x000EE8, "Member 'UBP_jRPG_GI_Custom_C::SharedPassiveEffectProgression' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, ExternalCompanions) == 0x000F38, "Member 'UBP_jRPG_GI_Custom_C::ExternalCompanions' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, UnlockedSpawnPoints) == 0x000F48, "Member 'UBP_jRPG_GI_Custom_C::UnlockedSpawnPoints' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, UnlockedMapSections) == 0x000F98, "Member 'UBP_jRPG_GI_Custom_C::UnlockedMapSections' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, IsMountInUse) == 0x000FA8, "Member 'UBP_jRPG_GI_Custom_C::IsMountInUse' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, CurrentSettingsContext) == 0x000FAC, "Member 'UBP_jRPG_GI_Custom_C::CurrentSettingsContext' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnSettingsPageContextChanged) == 0x000FB8, "Member 'UBP_jRPG_GI_Custom_C::OnSettingsPageContextChanged' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, EncounteredEnemies) == 0x000FC8, "Member 'UBP_jRPG_GI_Custom_C::EncounteredEnemies' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnEnemyEncountered) == 0x001018, "Member 'UBP_jRPG_GI_Custom_C::OnEnemyEncountered' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnAnyEnemyEncountered) == 0x001028, "Member 'UBP_jRPG_GI_Custom_C::OnAnyEnemyEncountered' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, NotificationPools) == 0x001038, "Member 'UBP_jRPG_GI_Custom_C::NotificationPools' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnObjectMarkedAsRead) == 0x001088, "Member 'UBP_jRPG_GI_Custom_C::OnObjectMarkedAsRead' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, FavoritePools) == 0x001098, "Member 'UBP_jRPG_GI_Custom_C::FavoritePools' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnFavoriteObjectChanged) == 0x0010E8, "Member 'UBP_jRPG_GI_Custom_C::OnFavoriteObjectChanged' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, OnPassiveEffectLearned) == 0x0010F8, "Member 'UBP_jRPG_GI_Custom_C::OnPassiveEffectLearned' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, LastUsedSavePoint) == 0x001108, "Member 'UBP_jRPG_GI_Custom_C::LastUsedSavePoint' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, VisitedLevelRowNames) == 0x001118, "Member 'UBP_jRPG_GI_Custom_C::VisitedLevelRowNames' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, NamedIDsStatesToKeepInNewGamePlus) == 0x001128, "Member 'UBP_jRPG_GI_Custom_C::NamedIDsStatesToKeepInNewGamePlus' has a wrong offset!");
static_assert(offsetof(UBP_jRPG_GI_Custom_C, TempCharacterStats) == 0x001138, "Member 'UBP_jRPG_GI_Custom_C::TempCharacterStats' has a wrong offset!");

}

