#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IKFootToGround

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "IKFootToGround_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class IKFootToGround.FootIK
// 0x0118 (0x01B8 - 0x00A0)
class UFootIK final : public UActorComponent
{
public:
	TMap<class FName, struct FLegSetupInfo>       LegsSetup;                                         // 0x00A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          AdjustMeshCoordinate;                              // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MeshMaxOffset;                                     // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             GroundCollisionChannel;                            // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceByObjectType;                                // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InterpSpeed;                                       // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootHeightAdjustment;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComplexTracing;                                 // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CalculateOrientation;                              // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConstraintKneeAngle;                               // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugTracing;                                 // 0x010C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateLegSizeInRuntime;                           // 0x010D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E[0x2];                                      // 0x010E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConstraintPelvisYMovement;                         // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ConstraintPelvisXMovement;                         // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LiftUpInAir;                                       // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IKAlpha;                                           // 0x011C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             PlayerCharacter;                                   // 0x0120(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CharacterMesh;                                     // 0x0128(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInitialized;                                    // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEnabled;                                        // 0x0131(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_132[0x6];                                      // 0x0132(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FLegInfo>            Legs;                                              // 0x0138(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FLegInfoArray>                  LegsArray;                                         // 0x0188(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         DefaultMeshOffset;                                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CrouchedMeshOffset;                                // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastPelvisOffsetX;                                 // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastPelvisOffsetY;                                 // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastPelvisOffsetZ;                                 // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultHalfHeight;                                 // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          WasCrouched;                                       // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddLegToMap(class FName Key, const struct FLegInfo& Data);
	struct FVector GetFootGround(const class FName LegTag);
	struct FVector GetLocalFootGround(const class FName LegTag);
	void InitializeComp();
	void InitLeg(const class FName LegTag, const class FName ThighBoneName, const class FName CalfBoneName, const class FName FootBoneName, const EFootSide Side, const struct FFootCollider& FootCollider);
	void MakeTick(const float DeltaTime);
	void SetEnabled(bool NewIsEnabled);
	void SetLegEnabled(class FName LegName, bool bNewIsEnabled);
	void TraceForLeg(class FName Tag, bool IsFalling, float DeltaTime);

	EFootIKType GetFootGroundIKState(const class FName& LegTag) const;
	float GetFootRotation(const class FName LegTag) const;
	class UPrimitiveComponent* GetLastFootCollision(class FName LegName) const;
	bool IsEnabled() const;
	bool IsInitialized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootIK">();
	}
	static class UFootIK* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootIK>();
	}
};
static_assert(alignof(UFootIK) == 0x000008, "Wrong alignment on UFootIK");
static_assert(sizeof(UFootIK) == 0x0001B8, "Wrong size on UFootIK");
static_assert(offsetof(UFootIK, LegsSetup) == 0x0000A0, "Member 'UFootIK::LegsSetup' has a wrong offset!");
static_assert(offsetof(UFootIK, AdjustMeshCoordinate) == 0x0000F0, "Member 'UFootIK::AdjustMeshCoordinate' has a wrong offset!");
static_assert(offsetof(UFootIK, MeshMaxOffset) == 0x0000F4, "Member 'UFootIK::MeshMaxOffset' has a wrong offset!");
static_assert(offsetof(UFootIK, GroundCollisionChannel) == 0x0000F8, "Member 'UFootIK::GroundCollisionChannel' has a wrong offset!");
static_assert(offsetof(UFootIK, bTraceByObjectType) == 0x0000F9, "Member 'UFootIK::bTraceByObjectType' has a wrong offset!");
static_assert(offsetof(UFootIK, InterpSpeed) == 0x0000FC, "Member 'UFootIK::InterpSpeed' has a wrong offset!");
static_assert(offsetof(UFootIK, FootHeightAdjustment) == 0x000100, "Member 'UFootIK::FootHeightAdjustment' has a wrong offset!");
static_assert(offsetof(UFootIK, UseComplexTracing) == 0x000104, "Member 'UFootIK::UseComplexTracing' has a wrong offset!");
static_assert(offsetof(UFootIK, CalculateOrientation) == 0x000105, "Member 'UFootIK::CalculateOrientation' has a wrong offset!");
static_assert(offsetof(UFootIK, ConstraintKneeAngle) == 0x000108, "Member 'UFootIK::ConstraintKneeAngle' has a wrong offset!");
static_assert(offsetof(UFootIK, bDrawDebugTracing) == 0x00010C, "Member 'UFootIK::bDrawDebugTracing' has a wrong offset!");
static_assert(offsetof(UFootIK, bUpdateLegSizeInRuntime) == 0x00010D, "Member 'UFootIK::bUpdateLegSizeInRuntime' has a wrong offset!");
static_assert(offsetof(UFootIK, ConstraintPelvisYMovement) == 0x000110, "Member 'UFootIK::ConstraintPelvisYMovement' has a wrong offset!");
static_assert(offsetof(UFootIK, ConstraintPelvisXMovement) == 0x000114, "Member 'UFootIK::ConstraintPelvisXMovement' has a wrong offset!");
static_assert(offsetof(UFootIK, LiftUpInAir) == 0x000118, "Member 'UFootIK::LiftUpInAir' has a wrong offset!");
static_assert(offsetof(UFootIK, IKAlpha) == 0x00011C, "Member 'UFootIK::IKAlpha' has a wrong offset!");
static_assert(offsetof(UFootIK, PlayerCharacter) == 0x000120, "Member 'UFootIK::PlayerCharacter' has a wrong offset!");
static_assert(offsetof(UFootIK, CharacterMesh) == 0x000128, "Member 'UFootIK::CharacterMesh' has a wrong offset!");
static_assert(offsetof(UFootIK, bIsInitialized) == 0x000130, "Member 'UFootIK::bIsInitialized' has a wrong offset!");
static_assert(offsetof(UFootIK, bIsEnabled) == 0x000131, "Member 'UFootIK::bIsEnabled' has a wrong offset!");
static_assert(offsetof(UFootIK, Legs) == 0x000138, "Member 'UFootIK::Legs' has a wrong offset!");
static_assert(offsetof(UFootIK, LegsArray) == 0x000188, "Member 'UFootIK::LegsArray' has a wrong offset!");
static_assert(offsetof(UFootIK, DefaultMeshOffset) == 0x000198, "Member 'UFootIK::DefaultMeshOffset' has a wrong offset!");
static_assert(offsetof(UFootIK, CrouchedMeshOffset) == 0x00019C, "Member 'UFootIK::CrouchedMeshOffset' has a wrong offset!");
static_assert(offsetof(UFootIK, LastPelvisOffsetX) == 0x0001A0, "Member 'UFootIK::LastPelvisOffsetX' has a wrong offset!");
static_assert(offsetof(UFootIK, LastPelvisOffsetY) == 0x0001A4, "Member 'UFootIK::LastPelvisOffsetY' has a wrong offset!");
static_assert(offsetof(UFootIK, LastPelvisOffsetZ) == 0x0001A8, "Member 'UFootIK::LastPelvisOffsetZ' has a wrong offset!");
static_assert(offsetof(UFootIK, DefaultHalfHeight) == 0x0001AC, "Member 'UFootIK::DefaultHalfHeight' has a wrong offset!");
static_assert(offsetof(UFootIK, WasCrouched) == 0x0001B0, "Member 'UFootIK::WasCrouched' has a wrong offset!");

// Class IKFootToGround.LowerBodyIKComponent
// 0x0620 (0x06C0 - 0x00A0)
class ULowerBodyIKComponent final : public UActorComponent
{
public:
	class FName                                   FootBoneNameR;                                     // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CalfBoneNameR;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThighBoneNameR;                                    // 0x00B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootBoneNameL;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CalfBoneNameL;                                     // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThighBoneNameL;                                    // 0x00C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PelvisBoneName;                                    // 0x00D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PelvisVirtualBone;                                 // 0x00D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootVirtualBoneR;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootVirtualBoneL;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceAsObjectType;                                // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ForwardBackLeanDistance;                           // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightLeftLeanDistance;                             // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardBackLeanDegrees;                            // 0x00FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightLeftLeanDegrees;                              // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThighLength;                                       // 0x0104(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CalfLength;                                        // 0x0108(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FootHeight;                                        // 0x010C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LegHeight;                                         // 0x0110(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PelvisHeight;                                      // 0x0114(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLowerBodyIKResult                     Result;                                            // 0x0120(0x0250)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnabledIK;                                        // 0x0370(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ApplyIKAlpha;                                      // 0x0374(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x8];                                      // 0x0378(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FrameGroundTransform;                              // 0x0380(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrameIsFalling;                                   // 0x03E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrameIsFinishingFalling;                          // 0x03E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrameIsMoving;                                    // 0x03E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFrameIsCrouching;                                 // 0x03E3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultFootBoneZ;                                  // 0x03E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E8[0x2D8];                                    // 0x03E8(0x02D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ToggleEnabled(bool bNewIsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LowerBodyIKComponent">();
	}
	static class ULowerBodyIKComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULowerBodyIKComponent>();
	}
};
static_assert(alignof(ULowerBodyIKComponent) == 0x000010, "Wrong alignment on ULowerBodyIKComponent");
static_assert(sizeof(ULowerBodyIKComponent) == 0x0006C0, "Wrong size on ULowerBodyIKComponent");
static_assert(offsetof(ULowerBodyIKComponent, FootBoneNameR) == 0x0000A0, "Member 'ULowerBodyIKComponent::FootBoneNameR' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, CalfBoneNameR) == 0x0000A8, "Member 'ULowerBodyIKComponent::CalfBoneNameR' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, ThighBoneNameR) == 0x0000B0, "Member 'ULowerBodyIKComponent::ThighBoneNameR' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, FootBoneNameL) == 0x0000B8, "Member 'ULowerBodyIKComponent::FootBoneNameL' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, CalfBoneNameL) == 0x0000C0, "Member 'ULowerBodyIKComponent::CalfBoneNameL' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, ThighBoneNameL) == 0x0000C8, "Member 'ULowerBodyIKComponent::ThighBoneNameL' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, PelvisBoneName) == 0x0000D0, "Member 'ULowerBodyIKComponent::PelvisBoneName' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, PelvisVirtualBone) == 0x0000D8, "Member 'ULowerBodyIKComponent::PelvisVirtualBone' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, FootVirtualBoneR) == 0x0000E0, "Member 'ULowerBodyIKComponent::FootVirtualBoneR' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, FootVirtualBoneL) == 0x0000E8, "Member 'ULowerBodyIKComponent::FootVirtualBoneL' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, CollisionChannel) == 0x0000F0, "Member 'ULowerBodyIKComponent::CollisionChannel' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, bTraceAsObjectType) == 0x0000F1, "Member 'ULowerBodyIKComponent::bTraceAsObjectType' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, ForwardBackLeanDistance) == 0x0000F4, "Member 'ULowerBodyIKComponent::ForwardBackLeanDistance' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, RightLeftLeanDistance) == 0x0000F8, "Member 'ULowerBodyIKComponent::RightLeftLeanDistance' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, ForwardBackLeanDegrees) == 0x0000FC, "Member 'ULowerBodyIKComponent::ForwardBackLeanDegrees' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, RightLeftLeanDegrees) == 0x000100, "Member 'ULowerBodyIKComponent::RightLeftLeanDegrees' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, ThighLength) == 0x000104, "Member 'ULowerBodyIKComponent::ThighLength' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, CalfLength) == 0x000108, "Member 'ULowerBodyIKComponent::CalfLength' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, FootHeight) == 0x00010C, "Member 'ULowerBodyIKComponent::FootHeight' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, LegHeight) == 0x000110, "Member 'ULowerBodyIKComponent::LegHeight' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, PelvisHeight) == 0x000114, "Member 'ULowerBodyIKComponent::PelvisHeight' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, Result) == 0x000120, "Member 'ULowerBodyIKComponent::Result' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, bEnabledIK) == 0x000370, "Member 'ULowerBodyIKComponent::bEnabledIK' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, ApplyIKAlpha) == 0x000374, "Member 'ULowerBodyIKComponent::ApplyIKAlpha' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, FrameGroundTransform) == 0x000380, "Member 'ULowerBodyIKComponent::FrameGroundTransform' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, bFrameIsFalling) == 0x0003E0, "Member 'ULowerBodyIKComponent::bFrameIsFalling' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, bFrameIsFinishingFalling) == 0x0003E1, "Member 'ULowerBodyIKComponent::bFrameIsFinishingFalling' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, bFrameIsMoving) == 0x0003E2, "Member 'ULowerBodyIKComponent::bFrameIsMoving' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, bFrameIsCrouching) == 0x0003E3, "Member 'ULowerBodyIKComponent::bFrameIsCrouching' has a wrong offset!");
static_assert(offsetof(ULowerBodyIKComponent, DefaultFootBoneZ) == 0x0003E4, "Member 'ULowerBodyIKComponent::DefaultFootBoneZ' has a wrong offset!");

}

