#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MiniMapCapture

#include "Basic.hpp"

#include "BP_MiniMapCapture_classes.hpp"
#include "BP_MiniMapCapture_parameters.hpp"


namespace SDK
{

// Function BP_MiniMapCapture.BP_MiniMapCapture_C.ConvertLocationToMapLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       TwoDPosition                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MiniMapCapture_C::ConvertLocationToMapLocation(const struct FVector& Location, struct FVector2D* TwoDPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "ConvertLocationToMapLocation");

	Params::BP_MiniMapCapture_C_ConvertLocationToMapLocation Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (TwoDPosition != nullptr)
		*TwoDPosition = std::move(Parms.TwoDPosition);
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.ExecuteUbergraph_BP_MiniMapCapture
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MiniMapCapture_C::ExecuteUbergraph_BP_MiniMapCapture(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "ExecuteUbergraph_BP_MiniMapCapture");

	Params::BP_MiniMapCapture_C_ExecuteUbergraph_BP_MiniMapCapture Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.GetMapHeight
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_MiniMapCapture_C::GetMapHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "GetMapHeight");

	Params::BP_MiniMapCapture_C_GetMapHeight Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.GetMapWidth
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_MiniMapCapture_C::GetMapWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "GetMapWidth");

	Params::BP_MiniMapCapture_C_GetMapWidth Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.IsLocationInUnlockedSection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsInUnlockedSection                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MiniMapCapture_C::IsLocationInUnlockedSection(const struct FVector2D& Location, bool* IsInUnlockedSection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "IsLocationInUnlockedSection");

	Params::BP_MiniMapCapture_C_IsLocationInUnlockedSection Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (IsInUnlockedSection != nullptr)
		*IsInUnlockedSection = Parms.IsInUnlockedSection;
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_MiniMapCapture_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MiniMapCapture_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "ReceiveTick");

	Params::BP_MiniMapCapture_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.TryReadSectionGrayscaleValue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 TwoDPosition                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Succeed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// uint8*                                  GreyscaleValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_MiniMapCapture_C::TryReadSectionGrayscaleValue(const struct FVector2D& TwoDPosition, bool* Succeed, uint8* GreyscaleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "TryReadSectionGrayscaleValue");

	Params::BP_MiniMapCapture_C_TryReadSectionGrayscaleValue Parms{};

	Parms.TwoDPosition = std::move(TwoDPosition);

	UObject::ProcessEvent(Func, &Parms);

	if (Succeed != nullptr)
		*Succeed = Parms.Succeed;

	if (GreyscaleValue != nullptr)
		*GreyscaleValue = Parms.GreyscaleValue;
}


// Function BP_MiniMapCapture.BP_MiniMapCapture_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_MiniMapCapture_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_MiniMapCapture_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

