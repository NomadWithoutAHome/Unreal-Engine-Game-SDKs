#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Holds

#include "Basic.hpp"

#include "BP_Holds_classes.hpp"
#include "BP_Holds_parameters.hpp"


namespace SDK
{

// Function BP_Holds.BP_Holds_C.AutoLinkAllHoldsInRange
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::AutoLinkAllHoldsInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "AutoLinkAllHoldsInRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.AutoLinkAllHoldsInRangeWithIgnoreList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Holds_C*>&             ClimbingElementsToIgnore                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_Holds_C::AutoLinkAllHoldsInRangeWithIgnoreList(TArray<class ABP_Holds_C*>& ClimbingElementsToIgnore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "AutoLinkAllHoldsInRangeWithIgnoreList");

	Params::BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList Parms{};

	Parms.ClimbingElementsToIgnore = std::move(ClimbingElementsToIgnore);

	UObject::ProcessEvent(Func, &Parms);

	ClimbingElementsToIgnore = std::move(Parms.ClimbingElementsToIgnore);
}


// Function BP_Holds.BP_Holds_C.AutoLinkHold
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::AutoLinkHold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "AutoLinkHold");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.CanInteractWithMount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanInteract                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::CanInteractWithMount(bool* CanInteract)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "CanInteractWithMount");

	Params::BP_Holds_C_CanInteractWithMount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanInteract != nullptr)
		*CanInteract = Parms.CanInteract;
}


// Function BP_Holds.BP_Holds_C.CheckCanExitToBottom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputDirectionVertical                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanExit                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Holds_C::CheckCanExitToBottom(const struct FVector& InputDirectionVertical, double InputScale, bool* CanExit, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "CheckCanExitToBottom");

	Params::BP_Holds_C_CheckCanExitToBottom Parms{};

	Parms.InputDirectionVertical = std::move(InputDirectionVertical);
	Parms.InputScale = InputScale;

	UObject::ProcessEvent(Func, &Parms);

	if (CanExit != nullptr)
		*CanExit = Parms.CanExit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_Holds.BP_Holds_C.CheckCanExitToTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputDirectionVertical                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanExit                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Holds_C::CheckCanExitToTop(const struct FVector& InputDirectionVertical, double InputScale, bool* CanExit, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "CheckCanExitToTop");

	Params::BP_Holds_C_CheckCanExitToTop Parms{};

	Parms.InputDirectionVertical = std::move(InputDirectionVertical);
	Parms.InputScale = InputScale;

	UObject::ProcessEvent(Func, &Parms);

	if (CanExit != nullptr)
		*CanExit = Parms.CanExit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_Holds.BP_Holds_C.CheckForErrors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Holds_C::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "CheckForErrors");

	Params::BP_Holds_C_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function BP_Holds.BP_Holds_C.CheckMoveToNextClimbingElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputDirectionHorizontal                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InputDirectionVertical                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraForward                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanMove                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_ClimbingElement_C>*NextHold                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::CheckMoveToNextClimbingElement(const struct FVector& InputDirectionHorizontal, const struct FVector& InputDirectionVertical, double InputScale, const struct FVector& CameraForward, const struct FVector& CameraLocation, bool* CanMove, TScriptInterface<class IBPI_ClimbingElement_C>* NextHold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "CheckMoveToNextClimbingElement");

	Params::BP_Holds_C_CheckMoveToNextClimbingElement Parms{};

	Parms.InputDirectionHorizontal = std::move(InputDirectionHorizontal);
	Parms.InputDirectionVertical = std::move(InputDirectionVertical);
	Parms.InputScale = InputScale;
	Parms.CameraForward = std::move(CameraForward);
	Parms.CameraLocation = std::move(CameraLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (CanMove != nullptr)
		*CanMove = Parms.CanMove;

	if (NextHold != nullptr)
		*NextHold = Parms.NextHold;
}


// Function BP_Holds.BP_Holds_C.ConstructObject
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::ConstructObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "ConstructObject");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.EvaluatePossibleHold
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HoldToEvaluate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InputDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraForward                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 ComputedDot                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::EvaluatePossibleHold(class AActor* HoldToEvaluate, const struct FVector& InputDirection, const struct FVector& CameraForward, const struct FVector& CameraLocation, double* ComputedDot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "EvaluatePossibleHold");

	Params::BP_Holds_C_EvaluatePossibleHold Parms{};

	Parms.HoldToEvaluate = HoldToEvaluate;
	Parms.InputDirection = std::move(InputDirection);
	Parms.CameraForward = std::move(CameraForward);
	Parms.CameraLocation = std::move(CameraLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (ComputedDot != nullptr)
		*ComputedDot = Parms.ComputedDot;
}


// Function BP_Holds.BP_Holds_C.ExecuteUbergraph_BP_Holds
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::ExecuteUbergraph_BP_Holds(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "ExecuteUbergraph_BP_Holds");

	Params::BP_Holds_C_ExecuteUbergraph_BP_Holds Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.GetClimbingElementInRange
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Holds_C*                      ClimbingElement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_Holds_C*>*             ClimbingElements                                       (Parm, OutParm)

void ABP_Holds_C::GetClimbingElementInRange(class ABP_Holds_C* ClimbingElement, TArray<class ABP_Holds_C*>* ClimbingElements)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "GetClimbingElementInRange");

	Params::BP_Holds_C_GetClimbingElementInRange Parms{};

	Parms.ClimbingElement = ClimbingElement;

	UObject::ProcessEvent(Func, &Parms);

	if (ClimbingElements != nullptr)
		*ClimbingElements = std::move(Parms.ClimbingElements);
}


// Function BP_Holds.BP_Holds_C.GetClimbingElementLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::GetClimbingElementLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "GetClimbingElementLocation");

	Params::BP_Holds_C_GetClimbingElementLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_Holds.BP_Holds_C.GetClimbingElementRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Holds_C::GetClimbingElementRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "GetClimbingElementRotation");

	Params::BP_Holds_C_GetClimbingElementRotation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_Holds.BP_Holds_C.GetInteractionPromptParams
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFPromptParams*                  PromptParams                                           (Parm, OutParm, HasGetValueTypeHash)

void ABP_Holds_C::GetInteractionPromptParams(struct FFPromptParams* PromptParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "GetInteractionPromptParams");

	Params::BP_Holds_C_GetInteractionPromptParams Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PromptParams != nullptr)
		*PromptParams = std::move(Parms.PromptParams);
}


// Function BP_Holds.BP_Holds_C.IsEntryOrExit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Holds_C::IsEntryOrExit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "IsEntryOrExit");

	Params::BP_Holds_C_IsEntryOrExit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Holds.BP_Holds_C.IsInteractionAvailable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::IsInteractionAvailable(bool* Available)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "IsInteractionAvailable");

	Params::BP_Holds_C_IsInteractionAvailable Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;
}


// Function BP_Holds.BP_Holds_C.IsInteractionDone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::IsInteractionDone(bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "IsInteractionDone");

	Params::BP_Holds_C_IsInteractionDone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function BP_Holds.BP_Holds_C.LinkToFirstClimbingElementAndRemoveIt
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_Holds_C*>&             Holds                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class ABP_Holds_C**                     LinkedHold                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::LinkToFirstClimbingElementAndRemoveIt(TArray<class ABP_Holds_C*>& Holds, class ABP_Holds_C** LinkedHold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "LinkToFirstClimbingElementAndRemoveIt");

	Params::BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt Parms{};

	Parms.Holds = std::move(Holds);

	UObject::ProcessEvent(Func, &Parms);

	Holds = std::move(Parms.Holds);

	if (LinkedHold != nullptr)
		*LinkedHold = Parms.LinkedHold;
}


// Function BP_Holds.BP_Holds_C.OnEnemyBattleStateLoaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    BattleState                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::OnEnemyBattleStateLoaded(bool BattleState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnEnemyBattleStateLoaded");

	Params::BP_Holds_C_OnEnemyBattleStateLoaded Parms{};

	Parms.BattleState = BattleState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.OnInteractionDisabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::OnInteractionDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnInteractionDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.OnInteractionEnabled
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::OnInteractionEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnInteractionEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.OnInteractionRequested
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_World_C*       InteractingWorldCharacter                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Instant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnInteractionRequested");

	Params::BP_Holds_C_OnInteractionRequested Parms{};

	Parms.InteractingWorldCharacter = InteractingWorldCharacter;
	Parms.Instant = Instant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.OnObjectInteractionStateLoaded
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InteractionState                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::OnObjectInteractionStateLoaded(bool InteractionState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnObjectInteractionStateLoaded");

	Params::BP_Holds_C_OnObjectInteractionStateLoaded Parms{};

	Parms.InteractionState = InteractionState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.OnTriggerBeginOverlap
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bFromSweep                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                SweepResult                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_Holds_C::OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnTriggerBeginOverlap");

	Params::BP_Holds_C_OnTriggerBeginOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.OnTriggerEndOverlap
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPrimitiveComponent*              OverlappedComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class AActor*                           OtherActor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPrimitiveComponent*              OtherComp                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   OtherBodyIndex                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "OnTriggerEndOverlap");

	Params::BP_Holds_C_OnTriggerEndOverlap Parms{};

	Parms.OverlappedComponent = OverlappedComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.ProjectLocationsOnCameraPlane
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           HoldToEvaluate                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraForward                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         HoldToEvaluateLocation                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         CurrentLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::ProjectLocationsOnCameraPlane(class AActor* HoldToEvaluate, const struct FVector& CameraForward, const struct FVector& CameraLocation, struct FVector* HoldToEvaluateLocation, struct FVector* CurrentLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "ProjectLocationsOnCameraPlane");

	Params::BP_Holds_C_ProjectLocationsOnCameraPlane Parms{};

	Parms.HoldToEvaluate = HoldToEvaluate;
	Parms.CameraForward = std::move(CameraForward);
	Parms.CameraLocation = std::move(CameraLocation);

	UObject::ProcessEvent(Func, &Parms);

	if (HoldToEvaluateLocation != nullptr)
		*HoldToEvaluateLocation = std::move(Parms.HoldToEvaluateLocation);

	if (CurrentLocation != nullptr)
		*CurrentLocation = std::move(Parms.CurrentLocation);
}


// Function BP_Holds.BP_Holds_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Holds_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "ReceiveEndPlay");

	Params::BP_Holds_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Holds.BP_Holds_C.ShouldHideDistantInteraction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Holds_C::ShouldHideDistantInteraction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "ShouldHideDistantInteraction");

	Params::BP_Holds_C_ShouldHideDistantInteraction Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Holds.BP_Holds_C.SortClimbingElementByDistance
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Holds_C*                      Hold                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_Holds_C*>&             Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_Holds_C*>*             SortedArray                                            (Parm, OutParm)

void ABP_Holds_C::SortClimbingElementByDistance(class ABP_Holds_C* Hold, TArray<class ABP_Holds_C*>& Array, TArray<class ABP_Holds_C*>* SortedArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "SortClimbingElementByDistance");

	Params::BP_Holds_C_SortClimbingElementByDistance Parms{};

	Parms.Hold = Hold;
	Parms.Array = std::move(Array);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);

	if (SortedArray != nullptr)
		*SortedArray = std::move(Parms.SortedArray);
}


// Function BP_Holds.BP_Holds_C.UpdateDebugDisplay
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::UpdateDebugDisplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "UpdateDebugDisplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.UpdateEntryExitDefaultLocation
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::UpdateEntryExitDefaultLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "UpdateEntryExitDefaultLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Holds_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Holds.BP_Holds_C.GetInteractionFeedbackLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::GetInteractionFeedbackLocation(struct FVector* Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "GetInteractionFeedbackLocation");

	Params::BP_Holds_C_GetInteractionFeedbackLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_Holds.BP_Holds_C.GetInteractionLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Holds_C::GetInteractionLocation(struct FVector* Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Holds_C", "GetInteractionLocation");

	Params::BP_Holds_C_GetInteractionLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

