#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SandFall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MovieScene_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonInput_structs.hpp"
#include "StateTreeModule_structs.hpp"


namespace SDK::Params
{

// Function SandFall.AsyncActionHandlePlatformsSaveData.AsyncSaveLatestGameSaveLoaded
// 0x0020 (0x0020 - 0x0000)
struct AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAsyncActionHandlePlatformsSaveData*    ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded) == 0x000008, "Wrong alignment on AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded");
static_assert(sizeof(AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded) == 0x000020, "Wrong size on AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded");
static_assert(offsetof(AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded, WorldContextObject) == 0x000000, "Member 'AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded, SaveName) == 0x000008, "Member 'AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded::SaveName' has a wrong offset!");
static_assert(offsetof(AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded, ReturnValue) == 0x000018, "Member 'AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded::ReturnValue' has a wrong offset!");

// Function SandFall.CameraModifier_CameraShake_BP.BlueprintAddedToCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraModifier_CameraShake_BP_BlueprintAddedToCamera final
{
public:
	class APlayerCameraManager*                   Camera;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModifier_CameraShake_BP_BlueprintAddedToCamera) == 0x000008, "Wrong alignment on CameraModifier_CameraShake_BP_BlueprintAddedToCamera");
static_assert(sizeof(CameraModifier_CameraShake_BP_BlueprintAddedToCamera) == 0x000008, "Wrong size on CameraModifier_CameraShake_BP_BlueprintAddedToCamera");
static_assert(offsetof(CameraModifier_CameraShake_BP_BlueprintAddedToCamera, Camera) == 0x000000, "Member 'CameraModifier_CameraShake_BP_BlueprintAddedToCamera::Camera' has a wrong offset!");

// Function SandFall.CameraModifier_Meta.GetCameraMetaModifier
// 0x0010 (0x0010 - 0x0000)
struct CameraModifier_Meta_GetCameraMetaModifier final
{
public:
	struct FCameraModifier_MetaWrapper            _wrapper;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCameraModifier_Meta*                   OutMetaModifier;                                   // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModifier_Meta_GetCameraMetaModifier) == 0x000008, "Wrong alignment on CameraModifier_Meta_GetCameraMetaModifier");
static_assert(sizeof(CameraModifier_Meta_GetCameraMetaModifier) == 0x000010, "Wrong size on CameraModifier_Meta_GetCameraMetaModifier");
static_assert(offsetof(CameraModifier_Meta_GetCameraMetaModifier, _wrapper) == 0x000000, "Member 'CameraModifier_Meta_GetCameraMetaModifier::_wrapper' has a wrong offset!");
static_assert(offsetof(CameraModifier_Meta_GetCameraMetaModifier, OutMetaModifier) == 0x000008, "Member 'CameraModifier_Meta_GetCameraMetaModifier::OutMetaModifier' has a wrong offset!");

// Function SandFall.CameraModifier_Meta.SetTargetCameraModifier
// 0x0008 (0x0008 - 0x0000)
struct CameraModifier_Meta_SetTargetCameraModifier final
{
public:
	class UCameraModifier*                        _cameraModifier;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraModifier_Meta_SetTargetCameraModifier) == 0x000008, "Wrong alignment on CameraModifier_Meta_SetTargetCameraModifier");
static_assert(sizeof(CameraModifier_Meta_SetTargetCameraModifier) == 0x000008, "Wrong size on CameraModifier_Meta_SetTargetCameraModifier");
static_assert(offsetof(CameraModifier_Meta_SetTargetCameraModifier, _cameraModifier) == 0x000000, "Member 'CameraModifier_Meta_SetTargetCameraModifier::_cameraModifier' has a wrong offset!");

// Function SandFall.CharacterSkinAssignPolicy.AssignBodyAndFaceSkin
// 0x0020 (0x0020 - 0x0000)
struct CharacterSkinAssignPolicy_AssignBodyAndFaceSkin final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     BodySkinClass;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     FaceSkinClass;                                     // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkin) == 0x000008, "Wrong alignment on CharacterSkinAssignPolicy_AssignBodyAndFaceSkin");
static_assert(sizeof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkin) == 0x000020, "Wrong size on CharacterSkinAssignPolicy_AssignBodyAndFaceSkin");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkin, Owner) == 0x000000, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkin::Owner' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkin, CharacterName) == 0x000008, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkin::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkin, BodySkinClass) == 0x000010, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkin::BodySkinClass' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkin, FaceSkinClass) == 0x000018, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkin::FaceSkinClass' has a wrong offset!");

// Function SandFall.CharacterSkinAssignPolicy.AssignBodyAndFaceSkinAsync
// 0x0060 (0x0060 - 0x0000)
struct CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BodySkinClass;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FaceSkinClass;                                     // 0x0038(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync) == 0x000008, "Wrong alignment on CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync");
static_assert(sizeof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync) == 0x000060, "Wrong size on CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync, Owner) == 0x000000, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync::Owner' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync, CharacterName) == 0x000008, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync, BodySkinClass) == 0x000010, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync::BodySkinClass' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync, FaceSkinClass) == 0x000038, "Member 'CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync::FaceSkinClass' has a wrong offset!");

// Function SandFall.CharacterSkinAssignPolicy.AssignBodySkin
// 0x0018 (0x0018 - 0x0000)
struct CharacterSkinAssignPolicy_AssignBodySkin final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     BodySkinClass;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkinAssignPolicy_AssignBodySkin) == 0x000008, "Wrong alignment on CharacterSkinAssignPolicy_AssignBodySkin");
static_assert(sizeof(CharacterSkinAssignPolicy_AssignBodySkin) == 0x000018, "Wrong size on CharacterSkinAssignPolicy_AssignBodySkin");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodySkin, Owner) == 0x000000, "Member 'CharacterSkinAssignPolicy_AssignBodySkin::Owner' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodySkin, CharacterName) == 0x000008, "Member 'CharacterSkinAssignPolicy_AssignBodySkin::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodySkin, BodySkinClass) == 0x000010, "Member 'CharacterSkinAssignPolicy_AssignBodySkin::BodySkinClass' has a wrong offset!");

// Function SandFall.CharacterSkinAssignPolicy.AssignBodySkinAsync
// 0x0038 (0x0038 - 0x0000)
struct CharacterSkinAssignPolicy_AssignBodySkinAsync final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   BodySkinClass;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkinAssignPolicy_AssignBodySkinAsync) == 0x000008, "Wrong alignment on CharacterSkinAssignPolicy_AssignBodySkinAsync");
static_assert(sizeof(CharacterSkinAssignPolicy_AssignBodySkinAsync) == 0x000038, "Wrong size on CharacterSkinAssignPolicy_AssignBodySkinAsync");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodySkinAsync, Owner) == 0x000000, "Member 'CharacterSkinAssignPolicy_AssignBodySkinAsync::Owner' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodySkinAsync, CharacterName) == 0x000008, "Member 'CharacterSkinAssignPolicy_AssignBodySkinAsync::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignBodySkinAsync, BodySkinClass) == 0x000010, "Member 'CharacterSkinAssignPolicy_AssignBodySkinAsync::BodySkinClass' has a wrong offset!");

// Function SandFall.CharacterSkinAssignPolicy.AssignFaceSkin
// 0x0018 (0x0018 - 0x0000)
struct CharacterSkinAssignPolicy_AssignFaceSkin final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     FaceSkinClass;                                     // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkinAssignPolicy_AssignFaceSkin) == 0x000008, "Wrong alignment on CharacterSkinAssignPolicy_AssignFaceSkin");
static_assert(sizeof(CharacterSkinAssignPolicy_AssignFaceSkin) == 0x000018, "Wrong size on CharacterSkinAssignPolicy_AssignFaceSkin");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignFaceSkin, Owner) == 0x000000, "Member 'CharacterSkinAssignPolicy_AssignFaceSkin::Owner' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignFaceSkin, CharacterName) == 0x000008, "Member 'CharacterSkinAssignPolicy_AssignFaceSkin::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignFaceSkin, FaceSkinClass) == 0x000010, "Member 'CharacterSkinAssignPolicy_AssignFaceSkin::FaceSkinClass' has a wrong offset!");

// Function SandFall.CharacterSkinAssignPolicy.AssignFaceSkinAsync
// 0x0038 (0x0038 - 0x0000)
struct CharacterSkinAssignPolicy_AssignFaceSkinAsync final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   FaceSkinClass;                                     // 0x0010(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSkinAssignPolicy_AssignFaceSkinAsync) == 0x000008, "Wrong alignment on CharacterSkinAssignPolicy_AssignFaceSkinAsync");
static_assert(sizeof(CharacterSkinAssignPolicy_AssignFaceSkinAsync) == 0x000038, "Wrong size on CharacterSkinAssignPolicy_AssignFaceSkinAsync");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignFaceSkinAsync, Owner) == 0x000000, "Member 'CharacterSkinAssignPolicy_AssignFaceSkinAsync::Owner' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignFaceSkinAsync, CharacterName) == 0x000008, "Member 'CharacterSkinAssignPolicy_AssignFaceSkinAsync::CharacterName' has a wrong offset!");
static_assert(offsetof(CharacterSkinAssignPolicy_AssignFaceSkinAsync, FaceSkinClass) == 0x000010, "Member 'CharacterSkinAssignPolicy_AssignFaceSkinAsync::FaceSkinClass' has a wrong offset!");

// Function SandFall.ConsoleUtils.GetBoolCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetBoolCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_GetBoolCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetBoolCVar");
static_assert(sizeof(ConsoleUtils_GetBoolCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetBoolCVar");
static_assert(offsetof(ConsoleUtils_GetBoolCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetBoolCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetBoolCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetBoolCVar::ReturnValue' has a wrong offset!");

// Function SandFall.ConsoleUtils.GetFloatCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetFloatCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetFloatCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetFloatCVar");
static_assert(sizeof(ConsoleUtils_GetFloatCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetFloatCVar");
static_assert(offsetof(ConsoleUtils_GetFloatCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetFloatCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetFloatCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetFloatCVar::ReturnValue' has a wrong offset!");

// Function SandFall.ConsoleUtils.GetIntCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_GetIntCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetIntCVar) == 0x000004, "Wrong alignment on ConsoleUtils_GetIntCVar");
static_assert(sizeof(ConsoleUtils_GetIntCVar) == 0x00000C, "Wrong size on ConsoleUtils_GetIntCVar");
static_assert(offsetof(ConsoleUtils_GetIntCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetIntCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetIntCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetIntCVar::ReturnValue' has a wrong offset!");

// Function SandFall.ConsoleUtils.GetStringCVar
// 0x0018 (0x0018 - 0x0000)
struct ConsoleUtils_GetStringCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_GetStringCVar) == 0x000008, "Wrong alignment on ConsoleUtils_GetStringCVar");
static_assert(sizeof(ConsoleUtils_GetStringCVar) == 0x000018, "Wrong size on ConsoleUtils_GetStringCVar");
static_assert(offsetof(ConsoleUtils_GetStringCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_GetStringCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_GetStringCVar, ReturnValue) == 0x000008, "Member 'ConsoleUtils_GetStringCVar::ReturnValue' has a wrong offset!");

// Function SandFall.ConsoleUtils.IsCVarRegistered
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_IsCVarRegistered final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_IsCVarRegistered) == 0x000004, "Wrong alignment on ConsoleUtils_IsCVarRegistered");
static_assert(sizeof(ConsoleUtils_IsCVarRegistered) == 0x00000C, "Wrong size on ConsoleUtils_IsCVarRegistered");
static_assert(offsetof(ConsoleUtils_IsCVarRegistered, Name_0) == 0x000000, "Member 'ConsoleUtils_IsCVarRegistered::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_IsCVarRegistered, ReturnValue) == 0x000008, "Member 'ConsoleUtils_IsCVarRegistered::ReturnValue' has a wrong offset!");

// Function SandFall.ConsoleUtils.SetBoolCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetBoolCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConsoleUtils_SetBoolCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetBoolCVar");
static_assert(sizeof(ConsoleUtils_SetBoolCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetBoolCVar");
static_assert(offsetof(ConsoleUtils_SetBoolCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetBoolCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetBoolCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetBoolCVar::Value' has a wrong offset!");

// Function SandFall.ConsoleUtils.SetFloatCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetFloatCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetFloatCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetFloatCVar");
static_assert(sizeof(ConsoleUtils_SetFloatCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetFloatCVar");
static_assert(offsetof(ConsoleUtils_SetFloatCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetFloatCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetFloatCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetFloatCVar::Value' has a wrong offset!");

// Function SandFall.ConsoleUtils.SetIntCVar
// 0x000C (0x000C - 0x0000)
struct ConsoleUtils_SetIntCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetIntCVar) == 0x000004, "Wrong alignment on ConsoleUtils_SetIntCVar");
static_assert(sizeof(ConsoleUtils_SetIntCVar) == 0x00000C, "Wrong size on ConsoleUtils_SetIntCVar");
static_assert(offsetof(ConsoleUtils_SetIntCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetIntCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetIntCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetIntCVar::Value' has a wrong offset!");

// Function SandFall.ConsoleUtils.SetStringCVar
// 0x0018 (0x0018 - 0x0000)
struct ConsoleUtils_SetStringCVar final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConsoleUtils_SetStringCVar) == 0x000008, "Wrong alignment on ConsoleUtils_SetStringCVar");
static_assert(sizeof(ConsoleUtils_SetStringCVar) == 0x000018, "Wrong size on ConsoleUtils_SetStringCVar");
static_assert(offsetof(ConsoleUtils_SetStringCVar, Name_0) == 0x000000, "Member 'ConsoleUtils_SetStringCVar::Name_0' has a wrong offset!");
static_assert(offsetof(ConsoleUtils_SetStringCVar, Value) == 0x000008, "Member 'ConsoleUtils_SetStringCVar::Value' has a wrong offset!");

// Function SandFall.CSAP_SwapAssign.OnSettingsChanged
// 0x0008 (0x0008 - 0x0000)
struct CSAP_SwapAssign_OnSettingsChanged final
{
public:
	const class UConfigurableGameUserSettings*    UserGameConfig;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CSAP_SwapAssign_OnSettingsChanged) == 0x000008, "Wrong alignment on CSAP_SwapAssign_OnSettingsChanged");
static_assert(sizeof(CSAP_SwapAssign_OnSettingsChanged) == 0x000008, "Wrong size on CSAP_SwapAssign_OnSettingsChanged");
static_assert(offsetof(CSAP_SwapAssign_OnSettingsChanged, UserGameConfig) == 0x000000, "Member 'CSAP_SwapAssign_OnSettingsChanged::UserGameConfig' has a wrong offset!");

// Function SandFall.CVarChangeListenerManager.AddBoolCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddBoolCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(bool NewValue)>                ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddBoolCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddBoolCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddBoolCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddBoolCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddBoolCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddBoolCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function SandFall.CVarChangeListenerManager.AddFloatCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddFloatCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float NewValue)>               ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddFloatCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddFloatCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddFloatCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddFloatCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddFloatCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddFloatCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function SandFall.CVarChangeListenerManager.AddIntCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddIntCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 NewValue)>               ChangedCallback;                                   // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddIntCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddIntCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddIntCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddIntCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddIntCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddIntCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function SandFall.CVarChangeListenerManager.AddStringCVarCallbackStatic
// 0x001C (0x001C - 0x0000)
struct CVarChangeListenerManager_AddStringCVarCallbackStatic final
{
public:
	class FName                                   Name_0;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& NewValue)> ChangedCallback;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallbackImmediately;                               // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CVarChangeListenerManager_AddStringCVarCallbackStatic) == 0x000004, "Wrong alignment on CVarChangeListenerManager_AddStringCVarCallbackStatic");
static_assert(sizeof(CVarChangeListenerManager_AddStringCVarCallbackStatic) == 0x00001C, "Wrong size on CVarChangeListenerManager_AddStringCVarCallbackStatic");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, Name_0) == 0x000000, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::Name_0' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, ChangedCallback) == 0x000008, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::ChangedCallback' has a wrong offset!");
static_assert(offsetof(CVarChangeListenerManager_AddStringCVarCallbackStatic, CallbackImmediately) == 0x000018, "Member 'CVarChangeListenerManager_AddStringCVarCallbackStatic::CallbackImmediately' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequence
// 0x00A8 (0x00A8 - 0x0000)
struct EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 _skillEffectWithQTETimes;                          // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 _skillEffectNoQTETimes;                            // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 _explicitComboPromptTimes;                         // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 _comboSectionStartTimes;                           // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         _lastComboSectionEnd;                              // 0x0060(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _comboFailSectionStartTimes;                       // 0x0068(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 _comboFailSectionEndTimes;                         // 0x0078(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 _snapToTargetTimes;                                // 0x0088(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 _snapToSourceTimes;                                // 0x0098(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence) == 0x0000A8, "Wrong size on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _skillEffectWithQTETimes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_skillEffectWithQTETimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _skillEffectNoQTETimes) == 0x000030, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_skillEffectNoQTETimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _explicitComboPromptTimes) == 0x000040, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_explicitComboPromptTimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _comboSectionStartTimes) == 0x000050, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_comboSectionStartTimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _lastComboSectionEnd) == 0x000060, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_lastComboSectionEnd' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _comboFailSectionStartTimes) == 0x000068, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_comboFailSectionStartTimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _comboFailSectionEndTimes) == 0x000078, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_comboFailSectionEndTimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _snapToTargetTimes) == 0x000088, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_snapToTargetTimes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence, _snapToSourceTimes) == 0x000098, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence::_snapToSourceTimes' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequenceAsList
// 0x0038 (0x0038 - 0x0000)
struct EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattleSequenceKeyframe>        _keyframes;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         _trackIndex;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList) == 0x000038, "Wrong size on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList, _keyframes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList::_keyframes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList, _trackIndex) == 0x000030, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList::_trackIndex' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequenceAsListFromTrackName
// 0x0038 (0x0038 - 0x0000)
struct EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBattleSequenceKeyframe>        _keyframes;                                        // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   _trackName;                                        // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName) == 0x000038, "Wrong size on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName, _keyframes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName::_keyframes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName, _trackName) == 0x000030, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName::_trackName' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequenceAsMap
// 0x0078 (0x0078 - 0x0000)
struct EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, EBattleSequenceKeyframeType>      _keyframes;                                        // 0x0020(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         _trackIndex;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap) == 0x000078, "Wrong size on EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap, _keyframes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap::_keyframes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap, _trackIndex) == 0x000070, "Member 'EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap::_trackIndex' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindBattleCameraKeyframesInSequenceAsMap
// 0x0078 (0x0078 - 0x0000)
struct EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, EBattleSequenceCameraType>        _keyframes;                                        // 0x0020(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	int32                                         _trackIndex;                                       // 0x0070(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap) == 0x000078, "Wrong size on EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap, _keyframes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap::_keyframes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap, _trackIndex) == 0x000070, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap::_trackIndex' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindBattleCameraKeyframesInSequenceAsMapFromTrackName
// 0x0078 (0x0078 - 0x0000)
struct EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<float, EBattleSequenceCameraType>        _keyframes;                                        // 0x0020(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FName                                   _trackName;                                        // 0x0070(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName) == 0x000078, "Wrong size on EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName, _keyframes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName::_keyframes' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName, _trackName) == 0x000070, "Member 'EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName::_trackName' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindBattleKeyframesInSequence
// 0x0038 (0x0038 - 0x0000)
struct EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence final
{
public:
	EBattleSequenceKeyframeType                   _keyframeType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelSequence*                         _sequence;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0010(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 _times;                                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence) == 0x000038, "Wrong size on EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence, _keyframeType) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence::_keyframeType' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence, _sequence) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence, _actorBindingID) == 0x000010, "Member 'EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence, _times) == 0x000028, "Member 'EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence::_times' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.FindQTEKeyframes
// 0x0030 (0x0030 - 0x0000)
struct EpicCamerasFunctionLibrary_FindQTEKeyframes final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _actorBindingID;                                   // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 ImpactTimes;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_FindQTEKeyframes) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_FindQTEKeyframes");
static_assert(sizeof(EpicCamerasFunctionLibrary_FindQTEKeyframes) == 0x000030, "Wrong size on EpicCamerasFunctionLibrary_FindQTEKeyframes");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindQTEKeyframes, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_FindQTEKeyframes::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindQTEKeyframes, _actorBindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_FindQTEKeyframes::_actorBindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_FindQTEKeyframes, ImpactTimes) == 0x000020, "Member 'EpicCamerasFunctionLibrary_FindQTEKeyframes::ImpactTimes' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.GetCinematicTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct EpicCamerasFunctionLibrary_GetCinematicTimeDilation final
{
public:
	class UObject*                                _WorldContextObject;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicCamerasFunctionLibrary_GetCinematicTimeDilation) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_GetCinematicTimeDilation");
static_assert(sizeof(EpicCamerasFunctionLibrary_GetCinematicTimeDilation) == 0x000010, "Wrong size on EpicCamerasFunctionLibrary_GetCinematicTimeDilation");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetCinematicTimeDilation, _WorldContextObject) == 0x000000, "Member 'EpicCamerasFunctionLibrary_GetCinematicTimeDilation::_WorldContextObject' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetCinematicTimeDilation, ReturnValue) == 0x000008, "Member 'EpicCamerasFunctionLibrary_GetCinematicTimeDilation::ReturnValue' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.GetInitialActorPositionInSequence
// 0x0080 (0x0080 - 0x0000)
struct EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMovieSceneObjectBindingID             _bindingID;                                        // 0x0008(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReturnValue;                                       // 0x0020(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence) == 0x000010, "Wrong alignment on EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence");
static_assert(sizeof(EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence) == 0x000080, "Wrong size on EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence, _bindingID) == 0x000008, "Member 'EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence::_bindingID' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence, ReturnValue) == 0x000020, "Member 'EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence::ReturnValue' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.GetLinearTimeMapFromSequence
// 0x0058 (0x0058 - 0x0000)
struct EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence final
{
public:
	class ULevelSequence*                         _sequence;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, float>                            _linearTimeMap;                                    // 0x0008(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence");
static_assert(sizeof(EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence) == 0x000058, "Wrong size on EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence, _sequence) == 0x000000, "Member 'EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence::_sequence' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence, _linearTimeMap) == 0x000008, "Member 'EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence::_linearTimeMap' has a wrong offset!");

// Function SandFall.EpicCamerasFunctionLibrary.GetRealTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct EpicCamerasFunctionLibrary_GetRealTimeDilation final
{
public:
	class UObject*                                _WorldContextObject;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EpicCamerasFunctionLibrary_GetRealTimeDilation) == 0x000008, "Wrong alignment on EpicCamerasFunctionLibrary_GetRealTimeDilation");
static_assert(sizeof(EpicCamerasFunctionLibrary_GetRealTimeDilation) == 0x000010, "Wrong size on EpicCamerasFunctionLibrary_GetRealTimeDilation");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetRealTimeDilation, _WorldContextObject) == 0x000000, "Member 'EpicCamerasFunctionLibrary_GetRealTimeDilation::_WorldContextObject' has a wrong offset!");
static_assert(offsetof(EpicCamerasFunctionLibrary_GetRealTimeDilation, ReturnValue) == 0x000008, "Member 'EpicCamerasFunctionLibrary_GetRealTimeDilation::ReturnValue' has a wrong offset!");

// Function SandFall.VariableWatcher_bool.GetValue
// 0x0001 (0x0001 - 0x0000)
struct VariableWatcher_bool_GetValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VariableWatcher_bool_GetValue) == 0x000001, "Wrong alignment on VariableWatcher_bool_GetValue");
static_assert(sizeof(VariableWatcher_bool_GetValue) == 0x000001, "Wrong size on VariableWatcher_bool_GetValue");
static_assert(offsetof(VariableWatcher_bool_GetValue, ReturnValue) == 0x000000, "Member 'VariableWatcher_bool_GetValue::ReturnValue' has a wrong offset!");

// Function SandFall.VariableWatcher_bool.SetValue
// 0x0001 (0x0001 - 0x0000)
struct VariableWatcher_bool_SetValue final
{
public:
	bool                                          _newValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VariableWatcher_bool_SetValue) == 0x000001, "Wrong alignment on VariableWatcher_bool_SetValue");
static_assert(sizeof(VariableWatcher_bool_SetValue) == 0x000001, "Wrong size on VariableWatcher_bool_SetValue");
static_assert(offsetof(VariableWatcher_bool_SetValue, _newValue) == 0x000000, "Member 'VariableWatcher_bool_SetValue::_newValue' has a wrong offset!");

// Function SandFall.GlobalPostProcessActor.UpdatePostProcessSaturation
// 0x0008 (0x0008 - 0x0000)
struct GlobalPostProcessActor_UpdatePostProcessSaturation final
{
public:
	float                                         RGBMultiplier;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LuminanceMultiplier;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalPostProcessActor_UpdatePostProcessSaturation) == 0x000004, "Wrong alignment on GlobalPostProcessActor_UpdatePostProcessSaturation");
static_assert(sizeof(GlobalPostProcessActor_UpdatePostProcessSaturation) == 0x000008, "Wrong size on GlobalPostProcessActor_UpdatePostProcessSaturation");
static_assert(offsetof(GlobalPostProcessActor_UpdatePostProcessSaturation, RGBMultiplier) == 0x000000, "Member 'GlobalPostProcessActor_UpdatePostProcessSaturation::RGBMultiplier' has a wrong offset!");
static_assert(offsetof(GlobalPostProcessActor_UpdatePostProcessSaturation, LuminanceMultiplier) == 0x000004, "Member 'GlobalPostProcessActor_UpdatePostProcessSaturation::LuminanceMultiplier' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.AttemptToLoginTheUser
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_AttemptToLoginTheUser final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_AttemptToLoginTheUser) == 0x000001, "Wrong alignment on PlatformsSubsystem_AttemptToLoginTheUser");
static_assert(sizeof(PlatformsSubsystem_AttemptToLoginTheUser) == 0x000001, "Wrong size on PlatformsSubsystem_AttemptToLoginTheUser");
static_assert(offsetof(PlatformsSubsystem_AttemptToLoginTheUser, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_AttemptToLoginTheUser::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.BindToGameStartedFromActivity
// 0x0010 (0x0010 - 0x0000)
struct PlatformsSubsystem_BindToGameStartedFromActivity final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_BindToGameStartedFromActivity) == 0x000004, "Wrong alignment on PlatformsSubsystem_BindToGameStartedFromActivity");
static_assert(sizeof(PlatformsSubsystem_BindToGameStartedFromActivity) == 0x000010, "Wrong size on PlatformsSubsystem_BindToGameStartedFromActivity");
static_assert(offsetof(PlatformsSubsystem_BindToGameStartedFromActivity, Delegate) == 0x000000, "Member 'PlatformsSubsystem_BindToGameStartedFromActivity::Delegate' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.ClearAllCloudSaves
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_ClearAllCloudSaves final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_ClearAllCloudSaves) == 0x000001, "Wrong alignment on PlatformsSubsystem_ClearAllCloudSaves");
static_assert(sizeof(PlatformsSubsystem_ClearAllCloudSaves) == 0x000001, "Wrong size on PlatformsSubsystem_ClearAllCloudSaves");
static_assert(offsetof(PlatformsSubsystem_ClearAllCloudSaves, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_ClearAllCloudSaves::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.GetAchievementsFromCurrentWriteRequest
// 0x0050 (0x0050 - 0x0000)
struct PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest final
{
public:
	TMap<class FName, float>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest) == 0x000008, "Wrong alignment on PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest");
static_assert(sizeof(PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest) == 0x000050, "Wrong size on PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest");
static_assert(offsetof(PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.GetCurrentUserNickname
// 0x0010 (0x0010 - 0x0000)
struct PlatformsSubsystem_GetCurrentUserNickname final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_GetCurrentUserNickname) == 0x000008, "Wrong alignment on PlatformsSubsystem_GetCurrentUserNickname");
static_assert(sizeof(PlatformsSubsystem_GetCurrentUserNickname) == 0x000010, "Wrong size on PlatformsSubsystem_GetCurrentUserNickname");
static_assert(offsetof(PlatformsSubsystem_GetCurrentUserNickname, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_GetCurrentUserNickname::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.GetLatestGameSaveLoaded
// 0x0010 (0x0010 - 0x0000)
struct PlatformsSubsystem_GetLatestGameSaveLoaded final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_GetLatestGameSaveLoaded) == 0x000008, "Wrong alignment on PlatformsSubsystem_GetLatestGameSaveLoaded");
static_assert(sizeof(PlatformsSubsystem_GetLatestGameSaveLoaded) == 0x000010, "Wrong size on PlatformsSubsystem_GetLatestGameSaveLoaded");
static_assert(offsetof(PlatformsSubsystem_GetLatestGameSaveLoaded, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_GetLatestGameSaveLoaded::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.IsGameStartedFromActivity
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_IsGameStartedFromActivity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_IsGameStartedFromActivity) == 0x000001, "Wrong alignment on PlatformsSubsystem_IsGameStartedFromActivity");
static_assert(sizeof(PlatformsSubsystem_IsGameStartedFromActivity) == 0x000001, "Wrong size on PlatformsSubsystem_IsGameStartedFromActivity");
static_assert(offsetof(PlatformsSubsystem_IsGameStartedFromActivity, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_IsGameStartedFromActivity::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.OnExternalUIChange
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_OnExternalUIChange final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_OnExternalUIChange) == 0x000001, "Wrong alignment on PlatformsSubsystem_OnExternalUIChange");
static_assert(sizeof(PlatformsSubsystem_OnExternalUIChange) == 0x000001, "Wrong size on PlatformsSubsystem_OnExternalUIChange");
static_assert(offsetof(PlatformsSubsystem_OnExternalUIChange, Value) == 0x000000, "Member 'PlatformsSubsystem_OnExternalUIChange::Value' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.OnUserIsLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_OnUserIsLoggedIn final
{
public:
	bool                                          bIsUserLoggedIn;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_OnUserIsLoggedIn) == 0x000001, "Wrong alignment on PlatformsSubsystem_OnUserIsLoggedIn");
static_assert(sizeof(PlatformsSubsystem_OnUserIsLoggedIn) == 0x000001, "Wrong size on PlatformsSubsystem_OnUserIsLoggedIn");
static_assert(offsetof(PlatformsSubsystem_OnUserIsLoggedIn, bIsUserLoggedIn) == 0x000000, "Member 'PlatformsSubsystem_OnUserIsLoggedIn::bIsUserLoggedIn' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.OnUserIsSelected
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_OnUserIsSelected final
{
public:
	bool                                          bIsSellectedUserLoggedIn;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_OnUserIsSelected) == 0x000001, "Wrong alignment on PlatformsSubsystem_OnUserIsSelected");
static_assert(sizeof(PlatformsSubsystem_OnUserIsSelected) == 0x000001, "Wrong size on PlatformsSubsystem_OnUserIsSelected");
static_assert(offsetof(PlatformsSubsystem_OnUserIsSelected, bIsSellectedUserLoggedIn) == 0x000000, "Member 'PlatformsSubsystem_OnUserIsSelected::bIsSellectedUserLoggedIn' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.RegisterLatestGameSaveLoaded
// 0x0010 (0x0010 - 0x0000)
struct PlatformsSubsystem_RegisterLatestGameSaveLoaded final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_RegisterLatestGameSaveLoaded) == 0x000008, "Wrong alignment on PlatformsSubsystem_RegisterLatestGameSaveLoaded");
static_assert(sizeof(PlatformsSubsystem_RegisterLatestGameSaveLoaded) == 0x000010, "Wrong size on PlatformsSubsystem_RegisterLatestGameSaveLoaded");
static_assert(offsetof(PlatformsSubsystem_RegisterLatestGameSaveLoaded, SaveName) == 0x000000, "Member 'PlatformsSubsystem_RegisterLatestGameSaveLoaded::SaveName' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.ResetAllAchievements
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_ResetAllAchievements final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_ResetAllAchievements) == 0x000001, "Wrong alignment on PlatformsSubsystem_ResetAllAchievements");
static_assert(sizeof(PlatformsSubsystem_ResetAllAchievements) == 0x000001, "Wrong size on PlatformsSubsystem_ResetAllAchievements");
static_assert(offsetof(PlatformsSubsystem_ResetAllAchievements, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_ResetAllAchievements::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.SetActivityStatus
// 0x0018 (0x0018 - 0x0000)
struct PlatformsSubsystem_SetActivityStatus final
{
public:
	class FString                                 ActivityID;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EActivityStatus                               AcitivityStatus;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformsSubsystem_SetActivityStatus) == 0x000008, "Wrong alignment on PlatformsSubsystem_SetActivityStatus");
static_assert(sizeof(PlatformsSubsystem_SetActivityStatus) == 0x000018, "Wrong size on PlatformsSubsystem_SetActivityStatus");
static_assert(offsetof(PlatformsSubsystem_SetActivityStatus, ActivityID) == 0x000000, "Member 'PlatformsSubsystem_SetActivityStatus::ActivityID' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_SetActivityStatus, AcitivityStatus) == 0x000010, "Member 'PlatformsSubsystem_SetActivityStatus::AcitivityStatus' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.SetPS5ControllerLightColor
// 0x0008 (0x0008 - 0x0000)
struct PlatformsSubsystem_SetPS5ControllerLightColor final
{
public:
	struct FColor                                 Color;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enable;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformsSubsystem_SetPS5ControllerLightColor) == 0x000004, "Wrong alignment on PlatformsSubsystem_SetPS5ControllerLightColor");
static_assert(sizeof(PlatformsSubsystem_SetPS5ControllerLightColor) == 0x000008, "Wrong size on PlatformsSubsystem_SetPS5ControllerLightColor");
static_assert(offsetof(PlatformsSubsystem_SetPS5ControllerLightColor, Color) == 0x000000, "Member 'PlatformsSubsystem_SetPS5ControllerLightColor::Color' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_SetPS5ControllerLightColor, Enable) == 0x000004, "Member 'PlatformsSubsystem_SetPS5ControllerLightColor::Enable' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.SetRichPresence
// 0x0010 (0x0010 - 0x0000)
struct PlatformsSubsystem_SetRichPresence final
{
public:
	class FString                                 InRichPresenceStatus;                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_SetRichPresence) == 0x000008, "Wrong alignment on PlatformsSubsystem_SetRichPresence");
static_assert(sizeof(PlatformsSubsystem_SetRichPresence) == 0x000010, "Wrong size on PlatformsSubsystem_SetRichPresence");
static_assert(offsetof(PlatformsSubsystem_SetRichPresence, InRichPresenceStatus) == 0x000000, "Member 'PlatformsSubsystem_SetRichPresence::InRichPresenceStatus' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.TriggerAchievement
// 0x0018 (0x0018 - 0x0000)
struct PlatformsSubsystem_TriggerAchievement final
{
public:
	TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)> TriggeredDelegate; // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ID;                                                // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_TriggerAchievement) == 0x000004, "Wrong alignment on PlatformsSubsystem_TriggerAchievement");
static_assert(sizeof(PlatformsSubsystem_TriggerAchievement) == 0x000018, "Wrong size on PlatformsSubsystem_TriggerAchievement");
static_assert(offsetof(PlatformsSubsystem_TriggerAchievement, TriggeredDelegate) == 0x000000, "Member 'PlatformsSubsystem_TriggerAchievement::TriggeredDelegate' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_TriggerAchievement, ID) == 0x000010, "Member 'PlatformsSubsystem_TriggerAchievement::ID' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.TriggerMultipleAchievements
// 0x0060 (0x0060 - 0x0000)
struct PlatformsSubsystem_TriggerMultipleAchievements final
{
public:
	TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)> TriggeredDelegate; // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      AchievementsMap;                                   // 0x0010(0x0050)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_TriggerMultipleAchievements) == 0x000008, "Wrong alignment on PlatformsSubsystem_TriggerMultipleAchievements");
static_assert(sizeof(PlatformsSubsystem_TriggerMultipleAchievements) == 0x000060, "Wrong size on PlatformsSubsystem_TriggerMultipleAchievements");
static_assert(offsetof(PlatformsSubsystem_TriggerMultipleAchievements, TriggeredDelegate) == 0x000000, "Member 'PlatformsSubsystem_TriggerMultipleAchievements::TriggeredDelegate' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_TriggerMultipleAchievements, AchievementsMap) == 0x000010, "Member 'PlatformsSubsystem_TriggerMultipleAchievements::AchievementsMap' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.ComputeSaveNameWithPath
// 0x0020 (0x0020 - 0x0000)
struct PlatformsSubsystem_ComputeSaveNameWithPath final
{
public:
	class FString                                 SaveName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_ComputeSaveNameWithPath) == 0x000008, "Wrong alignment on PlatformsSubsystem_ComputeSaveNameWithPath");
static_assert(sizeof(PlatformsSubsystem_ComputeSaveNameWithPath) == 0x000020, "Wrong size on PlatformsSubsystem_ComputeSaveNameWithPath");
static_assert(offsetof(PlatformsSubsystem_ComputeSaveNameWithPath, SaveName) == 0x000000, "Member 'PlatformsSubsystem_ComputeSaveNameWithPath::SaveName' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_ComputeSaveNameWithPath, ReturnValue) == 0x000010, "Member 'PlatformsSubsystem_ComputeSaveNameWithPath::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.GetCurrentUserID
// 0x0010 (0x0010 - 0x0000)
struct PlatformsSubsystem_GetCurrentUserID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_GetCurrentUserID) == 0x000008, "Wrong alignment on PlatformsSubsystem_GetCurrentUserID");
static_assert(sizeof(PlatformsSubsystem_GetCurrentUserID) == 0x000010, "Wrong size on PlatformsSubsystem_GetCurrentUserID");
static_assert(offsetof(PlatformsSubsystem_GetCurrentUserID, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_GetCurrentUserID::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.GetStoreNameAsTag
// 0x0008 (0x0008 - 0x0000)
struct PlatformsSubsystem_GetStoreNameAsTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_GetStoreNameAsTag) == 0x000004, "Wrong alignment on PlatformsSubsystem_GetStoreNameAsTag");
static_assert(sizeof(PlatformsSubsystem_GetStoreNameAsTag) == 0x000008, "Wrong size on PlatformsSubsystem_GetStoreNameAsTag");
static_assert(offsetof(PlatformsSubsystem_GetStoreNameAsTag, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_GetStoreNameAsTag::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.HasAllEntitlements
// 0x0018 (0x0018 - 0x0000)
struct PlatformsSubsystem_HasAllEntitlements final
{
public:
	TArray<class FName>                           Entitlements;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformsSubsystem_HasAllEntitlements) == 0x000008, "Wrong alignment on PlatformsSubsystem_HasAllEntitlements");
static_assert(sizeof(PlatformsSubsystem_HasAllEntitlements) == 0x000018, "Wrong size on PlatformsSubsystem_HasAllEntitlements");
static_assert(offsetof(PlatformsSubsystem_HasAllEntitlements, Entitlements) == 0x000000, "Member 'PlatformsSubsystem_HasAllEntitlements::Entitlements' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_HasAllEntitlements, ReturnValue) == 0x000010, "Member 'PlatformsSubsystem_HasAllEntitlements::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.HasAnyEntitlement
// 0x0018 (0x0018 - 0x0000)
struct PlatformsSubsystem_HasAnyEntitlement final
{
public:
	TArray<class FName>                           Entitlements;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformsSubsystem_HasAnyEntitlement) == 0x000008, "Wrong alignment on PlatformsSubsystem_HasAnyEntitlement");
static_assert(sizeof(PlatformsSubsystem_HasAnyEntitlement) == 0x000018, "Wrong size on PlatformsSubsystem_HasAnyEntitlement");
static_assert(offsetof(PlatformsSubsystem_HasAnyEntitlement, Entitlements) == 0x000000, "Member 'PlatformsSubsystem_HasAnyEntitlement::Entitlements' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_HasAnyEntitlement, ReturnValue) == 0x000010, "Member 'PlatformsSubsystem_HasAnyEntitlement::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.IsChunkInstalled
// 0x0008 (0x0008 - 0x0000)
struct PlatformsSubsystem_IsChunkInstalled final
{
public:
	int32                                         ChunkId;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlatformsSubsystem_IsChunkInstalled) == 0x000004, "Wrong alignment on PlatformsSubsystem_IsChunkInstalled");
static_assert(sizeof(PlatformsSubsystem_IsChunkInstalled) == 0x000008, "Wrong size on PlatformsSubsystem_IsChunkInstalled");
static_assert(offsetof(PlatformsSubsystem_IsChunkInstalled, ChunkId) == 0x000000, "Member 'PlatformsSubsystem_IsChunkInstalled::ChunkId' has a wrong offset!");
static_assert(offsetof(PlatformsSubsystem_IsChunkInstalled, ReturnValue) == 0x000004, "Member 'PlatformsSubsystem_IsChunkInstalled::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.IsUserLoggedIn
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_IsUserLoggedIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_IsUserLoggedIn) == 0x000001, "Wrong alignment on PlatformsSubsystem_IsUserLoggedIn");
static_assert(sizeof(PlatformsSubsystem_IsUserLoggedIn) == 0x000001, "Wrong size on PlatformsSubsystem_IsUserLoggedIn");
static_assert(offsetof(PlatformsSubsystem_IsUserLoggedIn, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_IsUserLoggedIn::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.IsUsingCloudSave
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_IsUsingCloudSave final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_IsUsingCloudSave) == 0x000001, "Wrong alignment on PlatformsSubsystem_IsUsingCloudSave");
static_assert(sizeof(PlatformsSubsystem_IsUsingCloudSave) == 0x000001, "Wrong size on PlatformsSubsystem_IsUsingCloudSave");
static_assert(offsetof(PlatformsSubsystem_IsUsingCloudSave, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_IsUsingCloudSave::ReturnValue' has a wrong offset!");

// Function SandFall.PlatformsSubsystem.IsUsingSteam
// 0x0001 (0x0001 - 0x0000)
struct PlatformsSubsystem_IsUsingSteam final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlatformsSubsystem_IsUsingSteam) == 0x000001, "Wrong alignment on PlatformsSubsystem_IsUsingSteam");
static_assert(sizeof(PlatformsSubsystem_IsUsingSteam) == 0x000001, "Wrong size on PlatformsSubsystem_IsUsingSteam");
static_assert(offsetof(PlatformsSubsystem_IsUsingSteam, ReturnValue) == 0x000000, "Member 'PlatformsSubsystem_IsUsingSteam::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ActivityWrapper.GetActivityID
// 0x0010 (0x0010 - 0x0000)
struct SF_ActivityWrapper_GetActivityID final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ActivityWrapper_GetActivityID) == 0x000008, "Wrong alignment on SF_ActivityWrapper_GetActivityID");
static_assert(sizeof(SF_ActivityWrapper_GetActivityID) == 0x000010, "Wrong size on SF_ActivityWrapper_GetActivityID");
static_assert(offsetof(SF_ActivityWrapper_GetActivityID, ReturnValue) == 0x000000, "Member 'SF_ActivityWrapper_GetActivityID::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ActivityWrapper.GetAllTasks
// 0x0010 (0x0010 - 0x0000)
struct SF_ActivityWrapper_GetAllTasks final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ActivityWrapper_GetAllTasks) == 0x000008, "Wrong alignment on SF_ActivityWrapper_GetAllTasks");
static_assert(sizeof(SF_ActivityWrapper_GetAllTasks) == 0x000010, "Wrong size on SF_ActivityWrapper_GetAllTasks");
static_assert(offsetof(SF_ActivityWrapper_GetAllTasks, ReturnValue) == 0x000000, "Member 'SF_ActivityWrapper_GetAllTasks::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ActivityWrapper.GetSubTaskID
// 0x0018 (0x0018 - 0x0000)
struct SF_ActivityWrapper_GetSubTaskID final
{
public:
	class FName                                   TaskName;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ActivityWrapper_GetSubTaskID) == 0x000008, "Wrong alignment on SF_ActivityWrapper_GetSubTaskID");
static_assert(sizeof(SF_ActivityWrapper_GetSubTaskID) == 0x000018, "Wrong size on SF_ActivityWrapper_GetSubTaskID");
static_assert(offsetof(SF_ActivityWrapper_GetSubTaskID, TaskName) == 0x000000, "Member 'SF_ActivityWrapper_GetSubTaskID::TaskName' has a wrong offset!");
static_assert(offsetof(SF_ActivityWrapper_GetSubTaskID, ReturnValue) == 0x000008, "Member 'SF_ActivityWrapper_GetSubTaskID::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ActivityWrapper.IsMappedToActivity
// 0x000C (0x000C - 0x0000)
struct SF_ActivityWrapper_IsMappedToActivity final
{
public:
	class FName                                   QuestID;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_ActivityWrapper_IsMappedToActivity) == 0x000004, "Wrong alignment on SF_ActivityWrapper_IsMappedToActivity");
static_assert(sizeof(SF_ActivityWrapper_IsMappedToActivity) == 0x00000C, "Wrong size on SF_ActivityWrapper_IsMappedToActivity");
static_assert(offsetof(SF_ActivityWrapper_IsMappedToActivity, QuestID) == 0x000000, "Member 'SF_ActivityWrapper_IsMappedToActivity::QuestID' has a wrong offset!");
static_assert(offsetof(SF_ActivityWrapper_IsMappedToActivity, ReturnValue) == 0x000008, "Member 'SF_ActivityWrapper_IsMappedToActivity::ReturnValue' has a wrong offset!");

// Function SandFall.ActorComoponentHelpers.ChangeOwner
// 0x0018 (0x0018 - 0x0000)
struct ActorComoponentHelpers_ChangeOwner final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewOwner;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComoponentHelpers_ChangeOwner) == 0x000008, "Wrong alignment on ActorComoponentHelpers_ChangeOwner");
static_assert(sizeof(ActorComoponentHelpers_ChangeOwner) == 0x000018, "Wrong size on ActorComoponentHelpers_ChangeOwner");
static_assert(offsetof(ActorComoponentHelpers_ChangeOwner, Component) == 0x000000, "Member 'ActorComoponentHelpers_ChangeOwner::Component' has a wrong offset!");
static_assert(offsetof(ActorComoponentHelpers_ChangeOwner, NewOwner) == 0x000008, "Member 'ActorComoponentHelpers_ChangeOwner::NewOwner' has a wrong offset!");
static_assert(offsetof(ActorComoponentHelpers_ChangeOwner, ReturnValue) == 0x000010, "Member 'ActorComoponentHelpers_ChangeOwner::ReturnValue' has a wrong offset!");

// Function SandFall.ActorComoponentHelpers.DestroyComponentExternally
// 0x0008 (0x0008 - 0x0000)
struct ActorComoponentHelpers_DestroyComponentExternally final
{
public:
	class UActorComponent*                        ComponentToDestroy;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComoponentHelpers_DestroyComponentExternally) == 0x000008, "Wrong alignment on ActorComoponentHelpers_DestroyComponentExternally");
static_assert(sizeof(ActorComoponentHelpers_DestroyComponentExternally) == 0x000008, "Wrong size on ActorComoponentHelpers_DestroyComponentExternally");
static_assert(offsetof(ActorComoponentHelpers_DestroyComponentExternally, ComponentToDestroy) == 0x000000, "Member 'ActorComoponentHelpers_DestroyComponentExternally::ComponentToDestroy' has a wrong offset!");

// Function SandFall.ActorComoponentHelpers.HasComponentBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct ActorComoponentHelpers_HasComponentBegunPlay final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComoponentHelpers_HasComponentBegunPlay) == 0x000008, "Wrong alignment on ActorComoponentHelpers_HasComponentBegunPlay");
static_assert(sizeof(ActorComoponentHelpers_HasComponentBegunPlay) == 0x000010, "Wrong size on ActorComoponentHelpers_HasComponentBegunPlay");
static_assert(offsetof(ActorComoponentHelpers_HasComponentBegunPlay, Component) == 0x000000, "Member 'ActorComoponentHelpers_HasComponentBegunPlay::Component' has a wrong offset!");
static_assert(offsetof(ActorComoponentHelpers_HasComponentBegunPlay, ReturnValue) == 0x000008, "Member 'ActorComoponentHelpers_HasComponentBegunPlay::ReturnValue' has a wrong offset!");

// Function SandFall.ActorSpawnWatcherInterface.OnInstigatedActorSpawned
// 0x0010 (0x0010 - 0x0000)
struct ActorSpawnWatcherInterface_OnInstigatedActorSpawned final
{
public:
	class AActor*                                 SpawnedActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorSpawnWatcherInterface_OnInstigatedActorSpawned) == 0x000008, "Wrong alignment on ActorSpawnWatcherInterface_OnInstigatedActorSpawned");
static_assert(sizeof(ActorSpawnWatcherInterface_OnInstigatedActorSpawned) == 0x000010, "Wrong size on ActorSpawnWatcherInterface_OnInstigatedActorSpawned");
static_assert(offsetof(ActorSpawnWatcherInterface_OnInstigatedActorSpawned, SpawnedActor) == 0x000000, "Member 'ActorSpawnWatcherInterface_OnInstigatedActorSpawned::SpawnedActor' has a wrong offset!");
static_assert(offsetof(ActorSpawnWatcherInterface_OnInstigatedActorSpawned, ReturnValue) == 0x000008, "Member 'ActorSpawnWatcherInterface_OnInstigatedActorSpawned::ReturnValue' has a wrong offset!");

// Function SandFall.AIHelpers.PauseLogic
// 0x0018 (0x0018 - 0x0000)
struct AIHelpers_PauseLogic final
{
public:
	class UBrainComponent*                        BrainComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugReason;                                       // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHelpers_PauseLogic) == 0x000008, "Wrong alignment on AIHelpers_PauseLogic");
static_assert(sizeof(AIHelpers_PauseLogic) == 0x000018, "Wrong size on AIHelpers_PauseLogic");
static_assert(offsetof(AIHelpers_PauseLogic, BrainComponent) == 0x000000, "Member 'AIHelpers_PauseLogic::BrainComponent' has a wrong offset!");
static_assert(offsetof(AIHelpers_PauseLogic, DebugReason) == 0x000008, "Member 'AIHelpers_PauseLogic::DebugReason' has a wrong offset!");

// Function SandFall.AIHelpers.ResumeLogic
// 0x0018 (0x0018 - 0x0000)
struct AIHelpers_ResumeLogic final
{
public:
	class UBrainComponent*                        BrainComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHelpers_ResumeLogic) == 0x000008, "Wrong alignment on AIHelpers_ResumeLogic");
static_assert(sizeof(AIHelpers_ResumeLogic) == 0x000018, "Wrong size on AIHelpers_ResumeLogic");
static_assert(offsetof(AIHelpers_ResumeLogic, BrainComponent) == 0x000000, "Member 'AIHelpers_ResumeLogic::BrainComponent' has a wrong offset!");
static_assert(offsetof(AIHelpers_ResumeLogic, Reason) == 0x000008, "Member 'AIHelpers_ResumeLogic::Reason' has a wrong offset!");

// Function SandFall.SF_AnimationBlueprintHelpers.GetAllActiveMontages
// 0x0018 (0x0018 - 0x0000)
struct SF_AnimationBlueprintHelpers_GetAllActiveMontages final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAnimMontage*>                   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_AnimationBlueprintHelpers_GetAllActiveMontages) == 0x000008, "Wrong alignment on SF_AnimationBlueprintHelpers_GetAllActiveMontages");
static_assert(sizeof(SF_AnimationBlueprintHelpers_GetAllActiveMontages) == 0x000018, "Wrong size on SF_AnimationBlueprintHelpers_GetAllActiveMontages");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAllActiveMontages, AnimInstance) == 0x000000, "Member 'SF_AnimationBlueprintHelpers_GetAllActiveMontages::AnimInstance' has a wrong offset!");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAllActiveMontages, ReturnValue) == 0x000008, "Member 'SF_AnimationBlueprintHelpers_GetAllActiveMontages::ReturnValue' has a wrong offset!");

// Function SandFall.SF_AnimationBlueprintHelpers.GetAnimDataModelBoneTrackData
// 0x0048 (0x0048 - 0x0000)
struct SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData final
{
public:
	TScriptInterface<class IAnimationDataModel>   DataModel;                                         // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TrackName;                                         // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PositionKeys;                                      // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FQuat>                          RotationKeys;                                      // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        ScalingKeys;                                       // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData) == 0x000008, "Wrong alignment on SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData");
static_assert(sizeof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData) == 0x000048, "Wrong size on SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData, DataModel) == 0x000000, "Member 'SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData::DataModel' has a wrong offset!");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData, TrackName) == 0x000010, "Member 'SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData::TrackName' has a wrong offset!");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData, PositionKeys) == 0x000018, "Member 'SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData::PositionKeys' has a wrong offset!");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData, RotationKeys) == 0x000028, "Member 'SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData::RotationKeys' has a wrong offset!");
static_assert(offsetof(SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData, ScalingKeys) == 0x000038, "Member 'SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData::ScalingKeys' has a wrong offset!");

// Function SandFall.SF_AsyncActionDeleteSaveGame.AsyncDeleteGameFromSlot
// 0x0028 (0x0028 - 0x0000)
struct SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SlotName;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USF_AsyncActionDeleteSaveGame*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot) == 0x000008, "Wrong alignment on SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot");
static_assert(sizeof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot) == 0x000028, "Wrong size on SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot, WorldContextObject) == 0x000000, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot, SlotName) == 0x000008, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot::SlotName' has a wrong offset!");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot, UserIndex) == 0x000018, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot::UserIndex' has a wrong offset!");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot, ReturnValue) == 0x000020, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot::ReturnValue' has a wrong offset!");

// Function SandFall.SF_AsyncActionDeleteSaveGame.AsyncDeleteGamesFromSlot
// 0x0028 (0x0028 - 0x0000)
struct SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         SlotNames;                                         // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         UserIndex;                                         // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USF_AsyncActionDeleteSaveGame*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot) == 0x000008, "Wrong alignment on SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot");
static_assert(sizeof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot) == 0x000028, "Wrong size on SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot, WorldContextObject) == 0x000000, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot, SlotNames) == 0x000008, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot::SlotNames' has a wrong offset!");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot, UserIndex) == 0x000018, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot::UserIndex' has a wrong offset!");
static_assert(offsetof(SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot, ReturnValue) == 0x000020, "Member 'SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot::ReturnValue' has a wrong offset!");

// Function SandFall.BakedActors.BakeActors
// 0x0001 (0x0001 - 0x0000)
struct BakedActors_BakeActors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BakedActors_BakeActors) == 0x000001, "Wrong alignment on BakedActors_BakeActors");
static_assert(sizeof(BakedActors_BakeActors) == 0x000001, "Wrong size on BakedActors_BakeActors");
static_assert(offsetof(BakedActors_BakeActors, ReturnValue) == 0x000000, "Member 'BakedActors_BakeActors::ReturnValue' has a wrong offset!");

// Function SandFall.BakedActors.GetActorClassToSpawn
// 0x0008 (0x0008 - 0x0000)
struct BakedActors_GetActorClassToSpawn final
{
public:
	TSubclassOf<class AActor>                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BakedActors_GetActorClassToSpawn) == 0x000008, "Wrong alignment on BakedActors_GetActorClassToSpawn");
static_assert(sizeof(BakedActors_GetActorClassToSpawn) == 0x000008, "Wrong size on BakedActors_GetActorClassToSpawn");
static_assert(offsetof(BakedActors_GetActorClassToSpawn, ReturnValue) == 0x000000, "Member 'BakedActors_GetActorClassToSpawn::ReturnValue' has a wrong offset!");

// Function SandFall.BakedActors.GetBakedActorsFolderName
// 0x0010 (0x0010 - 0x0000)
struct BakedActors_GetBakedActorsFolderName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BakedActors_GetBakedActorsFolderName) == 0x000008, "Wrong alignment on BakedActors_GetBakedActorsFolderName");
static_assert(sizeof(BakedActors_GetBakedActorsFolderName) == 0x000010, "Wrong size on BakedActors_GetBakedActorsFolderName");
static_assert(offsetof(BakedActors_GetBakedActorsFolderName, ReturnValue) == 0x000000, "Member 'BakedActors_GetBakedActorsFolderName::ReturnValue' has a wrong offset!");

// Function SandFall.BakedActors.GetBakedActorTransforms
// 0x0010 (0x0010 - 0x0000)
struct BakedActors_GetBakedActorTransforms final
{
public:
	TArray<struct FTransform>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BakedActors_GetBakedActorTransforms) == 0x000008, "Wrong alignment on BakedActors_GetBakedActorTransforms");
static_assert(sizeof(BakedActors_GetBakedActorTransforms) == 0x000010, "Wrong size on BakedActors_GetBakedActorTransforms");
static_assert(offsetof(BakedActors_GetBakedActorTransforms, ReturnValue) == 0x000000, "Member 'BakedActors_GetBakedActorTransforms::ReturnValue' has a wrong offset!");

// Function SandFall.BakedActors.HasAnyBakedActor
// 0x0001 (0x0001 - 0x0000)
struct BakedActors_HasAnyBakedActor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BakedActors_HasAnyBakedActor) == 0x000001, "Wrong alignment on BakedActors_HasAnyBakedActor");
static_assert(sizeof(BakedActors_HasAnyBakedActor) == 0x000001, "Wrong size on BakedActors_HasAnyBakedActor");
static_assert(offsetof(BakedActors_HasAnyBakedActor, ReturnValue) == 0x000000, "Member 'BakedActors_HasAnyBakedActor::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Array_Remap
// 0x0070 (0x0070 - 0x0000)
struct SandfallBlueprintHelpers_Array_Remap final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RemapTable;                                        // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 ResultArray;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_Array_Remap) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Array_Remap");
static_assert(sizeof(SandfallBlueprintHelpers_Array_Remap) == 0x000070, "Wrong size on SandfallBlueprintHelpers_Array_Remap");
static_assert(offsetof(SandfallBlueprintHelpers_Array_Remap, TargetArray) == 0x000000, "Member 'SandfallBlueprintHelpers_Array_Remap::TargetArray' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Array_Remap, RemapTable) == 0x000010, "Member 'SandfallBlueprintHelpers_Array_Remap::RemapTable' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Array_Remap, ResultArray) == 0x000060, "Member 'SandfallBlueprintHelpers_Array_Remap::ResultArray' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Assert
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_Assert final
{
public:
	bool                                          _check;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _message;                                          // 0x0008(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          _breakpoint;                                       // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Assert) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Assert");
static_assert(sizeof(SandfallBlueprintHelpers_Assert) == 0x000020, "Wrong size on SandfallBlueprintHelpers_Assert");
static_assert(offsetof(SandfallBlueprintHelpers_Assert, _check) == 0x000000, "Member 'SandfallBlueprintHelpers_Assert::_check' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Assert, _message) == 0x000008, "Member 'SandfallBlueprintHelpers_Assert::_message' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Assert, _breakpoint) == 0x000018, "Member 'SandfallBlueprintHelpers_Assert::_breakpoint' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.AssertMessage
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_AssertMessage final
{
public:
	class FString                                 _message;                                          // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _breakpoint;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_AssertMessage) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_AssertMessage");
static_assert(sizeof(SandfallBlueprintHelpers_AssertMessage) == 0x000018, "Wrong size on SandfallBlueprintHelpers_AssertMessage");
static_assert(offsetof(SandfallBlueprintHelpers_AssertMessage, _message) == 0x000000, "Member 'SandfallBlueprintHelpers_AssertMessage::_message' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_AssertMessage, _breakpoint) == 0x000010, "Member 'SandfallBlueprintHelpers_AssertMessage::_breakpoint' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.BeginDeferredActorSpawnFromClass
// 0x0090 (0x0090 - 0x0000)
struct SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorCollisionHandlingMethod            CollisionHandlingOverride;                         // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Owner;                                             // 0x0078(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorScaleMethod                        TransformScaleMethod;                              // 0x0080(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0088(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass) == 0x000010, "Wrong alignment on SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass");
static_assert(sizeof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass) == 0x000090, "Wrong size on SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, ActorClass) == 0x000008, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::ActorClass' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, SpawnTransform) == 0x000010, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::SpawnTransform' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, CollisionHandlingOverride) == 0x000070, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::CollisionHandlingOverride' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, Owner) == 0x000078, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::Owner' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, TransformScaleMethod) == 0x000080, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::TransformScaleMethod' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass, ReturnValue) == 0x000088, "Member 'SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.BlockTillLevelStreamingCompleted
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted");
static_assert(sizeof(SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted) == 0x000008, "Wrong size on SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted");
static_assert(offsetof(SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted::WorldContextObject' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.CallFunctionByName
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_CallFunctionByName final
{
public:
	class UObject*                                _object;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _functionName;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _IsFailed;                                         // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_CallFunctionByName) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_CallFunctionByName");
static_assert(sizeof(SandfallBlueprintHelpers_CallFunctionByName) == 0x000020, "Wrong size on SandfallBlueprintHelpers_CallFunctionByName");
static_assert(offsetof(SandfallBlueprintHelpers_CallFunctionByName, _object) == 0x000000, "Member 'SandfallBlueprintHelpers_CallFunctionByName::_object' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CallFunctionByName, _functionName) == 0x000008, "Member 'SandfallBlueprintHelpers_CallFunctionByName::_functionName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CallFunctionByName, _IsFailed) == 0x000018, "Member 'SandfallBlueprintHelpers_CallFunctionByName::_IsFailed' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.CancelLatentActions
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_CancelLatentActions final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Object;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_CancelLatentActions) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_CancelLatentActions");
static_assert(sizeof(SandfallBlueprintHelpers_CancelLatentActions) == 0x000010, "Wrong size on SandfallBlueprintHelpers_CancelLatentActions");
static_assert(offsetof(SandfallBlueprintHelpers_CancelLatentActions, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_CancelLatentActions::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CancelLatentActions, Object) == 0x000008, "Member 'SandfallBlueprintHelpers_CancelLatentActions::Object' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.CheckEntitlement
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_CheckEntitlement final
{
public:
	class UWorld*                                 _worldContext;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_CheckEntitlement) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_CheckEntitlement");
static_assert(sizeof(SandfallBlueprintHelpers_CheckEntitlement) == 0x000010, "Wrong size on SandfallBlueprintHelpers_CheckEntitlement");
static_assert(offsetof(SandfallBlueprintHelpers_CheckEntitlement, _worldContext) == 0x000000, "Member 'SandfallBlueprintHelpers_CheckEntitlement::_worldContext' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CheckEntitlement, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_CheckEntitlement::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.CompareStrings
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_CompareStrings final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_CompareStrings) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_CompareStrings");
static_assert(sizeof(SandfallBlueprintHelpers_CompareStrings) == 0x000028, "Wrong size on SandfallBlueprintHelpers_CompareStrings");
static_assert(offsetof(SandfallBlueprintHelpers_CompareStrings, A) == 0x000000, "Member 'SandfallBlueprintHelpers_CompareStrings::A' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CompareStrings, B) == 0x000010, "Member 'SandfallBlueprintHelpers_CompareStrings::B' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CompareStrings, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_CompareStrings::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.ConvertSoftRefToWorldSoftRef
// 0x0050 (0x0050 - 0x0000)
struct SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef final
{
public:
	TSoftObjectPtr<class UObject>                 _InObject;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  _OutWorldSoftRef;                                  // 0x0028(0x0028)(Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef");
static_assert(sizeof(SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef) == 0x000050, "Wrong size on SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef");
static_assert(offsetof(SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef, _InObject) == 0x000000, "Member 'SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef::_InObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef, _OutWorldSoftRef) == 0x000028, "Member 'SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef::_OutWorldSoftRef' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.CopyAllProperties
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_CopyAllProperties final
{
public:
	class UObject*                                FromObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ToObject;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeComponents;                                // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_CopyAllProperties) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_CopyAllProperties");
static_assert(sizeof(SandfallBlueprintHelpers_CopyAllProperties) == 0x000018, "Wrong size on SandfallBlueprintHelpers_CopyAllProperties");
static_assert(offsetof(SandfallBlueprintHelpers_CopyAllProperties, FromObject) == 0x000000, "Member 'SandfallBlueprintHelpers_CopyAllProperties::FromObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CopyAllProperties, ToObject) == 0x000008, "Member 'SandfallBlueprintHelpers_CopyAllProperties::ToObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_CopyAllProperties, bIncludeComponents) == 0x000010, "Member 'SandfallBlueprintHelpers_CopyAllProperties::bIncludeComponents' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.DebugConstructFromClass
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_DebugConstructFromClass final
{
public:
	class UClass*                                 _class;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                _owner;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_DebugConstructFromClass) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_DebugConstructFromClass");
static_assert(sizeof(SandfallBlueprintHelpers_DebugConstructFromClass) == 0x000018, "Wrong size on SandfallBlueprintHelpers_DebugConstructFromClass");
static_assert(offsetof(SandfallBlueprintHelpers_DebugConstructFromClass, _class) == 0x000000, "Member 'SandfallBlueprintHelpers_DebugConstructFromClass::_class' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DebugConstructFromClass, _owner) == 0x000008, "Member 'SandfallBlueprintHelpers_DebugConstructFromClass::_owner' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DebugConstructFromClass, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_DebugConstructFromClass::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.DebugFindClassByName
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_DebugFindClassByName final
{
public:
	class FString                                 _className;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_DebugFindClassByName) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_DebugFindClassByName");
static_assert(sizeof(SandfallBlueprintHelpers_DebugFindClassByName) == 0x000018, "Wrong size on SandfallBlueprintHelpers_DebugFindClassByName");
static_assert(offsetof(SandfallBlueprintHelpers_DebugFindClassByName, _className) == 0x000000, "Member 'SandfallBlueprintHelpers_DebugFindClassByName::_className' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DebugFindClassByName, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_DebugFindClassByName::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.DebugMe
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_DebugMe final
{
public:
	class UObject*                                _objectToDebug;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_DebugMe) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_DebugMe");
static_assert(sizeof(SandfallBlueprintHelpers_DebugMe) == 0x000008, "Wrong size on SandfallBlueprintHelpers_DebugMe");
static_assert(offsetof(SandfallBlueprintHelpers_DebugMe, _objectToDebug) == 0x000000, "Member 'SandfallBlueprintHelpers_DebugMe::_objectToDebug' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.DrawDebugCircleArc
// 0x0060 (0x0060 - 0x0000)
struct SandfallBlueprintHelpers_DrawDebugCircleArc final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleWidth;                                        // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Segments;                                          // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x005C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_DrawDebugCircleArc) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_DrawDebugCircleArc");
static_assert(sizeof(SandfallBlueprintHelpers_DrawDebugCircleArc) == 0x000060, "Wrong size on SandfallBlueprintHelpers_DrawDebugCircleArc");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Center) == 0x000008, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Center' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Radius) == 0x000020, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Radius' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Direction) == 0x000028, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Direction' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, AngleWidth) == 0x000040, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::AngleWidth' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Segments) == 0x000044, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Segments' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Color) == 0x000048, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Color' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Lifetime) == 0x000058, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Lifetime' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_DrawDebugCircleArc, Thickness) == 0x00005C, "Member 'SandfallBlueprintHelpers_DrawDebugCircleArc::Thickness' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_FileDelete
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_Editor_FileDelete final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_FileDelete) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_FileDelete");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_FileDelete) == 0x000018, "Wrong size on SandfallBlueprintHelpers_Editor_FileDelete");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileDelete, Filename) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_FileDelete::Filename' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileDelete, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_FileDelete::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_FileLoadString
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_Editor_FileLoadString final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_FileLoadString) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_FileLoadString");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_FileLoadString) == 0x000028, "Wrong size on SandfallBlueprintHelpers_Editor_FileLoadString");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileLoadString, Filename) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_FileLoadString::Filename' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileLoadString, Content) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_FileLoadString::Content' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileLoadString, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_Editor_FileLoadString::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_FileLoadStringReal
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_Editor_FileLoadStringReal final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Content;                                           // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_FileLoadStringReal) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_FileLoadStringReal");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_FileLoadStringReal) == 0x000028, "Wrong size on SandfallBlueprintHelpers_Editor_FileLoadStringReal");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileLoadStringReal, Filename) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_FileLoadStringReal::Filename' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileLoadStringReal, Content) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_FileLoadStringReal::Content' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileLoadStringReal, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_Editor_FileLoadStringReal::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_FileSaveString
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_Editor_FileSaveString final
{
public:
	class FString                                 Content;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_FileSaveString) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_FileSaveString");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_FileSaveString) == 0x000028, "Wrong size on SandfallBlueprintHelpers_Editor_FileSaveString");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileSaveString, Content) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_FileSaveString::Content' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileSaveString, Filename) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_FileSaveString::Filename' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_FileSaveString, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_Editor_FileSaveString::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_GetShaderCompilationState
// 0x000C (0x000C - 0x0000)
struct SandfallBlueprintHelpers_Editor_GetShaderCompilationState final
{
public:
	int32                                         jobCount;                                          // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         workerCount;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_GetShaderCompilationState) == 0x000004, "Wrong alignment on SandfallBlueprintHelpers_Editor_GetShaderCompilationState");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_GetShaderCompilationState) == 0x00000C, "Wrong size on SandfallBlueprintHelpers_Editor_GetShaderCompilationState");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetShaderCompilationState, jobCount) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_GetShaderCompilationState::jobCount' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetShaderCompilationState, workerCount) == 0x000004, "Member 'SandfallBlueprintHelpers_Editor_GetShaderCompilationState::workerCount' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetShaderCompilationState, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_Editor_GetShaderCompilationState::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_GetStatValue
// 0x0030 (0x0030 - 0x0000)
struct SandfallBlueprintHelpers_Editor_GetStatValue final
{
public:
	class FName                                   _StatGroup;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _StatName;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _isMemory;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _OutValue;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_GetStatValue) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_GetStatValue");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_GetStatValue) == 0x000030, "Wrong size on SandfallBlueprintHelpers_Editor_GetStatValue");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetStatValue, _StatGroup) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_GetStatValue::_StatGroup' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetStatValue, _StatName) == 0x000008, "Member 'SandfallBlueprintHelpers_Editor_GetStatValue::_StatName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetStatValue, _isMemory) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_GetStatValue::_isMemory' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetStatValue, _OutValue) == 0x000018, "Member 'SandfallBlueprintHelpers_Editor_GetStatValue::_OutValue' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_GetStatValue, ReturnValue) == 0x000028, "Member 'SandfallBlueprintHelpers_Editor_GetStatValue::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_MoveScreenshots
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_Editor_MoveScreenshots final
{
public:
	class FString                                 _sourceFile;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _destination;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_MoveScreenshots) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_MoveScreenshots");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_MoveScreenshots) == 0x000028, "Wrong size on SandfallBlueprintHelpers_Editor_MoveScreenshots");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_MoveScreenshots, _sourceFile) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_MoveScreenshots::_sourceFile' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_MoveScreenshots, _destination) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_MoveScreenshots::_destination' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_MoveScreenshots, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_Editor_MoveScreenshots::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_PushJSONToMongoDB
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_Editor_PushJSONToMongoDB final
{
public:
	class FString                                 Json;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_PushJSONToMongoDB) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_PushJSONToMongoDB");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_PushJSONToMongoDB) == 0x000010, "Wrong size on SandfallBlueprintHelpers_Editor_PushJSONToMongoDB");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_PushJSONToMongoDB, Json) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_PushJSONToMongoDB::Json' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Editor_TakeScreenshot
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_Editor_TakeScreenshot final
{
public:
	class FString                                 _filename;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _showUI;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_Editor_TakeScreenshot) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Editor_TakeScreenshot");
static_assert(sizeof(SandfallBlueprintHelpers_Editor_TakeScreenshot) == 0x000018, "Wrong size on SandfallBlueprintHelpers_Editor_TakeScreenshot");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_TakeScreenshot, _filename) == 0x000000, "Member 'SandfallBlueprintHelpers_Editor_TakeScreenshot::_filename' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Editor_TakeScreenshot, _showUI) == 0x000010, "Member 'SandfallBlueprintHelpers_Editor_TakeScreenshot::_showUI' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.EditorAlert
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_EditorAlert final
{
public:
	class FText                                   _text;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_EditorAlert) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_EditorAlert");
static_assert(sizeof(SandfallBlueprintHelpers_EditorAlert) == 0x000010, "Wrong size on SandfallBlueprintHelpers_EditorAlert");
static_assert(offsetof(SandfallBlueprintHelpers_EditorAlert, _text) == 0x000000, "Member 'SandfallBlueprintHelpers_EditorAlert::_text' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.EqualsObjects
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_EqualsObjects final
{
public:
	const class UObject*                          A;                                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UObject*                          B;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_EqualsObjects) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_EqualsObjects");
static_assert(sizeof(SandfallBlueprintHelpers_EqualsObjects) == 0x000018, "Wrong size on SandfallBlueprintHelpers_EqualsObjects");
static_assert(offsetof(SandfallBlueprintHelpers_EqualsObjects, A) == 0x000000, "Member 'SandfallBlueprintHelpers_EqualsObjects::A' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_EqualsObjects, B) == 0x000008, "Member 'SandfallBlueprintHelpers_EqualsObjects::B' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_EqualsObjects, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_EqualsObjects::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.EscapeJson
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_EscapeJson final
{
public:
	class FString                                 Input;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_EscapeJson) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_EscapeJson");
static_assert(sizeof(SandfallBlueprintHelpers_EscapeJson) == 0x000020, "Wrong size on SandfallBlueprintHelpers_EscapeJson");
static_assert(offsetof(SandfallBlueprintHelpers_EscapeJson, Input) == 0x000000, "Member 'SandfallBlueprintHelpers_EscapeJson::Input' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_EscapeJson, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_EscapeJson::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.ExecuteDelegate
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_ExecuteDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_ExecuteDelegate) == 0x000004, "Wrong alignment on SandfallBlueprintHelpers_ExecuteDelegate");
static_assert(sizeof(SandfallBlueprintHelpers_ExecuteDelegate) == 0x000010, "Wrong size on SandfallBlueprintHelpers_ExecuteDelegate");
static_assert(offsetof(SandfallBlueprintHelpers_ExecuteDelegate, Delegate) == 0x000000, "Member 'SandfallBlueprintHelpers_ExecuteDelegate::Delegate' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.FinishSpawningActor
// 0x0080 (0x0080 - 0x0000)
struct SandfallBlueprintHelpers_FinishSpawningActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SpawnTransform;                                    // 0x0010(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnActorScaleMethod                        TransformScaleMethod;                              // 0x0070(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0078(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_FinishSpawningActor) == 0x000010, "Wrong alignment on SandfallBlueprintHelpers_FinishSpawningActor");
static_assert(sizeof(SandfallBlueprintHelpers_FinishSpawningActor) == 0x000080, "Wrong size on SandfallBlueprintHelpers_FinishSpawningActor");
static_assert(offsetof(SandfallBlueprintHelpers_FinishSpawningActor, Actor) == 0x000000, "Member 'SandfallBlueprintHelpers_FinishSpawningActor::Actor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FinishSpawningActor, SpawnTransform) == 0x000010, "Member 'SandfallBlueprintHelpers_FinishSpawningActor::SpawnTransform' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FinishSpawningActor, TransformScaleMethod) == 0x000070, "Member 'SandfallBlueprintHelpers_FinishSpawningActor::TransformScaleMethod' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FinishSpawningActor, ReturnValue) == 0x000078, "Member 'SandfallBlueprintHelpers_FinishSpawningActor::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.FlushInputs
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_FlushInputs final
{
public:
	class APlayerController*                      PlayerController;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_FlushInputs) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_FlushInputs");
static_assert(sizeof(SandfallBlueprintHelpers_FlushInputs) == 0x000008, "Wrong size on SandfallBlueprintHelpers_FlushInputs");
static_assert(offsetof(SandfallBlueprintHelpers_FlushInputs, PlayerController) == 0x000000, "Member 'SandfallBlueprintHelpers_FlushInputs::PlayerController' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Format
// 0x0030 (0x0030 - 0x0000)
struct SandfallBlueprintHelpers_Format final
{
public:
	class FString                                 InPattern;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FFormatArgumentData>            InArgs;                                            // 0x0010(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_Format) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Format");
static_assert(sizeof(SandfallBlueprintHelpers_Format) == 0x000030, "Wrong size on SandfallBlueprintHelpers_Format");
static_assert(offsetof(SandfallBlueprintHelpers_Format, InPattern) == 0x000000, "Member 'SandfallBlueprintHelpers_Format::InPattern' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Format, InArgs) == 0x000010, "Member 'SandfallBlueprintHelpers_Format::InArgs' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Format, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_Format::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.FormatDateTime
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_FormatDateTime final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_FormatDateTime) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_FormatDateTime");
static_assert(sizeof(SandfallBlueprintHelpers_FormatDateTime) == 0x000018, "Wrong size on SandfallBlueprintHelpers_FormatDateTime");
static_assert(offsetof(SandfallBlueprintHelpers_FormatDateTime, DateTime) == 0x000000, "Member 'SandfallBlueprintHelpers_FormatDateTime::DateTime' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FormatDateTime, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_FormatDateTime::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.FormatDateTimeWithPattern
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_FormatDateTimeWithPattern final
{
public:
	struct FDateTime                              DateTime;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FormatString;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_FormatDateTimeWithPattern) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_FormatDateTimeWithPattern");
static_assert(sizeof(SandfallBlueprintHelpers_FormatDateTimeWithPattern) == 0x000028, "Wrong size on SandfallBlueprintHelpers_FormatDateTimeWithPattern");
static_assert(offsetof(SandfallBlueprintHelpers_FormatDateTimeWithPattern, DateTime) == 0x000000, "Member 'SandfallBlueprintHelpers_FormatDateTimeWithPattern::DateTime' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FormatDateTimeWithPattern, FormatString) == 0x000008, "Member 'SandfallBlueprintHelpers_FormatDateTimeWithPattern::FormatString' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FormatDateTimeWithPattern, ReturnValue) == 0x000018, "Member 'SandfallBlueprintHelpers_FormatDateTimeWithPattern::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.FormatTimespan
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_FormatTimespan final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_FormatTimespan) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_FormatTimespan");
static_assert(sizeof(SandfallBlueprintHelpers_FormatTimespan) == 0x000018, "Wrong size on SandfallBlueprintHelpers_FormatTimespan");
static_assert(offsetof(SandfallBlueprintHelpers_FormatTimespan, Timespan) == 0x000000, "Member 'SandfallBlueprintHelpers_FormatTimespan::Timespan' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FormatTimespan, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_FormatTimespan::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.FormatTimespanWithPattern
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_FormatTimespanWithPattern final
{
public:
	struct FTimespan                              Timespan;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FormatString;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_FormatTimespanWithPattern) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_FormatTimespanWithPattern");
static_assert(sizeof(SandfallBlueprintHelpers_FormatTimespanWithPattern) == 0x000028, "Wrong size on SandfallBlueprintHelpers_FormatTimespanWithPattern");
static_assert(offsetof(SandfallBlueprintHelpers_FormatTimespanWithPattern, Timespan) == 0x000000, "Member 'SandfallBlueprintHelpers_FormatTimespanWithPattern::Timespan' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FormatTimespanWithPattern, FormatString) == 0x000008, "Member 'SandfallBlueprintHelpers_FormatTimespanWithPattern::FormatString' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_FormatTimespanWithPattern, ReturnValue) == 0x000018, "Member 'SandfallBlueprintHelpers_FormatTimespanWithPattern::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetAllComponentsByClass
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_GetAllComponentsByClass final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            Class_0;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                Components;                                        // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetAllComponentsByClass) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetAllComponentsByClass");
static_assert(sizeof(SandfallBlueprintHelpers_GetAllComponentsByClass) == 0x000020, "Wrong size on SandfallBlueprintHelpers_GetAllComponentsByClass");
static_assert(offsetof(SandfallBlueprintHelpers_GetAllComponentsByClass, World) == 0x000000, "Member 'SandfallBlueprintHelpers_GetAllComponentsByClass::World' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetAllComponentsByClass, Class_0) == 0x000008, "Member 'SandfallBlueprintHelpers_GetAllComponentsByClass::Class_0' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetAllComponentsByClass, Components) == 0x000010, "Member 'SandfallBlueprintHelpers_GetAllComponentsByClass::Components' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetAllLightComponents
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_GetAllLightComponents final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULightComponent*>                LightComponents;                                   // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetAllLightComponents) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetAllLightComponents");
static_assert(sizeof(SandfallBlueprintHelpers_GetAllLightComponents) == 0x000018, "Wrong size on SandfallBlueprintHelpers_GetAllLightComponents");
static_assert(offsetof(SandfallBlueprintHelpers_GetAllLightComponents, World) == 0x000000, "Member 'SandfallBlueprintHelpers_GetAllLightComponents::World' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetAllLightComponents, LightComponents) == 0x000008, "Member 'SandfallBlueprintHelpers_GetAllLightComponents::LightComponents' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetBuildInfo
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_GetBuildInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelist;                                        // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentPersistentLevel;                            // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetBuildInfo) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetBuildInfo");
static_assert(sizeof(SandfallBlueprintHelpers_GetBuildInfo) == 0x000028, "Wrong size on SandfallBlueprintHelpers_GetBuildInfo");
static_assert(offsetof(SandfallBlueprintHelpers_GetBuildInfo, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_GetBuildInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetBuildInfo, Changelist) == 0x000008, "Member 'SandfallBlueprintHelpers_GetBuildInfo::Changelist' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetBuildInfo, CurrentPersistentLevel) == 0x000018, "Member 'SandfallBlueprintHelpers_GetBuildInfo::CurrentPersistentLevel' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetCameraCutTrackSettings
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetCameraCutTrackSettings final
{
public:
	const class UMovieSceneCameraCutTrack*        CameraCutTrack;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SectionFound;                                      // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBlend;                                          // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasEasing;                                         // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPreviousCameraLocked;                            // 0x000B(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_GetCameraCutTrackSettings) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetCameraCutTrackSettings");
static_assert(sizeof(SandfallBlueprintHelpers_GetCameraCutTrackSettings) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetCameraCutTrackSettings");
static_assert(offsetof(SandfallBlueprintHelpers_GetCameraCutTrackSettings, CameraCutTrack) == 0x000000, "Member 'SandfallBlueprintHelpers_GetCameraCutTrackSettings::CameraCutTrack' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetCameraCutTrackSettings, SectionFound) == 0x000008, "Member 'SandfallBlueprintHelpers_GetCameraCutTrackSettings::SectionFound' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetCameraCutTrackSettings, CanBlend) == 0x000009, "Member 'SandfallBlueprintHelpers_GetCameraCutTrackSettings::CanBlend' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetCameraCutTrackSettings, HasEasing) == 0x00000A, "Member 'SandfallBlueprintHelpers_GetCameraCutTrackSettings::HasEasing' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetCameraCutTrackSettings, IsPreviousCameraLocked) == 0x00000B, "Member 'SandfallBlueprintHelpers_GetCameraCutTrackSettings::IsPreviousCameraLocked' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetClassDefaultObject
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetClassDefaultObject final
{
public:
	class UClass*                                 Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetClassDefaultObject) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetClassDefaultObject");
static_assert(sizeof(SandfallBlueprintHelpers_GetClassDefaultObject) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetClassDefaultObject");
static_assert(offsetof(SandfallBlueprintHelpers_GetClassDefaultObject, Object) == 0x000000, "Member 'SandfallBlueprintHelpers_GetClassDefaultObject::Object' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetClassDefaultObject, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_GetClassDefaultObject::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetComponentFromReference
// 0x0038 (0x0038 - 0x0000)
struct SandfallBlueprintHelpers_GetComponentFromReference final
{
public:
	struct FComponentReference                    ComponentReference;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwningActor;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetComponentFromReference) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetComponentFromReference");
static_assert(sizeof(SandfallBlueprintHelpers_GetComponentFromReference) == 0x000038, "Wrong size on SandfallBlueprintHelpers_GetComponentFromReference");
static_assert(offsetof(SandfallBlueprintHelpers_GetComponentFromReference, ComponentReference) == 0x000000, "Member 'SandfallBlueprintHelpers_GetComponentFromReference::ComponentReference' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetComponentFromReference, OwningActor) == 0x000028, "Member 'SandfallBlueprintHelpers_GetComponentFromReference::OwningActor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetComponentFromReference, ReturnValue) == 0x000030, "Member 'SandfallBlueprintHelpers_GetComponentFromReference::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetDataTableRowFromName
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_GetDataTableRowFromName final
{
public:
	class UDataTable*                             Table;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RowName;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTableRowBase                          OutRow;                                            // 0x0010(0x0008)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetDataTableRowFromName) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetDataTableRowFromName");
static_assert(sizeof(SandfallBlueprintHelpers_GetDataTableRowFromName) == 0x000018, "Wrong size on SandfallBlueprintHelpers_GetDataTableRowFromName");
static_assert(offsetof(SandfallBlueprintHelpers_GetDataTableRowFromName, Table) == 0x000000, "Member 'SandfallBlueprintHelpers_GetDataTableRowFromName::Table' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetDataTableRowFromName, RowName) == 0x000008, "Member 'SandfallBlueprintHelpers_GetDataTableRowFromName::RowName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetDataTableRowFromName, OutRow) == 0x000010, "Member 'SandfallBlueprintHelpers_GetDataTableRowFromName::OutRow' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetDebugInfo
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetDebugInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetDebugInfo) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetDebugInfo");
static_assert(sizeof(SandfallBlueprintHelpers_GetDebugInfo) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetDebugInfo");
static_assert(offsetof(SandfallBlueprintHelpers_GetDebugInfo, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_GetDebugInfo::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetEditorViewportTransform
// 0x0060 (0x0060 - 0x0000)
struct SandfallBlueprintHelpers_GetEditorViewportTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetEditorViewportTransform) == 0x000010, "Wrong alignment on SandfallBlueprintHelpers_GetEditorViewportTransform");
static_assert(sizeof(SandfallBlueprintHelpers_GetEditorViewportTransform) == 0x000060, "Wrong size on SandfallBlueprintHelpers_GetEditorViewportTransform");
static_assert(offsetof(SandfallBlueprintHelpers_GetEditorViewportTransform, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_GetEditorViewportTransform::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetLastRenderTimeOnScreen
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetLastRenderTimeOnScreen final
{
public:
	const class UPrimitiveComponent*              Primitive;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_GetLastRenderTimeOnScreen) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetLastRenderTimeOnScreen");
static_assert(sizeof(SandfallBlueprintHelpers_GetLastRenderTimeOnScreen) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetLastRenderTimeOnScreen");
static_assert(offsetof(SandfallBlueprintHelpers_GetLastRenderTimeOnScreen, Primitive) == 0x000000, "Member 'SandfallBlueprintHelpers_GetLastRenderTimeOnScreen::Primitive' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetLastRenderTimeOnScreen, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_GetLastRenderTimeOnScreen::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetMaxDistanceAttenuation
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetMaxDistanceAttenuation final
{
public:
	class USoundBase*                             Sound;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_GetMaxDistanceAttenuation) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetMaxDistanceAttenuation");
static_assert(sizeof(SandfallBlueprintHelpers_GetMaxDistanceAttenuation) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetMaxDistanceAttenuation");
static_assert(offsetof(SandfallBlueprintHelpers_GetMaxDistanceAttenuation, Sound) == 0x000000, "Member 'SandfallBlueprintHelpers_GetMaxDistanceAttenuation::Sound' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetMaxDistanceAttenuation, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_GetMaxDistanceAttenuation::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetPlatformNameAsTag
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_GetPlatformNameAsTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetPlatformNameAsTag) == 0x000004, "Wrong alignment on SandfallBlueprintHelpers_GetPlatformNameAsTag");
static_assert(sizeof(SandfallBlueprintHelpers_GetPlatformNameAsTag) == 0x000008, "Wrong size on SandfallBlueprintHelpers_GetPlatformNameAsTag");
static_assert(offsetof(SandfallBlueprintHelpers_GetPlatformNameAsTag, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_GetPlatformNameAsTag::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetSamplingRegionNames
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_GetSamplingRegionNames final
{
public:
	class USkeletalMesh*                          SkeletalMeshAsset;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetSamplingRegionNames) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetSamplingRegionNames");
static_assert(sizeof(SandfallBlueprintHelpers_GetSamplingRegionNames) == 0x000018, "Wrong size on SandfallBlueprintHelpers_GetSamplingRegionNames");
static_assert(offsetof(SandfallBlueprintHelpers_GetSamplingRegionNames, SkeletalMeshAsset) == 0x000000, "Member 'SandfallBlueprintHelpers_GetSamplingRegionNames::SkeletalMeshAsset' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetSamplingRegionNames, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_GetSamplingRegionNames::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetStackTrace
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetStackTrace final
{
public:
	TArray<class FString>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetStackTrace) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetStackTrace");
static_assert(sizeof(SandfallBlueprintHelpers_GetStackTrace) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetStackTrace");
static_assert(offsetof(SandfallBlueprintHelpers_GetStackTrace, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_GetStackTrace::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetUpscalerInfo
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_GetUpscalerInfo final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetUpscalerInfo) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetUpscalerInfo");
static_assert(sizeof(SandfallBlueprintHelpers_GetUpscalerInfo) == 0x000010, "Wrong size on SandfallBlueprintHelpers_GetUpscalerInfo");
static_assert(offsetof(SandfallBlueprintHelpers_GetUpscalerInfo, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_GetUpscalerInfo::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.GetVendorBuildInfo
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_GetVendorBuildInfo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OwnerInfo;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildInfo;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_GetVendorBuildInfo) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_GetVendorBuildInfo");
static_assert(sizeof(SandfallBlueprintHelpers_GetVendorBuildInfo) == 0x000028, "Wrong size on SandfallBlueprintHelpers_GetVendorBuildInfo");
static_assert(offsetof(SandfallBlueprintHelpers_GetVendorBuildInfo, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_GetVendorBuildInfo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetVendorBuildInfo, OwnerInfo) == 0x000008, "Member 'SandfallBlueprintHelpers_GetVendorBuildInfo::OwnerInfo' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_GetVendorBuildInfo, BuildInfo) == 0x000018, "Member 'SandfallBlueprintHelpers_GetVendorBuildInfo::BuildInfo' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.HasActorBegunPlay
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_HasActorBegunPlay final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_HasActorBegunPlay) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_HasActorBegunPlay");
static_assert(sizeof(SandfallBlueprintHelpers_HasActorBegunPlay) == 0x000010, "Wrong size on SandfallBlueprintHelpers_HasActorBegunPlay");
static_assert(offsetof(SandfallBlueprintHelpers_HasActorBegunPlay, Actor) == 0x000000, "Member 'SandfallBlueprintHelpers_HasActorBegunPlay::Actor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_HasActorBegunPlay, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_HasActorBegunPlay::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsActorSpatiallyLoaded
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_IsActorSpatiallyLoaded final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_IsActorSpatiallyLoaded) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_IsActorSpatiallyLoaded");
static_assert(sizeof(SandfallBlueprintHelpers_IsActorSpatiallyLoaded) == 0x000010, "Wrong size on SandfallBlueprintHelpers_IsActorSpatiallyLoaded");
static_assert(offsetof(SandfallBlueprintHelpers_IsActorSpatiallyLoaded, Actor) == 0x000000, "Member 'SandfallBlueprintHelpers_IsActorSpatiallyLoaded::Actor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_IsActorSpatiallyLoaded, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_IsActorSpatiallyLoaded::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.isCollisionProfileValid
// 0x000C (0x000C - 0x0000)
struct SandfallBlueprintHelpers_isCollisionProfileValid final
{
public:
	class FName                                   ProfileName;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_isCollisionProfileValid) == 0x000004, "Wrong alignment on SandfallBlueprintHelpers_isCollisionProfileValid");
static_assert(sizeof(SandfallBlueprintHelpers_isCollisionProfileValid) == 0x00000C, "Wrong size on SandfallBlueprintHelpers_isCollisionProfileValid");
static_assert(offsetof(SandfallBlueprintHelpers_isCollisionProfileValid, ProfileName) == 0x000000, "Member 'SandfallBlueprintHelpers_isCollisionProfileValid::ProfileName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_isCollisionProfileValid, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_isCollisionProfileValid::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsCurrentConsoleTypeLockheart
// 0x0001 (0x0001 - 0x0000)
struct SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart) == 0x000001, "Wrong alignment on SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart");
static_assert(sizeof(SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart) == 0x000001, "Wrong size on SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart");
static_assert(offsetof(SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsEventDispatcherConnected
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_IsEventDispatcherConnected final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventDispatcherName;                               // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_IsEventDispatcherConnected) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_IsEventDispatcherConnected");
static_assert(sizeof(SandfallBlueprintHelpers_IsEventDispatcherConnected) == 0x000018, "Wrong size on SandfallBlueprintHelpers_IsEventDispatcherConnected");
static_assert(offsetof(SandfallBlueprintHelpers_IsEventDispatcherConnected, Object) == 0x000000, "Member 'SandfallBlueprintHelpers_IsEventDispatcherConnected::Object' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_IsEventDispatcherConnected, EventDispatcherName) == 0x000008, "Member 'SandfallBlueprintHelpers_IsEventDispatcherConnected::EventDispatcherName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_IsEventDispatcherConnected, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_IsEventDispatcherConnected::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsInPlayMode
// 0x0001 (0x0001 - 0x0000)
struct SandfallBlueprintHelpers_IsInPlayMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_IsInPlayMode) == 0x000001, "Wrong alignment on SandfallBlueprintHelpers_IsInPlayMode");
static_assert(sizeof(SandfallBlueprintHelpers_IsInPlayMode) == 0x000001, "Wrong size on SandfallBlueprintHelpers_IsInPlayMode");
static_assert(offsetof(SandfallBlueprintHelpers_IsInPlayMode, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_IsInPlayMode::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsInSimulateMode
// 0x0001 (0x0001 - 0x0000)
struct SandfallBlueprintHelpers_IsInSimulateMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_IsInSimulateMode) == 0x000001, "Wrong alignment on SandfallBlueprintHelpers_IsInSimulateMode");
static_assert(sizeof(SandfallBlueprintHelpers_IsInSimulateMode) == 0x000001, "Wrong size on SandfallBlueprintHelpers_IsInSimulateMode");
static_assert(offsetof(SandfallBlueprintHelpers_IsInSimulateMode, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_IsInSimulateMode::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsPackagedBuild
// 0x0001 (0x0001 - 0x0000)
struct SandfallBlueprintHelpers_IsPackagedBuild final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_IsPackagedBuild) == 0x000001, "Wrong alignment on SandfallBlueprintHelpers_IsPackagedBuild");
static_assert(sizeof(SandfallBlueprintHelpers_IsPackagedBuild) == 0x000001, "Wrong size on SandfallBlueprintHelpers_IsPackagedBuild");
static_assert(offsetof(SandfallBlueprintHelpers_IsPackagedBuild, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_IsPackagedBuild::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsPawnInputEnabled
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_IsPawnInputEnabled final
{
public:
	const class APawn*                            _actor;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_IsPawnInputEnabled) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_IsPawnInputEnabled");
static_assert(sizeof(SandfallBlueprintHelpers_IsPawnInputEnabled) == 0x000010, "Wrong size on SandfallBlueprintHelpers_IsPawnInputEnabled");
static_assert(offsetof(SandfallBlueprintHelpers_IsPawnInputEnabled, _actor) == 0x000000, "Member 'SandfallBlueprintHelpers_IsPawnInputEnabled::_actor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_IsPawnInputEnabled, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_IsPawnInputEnabled::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsRunningAutomationTest
// 0x0001 (0x0001 - 0x0000)
struct SandfallBlueprintHelpers_IsRunningAutomationTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_IsRunningAutomationTest) == 0x000001, "Wrong alignment on SandfallBlueprintHelpers_IsRunningAutomationTest");
static_assert(sizeof(SandfallBlueprintHelpers_IsRunningAutomationTest) == 0x000001, "Wrong size on SandfallBlueprintHelpers_IsRunningAutomationTest");
static_assert(offsetof(SandfallBlueprintHelpers_IsRunningAutomationTest, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_IsRunningAutomationTest::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.IsRunningOnSteamDeck
// 0x0001 (0x0001 - 0x0000)
struct SandfallBlueprintHelpers_IsRunningOnSteamDeck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_IsRunningOnSteamDeck) == 0x000001, "Wrong alignment on SandfallBlueprintHelpers_IsRunningOnSteamDeck");
static_assert(sizeof(SandfallBlueprintHelpers_IsRunningOnSteamDeck) == 0x000001, "Wrong size on SandfallBlueprintHelpers_IsRunningOnSteamDeck");
static_assert(offsetof(SandfallBlueprintHelpers_IsRunningOnSteamDeck, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_IsRunningOnSteamDeck::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.MakeLogOutputCapture
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_MakeLogOutputCapture final
{
public:
	class UOutputDeviceWrapper*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_MakeLogOutputCapture) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_MakeLogOutputCapture");
static_assert(sizeof(SandfallBlueprintHelpers_MakeLogOutputCapture) == 0x000008, "Wrong size on SandfallBlueprintHelpers_MakeLogOutputCapture");
static_assert(offsetof(SandfallBlueprintHelpers_MakeLogOutputCapture, ReturnValue) == 0x000000, "Member 'SandfallBlueprintHelpers_MakeLogOutputCapture::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Map_Remap
// 0x00F0 (0x00F0 - 0x0000)
struct SandfallBlueprintHelpers_Map_Remap final
{
public:
	TMap<int32, int32>                            TargetMap;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            RemapTable;                                        // 0x0050(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ResultMap;                                         // 0x00A0(0x0050)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_Map_Remap) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Map_Remap");
static_assert(sizeof(SandfallBlueprintHelpers_Map_Remap) == 0x0000F0, "Wrong size on SandfallBlueprintHelpers_Map_Remap");
static_assert(offsetof(SandfallBlueprintHelpers_Map_Remap, TargetMap) == 0x000000, "Member 'SandfallBlueprintHelpers_Map_Remap::TargetMap' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Map_Remap, RemapTable) == 0x000050, "Member 'SandfallBlueprintHelpers_Map_Remap::RemapTable' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Map_Remap, ResultMap) == 0x0000A0, "Member 'SandfallBlueprintHelpers_Map_Remap::ResultMap' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.Map_ToString
// 0x0060 (0x0060 - 0x0000)
struct SandfallBlueprintHelpers_Map_ToString final
{
public:
	TMap<int32, int32>                            TargetMap;                                         // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class FString>                         OutStringList;                                     // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_Map_ToString) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_Map_ToString");
static_assert(sizeof(SandfallBlueprintHelpers_Map_ToString) == 0x000060, "Wrong size on SandfallBlueprintHelpers_Map_ToString");
static_assert(offsetof(SandfallBlueprintHelpers_Map_ToString, TargetMap) == 0x000000, "Member 'SandfallBlueprintHelpers_Map_ToString::TargetMap' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_Map_ToString, OutStringList) == 0x000050, "Member 'SandfallBlueprintHelpers_Map_ToString::OutStringList' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.MemTraceUserMark
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_MemTraceUserMark final
{
public:
	class FString                                 userMark;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_MemTraceUserMark) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_MemTraceUserMark");
static_assert(sizeof(SandfallBlueprintHelpers_MemTraceUserMark) == 0x000010, "Wrong size on SandfallBlueprintHelpers_MemTraceUserMark");
static_assert(offsetof(SandfallBlueprintHelpers_MemTraceUserMark, userMark) == 0x000000, "Member 'SandfallBlueprintHelpers_MemTraceUserMark::userMark' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.OffsetTransform
// 0x00D0 (0x00D0 - 0x0000)
struct SandfallBlueprintHelpers_OffsetTransform final
{
public:
	struct FTransform                             StartTransform;                                    // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardOffset;                                     // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpOffset;                                          // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0070(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_OffsetTransform) == 0x000010, "Wrong alignment on SandfallBlueprintHelpers_OffsetTransform");
static_assert(sizeof(SandfallBlueprintHelpers_OffsetTransform) == 0x0000D0, "Wrong size on SandfallBlueprintHelpers_OffsetTransform");
static_assert(offsetof(SandfallBlueprintHelpers_OffsetTransform, StartTransform) == 0x000000, "Member 'SandfallBlueprintHelpers_OffsetTransform::StartTransform' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_OffsetTransform, ForwardOffset) == 0x000060, "Member 'SandfallBlueprintHelpers_OffsetTransform::ForwardOffset' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_OffsetTransform, UpOffset) == 0x000064, "Member 'SandfallBlueprintHelpers_OffsetTransform::UpOffset' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_OffsetTransform, ReturnValue) == 0x000070, "Member 'SandfallBlueprintHelpers_OffsetTransform::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.OverrideBoolCVar
// 0x000C (0x000C - 0x0000)
struct SandfallBlueprintHelpers_OverrideBoolCVar final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _value;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_OverrideBoolCVar) == 0x000004, "Wrong alignment on SandfallBlueprintHelpers_OverrideBoolCVar");
static_assert(sizeof(SandfallBlueprintHelpers_OverrideBoolCVar) == 0x00000C, "Wrong size on SandfallBlueprintHelpers_OverrideBoolCVar");
static_assert(offsetof(SandfallBlueprintHelpers_OverrideBoolCVar, _name) == 0x000000, "Member 'SandfallBlueprintHelpers_OverrideBoolCVar::_name' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_OverrideBoolCVar, _value) == 0x000008, "Member 'SandfallBlueprintHelpers_OverrideBoolCVar::_value' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.ParseIntoArrayLines
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_ParseIntoArrayLines final
{
public:
	class FString                                 In;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CullEmpty;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_ParseIntoArrayLines) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_ParseIntoArrayLines");
static_assert(sizeof(SandfallBlueprintHelpers_ParseIntoArrayLines) == 0x000028, "Wrong size on SandfallBlueprintHelpers_ParseIntoArrayLines");
static_assert(offsetof(SandfallBlueprintHelpers_ParseIntoArrayLines, In) == 0x000000, "Member 'SandfallBlueprintHelpers_ParseIntoArrayLines::In' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_ParseIntoArrayLines, CullEmpty) == 0x000010, "Member 'SandfallBlueprintHelpers_ParseIntoArrayLines::CullEmpty' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_ParseIntoArrayLines, ReturnValue) == 0x000018, "Member 'SandfallBlueprintHelpers_ParseIntoArrayLines::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.PrintStringInLog
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_PrintStringInLog final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_PrintStringInLog) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_PrintStringInLog");
static_assert(sizeof(SandfallBlueprintHelpers_PrintStringInLog) == 0x000018, "Wrong size on SandfallBlueprintHelpers_PrintStringInLog");
static_assert(offsetof(SandfallBlueprintHelpers_PrintStringInLog, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_PrintStringInLog::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_PrintStringInLog, InString) == 0x000008, "Member 'SandfallBlueprintHelpers_PrintStringInLog::InString' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.RegisterBoolCVar
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_RegisterBoolCVar final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _defaultValue;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _description;                                      // 0x0010(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_RegisterBoolCVar) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_RegisterBoolCVar");
static_assert(sizeof(SandfallBlueprintHelpers_RegisterBoolCVar) == 0x000020, "Wrong size on SandfallBlueprintHelpers_RegisterBoolCVar");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterBoolCVar, _name) == 0x000000, "Member 'SandfallBlueprintHelpers_RegisterBoolCVar::_name' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterBoolCVar, _defaultValue) == 0x000008, "Member 'SandfallBlueprintHelpers_RegisterBoolCVar::_defaultValue' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterBoolCVar, _description) == 0x000010, "Member 'SandfallBlueprintHelpers_RegisterBoolCVar::_description' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.RegisterInputAction
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_RegisterInputAction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputAction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnPressed;                                         // 0x0010(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_RegisterInputAction) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_RegisterInputAction");
static_assert(sizeof(SandfallBlueprintHelpers_RegisterInputAction) == 0x000020, "Wrong size on SandfallBlueprintHelpers_RegisterInputAction");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterInputAction, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_RegisterInputAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterInputAction, InputAction) == 0x000008, "Member 'SandfallBlueprintHelpers_RegisterInputAction::InputAction' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterInputAction, OnPressed) == 0x000010, "Member 'SandfallBlueprintHelpers_RegisterInputAction::OnPressed' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.RegisterIntegerCVar
// 0x0020 (0x0020 - 0x0000)
struct SandfallBlueprintHelpers_RegisterIntegerCVar final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         _defaultValue;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   _description;                                      // 0x0010(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_RegisterIntegerCVar) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_RegisterIntegerCVar");
static_assert(sizeof(SandfallBlueprintHelpers_RegisterIntegerCVar) == 0x000020, "Wrong size on SandfallBlueprintHelpers_RegisterIntegerCVar");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterIntegerCVar, _name) == 0x000000, "Member 'SandfallBlueprintHelpers_RegisterIntegerCVar::_name' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterIntegerCVar, _defaultValue) == 0x000008, "Member 'SandfallBlueprintHelpers_RegisterIntegerCVar::_defaultValue' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterIntegerCVar, _description) == 0x000010, "Member 'SandfallBlueprintHelpers_RegisterIntegerCVar::_description' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.RegisterStringCVar
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_RegisterStringCVar final
{
public:
	class FName                                   _name;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 _defaultValue;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   _description;                                      // 0x0018(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_RegisterStringCVar) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_RegisterStringCVar");
static_assert(sizeof(SandfallBlueprintHelpers_RegisterStringCVar) == 0x000028, "Wrong size on SandfallBlueprintHelpers_RegisterStringCVar");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterStringCVar, _name) == 0x000000, "Member 'SandfallBlueprintHelpers_RegisterStringCVar::_name' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterStringCVar, _defaultValue) == 0x000008, "Member 'SandfallBlueprintHelpers_RegisterStringCVar::_defaultValue' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RegisterStringCVar, _description) == 0x000018, "Member 'SandfallBlueprintHelpers_RegisterStringCVar::_description' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.ReloadActor
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_ReloadActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_ReloadActor) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_ReloadActor");
static_assert(sizeof(SandfallBlueprintHelpers_ReloadActor) == 0x000008, "Wrong size on SandfallBlueprintHelpers_ReloadActor");
static_assert(offsetof(SandfallBlueprintHelpers_ReloadActor, Actor) == 0x000000, "Member 'SandfallBlueprintHelpers_ReloadActor::Actor' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.RemoveMaterialInstanceParameterOverride
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride final
{
public:
	class UMaterialInstanceConstant*              _MaterialInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ParameterName;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride");
static_assert(sizeof(SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride) == 0x000018, "Wrong size on SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride");
static_assert(offsetof(SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride, _MaterialInstance) == 0x000000, "Member 'SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride::_MaterialInstance' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride, _ParameterName) == 0x000008, "Member 'SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride::_ParameterName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.RemoveMaterialInstanceStaticSwitchOverride
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride final
{
public:
	class UMaterialInstanceConstant*              _MaterialInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   _ParameterName;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride");
static_assert(sizeof(SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride) == 0x000018, "Wrong size on SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride");
static_assert(offsetof(SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride, _MaterialInstance) == 0x000000, "Member 'SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride::_MaterialInstance' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride, _ParameterName) == 0x000008, "Member 'SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride::_ParameterName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride, ReturnValue) == 0x000010, "Member 'SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.ResetAllProperties
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_ResetAllProperties final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeComponents;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_ResetAllProperties) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_ResetAllProperties");
static_assert(sizeof(SandfallBlueprintHelpers_ResetAllProperties) == 0x000010, "Wrong size on SandfallBlueprintHelpers_ResetAllProperties");
static_assert(offsetof(SandfallBlueprintHelpers_ResetAllProperties, Object) == 0x000000, "Member 'SandfallBlueprintHelpers_ResetAllProperties::Object' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_ResetAllProperties, bIncludeComponents) == 0x000008, "Member 'SandfallBlueprintHelpers_ResetAllProperties::bIncludeComponents' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.ResetMaterialInstanceTextureStreamingData
// 0x0008 (0x0008 - 0x0000)
struct SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData final
{
public:
	class UMaterialInstanceConstant*              _MaterialInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData");
static_assert(sizeof(SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData) == 0x000008, "Wrong size on SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData");
static_assert(offsetof(SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData, _MaterialInstance) == 0x000000, "Member 'SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData::_MaterialInstance' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.SetActorIsEditorOnly
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_SetActorIsEditorOnly final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditorOnly;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_SetActorIsEditorOnly) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_SetActorIsEditorOnly");
static_assert(sizeof(SandfallBlueprintHelpers_SetActorIsEditorOnly) == 0x000010, "Wrong size on SandfallBlueprintHelpers_SetActorIsEditorOnly");
static_assert(offsetof(SandfallBlueprintHelpers_SetActorIsEditorOnly, Actor) == 0x000000, "Member 'SandfallBlueprintHelpers_SetActorIsEditorOnly::Actor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetActorIsEditorOnly, bIsEditorOnly) == 0x000008, "Member 'SandfallBlueprintHelpers_SetActorIsEditorOnly::bIsEditorOnly' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.SetActorIsSpatiallyLoaded
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSpatiallyLoaded;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded");
static_assert(sizeof(SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded) == 0x000010, "Wrong size on SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded");
static_assert(offsetof(SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded, Actor) == 0x000000, "Member 'SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded::Actor' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded, bIsSpatiallyLoaded) == 0x000008, "Member 'SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded::bIsSpatiallyLoaded' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.SetComponentIsEditorOnly
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_SetComponentIsEditorOnly final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEditorOnly;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_SetComponentIsEditorOnly) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_SetComponentIsEditorOnly");
static_assert(sizeof(SandfallBlueprintHelpers_SetComponentIsEditorOnly) == 0x000010, "Wrong size on SandfallBlueprintHelpers_SetComponentIsEditorOnly");
static_assert(offsetof(SandfallBlueprintHelpers_SetComponentIsEditorOnly, ActorComponent) == 0x000000, "Member 'SandfallBlueprintHelpers_SetComponentIsEditorOnly::ActorComponent' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetComponentIsEditorOnly, bIsEditorOnly) == 0x000008, "Member 'SandfallBlueprintHelpers_SetComponentIsEditorOnly::bIsEditorOnly' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.SetTimeDilationEnabledForSequencePlayer
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer final
{
public:
	const class UMovieSceneSequencePlayer*        SequencePlayer;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer");
static_assert(sizeof(SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer) == 0x000010, "Wrong size on SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer, SequencePlayer) == 0x000000, "Member 'SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer::SequencePlayer' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer, Enabled) == 0x000008, "Member 'SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer::Enabled' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.SetTimerDelegate
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_SetTimerDelegate final
{
public:
	TDelegate<void()>                             Delegate;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLooping;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialStartDelay;                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitialStartDelayVariance;                         // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_SetTimerDelegate) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_SetTimerDelegate");
static_assert(sizeof(SandfallBlueprintHelpers_SetTimerDelegate) == 0x000028, "Wrong size on SandfallBlueprintHelpers_SetTimerDelegate");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimerDelegate, Delegate) == 0x000000, "Member 'SandfallBlueprintHelpers_SetTimerDelegate::Delegate' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimerDelegate, Time) == 0x000010, "Member 'SandfallBlueprintHelpers_SetTimerDelegate::Time' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimerDelegate, bLooping) == 0x000014, "Member 'SandfallBlueprintHelpers_SetTimerDelegate::bLooping' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimerDelegate, InitialStartDelay) == 0x000018, "Member 'SandfallBlueprintHelpers_SetTimerDelegate::InitialStartDelay' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimerDelegate, InitialStartDelayVariance) == 0x00001C, "Member 'SandfallBlueprintHelpers_SetTimerDelegate::InitialStartDelayVariance' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_SetTimerDelegate, ReturnValue) == 0x000020, "Member 'SandfallBlueprintHelpers_SetTimerDelegate::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.StartMemTrace
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_StartMemTrace final
{
public:
	class FString                                 ip;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_StartMemTrace) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_StartMemTrace");
static_assert(sizeof(SandfallBlueprintHelpers_StartMemTrace) == 0x000018, "Wrong size on SandfallBlueprintHelpers_StartMemTrace");
static_assert(offsetof(SandfallBlueprintHelpers_StartMemTrace, ip) == 0x000000, "Member 'SandfallBlueprintHelpers_StartMemTrace::ip' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_StartMemTrace, Port) == 0x000010, "Member 'SandfallBlueprintHelpers_StartMemTrace::Port' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.TestMemTrace
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_TestMemTrace final
{
public:
	class FString                                 ip;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_TestMemTrace) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_TestMemTrace");
static_assert(sizeof(SandfallBlueprintHelpers_TestMemTrace) == 0x000018, "Wrong size on SandfallBlueprintHelpers_TestMemTrace");
static_assert(offsetof(SandfallBlueprintHelpers_TestMemTrace, ip) == 0x000000, "Member 'SandfallBlueprintHelpers_TestMemTrace::ip' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_TestMemTrace, Port) == 0x000010, "Member 'SandfallBlueprintHelpers_TestMemTrace::Port' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.TriggerMouseLMBDown
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_TriggerMouseLMBDown final
{
public:
	struct FVector2D                              CursorPosition;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_TriggerMouseLMBDown) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_TriggerMouseLMBDown");
static_assert(sizeof(SandfallBlueprintHelpers_TriggerMouseLMBDown) == 0x000010, "Wrong size on SandfallBlueprintHelpers_TriggerMouseLMBDown");
static_assert(offsetof(SandfallBlueprintHelpers_TriggerMouseLMBDown, CursorPosition) == 0x000000, "Member 'SandfallBlueprintHelpers_TriggerMouseLMBDown::CursorPosition' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.TriggerMouseLMBUp
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_TriggerMouseLMBUp final
{
public:
	struct FVector2D                              CursorPosition;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_TriggerMouseLMBUp) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_TriggerMouseLMBUp");
static_assert(sizeof(SandfallBlueprintHelpers_TriggerMouseLMBUp) == 0x000010, "Wrong size on SandfallBlueprintHelpers_TriggerMouseLMBUp");
static_assert(offsetof(SandfallBlueprintHelpers_TriggerMouseLMBUp, CursorPosition) == 0x000000, "Member 'SandfallBlueprintHelpers_TriggerMouseLMBUp::CursorPosition' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.TryGetBlueprintClass
// 0x0010 (0x0010 - 0x0000)
struct SandfallBlueprintHelpers_TryGetBlueprintClass final
{
public:
	class UObject*                                Object;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_TryGetBlueprintClass) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_TryGetBlueprintClass");
static_assert(sizeof(SandfallBlueprintHelpers_TryGetBlueprintClass) == 0x000010, "Wrong size on SandfallBlueprintHelpers_TryGetBlueprintClass");
static_assert(offsetof(SandfallBlueprintHelpers_TryGetBlueprintClass, Object) == 0x000000, "Member 'SandfallBlueprintHelpers_TryGetBlueprintClass::Object' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_TryGetBlueprintClass, ReturnValue) == 0x000008, "Member 'SandfallBlueprintHelpers_TryGetBlueprintClass::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.UpdateFloatingObjectsTransform
// 0x0068 (0x0068 - 0x0000)
struct SandfallBlueprintHelpers_UpdateFloatingObjectsTransform final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                Objects;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        SpeedVectors;                                      // 0x0018(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        RandomLocations;                                   // 0x0028(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<double>                                RotatorSpeeds;                                     // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<double>                                MovingDistances;                                   // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 MultiplierRemapArray;                              // 0x0058(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_UpdateFloatingObjectsTransform");
static_assert(sizeof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform) == 0x000068, "Wrong size on SandfallBlueprintHelpers_UpdateFloatingObjectsTransform");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, Objects) == 0x000008, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::Objects' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, SpeedVectors) == 0x000018, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::SpeedVectors' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, RandomLocations) == 0x000028, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::RandomLocations' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, RotatorSpeeds) == 0x000038, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::RotatorSpeeds' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, MovingDistances) == 0x000048, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::MovingDistances' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateFloatingObjectsTransform, MultiplierRemapArray) == 0x000058, "Member 'SandfallBlueprintHelpers_UpdateFloatingObjectsTransform::MultiplierRemapArray' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange
// 0x0018 (0x0018 - 0x0000)
struct SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RuntimeStreamingDataName;                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewLoadingRange;                                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange");
static_assert(sizeof(SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange) == 0x000018, "Wrong size on SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange, RuntimeStreamingDataName) == 0x000008, "Member 'SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange::RuntimeStreamingDataName' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange, NewLoadingRange) == 0x000010, "Member 'SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange::NewLoadingRange' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.WaitForLatentAction
// 0x0028 (0x0028 - 0x0000)
struct SandfallBlueprintHelpers_WaitForLatentAction final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class USF_BlueprintLatentAction*              LatentBlueprintAction;                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallBlueprintHelpers_WaitForLatentAction) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_WaitForLatentAction");
static_assert(sizeof(SandfallBlueprintHelpers_WaitForLatentAction) == 0x000028, "Wrong size on SandfallBlueprintHelpers_WaitForLatentAction");
static_assert(offsetof(SandfallBlueprintHelpers_WaitForLatentAction, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_WaitForLatentAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_WaitForLatentAction, LatentInfo) == 0x000008, "Member 'SandfallBlueprintHelpers_WaitForLatentAction::LatentInfo' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_WaitForLatentAction, LatentBlueprintAction) == 0x000020, "Member 'SandfallBlueprintHelpers_WaitForLatentAction::LatentBlueprintAction' has a wrong offset!");

// Function SandFall.SandfallBlueprintHelpers.WaitTillLevelStreamingCompleted
// 0x0038 (0x0038 - 0x0000)
struct SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0008(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	TArray<class UWorldPartitionStreamingSourceComponent*> SourceComponents;                         // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          AddPlayerControllerSource;                         // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted) == 0x000008, "Wrong alignment on SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted");
static_assert(sizeof(SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted) == 0x000038, "Wrong size on SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted");
static_assert(offsetof(SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted, WorldContextObject) == 0x000000, "Member 'SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted, LatentInfo) == 0x000008, "Member 'SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted::LatentInfo' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted, SourceComponents) == 0x000020, "Member 'SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted::SourceComponents' has a wrong offset!");
static_assert(offsetof(SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted, AddPlayerControllerSource) == 0x000030, "Member 'SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted::AddPlayerControllerSource' has a wrong offset!");

// Function SandFall.LZAsyncAction_RequestHttpMessage.AsyncRequestHTTP
// 0x0020 (0x0020 - 0x0000)
struct LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULZAsyncAction_RequestHttpMessage*      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP) == 0x000008, "Wrong alignment on LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP");
static_assert(sizeof(LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP) == 0x000020, "Wrong size on LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP");
static_assert(offsetof(LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP, WorldContextObject) == 0x000000, "Member 'LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP, URL) == 0x000008, "Member 'LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP::URL' has a wrong offset!");
static_assert(offsetof(LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP, ReturnValue) == 0x000018, "Member 'LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP::ReturnValue' has a wrong offset!");

// Function SandFall.OutputDeviceWrapper.Flush
// 0x0010 (0x0010 - 0x0000)
struct OutputDeviceWrapper_Flush final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutputDeviceWrapper_Flush) == 0x000008, "Wrong alignment on OutputDeviceWrapper_Flush");
static_assert(sizeof(OutputDeviceWrapper_Flush) == 0x000010, "Wrong size on OutputDeviceWrapper_Flush");
static_assert(offsetof(OutputDeviceWrapper_Flush, ReturnValue) == 0x000000, "Member 'OutputDeviceWrapper_Flush::ReturnValue' has a wrong offset!");

// Function SandFall.SF_BlueprintLatentAction.IsFinished
// 0x0001 (0x0001 - 0x0000)
struct SF_BlueprintLatentAction_IsFinished final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_BlueprintLatentAction_IsFinished) == 0x000001, "Wrong alignment on SF_BlueprintLatentAction_IsFinished");
static_assert(sizeof(SF_BlueprintLatentAction_IsFinished) == 0x000001, "Wrong size on SF_BlueprintLatentAction_IsFinished");
static_assert(offsetof(SF_BlueprintLatentAction_IsFinished, ReturnValue) == 0x000000, "Member 'SF_BlueprintLatentAction_IsFinished::ReturnValue' has a wrong offset!");

// Function SandFall.SF_BlueprintAsyncAction.StartWaitAsyncAction
// 0x0028 (0x0028 - 0x0000)
struct SF_BlueprintAsyncAction_StartWaitAsyncAction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugReason;                                       // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USF_BlueprintLatentAction*              NewLatentAction;                                   // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USF_BlueprintAsyncAction*               ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_BlueprintAsyncAction_StartWaitAsyncAction) == 0x000008, "Wrong alignment on SF_BlueprintAsyncAction_StartWaitAsyncAction");
static_assert(sizeof(SF_BlueprintAsyncAction_StartWaitAsyncAction) == 0x000028, "Wrong size on SF_BlueprintAsyncAction_StartWaitAsyncAction");
static_assert(offsetof(SF_BlueprintAsyncAction_StartWaitAsyncAction, WorldContextObject) == 0x000000, "Member 'SF_BlueprintAsyncAction_StartWaitAsyncAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_BlueprintAsyncAction_StartWaitAsyncAction, DebugReason) == 0x000008, "Member 'SF_BlueprintAsyncAction_StartWaitAsyncAction::DebugReason' has a wrong offset!");
static_assert(offsetof(SF_BlueprintAsyncAction_StartWaitAsyncAction, NewLatentAction) == 0x000018, "Member 'SF_BlueprintAsyncAction_StartWaitAsyncAction::NewLatentAction' has a wrong offset!");
static_assert(offsetof(SF_BlueprintAsyncAction_StartWaitAsyncAction, ReturnValue) == 0x000020, "Member 'SF_BlueprintAsyncAction_StartWaitAsyncAction::ReturnValue' has a wrong offset!");

// Function SandFall.SF_BlueprintAsyncAction.WaitAsyncAction
// 0x0010 (0x0010 - 0x0000)
struct SF_BlueprintAsyncAction_WaitAsyncAction final
{
public:
	class USF_BlueprintLatentAction*              LatentAction;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USF_BlueprintAsyncAction*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_BlueprintAsyncAction_WaitAsyncAction) == 0x000008, "Wrong alignment on SF_BlueprintAsyncAction_WaitAsyncAction");
static_assert(sizeof(SF_BlueprintAsyncAction_WaitAsyncAction) == 0x000010, "Wrong size on SF_BlueprintAsyncAction_WaitAsyncAction");
static_assert(offsetof(SF_BlueprintAsyncAction_WaitAsyncAction, LatentAction) == 0x000000, "Member 'SF_BlueprintAsyncAction_WaitAsyncAction::LatentAction' has a wrong offset!");
static_assert(offsetof(SF_BlueprintAsyncAction_WaitAsyncAction, ReturnValue) == 0x000008, "Member 'SF_BlueprintAsyncAction_WaitAsyncAction::ReturnValue' has a wrong offset!");

// Function SandFall.SF_RunHardwareBenchmark.RunHardwareBenchmarkWithNoAlteration
// 0x0020 (0x0020 - 0x0000)
struct SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WorkScale;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CPUMultiplier;                                     // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GPUMultiplier;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USF_RunHardwareBenchmark*               ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration) == 0x000008, "Wrong alignment on SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration");
static_assert(sizeof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration) == 0x000020, "Wrong size on SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration");
static_assert(offsetof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration, WorldContextObject) == 0x000000, "Member 'SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration, WorkScale) == 0x000008, "Member 'SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration::WorkScale' has a wrong offset!");
static_assert(offsetof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration, CPUMultiplier) == 0x00000C, "Member 'SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration::CPUMultiplier' has a wrong offset!");
static_assert(offsetof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration, GPUMultiplier) == 0x000010, "Member 'SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration::GPUMultiplier' has a wrong offset!");
static_assert(offsetof(SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration, ReturnValue) == 0x000018, "Member 'SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration::ReturnValue' has a wrong offset!");

// Function SandFall.ConditionChecker.Check
// 0x0010 (0x0010 - 0x0000)
struct ConditionChecker_Check final
{
public:
	class UObject*                                WorldContext;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConditionChecker_Check) == 0x000008, "Wrong alignment on ConditionChecker_Check");
static_assert(sizeof(ConditionChecker_Check) == 0x000010, "Wrong size on ConditionChecker_Check");
static_assert(offsetof(ConditionChecker_Check, WorldContext) == 0x000000, "Member 'ConditionChecker_Check::WorldContext' has a wrong offset!");
static_assert(offsetof(ConditionChecker_Check, ReturnValue) == 0x000008, "Member 'ConditionChecker_Check::ReturnValue' has a wrong offset!");

// Function SandFall.ConditionChecker.CheckInternal
// 0x0001 (0x0001 - 0x0000)
struct ConditionChecker_CheckInternal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionChecker_CheckInternal) == 0x000001, "Wrong alignment on ConditionChecker_CheckInternal");
static_assert(sizeof(ConditionChecker_CheckInternal) == 0x000001, "Wrong size on ConditionChecker_CheckInternal");
static_assert(offsetof(ConditionChecker_CheckInternal, ReturnValue) == 0x000000, "Member 'ConditionChecker_CheckInternal::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetAvailableMonitorDisplayName
// 0x0018 (0x0018 - 0x0000)
struct ConfigurableGameUserSettings_GetAvailableMonitorDisplayName final
{
public:
	TArray<class FText>                           MonitorsName;                                      // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConfigurableGameUserSettings_GetAvailableMonitorDisplayName) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetAvailableMonitorDisplayName");
static_assert(sizeof(ConfigurableGameUserSettings_GetAvailableMonitorDisplayName) == 0x000018, "Wrong size on ConfigurableGameUserSettings_GetAvailableMonitorDisplayName");
static_assert(offsetof(ConfigurableGameUserSettings_GetAvailableMonitorDisplayName, MonitorsName) == 0x000000, "Member 'ConfigurableGameUserSettings_GetAvailableMonitorDisplayName::MonitorsName' has a wrong offset!");
static_assert(offsetof(ConfigurableGameUserSettings_GetAvailableMonitorDisplayName, ReturnValue) == 0x000010, "Member 'ConfigurableGameUserSettings_GetAvailableMonitorDisplayName::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.CheckForFirstLaunchBenchmark
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark");
static_assert(sizeof(ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark) == 0x000001, "Wrong size on ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark");
static_assert(offsetof(ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetAvailableQualityModeFromCurrentSelectedUpscaler
// 0x0050 (0x0050 - 0x0000)
struct ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler final
{
public:
	TMap<int32, class FText>                      ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler");
static_assert(sizeof(ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler) == 0x000050, "Wrong size on ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler");
static_assert(offsetof(ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetAvailableUpscaler
// 0x0010 (0x0010 - 0x0000)
struct ConfigurableGameUserSettings_GetAvailableUpscaler final
{
public:
	TArray<class FText>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetAvailableUpscaler) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetAvailableUpscaler");
static_assert(sizeof(ConfigurableGameUserSettings_GetAvailableUpscaler) == 0x000010, "Wrong size on ConfigurableGameUserSettings_GetAvailableUpscaler");
static_assert(offsetof(ConfigurableGameUserSettings_GetAvailableUpscaler, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetAvailableUpscaler::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetFloatConsoleVariable
// 0x0018 (0x0018 - 0x0000)
struct ConfigurableGameUserSettings_GetFloatConsoleVariable final
{
public:
	class FString                                 CVarName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConfigurableGameUserSettings_GetFloatConsoleVariable) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetFloatConsoleVariable");
static_assert(sizeof(ConfigurableGameUserSettings_GetFloatConsoleVariable) == 0x000018, "Wrong size on ConfigurableGameUserSettings_GetFloatConsoleVariable");
static_assert(offsetof(ConfigurableGameUserSettings_GetFloatConsoleVariable, CVarName) == 0x000000, "Member 'ConfigurableGameUserSettings_GetFloatConsoleVariable::CVarName' has a wrong offset!");
static_assert(offsetof(ConfigurableGameUserSettings_GetFloatConsoleVariable, ReturnValue) == 0x000010, "Member 'ConfigurableGameUserSettings_GetFloatConsoleVariable::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSelectedUpscalerInfo
// 0x0008 (0x0008 - 0x0000)
struct ConfigurableGameUserSettings_GetSelectedUpscalerInfo final
{
public:
	bool                                          ShouldLockScreenPercentage;                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DefaultSelectedQualityMode;                        // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetSelectedUpscalerInfo) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetSelectedUpscalerInfo");
static_assert(sizeof(ConfigurableGameUserSettings_GetSelectedUpscalerInfo) == 0x000008, "Wrong size on ConfigurableGameUserSettings_GetSelectedUpscalerInfo");
static_assert(offsetof(ConfigurableGameUserSettings_GetSelectedUpscalerInfo, ShouldLockScreenPercentage) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSelectedUpscalerInfo::ShouldLockScreenPercentage' has a wrong offset!");
static_assert(offsetof(ConfigurableGameUserSettings_GetSelectedUpscalerInfo, DefaultSelectedQualityMode) == 0x000004, "Member 'ConfigurableGameUserSettings_GetSelectedUpscalerInfo::DefaultSelectedQualityMode' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSelectedUpscalerQualityModeScreenPercentage
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage final
{
public:
	float                                         ScreenPercentage;                                  // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage");
static_assert(sizeof(ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage");
static_assert(offsetof(ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage, ScreenPercentage) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage::ScreenPercentage' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSelectedUpscalerShouldLockScreenPercentage
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage final
{
public:
	bool                                          ShouldLockScreenPercentage;                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage");
static_assert(sizeof(ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage");
static_assert(offsetof(ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage, ShouldLockScreenPercentage) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage::ShouldLockScreenPercentage' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSupportedResolutionForCurrentMonitor
// 0x0018 (0x0018 - 0x0000)
struct ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor final
{
public:
	TArray<struct FIntPoint>                      Resolutions;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor");
static_assert(sizeof(ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor) == 0x000018, "Wrong size on ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor");
static_assert(offsetof(ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor, Resolutions) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor::Resolutions' has a wrong offset!");
static_assert(offsetof(ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor, ReturnValue) == 0x000010, "Member 'ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.RequestGameplayFrameRateLimit
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_RequestGameplayFrameRateLimit final
{
public:
	float                                         InLimit;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_RequestGameplayFrameRateLimit) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_RequestGameplayFrameRateLimit");
static_assert(sizeof(ConfigurableGameUserSettings_RequestGameplayFrameRateLimit) == 0x000004, "Wrong size on ConfigurableGameUserSettings_RequestGameplayFrameRateLimit");
static_assert(offsetof(ConfigurableGameUserSettings_RequestGameplayFrameRateLimit, InLimit) == 0x000000, "Member 'ConfigurableGameUserSettings_RequestGameplayFrameRateLimit::InLimit' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.ResetCategoryToCurrentSettings
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_ResetCategoryToCurrentSettings final
{
public:
	ESF_SettingsCategory                          Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_ResetCategoryToCurrentSettings) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_ResetCategoryToCurrentSettings");
static_assert(sizeof(ConfigurableGameUserSettings_ResetCategoryToCurrentSettings) == 0x000001, "Wrong size on ConfigurableGameUserSettings_ResetCategoryToCurrentSettings");
static_assert(offsetof(ConfigurableGameUserSettings_ResetCategoryToCurrentSettings, Category) == 0x000000, "Member 'ConfigurableGameUserSettings_ResetCategoryToCurrentSettings::Category' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetApplicationScale
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetApplicationScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetApplicationScale) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetApplicationScale");
static_assert(sizeof(ConfigurableGameUserSettings_SetApplicationScale) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetApplicationScale");
static_assert(offsetof(ConfigurableGameUserSettings_SetApplicationScale, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetApplicationScale::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetAudioGameCulture
// 0x0010 (0x0010 - 0x0000)
struct ConfigurableGameUserSettings_SetAudioGameCulture final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetAudioGameCulture) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_SetAudioGameCulture");
static_assert(sizeof(ConfigurableGameUserSettings_SetAudioGameCulture) == 0x000010, "Wrong size on ConfigurableGameUserSettings_SetAudioGameCulture");
static_assert(offsetof(ConfigurableGameUserSettings_SetAudioGameCulture, Culture) == 0x000000, "Member 'ConfigurableGameUserSettings_SetAudioGameCulture::Culture' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetAutomaticBattleQTE
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetAutomaticBattleQTE final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetAutomaticBattleQTE) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetAutomaticBattleQTE");
static_assert(sizeof(ConfigurableGameUserSettings_SetAutomaticBattleQTE) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetAutomaticBattleQTE");
static_assert(offsetof(ConfigurableGameUserSettings_SetAutomaticBattleQTE, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetAutomaticBattleQTE::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetBrightnessValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetBrightnessValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetBrightnessValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetBrightnessValue");
static_assert(sizeof(ConfigurableGameUserSettings_SetBrightnessValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetBrightnessValue");
static_assert(offsetof(ConfigurableGameUserSettings_SetBrightnessValue, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetBrightnessValue::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetCameraPitchInputMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetCameraPitchInputMultiplier final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetCameraPitchInputMultiplier) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetCameraPitchInputMultiplier");
static_assert(sizeof(ConfigurableGameUserSettings_SetCameraPitchInputMultiplier) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetCameraPitchInputMultiplier");
static_assert(offsetof(ConfigurableGameUserSettings_SetCameraPitchInputMultiplier, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetCameraPitchInputMultiplier::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetCameraYawInputMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetCameraYawInputMultiplier final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetCameraYawInputMultiplier) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetCameraYawInputMultiplier");
static_assert(sizeof(ConfigurableGameUserSettings_SetCameraYawInputMultiplier) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetCameraYawInputMultiplier");
static_assert(offsetof(ConfigurableGameUserSettings_SetCameraYawInputMultiplier, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetCameraYawInputMultiplier::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetCategoryToDefaults
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetCategoryToDefaults final
{
public:
	ESF_SettingsCategory                          Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetCategoryToDefaults) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetCategoryToDefaults");
static_assert(sizeof(ConfigurableGameUserSettings_SetCategoryToDefaults) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetCategoryToDefaults");
static_assert(offsetof(ConfigurableGameUserSettings_SetCategoryToDefaults, Category) == 0x000000, "Member 'ConfigurableGameUserSettings_SetCategoryToDefaults::Category' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetColorVisionDeficiency
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetColorVisionDeficiency final
{
public:
	EColorVisionDeficiency                        Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetColorVisionDeficiency) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetColorVisionDeficiency");
static_assert(sizeof(ConfigurableGameUserSettings_SetColorVisionDeficiency) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetColorVisionDeficiency");
static_assert(offsetof(ConfigurableGameUserSettings_SetColorVisionDeficiency, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetColorVisionDeficiency::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetColorVisionDeficiencyCorrectionSeverity
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity");
static_assert(sizeof(ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity");
static_assert(offsetof(ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetConsoleGraphicPreset
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetConsoleGraphicPreset final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetConsoleGraphicPreset) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetConsoleGraphicPreset");
static_assert(sizeof(ConfigurableGameUserSettings_SetConsoleGraphicPreset) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetConsoleGraphicPreset");
static_assert(offsetof(ConfigurableGameUserSettings_SetConsoleGraphicPreset, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetConsoleGraphicPreset::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetContrastValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetContrastValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetContrastValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetContrastValue");
static_assert(sizeof(ConfigurableGameUserSettings_SetContrastValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetContrastValue");
static_assert(offsetof(ConfigurableGameUserSettings_SetContrastValue, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetContrastValue::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableCameraMovement
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableCameraMovement final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableCameraMovement) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableCameraMovement");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableCameraMovement) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableCameraMovement");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableCameraMovement, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableCameraMovement::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableCameraShakes
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableCameraShakes final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableCameraShakes) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableCameraShakes");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableCameraShakes) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableCameraShakes");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableCameraShakes, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableCameraShakes::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableChromaticAberration
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableChromaticAberration final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableChromaticAberration) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableChromaticAberration");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableChromaticAberration) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableChromaticAberration");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableChromaticAberration, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableChromaticAberration::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableControllerForceFeedback
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableControllerForceFeedback final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableControllerForceFeedback) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableControllerForceFeedback");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableControllerForceFeedback) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableControllerForceFeedback");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableControllerForceFeedback, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableControllerForceFeedback::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableCustomizationDuringCinematics
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableFilmGrain
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableFilmGrain final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableFilmGrain) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableFilmGrain");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableFilmGrain) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableFilmGrain");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableFilmGrain, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableFilmGrain::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableHoldInputToAim
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableHoldInputToAim final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableHoldInputToAim) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableHoldInputToAim");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableHoldInputToAim) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableHoldInputToAim");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableHoldInputToAim, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableHoldInputToAim::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableHoldInputToSprint
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableHoldInputToSprint final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableHoldInputToSprint) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableHoldInputToSprint");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableHoldInputToSprint) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableHoldInputToSprint");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableHoldInputToSprint, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableHoldInputToSprint::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableMotionBlur final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableMotionBlur) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableMotionBlur");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableMotionBlur) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableMotionBlur");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableMotionBlur, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableMotionBlur::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnablePersistentCenterDot
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnablePersistentCenterDot final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnablePersistentCenterDot) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnablePersistentCenterDot");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnablePersistentCenterDot) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnablePersistentCenterDot");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnablePersistentCenterDot, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnablePersistentCenterDot::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableSubtitles
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableSubtitles final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableSubtitles) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableSubtitles");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableSubtitles) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableSubtitles");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableSubtitles, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableSubtitles::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableSubtitlesSpeakerDisplay
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableSubtitlesSpeakerPersonalColor
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableTutorials
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableTutorials final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableTutorials) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableTutorials");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableTutorials) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableTutorials");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableTutorials, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableTutorials::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetEnableVignette
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetEnableVignette final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetEnableVignette) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetEnableVignette");
static_assert(sizeof(ConfigurableGameUserSettings_SetEnableVignette) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetEnableVignette");
static_assert(offsetof(ConfigurableGameUserSettings_SetEnableVignette, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetEnableVignette::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetFloatConsoleVariable
// 0x0018 (0x0018 - 0x0000)
struct ConfigurableGameUserSettings_SetFloatConsoleVariable final
{
public:
	class FString                                 CVarName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConfigurableGameUserSettings_SetFloatConsoleVariable) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_SetFloatConsoleVariable");
static_assert(sizeof(ConfigurableGameUserSettings_SetFloatConsoleVariable) == 0x000018, "Wrong size on ConfigurableGameUserSettings_SetFloatConsoleVariable");
static_assert(offsetof(ConfigurableGameUserSettings_SetFloatConsoleVariable, CVarName) == 0x000000, "Member 'ConfigurableGameUserSettings_SetFloatConsoleVariable::CVarName' has a wrong offset!");
static_assert(offsetof(ConfigurableGameUserSettings_SetFloatConsoleVariable, Value) == 0x000010, "Member 'ConfigurableGameUserSettings_SetFloatConsoleVariable::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetGameCulture
// 0x0010 (0x0010 - 0x0000)
struct ConfigurableGameUserSettings_SetGameCulture final
{
public:
	class FString                                 Culture;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetGameCulture) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_SetGameCulture");
static_assert(sizeof(ConfigurableGameUserSettings_SetGameCulture) == 0x000010, "Wrong size on ConfigurableGameUserSettings_SetGameCulture");
static_assert(offsetof(ConfigurableGameUserSettings_SetGameCulture, Culture) == 0x000000, "Member 'ConfigurableGameUserSettings_SetGameCulture::Culture' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetGammaValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetGammaValue final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetGammaValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetGammaValue");
static_assert(sizeof(ConfigurableGameUserSettings_SetGammaValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetGammaValue");
static_assert(offsetof(ConfigurableGameUserSettings_SetGammaValue, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetGammaValue::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetIntConsoleVariable
// 0x0018 (0x0018 - 0x0000)
struct ConfigurableGameUserSettings_SetIntConsoleVariable final
{
public:
	class FString                                 CVarName;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConfigurableGameUserSettings_SetIntConsoleVariable) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_SetIntConsoleVariable");
static_assert(sizeof(ConfigurableGameUserSettings_SetIntConsoleVariable) == 0x000018, "Wrong size on ConfigurableGameUserSettings_SetIntConsoleVariable");
static_assert(offsetof(ConfigurableGameUserSettings_SetIntConsoleVariable, CVarName) == 0x000000, "Member 'ConfigurableGameUserSettings_SetIntConsoleVariable::CVarName' has a wrong offset!");
static_assert(offsetof(ConfigurableGameUserSettings_SetIntConsoleVariable, Value) == 0x000010, "Member 'ConfigurableGameUserSettings_SetIntConsoleVariable::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetInvertCameraPitch
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetInvertCameraPitch final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetInvertCameraPitch) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetInvertCameraPitch");
static_assert(sizeof(ConfigurableGameUserSettings_SetInvertCameraPitch) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetInvertCameraPitch");
static_assert(offsetof(ConfigurableGameUserSettings_SetInvertCameraPitch, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetInvertCameraPitch::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetInvertCameraYaw
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_SetInvertCameraYaw final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetInvertCameraYaw) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_SetInvertCameraYaw");
static_assert(sizeof(ConfigurableGameUserSettings_SetInvertCameraYaw) == 0x000001, "Wrong size on ConfigurableGameUserSettings_SetInvertCameraYaw");
static_assert(offsetof(ConfigurableGameUserSettings_SetInvertCameraYaw, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetInvertCameraYaw::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetMasterVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetMasterVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetMasterVolume");
static_assert(sizeof(ConfigurableGameUserSettings_SetMasterVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetMasterVolume");
static_assert(offsetof(ConfigurableGameUserSettings_SetMasterVolume, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetMasterVolume::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetMusicVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetMusicVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetMusicVolume");
static_assert(sizeof(ConfigurableGameUserSettings_SetMusicVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetMusicVolume");
static_assert(offsetof(ConfigurableGameUserSettings_SetMusicVolume, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetMusicVolume::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetSelectedDisplayMonitor
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetSelectedDisplayMonitor final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetSelectedDisplayMonitor) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetSelectedDisplayMonitor");
static_assert(sizeof(ConfigurableGameUserSettings_SetSelectedDisplayMonitor) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetSelectedDisplayMonitor");
static_assert(offsetof(ConfigurableGameUserSettings_SetSelectedDisplayMonitor, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetSelectedDisplayMonitor::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetSpecialEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetSpecialEffectsVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetSpecialEffectsVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetSpecialEffectsVolume");
static_assert(sizeof(ConfigurableGameUserSettings_SetSpecialEffectsVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetSpecialEffectsVolume");
static_assert(offsetof(ConfigurableGameUserSettings_SetSpecialEffectsVolume, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetSpecialEffectsVolume::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetSubtitlesSize
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetSubtitlesSize final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetSubtitlesSize) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetSubtitlesSize");
static_assert(sizeof(ConfigurableGameUserSettings_SetSubtitlesSize) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetSubtitlesSize");
static_assert(offsetof(ConfigurableGameUserSettings_SetSubtitlesSize, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetSubtitlesSize::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetUpscalerQualityModeUsedValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue");
static_assert(sizeof(ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue");
static_assert(offsetof(ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetUpscalerUsedValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetUpscalerUsedValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetUpscalerUsedValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetUpscalerUsedValue");
static_assert(sizeof(ConfigurableGameUserSettings_SetUpscalerUsedValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetUpscalerUsedValue");
static_assert(offsetof(ConfigurableGameUserSettings_SetUpscalerUsedValue, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetUpscalerUsedValue::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetUserInterfaceVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetUserInterfaceVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetUserInterfaceVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetUserInterfaceVolume");
static_assert(sizeof(ConfigurableGameUserSettings_SetUserInterfaceVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetUserInterfaceVolume");
static_assert(offsetof(ConfigurableGameUserSettings_SetUserInterfaceVolume, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetUserInterfaceVolume::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.SetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_SetVoiceVolume final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_SetVoiceVolume");
static_assert(sizeof(ConfigurableGameUserSettings_SetVoiceVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_SetVoiceVolume");
static_assert(offsetof(ConfigurableGameUserSettings_SetVoiceVolume, Value) == 0x000000, "Member 'ConfigurableGameUserSettings_SetVoiceVolume::Value' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetApplicationScale
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetApplicationScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetApplicationScale) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetApplicationScale");
static_assert(sizeof(ConfigurableGameUserSettings_GetApplicationScale) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetApplicationScale");
static_assert(offsetof(ConfigurableGameUserSettings_GetApplicationScale, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetApplicationScale::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetAudioGameCulture
// 0x0010 (0x0010 - 0x0000)
struct ConfigurableGameUserSettings_GetAudioGameCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetAudioGameCulture) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetAudioGameCulture");
static_assert(sizeof(ConfigurableGameUserSettings_GetAudioGameCulture) == 0x000010, "Wrong size on ConfigurableGameUserSettings_GetAudioGameCulture");
static_assert(offsetof(ConfigurableGameUserSettings_GetAudioGameCulture, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetAudioGameCulture::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetBrightnessValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetBrightnessValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetBrightnessValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetBrightnessValue");
static_assert(sizeof(ConfigurableGameUserSettings_GetBrightnessValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetBrightnessValue");
static_assert(offsetof(ConfigurableGameUserSettings_GetBrightnessValue, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetBrightnessValue::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetCameraPitchInputMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetCameraPitchInputMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetCameraPitchInputMultiplier) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetCameraPitchInputMultiplier");
static_assert(sizeof(ConfigurableGameUserSettings_GetCameraPitchInputMultiplier) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetCameraPitchInputMultiplier");
static_assert(offsetof(ConfigurableGameUserSettings_GetCameraPitchInputMultiplier, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetCameraPitchInputMultiplier::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetCameraYawInputMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetCameraYawInputMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetCameraYawInputMultiplier) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetCameraYawInputMultiplier");
static_assert(sizeof(ConfigurableGameUserSettings_GetCameraYawInputMultiplier) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetCameraYawInputMultiplier");
static_assert(offsetof(ConfigurableGameUserSettings_GetCameraYawInputMultiplier, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetCameraYawInputMultiplier::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetColorVisionDeficiency
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetColorVisionDeficiency final
{
public:
	EColorVisionDeficiency                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetColorVisionDeficiency) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetColorVisionDeficiency");
static_assert(sizeof(ConfigurableGameUserSettings_GetColorVisionDeficiency) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetColorVisionDeficiency");
static_assert(offsetof(ConfigurableGameUserSettings_GetColorVisionDeficiency, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetColorVisionDeficiency::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetColorVisionDeficiencyCorrectionSeverity
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity");
static_assert(sizeof(ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity");
static_assert(offsetof(ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetConsoleGraphicPreset
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetConsoleGraphicPreset final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetConsoleGraphicPreset) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetConsoleGraphicPreset");
static_assert(sizeof(ConfigurableGameUserSettings_GetConsoleGraphicPreset) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetConsoleGraphicPreset");
static_assert(offsetof(ConfigurableGameUserSettings_GetConsoleGraphicPreset, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetConsoleGraphicPreset::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetContrastValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetContrastValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetContrastValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetContrastValue");
static_assert(sizeof(ConfigurableGameUserSettings_GetContrastValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetContrastValue");
static_assert(offsetof(ConfigurableGameUserSettings_GetContrastValue, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetContrastValue::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableAutomaticBattleQTE
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableCameraMovement
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableCameraMovement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableCameraMovement) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableCameraMovement");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableCameraMovement) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableCameraMovement");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableCameraMovement, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableCameraMovement::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableCameraShakes
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableCameraShakes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableCameraShakes) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableCameraShakes");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableCameraShakes) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableCameraShakes");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableCameraShakes, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableCameraShakes::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableChromaticAberration
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableChromaticAberration final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableChromaticAberration) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableChromaticAberration");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableChromaticAberration) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableChromaticAberration");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableChromaticAberration, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableChromaticAberration::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableControllerForceFeedback
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableControllerForceFeedback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableControllerForceFeedback) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableControllerForceFeedback");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableControllerForceFeedback) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableControllerForceFeedback");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableControllerForceFeedback, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableControllerForceFeedback::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableCustomizationDuringCinematics
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableFilmGrain
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableFilmGrain final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableFilmGrain) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableFilmGrain");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableFilmGrain) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableFilmGrain");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableFilmGrain, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableFilmGrain::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableHoldInputToAim
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableHoldInputToAim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableHoldInputToAim) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableHoldInputToAim");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableHoldInputToAim) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableHoldInputToAim");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableHoldInputToAim, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableHoldInputToAim::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableHoldInputToSprint
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableHoldInputToSprint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableHoldInputToSprint) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableHoldInputToSprint");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableHoldInputToSprint) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableHoldInputToSprint");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableHoldInputToSprint, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableHoldInputToSprint::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableMotionBlur
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableMotionBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableMotionBlur) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableMotionBlur");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableMotionBlur) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableMotionBlur");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableMotionBlur, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableMotionBlur::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnablePersistentCenterDot
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnablePersistentCenterDot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnablePersistentCenterDot) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnablePersistentCenterDot");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnablePersistentCenterDot) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnablePersistentCenterDot");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnablePersistentCenterDot, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnablePersistentCenterDot::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableSubtitles
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableSubtitles) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableSubtitles");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableSubtitles) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableSubtitles");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableSubtitles, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableSubtitles::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableSubtitlesSpeakerDisplay
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableSubtitlesSpeakerPersonalColor
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableTutorials
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableTutorials final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableTutorials) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableTutorials");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableTutorials) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableTutorials");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableTutorials, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableTutorials::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetEnableVignette
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetEnableVignette final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetEnableVignette) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetEnableVignette");
static_assert(sizeof(ConfigurableGameUserSettings_GetEnableVignette) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetEnableVignette");
static_assert(offsetof(ConfigurableGameUserSettings_GetEnableVignette, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetEnableVignette::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetGameCulture
// 0x0010 (0x0010 - 0x0000)
struct ConfigurableGameUserSettings_GetGameCulture final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetGameCulture) == 0x000008, "Wrong alignment on ConfigurableGameUserSettings_GetGameCulture");
static_assert(sizeof(ConfigurableGameUserSettings_GetGameCulture) == 0x000010, "Wrong size on ConfigurableGameUserSettings_GetGameCulture");
static_assert(offsetof(ConfigurableGameUserSettings_GetGameCulture, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetGameCulture::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetGammaValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetGammaValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetGammaValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetGammaValue");
static_assert(sizeof(ConfigurableGameUserSettings_GetGammaValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetGammaValue");
static_assert(offsetof(ConfigurableGameUserSettings_GetGammaValue, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetGammaValue::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetInvertCameraPitch
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetInvertCameraPitch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetInvertCameraPitch) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetInvertCameraPitch");
static_assert(sizeof(ConfigurableGameUserSettings_GetInvertCameraPitch) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetInvertCameraPitch");
static_assert(offsetof(ConfigurableGameUserSettings_GetInvertCameraPitch, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetInvertCameraPitch::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetInvertCameraYaw
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_GetInvertCameraYaw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetInvertCameraYaw) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_GetInvertCameraYaw");
static_assert(sizeof(ConfigurableGameUserSettings_GetInvertCameraYaw) == 0x000001, "Wrong size on ConfigurableGameUserSettings_GetInvertCameraYaw");
static_assert(offsetof(ConfigurableGameUserSettings_GetInvertCameraYaw, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetInvertCameraYaw::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetLastCPUHardwareBenchmarkResult
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult");
static_assert(sizeof(ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult");
static_assert(offsetof(ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetLastGPUHardwareBenchmarkResult
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult");
static_assert(sizeof(ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult");
static_assert(offsetof(ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetMasterVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetMasterVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetMasterVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetMasterVolume");
static_assert(sizeof(ConfigurableGameUserSettings_GetMasterVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetMasterVolume");
static_assert(offsetof(ConfigurableGameUserSettings_GetMasterVolume, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetMasterVolume::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetMusicVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetMusicVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetMusicVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetMusicVolume");
static_assert(sizeof(ConfigurableGameUserSettings_GetMusicVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetMusicVolume");
static_assert(offsetof(ConfigurableGameUserSettings_GetMusicVolume, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetMusicVolume::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSelectedDisplayMonitor
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetSelectedDisplayMonitor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetSelectedDisplayMonitor) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetSelectedDisplayMonitor");
static_assert(sizeof(ConfigurableGameUserSettings_GetSelectedDisplayMonitor) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetSelectedDisplayMonitor");
static_assert(offsetof(ConfigurableGameUserSettings_GetSelectedDisplayMonitor, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSelectedDisplayMonitor::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSpecialEffectsVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetSpecialEffectsVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetSpecialEffectsVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetSpecialEffectsVolume");
static_assert(sizeof(ConfigurableGameUserSettings_GetSpecialEffectsVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetSpecialEffectsVolume");
static_assert(offsetof(ConfigurableGameUserSettings_GetSpecialEffectsVolume, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSpecialEffectsVolume::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetSubtitlesSize
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetSubtitlesSize final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetSubtitlesSize) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetSubtitlesSize");
static_assert(sizeof(ConfigurableGameUserSettings_GetSubtitlesSize) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetSubtitlesSize");
static_assert(offsetof(ConfigurableGameUserSettings_GetSubtitlesSize, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetSubtitlesSize::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetUpscalerQualityModeUsedValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue");
static_assert(sizeof(ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue");
static_assert(offsetof(ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetUpscalerUsedValue
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetUpscalerUsedValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetUpscalerUsedValue) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetUpscalerUsedValue");
static_assert(sizeof(ConfigurableGameUserSettings_GetUpscalerUsedValue) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetUpscalerUsedValue");
static_assert(offsetof(ConfigurableGameUserSettings_GetUpscalerUsedValue, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetUpscalerUsedValue::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetUserInterfaceVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetUserInterfaceVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetUserInterfaceVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetUserInterfaceVolume");
static_assert(sizeof(ConfigurableGameUserSettings_GetUserInterfaceVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetUserInterfaceVolume");
static_assert(offsetof(ConfigurableGameUserSettings_GetUserInterfaceVolume, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetUserInterfaceVolume::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.GetVoiceVolume
// 0x0004 (0x0004 - 0x0000)
struct ConfigurableGameUserSettings_GetVoiceVolume final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_GetVoiceVolume) == 0x000004, "Wrong alignment on ConfigurableGameUserSettings_GetVoiceVolume");
static_assert(sizeof(ConfigurableGameUserSettings_GetVoiceVolume) == 0x000004, "Wrong size on ConfigurableGameUserSettings_GetVoiceVolume");
static_assert(offsetof(ConfigurableGameUserSettings_GetVoiceVolume, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_GetVoiceVolume::ReturnValue' has a wrong offset!");

// Function SandFall.ConfigurableGameUserSettings.IsPendingScalabilityChangesAtSameQuality
// 0x0001 (0x0001 - 0x0000)
struct ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality) == 0x000001, "Wrong alignment on ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality");
static_assert(sizeof(ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality) == 0x000001, "Wrong size on ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality");
static_assert(offsetof(ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality, ReturnValue) == 0x000000, "Member 'ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality::ReturnValue' has a wrong offset!");

// Function SandFall.CustomizationHelpers.GetCharacterBody
// 0x0010 (0x0010 - 0x0000)
struct CustomizationHelpers_GetCharacterBody final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationHelpers_GetCharacterBody) == 0x000008, "Wrong alignment on CustomizationHelpers_GetCharacterBody");
static_assert(sizeof(CustomizationHelpers_GetCharacterBody) == 0x000010, "Wrong size on CustomizationHelpers_GetCharacterBody");
static_assert(offsetof(CustomizationHelpers_GetCharacterBody, Character) == 0x000000, "Member 'CustomizationHelpers_GetCharacterBody::Character' has a wrong offset!");
static_assert(offsetof(CustomizationHelpers_GetCharacterBody, ReturnValue) == 0x000008, "Member 'CustomizationHelpers_GetCharacterBody::ReturnValue' has a wrong offset!");

// Function SandFall.CustomizationHelpers.GetCharacterFace
// 0x0010 (0x0010 - 0x0000)
struct CustomizationHelpers_GetCharacterFace final
{
public:
	class AActor*                                 Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizationHelpers_GetCharacterFace) == 0x000008, "Wrong alignment on CustomizationHelpers_GetCharacterFace");
static_assert(sizeof(CustomizationHelpers_GetCharacterFace) == 0x000010, "Wrong size on CustomizationHelpers_GetCharacterFace");
static_assert(offsetof(CustomizationHelpers_GetCharacterFace, Character) == 0x000000, "Member 'CustomizationHelpers_GetCharacterFace::Character' has a wrong offset!");
static_assert(offsetof(CustomizationHelpers_GetCharacterFace, ReturnValue) == 0x000008, "Member 'CustomizationHelpers_GetCharacterFace::ReturnValue' has a wrong offset!");

// Function SandFall.DataLayerEditorHelpers.SetDataLayersVisibility
// 0x0018 (0x0018 - 0x0000)
struct DataLayerEditorHelpers_SetDataLayersVisibility final
{
public:
	TArray<class UDataLayerInstance*>             DataLayers;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DataLayerEditorHelpers_SetDataLayersVisibility) == 0x000008, "Wrong alignment on DataLayerEditorHelpers_SetDataLayersVisibility");
static_assert(sizeof(DataLayerEditorHelpers_SetDataLayersVisibility) == 0x000018, "Wrong size on DataLayerEditorHelpers_SetDataLayersVisibility");
static_assert(offsetof(DataLayerEditorHelpers_SetDataLayersVisibility, DataLayers) == 0x000000, "Member 'DataLayerEditorHelpers_SetDataLayersVisibility::DataLayers' has a wrong offset!");
static_assert(offsetof(DataLayerEditorHelpers_SetDataLayersVisibility, bIsVisible) == 0x000010, "Member 'DataLayerEditorHelpers_SetDataLayersVisibility::bIsVisible' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.DevelopmentTextToSpeech
// 0x0018 (0x0018 - 0x0000)
struct DialogueBlueprintHelpers_DevelopmentTextToSpeech final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USF_BlueprintLatentAction*              LatentAction;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_DevelopmentTextToSpeech) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_DevelopmentTextToSpeech");
static_assert(sizeof(DialogueBlueprintHelpers_DevelopmentTextToSpeech) == 0x000018, "Wrong size on DialogueBlueprintHelpers_DevelopmentTextToSpeech");
static_assert(offsetof(DialogueBlueprintHelpers_DevelopmentTextToSpeech, Text) == 0x000000, "Member 'DialogueBlueprintHelpers_DevelopmentTextToSpeech::Text' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_DevelopmentTextToSpeech, LatentAction) == 0x000010, "Member 'DialogueBlueprintHelpers_DevelopmentTextToSpeech::LatentAction' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.GetDialogueWaveFirstContext
// 0x0020 (0x0020 - 0x0000)
struct DialogueBlueprintHelpers_GetDialogueWaveFirstContext final
{
public:
	const class UDialogueWave*                    _dialogueWave;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogueContext                       ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_GetDialogueWaveFirstContext) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_GetDialogueWaveFirstContext");
static_assert(sizeof(DialogueBlueprintHelpers_GetDialogueWaveFirstContext) == 0x000020, "Wrong size on DialogueBlueprintHelpers_GetDialogueWaveFirstContext");
static_assert(offsetof(DialogueBlueprintHelpers_GetDialogueWaveFirstContext, _dialogueWave) == 0x000000, "Member 'DialogueBlueprintHelpers_GetDialogueWaveFirstContext::_dialogueWave' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_GetDialogueWaveFirstContext, ReturnValue) == 0x000008, "Member 'DialogueBlueprintHelpers_GetDialogueWaveFirstContext::ReturnValue' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.GetFirstSoundFromDialogueWave
// 0x0010 (0x0010 - 0x0000)
struct DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave final
{
public:
	class UDialogueWave*                          DialogueWave;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundWave*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave");
static_assert(sizeof(DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave) == 0x000010, "Wrong size on DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave");
static_assert(offsetof(DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave, DialogueWave) == 0x000000, "Member 'DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave::DialogueWave' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave, ReturnValue) == 0x000008, "Member 'DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave::ReturnValue' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.GetTextToSpeechEngineSubsystem
// 0x0008 (0x0008 - 0x0000)
struct DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem final
{
public:
	class UTextToSpeechEngineSubsystem*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem");
static_assert(sizeof(DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem) == 0x000008, "Wrong size on DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem");
static_assert(offsetof(DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem, ReturnValue) == 0x000000, "Member 'DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem::ReturnValue' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.PlaySandfallDialogue2D
// 0x0020 (0x0020 - 0x0000)
struct DialogueBlueprintHelpers_PlaySandfallDialogue2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueWave*                          Dialogue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DialogueBlueprintHelpers_PlaySandfallDialogue2D) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_PlaySandfallDialogue2D");
static_assert(sizeof(DialogueBlueprintHelpers_PlaySandfallDialogue2D) == 0x000020, "Wrong size on DialogueBlueprintHelpers_PlaySandfallDialogue2D");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogue2D, WorldContextObject) == 0x000000, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogue2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogue2D, Dialogue) == 0x000008, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogue2D::Dialogue' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogue2D, VolumeMultiplier) == 0x000010, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogue2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogue2D, PitchMultiplier) == 0x000014, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogue2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogue2D, StartTime) == 0x000018, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogue2D::StartTime' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.PlaySandfallDialogueAtLocation
// 0x0058 (0x0058 - 0x0000)
struct DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueWave*                          Dialogue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation");
static_assert(sizeof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation) == 0x000058, "Wrong size on DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, WorldContextObject) == 0x000000, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, Dialogue) == 0x000008, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::Dialogue' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, Location) == 0x000010, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::Location' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, Rotation) == 0x000028, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, VolumeMultiplier) == 0x000040, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, PitchMultiplier) == 0x000044, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, StartTime) == 0x000048, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation, AttenuationSettings) == 0x000050, "Member 'DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation::AttenuationSettings' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.SpawnSandfallDialogue2D
// 0x0028 (0x0028 - 0x0000)
struct DialogueBlueprintHelpers_SpawnSandfallDialogue2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueWave*                          Dialogue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_SpawnSandfallDialogue2D");
static_assert(sizeof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D) == 0x000028, "Wrong size on DialogueBlueprintHelpers_SpawnSandfallDialogue2D");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, WorldContextObject) == 0x000000, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, Dialogue) == 0x000008, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::Dialogue' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, VolumeMultiplier) == 0x000010, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, PitchMultiplier) == 0x000014, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, StartTime) == 0x000018, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::StartTime' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, bAutoDestroy) == 0x00001C, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogue2D, ReturnValue) == 0x000020, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogue2D::ReturnValue' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.SpawnSandfallDialogueAtLocation
// 0x0068 (0x0068 - 0x0000)
struct DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogueWave*                          Dialogue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0044(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0050(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0060(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation");
static_assert(sizeof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation) == 0x000068, "Wrong size on DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, WorldContextObject) == 0x000000, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, Dialogue) == 0x000008, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::Dialogue' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, Location) == 0x000010, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::Location' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, Rotation) == 0x000028, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, VolumeMultiplier) == 0x000040, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, PitchMultiplier) == 0x000044, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, StartTime) == 0x000048, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::StartTime' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, AttenuationSettings) == 0x000050, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, bAutoDestroy) == 0x000058, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation, ReturnValue) == 0x000060, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation::ReturnValue' has a wrong offset!");

// Function SandFall.DialogueBlueprintHelpers.SpawnSandfallDialogueAttached
// 0x0070 (0x0070 - 0x0000)
struct DialogueBlueprintHelpers_SpawnSandfallDialogueAttached final
{
public:
	class UDialogueWave*                          Dialogue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopWhenAttachedToDestroyed;                      // 0x0049(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeMultiplier;                                  // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PitchMultiplier;                                   // 0x0050(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0054(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AttenuationSettings;                               // 0x0058(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAudioComponent*                        ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached) == 0x000008, "Wrong alignment on DialogueBlueprintHelpers_SpawnSandfallDialogueAttached");
static_assert(sizeof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached) == 0x000070, "Wrong size on DialogueBlueprintHelpers_SpawnSandfallDialogueAttached");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, Dialogue) == 0x000000, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::Dialogue' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, AttachToComponent) == 0x000008, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, AttachPointName) == 0x000010, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, Location) == 0x000018, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::Location' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, Rotation) == 0x000030, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::Rotation' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, LocationType) == 0x000048, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::LocationType' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, bStopWhenAttachedToDestroyed) == 0x000049, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::bStopWhenAttachedToDestroyed' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, VolumeMultiplier) == 0x00004C, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, PitchMultiplier) == 0x000050, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::PitchMultiplier' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, StartTime) == 0x000054, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::StartTime' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, AttenuationSettings) == 0x000058, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::AttenuationSettings' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, bAutoDestroy) == 0x000060, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::bAutoDestroy' has a wrong offset!");
static_assert(offsetof(DialogueBlueprintHelpers_SpawnSandfallDialogueAttached, ReturnValue) == 0x000068, "Member 'DialogueBlueprintHelpers_SpawnSandfallDialogueAttached::ReturnValue' has a wrong offset!");

// Function SandFall.SF_EditorDebugDrawSource.Editor_DrawDebugShapes
// 0x0001 (0x0001 - 0x0000)
struct SF_EditorDebugDrawSource_Editor_DrawDebugShapes final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_EditorDebugDrawSource_Editor_DrawDebugShapes) == 0x000001, "Wrong alignment on SF_EditorDebugDrawSource_Editor_DrawDebugShapes");
static_assert(sizeof(SF_EditorDebugDrawSource_Editor_DrawDebugShapes) == 0x000001, "Wrong size on SF_EditorDebugDrawSource_Editor_DrawDebugShapes");
static_assert(offsetof(SF_EditorDebugDrawSource_Editor_DrawDebugShapes, ReturnValue) == 0x000000, "Member 'SF_EditorDebugDrawSource_Editor_DrawDebugShapes::ReturnValue' has a wrong offset!");

// Function SandFall.SF_EditorDebugDrawSource.Editor_GetDebugShapes
// 0x0028 (0x0028 - 0x0000)
struct SF_EditorDebugDrawSource_Editor_GetDebugShapes final
{
public:
	TArray<struct FEditorDebugShape_Arrow>        Arrows;                                            // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FEditorDebugShape_Arrow>        Lines;                                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_EditorDebugDrawSource_Editor_GetDebugShapes) == 0x000008, "Wrong alignment on SF_EditorDebugDrawSource_Editor_GetDebugShapes");
static_assert(sizeof(SF_EditorDebugDrawSource_Editor_GetDebugShapes) == 0x000028, "Wrong size on SF_EditorDebugDrawSource_Editor_GetDebugShapes");
static_assert(offsetof(SF_EditorDebugDrawSource_Editor_GetDebugShapes, Arrows) == 0x000000, "Member 'SF_EditorDebugDrawSource_Editor_GetDebugShapes::Arrows' has a wrong offset!");
static_assert(offsetof(SF_EditorDebugDrawSource_Editor_GetDebugShapes, Lines) == 0x000010, "Member 'SF_EditorDebugDrawSource_Editor_GetDebugShapes::Lines' has a wrong offset!");
static_assert(offsetof(SF_EditorDebugDrawSource_Editor_GetDebugShapes, ReturnValue) == 0x000020, "Member 'SF_EditorDebugDrawSource_Editor_GetDebugShapes::ReturnValue' has a wrong offset!");

// Function SandFall.EditorCheckableForErrors.CheckForErrors
// 0x0018 (0x0018 - 0x0000)
struct EditorCheckableForErrors_CheckForErrors final
{
public:
	TArray<class FText>                           ErrorMessages;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EditorCheckableForErrors_CheckForErrors) == 0x000008, "Wrong alignment on EditorCheckableForErrors_CheckForErrors");
static_assert(sizeof(EditorCheckableForErrors_CheckForErrors) == 0x000018, "Wrong size on EditorCheckableForErrors_CheckForErrors");
static_assert(offsetof(EditorCheckableForErrors_CheckForErrors, ErrorMessages) == 0x000000, "Member 'EditorCheckableForErrors_CheckForErrors::ErrorMessages' has a wrong offset!");
static_assert(offsetof(EditorCheckableForErrors_CheckForErrors, ReturnValue) == 0x000010, "Member 'EditorCheckableForErrors_CheckForErrors::ReturnValue' has a wrong offset!");

// Function SandFall.ExtendedPlayerCameraManager.ShouldPlayCameraShake
// 0x0001 (0x0001 - 0x0000)
struct ExtendedPlayerCameraManager_ShouldPlayCameraShake final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendedPlayerCameraManager_ShouldPlayCameraShake) == 0x000001, "Wrong alignment on ExtendedPlayerCameraManager_ShouldPlayCameraShake");
static_assert(sizeof(ExtendedPlayerCameraManager_ShouldPlayCameraShake) == 0x000001, "Wrong size on ExtendedPlayerCameraManager_ShouldPlayCameraShake");
static_assert(offsetof(ExtendedPlayerCameraManager_ShouldPlayCameraShake, ReturnValue) == 0x000000, "Member 'ExtendedPlayerCameraManager_ShouldPlayCameraShake::ReturnValue' has a wrong offset!");

// Function SandFall.GameActionInstance.ExecuteGameAction
// 0x0008 (0x0008 - 0x0000)
struct GameActionInstance_ExecuteGameAction final
{
public:
	const class APlayerController*                Controller;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameActionInstance_ExecuteGameAction) == 0x000008, "Wrong alignment on GameActionInstance_ExecuteGameAction");
static_assert(sizeof(GameActionInstance_ExecuteGameAction) == 0x000008, "Wrong size on GameActionInstance_ExecuteGameAction");
static_assert(offsetof(GameActionInstance_ExecuteGameAction, Controller) == 0x000000, "Member 'GameActionInstance_ExecuteGameAction::Controller' has a wrong offset!");

// Function SandFall.GameActionInstance.GetDebugString
// 0x0010 (0x0010 - 0x0000)
struct GameActionInstance_GetDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameActionInstance_GetDebugString) == 0x000008, "Wrong alignment on GameActionInstance_GetDebugString");
static_assert(sizeof(GameActionInstance_GetDebugString) == 0x000010, "Wrong size on GameActionInstance_GetDebugString");
static_assert(offsetof(GameActionInstance_GetDebugString, ReturnValue) == 0x000000, "Member 'GameActionInstance_GetDebugString::ReturnValue' has a wrong offset!");

// Function SandFall.GameActionInstance.ShouldBlockAutoSaveDuringExecution
// 0x0001 (0x0001 - 0x0000)
struct GameActionInstance_ShouldBlockAutoSaveDuringExecution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameActionInstance_ShouldBlockAutoSaveDuringExecution) == 0x000001, "Wrong alignment on GameActionInstance_ShouldBlockAutoSaveDuringExecution");
static_assert(sizeof(GameActionInstance_ShouldBlockAutoSaveDuringExecution) == 0x000001, "Wrong size on GameActionInstance_ShouldBlockAutoSaveDuringExecution");
static_assert(offsetof(GameActionInstance_ShouldBlockAutoSaveDuringExecution, ReturnValue) == 0x000000, "Member 'GameActionInstance_ShouldBlockAutoSaveDuringExecution::ReturnValue' has a wrong offset!");

// Function SandFall.GameActionInstance.ShouldTriggerAutoSaveAfterExecution
// 0x0001 (0x0001 - 0x0000)
struct GameActionInstance_ShouldTriggerAutoSaveAfterExecution final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameActionInstance_ShouldTriggerAutoSaveAfterExecution) == 0x000001, "Wrong alignment on GameActionInstance_ShouldTriggerAutoSaveAfterExecution");
static_assert(sizeof(GameActionInstance_ShouldTriggerAutoSaveAfterExecution) == 0x000001, "Wrong size on GameActionInstance_ShouldTriggerAutoSaveAfterExecution");
static_assert(offsetof(GameActionInstance_ShouldTriggerAutoSaveAfterExecution, ReturnValue) == 0x000000, "Member 'GameActionInstance_ShouldTriggerAutoSaveAfterExecution::ReturnValue' has a wrong offset!");

// Function SandFall.GameAction.GetInstanceClass
// 0x0008 (0x0008 - 0x0000)
struct GameAction_GetInstanceClass final
{
public:
	TSubclassOf<class UGameActionInstance>        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameAction_GetInstanceClass) == 0x000008, "Wrong alignment on GameAction_GetInstanceClass");
static_assert(sizeof(GameAction_GetInstanceClass) == 0x000008, "Wrong size on GameAction_GetInstanceClass");
static_assert(offsetof(GameAction_GetInstanceClass, ReturnValue) == 0x000000, "Member 'GameAction_GetInstanceClass::ReturnValue' has a wrong offset!");

// Function SandFall.SkillDataAsset.HasSkillTag
// 0x000C (0x000C - 0x0000)
struct SkillDataAsset_HasSkillTag final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillDataAsset_HasSkillTag) == 0x000004, "Wrong alignment on SkillDataAsset_HasSkillTag");
static_assert(sizeof(SkillDataAsset_HasSkillTag) == 0x00000C, "Wrong size on SkillDataAsset_HasSkillTag");
static_assert(offsetof(SkillDataAsset_HasSkillTag, Tag) == 0x000000, "Member 'SkillDataAsset_HasSkillTag::Tag' has a wrong offset!");
static_assert(offsetof(SkillDataAsset_HasSkillTag, ReturnValue) == 0x000008, "Member 'SkillDataAsset_HasSkillTag::ReturnValue' has a wrong offset!");

// Function SandFall.GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper.AddGameplayFrameMessage
// 0x0010 (0x0010 - 0x0000)
struct GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage final
{
public:
	class FText                                   _content;                                          // 0x0000(0x0010)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage) == 0x000008, "Wrong alignment on GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage");
static_assert(sizeof(GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage) == 0x000010, "Wrong size on GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage");
static_assert(offsetof(GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage, _content) == 0x000000, "Member 'GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage::_content' has a wrong offset!");

// Function SandFall.GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper.IsGameplayDebugCategoryEnabled
// 0x0001 (0x0001 - 0x0000)
struct GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled) == 0x000001, "Wrong alignment on GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled");
static_assert(sizeof(GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled) == 0x000001, "Wrong size on GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled");
static_assert(offsetof(GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled, ReturnValue) == 0x000000, "Member 'GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled::ReturnValue' has a wrong offset!");

// Function SandFall.GameplayTagHelpers.GetGameplayTagFromName
// 0x0010 (0x0010 - 0x0000)
struct GameplayTagHelpers_GetGameplayTagFromName final
{
public:
	class FName                                   TagName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagHelpers_GetGameplayTagFromName) == 0x000004, "Wrong alignment on GameplayTagHelpers_GetGameplayTagFromName");
static_assert(sizeof(GameplayTagHelpers_GetGameplayTagFromName) == 0x000010, "Wrong size on GameplayTagHelpers_GetGameplayTagFromName");
static_assert(offsetof(GameplayTagHelpers_GetGameplayTagFromName, TagName) == 0x000000, "Member 'GameplayTagHelpers_GetGameplayTagFromName::TagName' has a wrong offset!");
static_assert(offsetof(GameplayTagHelpers_GetGameplayTagFromName, ReturnValue) == 0x000008, "Member 'GameplayTagHelpers_GetGameplayTagFromName::ReturnValue' has a wrong offset!");

// Function SandFall.GameplayTagHelpers.GetGameplayTagFromString
// 0x0018 (0x0018 - 0x0000)
struct GameplayTagHelpers_GetGameplayTagFromString final
{
public:
	class FString                                 TagName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayTagHelpers_GetGameplayTagFromString) == 0x000008, "Wrong alignment on GameplayTagHelpers_GetGameplayTagFromString");
static_assert(sizeof(GameplayTagHelpers_GetGameplayTagFromString) == 0x000018, "Wrong size on GameplayTagHelpers_GetGameplayTagFromString");
static_assert(offsetof(GameplayTagHelpers_GetGameplayTagFromString, TagName) == 0x000000, "Member 'GameplayTagHelpers_GetGameplayTagFromString::TagName' has a wrong offset!");
static_assert(offsetof(GameplayTagHelpers_GetGameplayTagFromString, ReturnValue) == 0x000010, "Member 'GameplayTagHelpers_GetGameplayTagFromString::ReturnValue' has a wrong offset!");

// Function SandFall.GeometryCollectionBlueprintHelpers.GetGeometryCollectionMaterials
// 0x0018 (0x0018 - 0x0000)
struct GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials final
{
public:
	class UGeometryCollection*                    GeometryCollection;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials) == 0x000008, "Wrong alignment on GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials");
static_assert(sizeof(GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials) == 0x000018, "Wrong size on GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials, GeometryCollection) == 0x000000, "Member 'GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials::GeometryCollection' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials, ReturnValue) == 0x000008, "Member 'GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials::ReturnValue' has a wrong offset!");

// Function SandFall.GeometryCollectionBlueprintHelpers.RecreatePhysicsState
// 0x0008 (0x0008 - 0x0000)
struct GeometryCollectionBlueprintHelpers_RecreatePhysicsState final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionBlueprintHelpers_RecreatePhysicsState) == 0x000008, "Wrong alignment on GeometryCollectionBlueprintHelpers_RecreatePhysicsState");
static_assert(sizeof(GeometryCollectionBlueprintHelpers_RecreatePhysicsState) == 0x000008, "Wrong size on GeometryCollectionBlueprintHelpers_RecreatePhysicsState");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_RecreatePhysicsState, Component) == 0x000000, "Member 'GeometryCollectionBlueprintHelpers_RecreatePhysicsState::Component' has a wrong offset!");

// Function SandFall.GeometryCollectionBlueprintHelpers.SetCollisionResponseToChannel
// 0x0010 (0x0010 - 0x0000)
struct GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel final
{
public:
	class UGeometryCollectionComponent*           GeometryCollectionComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             Channel;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionResponse                            NewResponse;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel) == 0x000008, "Wrong alignment on GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel");
static_assert(sizeof(GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel) == 0x000010, "Wrong size on GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel, GeometryCollectionComponent) == 0x000000, "Member 'GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel::GeometryCollectionComponent' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel, Channel) == 0x000008, "Member 'GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel::Channel' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel, NewResponse) == 0x000009, "Member 'GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel::NewResponse' has a wrong offset!");

// Function SandFall.GeometryCollectionBlueprintHelpers.SpawnGeometryCollectionComponentWithRestCollection
// 0x0080 (0x0080 - 0x0000)
struct GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection final
{
public:
	class AActor*                                 OwnerActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollection*                    InRestCollection;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             InTransform;                                       // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollectionComponent*           ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection) == 0x000010, "Wrong alignment on GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection");
static_assert(sizeof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection) == 0x000080, "Wrong size on GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection, OwnerActor) == 0x000000, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection::OwnerActor' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection, InRestCollection) == 0x000008, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection::InRestCollection' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection, InTransform) == 0x000010, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection::InTransform' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection, ReturnValue) == 0x000070, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection::ReturnValue' has a wrong offset!");

// Function SandFall.GeometryCollectionBlueprintHelpers.SpawnGeometryCollectionWithRestCollection
// 0x0080 (0x0080 - 0x0000)
struct GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGeometryCollection*                    InRestCollection;                                  // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InTransform;                                       // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection) == 0x000010, "Wrong alignment on GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection");
static_assert(sizeof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection) == 0x000080, "Wrong size on GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection, WorldContextObject) == 0x000000, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection, ActorClass) == 0x000008, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection::ActorClass' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection, InRestCollection) == 0x000010, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection::InRestCollection' has a wrong offset!");
static_assert(offsetof(GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection, InTransform) == 0x000020, "Member 'GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection::InTransform' has a wrong offset!");

// Function SandFall.SF_GraphicBlueprintHelpers.BringToFrontWindow
// 0x0001 (0x0001 - 0x0000)
struct SF_GraphicBlueprintHelpers_BringToFrontWindow final
{
public:
	bool                                          bForced;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_GraphicBlueprintHelpers_BringToFrontWindow) == 0x000001, "Wrong alignment on SF_GraphicBlueprintHelpers_BringToFrontWindow");
static_assert(sizeof(SF_GraphicBlueprintHelpers_BringToFrontWindow) == 0x000001, "Wrong size on SF_GraphicBlueprintHelpers_BringToFrontWindow");
static_assert(offsetof(SF_GraphicBlueprintHelpers_BringToFrontWindow, bForced) == 0x000000, "Member 'SF_GraphicBlueprintHelpers_BringToFrontWindow::bForced' has a wrong offset!");

// Function SandFall.SF_GraphicBlueprintHelpers.UpdateSplineFloatingObject
// 0x00D0 (0x00D0 - 0x0000)
struct SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInstancedStaticMeshComponent*>  ISMs;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FSplineFloatingInstancesData>   SplineInstanceData;                                // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class UInstancedStaticMeshComponent*, float> MovingDistance;                                // 0x0028(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<class UInstancedStaticMeshComponent*, float> RotatorSpeed;                                  // 0x0078(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         DeltaSeconds;                                      // 0x00C8(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceCount;                                     // 0x00CC(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject) == 0x000008, "Wrong alignment on SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject");
static_assert(sizeof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject) == 0x0000D0, "Wrong size on SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, WorldContextObject) == 0x000000, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, ISMs) == 0x000008, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::ISMs' has a wrong offset!");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, SplineInstanceData) == 0x000018, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::SplineInstanceData' has a wrong offset!");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, MovingDistance) == 0x000028, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::MovingDistance' has a wrong offset!");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, RotatorSpeed) == 0x000078, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::RotatorSpeed' has a wrong offset!");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, DeltaSeconds) == 0x0000C8, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject, InstanceCount) == 0x0000CC, "Member 'SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject::InstanceCount' has a wrong offset!");

// Function SandFall.RichTextBlockCustomWidget.SetContentText
// 0x0010 (0x0010 - 0x0000)
struct RichTextBlockCustomWidget_SetContentText final
{
public:
	class FText                                   ContentText;                                       // 0x0000(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockCustomWidget_SetContentText) == 0x000008, "Wrong alignment on RichTextBlockCustomWidget_SetContentText");
static_assert(sizeof(RichTextBlockCustomWidget_SetContentText) == 0x000010, "Wrong size on RichTextBlockCustomWidget_SetContentText");
static_assert(offsetof(RichTextBlockCustomWidget_SetContentText, ContentText) == 0x000000, "Member 'RichTextBlockCustomWidget_SetContentText::ContentText' has a wrong offset!");

// Function SandFall.RichTextBlockCustomWidget.SetIDString
// 0x0010 (0x0010 - 0x0000)
struct RichTextBlockCustomWidget_SetIDString final
{
public:
	class FString                                 IDString;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockCustomWidget_SetIDString) == 0x000008, "Wrong alignment on RichTextBlockCustomWidget_SetIDString");
static_assert(sizeof(RichTextBlockCustomWidget_SetIDString) == 0x000010, "Wrong size on RichTextBlockCustomWidget_SetIDString");
static_assert(offsetof(RichTextBlockCustomWidget_SetIDString, IDString) == 0x000000, "Member 'RichTextBlockCustomWidget_SetIDString::IDString' has a wrong offset!");

// Function SandFall.RichTextBlockCustomWidget.SetParentStyle
// 0x0340 (0x0340 - 0x0000)
struct RichTextBlockCustomWidget_SetParentStyle final
{
public:
	struct FTextBlockStyle                        Style;                                             // 0x0000(0x0340)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockCustomWidget_SetParentStyle) == 0x000010, "Wrong alignment on RichTextBlockCustomWidget_SetParentStyle");
static_assert(sizeof(RichTextBlockCustomWidget_SetParentStyle) == 0x000340, "Wrong size on RichTextBlockCustomWidget_SetParentStyle");
static_assert(offsetof(RichTextBlockCustomWidget_SetParentStyle, Style) == 0x000000, "Member 'RichTextBlockCustomWidget_SetParentStyle::Style' has a wrong offset!");

// Function SandFall.RichTextBlockCustomWidget.GetContentText
// 0x0010 (0x0010 - 0x0000)
struct RichTextBlockCustomWidget_GetContentText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockCustomWidget_GetContentText) == 0x000008, "Wrong alignment on RichTextBlockCustomWidget_GetContentText");
static_assert(sizeof(RichTextBlockCustomWidget_GetContentText) == 0x000010, "Wrong size on RichTextBlockCustomWidget_GetContentText");
static_assert(offsetof(RichTextBlockCustomWidget_GetContentText, ReturnValue) == 0x000000, "Member 'RichTextBlockCustomWidget_GetContentText::ReturnValue' has a wrong offset!");

// Function SandFall.RichTextBlockCustomWidget.GetIDString
// 0x0010 (0x0010 - 0x0000)
struct RichTextBlockCustomWidget_GetIDString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockCustomWidget_GetIDString) == 0x000008, "Wrong alignment on RichTextBlockCustomWidget_GetIDString");
static_assert(sizeof(RichTextBlockCustomWidget_GetIDString) == 0x000010, "Wrong size on RichTextBlockCustomWidget_GetIDString");
static_assert(offsetof(RichTextBlockCustomWidget_GetIDString, ReturnValue) == 0x000000, "Member 'RichTextBlockCustomWidget_GetIDString::ReturnValue' has a wrong offset!");

// Function SandFall.RichTextBlockCustomWidget.GetParentStyle
// 0x0340 (0x0340 - 0x0000)
struct RichTextBlockCustomWidget_GetParentStyle final
{
public:
	struct FTextBlockStyle                        ReturnValue;                                       // 0x0000(0x0340)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RichTextBlockCustomWidget_GetParentStyle) == 0x000010, "Wrong alignment on RichTextBlockCustomWidget_GetParentStyle");
static_assert(sizeof(RichTextBlockCustomWidget_GetParentStyle) == 0x000340, "Wrong size on RichTextBlockCustomWidget_GetParentStyle");
static_assert(offsetof(RichTextBlockCustomWidget_GetParentStyle, ReturnValue) == 0x000000, "Member 'RichTextBlockCustomWidget_GetParentStyle::ReturnValue' has a wrong offset!");

// Function SandFall.InputActionBindingWidget.SetupInputBindingParametersFromExternal
// 0x0028 (0x0028 - 0x0000)
struct InputActionBindingWidget_SetupInputBindingParametersFromExternal final
{
public:
	class FName                                   InLegacyActionName;                                // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InCommonUIAction;                                  // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class UInputAction*                           InEnhancedInputAction;                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   InIMC;                                             // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputActionBindingWidget_SetupInputBindingParametersFromExternal) == 0x000008, "Wrong alignment on InputActionBindingWidget_SetupInputBindingParametersFromExternal");
static_assert(sizeof(InputActionBindingWidget_SetupInputBindingParametersFromExternal) == 0x000028, "Wrong size on InputActionBindingWidget_SetupInputBindingParametersFromExternal");
static_assert(offsetof(InputActionBindingWidget_SetupInputBindingParametersFromExternal, InLegacyActionName) == 0x000000, "Member 'InputActionBindingWidget_SetupInputBindingParametersFromExternal::InLegacyActionName' has a wrong offset!");
static_assert(offsetof(InputActionBindingWidget_SetupInputBindingParametersFromExternal, InCommonUIAction) == 0x000008, "Member 'InputActionBindingWidget_SetupInputBindingParametersFromExternal::InCommonUIAction' has a wrong offset!");
static_assert(offsetof(InputActionBindingWidget_SetupInputBindingParametersFromExternal, InEnhancedInputAction) == 0x000018, "Member 'InputActionBindingWidget_SetupInputBindingParametersFromExternal::InEnhancedInputAction' has a wrong offset!");
static_assert(offsetof(InputActionBindingWidget_SetupInputBindingParametersFromExternal, InIMC) == 0x000020, "Member 'InputActionBindingWidget_SetupInputBindingParametersFromExternal::InIMC' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.FindInputBrushFromCommonUIDataTable
// 0x00F0 (0x00F0 - 0x0000)
struct InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CommonInputActionDataTable;                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputRowName;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0020(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable) == 0x000010, "Wrong alignment on InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable");
static_assert(sizeof(InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable) == 0x0000F0, "Wrong size on InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable, CommonInputActionDataTable) == 0x000008, "Member 'InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable::CommonInputActionDataTable' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable, InputRowName) == 0x000010, "Member 'InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable::InputRowName' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable, ReturnValue) == 0x000020, "Member 'InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.FindInputBrushFromEnhancedInputAction
// 0x00E0 (0x00E0 - 0x0000)
struct InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     EnhancedInputAction;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction) == 0x000010, "Wrong alignment on InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction");
static_assert(sizeof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction) == 0x0000E0, "Wrong size on InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction, EnhancedInputAction) == 0x000008, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction::EnhancedInputAction' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction, ReturnValue) == 0x000010, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.FindInputBrushFromEnhancedInputActionByInputType
// 0x00F0 (0x00F0 - 0x0000)
struct InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInputAction*                     EnhancedInputAction;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputMappingContext*             InputMappingContext;                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0020(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType) == 0x000010, "Wrong alignment on InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType");
static_assert(sizeof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType) == 0x0000F0, "Wrong size on InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType, InputType) == 0x000008, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType::InputType' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType, EnhancedInputAction) == 0x000010, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType::EnhancedInputAction' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType, InputMappingContext) == 0x000018, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType::InputMappingContext' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType, ReturnValue) == 0x000020, "Member 'InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.FindInputBrushFromInputAction
// 0x00E0 (0x00E0 - 0x0000)
struct InputBlueprintHelpers_FindInputBrushFromInputAction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   InputActionName;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_FindInputBrushFromInputAction) == 0x000010, "Wrong alignment on InputBlueprintHelpers_FindInputBrushFromInputAction");
static_assert(sizeof(InputBlueprintHelpers_FindInputBrushFromInputAction) == 0x0000E0, "Wrong size on InputBlueprintHelpers_FindInputBrushFromInputAction");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromInputAction, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_FindInputBrushFromInputAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromInputAction, InputActionName) == 0x000008, "Member 'InputBlueprintHelpers_FindInputBrushFromInputAction::InputActionName' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromInputAction, ReturnValue) == 0x000010, "Member 'InputBlueprintHelpers_FindInputBrushFromInputAction::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.FindInputBrushFromKey
// 0x0100 (0x0100 - 0x0000)
struct InputBlueprintHelpers_FindInputBrushFromKey final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   Key;                                               // 0x0010(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0030(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_FindInputBrushFromKey) == 0x000010, "Wrong alignment on InputBlueprintHelpers_FindInputBrushFromKey");
static_assert(sizeof(InputBlueprintHelpers_FindInputBrushFromKey) == 0x000100, "Wrong size on InputBlueprintHelpers_FindInputBrushFromKey");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromKey, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_FindInputBrushFromKey::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromKey, InputType) == 0x000008, "Member 'InputBlueprintHelpers_FindInputBrushFromKey::InputType' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromKey, Key) == 0x000010, "Member 'InputBlueprintHelpers_FindInputBrushFromKey::Key' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_FindInputBrushFromKey, ReturnValue) == 0x000030, "Member 'InputBlueprintHelpers_FindInputBrushFromKey::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.GetFirstKeyForEnhancedInputActionByInputType
// 0x0038 (0x0038 - 0x0000)
struct InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonInputType                              InputType;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UInputAction*                     EnhancedInputAction;                               // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputMappingContext*             InputMappingContext;                               // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType) == 0x000008, "Wrong alignment on InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType");
static_assert(sizeof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType) == 0x000038, "Wrong size on InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType");
static_assert(offsetof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType, InputType) == 0x000008, "Member 'InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType::InputType' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType, EnhancedInputAction) == 0x000010, "Member 'InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType::EnhancedInputAction' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType, InputMappingContext) == 0x000018, "Member 'InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType::InputMappingContext' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType, ReturnValue) == 0x000020, "Member 'InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.GetKeyForCommonAction
// 0x0030 (0x0030 - 0x0000)
struct InputBlueprintHelpers_GetKeyForCommonAction final
{
public:
	const class UCommonInputSubsystem*            CommonInputSubsystem;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataTableRowHandle                    InputAction;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FKey                                   ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_GetKeyForCommonAction) == 0x000008, "Wrong alignment on InputBlueprintHelpers_GetKeyForCommonAction");
static_assert(sizeof(InputBlueprintHelpers_GetKeyForCommonAction) == 0x000030, "Wrong size on InputBlueprintHelpers_GetKeyForCommonAction");
static_assert(offsetof(InputBlueprintHelpers_GetKeyForCommonAction, CommonInputSubsystem) == 0x000000, "Member 'InputBlueprintHelpers_GetKeyForCommonAction::CommonInputSubsystem' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_GetKeyForCommonAction, InputAction) == 0x000008, "Member 'InputBlueprintHelpers_GetKeyForCommonAction::InputAction' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_GetKeyForCommonAction, ReturnValue) == 0x000018, "Member 'InputBlueprintHelpers_GetKeyForCommonAction::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.IsInGamepadOrKeyboardNavigationMode
// 0x0010 (0x0010 - 0x0000)
struct InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode) == 0x000008, "Wrong alignment on InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode");
static_assert(sizeof(InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode) == 0x000010, "Wrong size on InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode");
static_assert(offsetof(InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode, ReturnValue) == 0x000008, "Member 'InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.SetIgnoreNavigationKeysInAnalogCursor
// 0x0010 (0x0010 - 0x0000)
struct InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInIgnoreNavigationKeys;                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor) == 0x000008, "Wrong alignment on InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor");
static_assert(sizeof(InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor) == 0x000010, "Wrong size on InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor");
static_assert(offsetof(InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor, bInIgnoreNavigationKeys) == 0x000008, "Member 'InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor::bInIgnoreNavigationKeys' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.TryFindKeysForEnhancedInputAction
// 0x0020 (0x0020 - 0x0000)
struct InputBlueprintHelpers_TryFindKeysForEnhancedInputAction final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInputAction*                     EnhancedInputAction;                               // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_TryFindKeysForEnhancedInputAction) == 0x000008, "Wrong alignment on InputBlueprintHelpers_TryFindKeysForEnhancedInputAction");
static_assert(sizeof(InputBlueprintHelpers_TryFindKeysForEnhancedInputAction) == 0x000020, "Wrong size on InputBlueprintHelpers_TryFindKeysForEnhancedInputAction");
static_assert(offsetof(InputBlueprintHelpers_TryFindKeysForEnhancedInputAction, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_TryFindKeysForEnhancedInputAction::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_TryFindKeysForEnhancedInputAction, EnhancedInputAction) == 0x000008, "Member 'InputBlueprintHelpers_TryFindKeysForEnhancedInputAction::EnhancedInputAction' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_TryFindKeysForEnhancedInputAction, ReturnValue) == 0x000010, "Member 'InputBlueprintHelpers_TryFindKeysForEnhancedInputAction::ReturnValue' has a wrong offset!");

// Function SandFall.InputBlueprintHelpers.TryFindKeysForEnhancedInputActionName
// 0x0020 (0x0020 - 0x0000)
struct InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EnhancedInputActionName;                           // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName) == 0x000008, "Wrong alignment on InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName");
static_assert(sizeof(InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName) == 0x000020, "Wrong size on InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName");
static_assert(offsetof(InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName, WorldContextObject) == 0x000000, "Member 'InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName, EnhancedInputActionName) == 0x000008, "Member 'InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName::EnhancedInputActionName' has a wrong offset!");
static_assert(offsetof(InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName, ReturnValue) == 0x000010, "Member 'InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName::ReturnValue' has a wrong offset!");

// Function SandFall.SF_InvisibleWall.GetGeneratedInvisibleWalls
// 0x0010 (0x0010 - 0x0000)
struct SF_InvisibleWall_GetGeneratedInvisibleWalls final
{
public:
	TArray<class ASF_GeneratedInvisibleWallBase*> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_InvisibleWall_GetGeneratedInvisibleWalls) == 0x000008, "Wrong alignment on SF_InvisibleWall_GetGeneratedInvisibleWalls");
static_assert(sizeof(SF_InvisibleWall_GetGeneratedInvisibleWalls) == 0x000010, "Wrong size on SF_InvisibleWall_GetGeneratedInvisibleWalls");
static_assert(offsetof(SF_InvisibleWall_GetGeneratedInvisibleWalls, ReturnValue) == 0x000000, "Member 'SF_InvisibleWall_GetGeneratedInvisibleWalls::ReturnValue' has a wrong offset!");

// Function SandFall.SF_InvisibleWall.HasBakedData
// 0x0001 (0x0001 - 0x0000)
struct SF_InvisibleWall_HasBakedData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_InvisibleWall_HasBakedData) == 0x000001, "Wrong alignment on SF_InvisibleWall_HasBakedData");
static_assert(sizeof(SF_InvisibleWall_HasBakedData) == 0x000001, "Wrong size on SF_InvisibleWall_HasBakedData");
static_assert(offsetof(SF_InvisibleWall_HasBakedData, ReturnValue) == 0x000000, "Member 'SF_InvisibleWall_HasBakedData::ReturnValue' has a wrong offset!");

// Function SandFall.SF_InvisibleWall.IsBakeVersionOutDated
// 0x0001 (0x0001 - 0x0000)
struct SF_InvisibleWall_IsBakeVersionOutDated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_InvisibleWall_IsBakeVersionOutDated) == 0x000001, "Wrong alignment on SF_InvisibleWall_IsBakeVersionOutDated");
static_assert(sizeof(SF_InvisibleWall_IsBakeVersionOutDated) == 0x000001, "Wrong size on SF_InvisibleWall_IsBakeVersionOutDated");
static_assert(offsetof(SF_InvisibleWall_IsBakeVersionOutDated, ReturnValue) == 0x000000, "Member 'SF_InvisibleWall_IsBakeVersionOutDated::ReturnValue' has a wrong offset!");

// Function SandFall.SF_InvisibleWall.TryBakeInvisibleWall
// 0x0002 (0x0002 - 0x0000)
struct SF_InvisibleWall_TryBakeInvisibleWall final
{
public:
	bool                                          ForceBake;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_InvisibleWall_TryBakeInvisibleWall) == 0x000001, "Wrong alignment on SF_InvisibleWall_TryBakeInvisibleWall");
static_assert(sizeof(SF_InvisibleWall_TryBakeInvisibleWall) == 0x000002, "Wrong size on SF_InvisibleWall_TryBakeInvisibleWall");
static_assert(offsetof(SF_InvisibleWall_TryBakeInvisibleWall, ForceBake) == 0x000000, "Member 'SF_InvisibleWall_TryBakeInvisibleWall::ForceBake' has a wrong offset!");
static_assert(offsetof(SF_InvisibleWall_TryBakeInvisibleWall, ReturnValue) == 0x000001, "Member 'SF_InvisibleWall_TryBakeInvisibleWall::ReturnValue' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.BlendDirectionalLightComponent
// 0x0020 (0x0020 - 0x0000)
struct LightingScenarioHelpers_BlendDirectionalLightComponent final
{
public:
	class UDirectionalLightComponent*             Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingScenarioHelpers_BlendDirectionalLightComponent) == 0x000008, "Wrong alignment on LightingScenarioHelpers_BlendDirectionalLightComponent");
static_assert(sizeof(LightingScenarioHelpers_BlendDirectionalLightComponent) == 0x000020, "Wrong size on LightingScenarioHelpers_BlendDirectionalLightComponent");
static_assert(offsetof(LightingScenarioHelpers_BlendDirectionalLightComponent, Source) == 0x000000, "Member 'LightingScenarioHelpers_BlendDirectionalLightComponent::Source' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendDirectionalLightComponent, Destination) == 0x000008, "Member 'LightingScenarioHelpers_BlendDirectionalLightComponent::Destination' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendDirectionalLightComponent, Target) == 0x000010, "Member 'LightingScenarioHelpers_BlendDirectionalLightComponent::Target' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendDirectionalLightComponent, Multiplier) == 0x000018, "Member 'LightingScenarioHelpers_BlendDirectionalLightComponent::Multiplier' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.BlendExponentialHeightFogComponent
// 0x0020 (0x0020 - 0x0000)
struct LightingScenarioHelpers_BlendExponentialHeightFogComponent final
{
public:
	class UExponentialHeightFogComponent*         Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingScenarioHelpers_BlendExponentialHeightFogComponent) == 0x000008, "Wrong alignment on LightingScenarioHelpers_BlendExponentialHeightFogComponent");
static_assert(sizeof(LightingScenarioHelpers_BlendExponentialHeightFogComponent) == 0x000020, "Wrong size on LightingScenarioHelpers_BlendExponentialHeightFogComponent");
static_assert(offsetof(LightingScenarioHelpers_BlendExponentialHeightFogComponent, Source) == 0x000000, "Member 'LightingScenarioHelpers_BlendExponentialHeightFogComponent::Source' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendExponentialHeightFogComponent, Destination) == 0x000008, "Member 'LightingScenarioHelpers_BlendExponentialHeightFogComponent::Destination' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendExponentialHeightFogComponent, Target) == 0x000010, "Member 'LightingScenarioHelpers_BlendExponentialHeightFogComponent::Target' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendExponentialHeightFogComponent, Multiplier) == 0x000018, "Member 'LightingScenarioHelpers_BlendExponentialHeightFogComponent::Multiplier' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.BlendLightComponent
// 0x0020 (0x0020 - 0x0000)
struct LightingScenarioHelpers_BlendLightComponent final
{
public:
	class ULightComponent*                        Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingScenarioHelpers_BlendLightComponent) == 0x000008, "Wrong alignment on LightingScenarioHelpers_BlendLightComponent");
static_assert(sizeof(LightingScenarioHelpers_BlendLightComponent) == 0x000020, "Wrong size on LightingScenarioHelpers_BlendLightComponent");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponent, Source) == 0x000000, "Member 'LightingScenarioHelpers_BlendLightComponent::Source' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponent, Destination) == 0x000008, "Member 'LightingScenarioHelpers_BlendLightComponent::Destination' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponent, Target) == 0x000010, "Member 'LightingScenarioHelpers_BlendLightComponent::Target' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponent, Multiplier) == 0x000018, "Member 'LightingScenarioHelpers_BlendLightComponent::Multiplier' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.BlendLightComponentBase
// 0x0020 (0x0020 - 0x0000)
struct LightingScenarioHelpers_BlendLightComponentBase final
{
public:
	class ULightComponentBase*                    Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponentBase*                    Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponentBase*                    Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingScenarioHelpers_BlendLightComponentBase) == 0x000008, "Wrong alignment on LightingScenarioHelpers_BlendLightComponentBase");
static_assert(sizeof(LightingScenarioHelpers_BlendLightComponentBase) == 0x000020, "Wrong size on LightingScenarioHelpers_BlendLightComponentBase");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponentBase, Source) == 0x000000, "Member 'LightingScenarioHelpers_BlendLightComponentBase::Source' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponentBase, Destination) == 0x000008, "Member 'LightingScenarioHelpers_BlendLightComponentBase::Destination' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponentBase, Target) == 0x000010, "Member 'LightingScenarioHelpers_BlendLightComponentBase::Target' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendLightComponentBase, Multiplier) == 0x000018, "Member 'LightingScenarioHelpers_BlendLightComponentBase::Multiplier' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.BlendSkyAtmosphereComponent
// 0x0020 (0x0020 - 0x0000)
struct LightingScenarioHelpers_BlendSkyAtmosphereComponent final
{
public:
	class USkyAtmosphereComponent*                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingScenarioHelpers_BlendSkyAtmosphereComponent) == 0x000008, "Wrong alignment on LightingScenarioHelpers_BlendSkyAtmosphereComponent");
static_assert(sizeof(LightingScenarioHelpers_BlendSkyAtmosphereComponent) == 0x000020, "Wrong size on LightingScenarioHelpers_BlendSkyAtmosphereComponent");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyAtmosphereComponent, Source) == 0x000000, "Member 'LightingScenarioHelpers_BlendSkyAtmosphereComponent::Source' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyAtmosphereComponent, Destination) == 0x000008, "Member 'LightingScenarioHelpers_BlendSkyAtmosphereComponent::Destination' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyAtmosphereComponent, Target) == 0x000010, "Member 'LightingScenarioHelpers_BlendSkyAtmosphereComponent::Target' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyAtmosphereComponent, Multiplier) == 0x000018, "Member 'LightingScenarioHelpers_BlendSkyAtmosphereComponent::Multiplier' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.BlendSkyLightComponent
// 0x0020 (0x0020 - 0x0000)
struct LightingScenarioHelpers_BlendSkyLightComponent final
{
public:
	class USkyLightComponent*                     Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     Destination;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingScenarioHelpers_BlendSkyLightComponent) == 0x000008, "Wrong alignment on LightingScenarioHelpers_BlendSkyLightComponent");
static_assert(sizeof(LightingScenarioHelpers_BlendSkyLightComponent) == 0x000020, "Wrong size on LightingScenarioHelpers_BlendSkyLightComponent");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyLightComponent, Source) == 0x000000, "Member 'LightingScenarioHelpers_BlendSkyLightComponent::Source' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyLightComponent, Destination) == 0x000008, "Member 'LightingScenarioHelpers_BlendSkyLightComponent::Destination' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyLightComponent, Target) == 0x000010, "Member 'LightingScenarioHelpers_BlendSkyLightComponent::Target' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_BlendSkyLightComponent, Multiplier) == 0x000018, "Member 'LightingScenarioHelpers_BlendSkyLightComponent::Multiplier' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.Lerp_FColor
// 0x0010 (0x0010 - 0x0000)
struct LightingScenarioHelpers_Lerp_FColor final
{
public:
	struct FColor                                 A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingScenarioHelpers_Lerp_FColor) == 0x000004, "Wrong alignment on LightingScenarioHelpers_Lerp_FColor");
static_assert(sizeof(LightingScenarioHelpers_Lerp_FColor) == 0x000010, "Wrong size on LightingScenarioHelpers_Lerp_FColor");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FColor, A) == 0x000000, "Member 'LightingScenarioHelpers_Lerp_FColor::A' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FColor, B) == 0x000004, "Member 'LightingScenarioHelpers_Lerp_FColor::B' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FColor, T) == 0x000008, "Member 'LightingScenarioHelpers_Lerp_FColor::T' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FColor, ReturnValue) == 0x00000C, "Member 'LightingScenarioHelpers_Lerp_FColor::ReturnValue' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.Lerp_FExponentialHeightFogData
// 0x0028 (0x0028 - 0x0000)
struct LightingScenarioHelpers_Lerp_FExponentialHeightFogData final
{
public:
	struct FExponentialHeightFogData              A;                                                 // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              B;                                                 // 0x000C(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         T;                                                 // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              ReturnValue;                                       // 0x001C(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingScenarioHelpers_Lerp_FExponentialHeightFogData) == 0x000004, "Wrong alignment on LightingScenarioHelpers_Lerp_FExponentialHeightFogData");
static_assert(sizeof(LightingScenarioHelpers_Lerp_FExponentialHeightFogData) == 0x000028, "Wrong size on LightingScenarioHelpers_Lerp_FExponentialHeightFogData");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FExponentialHeightFogData, A) == 0x000000, "Member 'LightingScenarioHelpers_Lerp_FExponentialHeightFogData::A' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FExponentialHeightFogData, B) == 0x00000C, "Member 'LightingScenarioHelpers_Lerp_FExponentialHeightFogData::B' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FExponentialHeightFogData, T) == 0x000018, "Member 'LightingScenarioHelpers_Lerp_FExponentialHeightFogData::T' has a wrong offset!");
static_assert(offsetof(LightingScenarioHelpers_Lerp_FExponentialHeightFogData, ReturnValue) == 0x00001C, "Member 'LightingScenarioHelpers_Lerp_FExponentialHeightFogData::ReturnValue' has a wrong offset!");

// Function SandFall.LightingScenarioHelpers.MarkWholeRenderStateDirty
// 0x0008 (0x0008 - 0x0000)
struct LightingScenarioHelpers_MarkWholeRenderStateDirty final
{
public:
	class UActorComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingScenarioHelpers_MarkWholeRenderStateDirty) == 0x000008, "Wrong alignment on LightingScenarioHelpers_MarkWholeRenderStateDirty");
static_assert(sizeof(LightingScenarioHelpers_MarkWholeRenderStateDirty) == 0x000008, "Wrong size on LightingScenarioHelpers_MarkWholeRenderStateDirty");
static_assert(offsetof(LightingScenarioHelpers_MarkWholeRenderStateDirty, Target) == 0x000000, "Member 'LightingScenarioHelpers_MarkWholeRenderStateDirty::Target' has a wrong offset!");

// Function SandFall.SF_LoadingScreenGISubsystem.IsLoadingScreenSubSystemActive
// 0x0001 (0x0001 - 0x0000)
struct SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive) == 0x000001, "Wrong alignment on SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive");
static_assert(sizeof(SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive) == 0x000001, "Wrong size on SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive");
static_assert(offsetof(SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive, ReturnValue) == 0x000000, "Member 'SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LoadingScreenGISubsystem.OpenLevelBySoftPtrWithLoadingScreen
// 0x0068 (0x0068 - 0x0000)
struct SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UWorld>                  Level;                                             // 0x0008(0x0028)(ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0030(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bAbsolute;                                         // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Options;                                           // 0x0050(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USF_LoadingScreenWidget>    LoadingScreenOverride;                             // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen) == 0x000008, "Wrong alignment on SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen");
static_assert(sizeof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen) == 0x000068, "Wrong size on SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen, WorldContextObject) == 0x000000, "Member 'SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen, Level) == 0x000008, "Member 'SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen::Level' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen, LatentInfo) == 0x000030, "Member 'SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen::LatentInfo' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen, bAbsolute) == 0x000048, "Member 'SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen::bAbsolute' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen, Options) == 0x000050, "Member 'SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen::Options' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen, LoadingScreenOverride) == 0x000060, "Member 'SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen::LoadingScreenOverride' has a wrong offset!");

// Function SandFall.SF_LoadingScreenGISubsystem.OpenLevelWithLoadingScreen
// 0x0048 (0x0048 - 0x0000)
struct SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LevelName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLatentActionInfo                      LatentInfo;                                        // 0x0010(0x0018)(Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          bAbsolute;                                         // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Options;                                           // 0x0030(0x0010)(Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USF_LoadingScreenWidget>    LoadingScreenOverride;                             // 0x0040(0x0008)(Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen) == 0x000008, "Wrong alignment on SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen");
static_assert(sizeof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen) == 0x000048, "Wrong size on SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen, WorldContextObject) == 0x000000, "Member 'SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen, LevelName) == 0x000008, "Member 'SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen::LevelName' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen, LatentInfo) == 0x000010, "Member 'SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen::LatentInfo' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen, bAbsolute) == 0x000028, "Member 'SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen::bAbsolute' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen, Options) == 0x000030, "Member 'SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen::Options' has a wrong offset!");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen, LoadingScreenOverride) == 0x000040, "Member 'SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen::LoadingScreenOverride' has a wrong offset!");

// Function SandFall.SF_LoadingScreenGISubsystem.OverrideNextLoadingScreenData
// 0x0020 (0x0020 - 0x0000)
struct SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData final
{
public:
	struct FLoadingScreenData                     dataOverride;                                      // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData) == 0x000008, "Wrong alignment on SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData");
static_assert(sizeof(SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData) == 0x000020, "Wrong size on SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData");
static_assert(offsetof(SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData, dataOverride) == 0x000000, "Member 'SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData::dataOverride' has a wrong offset!");

// Function SandFall.SF_LoadingScreenWidget.StartLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct SF_LoadingScreenWidget_StartLoadingScreen final
{
public:
	class FName                                   LevelLoaded;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LoadingScreenWidget_StartLoadingScreen) == 0x000004, "Wrong alignment on SF_LoadingScreenWidget_StartLoadingScreen");
static_assert(sizeof(SF_LoadingScreenWidget_StartLoadingScreen) == 0x000008, "Wrong size on SF_LoadingScreenWidget_StartLoadingScreen");
static_assert(offsetof(SF_LoadingScreenWidget_StartLoadingScreen, LevelLoaded) == 0x000000, "Member 'SF_LoadingScreenWidget_StartLoadingScreen::LevelLoaded' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.ChangeAssetGroupCultureSettings
// 0x0020 (0x0020 - 0x0000)
struct SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings final
{
public:
	class FName                                   AssetGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Culture_IETF_Tag;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings) == 0x000008, "Wrong alignment on SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings");
static_assert(sizeof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings) == 0x000020, "Wrong size on SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings, AssetGroup) == 0x000000, "Member 'SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings::AssetGroup' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings, Culture_IETF_Tag) == 0x000008, "Member 'SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings::Culture_IETF_Tag' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings, ReturnValue) == 0x000018, "Member 'SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.ChangeAssetGroupCultureSettingsByIndex
// 0x0010 (0x0010 - 0x0000)
struct SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex final
{
public:
	class FName                                   AssetGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CultureIndex;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex) == 0x000004, "Wrong alignment on SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex");
static_assert(sizeof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex) == 0x000010, "Wrong size on SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex, AssetGroup) == 0x000000, "Member 'SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex::AssetGroup' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex, CultureIndex) == 0x000008, "Member 'SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex::CultureIndex' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex, ReturnValue) == 0x00000C, "Member 'SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.ChangeGameCultureSettings
// 0x0018 (0x0018 - 0x0000)
struct SF_LocalizationGISubsystem_ChangeGameCultureSettings final
{
public:
	class FString                                 Culture_IETF_Tag;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_LocalizationGISubsystem_ChangeGameCultureSettings) == 0x000008, "Wrong alignment on SF_LocalizationGISubsystem_ChangeGameCultureSettings");
static_assert(sizeof(SF_LocalizationGISubsystem_ChangeGameCultureSettings) == 0x000018, "Wrong size on SF_LocalizationGISubsystem_ChangeGameCultureSettings");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeGameCultureSettings, Culture_IETF_Tag) == 0x000000, "Member 'SF_LocalizationGISubsystem_ChangeGameCultureSettings::Culture_IETF_Tag' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeGameCultureSettings, ReturnValue) == 0x000010, "Member 'SF_LocalizationGISubsystem_ChangeGameCultureSettings::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.ChangeGameCultureSettingsByIndex
// 0x0008 (0x0008 - 0x0000)
struct SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex final
{
public:
	int32                                         CultureIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex) == 0x000004, "Wrong alignment on SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex");
static_assert(sizeof(SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex) == 0x000008, "Wrong size on SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex, CultureIndex) == 0x000000, "Member 'SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex::CultureIndex' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex, ReturnValue) == 0x000004, "Member 'SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.Get_IETF_TagIndex
// 0x0018 (0x0018 - 0x0000)
struct SF_LocalizationGISubsystem_Get_IETF_TagIndex final
{
public:
	class FString                                 IETF_Tag;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_LocalizationGISubsystem_Get_IETF_TagIndex) == 0x000008, "Wrong alignment on SF_LocalizationGISubsystem_Get_IETF_TagIndex");
static_assert(sizeof(SF_LocalizationGISubsystem_Get_IETF_TagIndex) == 0x000018, "Wrong size on SF_LocalizationGISubsystem_Get_IETF_TagIndex");
static_assert(offsetof(SF_LocalizationGISubsystem_Get_IETF_TagIndex, IETF_Tag) == 0x000000, "Member 'SF_LocalizationGISubsystem_Get_IETF_TagIndex::IETF_Tag' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_Get_IETF_TagIndex, ReturnValue) == 0x000010, "Member 'SF_LocalizationGISubsystem_Get_IETF_TagIndex::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.GetAssetGroupCultureData
// 0x0040 (0x0040 - 0x0000)
struct SF_LocalizationGISubsystem_GetAssetGroupCultureData final
{
public:
	class FName                                   AssetGroup;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetDisplayNameInCurrentLanguage;                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAssetGroupCultureData                 ReturnValue;                                       // 0x0010(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LocalizationGISubsystem_GetAssetGroupCultureData) == 0x000008, "Wrong alignment on SF_LocalizationGISubsystem_GetAssetGroupCultureData");
static_assert(sizeof(SF_LocalizationGISubsystem_GetAssetGroupCultureData) == 0x000040, "Wrong size on SF_LocalizationGISubsystem_GetAssetGroupCultureData");
static_assert(offsetof(SF_LocalizationGISubsystem_GetAssetGroupCultureData, AssetGroup) == 0x000000, "Member 'SF_LocalizationGISubsystem_GetAssetGroupCultureData::AssetGroup' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_GetAssetGroupCultureData, GetDisplayNameInCurrentLanguage) == 0x000008, "Member 'SF_LocalizationGISubsystem_GetAssetGroupCultureData::GetDisplayNameInCurrentLanguage' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_GetAssetGroupCultureData, ReturnValue) == 0x000010, "Member 'SF_LocalizationGISubsystem_GetAssetGroupCultureData::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.GetGameCultureData
// 0x0030 (0x0030 - 0x0000)
struct SF_LocalizationGISubsystem_GetGameCultureData final
{
public:
	bool                                          GetDisplayNameInCurrentLanguage;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectCultureData                    ReturnValue;                                       // 0x0008(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LocalizationGISubsystem_GetGameCultureData) == 0x000008, "Wrong alignment on SF_LocalizationGISubsystem_GetGameCultureData");
static_assert(sizeof(SF_LocalizationGISubsystem_GetGameCultureData) == 0x000030, "Wrong size on SF_LocalizationGISubsystem_GetGameCultureData");
static_assert(offsetof(SF_LocalizationGISubsystem_GetGameCultureData, GetDisplayNameInCurrentLanguage) == 0x000000, "Member 'SF_LocalizationGISubsystem_GetGameCultureData::GetDisplayNameInCurrentLanguage' has a wrong offset!");
static_assert(offsetof(SF_LocalizationGISubsystem_GetGameCultureData, ReturnValue) == 0x000008, "Member 'SF_LocalizationGISubsystem_GetGameCultureData::ReturnValue' has a wrong offset!");

// Function SandFall.SF_LocalizationGISubsystem.GetAudioAssetGroupName
// 0x0008 (0x0008 - 0x0000)
struct SF_LocalizationGISubsystem_GetAudioAssetGroupName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_LocalizationGISubsystem_GetAudioAssetGroupName) == 0x000004, "Wrong alignment on SF_LocalizationGISubsystem_GetAudioAssetGroupName");
static_assert(sizeof(SF_LocalizationGISubsystem_GetAudioAssetGroupName) == 0x000008, "Wrong size on SF_LocalizationGISubsystem_GetAudioAssetGroupName");
static_assert(offsetof(SF_LocalizationGISubsystem_GetAudioAssetGroupName, ReturnValue) == 0x000000, "Member 'SF_LocalizationGISubsystem_GetAudioAssetGroupName::ReturnValue' has a wrong offset!");

// Function SandFall.MathHelpers.GetBlendAlpha
// 0x0010 (0x0010 - 0x0000)
struct MathHelpers_GetBlendAlpha final
{
public:
	EViewTargetBlendFunction                      BlendFunction;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathHelpers_GetBlendAlpha) == 0x000004, "Wrong alignment on MathHelpers_GetBlendAlpha");
static_assert(sizeof(MathHelpers_GetBlendAlpha) == 0x000010, "Wrong size on MathHelpers_GetBlendAlpha");
static_assert(offsetof(MathHelpers_GetBlendAlpha, BlendFunction) == 0x000000, "Member 'MathHelpers_GetBlendAlpha::BlendFunction' has a wrong offset!");
static_assert(offsetof(MathHelpers_GetBlendAlpha, BlendExp) == 0x000004, "Member 'MathHelpers_GetBlendAlpha::BlendExp' has a wrong offset!");
static_assert(offsetof(MathHelpers_GetBlendAlpha, Time) == 0x000008, "Member 'MathHelpers_GetBlendAlpha::Time' has a wrong offset!");
static_assert(offsetof(MathHelpers_GetBlendAlpha, ReturnValue) == 0x00000C, "Member 'MathHelpers_GetBlendAlpha::ReturnValue' has a wrong offset!");

// Function SandFall.MathHelpers.LimitMax_Double
// 0x0008 (0x0008 - 0x0000)
struct MathHelpers_LimitMax_Double final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathHelpers_LimitMax_Double) == 0x000008, "Wrong alignment on MathHelpers_LimitMax_Double");
static_assert(sizeof(MathHelpers_LimitMax_Double) == 0x000008, "Wrong size on MathHelpers_LimitMax_Double");
static_assert(offsetof(MathHelpers_LimitMax_Double, ReturnValue) == 0x000000, "Member 'MathHelpers_LimitMax_Double::ReturnValue' has a wrong offset!");

// Function SandFall.MathHelpers.LimitMax_Integer
// 0x0004 (0x0004 - 0x0000)
struct MathHelpers_LimitMax_Integer final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathHelpers_LimitMax_Integer) == 0x000004, "Wrong alignment on MathHelpers_LimitMax_Integer");
static_assert(sizeof(MathHelpers_LimitMax_Integer) == 0x000004, "Wrong size on MathHelpers_LimitMax_Integer");
static_assert(offsetof(MathHelpers_LimitMax_Integer, ReturnValue) == 0x000000, "Member 'MathHelpers_LimitMax_Integer::ReturnValue' has a wrong offset!");

// Function SandFall.MathHelpers.LimitMax_Integer64
// 0x0008 (0x0008 - 0x0000)
struct MathHelpers_LimitMax_Integer64 final
{
public:
	int64                                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MathHelpers_LimitMax_Integer64) == 0x000008, "Wrong alignment on MathHelpers_LimitMax_Integer64");
static_assert(sizeof(MathHelpers_LimitMax_Integer64) == 0x000008, "Wrong size on MathHelpers_LimitMax_Integer64");
static_assert(offsetof(MathHelpers_LimitMax_Integer64, ReturnValue) == 0x000000, "Member 'MathHelpers_LimitMax_Integer64::ReturnValue' has a wrong offset!");

// Function SandFall.ModifierStack_Float.AddModifier
// 0x0048 (0x0048 - 0x0000)
struct ModifierStack_Float_AddModifier final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ModifierStackEntryHandle           OutModifierHandle;                                 // 0x0008(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 DebugModifierName;                                 // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModifierStack_Float_AddModifier) == 0x000008, "Wrong alignment on ModifierStack_Float_AddModifier");
static_assert(sizeof(ModifierStack_Float_AddModifier) == 0x000048, "Wrong size on ModifierStack_Float_AddModifier");
static_assert(offsetof(ModifierStack_Float_AddModifier, NewValue) == 0x000000, "Member 'ModifierStack_Float_AddModifier::NewValue' has a wrong offset!");
static_assert(offsetof(ModifierStack_Float_AddModifier, OutModifierHandle) == 0x000008, "Member 'ModifierStack_Float_AddModifier::OutModifierHandle' has a wrong offset!");
static_assert(offsetof(ModifierStack_Float_AddModifier, DebugModifierName) == 0x000038, "Member 'ModifierStack_Float_AddModifier::DebugModifierName' has a wrong offset!");

// Function SandFall.ModifierStack_Float.RemoveModifier
// 0x0038 (0x0038 - 0x0000)
struct ModifierStack_Float_RemoveModifier final
{
public:
	struct FSF_ModifierStackEntryHandle           ModifierHandle;                                    // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ModifierStack_Float_RemoveModifier) == 0x000008, "Wrong alignment on ModifierStack_Float_RemoveModifier");
static_assert(sizeof(ModifierStack_Float_RemoveModifier) == 0x000038, "Wrong size on ModifierStack_Float_RemoveModifier");
static_assert(offsetof(ModifierStack_Float_RemoveModifier, ModifierHandle) == 0x000000, "Member 'ModifierStack_Float_RemoveModifier::ModifierHandle' has a wrong offset!");
static_assert(offsetof(ModifierStack_Float_RemoveModifier, ReturnValue) == 0x000030, "Member 'ModifierStack_Float_RemoveModifier::ReturnValue' has a wrong offset!");

// Function SandFall.ModifierStack_Float.GetCurrentValue
// 0x0004 (0x0004 - 0x0000)
struct ModifierStack_Float_GetCurrentValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModifierStack_Float_GetCurrentValue) == 0x000004, "Wrong alignment on ModifierStack_Float_GetCurrentValue");
static_assert(sizeof(ModifierStack_Float_GetCurrentValue) == 0x000004, "Wrong size on ModifierStack_Float_GetCurrentValue");
static_assert(offsetof(ModifierStack_Float_GetCurrentValue, ReturnValue) == 0x000000, "Member 'ModifierStack_Float_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function SandFall.NamedIDHelpers.GetNamedIDClassPathName
// 0x0010 (0x0010 - 0x0000)
struct NamedIDHelpers_GetNamedIDClassPathName final
{
public:
	struct FTopLevelAssetPath                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NamedIDHelpers_GetNamedIDClassPathName) == 0x000004, "Wrong alignment on NamedIDHelpers_GetNamedIDClassPathName");
static_assert(sizeof(NamedIDHelpers_GetNamedIDClassPathName) == 0x000010, "Wrong size on NamedIDHelpers_GetNamedIDClassPathName");
static_assert(offsetof(NamedIDHelpers_GetNamedIDClassPathName, ReturnValue) == 0x000000, "Member 'NamedIDHelpers_GetNamedIDClassPathName::ReturnValue' has a wrong offset!");

// Function SandFall.NavigationHelpers.CanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct NavigationHelpers_CanEverAffectNavigation final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationHelpers_CanEverAffectNavigation) == 0x000008, "Wrong alignment on NavigationHelpers_CanEverAffectNavigation");
static_assert(sizeof(NavigationHelpers_CanEverAffectNavigation) == 0x000010, "Wrong size on NavigationHelpers_CanEverAffectNavigation");
static_assert(offsetof(NavigationHelpers_CanEverAffectNavigation, ActorComponent) == 0x000000, "Member 'NavigationHelpers_CanEverAffectNavigation::ActorComponent' has a wrong offset!");
static_assert(offsetof(NavigationHelpers_CanEverAffectNavigation, ReturnValue) == 0x000008, "Member 'NavigationHelpers_CanEverAffectNavigation::ReturnValue' has a wrong offset!");

// Function SandFall.NavigationHelpers.GetNavDataForAgentName
// 0x0018 (0x0018 - 0x0000)
struct NavigationHelpers_GetNavDataForAgentName final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AgentName;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavigationData*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationHelpers_GetNavDataForAgentName) == 0x000008, "Wrong alignment on NavigationHelpers_GetNavDataForAgentName");
static_assert(sizeof(NavigationHelpers_GetNavDataForAgentName) == 0x000018, "Wrong size on NavigationHelpers_GetNavDataForAgentName");
static_assert(offsetof(NavigationHelpers_GetNavDataForAgentName, WorldContextObject) == 0x000000, "Member 'NavigationHelpers_GetNavDataForAgentName::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavigationHelpers_GetNavDataForAgentName, AgentName) == 0x000008, "Member 'NavigationHelpers_GetNavDataForAgentName::AgentName' has a wrong offset!");
static_assert(offsetof(NavigationHelpers_GetNavDataForAgentName, ReturnValue) == 0x000010, "Member 'NavigationHelpers_GetNavDataForAgentName::ReturnValue' has a wrong offset!");

// Function SandFall.NavigationHelpers.IsNavigationRelevant
// 0x0010 (0x0010 - 0x0000)
struct NavigationHelpers_IsNavigationRelevant final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationHelpers_IsNavigationRelevant) == 0x000008, "Wrong alignment on NavigationHelpers_IsNavigationRelevant");
static_assert(sizeof(NavigationHelpers_IsNavigationRelevant) == 0x000010, "Wrong size on NavigationHelpers_IsNavigationRelevant");
static_assert(offsetof(NavigationHelpers_IsNavigationRelevant, ActorComponent) == 0x000000, "Member 'NavigationHelpers_IsNavigationRelevant::ActorComponent' has a wrong offset!");
static_assert(offsetof(NavigationHelpers_IsNavigationRelevant, ReturnValue) == 0x000008, "Member 'NavigationHelpers_IsNavigationRelevant::ReturnValue' has a wrong offset!");

// Function SandFall.NavigationHelpers.SetCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct NavigationHelpers_SetCanEverAffectNavigation final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRelevant;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationHelpers_SetCanEverAffectNavigation) == 0x000008, "Wrong alignment on NavigationHelpers_SetCanEverAffectNavigation");
static_assert(sizeof(NavigationHelpers_SetCanEverAffectNavigation) == 0x000010, "Wrong size on NavigationHelpers_SetCanEverAffectNavigation");
static_assert(offsetof(NavigationHelpers_SetCanEverAffectNavigation, ActorComponent) == 0x000000, "Member 'NavigationHelpers_SetCanEverAffectNavigation::ActorComponent' has a wrong offset!");
static_assert(offsetof(NavigationHelpers_SetCanEverAffectNavigation, bRelevant) == 0x000008, "Member 'NavigationHelpers_SetCanEverAffectNavigation::bRelevant' has a wrong offset!");

// Function SandFall.NavigationHelpers.SetFillCollisionUnderneathForNavmesh
// 0x0010 (0x0010 - 0x0000)
struct NavigationHelpers_SetFillCollisionUnderneathForNavmesh final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFillCollisionUnderneathForNavmesh;                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationHelpers_SetFillCollisionUnderneathForNavmesh) == 0x000008, "Wrong alignment on NavigationHelpers_SetFillCollisionUnderneathForNavmesh");
static_assert(sizeof(NavigationHelpers_SetFillCollisionUnderneathForNavmesh) == 0x000010, "Wrong size on NavigationHelpers_SetFillCollisionUnderneathForNavmesh");
static_assert(offsetof(NavigationHelpers_SetFillCollisionUnderneathForNavmesh, PrimitiveComponent) == 0x000000, "Member 'NavigationHelpers_SetFillCollisionUnderneathForNavmesh::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(NavigationHelpers_SetFillCollisionUnderneathForNavmesh, bFillCollisionUnderneathForNavmesh) == 0x000008, "Member 'NavigationHelpers_SetFillCollisionUnderneathForNavmesh::bFillCollisionUnderneathForNavmesh' has a wrong offset!");

// Function SandFall.ProjectConfiguration.GetEditorOnlyLevelDataTable
// 0x0008 (0x0008 - 0x0000)
struct ProjectConfiguration_GetEditorOnlyLevelDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectConfiguration_GetEditorOnlyLevelDataTable) == 0x000008, "Wrong alignment on ProjectConfiguration_GetEditorOnlyLevelDataTable");
static_assert(sizeof(ProjectConfiguration_GetEditorOnlyLevelDataTable) == 0x000008, "Wrong size on ProjectConfiguration_GetEditorOnlyLevelDataTable");
static_assert(offsetof(ProjectConfiguration_GetEditorOnlyLevelDataTable, ReturnValue) == 0x000000, "Member 'ProjectConfiguration_GetEditorOnlyLevelDataTable::ReturnValue' has a wrong offset!");

// Function SandFall.ProjectConfiguration.GetLevelDataTable
// 0x0008 (0x0008 - 0x0000)
struct ProjectConfiguration_GetLevelDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProjectConfiguration_GetLevelDataTable) == 0x000008, "Wrong alignment on ProjectConfiguration_GetLevelDataTable");
static_assert(sizeof(ProjectConfiguration_GetLevelDataTable) == 0x000008, "Wrong size on ProjectConfiguration_GetLevelDataTable");
static_assert(offsetof(ProjectConfiguration_GetLevelDataTable, ReturnValue) == 0x000000, "Member 'ProjectConfiguration_GetLevelDataTable::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.CreateQuestIdentifier
// 0x0010 (0x0010 - 0x0000)
struct QuestHelpers_CreateQuestIdentifier final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestHelpers_CreateQuestIdentifier) == 0x000004, "Wrong alignment on QuestHelpers_CreateQuestIdentifier");
static_assert(sizeof(QuestHelpers_CreateQuestIdentifier) == 0x000010, "Wrong size on QuestHelpers_CreateQuestIdentifier");
static_assert(offsetof(QuestHelpers_CreateQuestIdentifier, QuestName) == 0x000000, "Member 'QuestHelpers_CreateQuestIdentifier::QuestName' has a wrong offset!");
static_assert(offsetof(QuestHelpers_CreateQuestIdentifier, ReturnValue) == 0x000008, "Member 'QuestHelpers_CreateQuestIdentifier::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.CreateQuestObjectiveIdentifier
// 0x0020 (0x0020 - 0x0000)
struct QuestHelpers_CreateQuestObjectiveIdentifier final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveName;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuestObjectiveIdentifier              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestHelpers_CreateQuestObjectiveIdentifier) == 0x000004, "Wrong alignment on QuestHelpers_CreateQuestObjectiveIdentifier");
static_assert(sizeof(QuestHelpers_CreateQuestObjectiveIdentifier) == 0x000020, "Wrong size on QuestHelpers_CreateQuestObjectiveIdentifier");
static_assert(offsetof(QuestHelpers_CreateQuestObjectiveIdentifier, QuestName) == 0x000000, "Member 'QuestHelpers_CreateQuestObjectiveIdentifier::QuestName' has a wrong offset!");
static_assert(offsetof(QuestHelpers_CreateQuestObjectiveIdentifier, ObjectiveName) == 0x000008, "Member 'QuestHelpers_CreateQuestObjectiveIdentifier::ObjectiveName' has a wrong offset!");
static_assert(offsetof(QuestHelpers_CreateQuestObjectiveIdentifier, ReturnValue) == 0x000010, "Member 'QuestHelpers_CreateQuestObjectiveIdentifier::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.Equal_FQuestObjectiveIdentifier
// 0x0024 (0x0024 - 0x0000)
struct QuestHelpers_Equal_FQuestObjectiveIdentifier final
{
public:
	struct FQuestObjectiveIdentifier              A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuestObjectiveIdentifier              B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestHelpers_Equal_FQuestObjectiveIdentifier) == 0x000004, "Wrong alignment on QuestHelpers_Equal_FQuestObjectiveIdentifier");
static_assert(sizeof(QuestHelpers_Equal_FQuestObjectiveIdentifier) == 0x000024, "Wrong size on QuestHelpers_Equal_FQuestObjectiveIdentifier");
static_assert(offsetof(QuestHelpers_Equal_FQuestObjectiveIdentifier, A) == 0x000000, "Member 'QuestHelpers_Equal_FQuestObjectiveIdentifier::A' has a wrong offset!");
static_assert(offsetof(QuestHelpers_Equal_FQuestObjectiveIdentifier, B) == 0x000010, "Member 'QuestHelpers_Equal_FQuestObjectiveIdentifier::B' has a wrong offset!");
static_assert(offsetof(QuestHelpers_Equal_FQuestObjectiveIdentifier, ReturnValue) == 0x000020, "Member 'QuestHelpers_Equal_FQuestObjectiveIdentifier::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.GetObjectiveDataTable
// 0x0010 (0x0010 - 0x0000)
struct QuestHelpers_GetObjectiveDataTable final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestHelpers_GetObjectiveDataTable) == 0x000008, "Wrong alignment on QuestHelpers_GetObjectiveDataTable");
static_assert(sizeof(QuestHelpers_GetObjectiveDataTable) == 0x000010, "Wrong size on QuestHelpers_GetObjectiveDataTable");
static_assert(offsetof(QuestHelpers_GetObjectiveDataTable, QuestName) == 0x000000, "Member 'QuestHelpers_GetObjectiveDataTable::QuestName' has a wrong offset!");
static_assert(offsetof(QuestHelpers_GetObjectiveDataTable, ReturnValue) == 0x000008, "Member 'QuestHelpers_GetObjectiveDataTable::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.GetQuestDataTable
// 0x0008 (0x0008 - 0x0000)
struct QuestHelpers_GetQuestDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestHelpers_GetQuestDataTable) == 0x000008, "Wrong alignment on QuestHelpers_GetQuestDataTable");
static_assert(sizeof(QuestHelpers_GetQuestDataTable) == 0x000008, "Wrong size on QuestHelpers_GetQuestDataTable");
static_assert(offsetof(QuestHelpers_GetQuestDataTable, ReturnValue) == 0x000000, "Member 'QuestHelpers_GetQuestDataTable::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.IsValid_FQuestObjectiveIdentifier
// 0x0014 (0x0014 - 0x0000)
struct QuestHelpers_IsValid_FQuestObjectiveIdentifier final
{
public:
	struct FQuestObjectiveIdentifier              QuestObjectiveIdentifier;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestHelpers_IsValid_FQuestObjectiveIdentifier) == 0x000004, "Wrong alignment on QuestHelpers_IsValid_FQuestObjectiveIdentifier");
static_assert(sizeof(QuestHelpers_IsValid_FQuestObjectiveIdentifier) == 0x000014, "Wrong size on QuestHelpers_IsValid_FQuestObjectiveIdentifier");
static_assert(offsetof(QuestHelpers_IsValid_FQuestObjectiveIdentifier, QuestObjectiveIdentifier) == 0x000000, "Member 'QuestHelpers_IsValid_FQuestObjectiveIdentifier::QuestObjectiveIdentifier' has a wrong offset!");
static_assert(offsetof(QuestHelpers_IsValid_FQuestObjectiveIdentifier, ReturnValue) == 0x000010, "Member 'QuestHelpers_IsValid_FQuestObjectiveIdentifier::ReturnValue' has a wrong offset!");

// Function SandFall.QuestHelpers.NotEqual_FQuestObjectiveIdentifier
// 0x0024 (0x0024 - 0x0000)
struct QuestHelpers_NotEqual_FQuestObjectiveIdentifier final
{
public:
	struct FQuestObjectiveIdentifier              A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FQuestObjectiveIdentifier              B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestHelpers_NotEqual_FQuestObjectiveIdentifier) == 0x000004, "Wrong alignment on QuestHelpers_NotEqual_FQuestObjectiveIdentifier");
static_assert(sizeof(QuestHelpers_NotEqual_FQuestObjectiveIdentifier) == 0x000024, "Wrong size on QuestHelpers_NotEqual_FQuestObjectiveIdentifier");
static_assert(offsetof(QuestHelpers_NotEqual_FQuestObjectiveIdentifier, A) == 0x000000, "Member 'QuestHelpers_NotEqual_FQuestObjectiveIdentifier::A' has a wrong offset!");
static_assert(offsetof(QuestHelpers_NotEqual_FQuestObjectiveIdentifier, B) == 0x000010, "Member 'QuestHelpers_NotEqual_FQuestObjectiveIdentifier::B' has a wrong offset!");
static_assert(offsetof(QuestHelpers_NotEqual_FQuestObjectiveIdentifier, ReturnValue) == 0x000020, "Member 'QuestHelpers_NotEqual_FQuestObjectiveIdentifier::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReadTexturePixelQuery.FeedTexture
// 0x0028 (0x0028 - 0x0000)
struct SF_ReadTexturePixelQuery_FeedTexture final
{
public:
	TSoftObjectPtr<class UTexture2D>              TextureRef;                                        // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReadTexturePixelQuery_FeedTexture) == 0x000008, "Wrong alignment on SF_ReadTexturePixelQuery_FeedTexture");
static_assert(sizeof(SF_ReadTexturePixelQuery_FeedTexture) == 0x000028, "Wrong size on SF_ReadTexturePixelQuery_FeedTexture");
static_assert(offsetof(SF_ReadTexturePixelQuery_FeedTexture, TextureRef) == 0x000000, "Member 'SF_ReadTexturePixelQuery_FeedTexture::TextureRef' has a wrong offset!");

// Function SandFall.SF_ReadTexturePixelQuery.GetTextureHeight
// 0x0004 (0x0004 - 0x0000)
struct SF_ReadTexturePixelQuery_GetTextureHeight final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReadTexturePixelQuery_GetTextureHeight) == 0x000004, "Wrong alignment on SF_ReadTexturePixelQuery_GetTextureHeight");
static_assert(sizeof(SF_ReadTexturePixelQuery_GetTextureHeight) == 0x000004, "Wrong size on SF_ReadTexturePixelQuery_GetTextureHeight");
static_assert(offsetof(SF_ReadTexturePixelQuery_GetTextureHeight, ReturnValue) == 0x000000, "Member 'SF_ReadTexturePixelQuery_GetTextureHeight::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReadTexturePixelQuery.GetTextureWidth
// 0x0004 (0x0004 - 0x0000)
struct SF_ReadTexturePixelQuery_GetTextureWidth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReadTexturePixelQuery_GetTextureWidth) == 0x000004, "Wrong alignment on SF_ReadTexturePixelQuery_GetTextureWidth");
static_assert(sizeof(SF_ReadTexturePixelQuery_GetTextureWidth) == 0x000004, "Wrong size on SF_ReadTexturePixelQuery_GetTextureWidth");
static_assert(offsetof(SF_ReadTexturePixelQuery_GetTextureWidth, ReturnValue) == 0x000000, "Member 'SF_ReadTexturePixelQuery_GetTextureWidth::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReadTexturePixelQuery.HasValidData
// 0x0001 (0x0001 - 0x0000)
struct SF_ReadTexturePixelQuery_HasValidData final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReadTexturePixelQuery_HasValidData) == 0x000001, "Wrong alignment on SF_ReadTexturePixelQuery_HasValidData");
static_assert(sizeof(SF_ReadTexturePixelQuery_HasValidData) == 0x000001, "Wrong size on SF_ReadTexturePixelQuery_HasValidData");
static_assert(offsetof(SF_ReadTexturePixelQuery_HasValidData, ReturnValue) == 0x000000, "Member 'SF_ReadTexturePixelQuery_HasValidData::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReadTexturePixelQuery.TryReadPixel
// 0x0014 (0x0014 - 0x0000)
struct SF_ReadTexturePixelQuery_TryReadPixel final
{
public:
	int32                                         PositionX;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PositionY;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PixelValue;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PixelValueNormalized;                              // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_ReadTexturePixelQuery_TryReadPixel) == 0x000004, "Wrong alignment on SF_ReadTexturePixelQuery_TryReadPixel");
static_assert(sizeof(SF_ReadTexturePixelQuery_TryReadPixel) == 0x000014, "Wrong size on SF_ReadTexturePixelQuery_TryReadPixel");
static_assert(offsetof(SF_ReadTexturePixelQuery_TryReadPixel, PositionX) == 0x000000, "Member 'SF_ReadTexturePixelQuery_TryReadPixel::PositionX' has a wrong offset!");
static_assert(offsetof(SF_ReadTexturePixelQuery_TryReadPixel, PositionY) == 0x000004, "Member 'SF_ReadTexturePixelQuery_TryReadPixel::PositionY' has a wrong offset!");
static_assert(offsetof(SF_ReadTexturePixelQuery_TryReadPixel, PixelValue) == 0x000008, "Member 'SF_ReadTexturePixelQuery_TryReadPixel::PixelValue' has a wrong offset!");
static_assert(offsetof(SF_ReadTexturePixelQuery_TryReadPixel, PixelValueNormalized) == 0x00000C, "Member 'SF_ReadTexturePixelQuery_TryReadPixel::PixelValueNormalized' has a wrong offset!");
static_assert(offsetof(SF_ReadTexturePixelQuery_TryReadPixel, ReturnValue) == 0x000010, "Member 'SF_ReadTexturePixelQuery_TryReadPixel::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.AddReference
// 0x0058 (0x0058 - 0x0000)
struct SF_ReferencerCounterUtils_AddReference final
{
public:
	struct FSF_ReferenceCounter                   Target;                                            // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSF_ReferenceCounterHandle             ReferenceHandle;                                   // 0x0020(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 DebugName;                                         // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_ReferencerCounterUtils_AddReference) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_AddReference");
static_assert(sizeof(SF_ReferencerCounterUtils_AddReference) == 0x000058, "Wrong size on SF_ReferencerCounterUtils_AddReference");
static_assert(offsetof(SF_ReferencerCounterUtils_AddReference, Target) == 0x000000, "Member 'SF_ReferencerCounterUtils_AddReference::Target' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_AddReference, ReferenceHandle) == 0x000020, "Member 'SF_ReferencerCounterUtils_AddReference::ReferenceHandle' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_AddReference, DebugName) == 0x000040, "Member 'SF_ReferencerCounterUtils_AddReference::DebugName' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_AddReference, ReturnValue) == 0x000050, "Member 'SF_ReferencerCounterUtils_AddReference::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.BindEventOnChanged
// 0x0030 (0x0030 - 0x0000)
struct SF_ReferencerCounterUtils_BindEventOnChanged final
{
public:
	struct FSF_ReferenceCounter                   Target;                                            // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool _isActive)>               Event;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReferencerCounterUtils_BindEventOnChanged) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_BindEventOnChanged");
static_assert(sizeof(SF_ReferencerCounterUtils_BindEventOnChanged) == 0x000030, "Wrong size on SF_ReferencerCounterUtils_BindEventOnChanged");
static_assert(offsetof(SF_ReferencerCounterUtils_BindEventOnChanged, Target) == 0x000000, "Member 'SF_ReferencerCounterUtils_BindEventOnChanged::Target' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_BindEventOnChanged, Event) == 0x000020, "Member 'SF_ReferencerCounterUtils_BindEventOnChanged::Event' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.GetReferenceCounterState
// 0x0028 (0x0028 - 0x0000)
struct SF_ReferencerCounterUtils_GetReferenceCounterState final
{
public:
	struct FSF_ReferenceCounter                   Target;                                            // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_ReferencerCounterUtils_GetReferenceCounterState) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_GetReferenceCounterState");
static_assert(sizeof(SF_ReferencerCounterUtils_GetReferenceCounterState) == 0x000028, "Wrong size on SF_ReferencerCounterUtils_GetReferenceCounterState");
static_assert(offsetof(SF_ReferencerCounterUtils_GetReferenceCounterState, Target) == 0x000000, "Member 'SF_ReferencerCounterUtils_GetReferenceCounterState::Target' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_GetReferenceCounterState, ReturnValue) == 0x000020, "Member 'SF_ReferencerCounterUtils_GetReferenceCounterState::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.IsHandleValid
// 0x0028 (0x0028 - 0x0000)
struct SF_ReferencerCounterUtils_IsHandleValid final
{
public:
	struct FSF_ReferenceCounterHandle             ReferenceHandle;                                   // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_ReferencerCounterUtils_IsHandleValid) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_IsHandleValid");
static_assert(sizeof(SF_ReferencerCounterUtils_IsHandleValid) == 0x000028, "Wrong size on SF_ReferencerCounterUtils_IsHandleValid");
static_assert(offsetof(SF_ReferencerCounterUtils_IsHandleValid, ReferenceHandle) == 0x000000, "Member 'SF_ReferencerCounterUtils_IsHandleValid::ReferenceHandle' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_IsHandleValid, ReturnValue) == 0x000020, "Member 'SF_ReferencerCounterUtils_IsHandleValid::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.MakeReferenceCounterWrapper
// 0x0008 (0x0008 - 0x0000)
struct SF_ReferencerCounterUtils_MakeReferenceCounterWrapper final
{
public:
	class USF_ReferenceCounterWrapper*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReferencerCounterUtils_MakeReferenceCounterWrapper) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_MakeReferenceCounterWrapper");
static_assert(sizeof(SF_ReferencerCounterUtils_MakeReferenceCounterWrapper) == 0x000008, "Wrong size on SF_ReferencerCounterUtils_MakeReferenceCounterWrapper");
static_assert(offsetof(SF_ReferencerCounterUtils_MakeReferenceCounterWrapper, ReturnValue) == 0x000000, "Member 'SF_ReferencerCounterUtils_MakeReferenceCounterWrapper::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.RemoveAllReferences
// 0x0020 (0x0020 - 0x0000)
struct SF_ReferencerCounterUtils_RemoveAllReferences final
{
public:
	struct FSF_ReferenceCounter                   Target;                                            // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReferencerCounterUtils_RemoveAllReferences) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_RemoveAllReferences");
static_assert(sizeof(SF_ReferencerCounterUtils_RemoveAllReferences) == 0x000020, "Wrong size on SF_ReferencerCounterUtils_RemoveAllReferences");
static_assert(offsetof(SF_ReferencerCounterUtils_RemoveAllReferences, Target) == 0x000000, "Member 'SF_ReferencerCounterUtils_RemoveAllReferences::Target' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.RemoveReference
// 0x0048 (0x0048 - 0x0000)
struct SF_ReferencerCounterUtils_RemoveReference final
{
public:
	struct FSF_ReferenceCounter                   Target;                                            // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSF_ReferenceCounterHandle             ReferenceHandle;                                   // 0x0020(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SF_ReferencerCounterUtils_RemoveReference) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_RemoveReference");
static_assert(sizeof(SF_ReferencerCounterUtils_RemoveReference) == 0x000048, "Wrong size on SF_ReferencerCounterUtils_RemoveReference");
static_assert(offsetof(SF_ReferencerCounterUtils_RemoveReference, Target) == 0x000000, "Member 'SF_ReferencerCounterUtils_RemoveReference::Target' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_RemoveReference, ReferenceHandle) == 0x000020, "Member 'SF_ReferencerCounterUtils_RemoveReference::ReferenceHandle' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_RemoveReference, ReturnValue) == 0x000040, "Member 'SF_ReferencerCounterUtils_RemoveReference::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ReferencerCounterUtils.UnbindEventOnChanged
// 0x0030 (0x0030 - 0x0000)
struct SF_ReferencerCounterUtils_UnbindEventOnChanged final
{
public:
	struct FSF_ReferenceCounter                   Target;                                            // 0x0000(0x0020)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool _isActive)>               Event;                                             // 0x0020(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ReferencerCounterUtils_UnbindEventOnChanged) == 0x000008, "Wrong alignment on SF_ReferencerCounterUtils_UnbindEventOnChanged");
static_assert(sizeof(SF_ReferencerCounterUtils_UnbindEventOnChanged) == 0x000030, "Wrong size on SF_ReferencerCounterUtils_UnbindEventOnChanged");
static_assert(offsetof(SF_ReferencerCounterUtils_UnbindEventOnChanged, Target) == 0x000000, "Member 'SF_ReferencerCounterUtils_UnbindEventOnChanged::Target' has a wrong offset!");
static_assert(offsetof(SF_ReferencerCounterUtils_UnbindEventOnChanged, Event) == 0x000020, "Member 'SF_ReferencerCounterUtils_UnbindEventOnChanged::Event' has a wrong offset!");

// Function SandFall.SaveGameHelpers.CopyIdenticalProperties
// 0x0010 (0x0010 - 0x0000)
struct SaveGameHelpers_CopyIdenticalProperties final
{
public:
	class UObject*                                FromObject;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                ToObject;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameHelpers_CopyIdenticalProperties) == 0x000008, "Wrong alignment on SaveGameHelpers_CopyIdenticalProperties");
static_assert(sizeof(SaveGameHelpers_CopyIdenticalProperties) == 0x000010, "Wrong size on SaveGameHelpers_CopyIdenticalProperties");
static_assert(offsetof(SaveGameHelpers_CopyIdenticalProperties, FromObject) == 0x000000, "Member 'SaveGameHelpers_CopyIdenticalProperties::FromObject' has a wrong offset!");
static_assert(offsetof(SaveGameHelpers_CopyIdenticalProperties, ToObject) == 0x000008, "Member 'SaveGameHelpers_CopyIdenticalProperties::ToObject' has a wrong offset!");

// Function SandFall.SaveGameHelpers.LoadGameFromPath
// 0x0018 (0x0018 - 0x0000)
struct SaveGameHelpers_LoadGameFromPath final
{
public:
	class FString                                 SaveFilePath;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USaveGame*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SaveGameHelpers_LoadGameFromPath) == 0x000008, "Wrong alignment on SaveGameHelpers_LoadGameFromPath");
static_assert(sizeof(SaveGameHelpers_LoadGameFromPath) == 0x000018, "Wrong size on SaveGameHelpers_LoadGameFromPath");
static_assert(offsetof(SaveGameHelpers_LoadGameFromPath, SaveFilePath) == 0x000000, "Member 'SaveGameHelpers_LoadGameFromPath::SaveFilePath' has a wrong offset!");
static_assert(offsetof(SaveGameHelpers_LoadGameFromPath, ReturnValue) == 0x000010, "Member 'SaveGameHelpers_LoadGameFromPath::ReturnValue' has a wrong offset!");

// Function SandFall.SaveGameHelpers.SaveGameToPath
// 0x0020 (0x0020 - 0x0000)
struct SaveGameHelpers_SaveGameToPath final
{
public:
	class USaveGame*                              SaveGameObject;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SaveFilePath;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SaveGameHelpers_SaveGameToPath) == 0x000008, "Wrong alignment on SaveGameHelpers_SaveGameToPath");
static_assert(sizeof(SaveGameHelpers_SaveGameToPath) == 0x000020, "Wrong size on SaveGameHelpers_SaveGameToPath");
static_assert(offsetof(SaveGameHelpers_SaveGameToPath, SaveGameObject) == 0x000000, "Member 'SaveGameHelpers_SaveGameToPath::SaveGameObject' has a wrong offset!");
static_assert(offsetof(SaveGameHelpers_SaveGameToPath, SaveFilePath) == 0x000008, "Member 'SaveGameHelpers_SaveGameToPath::SaveFilePath' has a wrong offset!");
static_assert(offsetof(SaveGameHelpers_SaveGameToPath, ReturnValue) == 0x000018, "Member 'SaveGameHelpers_SaveGameToPath::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ScreenShotRequestAsyncAction.WriteCurrentScreenToRenderTarget
// 0x0020 (0x0020 - 0x0000)
struct SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RenderTarget_0;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FallBackTime;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUI;                                           // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USF_ScreenShotRequestAsyncAction*       ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget) == 0x000008, "Wrong alignment on SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget");
static_assert(sizeof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget) == 0x000020, "Wrong size on SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget, WorldContextObject) == 0x000000, "Member 'SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget, RenderTarget_0) == 0x000008, "Member 'SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget::RenderTarget_0' has a wrong offset!");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget, FallBackTime) == 0x000010, "Member 'SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget::FallBackTime' has a wrong offset!");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget, bShowUI) == 0x000014, "Member 'SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget::bShowUI' has a wrong offset!");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget, ReturnValue) == 0x000018, "Member 'SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget::ReturnValue' has a wrong offset!");

// Function SandFall.SF_ScreenShotRequestAsyncAction.OnScreenShotDone
// 0x0018 (0x0018 - 0x0000)
struct SF_ScreenShotRequestAsyncAction_OnScreenShotDone final
{
public:
	int32                                         Width;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FColor>                         Colors;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_ScreenShotRequestAsyncAction_OnScreenShotDone) == 0x000008, "Wrong alignment on SF_ScreenShotRequestAsyncAction_OnScreenShotDone");
static_assert(sizeof(SF_ScreenShotRequestAsyncAction_OnScreenShotDone) == 0x000018, "Wrong size on SF_ScreenShotRequestAsyncAction_OnScreenShotDone");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_OnScreenShotDone, Width) == 0x000000, "Member 'SF_ScreenShotRequestAsyncAction_OnScreenShotDone::Width' has a wrong offset!");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_OnScreenShotDone, Height) == 0x000004, "Member 'SF_ScreenShotRequestAsyncAction_OnScreenShotDone::Height' has a wrong offset!");
static_assert(offsetof(SF_ScreenShotRequestAsyncAction_OnScreenShotDone, Colors) == 0x000008, "Member 'SF_ScreenShotRequestAsyncAction_OnScreenShotDone::Colors' has a wrong offset!");

// Function SandFall.SF_StateTreeRunner.SendStateTreeEvent
// 0x0020 (0x0020 - 0x0000)
struct SF_StateTreeRunner_SendStateTreeEvent final
{
public:
	struct FStateTreeEvent                        Event;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_StateTreeRunner_SendStateTreeEvent) == 0x000008, "Wrong alignment on SF_StateTreeRunner_SendStateTreeEvent");
static_assert(sizeof(SF_StateTreeRunner_SendStateTreeEvent) == 0x000020, "Wrong size on SF_StateTreeRunner_SendStateTreeEvent");
static_assert(offsetof(SF_StateTreeRunner_SendStateTreeEvent, Event) == 0x000000, "Member 'SF_StateTreeRunner_SendStateTreeEvent::Event' has a wrong offset!");

// Function SandFall.SF_StateTreeRunner.Tick
// 0x0004 (0x0004 - 0x0000)
struct SF_StateTreeRunner_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_StateTreeRunner_Tick) == 0x000004, "Wrong alignment on SF_StateTreeRunner_Tick");
static_assert(sizeof(SF_StateTreeRunner_Tick) == 0x000004, "Wrong size on SF_StateTreeRunner_Tick");
static_assert(offsetof(SF_StateTreeRunner_Tick, DeltaTime) == 0x000000, "Member 'SF_StateTreeRunner_Tick::DeltaTime' has a wrong offset!");

// Function SandFall.SF_SubtitlesWidget.OnSubtitleWidgetCreated_BP
// 0x0008 (0x0008 - 0x0000)
struct SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP final
{
public:
	class UVerticalBoxSlot*                       NewSubWidget;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP) == 0x000008, "Wrong alignment on SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP");
static_assert(sizeof(SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP) == 0x000008, "Wrong size on SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP");
static_assert(offsetof(SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP, NewSubWidget) == 0x000000, "Member 'SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP::NewSubWidget' has a wrong offset!");

// Function SandFall.SF_SubtitlesWidget.UpdateFromGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct SF_SubtitlesWidget_UpdateFromGameUserSettings final
{
public:
	const class UConfigurableGameUserSettings*    Settings;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_SubtitlesWidget_UpdateFromGameUserSettings) == 0x000008, "Wrong alignment on SF_SubtitlesWidget_UpdateFromGameUserSettings");
static_assert(sizeof(SF_SubtitlesWidget_UpdateFromGameUserSettings) == 0x000008, "Wrong size on SF_SubtitlesWidget_UpdateFromGameUserSettings");
static_assert(offsetof(SF_SubtitlesWidget_UpdateFromGameUserSettings, Settings) == 0x000000, "Member 'SF_SubtitlesWidget_UpdateFromGameUserSettings::Settings' has a wrong offset!");

// Function SandFall.SF_SubtitlesWorldSubsystem.UpdateFromGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings final
{
public:
	const class UConfigurableGameUserSettings*    Settings;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings) == 0x000008, "Wrong alignment on SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings");
static_assert(sizeof(SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings) == 0x000008, "Wrong size on SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings");
static_assert(offsetof(SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings, Settings) == 0x000000, "Member 'SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings::Settings' has a wrong offset!");

// Function SandFall.CharacterStats.GetStat
// 0x0008 (0x0008 - 0x0000)
struct CharacterStats_GetStat final
{
public:
	int32                                         StatId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStats_GetStat) == 0x000004, "Wrong alignment on CharacterStats_GetStat");
static_assert(sizeof(CharacterStats_GetStat) == 0x000008, "Wrong size on CharacterStats_GetStat");
static_assert(offsetof(CharacterStats_GetStat, StatId) == 0x000000, "Member 'CharacterStats_GetStat::StatId' has a wrong offset!");
static_assert(offsetof(CharacterStats_GetStat, ReturnValue) == 0x000004, "Member 'CharacterStats_GetStat::ReturnValue' has a wrong offset!");

// Function SandFall.CharacterStats.SetStat
// 0x0008 (0x0008 - 0x0000)
struct CharacterStats_SetStat final
{
public:
	int32                                         StatId;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StatValue;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStats_SetStat) == 0x000004, "Wrong alignment on CharacterStats_SetStat");
static_assert(sizeof(CharacterStats_SetStat) == 0x000008, "Wrong size on CharacterStats_SetStat");
static_assert(offsetof(CharacterStats_SetStat, StatId) == 0x000000, "Member 'CharacterStats_SetStat::StatId' has a wrong offset!");
static_assert(offsetof(CharacterStats_SetStat, StatValue) == 0x000004, "Member 'CharacterStats_SetStat::StatValue' has a wrong offset!");

// Function SandFall.SandfallCharacterStatsHelpers.GetBaseStatValues
// 0x0050 (0x0050 - 0x0000)
struct SandfallCharacterStatsHelpers_GetBaseStatValues final
{
public:
	TMap<int32, int32>                            ReturnValue;                                       // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallCharacterStatsHelpers_GetBaseStatValues) == 0x000008, "Wrong alignment on SandfallCharacterStatsHelpers_GetBaseStatValues");
static_assert(sizeof(SandfallCharacterStatsHelpers_GetBaseStatValues) == 0x000050, "Wrong size on SandfallCharacterStatsHelpers_GetBaseStatValues");
static_assert(offsetof(SandfallCharacterStatsHelpers_GetBaseStatValues, ReturnValue) == 0x000000, "Member 'SandfallCharacterStatsHelpers_GetBaseStatValues::ReturnValue' has a wrong offset!");

// Function SandFall.SandfallCharacterStatsHelpers.RegisterStats
// 0x0018 (0x0018 - 0x0000)
struct SandfallCharacterStatsHelpers_RegisterStats final
{
public:
	class FName                                   CharacterId;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 StatId, int32 StatValue)> StatCallback;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SandfallCharacterStatsHelpers_RegisterStats) == 0x000004, "Wrong alignment on SandfallCharacterStatsHelpers_RegisterStats");
static_assert(sizeof(SandfallCharacterStatsHelpers_RegisterStats) == 0x000018, "Wrong size on SandfallCharacterStatsHelpers_RegisterStats");
static_assert(offsetof(SandfallCharacterStatsHelpers_RegisterStats, CharacterId) == 0x000000, "Member 'SandfallCharacterStatsHelpers_RegisterStats::CharacterId' has a wrong offset!");
static_assert(offsetof(SandfallCharacterStatsHelpers_RegisterStats, StatCallback) == 0x000008, "Member 'SandfallCharacterStatsHelpers_RegisterStats::StatCallback' has a wrong offset!");

// Function SandFall.UMGBlueprintHelpers.GetMaxCharacterHeightFromStyle
// 0x0350 (0x0350 - 0x0000)
struct UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle final
{
public:
	struct FTextBlockStyle                        Style;                                             // 0x0000(0x0340)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0340(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_344[0xC];                                      // 0x0344(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle) == 0x000010, "Wrong alignment on UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle");
static_assert(sizeof(UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle) == 0x000350, "Wrong size on UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle");
static_assert(offsetof(UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle, Style) == 0x000000, "Member 'UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle::Style' has a wrong offset!");
static_assert(offsetof(UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle, ReturnValue) == 0x000340, "Member 'UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle::ReturnValue' has a wrong offset!");

// Function SandFall.SF_WaitForPSOCachingAsyncAction.WaitForPSOCaching
// 0x0018 (0x0018 - 0x0000)
struct SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWaitingTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USF_WaitForPSOCachingAsyncAction*       ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching) == 0x000008, "Wrong alignment on SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching");
static_assert(sizeof(SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching) == 0x000018, "Wrong size on SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching");
static_assert(offsetof(SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching, WorldContextObject) == 0x000000, "Member 'SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching, MinWaitingTime) == 0x000008, "Member 'SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching::MinWaitingTime' has a wrong offset!");
static_assert(offsetof(SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching, ReturnValue) == 0x000010, "Member 'SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching::ReturnValue' has a wrong offset!");

}

