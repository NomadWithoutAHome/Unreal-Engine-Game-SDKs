#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterData

#include "Basic.hpp"

#include "E_jRPG_StatType_structs.hpp"
#include "ECharacterAttribute_structs.hpp"
#include "S_jRPG_Item_StaticData_structs.hpp"
#include "FPassiveEffectProgression_structs.hpp"
#include "FSkillUnlockInfos_structs.hpp"
#include "E_jRPG_ItemSubtype_structs.hpp"
#include "EAttributeScalingGrade_structs.hpp"
#include "Engine_structs.hpp"
#include "FEquipmentSlot_structs.hpp"
#include "S_jRPG_CharacterDefinition_structs.hpp"
#include "FSkillUnlockData_structs.hpp"
#include "S_CharacterCustomization_structs.hpp"
#include "S_CharacterCustomizationItemData_structs.hpp"
#include "SandFall_classes.hpp"
#include "E_CustomizationItemType_structs.hpp"
#include "E_jRPG_ItemType_structs.hpp"
#include "EAttackType_structs.hpp"
#include "ESkillElementOverride_structs.hpp"
#include "ESkillNodeState_structs.hpp"
#include "ELearnSkillBlockedReason_structs.hpp"
#include "E_Characters_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterData.BP_CharacterData_C
// 0x0898 (0x08C0 - 0x0028)
class UBP_CharacterData_C final : public UExtendedObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   HardcodedNameID;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FFEquipmentSlot, struct FS_jRPG_Item_StaticData> EquipmentPerSlot;                   // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, ContainsInstancedReference)
	TMap<E_jRPG_StatType, double>                 BaseStats;                                         // 0x0088(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<E_jRPG_StatType, double>                 LevelingStats;                                     // 0x00D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_jRPG_StatType, double>                 EquipmentStats;                                    // 0x0128(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_jRPG_StatType, double>                 AttributeStats;                                    // 0x0178(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_jRPG_StatType, double>                 ComputedStats;                                     // 0x01C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentLevel;                                      // 0x0218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentExperienceInLevel;                          // 0x021C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxActionPoints;                                   // 0x0220(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LuminaMaxPointsFromLevel;                          // 0x0224(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LuminaMaxPointsFromConsumables;                    // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentlyUsedLuminaPoints;                         // 0x022C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           EquippedPassiveEffects;                            // 0x0230(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FFPassiveEffectProgression> PassiveEffectProgressions;                  // 0x0240(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	double                                        CurrentHP;                                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAP;                                         // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_CharacterDefinition            CharacterDefinition;                               // 0x02A0(0x0328)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TMap<ECharacterAttribute, int32>              AssignedCharacterAttributePoints;                  // 0x05C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_DA_CharacterAttributeScalingProfile_C* AttributeScalingProfile;                        // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, int32>                      LearntSkills;                                      // 0x0620(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	int32                                         MaxAttributesPointsFromLeveling;                   // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxAttributesPointsFromItems;                      // 0x0674(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillPointsFromLeveling;                           // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillPointsFromItems;                              // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentlyUsedSkillPoints;                          // 0x0680(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_684[0x4];                                      // 0x0684(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_DataAsset_Skill_C*>          UnlockedSkills;                                    // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<class UBP_DataAsset_Skill_C*, struct FFSkillUnlockData> CurrentSkillTreeUnlocksMap;         // 0x0698(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMulticastInlineDelegate<void()>              OnSkillTreeChanged;                                // 0x06E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class UBP_DataAsset_Skill_C*, class UBP_DataAsset_Skill_C*> CurrentSkillTreeParentsMap;     // 0x06F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<class UBP_DataAsset_Skill_C*, struct FFSkillUnlockInfos> CurrentSkillTreeUnlockInfosMap;    // 0x0748(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TArray<class UBP_DataAsset_Skill_C*>          EquippedSkills;                                    // 0x0798(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMulticastInlineDelegate<void()>              OnChange;                                          // 0x07A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UBP_CharacterData_C* CharacterData)> OnExplorationDeath;     // 0x07B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FS_CharacterCustomization              CharacterCustomization;                            // 0x07C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_CharacterCustomizationItemData      CharacterCustomizationItemData;                    // 0x0818(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDeferUpdate;                                 // 0x0828(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDeferredUpdateDirty;                             // 0x0829(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82A[0x6];                                      // 0x082A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterSkillGraphSystem_C*        SkillGraphSystem;                                  // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExcluded;                                        // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FFEquipmentSlot, class UBP_ItemInstance_Gear_C*> EquipmentInstancePerSlot;           // 0x0840(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_DA_CharacterStatsPerLevelScalingProfile_C* StatPerLevelProfile;                        // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DA_CharacterAttributeScalingProfile_DT_C* AttributeScalingProfile_DT;                  // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDispatchModifications;                       // 0x08A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A1[0x7];                                      // 0x08A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_DataAsset_SkillGraph_C*             SkillGraph;                                        // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_CharacterExplorationAudioProfile_C* LoadedAudioProfile_Exploration;          // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_CharacterBattleAudioProfile_C* LoadedAudioProfile_Battle;                    // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddExperience(int32 XP);
	void AddLuminaPointFromConsumable();
	void ApplyCharacterCustomizationItem(class FName ItemName);
	void AssignPointToAttribute(ECharacterAttribute Attribute);
	void BPI_GetDependencies(TArray<TSoftClassPtr<class UClass>>* Classes, TArray<TSoftObjectPtr<class UObject>>* Assets, TArray<TScriptInterface<class IBPI_LoadingDependenciesSource_C>>* ExternalDependencies);
	bool CanAffordLuminaCost(int32 LuminaCost);
	bool CanAffordSkillUnlock(class UBP_DataAsset_Skill_C* Skill);
	bool CanEquipItem(const struct FS_jRPG_Item_StaticData& ItemData);
	bool CanEquipLuminaPassive(const struct FFPassiveEffect& PassiveEffectDefinition, const struct FFPassiveEffectProgression& PassiveEffectProgression, int32* EffectiveCost);
	bool CanLearnSkill(const class UBP_DataAsset_Skill_C*& Skill, ELearnSkillBlockedReason* BlockedReason);
	bool CanLearnSkill_OLD(const class UBP_DataAsset_Skill_C*& Skill, ELearnSkillBlockedReason* BlockedReason);
	bool CanUpdateInternals();
	bool CanUseGearPassiveEffects(class UBP_ItemInstance_Base_C* ItemInstance);
	bool CanUseWeaponPassiveEffects();
	void ComputeAttributeStats(const TMap<ECharacterAttribute, int32>& AssignedAttributes);
	void ComputeEquipmentStats(const TMap<struct FFEquipmentSlot, class UBP_ItemInstance_Gear_C*>& EquipmentInstances, TMap<E_jRPG_StatType, double>* EquipmentStats_0);
	void ComputeStatsFromParts(const TMap<E_jRPG_StatType, double>& base, const TMap<E_jRPG_StatType, double>& Leveling, const TMap<E_jRPG_StatType, double>& Equipment, const TMap<E_jRPG_StatType, double>& Attributes, TMap<E_jRPG_StatType, double>* ComputedStats_0);
	class UBP_CharacterData_C* CreateCopy();
	void DEBUG_CVarChange_IgnoreLuminaCost(bool NewValue);
	void DEBUG_ForceProgressEquippedLumina();
	void DEBUG_UnlockAllLuminaPassives();
	void DispatchModificationsIfPossible(const class FString& DebugReason);
	void DoEquippedItemsGivePassiveEffect(class FName PassiveEffectID, bool* GivePassiveEffect);
	void EquipItemInSlot(const struct FFEquipmentSlot& Slot, struct FS_jRPG_Item_StaticData& Item);
	void EquipItemInstanceInSlot(const struct FFEquipmentSlot& Slot, class UBP_ItemInstance_Gear_C* Item);
	void EquipLuminaPassive(class FName Name_0);
	void EquipMissingLuminaPassivesFromItemInstance(class UBP_ItemInstance_Gear_C* ItemInstance);
	void EquipMissingLuminaPassivesFromItems(struct FS_jRPG_Item_StaticData& Item);
	void EquipSkill(class UBP_DataAsset_Skill_C* SkillID);
	void Error_PassiveEffectNotFoundInDT(class FName Name_0);
	void ExecuteUbergraph_BP_CharacterData(int32 EntryPoint);
	void FlushDeferredUpdate();
	void Get_Weapon_Power(const struct FS_WeaponInstanceData& WeaponInstanceData, int32* PhysicalPower, int32* MagicalPower, int32* BasePhysicalPower, int32* BaseMagicalPower, int32* ScalingPhysicalPower, int32* ScalingMagicalPower);
	void GetActionsOrder(TArray<class FName>* CharacterActionsOrder);
	void GetAllEquipmentSlotTypes(TArray<struct FFEquipmentSlot>* EquipmentSlots);
	void GetAllowedEquipmentSubtypes(TSet<E_jRPG_ItemSubtype>* AllowedEquipmentSubtypes);
	class UTexture2D* GetArmUITexture();
	void GetAssignedAttributePoints(const ECharacterAttribute Attribute, int32* Value);
	int32 GetAttributePointsToAssign();
	void GetAttributeStats(TMap<E_jRPG_StatType, double>* EquipmentStats_0);
	void GetAudioProfile_Battle(struct FFCharacterBattleAudioProfile* BattleAudioProfile);
	class UBP_DataAsset_CharacterExplorationAudioProfile_C* GetAudioProfile_Exploration();
	int32 GetAvailableLuminaPoints();
	void GetAvailablePassiveEffects(TArray<class FName>* PassiveEffectIDs, TArray<class FName>* EquipmentPassiveEffectIDs, TArray<class FName>* LearntPassiveEffectIDs);
	void GetAvailablePassiveEffectsForSlots(TArray<struct FFEquipmentSlot>& Slots, TArray<class FName>* PassiveEffectIDs);
	int32 GetAvailableSkillPoints();
	void GetBaseStats(TMap<E_jRPG_StatType, double>* CharacterStats);
	void GetBattleAudioProfile(struct FFCharacterBattleAudioProfile* BattleAudioProfile);
	void GetBattleIcon(class UTexture2D** CharacterIconBattle);
	void GetBattleSoftClass(TSoftClassPtr<class UClass>* CharacterActorSoftClass);
	void GetBattleStartAP_Count(int32* AP_Count);
	void GetCharacterDeadPortrait(class UMaterialInstance** CharacterDeadPortrait);
	void GetCharacterDisplayName(class FText* CharacterDisplayName);
	void GetCharacterGenderTag(ETextGender* GenderTag);
	void GetCharacterIconBig(class UTexture2D** CharacterIconBig);
	void GetCharacterPortrait(class UTexture2D** CharacterIcon);
	void GetCharacterStats(TMap<E_jRPG_StatType, double>* Stats);
	void GetCommonBattleStats(struct FFCharacterStats* CommonStats);
	void GetCurrentLevelExperience(int32* CurrentExperienceInLevel_0);
	void GetCurrentLevelExperienceProgression(double* Progress);
	int32 GetCurrentlyUsedLuminaPoints();
	void GetCustomizationTypeForCharacter(const struct FS_jRPG_Item_StaticData& Item, E_CustomizationItemType* CustomizationType);
	int32 GetEffectiveLuminaCost(const struct FFPassiveEffect& PassiveEffectDefinition, const struct FFPassiveEffectProgression& PassiveEffectProgression);
	EAttackType GetElementForSkill(class UBP_DataAsset_Skill_C* SkillDefinition);
	void GetEquipmentSaveData(TMap<struct FFEquipmentSlot, class FName>* local_equipmentPerSlotSave1);
	void GetEquipmentStats(TMap<E_jRPG_StatType, double>* EquipmentStats_0);
	void GetEquippedPassiveEffectsData(TArray<struct FFPassiveEffect>* PassiveEffectDefinitions);
	void GetEquippedSkills(TArray<class UBP_DataAsset_Skill_C*>* EquippedSkills_0);
	void GetEquippedSkillsSaveData(TArray<class FName>* EquippedSkillIDs);
	struct FS_WeaponDefinition GetEquippedWeaponDefinition(bool* Valid);
	struct FS_jRPG_Item_StaticData GetEquippedWeaponItem(bool* Valid);
	class UBP_ItemInstance_Gear_Weapon_C* GetEquippedWeaponItemInstance(bool* Valid);
	void GetExplorationAudioProfile(class UBP_DataAsset_CharacterExplorationAudioProfile_C** AudioProfileAsset);
	void GetGearItemsFromEquipmentSlots(const TMap<struct FFEquipmentSlot, struct FS_jRPG_Item_StaticData>& EquipmentPerSlot_0);
	void GetGearPassiveEffects(class UBP_ItemInstance_Gear_C* GearInstance, TArray<class FName>* PassiveEffectIDs);
	void GetHPPercent(double* HPPercent);
	void GetIsExcluded(bool* Excluded);
	void GetItemInSlot(const struct FFEquipmentSlot& Slot, struct FS_jRPG_Item_StaticData* Value);
	void GetItemInstanceInSlot(const struct FFEquipmentSlot& Slot, class UBP_ItemInstance_Gear_C** ItemInstance);
	void GetLearntSkills(TMap<class FName, int32>* LearntSkills_0);
	void GetLuminaDisplayDataFromName(class FName Name_0, struct FS_PassiveEffectDisplayData* PassiveEffectDisplayData);
	void GetLuminaInfoFromName(class FName Name_0, struct FFPassiveEffect* Definition, struct FFPassiveEffectProgression* Progression);
	int32 GetMaxAttributePoints();
	void GetMaxHP(double* MaxHP);
	int32 GetMaxLuminaPoints();
	void GetMaxLuminaPointsDetails(int32* FromLevel, int32* FromConsumables);
	void GetOverdriveSources(struct FS_jRPG_OverdriveSource* OverdriveSources);
	void GetPassiveEffectProgression(const class FName& PassiveEffectID, struct FFPassiveEffectProgression* Progression);
	void GetPassiveEffectProgressionFromItem(const struct FS_jRPG_Item_StaticData& ItemData, bool* Found, struct FFPassiveEffectProgression* Progression);
	void GetSkillGraph(class UBP_DataAsset_SkillGraph_C** SkillGraph_0);
	void GetSkillState(class UBP_DataAsset_Skill_C* Skill, ESkillNodeState* NodeState);
	void GetSkillTree(class UBP_DataAsset_SkillTree_C** SkillTree);
	void GetSlotForItem(class FName ItemId, bool* Found, struct FFEquipmentSlot* Slot);
	void GetTotalAssignedAttributePoints(int32* TotalAssignedAttributePoints);
	int32 GetTotalSkillPoints();
	void GetUnlockedSkillSaveData(TArray<class FName>* UnlockedSkillIDs);
	void GetWeaponInstancePower(class UBP_ItemInstance_Gear_Weapon_C* WeaponInstanceData, int32* TotalDamage, int32* BaseDamage, int32* ScalingDamage, TMap<ECharacterAttribute, int32>* ScalingDamageByAttribute);
	void GetWeaponScalingPotencyMultiplier(EAttributeScalingGrade ScalingGrade, const ECharacterAttribute Attribute, double* Multiplier);
	void HasItemEquipped(class FName ItemId, bool* IsEquipped, struct FFEquipmentSlot* Slot);
	bool HasLearnableSkills();
	bool HasLearntAnyAdjacentSkill(const class UBP_DataAsset_Skill_C*& Skill);
	bool HasMoreSkillsToEquip();
	bool HasPassiveEffectProgressionData(const class FName& Key);
	bool HasReachedMaximulLevel();
	void InitializeAssignedAttributePoints();
	void InitLuminaPassiveProgression(class FName PassiveEffectID);
	void IsPassiveEffectUnlocked(class FName PassiveEffectName, bool* IsUnlocked, bool* BecauseLearnt, bool* BecauseEquipment);
	bool IsSkillUnlocked(const class UBP_DataAsset_Skill_C*& Skill);
	bool IsSlotEmpty(const struct FFEquipmentSlot& Slot);
	bool IsSlotUsed(const struct FFEquipmentSlot& Key);
	void LoadAssignedAttributePoints(const TMap<ECharacterAttribute, int32>& InputPin);
	void LoadBattleFinalState(class UAC_jRPG_CharacterBattleStats_C* CharacterStats);
	void LoadCharacterBaseDataFromID(class FName HardcodedNameID_0);
	void LoadCharacterBaseDataLegacy(const struct FS_jRPG_CharacterSaveState& Legacy_CharacterSaveData, class UBP_jRPG_GI_Custom_C*& LegacyOnly_GameInstance);
	void LoadCharacterCustomizationFromItemData();
	void LoadCharacterDefinition(const struct FS_jRPG_CharacterDefinition& CharacterDefinition_0);
	void LoadCharacterState(const struct FS_jRPG_CharacterSaveState& CharacterState);
	void MergeCurrentEquipmentInstancesWithOverrides(const TMap<struct FFEquipmentSlot, class UBP_ItemInstance_Gear_C*>& EquipmentOverrides, TMap<struct FFEquipmentSlot, class UBP_ItemInstance_Gear_C*>* MergedEquipment);
	void OnNewItemAcquired(struct FS_jRPG_Item_StaticData& ItemStaticData);
	void OnSkillGraphStateChanged();
	void PreviewStatsWithEquipmentOverrides(const TMap<struct FFEquipmentSlot, class UBP_ItemInstance_Gear_C*>& EquipmentOverrides, TMap<E_jRPG_StatType, double>* StatsPreview);
	void ProgressEquippedLuminas();
	void ProgressPassiveEffectShared(class FName PassiveEffectID);
	void ReceiveExplorationDamage(int32 Amount);
	void ReceiveExplorationDamagePercent(int32 Percent);
	void RefreshUsedLuminaPointsInternal();
	void ReplaceItemInSlot(const struct FFEquipmentSlot& Slot, struct FS_jRPG_Item_StaticData& Item);
	void ReplaceItemInstanceInSlot(const struct FFEquipmentSlot& Slot, class UBP_ItemInstance_Gear_C* Item);
	void ResetAssignedAttributePoints();
	void SaveCharacterState(struct FS_jRPG_CharacterSaveState& OutState, struct FS_jRPG_CharacterSaveState* StructOut);
	void SetCharacterCustomizationItemData(const struct FS_CharacterCustomizationItemData& CharacterCustomizationItemData_0);
	void SetEquippedSkillOverrides(TArray<class UBP_DataAsset_Skill_C*>& EquippedSkills_0);
	void SetIsExcluded(bool Excluded);
	void SetLevel(int32 NewLevel);
	void SetShouldDispatchModifications(bool ShouldDispatchModifications_0);
	void StartDeferUpdate();
	void TryEquipLuminaPassive(class FName Name_0, bool* Successful);
	void TryUnlockLevelUpAchievements();
	void TryUnlockSkill(class UBP_DataAsset_Skill_C* Skill, bool* Success);
	void UnequipItem(const struct FS_jRPG_Item_StaticData& Item);
	void UnequipItemFromInstance(class UBP_ItemInstance_Gear_C* GearInstance);
	void UnequipItemInSlot(const struct FFEquipmentSlot& Slot);
	void UnequipItemInstanceInSlot(const struct FFEquipmentSlot& Slot);
	void UnequipLuminaPassive(class FName Name_0);
	void UnequipLuminaPassiveList(TArray<class FName>& PassiveIDs);
	void UnequipLuminaPassiveListInternal(TArray<class FName>& PassiveIDs);
	void UnequipSkill(class UBP_DataAsset_Skill_C* SkillID);
	void Update_Attribute_Stats();
	void UpdateEquipmentStats();
	void UpdateLevelingStats();
	void UpdateLuminaSystem();
	void UpdatePassiveEffectProgression(const struct FFPassiveEffectProgression& DirtyProgression, struct FFPassiveEffectProgression* UpdatedProgression);
	void UpdateStats();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterData_C">();
	}
	static class UBP_CharacterData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterData_C>();
	}
};
static_assert(alignof(UBP_CharacterData_C) == 0x000008, "Wrong alignment on UBP_CharacterData_C");
static_assert(sizeof(UBP_CharacterData_C) == 0x0008C0, "Wrong size on UBP_CharacterData_C");
static_assert(offsetof(UBP_CharacterData_C, UberGraphFrame) == 0x000028, "Member 'UBP_CharacterData_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, HardcodedNameID) == 0x000030, "Member 'UBP_CharacterData_C::HardcodedNameID' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, EquipmentPerSlot) == 0x000038, "Member 'UBP_CharacterData_C::EquipmentPerSlot' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, BaseStats) == 0x000088, "Member 'UBP_CharacterData_C::BaseStats' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, LevelingStats) == 0x0000D8, "Member 'UBP_CharacterData_C::LevelingStats' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, EquipmentStats) == 0x000128, "Member 'UBP_CharacterData_C::EquipmentStats' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, AttributeStats) == 0x000178, "Member 'UBP_CharacterData_C::AttributeStats' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, ComputedStats) == 0x0001C8, "Member 'UBP_CharacterData_C::ComputedStats' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentLevel) == 0x000218, "Member 'UBP_CharacterData_C::CurrentLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentExperienceInLevel) == 0x00021C, "Member 'UBP_CharacterData_C::CurrentExperienceInLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, MaxActionPoints) == 0x000220, "Member 'UBP_CharacterData_C::MaxActionPoints' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, LuminaMaxPointsFromLevel) == 0x000224, "Member 'UBP_CharacterData_C::LuminaMaxPointsFromLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, LuminaMaxPointsFromConsumables) == 0x000228, "Member 'UBP_CharacterData_C::LuminaMaxPointsFromConsumables' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentlyUsedLuminaPoints) == 0x00022C, "Member 'UBP_CharacterData_C::CurrentlyUsedLuminaPoints' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, EquippedPassiveEffects) == 0x000230, "Member 'UBP_CharacterData_C::EquippedPassiveEffects' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, PassiveEffectProgressions) == 0x000240, "Member 'UBP_CharacterData_C::PassiveEffectProgressions' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentHP) == 0x000290, "Member 'UBP_CharacterData_C::CurrentHP' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentAP) == 0x000298, "Member 'UBP_CharacterData_C::CurrentAP' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CharacterDefinition) == 0x0002A0, "Member 'UBP_CharacterData_C::CharacterDefinition' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, AssignedCharacterAttributePoints) == 0x0005C8, "Member 'UBP_CharacterData_C::AssignedCharacterAttributePoints' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, AttributeScalingProfile) == 0x000618, "Member 'UBP_CharacterData_C::AttributeScalingProfile' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, LearntSkills) == 0x000620, "Member 'UBP_CharacterData_C::LearntSkills' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, MaxAttributesPointsFromLeveling) == 0x000670, "Member 'UBP_CharacterData_C::MaxAttributesPointsFromLeveling' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, MaxAttributesPointsFromItems) == 0x000674, "Member 'UBP_CharacterData_C::MaxAttributesPointsFromItems' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, SkillPointsFromLeveling) == 0x000678, "Member 'UBP_CharacterData_C::SkillPointsFromLeveling' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, SkillPointsFromItems) == 0x00067C, "Member 'UBP_CharacterData_C::SkillPointsFromItems' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentlyUsedSkillPoints) == 0x000680, "Member 'UBP_CharacterData_C::CurrentlyUsedSkillPoints' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, UnlockedSkills) == 0x000688, "Member 'UBP_CharacterData_C::UnlockedSkills' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentSkillTreeUnlocksMap) == 0x000698, "Member 'UBP_CharacterData_C::CurrentSkillTreeUnlocksMap' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, OnSkillTreeChanged) == 0x0006E8, "Member 'UBP_CharacterData_C::OnSkillTreeChanged' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentSkillTreeParentsMap) == 0x0006F8, "Member 'UBP_CharacterData_C::CurrentSkillTreeParentsMap' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CurrentSkillTreeUnlockInfosMap) == 0x000748, "Member 'UBP_CharacterData_C::CurrentSkillTreeUnlockInfosMap' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, EquippedSkills) == 0x000798, "Member 'UBP_CharacterData_C::EquippedSkills' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, OnChange) == 0x0007A8, "Member 'UBP_CharacterData_C::OnChange' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, OnExplorationDeath) == 0x0007B8, "Member 'UBP_CharacterData_C::OnExplorationDeath' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CharacterCustomization) == 0x0007C8, "Member 'UBP_CharacterData_C::CharacterCustomization' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, CharacterCustomizationItemData) == 0x000818, "Member 'UBP_CharacterData_C::CharacterCustomizationItemData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, ShouldDeferUpdate) == 0x000828, "Member 'UBP_CharacterData_C::ShouldDeferUpdate' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, IsDeferredUpdateDirty) == 0x000829, "Member 'UBP_CharacterData_C::IsDeferredUpdateDirty' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, SkillGraphSystem) == 0x000830, "Member 'UBP_CharacterData_C::SkillGraphSystem' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, IsExcluded) == 0x000838, "Member 'UBP_CharacterData_C::IsExcluded' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, EquipmentInstancePerSlot) == 0x000840, "Member 'UBP_CharacterData_C::EquipmentInstancePerSlot' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, StatPerLevelProfile) == 0x000890, "Member 'UBP_CharacterData_C::StatPerLevelProfile' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, AttributeScalingProfile_DT) == 0x000898, "Member 'UBP_CharacterData_C::AttributeScalingProfile_DT' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, ShouldDispatchModifications) == 0x0008A0, "Member 'UBP_CharacterData_C::ShouldDispatchModifications' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, SkillGraph) == 0x0008A8, "Member 'UBP_CharacterData_C::SkillGraph' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, LoadedAudioProfile_Exploration) == 0x0008B0, "Member 'UBP_CharacterData_C::LoadedAudioProfile_Exploration' has a wrong offset!");
static_assert(offsetof(UBP_CharacterData_C, LoadedAudioProfile_Battle) == 0x0008B8, "Member 'UBP_CharacterData_C::LoadedAudioProfile_Battle' has a wrong offset!");

}

