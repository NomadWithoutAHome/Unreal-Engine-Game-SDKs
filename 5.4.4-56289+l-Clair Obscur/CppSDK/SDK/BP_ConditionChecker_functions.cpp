#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConditionChecker

#include "Basic.hpp"

#include "BP_ConditionChecker_classes.hpp"
#include "BP_ConditionChecker_parameters.hpp"


namespace SDK
{

// Function BP_ConditionChecker.BP_ConditionChecker_C.AppendPropertyPath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString&                          CurrentPath                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// const class FString&                    PropertyName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_ConditionChecker_C::AppendPropertyPath(class FString& CurrentPath, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_C", "AppendPropertyPath");

	Params::BP_ConditionChecker_C_AppendPropertyPath Parms{};

	Parms.CurrentPath = std::move(CurrentPath);
	Parms.PropertyName = std::move(PropertyName);

	UObject::ProcessEvent(Func, &Parms);

	CurrentPath = std::move(Parms.CurrentPath);

	return Parms.ReturnValue;
}


// Function BP_ConditionChecker.BP_ConditionChecker_C.BindEventOnGameStateChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_C::BindEventOnGameStateChanged(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_C", "BindEventOnGameStateChanged");

	Params::BP_ConditionChecker_C_BindEventOnGameStateChanged Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionChecker.BP_ConditionChecker_C.ReportValidationError
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMesssages                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    PropertyPath                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_ConditionChecker_C::ReportValidationError(TArray<class FText>& ErrorMesssages, const class FString& PropertyPath, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_C", "ReportValidationError");

	Params::BP_ConditionChecker_C_ReportValidationError Parms{};

	Parms.ErrorMesssages = std::move(ErrorMesssages);
	Parms.PropertyPath = std::move(PropertyPath);
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMesssages = std::move(Parms.ErrorMesssages);
}


// Function BP_ConditionChecker.BP_ConditionChecker_C.UnbindEventOnGameStateChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_C::UnbindEventOnGameStateChanged(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_C", "UnbindEventOnGameStateChanged");

	Params::BP_ConditionChecker_C_UnbindEventOnGameStateChanged Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionChecker.BP_ConditionChecker_C.ValidateConditionChecker
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString&                          PropertyPath                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void UBP_ConditionChecker_C::ValidateConditionChecker(TArray<class FText>& ErrorMessages, class FString& PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_C", "ValidateConditionChecker");

	Params::BP_ConditionChecker_C_ValidateConditionChecker Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.PropertyPath = std::move(PropertyPath);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);
	PropertyPath = std::move(Parms.PropertyPath);
}

}

