#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AudioBattleCharacterManager

#include "Basic.hpp"

#include "EOnoType_structs.hpp"
#include "EBattleHitBy_structs.hpp"
#include "EBattleCommonSFX_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "EFootstepsType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EUiBattleType_structs.hpp"


namespace SDK::Params
{

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.Activate ControlBusMix
// 0x0008 (0x0008 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix final
{
public:
	class USoundControlBusMix*                    Activate_ControlBusMix_0;                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix) == 0x000008, "Wrong size on BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix, Activate_ControlBusMix_0) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_Activate_ControlBusMix::Activate_ControlBusMix_0' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.Deactivate ControlBusMix
// 0x0008 (0x0008 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix final
{
public:
	class USoundControlBusMix*                    Deactivate_ControlBusMix_0;                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix) == 0x000008, "Wrong size on BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix, Deactivate_ControlBusMix_0) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_Deactivate_ControlBusMix::Deactivate_ControlBusMix_0' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleCommonSFX
// 0x0002 (0x0002 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX final
{
public:
	EBattleCommonSFX                              Battle_Common_SFX;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX) == 0x000001, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX) == 0x000002, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX, Battle_Common_SFX) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX::Battle_Common_SFX' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX, ShouldAttachToComponent_) == 0x000001, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleCommonSFX::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleFoley
// 0x0018 (0x0018 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleFoley final
{
public:
	class UMetaSoundSource*                       BattleFoley;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleFoley) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleFoley");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleFoley) == 0x000018, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleFoley");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFoley, BattleFoley) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFoley::BattleFoley' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFoley, AttenuationOverride) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFoley::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFoley, ShouldAttachToComponent_) == 0x000010, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFoley::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleFootstepEvent
// 0x0028 (0x0028 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent final
{
public:
	EFootstepsType                                FootstepType;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              SurfaceType;                                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent) == 0x000028, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent, FootstepType) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent::FootstepType' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent, Location) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent::Location' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent, SurfaceType) == 0x000020, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent::SurfaceType' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent, ShouldAttachToComponent_) == 0x000021, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleFootstepEvent::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleOno
// 0x0001 (0x0001 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleOno final
{
public:
	EOnoType                                      OnoType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleOno) == 0x000001, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleOno");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleOno) == 0x000001, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleOno");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleOno, OnoType) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleOno::OnoType' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleSFXEvent
// 0x0018 (0x0018 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent final
{
public:
	class UMetaSoundSource*                       BattleSFX;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent) == 0x000018, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent, BattleSFX) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent::BattleSFX' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent, AttenuationOverride) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent, ShouldAttachToComponent_) == 0x000010, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleSFXEvent::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleSoundProto
// 0x0008 (0x0008 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto final
{
public:
	class USoundBase*                             BattlePlaceholder;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto) == 0x000008, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto, BattlePlaceholder) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleSoundProto::BattlePlaceholder' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleUi
// 0x0002 (0x0002 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleUi final
{
public:
	EUiBattleType                                 UI_Battle_Type;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleUi) == 0x000001, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleUi");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleUi) == 0x000002, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleUi");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleUi, UI_Battle_Type) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleUi::UI_Battle_Type' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleUi, ShouldAttachToComponent_) == 0x000001, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleUi::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleVocalEvent
// 0x0018 (0x0018 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent final
{
public:
	class UMetaSoundSource*                       BattleVocal;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent) == 0x000018, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent, BattleVocal) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent::BattleVocal' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent, AttenuationOverride) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent, ShouldAttachToComponent_) == 0x000010, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleVocalEvent::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleWeaponLeft
// 0x0018 (0x0018 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft final
{
public:
	class UMetaSoundSource*                       BattleWeaponLeft;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft) == 0x000018, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft, BattleWeaponLeft) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft::BattleWeaponLeft' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft, AttenuationOverride) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft, ShouldAttachToComponent_) == 0x000010, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleWeaponLeft::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayBattleWeaponRight
// 0x0018 (0x0018 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight final
{
public:
	class UMetaSoundSource*                       BattleWeaponRight;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight) == 0x000018, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight, BattleWeaponRight) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight::BattleWeaponRight' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight, AttenuationOverride) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight, ShouldAttachToComponent_) == 0x000010, "Member 'BPI_AudioBattleCharacterManager_C_PlayBattleWeaponRight::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayDeathCommon
// 0x0010 (0x0010 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayDeathCommon final
{
public:
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayDeathCommon");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon) == 0x000010, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayDeathCommon");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon, AttenuationOverride) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayDeathCommon::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon, ShouldAttachToComponent_) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayDeathCommon::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayDeathCommon_Bodyfall
// 0x0010 (0x0010 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall final
{
public:
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall) == 0x000010, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall, AttenuationOverride) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall, ShouldAttachToComponent_) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayDeathCommon_Bodyfall::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayHitBy_CallByBP
// 0x0001 (0x0001 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP final
{
public:
	EBattleHitBy                                  Hit_By_CallByBP;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP) == 0x000001, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP) == 0x000001, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP, Hit_By_CallByBP) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayHitBy_CallByBP::Hit_By_CallByBP' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayHitByCommonEvent
// 0x0010 (0x0010 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent final
{
public:
	class USoundAttenuation*                      AttenuationOverride;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent) == 0x000010, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent, AttenuationOverride) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent::AttenuationOverride' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent, ShouldAttachToComponent_) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayHitByCommonEvent::ShouldAttachToComponent_' has a wrong offset!");

// Function BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C.PlayHitByEvent
// 0x0010 (0x0010 - 0x0000)
struct BPI_AudioBattleCharacterManager_C_PlayHitByEvent final
{
public:
	class UMetaSoundSource*                       BattleHitBy;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAttachToComponent_;                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_AudioBattleCharacterManager_C_PlayHitByEvent) == 0x000008, "Wrong alignment on BPI_AudioBattleCharacterManager_C_PlayHitByEvent");
static_assert(sizeof(BPI_AudioBattleCharacterManager_C_PlayHitByEvent) == 0x000010, "Wrong size on BPI_AudioBattleCharacterManager_C_PlayHitByEvent");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayHitByEvent, BattleHitBy) == 0x000000, "Member 'BPI_AudioBattleCharacterManager_C_PlayHitByEvent::BattleHitBy' has a wrong offset!");
static_assert(offsetof(BPI_AudioBattleCharacterManager_C_PlayHitByEvent, ShouldAttachToComponent_) == 0x000008, "Member 'BPI_AudioBattleCharacterManager_C_PlayHitByEvent::ShouldAttachToComponent_' has a wrong offset!");

}

