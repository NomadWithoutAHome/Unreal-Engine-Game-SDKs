#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ClimbingElement

#include "Basic.hpp"

#include "BPI_ClimbingElement_classes.hpp"
#include "BPI_ClimbingElement_parameters.hpp"


namespace SDK
{

// Function BPI_ClimbingElement.BPI_ClimbingElement_C.CheckCanExitToBottom
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputDirectionVertical                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanExit                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ClimbingElement_C::CheckCanExitToBottom(const struct FVector& InputDirectionVertical, double InputScale, bool* CanExit, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ClimbingElement_C", "CheckCanExitToBottom");

	Params::BPI_ClimbingElement_C_CheckCanExitToBottom Parms{};

	Parms.InputDirectionVertical = std::move(InputDirectionVertical);
	Parms.InputScale = InputScale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanExit != nullptr)
		*CanExit = Parms.CanExit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_ClimbingElement.BPI_ClimbingElement_C.CheckCanExitToTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputDirectionVertical                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanExit                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ClimbingElement_C::CheckCanExitToTop(const struct FVector& InputDirectionVertical, double InputScale, bool* CanExit, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ClimbingElement_C", "CheckCanExitToTop");

	Params::BPI_ClimbingElement_C_CheckCanExitToTop Parms{};

	Parms.InputDirectionVertical = std::move(InputDirectionVertical);
	Parms.InputScale = InputScale;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanExit != nullptr)
		*CanExit = Parms.CanExit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BPI_ClimbingElement.BPI_ClimbingElement_C.CheckMoveToNextClimbingElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   InputDirectionHorizontal                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   InputDirectionVertical                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraForward                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   CameraLocation                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   CanMove                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IBPI_ClimbingElement_C>*NextHold                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ClimbingElement_C::CheckMoveToNextClimbingElement(const struct FVector& InputDirectionHorizontal, const struct FVector& InputDirectionVertical, double InputScale, const struct FVector& CameraForward, const struct FVector& CameraLocation, bool* CanMove, TScriptInterface<class IBPI_ClimbingElement_C>* NextHold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ClimbingElement_C", "CheckMoveToNextClimbingElement");

	Params::BPI_ClimbingElement_C_CheckMoveToNextClimbingElement Parms{};

	Parms.InputDirectionHorizontal = std::move(InputDirectionHorizontal);
	Parms.InputDirectionVertical = std::move(InputDirectionVertical);
	Parms.InputScale = InputScale;
	Parms.CameraForward = std::move(CameraForward);
	Parms.CameraLocation = std::move(CameraLocation);

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanMove != nullptr)
		*CanMove = Parms.CanMove;

	if (NextHold != nullptr)
		*NextHold = Parms.NextHold;
}


// Function BPI_ClimbingElement.BPI_ClimbingElement_C.GetClimbingElementLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_ClimbingElement_C::GetClimbingElementLocation(struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ClimbingElement_C", "GetClimbingElementLocation");

	Params::BPI_ClimbingElement_C_GetClimbingElementLocation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BPI_ClimbingElement.BPI_ClimbingElement_C.GetClimbingElementRotation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void IBPI_ClimbingElement_C::GetClimbingElementRotation(struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_ClimbingElement_C", "GetClimbingElementRotation");

	Params::BPI_ClimbingElement_C_GetClimbingElementRotation Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}

}

