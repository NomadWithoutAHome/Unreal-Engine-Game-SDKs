#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_MapTeleportPoint

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "EModalUIResponse_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_MapTeleportPoint.BP_jRPG_MapTeleportPoint_C
// 0x00A8 (0x0338 - 0x0290)
class ABP_jRPG_MapTeleportPoint_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      FX_SmokeWorldEmission;                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_DragonPortal;                                    // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               FX_Transition;                                     // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube_Transition;                                   // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TeleportBox;                                       // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    LevelDestination;                                  // 0x02D0(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FGameplayTag                           DestinationSpawnPointTag;                          // 0x02E0(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnSpawnPointTag;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	class FText                                   DestinationAreaName;                               // 0x02F0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UBP_jRPG_GI_Custom_C*                   GameInstanceReference;                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ExtraPortalFX;                                     // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FConditionChecker_Wrapper              ConditionToEnterLevel;                             // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FGameAction_Wrapper                    GameActionOnConditionFailed;                       // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsInWorldMapLevel;                                 // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CheckFullGameDownloaded;                           // 0x0329(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32A[0x2];                                      // 0x032A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           MiniMapIdentifierTag;                              // 0x032C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_jRPG_MapTeleportPoint_TeleportBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_jRPG_MapTeleportPoint_TeleportBox_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ExecuteUbergraph_BP_jRPG_MapTeleportPoint(int32 EntryPoint);
	bool HasDownloadedRequiredContent();
	void InitializeFX();
	void OnModalResponse(EModalUIResponse InUserResponse);
	void OnPlayerBeginOverlapTeleportBox();
	void OnPlayerEndOverlapTeleportBox();
	void ProcessChangeMap();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void UpdateFX();
	void UpdateReturnSpawnPointTag();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_MapTeleportPoint_C">();
	}
	static class ABP_jRPG_MapTeleportPoint_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_MapTeleportPoint_C>();
	}
};
static_assert(alignof(ABP_jRPG_MapTeleportPoint_C) == 0x000008, "Wrong alignment on ABP_jRPG_MapTeleportPoint_C");
static_assert(sizeof(ABP_jRPG_MapTeleportPoint_C) == 0x000338, "Wrong size on ABP_jRPG_MapTeleportPoint_C");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, UberGraphFrame) == 0x000290, "Member 'ABP_jRPG_MapTeleportPoint_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, FX_SmokeWorldEmission) == 0x000298, "Member 'ABP_jRPG_MapTeleportPoint_C::FX_SmokeWorldEmission' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, TextRender) == 0x0002A0, "Member 'ABP_jRPG_MapTeleportPoint_C::TextRender' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, P_DragonPortal) == 0x0002A8, "Member 'ABP_jRPG_MapTeleportPoint_C::P_DragonPortal' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, FX_Transition) == 0x0002B0, "Member 'ABP_jRPG_MapTeleportPoint_C::FX_Transition' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, Cube_Transition) == 0x0002B8, "Member 'ABP_jRPG_MapTeleportPoint_C::Cube_Transition' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, TeleportBox) == 0x0002C0, "Member 'ABP_jRPG_MapTeleportPoint_C::TeleportBox' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, Scene) == 0x0002C8, "Member 'ABP_jRPG_MapTeleportPoint_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, LevelDestination) == 0x0002D0, "Member 'ABP_jRPG_MapTeleportPoint_C::LevelDestination' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, DestinationSpawnPointTag) == 0x0002E0, "Member 'ABP_jRPG_MapTeleportPoint_C::DestinationSpawnPointTag' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, ReturnSpawnPointTag) == 0x0002E8, "Member 'ABP_jRPG_MapTeleportPoint_C::ReturnSpawnPointTag' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, DestinationAreaName) == 0x0002F0, "Member 'ABP_jRPG_MapTeleportPoint_C::DestinationAreaName' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, GameInstanceReference) == 0x000300, "Member 'ABP_jRPG_MapTeleportPoint_C::GameInstanceReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, ExtraPortalFX) == 0x000308, "Member 'ABP_jRPG_MapTeleportPoint_C::ExtraPortalFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, ConditionToEnterLevel) == 0x000310, "Member 'ABP_jRPG_MapTeleportPoint_C::ConditionToEnterLevel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, GameActionOnConditionFailed) == 0x000318, "Member 'ABP_jRPG_MapTeleportPoint_C::GameActionOnConditionFailed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, IsInWorldMapLevel) == 0x000328, "Member 'ABP_jRPG_MapTeleportPoint_C::IsInWorldMapLevel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, CheckFullGameDownloaded) == 0x000329, "Member 'ABP_jRPG_MapTeleportPoint_C::CheckFullGameDownloaded' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_MapTeleportPoint_C, MiniMapIdentifierTag) == 0x00032C, "Member 'ABP_jRPG_MapTeleportPoint_C::MiniMapIdentifierTag' has a wrong offset!");

}

