#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SandFall

#include "Basic.hpp"

#include "SandFall_classes.hpp"
#include "SandFall_parameters.hpp"


namespace SDK
{

// Function SandFall.AsyncActionHandlePlatformsSaveData.AsyncSaveLatestGameSaveLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncActionHandlePlatformsSaveData*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncActionHandlePlatformsSaveData* UAsyncActionHandlePlatformsSaveData::AsyncSaveLatestGameSaveLoaded(class UObject* WorldContextObject, const class FString& SaveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncActionHandlePlatformsSaveData", "AsyncSaveLatestGameSaveLoaded");

	Params::AsyncActionHandlePlatformsSaveData_AsyncSaveLatestGameSaveLoaded Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SaveName = std::move(SaveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.CameraModifier_CameraShake_BP.BlueprintAddedToCamera
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerCameraManager*             Camera                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraModifier_CameraShake_BP::BlueprintAddedToCamera(class APlayerCameraManager* Camera)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraModifier_CameraShake_BP", "BlueprintAddedToCamera");

	Params::CameraModifier_CameraShake_BP_BlueprintAddedToCamera Parms{};

	Parms.Camera = Camera;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.CameraModifier_Meta.GetCameraMetaModifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FCameraModifier_MetaWrapper&_wrapper                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UCameraModifier_Meta**            OutMetaModifier                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraModifier_Meta::GetCameraMetaModifier(const struct FCameraModifier_MetaWrapper& _wrapper, class UCameraModifier_Meta** OutMetaModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CameraModifier_Meta", "GetCameraMetaModifier");

	Params::CameraModifier_Meta_GetCameraMetaModifier Parms{};

	Parms._wrapper = std::move(_wrapper);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutMetaModifier != nullptr)
		*OutMetaModifier = Parms.OutMetaModifier;
}


// Function SandFall.CameraModifier_Meta.SetTargetCameraModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCameraModifier*                  _cameraModifier                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCameraModifier_Meta::SetTargetCameraModifier(class UCameraModifier* _cameraModifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CameraModifier_Meta", "SetTargetCameraModifier");

	Params::CameraModifier_Meta_SetTargetCameraModifier Parms{};

	Parms._cameraModifier = _cameraModifier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.AssignBodyAndFaceSkin
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CharacterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>&        BodySkinClass                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>&        FaceSkinClass                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSkinAssignPolicy::AssignBodyAndFaceSkin(class AActor* Owner, const class FName& CharacterName, const TSubclassOf<class AActor>& BodySkinClass, const TSubclassOf<class AActor>& FaceSkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "AssignBodyAndFaceSkin");

	Params::CharacterSkinAssignPolicy_AssignBodyAndFaceSkin Parms{};

	Parms.Owner = Owner;
	Parms.CharacterName = CharacterName;
	Parms.BodySkinClass = BodySkinClass;
	Parms.FaceSkinClass = FaceSkinClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.AssignBodyAndFaceSkinAsync
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CharacterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftClassPtr<class UClass>&      BodySkinClass                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftClassPtr<class UClass>&      FaceSkinClass                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSkinAssignPolicy::AssignBodyAndFaceSkinAsync(class AActor* Owner, const class FName& CharacterName, const TSoftClassPtr<class UClass>& BodySkinClass, const TSoftClassPtr<class UClass>& FaceSkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "AssignBodyAndFaceSkinAsync");

	Params::CharacterSkinAssignPolicy_AssignBodyAndFaceSkinAsync Parms{};

	Parms.Owner = Owner;
	Parms.CharacterName = CharacterName;
	Parms.BodySkinClass = BodySkinClass;
	Parms.FaceSkinClass = FaceSkinClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.AssignBodySkin
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CharacterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>&        BodySkinClass                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSkinAssignPolicy::AssignBodySkin(class AActor* Owner, const class FName& CharacterName, const TSubclassOf<class AActor>& BodySkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "AssignBodySkin");

	Params::CharacterSkinAssignPolicy_AssignBodySkin Parms{};

	Parms.Owner = Owner;
	Parms.CharacterName = CharacterName;
	Parms.BodySkinClass = BodySkinClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.AssignBodySkinAsync
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CharacterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftClassPtr<class UClass>&      BodySkinClass                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSkinAssignPolicy::AssignBodySkinAsync(class AActor* Owner, const class FName& CharacterName, const TSoftClassPtr<class UClass>& BodySkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "AssignBodySkinAsync");

	Params::CharacterSkinAssignPolicy_AssignBodySkinAsync Parms{};

	Parms.Owner = Owner;
	Parms.CharacterName = CharacterName;
	Parms.BodySkinClass = BodySkinClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.AssignFaceSkin
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CharacterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>&        FaceSkinClass                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSkinAssignPolicy::AssignFaceSkin(class AActor* Owner, const class FName& CharacterName, const TSubclassOf<class AActor>& FaceSkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "AssignFaceSkin");

	Params::CharacterSkinAssignPolicy_AssignFaceSkin Parms{};

	Parms.Owner = Owner;
	Parms.CharacterName = CharacterName;
	Parms.FaceSkinClass = FaceSkinClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.AssignFaceSkinAsync
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      CharacterName                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftClassPtr<class UClass>&      FaceSkinClass                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterSkinAssignPolicy::AssignFaceSkinAsync(class AActor* Owner, const class FName& CharacterName, const TSoftClassPtr<class UClass>& FaceSkinClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "AssignFaceSkinAsync");

	Params::CharacterSkinAssignPolicy_AssignFaceSkinAsync Parms{};

	Parms.Owner = Owner;
	Parms.CharacterName = CharacterName;
	Parms.FaceSkinClass = FaceSkinClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.InitSkinAssignPolicy
// (Native, Public, BlueprintCallable)

void UCharacterSkinAssignPolicy::InitSkinAssignPolicy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "InitSkinAssignPolicy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterSkinAssignPolicy.OnSkinAssignPolicyDestroyed
// (Native, Public, BlueprintCallable)

void UCharacterSkinAssignPolicy::OnSkinAssignPolicyDestroyed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterSkinAssignPolicy", "OnSkinAssignPolicyDestroyed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConsoleUtils.GetBoolCVar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleUtils::GetBoolCVar(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "GetBoolCVar");

	Params::ConsoleUtils_GetBoolCVar Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConsoleUtils.GetFloatCVar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConsoleUtils::GetFloatCVar(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "GetFloatCVar");

	Params::ConsoleUtils_GetFloatCVar Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConsoleUtils.GetIntCVar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConsoleUtils::GetIntCVar(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "GetIntCVar");

	Params::ConsoleUtils_GetIntCVar Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConsoleUtils.GetStringCVar
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UConsoleUtils::GetStringCVar(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "GetStringCVar");

	Params::ConsoleUtils_GetStringCVar Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConsoleUtils.IsCVarRegistered
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConsoleUtils::IsCVarRegistered(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "IsCVarRegistered");

	Params::ConsoleUtils_IsCVarRegistered Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConsoleUtils.SetBoolCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsoleUtils::SetBoolCVar(class FName Name_0, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "SetBoolCVar");

	Params::ConsoleUtils_SetBoolCVar Parms{};

	Parms.Name_0 = Name_0;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConsoleUtils.SetFloatCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsoleUtils::SetFloatCVar(class FName Name_0, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "SetFloatCVar");

	Params::ConsoleUtils_SetFloatCVar Parms{};

	Parms.Name_0 = Name_0;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConsoleUtils.SetIntCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsoleUtils::SetIntCVar(class FName Name_0, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "SetIntCVar");

	Params::ConsoleUtils_SetIntCVar Parms{};

	Parms.Name_0 = Name_0;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConsoleUtils.SetStringCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConsoleUtils::SetStringCVar(class FName Name_0, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConsoleUtils", "SetStringCVar");

	Params::ConsoleUtils_SetStringCVar Parms{};

	Parms.Name_0 = Name_0;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CSAP_SwapAssign.OnSettingsChanged
// (Final, Native, Protected)
// Parameters:
// const class UConfigurableGameUserSettings*UserGameConfig                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCSAP_SwapAssign::OnSettingsChanged(const class UConfigurableGameUserSettings* UserGameConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CSAP_SwapAssign", "OnSettingsChanged");

	Params::CSAP_SwapAssign_OnSettingsChanged Parms{};

	Parms.UserGameConfig = UserGameConfig;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CVarChangeListenerManager.AddBoolCVarCallbackStatic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(bool NewValue)>          ChangedCallback                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CallbackImmediately                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCVarChangeListenerManager::AddBoolCVarCallbackStatic(class FName Name_0, TDelegate<void(bool NewValue)> ChangedCallback, bool CallbackImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CVarChangeListenerManager", "AddBoolCVarCallbackStatic");

	Params::CVarChangeListenerManager_AddBoolCVarCallbackStatic Parms{};

	Parms.Name_0 = Name_0;
	Parms.ChangedCallback = ChangedCallback;
	Parms.CallbackImmediately = CallbackImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CVarChangeListenerManager.AddFloatCVarCallbackStatic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(float NewValue)>         ChangedCallback                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CallbackImmediately                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCVarChangeListenerManager::AddFloatCVarCallbackStatic(class FName Name_0, TDelegate<void(float NewValue)> ChangedCallback, bool CallbackImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CVarChangeListenerManager", "AddFloatCVarCallbackStatic");

	Params::CVarChangeListenerManager_AddFloatCVarCallbackStatic Parms{};

	Parms.Name_0 = Name_0;
	Parms.ChangedCallback = ChangedCallback;
	Parms.CallbackImmediately = CallbackImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CVarChangeListenerManager.AddIntCVarCallbackStatic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 NewValue)>         ChangedCallback                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CallbackImmediately                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCVarChangeListenerManager::AddIntCVarCallbackStatic(class FName Name_0, TDelegate<void(int32 NewValue)> ChangedCallback, bool CallbackImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CVarChangeListenerManager", "AddIntCVarCallbackStatic");

	Params::CVarChangeListenerManager_AddIntCVarCallbackStatic Parms{};

	Parms.Name_0 = Name_0;
	Parms.ChangedCallback = ChangedCallback;
	Parms.CallbackImmediately = CallbackImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CVarChangeListenerManager.AddStringCVarCallbackStatic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& NewValue)>ChangedCallback                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CallbackImmediately                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCVarChangeListenerManager::AddStringCVarCallbackStatic(class FName Name_0, TDelegate<void(const class FString& NewValue)> ChangedCallback, bool CallbackImmediately)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CVarChangeListenerManager", "AddStringCVarCallbackStatic");

	Params::CVarChangeListenerManager_AddStringCVarCallbackStatic Parms{};

	Parms.Name_0 = Name_0;
	Parms.ChangedCallback = ChangedCallback;
	Parms.CallbackImmediately = CallbackImmediately;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequence
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          _skillEffectWithQTETimes                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          _skillEffectNoQTETimes                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          _explicitComboPromptTimes                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          _comboSectionStartTimes                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// float*                                  _lastComboSectionEnd                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          _comboFailSectionStartTimes                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          _comboFailSectionEndTimes                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          _snapToTargetTimes                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<float>*                          _snapToSourceTimes                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindAllBattleKeyframesInSequence(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TArray<float>* _skillEffectWithQTETimes, TArray<float>* _skillEffectNoQTETimes, TArray<float>* _explicitComboPromptTimes, TArray<float>* _comboSectionStartTimes, float* _lastComboSectionEnd, TArray<float>* _comboFailSectionStartTimes, TArray<float>* _comboFailSectionEndTimes, TArray<float>* _snapToTargetTimes, TArray<float>* _snapToSourceTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindAllBattleKeyframesInSequence");

	Params::EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequence Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_skillEffectWithQTETimes != nullptr)
		*_skillEffectWithQTETimes = std::move(Parms._skillEffectWithQTETimes);

	if (_skillEffectNoQTETimes != nullptr)
		*_skillEffectNoQTETimes = std::move(Parms._skillEffectNoQTETimes);

	if (_explicitComboPromptTimes != nullptr)
		*_explicitComboPromptTimes = std::move(Parms._explicitComboPromptTimes);

	if (_comboSectionStartTimes != nullptr)
		*_comboSectionStartTimes = std::move(Parms._comboSectionStartTimes);

	if (_lastComboSectionEnd != nullptr)
		*_lastComboSectionEnd = Parms._lastComboSectionEnd;

	if (_comboFailSectionStartTimes != nullptr)
		*_comboFailSectionStartTimes = std::move(Parms._comboFailSectionStartTimes);

	if (_comboFailSectionEndTimes != nullptr)
		*_comboFailSectionEndTimes = std::move(Parms._comboFailSectionEndTimes);

	if (_snapToTargetTimes != nullptr)
		*_snapToTargetTimes = std::move(Parms._snapToTargetTimes);

	if (_snapToSourceTimes != nullptr)
		*_snapToSourceTimes = std::move(Parms._snapToSourceTimes);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequenceAsList
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBattleSequenceKeyframe>* _keyframes                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   _trackIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindAllBattleKeyframesInSequenceAsList(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TArray<struct FBattleSequenceKeyframe>* _keyframes, int32 _trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindAllBattleKeyframesInSequenceAsList");

	Params::EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsList Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);
	Parms._trackIndex = _trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_keyframes != nullptr)
		*_keyframes = std::move(Parms._keyframes);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequenceAsListFromTrackName
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FBattleSequenceKeyframe>* _keyframes                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class FName                       _trackName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindAllBattleKeyframesInSequenceAsListFromTrackName(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TArray<struct FBattleSequenceKeyframe>* _keyframes, const class FName _trackName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindAllBattleKeyframesInSequenceAsListFromTrackName");

	Params::EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsListFromTrackName Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);
	Parms._trackName = _trackName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_keyframes != nullptr)
		*_keyframes = std::move(Parms._keyframes);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindAllBattleKeyframesInSequenceAsMap
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<float, EBattleSequenceKeyframeType>*_keyframes                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   _trackIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindAllBattleKeyframesInSequenceAsMap(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TMap<float, EBattleSequenceKeyframeType>* _keyframes, int32 _trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindAllBattleKeyframesInSequenceAsMap");

	Params::EpicCamerasFunctionLibrary_FindAllBattleKeyframesInSequenceAsMap Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);
	Parms._trackIndex = _trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_keyframes != nullptr)
		*_keyframes = std::move(Parms._keyframes);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindBattleCameraKeyframesInSequenceAsMap
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<float, EBattleSequenceCameraType>* _keyframes                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   _trackIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindBattleCameraKeyframesInSequenceAsMap(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TMap<float, EBattleSequenceCameraType>* _keyframes, int32 _trackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindBattleCameraKeyframesInSequenceAsMap");

	Params::EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMap Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);
	Parms._trackIndex = _trackIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_keyframes != nullptr)
		*_keyframes = std::move(Parms._keyframes);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindBattleCameraKeyframesInSequenceAsMapFromTrackName
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<float, EBattleSequenceCameraType>* _keyframes                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// const class FName                       _trackName                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindBattleCameraKeyframesInSequenceAsMapFromTrackName(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TMap<float, EBattleSequenceCameraType>* _keyframes, const class FName _trackName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindBattleCameraKeyframesInSequenceAsMapFromTrackName");

	Params::EpicCamerasFunctionLibrary_FindBattleCameraKeyframesInSequenceAsMapFromTrackName Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);
	Parms._trackName = _trackName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_keyframes != nullptr)
		*_keyframes = std::move(Parms._keyframes);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindBattleKeyframesInSequence
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// EBattleSequenceKeyframeType             _keyframeType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          _times                                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindBattleKeyframesInSequence(EBattleSequenceKeyframeType _keyframeType, class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TArray<float>* _times)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindBattleKeyframesInSequence");

	Params::EpicCamerasFunctionLibrary_FindBattleKeyframesInSequence Parms{};

	Parms._keyframeType = _keyframeType;
	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_times != nullptr)
		*_times = std::move(Parms._times);
}


// Function SandFall.EpicCamerasFunctionLibrary.FindQTEKeyframes
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_actorBindingID                                        (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<float>*                          ImpactTimes                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::FindQTEKeyframes(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _actorBindingID, TArray<float>* ImpactTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "FindQTEKeyframes");

	Params::EpicCamerasFunctionLibrary_FindQTEKeyframes Parms{};

	Parms._sequence = _sequence;
	Parms._actorBindingID = std::move(_actorBindingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ImpactTimes != nullptr)
		*ImpactTimes = std::move(Parms.ImpactTimes);
}


// Function SandFall.EpicCamerasFunctionLibrary.GetCinematicTimeDilation
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _WorldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UEpicCamerasFunctionLibrary::GetCinematicTimeDilation(class UObject* _WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "GetCinematicTimeDilation");

	Params::EpicCamerasFunctionLibrary_GetCinematicTimeDilation Parms{};

	Parms._WorldContextObject = _WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.EpicCamerasFunctionLibrary.GetInitialActorPositionInSequence
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMovieSceneObjectBindingID&_bindingID                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UEpicCamerasFunctionLibrary::GetInitialActorPositionInSequence(class ULevelSequence* _sequence, const struct FMovieSceneObjectBindingID& _bindingID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "GetInitialActorPositionInSequence");

	Params::EpicCamerasFunctionLibrary_GetInitialActorPositionInSequence Parms{};

	Parms._sequence = _sequence;
	Parms._bindingID = std::move(_bindingID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.EpicCamerasFunctionLibrary.GetLinearTimeMapFromSequence
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class ULevelSequence*                   _sequence                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<int32, float>*                     _linearTimeMap                                         (Parm, OutParm, NativeAccessSpecifierPublic)

void UEpicCamerasFunctionLibrary::GetLinearTimeMapFromSequence(class ULevelSequence* _sequence, TMap<int32, float>* _linearTimeMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "GetLinearTimeMapFromSequence");

	Params::EpicCamerasFunctionLibrary_GetLinearTimeMapFromSequence Parms{};

	Parms._sequence = _sequence;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_linearTimeMap != nullptr)
		*_linearTimeMap = std::move(Parms._linearTimeMap);
}


// Function SandFall.EpicCamerasFunctionLibrary.GetRealTimeDilation
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          _WorldContextObject                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UEpicCamerasFunctionLibrary::GetRealTimeDilation(class UObject* _WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("EpicCamerasFunctionLibrary", "GetRealTimeDilation");

	Params::EpicCamerasFunctionLibrary_GetRealTimeDilation Parms{};

	Parms._WorldContextObject = _WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.VariableWatcher_bool.GetValue
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVariableWatcher_bool::GetValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VariableWatcher_bool", "GetValue");

	Params::VariableWatcher_bool_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.VariableWatcher_bool.SetValue
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    _newValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVariableWatcher_bool::SetValue(bool _newValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VariableWatcher_bool", "SetValue");

	Params::VariableWatcher_bool_SetValue Parms{};

	Parms._newValue = _newValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.GlobalPostProcessActor.UpdatePostProcessSaturation
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   RGBMultiplier                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   LuminanceMultiplier                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlobalPostProcessActor::UpdatePostProcessSaturation(float RGBMultiplier, float LuminanceMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalPostProcessActor", "UpdatePostProcessSaturation");

	Params::GlobalPostProcessActor_UpdatePostProcessSaturation Parms{};

	Parms.RGBMultiplier = RGBMultiplier;
	Parms.LuminanceMultiplier = LuminanceMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.PlatformsSubsystem.AttemptToLoginTheUser
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::AttemptToLoginTheUser()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "AttemptToLoginTheUser");

	Params::PlatformsSubsystem_AttemptToLoginTheUser Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.BindToGameStartedFromActivity
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::BindToGameStartedFromActivity(TDelegate<void()> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "BindToGameStartedFromActivity");

	Params::PlatformsSubsystem_BindToGameStartedFromActivity Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.ClearAllBindedEventToGameStartedFromActivity
// (Final, Native, Private, BlueprintCallable)

void UPlatformsSubsystem::ClearAllBindedEventToGameStartedFromActivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "ClearAllBindedEventToGameStartedFromActivity");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.ClearAllCloudSaves
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::ClearAllCloudSaves()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "ClearAllCloudSaves");

	Params::PlatformsSubsystem_ClearAllCloudSaves Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.GetAchievementsFromCurrentWriteRequest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TMap<class FName, float>                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, float> UPlatformsSubsystem::GetAchievementsFromCurrentWriteRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "GetAchievementsFromCurrentWriteRequest");

	Params::PlatformsSubsystem_GetAchievementsFromCurrentWriteRequest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.GetCurrentUserNickname
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FString UPlatformsSubsystem::GetCurrentUserNickname()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "GetCurrentUserNickname");

	Params::PlatformsSubsystem_GetCurrentUserNickname Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.GetLatestGameSaveLoaded
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPlatformsSubsystem::GetLatestGameSaveLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "GetLatestGameSaveLoaded");

	Params::PlatformsSubsystem_GetLatestGameSaveLoaded Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.IsGameStartedFromActivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::IsGameStartedFromActivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "IsGameStartedFromActivity");

	Params::PlatformsSubsystem_IsGameStartedFromActivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.LoadAndTriggerFailedAchievments
// (Final, Native, Public, BlueprintCallable)

void UPlatformsSubsystem::LoadAndTriggerFailedAchievments()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "LoadAndTriggerFailedAchievments");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.OnExternalUIChange
// (Final, Native, Private)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::OnExternalUIChange(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "OnExternalUIChange");

	Params::PlatformsSubsystem_OnExternalUIChange Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.OnUserIsLoggedIn
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsUserLoggedIn                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::OnUserIsLoggedIn(bool bIsUserLoggedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "OnUserIsLoggedIn");

	Params::PlatformsSubsystem_OnUserIsLoggedIn Parms{};

	Parms.bIsUserLoggedIn = bIsUserLoggedIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.PlatformsSubsystem.OnUserIsSelected
// (Event, Public, BlueprintEvent)
// Parameters:
// bool                                    bIsSellectedUserLoggedIn                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::OnUserIsSelected(bool bIsSellectedUserLoggedIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "OnUserIsSelected");

	Params::PlatformsSubsystem_OnUserIsSelected Parms{};

	Parms.bIsSellectedUserLoggedIn = bIsSellectedUserLoggedIn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.PlatformsSubsystem.QueryAchievements
// (Final, Native, Public, BlueprintCallable)

void UPlatformsSubsystem::QueryAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "QueryAchievements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.QueryEntitlements
// (Final, Native, Public, BlueprintCallable)

void UPlatformsSubsystem::QueryEntitlements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "QueryEntitlements");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.RegisterLatestGameSaveLoaded
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// const class FString&                    SaveName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::RegisterLatestGameSaveLoaded(const class FString& SaveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "RegisterLatestGameSaveLoaded");

	Params::PlatformsSubsystem_RegisterLatestGameSaveLoaded Parms{};

	Parms.SaveName = std::move(SaveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.ResetAllAchievements
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::ResetAllAchievements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "ResetAllAchievements");

	Params::PlatformsSubsystem_ResetAllAchievements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.ResetAllActivities
// (Final, Native, Public, BlueprintCallable)

void UPlatformsSubsystem::ResetAllActivities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "ResetAllActivities");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.SetActivityStatus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ActivityID                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EActivityStatus                         AcitivityStatus                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::SetActivityStatus(const class FString& ActivityID, EActivityStatus AcitivityStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "SetActivityStatus");

	Params::PlatformsSubsystem_SetActivityStatus Parms{};

	Parms.ActivityID = std::move(ActivityID);
	Parms.AcitivityStatus = AcitivityStatus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.SetPS5ControllerLightColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::SetPS5ControllerLightColor(const struct FColor& Color, bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "SetPS5ControllerLightColor");

	Params::PlatformsSubsystem_SetPS5ControllerLightColor Parms{};

	Parms.Color = std::move(Color);
	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.SetRichPresence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InRichPresenceStatus                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::SetRichPresence(const class FString& InRichPresenceStatus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "SetRichPresence");

	Params::PlatformsSubsystem_SetRichPresence Parms{};

	Parms.InRichPresenceStatus = std::move(InRichPresenceStatus);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.TriggerAchievement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)>TriggeredDelegate                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::TriggerAchievement(TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)> TriggeredDelegate, const class FName& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "TriggerAchievement");

	Params::PlatformsSubsystem_TriggerAchievement Parms{};

	Parms.TriggeredDelegate = TriggeredDelegate;
	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.TriggerMultipleAchievements
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)>TriggeredDelegate                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class FName, float>&         AchievementsMap                                        (Parm, NativeAccessSpecifierPublic)

void UPlatformsSubsystem::TriggerMultipleAchievements(TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)> TriggeredDelegate, const TMap<class FName, float>& AchievementsMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "TriggerMultipleAchievements");

	Params::PlatformsSubsystem_TriggerMultipleAchievements Parms{};

	Parms.TriggeredDelegate = TriggeredDelegate;
	Parms.AchievementsMap = std::move(AchievementsMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.PlatformsSubsystem.ComputeSaveNameWithPath
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    SaveName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPlatformsSubsystem::ComputeSaveNameWithPath(const class FString& SaveName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "ComputeSaveNameWithPath");

	Params::PlatformsSubsystem_ComputeSaveNameWithPath Parms{};

	Parms.SaveName = std::move(SaveName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.GetCurrentUserID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UPlatformsSubsystem::GetCurrentUserID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "GetCurrentUserID");

	Params::PlatformsSubsystem_GetCurrentUserID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.GetStoreNameAsTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UPlatformsSubsystem::GetStoreNameAsTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "GetStoreNameAsTag");

	Params::PlatformsSubsystem_GetStoreNameAsTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.HasAllEntitlements
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>&              Entitlements                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::HasAllEntitlements(const TArray<class FName>& Entitlements) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "HasAllEntitlements");

	Params::PlatformsSubsystem_HasAllEntitlements Parms{};

	Parms.Entitlements = std::move(Entitlements);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.HasAnyEntitlement
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>&              Entitlements                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::HasAnyEntitlement(const TArray<class FName>& Entitlements) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "HasAnyEntitlement");

	Params::PlatformsSubsystem_HasAnyEntitlement Parms{};

	Parms.Entitlements = std::move(Entitlements);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.IsChunkInstalled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ChunkId                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::IsChunkInstalled(int32 ChunkId) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "IsChunkInstalled");

	Params::PlatformsSubsystem_IsChunkInstalled Parms{};

	Parms.ChunkId = ChunkId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.IsUserLoggedIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::IsUserLoggedIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "IsUserLoggedIn");

	Params::PlatformsSubsystem_IsUserLoggedIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.IsUsingCloudSave
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::IsUsingCloudSave() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "IsUsingCloudSave");

	Params::PlatformsSubsystem_IsUsingCloudSave Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.PlatformsSubsystem.IsUsingSteam
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPlatformsSubsystem::IsUsingSteam() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlatformsSubsystem", "IsUsingSteam");

	Params::PlatformsSubsystem_IsUsingSteam Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ActivityWrapper.GetActivityID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USF_ActivityWrapper::GetActivityID()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ActivityWrapper", "GetActivityID");

	Params::SF_ActivityWrapper_GetActivityID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ActivityWrapper.GetAllTasks
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USF_ActivityWrapper::GetAllTasks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ActivityWrapper", "GetAllTasks");

	Params::SF_ActivityWrapper_GetAllTasks Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ActivityWrapper.GetSubTaskID
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             TaskName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USF_ActivityWrapper::GetSubTaskID(class FName TaskName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ActivityWrapper", "GetSubTaskID");

	Params::SF_ActivityWrapper_GetSubTaskID Parms{};

	Parms.TaskName = TaskName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ActivityWrapper.IsMappedToActivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             QuestID                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ActivityWrapper::IsMappedToActivity(class FName QuestID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ActivityWrapper", "IsMappedToActivity");

	Params::SF_ActivityWrapper_IsMappedToActivity Parms{};

	Parms.QuestID = QuestID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ActorComoponentHelpers.ChangeOwner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewOwner                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActorComoponentHelpers::ChangeOwner(class UActorComponent* Component, class AActor* NewOwner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorComoponentHelpers", "ChangeOwner");

	Params::ActorComoponentHelpers_ChangeOwner Parms{};

	Parms.Component = Component;
	Parms.NewOwner = NewOwner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ActorComoponentHelpers.DestroyComponentExternally
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ComponentToDestroy                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UActorComoponentHelpers::DestroyComponentExternally(class UActorComponent* ComponentToDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorComoponentHelpers", "DestroyComponentExternally");

	Params::ActorComoponentHelpers_DestroyComponentExternally Parms{};

	Parms.ComponentToDestroy = ComponentToDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ActorComoponentHelpers.HasComponentBegunPlay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UActorComoponentHelpers::HasComponentBegunPlay(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ActorComoponentHelpers", "HasComponentBegunPlay");

	Params::ActorComoponentHelpers_HasComponentBegunPlay Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ActorSpawnWatcherInterface.OnInstigatedActorSpawned
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SpawnedActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IActorSpawnWatcherInterface::OnInstigatedActorSpawned(class AActor* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("ActorSpawnWatcherInterface", "OnInstigatedActorSpawned");

	Params::ActorSpawnWatcherInterface_OnInstigatedActorSpawned Parms{};

	Parms.SpawnedActor = SpawnedActor;

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SandFall.AIHelpers.PauseLogic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrainComponent*                  BrainComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DebugReason                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIHelpers::PauseLogic(class UBrainComponent* BrainComponent, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AIHelpers", "PauseLogic");

	Params::AIHelpers_PauseLogic Parms{};

	Parms.BrainComponent = BrainComponent;
	Parms.DebugReason = std::move(DebugReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.AIHelpers.ResumeLogic
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UBrainComponent*                  BrainComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAIHelpers::ResumeLogic(class UBrainComponent* BrainComponent, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AIHelpers", "ResumeLogic");

	Params::AIHelpers_ResumeLogic Parms{};

	Parms.BrainComponent = BrainComponent;
	Parms.Reason = std::move(Reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_AnimationBlueprintHelpers.GetAllActiveMontages
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UAnimMontage*>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UAnimMontage*> USF_AnimationBlueprintHelpers::GetAllActiveMontages(class UAnimInstance* AnimInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_AnimationBlueprintHelpers", "GetAllActiveMontages");

	Params::SF_AnimationBlueprintHelpers_GetAllActiveMontages Parms{};

	Parms.AnimInstance = AnimInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_AnimationBlueprintHelpers.GetAnimDataModelBoneTrackData
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TScriptInterface<class IAnimationDataModel>DataModel                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       TrackName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 PositionKeys                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FQuat>*                   RotationKeys                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FVector>*                 ScalingKeys                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USF_AnimationBlueprintHelpers::GetAnimDataModelBoneTrackData(const TScriptInterface<class IAnimationDataModel> DataModel, const class FName TrackName, TArray<struct FVector>* PositionKeys, TArray<struct FQuat>* RotationKeys, TArray<struct FVector>* ScalingKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_AnimationBlueprintHelpers", "GetAnimDataModelBoneTrackData");

	Params::SF_AnimationBlueprintHelpers_GetAnimDataModelBoneTrackData Parms{};

	Parms.DataModel = DataModel;
	Parms.TrackName = TrackName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PositionKeys != nullptr)
		*PositionKeys = std::move(Parms.PositionKeys);

	if (RotationKeys != nullptr)
		*RotationKeys = std::move(Parms.RotationKeys);

	if (ScalingKeys != nullptr)
		*ScalingKeys = std::move(Parms.ScalingKeys);
}


// Function SandFall.SF_AsyncActionDeleteSaveGame.AsyncDeleteGameFromSlot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SlotName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_AsyncActionDeleteSaveGame*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_AsyncActionDeleteSaveGame* USF_AsyncActionDeleteSaveGame::AsyncDeleteGameFromSlot(class UObject* WorldContextObject, const class FString& SlotName, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_AsyncActionDeleteSaveGame", "AsyncDeleteGameFromSlot");

	Params::SF_AsyncActionDeleteSaveGame_AsyncDeleteGameFromSlot Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SlotName = std::move(SlotName);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_AsyncActionDeleteSaveGame.AsyncDeleteGamesFromSlot
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FString>&            SlotNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const int32                             UserIndex                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_AsyncActionDeleteSaveGame*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_AsyncActionDeleteSaveGame* USF_AsyncActionDeleteSaveGame::AsyncDeleteGamesFromSlot(class UObject* WorldContextObject, const TArray<class FString>& SlotNames, const int32 UserIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_AsyncActionDeleteSaveGame", "AsyncDeleteGamesFromSlot");

	Params::SF_AsyncActionDeleteSaveGame_AsyncDeleteGamesFromSlot Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SlotNames = std::move(SlotNames);
	Parms.UserIndex = UserIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.BakedActors.BakeActors
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABakedActors::BakeActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakedActors", "BakeActors");

	Params::BakedActors_BakeActors Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.BakedActors.GetActorClassToSpawn
// (Event, Protected, BlueprintEvent)
// Parameters:
// TSubclassOf<class AActor>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class AActor> ABakedActors::GetActorClassToSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakedActors", "GetActorClassToSpawn");

	Params::BakedActors_GetActorClassToSpawn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SandFall.BakedActors.GetBakedActorsFolderName
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABakedActors::GetBakedActorsFolderName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakedActors", "GetBakedActorsFolderName");

	Params::BakedActors_GetBakedActorsFolderName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.BakedActors.GetBakedActorTransforms
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// const TArray<struct FTransform>         ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<struct FTransform> ABakedActors::GetBakedActorTransforms()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakedActors", "GetBakedActorTransforms");

	Params::BakedActors_GetBakedActorTransforms Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.BakedActors.TryDestroyAllBakedActors
// (Final, Native, Public, BlueprintCallable)

void ABakedActors::TryDestroyAllBakedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakedActors", "TryDestroyAllBakedActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.BakedActors.HasAnyBakedActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABakedActors::HasAnyBakedActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BakedActors", "HasAnyBakedActor");

	Params::BakedActors_HasAnyBakedActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Array_Remap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<int32>&                    TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<int32, int32>&               RemapTable                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<int32>*                          ResultArray                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::Array_Remap(const TArray<int32>& TargetArray, const TMap<int32, int32>& RemapTable, TArray<int32>* ResultArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Array_Remap");

	Params::SandfallBlueprintHelpers_Array_Remap Parms{};

	Parms.TargetArray = std::move(TargetArray);
	Parms.RemapTable = std::move(RemapTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultArray != nullptr)
		*ResultArray = std::move(Parms.ResultArray);
}


// Function SandFall.SandfallBlueprintHelpers.Assert
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const bool                              _check                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _message                                               (ConstParm, Parm, NativeAccessSpecifierPublic)
// const bool                              _breakpoint                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::Assert(const bool _check, const class FText& _message, const bool _breakpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Assert");

	Params::SandfallBlueprintHelpers_Assert Parms{};

	Parms._check = _check;
	Parms._message = std::move(_message);
	Parms._breakpoint = _breakpoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.AssertMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _message                                               (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const bool                              _breakpoint                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::AssertMessage(const class FString& _message, const bool _breakpoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "AssertMessage");

	Params::SandfallBlueprintHelpers_AssertMessage Parms{};

	Parms._message = std::move(_message);
	Parms._breakpoint = _breakpoint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.BeginDeferredActorSpawnFromClass
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpawnActorCollisionHandlingMethod      CollisionHandlingOverride                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpawnActorScaleMethod                  TransformScaleMethod                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USandfallBlueprintHelpers::BeginDeferredActorSpawnFromClass(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, const struct FTransform& SpawnTransform, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class AActor* Owner, ESpawnActorScaleMethod TransformScaleMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "BeginDeferredActorSpawnFromClass");

	Params::SandfallBlueprintHelpers_BeginDeferredActorSpawnFromClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorClass = ActorClass;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.CollisionHandlingOverride = CollisionHandlingOverride;
	Parms.Owner = Owner;
	Parms.TransformScaleMethod = TransformScaleMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.BlockTillLevelStreamingCompleted
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::BlockTillLevelStreamingCompleted(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "BlockTillLevelStreamingCompleted");

	Params::SandfallBlueprintHelpers_BlockTillLevelStreamingCompleted Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.CallFunctionByName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          _object                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _functionName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   _IsFailed                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::CallFunctionByName(class UObject* _object, const class FString& _functionName, bool* _IsFailed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "CallFunctionByName");

	Params::SandfallBlueprintHelpers_CallFunctionByName Parms{};

	Parms._object = _object;
	Parms._functionName = std::move(_functionName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_IsFailed != nullptr)
		*_IsFailed = Parms._IsFailed;
}


// Function SandFall.SandfallBlueprintHelpers.CancelLatentActions
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::CancelLatentActions(class UObject* WorldContextObject, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "CancelLatentActions");

	Params::SandfallBlueprintHelpers_CancelLatentActions Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.CheckEntitlement
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           _worldContext                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::CheckEntitlement(class UWorld* _worldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "CheckEntitlement");

	Params::SandfallBlueprintHelpers_CheckEntitlement Parms{};

	Parms._worldContext = _worldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.CompareStrings
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    A                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    B                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USandfallBlueprintHelpers::CompareStrings(const class FString& A, const class FString& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "CompareStrings");

	Params::SandfallBlueprintHelpers_CompareStrings Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.ConvertSoftRefToWorldSoftRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TSoftObjectPtr<class UObject>&    _InObject                                              (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UWorld>*           _OutWorldSoftRef                                       (Parm, OutParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::ConvertSoftRefToWorldSoftRef(const TSoftObjectPtr<class UObject>& _InObject, TSoftObjectPtr<class UWorld>* _OutWorldSoftRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "ConvertSoftRefToWorldSoftRef");

	Params::SandfallBlueprintHelpers_ConvertSoftRefToWorldSoftRef Parms{};

	Parms._InObject = _InObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_OutWorldSoftRef != nullptr)
		*_OutWorldSoftRef = Parms._OutWorldSoftRef;
}


// Function SandFall.SandfallBlueprintHelpers.CopyAllProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          FromObject                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ToObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeComponents                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::CopyAllProperties(class UObject* FromObject, class UObject* ToObject, bool bIncludeComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "CopyAllProperties");

	Params::SandfallBlueprintHelpers_CopyAllProperties Parms{};

	Parms.FromObject = FromObject;
	Parms.ToObject = ToObject;
	Parms.bIncludeComponents = bIncludeComponents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.DebugConstructFromClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           _class                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          _owner                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USandfallBlueprintHelpers::DebugConstructFromClass(class UClass* _class, class UObject* _owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "DebugConstructFromClass");

	Params::SandfallBlueprintHelpers_DebugConstructFromClass Parms{};

	Parms._class = _class;
	Parms._owner = _owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.DebugCppBreakpoint
// (Final, Native, Static, Public, BlueprintCallable)

void USandfallBlueprintHelpers::DebugCppBreakpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "DebugCppBreakpoint");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.DebugFindClassByName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _className                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* USandfallBlueprintHelpers::DebugFindClassByName(const class FString& _className)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "DebugFindClassByName");

	Params::SandfallBlueprintHelpers_DebugFindClassByName Parms{};

	Parms._className = std::move(_className);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.DebugMe
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          _objectToDebug                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::DebugMe(class UObject* _objectToDebug)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "DebugMe");

	Params::SandfallBlueprintHelpers_DebugMe Parms{};

	Parms._objectToDebug = _objectToDebug;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.DrawDebugCircleArc
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Center                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AngleWidth                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Segments                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLinearColor&              Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Lifetime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Thickness                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::DrawDebugCircleArc(const class UObject* WorldContextObject, const struct FVector& Center, float Radius, const struct FVector& Direction, float AngleWidth, int32 Segments, const struct FLinearColor& Color, float Lifetime, float Thickness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "DrawDebugCircleArc");

	Params::SandfallBlueprintHelpers_DrawDebugCircleArc Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Center = std::move(Center);
	Parms.Radius = Radius;
	Parms.Direction = std::move(Direction);
	Parms.AngleWidth = AngleWidth;
	Parms.Segments = Segments;
	Parms.Color = std::move(Color);
	Parms.Lifetime = Lifetime;
	Parms.Thickness = Thickness;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_FileDelete
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_FileDelete(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_FileDelete");

	Params::SandfallBlueprintHelpers_Editor_FileDelete Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_FileLoadString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Content                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_FileLoadString(const class FString& Filename, class FString* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_FileLoadString");

	Params::SandfallBlueprintHelpers_Editor_FileLoadString Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Content != nullptr)
		*Content = std::move(Parms.Content);

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_FileLoadStringReal
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Content                                                (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_FileLoadStringReal(const class FString& Filename, class FString* Content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_FileLoadStringReal");

	Params::SandfallBlueprintHelpers_Editor_FileLoadStringReal Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Content != nullptr)
		*Content = std::move(Parms.Content);

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_FileSaveString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Content                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_FileSaveString(const class FString& Content, const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_FileSaveString");

	Params::SandfallBlueprintHelpers_Editor_FileSaveString Parms{};

	Parms.Content = std::move(Content);
	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_GetShaderCompilationState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32*                                  jobCount                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  workerCount                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_GetShaderCompilationState(int32* jobCount, int32* workerCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_GetShaderCompilationState");

	Params::SandfallBlueprintHelpers_Editor_GetShaderCompilationState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (jobCount != nullptr)
		*jobCount = Parms.jobCount;

	if (workerCount != nullptr)
		*workerCount = Parms.workerCount;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_GetStatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName                       _StatGroup                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       _StatName                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _isMemory                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          _OutValue                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_GetStatValue(const class FName _StatGroup, const class FName _StatName, bool _isMemory, class FString* _OutValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_GetStatValue");

	Params::SandfallBlueprintHelpers_Editor_GetStatValue Parms{};

	Parms._StatGroup = _StatGroup;
	Parms._StatName = _StatName;
	Parms._isMemory = _isMemory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (_OutValue != nullptr)
		*_OutValue = std::move(Parms._OutValue);

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_MoveScreenshots
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _sourceFile                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _destination                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::Editor_MoveScreenshots(const class FString& _sourceFile, const class FString& _destination)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_MoveScreenshots");

	Params::SandfallBlueprintHelpers_Editor_MoveScreenshots Parms{};

	Parms._sourceFile = std::move(_sourceFile);
	Parms._destination = std::move(_destination);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_PushJSONToMongoDB
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Json                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::Editor_PushJSONToMongoDB(const class FString& Json)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_PushJSONToMongoDB");

	Params::SandfallBlueprintHelpers_Editor_PushJSONToMongoDB Parms{};

	Parms.Json = std::move(Json);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.Editor_TakeScreenshot
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    _filename                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _showUI                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::Editor_TakeScreenshot(const class FString& _filename, bool _showUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Editor_TakeScreenshot");

	Params::SandfallBlueprintHelpers_Editor_TakeScreenshot Parms{};

	Parms._filename = std::move(_filename);
	Parms._showUI = _showUI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.EditorAlert
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      _text                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::EditorAlert(const class FText& _text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "EditorAlert");

	Params::SandfallBlueprintHelpers_EditorAlert Parms{};

	Parms._text = std::move(_text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.EqualsObjects
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    A                                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UObject*                    B                                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::EqualsObjects(const class UObject* A, const class UObject* B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "EqualsObjects");

	Params::SandfallBlueprintHelpers_EqualsObjects Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.EscapeJson
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Input                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::EscapeJson(const class FString& Input)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "EscapeJson");

	Params::SandfallBlueprintHelpers_EscapeJson Parms{};

	Parms.Input = std::move(Input);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.ExecuteDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::ExecuteDelegate(TDelegate<void()> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "ExecuteDelegate");

	Params::SandfallBlueprintHelpers_ExecuteDelegate Parms{};

	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.FinishSpawningActor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                SpawnTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpawnActorScaleMethod                  TransformScaleMethod                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USandfallBlueprintHelpers::FinishSpawningActor(class AActor* Actor, const struct FTransform& SpawnTransform, ESpawnActorScaleMethod TransformScaleMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "FinishSpawningActor");

	Params::SandfallBlueprintHelpers_FinishSpawningActor Parms{};

	Parms.Actor = Actor;
	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.TransformScaleMethod = TransformScaleMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.FlushInputs
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::FlushInputs(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "FlushInputs");

	Params::SandfallBlueprintHelpers_FlushInputs Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.Format
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    InPattern                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FFormatArgumentData>&InArgs                                                 (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::Format(const class FString& InPattern, const TArray<struct FFormatArgumentData>& InArgs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Format");

	Params::SandfallBlueprintHelpers_Format Parms{};

	Parms.InPattern = std::move(InPattern);
	Parms.InArgs = std::move(InArgs);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.FormatDateTime
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDateTime&                 DateTime                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::FormatDateTime(const struct FDateTime& DateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "FormatDateTime");

	Params::SandfallBlueprintHelpers_FormatDateTime Parms{};

	Parms.DateTime = std::move(DateTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.FormatDateTimeWithPattern
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDateTime&                 DateTime                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FormatString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::FormatDateTimeWithPattern(const struct FDateTime& DateTime, const class FString& FormatString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "FormatDateTimeWithPattern");

	Params::SandfallBlueprintHelpers_FormatDateTimeWithPattern Parms{};

	Parms.DateTime = std::move(DateTime);
	Parms.FormatString = std::move(FormatString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.FormatTimespan
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTimespan&                 Timespan                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::FormatTimespan(const struct FTimespan& Timespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "FormatTimespan");

	Params::SandfallBlueprintHelpers_FormatTimespan Parms{};

	Parms.Timespan = std::move(Timespan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.FormatTimespanWithPattern
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTimespan&                 Timespan                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    FormatString                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::FormatTimespanWithPattern(const struct FTimespan& Timespan, const class FString& FormatString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "FormatTimespanWithPattern");

	Params::SandfallBlueprintHelpers_FormatTimespanWithPattern Parms{};

	Parms.Timespan = std::move(Timespan);
	Parms.FormatString = std::move(FormatString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetAllComponentsByClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      Class_0                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>*         Components                                             (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::GetAllComponentsByClass(class UWorld* World, TSubclassOf<class UActorComponent> Class_0, TArray<class UActorComponent*>* Components)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetAllComponentsByClass");

	Params::SandfallBlueprintHelpers_GetAllComponentsByClass Parms{};

	Parms.World = World;
	Parms.Class_0 = Class_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Components != nullptr)
		*Components = std::move(Parms.Components);
}


// Function SandFall.SandfallBlueprintHelpers.GetAllLightComponents
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class ULightComponent*>*         LightComponents                                        (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::GetAllLightComponents(class UWorld* World, TArray<class ULightComponent*>* LightComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetAllLightComponents");

	Params::SandfallBlueprintHelpers_GetAllLightComponents Parms{};

	Parms.World = World;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LightComponents != nullptr)
		*LightComponents = std::move(Parms.LightComponents);
}


// Function SandFall.SandfallBlueprintHelpers.GetBuildInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Changelist                                             (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          CurrentPersistentLevel                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::GetBuildInfo(class UObject* WorldContextObject, class FString* Changelist, class FString* CurrentPersistentLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetBuildInfo");

	Params::SandfallBlueprintHelpers_GetBuildInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Changelist != nullptr)
		*Changelist = std::move(Parms.Changelist);

	if (CurrentPersistentLevel != nullptr)
		*CurrentPersistentLevel = std::move(Parms.CurrentPersistentLevel);
}


// Function SandFall.SandfallBlueprintHelpers.GetCameraCutTrackSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UMovieSceneCameraCutTrack*  CameraCutTrack                                         (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   SectionFound                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   CanBlend                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   HasEasing                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   IsPreviousCameraLocked                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::GetCameraCutTrackSettings(const class UMovieSceneCameraCutTrack* CameraCutTrack, bool* SectionFound, bool* CanBlend, bool* HasEasing, bool* IsPreviousCameraLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetCameraCutTrackSettings");

	Params::SandfallBlueprintHelpers_GetCameraCutTrackSettings Parms{};

	Parms.CameraCutTrack = CameraCutTrack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SectionFound != nullptr)
		*SectionFound = Parms.SectionFound;

	if (CanBlend != nullptr)
		*CanBlend = Parms.CanBlend;

	if (HasEasing != nullptr)
		*HasEasing = Parms.HasEasing;

	if (IsPreviousCameraLocked != nullptr)
		*IsPreviousCameraLocked = Parms.IsPreviousCameraLocked;
}


// Function SandFall.SandfallBlueprintHelpers.GetClassDefaultObject
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UClass*                           Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USandfallBlueprintHelpers::GetClassDefaultObject(class UClass* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetClassDefaultObject");

	Params::SandfallBlueprintHelpers_GetClassDefaultObject Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetComponentFromReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FComponentReference&       ComponentReference                                     (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OwningActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* USandfallBlueprintHelpers::GetComponentFromReference(const struct FComponentReference& ComponentReference, class AActor* OwningActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetComponentFromReference");

	Params::SandfallBlueprintHelpers_GetComponentFromReference Parms{};

	Parms.ComponentReference = std::move(ComponentReference);
	Parms.OwningActor = OwningActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetDataTableRowFromName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDataTable*                       Table                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RowName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTableRowBase*                   OutRow                                                 (Parm, OutParm, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::GetDataTableRowFromName(class UDataTable* Table, class FName RowName, struct FTableRowBase* OutRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetDataTableRowFromName");

	Params::SandfallBlueprintHelpers_GetDataTableRowFromName Parms{};

	Parms.Table = Table;
	Parms.RowName = RowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRow != nullptr)
		*OutRow = std::move(Parms.OutRow);
}


// Function SandFall.SandfallBlueprintHelpers.GetDebugInfo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::GetDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetDebugInfo");

	Params::SandfallBlueprintHelpers_GetDebugInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetEditorViewportTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USandfallBlueprintHelpers::GetEditorViewportTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetEditorViewportTransform");

	Params::SandfallBlueprintHelpers_GetEditorViewportTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetLastRenderTimeOnScreen
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UPrimitiveComponent*        Primitive                                              (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USandfallBlueprintHelpers::GetLastRenderTimeOnScreen(const class UPrimitiveComponent* Primitive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetLastRenderTimeOnScreen");

	Params::SandfallBlueprintHelpers_GetLastRenderTimeOnScreen Parms{};

	Parms.Primitive = Primitive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetMaxDistanceAttenuation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USoundBase*                       Sound                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USandfallBlueprintHelpers::GetMaxDistanceAttenuation(class USoundBase* Sound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetMaxDistanceAttenuation");

	Params::SandfallBlueprintHelpers_GetMaxDistanceAttenuation Parms{};

	Parms.Sound = Sound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetPlatformNameAsTag
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag USandfallBlueprintHelpers::GetPlatformNameAsTag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetPlatformNameAsTag");

	Params::SandfallBlueprintHelpers_GetPlatformNameAsTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetSamplingRegionNames
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMesh*                    SkeletalMeshAsset                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> USandfallBlueprintHelpers::GetSamplingRegionNames(class USkeletalMesh* SkeletalMeshAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetSamplingRegionNames");

	Params::SandfallBlueprintHelpers_GetSamplingRegionNames Parms{};

	Parms.SkeletalMeshAsset = SkeletalMeshAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetStackTrace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USandfallBlueprintHelpers::GetStackTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetStackTrace");

	Params::SandfallBlueprintHelpers_GetStackTrace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetUpscalerInfo
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USandfallBlueprintHelpers::GetUpscalerInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetUpscalerInfo");

	Params::SandfallBlueprintHelpers_GetUpscalerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.GetVendorBuildInfo
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          OwnerInfo                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          BuildInfo                                              (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::GetVendorBuildInfo(class UObject* WorldContextObject, class FString* OwnerInfo, class FString* BuildInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "GetVendorBuildInfo");

	Params::SandfallBlueprintHelpers_GetVendorBuildInfo Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OwnerInfo != nullptr)
		*OwnerInfo = std::move(Parms.OwnerInfo);

	if (BuildInfo != nullptr)
		*BuildInfo = std::move(Parms.BuildInfo);
}


// Function SandFall.SandfallBlueprintHelpers.HasActorBegunPlay
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::HasActorBegunPlay(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "HasActorBegunPlay");

	Params::SandfallBlueprintHelpers_HasActorBegunPlay Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsActorSpatiallyLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class AActor*                     Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsActorSpatiallyLoaded(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsActorSpatiallyLoaded");

	Params::SandfallBlueprintHelpers_IsActorSpatiallyLoaded Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.isCollisionProfileValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             ProfileName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::isCollisionProfileValid(class FName ProfileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "isCollisionProfileValid");

	Params::SandfallBlueprintHelpers_isCollisionProfileValid Parms{};

	Parms.ProfileName = ProfileName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsCurrentConsoleTypeLockheart
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsCurrentConsoleTypeLockheart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsCurrentConsoleTypeLockheart");

	Params::SandfallBlueprintHelpers_IsCurrentConsoleTypeLockheart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsEventDispatcherConnected
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EventDispatcherName                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsEventDispatcherConnected(class UObject* Object, class FName EventDispatcherName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsEventDispatcherConnected");

	Params::SandfallBlueprintHelpers_IsEventDispatcherConnected Parms{};

	Parms.Object = Object;
	Parms.EventDispatcherName = EventDispatcherName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsInPlayMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsInPlayMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsInPlayMode");

	Params::SandfallBlueprintHelpers_IsInPlayMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsInSimulateMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsInSimulateMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsInSimulateMode");

	Params::SandfallBlueprintHelpers_IsInSimulateMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsPackagedBuild
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsPackagedBuild()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsPackagedBuild");

	Params::SandfallBlueprintHelpers_IsPackagedBuild Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsPawnInputEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class APawn*                      _actor                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsPawnInputEnabled(const class APawn* _actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsPawnInputEnabled");

	Params::SandfallBlueprintHelpers_IsPawnInputEnabled Parms{};

	Parms._actor = _actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsRunningAutomationTest
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsRunningAutomationTest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsRunningAutomationTest");

	Params::SandfallBlueprintHelpers_IsRunningAutomationTest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.IsRunningOnSteamDeck
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::IsRunningOnSteamDeck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "IsRunningOnSteamDeck");

	Params::SandfallBlueprintHelpers_IsRunningOnSteamDeck Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.MakeLogOutputCapture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UOutputDeviceWrapper*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOutputDeviceWrapper* USandfallBlueprintHelpers::MakeLogOutputCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "MakeLogOutputCapture");

	Params::SandfallBlueprintHelpers_MakeLogOutputCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.Map_Remap
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<int32, int32>&               TargetMap                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<int32, int32>&               RemapTable                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<int32, int32>*                     ResultMap                                              (Parm, OutParm, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::Map_Remap(const TMap<int32, int32>& TargetMap, const TMap<int32, int32>& RemapTable, TMap<int32, int32>* ResultMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Map_Remap");

	Params::SandfallBlueprintHelpers_Map_Remap Parms{};

	Parms.TargetMap = std::move(TargetMap);
	Parms.RemapTable = std::move(RemapTable);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ResultMap != nullptr)
		*ResultMap = std::move(Parms.ResultMap);
}


// Function SandFall.SandfallBlueprintHelpers.Map_ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TMap<int32, int32>&               TargetMap                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class FString>*                  OutStringList                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::Map_ToString(const TMap<int32, int32>& TargetMap, TArray<class FString>* OutStringList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Map_ToString");

	Params::SandfallBlueprintHelpers_Map_ToString Parms{};

	Parms.TargetMap = std::move(TargetMap);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStringList != nullptr)
		*OutStringList = std::move(Parms.OutStringList);
}


// Function SandFall.SandfallBlueprintHelpers.MemTraceUserMark
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    userMark                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::MemTraceUserMark(const class FString& userMark)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "MemTraceUserMark");

	Params::SandfallBlueprintHelpers_MemTraceUserMark Parms{};

	Parms.userMark = std::move(userMark);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.OffsetTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FTransform&                StartTransform                                         (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ForwardOffset                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   UpOffset                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform USandfallBlueprintHelpers::OffsetTransform(const struct FTransform& StartTransform, float ForwardOffset, float UpOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "OffsetTransform");

	Params::SandfallBlueprintHelpers_OffsetTransform Parms{};

	Parms.StartTransform = std::move(StartTransform);
	Parms.ForwardOffset = ForwardOffset;
	Parms.UpOffset = UpOffset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.OverrideBoolCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       _name                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _value                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::OverrideBoolCVar(const class FName _name, bool _value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "OverrideBoolCVar");

	Params::SandfallBlueprintHelpers_OverrideBoolCVar Parms{};

	Parms._name = _name;
	Parms._value = _value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.ParseIntoArrayLines
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    In                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    CullEmpty                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> USandfallBlueprintHelpers::ParseIntoArrayLines(const class FString& In, bool CullEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "ParseIntoArrayLines");

	Params::SandfallBlueprintHelpers_ParseIntoArrayLines Parms{};

	Parms.In = std::move(In);
	Parms.CullEmpty = CullEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.PrintStringInLog
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::PrintStringInLog(const class UObject* WorldContextObject, const class FString& InString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "PrintStringInLog");

	Params::SandfallBlueprintHelpers_PrintStringInLog Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InString = std::move(InString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.Refresh3DEditorViewport
// (Final, Native, Static, Public, BlueprintCallable)

void USandfallBlueprintHelpers::Refresh3DEditorViewport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "Refresh3DEditorViewport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.RegisterBoolCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       _name                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    _defaultValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _description                                           (ConstParm, Parm, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::RegisterBoolCVar(const class FName _name, bool _defaultValue, const class FText& _description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RegisterBoolCVar");

	Params::SandfallBlueprintHelpers_RegisterBoolCVar Parms{};

	Parms._name = _name;
	Parms._defaultValue = _defaultValue;
	Parms._description = std::move(_description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.RegisterInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputAction                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void()>                       OnPressed                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::RegisterInputAction(class UObject* WorldContextObject, class FName InputAction, TDelegate<void()> OnPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RegisterInputAction");

	Params::SandfallBlueprintHelpers_RegisterInputAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InputAction = InputAction;
	Parms.OnPressed = OnPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.RegisterIntegerCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       _name                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             _defaultValue                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _description                                           (ConstParm, Parm, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::RegisterIntegerCVar(const class FName _name, const int32 _defaultValue, const class FText& _description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RegisterIntegerCVar");

	Params::SandfallBlueprintHelpers_RegisterIntegerCVar Parms{};

	Parms._name = _name;
	Parms._defaultValue = _defaultValue;
	Parms._description = std::move(_description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.RegisterStringCVar
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FName                       _name                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    _defaultValue                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FText&                      _description                                           (ConstParm, Parm, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::RegisterStringCVar(const class FName _name, const class FString& _defaultValue, const class FText& _description)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RegisterStringCVar");

	Params::SandfallBlueprintHelpers_RegisterStringCVar Parms{};

	Parms._name = _name;
	Parms._defaultValue = std::move(_defaultValue);
	Parms._description = std::move(_description);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.ReloadActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::ReloadActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "ReloadActor");

	Params::SandfallBlueprintHelpers_ReloadActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.RemoveMaterialInstanceParameterOverride
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        _MaterialInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      _ParameterName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::RemoveMaterialInstanceParameterOverride(class UMaterialInstanceConstant* _MaterialInstance, const class FName& _ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RemoveMaterialInstanceParameterOverride");

	Params::SandfallBlueprintHelpers_RemoveMaterialInstanceParameterOverride Parms{};

	Parms._MaterialInstance = _MaterialInstance;
	Parms._ParameterName = _ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.RemoveMaterialInstanceStaticSwitchOverride
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        _MaterialInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      _ParameterName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USandfallBlueprintHelpers::RemoveMaterialInstanceStaticSwitchOverride(class UMaterialInstanceConstant* _MaterialInstance, const class FName& _ParameterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RemoveMaterialInstanceStaticSwitchOverride");

	Params::SandfallBlueprintHelpers_RemoveMaterialInstanceStaticSwitchOverride Parms{};

	Parms._MaterialInstance = _MaterialInstance;
	Parms._ParameterName = _ParameterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.RequestToTrimAudioStreamingCache
// (Final, Native, Static, Public, BlueprintCallable)

void USandfallBlueprintHelpers::RequestToTrimAudioStreamingCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "RequestToTrimAudioStreamingCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.ResetAllProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeComponents                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::ResetAllProperties(class UObject* Object, bool bIncludeComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "ResetAllProperties");

	Params::SandfallBlueprintHelpers_ResetAllProperties Parms{};

	Parms.Object = Object;
	Parms.bIncludeComponents = bIncludeComponents;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.ResetMaterialInstanceTextureStreamingData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceConstant*        _MaterialInstance                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::ResetMaterialInstanceTextureStreamingData(class UMaterialInstanceConstant* _MaterialInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "ResetMaterialInstanceTextureStreamingData");

	Params::SandfallBlueprintHelpers_ResetMaterialInstanceTextureStreamingData Parms{};

	Parms._MaterialInstance = _MaterialInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.SetActorIsEditorOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEditorOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::SetActorIsEditorOnly(class AActor* Actor, bool bIsEditorOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "SetActorIsEditorOnly");

	Params::SandfallBlueprintHelpers_SetActorIsEditorOnly Parms{};

	Parms.Actor = Actor;
	Parms.bIsEditorOnly = bIsEditorOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.SetActorIsSpatiallyLoaded
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsSpatiallyLoaded                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::SetActorIsSpatiallyLoaded(class AActor* Actor, bool bIsSpatiallyLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "SetActorIsSpatiallyLoaded");

	Params::SandfallBlueprintHelpers_SetActorIsSpatiallyLoaded Parms{};

	Parms.Actor = Actor;
	Parms.bIsSpatiallyLoaded = bIsSpatiallyLoaded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.SetComponentIsEditorOnly
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEditorOnly                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::SetComponentIsEditorOnly(class UActorComponent* ActorComponent, bool bIsEditorOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "SetComponentIsEditorOnly");

	Params::SandfallBlueprintHelpers_SetComponentIsEditorOnly Parms{};

	Parms.ActorComponent = ActorComponent;
	Parms.bIsEditorOnly = bIsEditorOnly;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.SetTimeDilationEnabledForSequencePlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UMovieSceneSequencePlayer*  SequencePlayer                                         (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::SetTimeDilationEnabledForSequencePlayer(const class UMovieSceneSequencePlayer* SequencePlayer, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "SetTimeDilationEnabledForSequencePlayer");

	Params::SandfallBlueprintHelpers_SetTimeDilationEnabledForSequencePlayer Parms{};

	Parms.SequencePlayer = SequencePlayer;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.SetTimerDelegate
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TDelegate<void()>                       Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLooping                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitialStartDelay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InitialStartDelayVariance                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerHandle                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimerHandle USandfallBlueprintHelpers::SetTimerDelegate(TDelegate<void()> Delegate, float Time, bool bLooping, float InitialStartDelay, float InitialStartDelayVariance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "SetTimerDelegate");

	Params::SandfallBlueprintHelpers_SetTimerDelegate Parms{};

	Parms.Delegate = Delegate;
	Parms.Time = Time;
	Parms.bLooping = bLooping;
	Parms.InitialStartDelay = InitialStartDelay;
	Parms.InitialStartDelayVariance = InitialStartDelayVariance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.StartMemTrace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ip                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::StartMemTrace(const class FString& ip, int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "StartMemTrace");

	Params::SandfallBlueprintHelpers_StartMemTrace Parms{};

	Parms.ip = std::move(ip);
	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.StopMemTrace
// (Final, Native, Static, Public, BlueprintCallable)

void USandfallBlueprintHelpers::StopMemTrace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "StopMemTrace");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.TestMemTrace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    ip                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::TestMemTrace(const class FString& ip, int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "TestMemTrace");

	Params::SandfallBlueprintHelpers_TestMemTrace Parms{};

	Parms.ip = std::move(ip);
	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.TriggerMouseLMBDown
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 CursorPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::TriggerMouseLMBDown(const struct FVector2D& CursorPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "TriggerMouseLMBDown");

	Params::SandfallBlueprintHelpers_TriggerMouseLMBDown Parms{};

	Parms.CursorPosition = std::move(CursorPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.TriggerMouseLMBUp
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 CursorPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::TriggerMouseLMBUp(const struct FVector2D& CursorPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "TriggerMouseLMBUp");

	Params::SandfallBlueprintHelpers_TriggerMouseLMBUp Parms{};

	Parms.CursorPosition = std::move(CursorPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.TryGetBlueprintClass
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* USandfallBlueprintHelpers::TryGetBlueprintClass(class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "TryGetBlueprintClass");

	Params::SandfallBlueprintHelpers_TryGetBlueprintClass Parms{};

	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallBlueprintHelpers.UpdateFloatingObjectsTransform
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class USceneComponent*>&   Objects                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           SpeedVectors                                           (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<struct FVector>&           RandomLocations                                        (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TArray<double>&                   RotatorSpeeds                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<double>&                   MovingDistances                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    MultiplierRemapArray                                   (ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::UpdateFloatingObjectsTransform(const class UObject* WorldContextObject, const TArray<class USceneComponent*>& Objects, const TArray<struct FVector>& SpeedVectors, const TArray<struct FVector>& RandomLocations, const TArray<double>& RotatorSpeeds, const TArray<double>& MovingDistances, const TArray<int32>& MultiplierRemapArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "UpdateFloatingObjectsTransform");

	Params::SandfallBlueprintHelpers_UpdateFloatingObjectsTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Objects = std::move(Objects);
	Parms.SpeedVectors = std::move(SpeedVectors);
	Parms.RandomLocations = std::move(RandomLocations);
	Parms.RotatorSpeeds = std::move(RotatorSpeeds);
	Parms.MovingDistances = std::move(MovingDistances);
	Parms.MultiplierRemapArray = std::move(MultiplierRemapArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             RuntimeStreamingDataName                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewLoadingRange                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange(const class UObject* WorldContextObject, class FName RuntimeStreamingDataName, int32 NewLoadingRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange");

	Params::SandfallBlueprintHelpers_UpdateWPRuntimeHashSetRuntimeStreamingDataLoadingRange Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RuntimeStreamingDataName = RuntimeStreamingDataName;
	Parms.NewLoadingRange = NewLoadingRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.WaitForLatentAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class USF_BlueprintLatentAction*        LatentBlueprintAction                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::WaitForLatentAction(const class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, class USF_BlueprintLatentAction* LatentBlueprintAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "WaitForLatentAction");

	Params::SandfallBlueprintHelpers_WaitForLatentAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.LatentBlueprintAction = LatentBlueprintAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallBlueprintHelpers.WaitTillLevelStreamingCompleted
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const TArray<class UWorldPartitionStreamingSourceComponent*>&SourceComponents                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    AddPlayerControllerSource                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallBlueprintHelpers::WaitTillLevelStreamingCompleted(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, const TArray<class UWorldPartitionStreamingSourceComponent*>& SourceComponents, bool AddPlayerControllerSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallBlueprintHelpers", "WaitTillLevelStreamingCompleted");

	Params::SandfallBlueprintHelpers_WaitTillLevelStreamingCompleted Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.SourceComponents = std::move(SourceComponents);
	Parms.AddPlayerControllerSource = AddPlayerControllerSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LZAsyncAction_RequestHttpMessage.AsyncRequestHTTP
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULZAsyncAction_RequestHttpMessage*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULZAsyncAction_RequestHttpMessage* ULZAsyncAction_RequestHttpMessage::AsyncRequestHTTP(class UObject* WorldContextObject, const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LZAsyncAction_RequestHttpMessage", "AsyncRequestHTTP");

	Params::LZAsyncAction_RequestHttpMessage_AsyncRequestHTTP Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.OutputDeviceWrapper.Flush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UOutputDeviceWrapper::Flush()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutputDeviceWrapper", "Flush");

	Params::OutputDeviceWrapper_Flush Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.OutputDeviceWrapper.Unregister
// (Final, Native, Public, BlueprintCallable)

void UOutputDeviceWrapper::Unregister()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OutputDeviceWrapper", "Unregister");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_BlueprintLatentAction.SetFinished
// (Final, Native, Public, BlueprintCallable)

void USF_BlueprintLatentAction::SetFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_BlueprintLatentAction", "SetFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_BlueprintLatentAction.StartOperation
// (Event, Public, BlueprintEvent)

void USF_BlueprintLatentAction::StartOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_BlueprintLatentAction", "StartOperation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SandFall.SF_BlueprintLatentAction.UpdateOperation
// (Event, Public, BlueprintEvent)

void USF_BlueprintLatentAction::UpdateOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_BlueprintLatentAction", "UpdateOperation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SandFall.SF_BlueprintLatentAction.IsFinished
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_BlueprintLatentAction::IsFinished() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_BlueprintLatentAction", "IsFinished");

	Params::SF_BlueprintLatentAction_IsFinished Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_BlueprintAsyncAction.StartWaitAsyncAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    DebugReason                                            (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_BlueprintLatentAction**       NewLatentAction                                        (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_BlueprintAsyncAction*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_BlueprintAsyncAction* USF_BlueprintAsyncAction::StartWaitAsyncAction(class UObject* WorldContextObject, const class FString& DebugReason, class USF_BlueprintLatentAction** NewLatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_BlueprintAsyncAction", "StartWaitAsyncAction");

	Params::SF_BlueprintAsyncAction_StartWaitAsyncAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DebugReason = std::move(DebugReason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewLatentAction != nullptr)
		*NewLatentAction = Parms.NewLatentAction;

	return Parms.ReturnValue;
}


// Function SandFall.SF_BlueprintAsyncAction.WaitAsyncAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USF_BlueprintLatentAction*        LatentAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_BlueprintAsyncAction*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_BlueprintAsyncAction* USF_BlueprintAsyncAction::WaitAsyncAction(class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_BlueprintAsyncAction", "WaitAsyncAction");

	Params::SF_BlueprintAsyncAction_WaitAsyncAction Parms{};

	Parms.LatentAction = LatentAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_RunHardwareBenchmark.RunHardwareBenchmarkWithNoAlteration
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   WorkScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CPUMultiplier                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GPUMultiplier                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_RunHardwareBenchmark*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_RunHardwareBenchmark* USF_RunHardwareBenchmark::RunHardwareBenchmarkWithNoAlteration(class UObject* WorldContextObject, int32 WorkScale, float CPUMultiplier, float GPUMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_RunHardwareBenchmark", "RunHardwareBenchmarkWithNoAlteration");

	Params::SF_RunHardwareBenchmark_RunHardwareBenchmarkWithNoAlteration Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorkScale = WorkScale;
	Parms.CPUMultiplier = CPUMultiplier;
	Parms.GPUMultiplier = GPUMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConditionChecker.Check
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConditionChecker::Check(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConditionChecker", "Check");

	Params::ConditionChecker_Check Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConditionChecker.CheckInternal
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConditionChecker::CheckInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConditionChecker", "CheckInternal");

	Params::ConditionChecker_CheckInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetAvailableMonitorDisplayName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FText>*                    MonitorsName                                           (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetAvailableMonitorDisplayName(TArray<class FText>* MonitorsName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ConfigurableGameUserSettings", "GetAvailableMonitorDisplayName");

	Params::ConfigurableGameUserSettings_GetAvailableMonitorDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (MonitorsName != nullptr)
		*MonitorsName = std::move(Parms.MonitorsName);

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.CheckForFirstLaunchBenchmark
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::CheckForFirstLaunchBenchmark()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "CheckForFirstLaunchBenchmark");

	Params::ConfigurableGameUserSettings_CheckForFirstLaunchBenchmark Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetAvailableQualityModeFromCurrentSelectedUpscaler
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// TMap<int32, class FText>                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, class FText> UConfigurableGameUserSettings::GetAvailableQualityModeFromCurrentSelectedUpscaler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetAvailableQualityModeFromCurrentSelectedUpscaler");

	Params::ConfigurableGameUserSettings_GetAvailableQualityModeFromCurrentSelectedUpscaler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetAvailableUpscaler
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class FText>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FText> UConfigurableGameUserSettings::GetAvailableUpscaler()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetAvailableUpscaler");

	Params::ConfigurableGameUserSettings_GetAvailableUpscaler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetFloatConsoleVariable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CVarName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetFloatConsoleVariable(const class FString& CVarName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetFloatConsoleVariable");

	Params::ConfigurableGameUserSettings_GetFloatConsoleVariable Parms{};

	Parms.CVarName = std::move(CVarName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetSelectedUpscalerInfo
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// bool*                                   ShouldLockScreenPercentage                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  DefaultSelectedQualityMode                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::GetSelectedUpscalerInfo(bool* ShouldLockScreenPercentage, int32* DefaultSelectedQualityMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSelectedUpscalerInfo");

	Params::ConfigurableGameUserSettings_GetSelectedUpscalerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ShouldLockScreenPercentage != nullptr)
		*ShouldLockScreenPercentage = Parms.ShouldLockScreenPercentage;

	if (DefaultSelectedQualityMode != nullptr)
		*DefaultSelectedQualityMode = Parms.DefaultSelectedQualityMode;
}


// Function SandFall.ConfigurableGameUserSettings.GetSelectedUpscalerQualityModeScreenPercentage
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// float*                                  ScreenPercentage                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::GetSelectedUpscalerQualityModeScreenPercentage(float* ScreenPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSelectedUpscalerQualityModeScreenPercentage");

	Params::ConfigurableGameUserSettings_GetSelectedUpscalerQualityModeScreenPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ScreenPercentage != nullptr)
		*ScreenPercentage = Parms.ScreenPercentage;
}


// Function SandFall.ConfigurableGameUserSettings.GetSelectedUpscalerShouldLockScreenPercentage
// (Final, Native, Private, HasOutParams, BlueprintCallable)
// Parameters:
// bool*                                   ShouldLockScreenPercentage                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::GetSelectedUpscalerShouldLockScreenPercentage(bool* ShouldLockScreenPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSelectedUpscalerShouldLockScreenPercentage");

	Params::ConfigurableGameUserSettings_GetSelectedUpscalerShouldLockScreenPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ShouldLockScreenPercentage != nullptr)
		*ShouldLockScreenPercentage = Parms.ShouldLockScreenPercentage;
}


// Function SandFall.ConfigurableGameUserSettings.GetSupportedResolutionForCurrentMonitor
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FIntPoint>*               Resolutions                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetSupportedResolutionForCurrentMonitor(TArray<struct FIntPoint>* Resolutions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSupportedResolutionForCurrentMonitor");

	Params::ConfigurableGameUserSettings_GetSupportedResolutionForCurrentMonitor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Resolutions != nullptr)
		*Resolutions = std::move(Parms.Resolutions);

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.RemoveGameplayFrameRateLimit
// (Final, Native, Public, BlueprintCallable)

void UConfigurableGameUserSettings::RemoveGameplayFrameRateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "RemoveGameplayFrameRateLimit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.RequestGameplayFrameRateLimit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InLimit                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::RequestGameplayFrameRateLimit(float InLimit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "RequestGameplayFrameRateLimit");

	Params::ConfigurableGameUserSettings_RequestGameplayFrameRateLimit Parms{};

	Parms.InLimit = InLimit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.ResetCategoryToCurrentSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESF_SettingsCategory                    Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::ResetCategoryToCurrentSettings(ESF_SettingsCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "ResetCategoryToCurrentSettings");

	Params::ConfigurableGameUserSettings_ResetCategoryToCurrentSettings Parms{};

	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetApplicationScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetApplicationScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetApplicationScale");

	Params::ConfigurableGameUserSettings_SetApplicationScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetAudioGameCulture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Culture                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetAudioGameCulture(const class FString& Culture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetAudioGameCulture");

	Params::ConfigurableGameUserSettings_SetAudioGameCulture Parms{};

	Parms.Culture = std::move(Culture);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetAutomaticBattleQTE
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetAutomaticBattleQTE(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetAutomaticBattleQTE");

	Params::ConfigurableGameUserSettings_SetAutomaticBattleQTE Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetBrightnessValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetBrightnessValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetBrightnessValue");

	Params::ConfigurableGameUserSettings_SetBrightnessValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetCameraPitchInputMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetCameraPitchInputMultiplier(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetCameraPitchInputMultiplier");

	Params::ConfigurableGameUserSettings_SetCameraPitchInputMultiplier Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetCameraYawInputMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetCameraYawInputMultiplier(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetCameraYawInputMultiplier");

	Params::ConfigurableGameUserSettings_SetCameraYawInputMultiplier Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetCategoryToDefaults
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESF_SettingsCategory                    Category                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetCategoryToDefaults(ESF_SettingsCategory Category)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetCategoryToDefaults");

	Params::ConfigurableGameUserSettings_SetCategoryToDefaults Parms{};

	Parms.Category = Category;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetColorVisionDeficiency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EColorVisionDeficiency                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetColorVisionDeficiency(EColorVisionDeficiency Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetColorVisionDeficiency");

	Params::ConfigurableGameUserSettings_SetColorVisionDeficiency Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetColorVisionDeficiencyCorrectionSeverity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetColorVisionDeficiencyCorrectionSeverity(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetColorVisionDeficiencyCorrectionSeverity");

	Params::ConfigurableGameUserSettings_SetColorVisionDeficiencyCorrectionSeverity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetConsoleGraphicPreset
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetConsoleGraphicPreset(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetConsoleGraphicPreset");

	Params::ConfigurableGameUserSettings_SetConsoleGraphicPreset Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetContrastValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetContrastValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetContrastValue");

	Params::ConfigurableGameUserSettings_SetContrastValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableCameraMovement
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableCameraMovement(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableCameraMovement");

	Params::ConfigurableGameUserSettings_SetEnableCameraMovement Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableCameraShakes
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableCameraShakes(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableCameraShakes");

	Params::ConfigurableGameUserSettings_SetEnableCameraShakes Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableChromaticAberration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableChromaticAberration(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableChromaticAberration");

	Params::ConfigurableGameUserSettings_SetEnableChromaticAberration Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableControllerForceFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableControllerForceFeedback(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableControllerForceFeedback");

	Params::ConfigurableGameUserSettings_SetEnableControllerForceFeedback Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableCustomizationDuringCinematics
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableCustomizationDuringCinematics(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableCustomizationDuringCinematics");

	Params::ConfigurableGameUserSettings_SetEnableCustomizationDuringCinematics Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableFilmGrain
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableFilmGrain(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableFilmGrain");

	Params::ConfigurableGameUserSettings_SetEnableFilmGrain Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableHoldInputToAim
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableHoldInputToAim(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableHoldInputToAim");

	Params::ConfigurableGameUserSettings_SetEnableHoldInputToAim Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableHoldInputToSprint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableHoldInputToSprint(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableHoldInputToSprint");

	Params::ConfigurableGameUserSettings_SetEnableHoldInputToSprint Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableMotionBlur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableMotionBlur(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableMotionBlur");

	Params::ConfigurableGameUserSettings_SetEnableMotionBlur Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnablePersistentCenterDot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnablePersistentCenterDot(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnablePersistentCenterDot");

	Params::ConfigurableGameUserSettings_SetEnablePersistentCenterDot Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableSubtitles
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableSubtitles(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableSubtitles");

	Params::ConfigurableGameUserSettings_SetEnableSubtitles Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableSubtitlesSpeakerDisplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableSubtitlesSpeakerDisplay(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableSubtitlesSpeakerDisplay");

	Params::ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerDisplay Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableSubtitlesSpeakerPersonalColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableSubtitlesSpeakerPersonalColor(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableSubtitlesSpeakerPersonalColor");

	Params::ConfigurableGameUserSettings_SetEnableSubtitlesSpeakerPersonalColor Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableTutorials
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableTutorials(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableTutorials");

	Params::ConfigurableGameUserSettings_SetEnableTutorials Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetEnableVignette
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetEnableVignette(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetEnableVignette");

	Params::ConfigurableGameUserSettings_SetEnableVignette Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetFloatConsoleVariable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CVarName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetFloatConsoleVariable(const class FString& CVarName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetFloatConsoleVariable");

	Params::ConfigurableGameUserSettings_SetFloatConsoleVariable Parms{};

	Parms.CVarName = std::move(CVarName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetGameCulture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Culture                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetGameCulture(const class FString& Culture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetGameCulture");

	Params::ConfigurableGameUserSettings_SetGameCulture Parms{};

	Parms.Culture = std::move(Culture);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetGammaValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetGammaValue(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetGammaValue");

	Params::ConfigurableGameUserSettings_SetGammaValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetIntConsoleVariable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    CVarName                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetIntConsoleVariable(const class FString& CVarName, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetIntConsoleVariable");

	Params::ConfigurableGameUserSettings_SetIntConsoleVariable Parms{};

	Parms.CVarName = std::move(CVarName);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetInvertCameraPitch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetInvertCameraPitch(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetInvertCameraPitch");

	Params::ConfigurableGameUserSettings_SetInvertCameraPitch Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetInvertCameraYaw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetInvertCameraYaw(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetInvertCameraYaw");

	Params::ConfigurableGameUserSettings_SetInvertCameraYaw Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetMasterVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetMasterVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetMasterVolume");

	Params::ConfigurableGameUserSettings_SetMasterVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetMusicVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetMusicVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetMusicVolume");

	Params::ConfigurableGameUserSettings_SetMusicVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetSelectedDisplayMonitor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetSelectedDisplayMonitor(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetSelectedDisplayMonitor");

	Params::ConfigurableGameUserSettings_SetSelectedDisplayMonitor Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetSpecialEffectsVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetSpecialEffectsVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetSpecialEffectsVolume");

	Params::ConfigurableGameUserSettings_SetSpecialEffectsVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetSubtitlesSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetSubtitlesSize(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetSubtitlesSize");

	Params::ConfigurableGameUserSettings_SetSubtitlesSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetUpscalerQualityModeUsedValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetUpscalerQualityModeUsedValue(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetUpscalerQualityModeUsedValue");

	Params::ConfigurableGameUserSettings_SetUpscalerQualityModeUsedValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetUpscalerUsedValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetUpscalerUsedValue(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetUpscalerUsedValue");

	Params::ConfigurableGameUserSettings_SetUpscalerUsedValue Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetUserInterfaceVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetUserInterfaceVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetUserInterfaceVolume");

	Params::ConfigurableGameUserSettings_SetUserInterfaceVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.SetVoiceVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UConfigurableGameUserSettings::SetVoiceVolume(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "SetVoiceVolume");

	Params::ConfigurableGameUserSettings_SetVoiceVolume Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ConfigurableGameUserSettings.GetApplicationScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetApplicationScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetApplicationScale");

	Params::ConfigurableGameUserSettings_GetApplicationScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetAudioGameCulture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UConfigurableGameUserSettings::GetAudioGameCulture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetAudioGameCulture");

	Params::ConfigurableGameUserSettings_GetAudioGameCulture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetBrightnessValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetBrightnessValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetBrightnessValue");

	Params::ConfigurableGameUserSettings_GetBrightnessValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetCameraPitchInputMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetCameraPitchInputMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetCameraPitchInputMultiplier");

	Params::ConfigurableGameUserSettings_GetCameraPitchInputMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetCameraYawInputMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetCameraYawInputMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetCameraYawInputMultiplier");

	Params::ConfigurableGameUserSettings_GetCameraYawInputMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetColorVisionDeficiency
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EColorVisionDeficiency                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EColorVisionDeficiency UConfigurableGameUserSettings::GetColorVisionDeficiency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetColorVisionDeficiency");

	Params::ConfigurableGameUserSettings_GetColorVisionDeficiency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetColorVisionDeficiencyCorrectionSeverity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetColorVisionDeficiencyCorrectionSeverity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetColorVisionDeficiencyCorrectionSeverity");

	Params::ConfigurableGameUserSettings_GetColorVisionDeficiencyCorrectionSeverity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetConsoleGraphicPreset
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConfigurableGameUserSettings::GetConsoleGraphicPreset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetConsoleGraphicPreset");

	Params::ConfigurableGameUserSettings_GetConsoleGraphicPreset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetContrastValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetContrastValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetContrastValue");

	Params::ConfigurableGameUserSettings_GetContrastValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableAutomaticBattleQTE
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableAutomaticBattleQTE() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableAutomaticBattleQTE");

	Params::ConfigurableGameUserSettings_GetEnableAutomaticBattleQTE Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableCameraMovement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableCameraMovement() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableCameraMovement");

	Params::ConfigurableGameUserSettings_GetEnableCameraMovement Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableCameraShakes
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableCameraShakes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableCameraShakes");

	Params::ConfigurableGameUserSettings_GetEnableCameraShakes Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableChromaticAberration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableChromaticAberration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableChromaticAberration");

	Params::ConfigurableGameUserSettings_GetEnableChromaticAberration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableControllerForceFeedback
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableControllerForceFeedback() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableControllerForceFeedback");

	Params::ConfigurableGameUserSettings_GetEnableControllerForceFeedback Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableCustomizationDuringCinematics
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableCustomizationDuringCinematics() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableCustomizationDuringCinematics");

	Params::ConfigurableGameUserSettings_GetEnableCustomizationDuringCinematics Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableFilmGrain
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableFilmGrain() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableFilmGrain");

	Params::ConfigurableGameUserSettings_GetEnableFilmGrain Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableHoldInputToAim
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableHoldInputToAim() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableHoldInputToAim");

	Params::ConfigurableGameUserSettings_GetEnableHoldInputToAim Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableHoldInputToSprint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableHoldInputToSprint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableHoldInputToSprint");

	Params::ConfigurableGameUserSettings_GetEnableHoldInputToSprint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableMotionBlur
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableMotionBlur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableMotionBlur");

	Params::ConfigurableGameUserSettings_GetEnableMotionBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnablePersistentCenterDot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnablePersistentCenterDot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnablePersistentCenterDot");

	Params::ConfigurableGameUserSettings_GetEnablePersistentCenterDot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableSubtitles
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableSubtitles() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableSubtitles");

	Params::ConfigurableGameUserSettings_GetEnableSubtitles Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableSubtitlesSpeakerDisplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableSubtitlesSpeakerDisplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableSubtitlesSpeakerDisplay");

	Params::ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerDisplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableSubtitlesSpeakerPersonalColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableSubtitlesSpeakerPersonalColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableSubtitlesSpeakerPersonalColor");

	Params::ConfigurableGameUserSettings_GetEnableSubtitlesSpeakerPersonalColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableTutorials
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableTutorials() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableTutorials");

	Params::ConfigurableGameUserSettings_GetEnableTutorials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetEnableVignette
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetEnableVignette() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetEnableVignette");

	Params::ConfigurableGameUserSettings_GetEnableVignette Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetGameCulture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UConfigurableGameUserSettings::GetGameCulture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetGameCulture");

	Params::ConfigurableGameUserSettings_GetGameCulture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetGammaValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetGammaValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetGammaValue");

	Params::ConfigurableGameUserSettings_GetGammaValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetInvertCameraPitch
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetInvertCameraPitch() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetInvertCameraPitch");

	Params::ConfigurableGameUserSettings_GetInvertCameraPitch Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetInvertCameraYaw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::GetInvertCameraYaw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetInvertCameraYaw");

	Params::ConfigurableGameUserSettings_GetInvertCameraYaw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetLastCPUHardwareBenchmarkResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetLastCPUHardwareBenchmarkResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetLastCPUHardwareBenchmarkResult");

	Params::ConfigurableGameUserSettings_GetLastCPUHardwareBenchmarkResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetLastGPUHardwareBenchmarkResult
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetLastGPUHardwareBenchmarkResult() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetLastGPUHardwareBenchmarkResult");

	Params::ConfigurableGameUserSettings_GetLastGPUHardwareBenchmarkResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetMasterVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetMasterVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetMasterVolume");

	Params::ConfigurableGameUserSettings_GetMasterVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetMusicVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetMusicVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetMusicVolume");

	Params::ConfigurableGameUserSettings_GetMusicVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetSelectedDisplayMonitor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConfigurableGameUserSettings::GetSelectedDisplayMonitor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSelectedDisplayMonitor");

	Params::ConfigurableGameUserSettings_GetSelectedDisplayMonitor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetSpecialEffectsVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetSpecialEffectsVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSpecialEffectsVolume");

	Params::ConfigurableGameUserSettings_GetSpecialEffectsVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetSubtitlesSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConfigurableGameUserSettings::GetSubtitlesSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetSubtitlesSize");

	Params::ConfigurableGameUserSettings_GetSubtitlesSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetUpscalerQualityModeUsedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConfigurableGameUserSettings::GetUpscalerQualityModeUsedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetUpscalerQualityModeUsedValue");

	Params::ConfigurableGameUserSettings_GetUpscalerQualityModeUsedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetUpscalerUsedValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UConfigurableGameUserSettings::GetUpscalerUsedValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetUpscalerUsedValue");

	Params::ConfigurableGameUserSettings_GetUpscalerUsedValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetUserInterfaceVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetUserInterfaceVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetUserInterfaceVolume");

	Params::ConfigurableGameUserSettings_GetUserInterfaceVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.GetVoiceVolume
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UConfigurableGameUserSettings::GetVoiceVolume() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "GetVoiceVolume");

	Params::ConfigurableGameUserSettings_GetVoiceVolume Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ConfigurableGameUserSettings.IsPendingScalabilityChangesAtSameQuality
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UConfigurableGameUserSettings::IsPendingScalabilityChangesAtSameQuality() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConfigurableGameUserSettings", "IsPendingScalabilityChangesAtSameQuality");

	Params::ConfigurableGameUserSettings_IsPendingScalabilityChangesAtSameQuality Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.CustomizationHelpers.GetCharacterBody
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UCustomizationHelpers::GetCharacterBody(class AActor* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CustomizationHelpers", "GetCharacterBody");

	Params::CustomizationHelpers_GetCharacterBody Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.CustomizationHelpers.GetCharacterFace
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Character                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMeshComponent* UCustomizationHelpers::GetCharacterFace(class AActor* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CustomizationHelpers", "GetCharacterFace");

	Params::CustomizationHelpers_GetCharacterFace Parms{};

	Parms.Character = Character;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.CustomNavModifierComponent.UpdateNavigationSystem
// (Final, Native, Public, BlueprintCallable)

void UCustomNavModifierComponent::UpdateNavigationSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomNavModifierComponent", "UpdateNavigationSystem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.DataLayerEditorHelpers.SetDataLayersVisibility
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UDataLayerInstance*>&DataLayers                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const bool                              bIsVisible                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDataLayerEditorHelpers::SetDataLayersVisibility(const TArray<class UDataLayerInstance*>& DataLayers, const bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DataLayerEditorHelpers", "SetDataLayersVisibility");

	Params::DataLayerEditorHelpers_SetDataLayersVisibility Parms{};

	Parms.DataLayers = std::move(DataLayers);
	Parms.bIsVisible = bIsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.DialogueBlueprintHelpers.DevelopmentTextToSpeech
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class FString&                    Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_BlueprintLatentAction*        LatentAction                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueBlueprintHelpers::DevelopmentTextToSpeech(const class FString& Text, class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "DevelopmentTextToSpeech");

	Params::DialogueBlueprintHelpers_DevelopmentTextToSpeech Parms{};

	Parms.Text = std::move(Text);
	Parms.LatentAction = LatentAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.DialogueBlueprintHelpers.GetDialogueWaveFirstContext
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UDialogueWave*              _dialogueWave                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDialogueContext                 ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FDialogueContext UDialogueBlueprintHelpers::GetDialogueWaveFirstContext(const class UDialogueWave* _dialogueWave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "GetDialogueWaveFirstContext");

	Params::DialogueBlueprintHelpers_GetDialogueWaveFirstContext Parms{};

	Parms._dialogueWave = _dialogueWave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.DialogueBlueprintHelpers.GetFirstSoundFromDialogueWave
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// class UDialogueWave*                    DialogueWave                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundWave*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USoundWave* UDialogueBlueprintHelpers::GetFirstSoundFromDialogueWave(class UDialogueWave* DialogueWave)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "GetFirstSoundFromDialogueWave");

	Params::DialogueBlueprintHelpers_GetFirstSoundFromDialogueWave Parms{};

	Parms.DialogueWave = DialogueWave;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.DialogueBlueprintHelpers.GetTextToSpeechEngineSubsystem
// (Final, Native, Static, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// class UTextToSpeechEngineSubsystem*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextToSpeechEngineSubsystem* UDialogueBlueprintHelpers::GetTextToSpeechEngineSubsystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "GetTextToSpeechEngineSubsystem");

	Params::DialogueBlueprintHelpers_GetTextToSpeechEngineSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.DialogueBlueprintHelpers.PlaySandfallDialogue2D
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*                    Dialogue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueBlueprintHelpers::PlaySandfallDialogue2D(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, float VolumeMultiplier, float PitchMultiplier, float StartTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "PlaySandfallDialogue2D");

	Params::DialogueBlueprintHelpers_PlaySandfallDialogue2D Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Dialogue = Dialogue;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.DialogueBlueprintHelpers.PlaySandfallDialogueAtLocation
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*                    Dialogue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDialogueBlueprintHelpers::PlaySandfallDialogueAtLocation(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "PlaySandfallDialogueAtLocation");

	Params::DialogueBlueprintHelpers_PlaySandfallDialogueAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Dialogue = Dialogue;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.DialogueBlueprintHelpers.SpawnSandfallDialogue2D
// (Final, BlueprintCosmetic, Native, Static, Private, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*                    Dialogue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UDialogueBlueprintHelpers::SpawnSandfallDialogue2D(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, float VolumeMultiplier, float PitchMultiplier, float StartTime, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "SpawnSandfallDialogue2D");

	Params::DialogueBlueprintHelpers_SpawnSandfallDialogue2D Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Dialogue = Dialogue;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.DialogueBlueprintHelpers.SpawnSandfallDialogueAtLocation
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDialogueWave*                    Dialogue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UDialogueBlueprintHelpers::SpawnSandfallDialogueAtLocation(const class UObject* WorldContextObject, class UDialogueWave* Dialogue, const struct FVector& Location, const struct FRotator& Rotation, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "SpawnSandfallDialogueAtLocation");

	Params::DialogueBlueprintHelpers_SpawnSandfallDialogueAtLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Dialogue = Dialogue;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.DialogueBlueprintHelpers.SpawnSandfallDialogueAttached
// (Final, Native, Static, Private, HasDefaults, BlueprintCallable)
// Parameters:
// class UDialogueWave*                    Dialogue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  AttachToComponent                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AttachPointName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// EAttachLocation                         LocationType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bStopWhenAttachedToDestroyed                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VolumeMultiplier                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PitchMultiplier                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USoundAttenuation*                AttenuationSettings                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDestroy                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAudioComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAudioComponent* UDialogueBlueprintHelpers::SpawnSandfallDialogueAttached(class UDialogueWave* Dialogue, class USceneComponent* AttachToComponent, class FName AttachPointName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bStopWhenAttachedToDestroyed, float VolumeMultiplier, float PitchMultiplier, float StartTime, class USoundAttenuation* AttenuationSettings, bool bAutoDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DialogueBlueprintHelpers", "SpawnSandfallDialogueAttached");

	Params::DialogueBlueprintHelpers_SpawnSandfallDialogueAttached Parms{};

	Parms.Dialogue = Dialogue;
	Parms.AttachToComponent = AttachToComponent;
	Parms.AttachPointName = AttachPointName;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.LocationType = LocationType;
	Parms.bStopWhenAttachedToDestroyed = bStopWhenAttachedToDestroyed;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.PitchMultiplier = PitchMultiplier;
	Parms.StartTime = StartTime;
	Parms.AttenuationSettings = AttenuationSettings;
	Parms.bAutoDestroy = bAutoDestroy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_EditorDebugDrawSource.Editor_DrawDebugShapes
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISF_EditorDebugDrawSource::Editor_DrawDebugShapes() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SF_EditorDebugDrawSource", "Editor_DrawDebugShapes");

	Params::SF_EditorDebugDrawSource_Editor_DrawDebugShapes Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SandFall.SF_EditorDebugDrawSource.Editor_GetDebugShapes
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<struct FEditorDebugShape_Arrow>& Arrows                                                 (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FEditorDebugShape_Arrow>& Lines                                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ISF_EditorDebugDrawSource::Editor_GetDebugShapes(TArray<struct FEditorDebugShape_Arrow>& Arrows, TArray<struct FEditorDebugShape_Arrow>& Lines) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("SF_EditorDebugDrawSource", "Editor_GetDebugShapes");

	Params::SF_EditorDebugDrawSource_Editor_GetDebugShapes Parms{};

	Parms.Arrows = std::move(Arrows);
	Parms.Lines = std::move(Lines);

	AsUObject()->ProcessEvent(Func, &Parms);

	Arrows = std::move(Parms.Arrows);
	Lines = std::move(Parms.Lines);

	return Parms.ReturnValue;
}


// Function SandFall.EditorCheckableForErrors.CheckForErrors
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IEditorCheckableForErrors::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("EditorCheckableForErrors", "CheckForErrors");

	Params::EditorCheckableForErrors_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	AsUObject()->ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function SandFall.ExtendedGameInstance.ReceivePostInitSubsystemCollection
// (Event, Public, BlueprintEvent)

void UExtendedGameInstance::ReceivePostInitSubsystemCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendedGameInstance", "ReceivePostInitSubsystemCollection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SandFall.ExtendedPlayerCameraManager.ShouldPlayCameraShake
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AExtendedPlayerCameraManager::ShouldPlayCameraShake() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendedPlayerCameraManager", "ShouldPlayCameraShake");

	Params::ExtendedPlayerCameraManager_ShouldPlayCameraShake Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GameActionInstance.ExecuteGameAction
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class APlayerController*          Controller                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGameActionInstance::ExecuteGameAction(const class APlayerController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameActionInstance", "ExecuteGameAction");

	Params::GameActionInstance_ExecuteGameAction Parms{};

	Parms.Controller = Controller;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.GameActionInstance.GetDebugString
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGameActionInstance::GetDebugString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameActionInstance", "GetDebugString");

	Params::GameActionInstance_GetDebugString Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SandFall.GameActionInstance.ShouldBlockAutoSaveDuringExecution
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameActionInstance::ShouldBlockAutoSaveDuringExecution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameActionInstance", "ShouldBlockAutoSaveDuringExecution");

	Params::GameActionInstance_ShouldBlockAutoSaveDuringExecution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GameActionInstance.ShouldTriggerAutoSaveAfterExecution
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameActionInstance::ShouldTriggerAutoSaveAfterExecution() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameActionInstance", "ShouldTriggerAutoSaveAfterExecution");

	Params::GameActionInstance_ShouldTriggerAutoSaveAfterExecution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GameAction.GetInstanceClass
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameActionInstance>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGameActionInstance> UGameAction::GetInstanceClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameAction", "GetInstanceClass");

	Params::GameAction_GetInstanceClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function SandFall.SkillDataAsset.HasSkillTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USkillDataAsset::HasSkillTag(const struct FGameplayTag& Tag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillDataAsset", "HasSkillTag");

	Params::SkillDataAsset_HasSkillTag Parms{};

	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper.AddGameplayFrameMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FText&                      _content                                               (ConstParm, Parm, NativeAccessSpecifierPublic)

void UGameplayDebuggerCategory_SandfallGameplay_BlueprintHelper::AddGameplayFrameMessage(const class FText& _content)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper", "AddGameplayFrameMessage");

	Params::GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_AddGameplayFrameMessage Parms{};

	Parms._content = std::move(_content);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper.IsGameplayDebugCategoryEnabled
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGameplayDebuggerCategory_SandfallGameplay_BlueprintHelper::IsGameplayDebugCategoryEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper", "IsGameplayDebugCategoryEnabled");

	Params::GameplayDebuggerCategory_SandfallGameplay_BlueprintHelper_IsGameplayDebugCategoryEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GameplayTagHelpers.GetGameplayTagFromName
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             TagName                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGameplayTagHelpers::GetGameplayTagFromName(class FName TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTagHelpers", "GetGameplayTagFromName");

	Params::GameplayTagHelpers_GetGameplayTagFromName Parms{};

	Parms.TagName = TagName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GameplayTagHelpers.GetGameplayTagFromString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    TagName                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGameplayTagHelpers::GetGameplayTagFromString(const class FString& TagName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GameplayTagHelpers", "GetGameplayTagFromString");

	Params::GameplayTagHelpers_GetGameplayTagFromString Parms{};

	Parms.TagName = std::move(TagName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GeometryCollectionBlueprintHelpers.GetGeometryCollectionMaterials
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGeometryCollection*              GeometryCollection                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMaterialInterface*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialInterface*> UGeometryCollectionBlueprintHelpers::GetGeometryCollectionMaterials(class UGeometryCollection* GeometryCollection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryCollectionBlueprintHelpers", "GetGeometryCollectionMaterials");

	Params::GeometryCollectionBlueprintHelpers_GetGeometryCollectionMaterials Parms{};

	Parms.GeometryCollection = GeometryCollection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GeometryCollectionBlueprintHelpers.RecreatePhysicsState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionBlueprintHelpers::RecreatePhysicsState(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryCollectionBlueprintHelpers", "RecreatePhysicsState");

	Params::GeometryCollectionBlueprintHelpers_RecreatePhysicsState Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.GeometryCollectionBlueprintHelpers.SetCollisionResponseToChannel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UGeometryCollectionComponent*     GeometryCollectionComponent                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionChannel                       Channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionResponse                      NewResponse                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionBlueprintHelpers::SetCollisionResponseToChannel(class UGeometryCollectionComponent* GeometryCollectionComponent, ECollisionChannel Channel, ECollisionResponse NewResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryCollectionBlueprintHelpers", "SetCollisionResponseToChannel");

	Params::GeometryCollectionBlueprintHelpers_SetCollisionResponseToChannel Parms{};

	Parms.GeometryCollectionComponent = GeometryCollectionComponent;
	Parms.Channel = Channel;
	Parms.NewResponse = NewResponse;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.GeometryCollectionBlueprintHelpers.SpawnGeometryCollectionComponentWithRestCollection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AActor*                           OwnerActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryCollection*              InRestCollection                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InTransform                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryCollectionComponent*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGeometryCollectionComponent* UGeometryCollectionBlueprintHelpers::SpawnGeometryCollectionComponentWithRestCollection(class AActor* OwnerActor, class UGeometryCollection* InRestCollection, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryCollectionBlueprintHelpers", "SpawnGeometryCollectionComponentWithRestCollection");

	Params::GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionComponentWithRestCollection Parms{};

	Parms.OwnerActor = OwnerActor;
	Parms.InRestCollection = InRestCollection;
	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.GeometryCollectionBlueprintHelpers.SpawnGeometryCollectionWithRestCollection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               ActorClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGeometryCollection*              InRestCollection                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FTransform&                InTransform                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeometryCollectionBlueprintHelpers::SpawnGeometryCollectionWithRestCollection(const class UObject* WorldContextObject, TSubclassOf<class AActor> ActorClass, class UGeometryCollection* InRestCollection, const struct FTransform& InTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GeometryCollectionBlueprintHelpers", "SpawnGeometryCollectionWithRestCollection");

	Params::GeometryCollectionBlueprintHelpers_SpawnGeometryCollectionWithRestCollection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorClass = ActorClass;
	Parms.InRestCollection = InRestCollection;
	Parms.InTransform = std::move(InTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_GraphicBlueprintHelpers.BringToFrontWindow
// (Final, Native, Static, Private, BlueprintCallable)
// Parameters:
// bool                                    bForced                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_GraphicBlueprintHelpers::BringToFrontWindow(bool bForced)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_GraphicBlueprintHelpers", "BringToFrontWindow");

	Params::SF_GraphicBlueprintHelpers_BringToFrontWindow Parms{};

	Parms.bForced = bForced;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_GraphicBlueprintHelpers.UpdateSplineFloatingObject
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UInstancedStaticMeshComponent*>&ISMs                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const TArray<struct FSplineFloatingInstancesData>&SplineInstanceData                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const TMap<class UInstancedStaticMeshComponent*, float>&MovingDistance                                         (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// const TMap<class UInstancedStaticMeshComponent*, float>&RotatorSpeed                                           (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InstanceCount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_GraphicBlueprintHelpers::UpdateSplineFloatingObject(class UObject* WorldContextObject, const TArray<class UInstancedStaticMeshComponent*>& ISMs, const TArray<struct FSplineFloatingInstancesData>& SplineInstanceData, const TMap<class UInstancedStaticMeshComponent*, float>& MovingDistance, const TMap<class UInstancedStaticMeshComponent*, float>& RotatorSpeed, float DeltaSeconds, int32 InstanceCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_GraphicBlueprintHelpers", "UpdateSplineFloatingObject");

	Params::SF_GraphicBlueprintHelpers_UpdateSplineFloatingObject Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ISMs = std::move(ISMs);
	Parms.SplineInstanceData = std::move(SplineInstanceData);
	Parms.MovingDistance = std::move(MovingDistance);
	Parms.RotatorSpeed = std::move(RotatorSpeed);
	Parms.DeltaSeconds = DeltaSeconds;
	Parms.InstanceCount = InstanceCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.RichTextBlockCustomWidget.NotifyUpdateNeeded
// (Native, Event, Public, BlueprintEvent)

void URichTextBlockCustomWidget::NotifyUpdateNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "NotifyUpdateNeeded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.RichTextBlockCustomWidget.SetContentText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FText&                      ContentText                                            (Parm, NativeAccessSpecifierPublic)

void URichTextBlockCustomWidget::SetContentText(const class FText& ContentText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "SetContentText");

	Params::RichTextBlockCustomWidget_SetContentText Parms{};

	Parms.ContentText = std::move(ContentText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.RichTextBlockCustomWidget.SetIDString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IDString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URichTextBlockCustomWidget::SetIDString(const class FString& IDString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "SetIDString");

	Params::RichTextBlockCustomWidget_SetIDString Parms{};

	Parms.IDString = std::move(IDString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.RichTextBlockCustomWidget.SetParentStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FTextBlockStyle&           Style                                                  (Parm, NativeAccessSpecifierPublic)

void URichTextBlockCustomWidget::SetParentStyle(const struct FTextBlockStyle& Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "SetParentStyle");

	Params::RichTextBlockCustomWidget_SetParentStyle Parms{};

	Parms.Style = std::move(Style);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.RichTextBlockCustomWidget.GetContentText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText URichTextBlockCustomWidget::GetContentText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "GetContentText");

	Params::RichTextBlockCustomWidget_GetContentText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.RichTextBlockCustomWidget.GetIDString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URichTextBlockCustomWidget::GetIDString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "GetIDString");

	Params::RichTextBlockCustomWidget_GetIDString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.RichTextBlockCustomWidget.GetParentStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTextBlockStyle            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FTextBlockStyle URichTextBlockCustomWidget::GetParentStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RichTextBlockCustomWidget", "GetParentStyle");

	Params::RichTextBlockCustomWidget_GetParentStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputActionBindingWidget.SetupInputBindingParametersFromExternal
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const class FName&                      InLegacyActionName                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDataTableRowHandle&       InCommonUIAction                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UInputAction*                     InEnhancedInputAction                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             InIMC                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputActionBindingWidget::SetupInputBindingParametersFromExternal(const class FName& InLegacyActionName, const struct FDataTableRowHandle& InCommonUIAction, class UInputAction* InEnhancedInputAction, class UInputMappingContext* InIMC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputActionBindingWidget", "SetupInputBindingParametersFromExternal");

	Params::InputActionBindingWidget_SetupInputBindingParametersFromExternal Parms{};

	Parms.InLegacyActionName = InLegacyActionName;
	Parms.InCommonUIAction = std::move(InCommonUIAction);
	Parms.InEnhancedInputAction = InEnhancedInputAction;
	Parms.InIMC = InIMC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.InputBlueprintHelpers.FindInputBrushFromCommonUIDataTable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       CommonInputActionDataTable                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputRowName                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UInputBlueprintHelpers::FindInputBrushFromCommonUIDataTable(class UObject* WorldContextObject, class UDataTable* CommonInputActionDataTable, class FName InputRowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "FindInputBrushFromCommonUIDataTable");

	Params::InputBlueprintHelpers_FindInputBrushFromCommonUIDataTable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CommonInputActionDataTable = CommonInputActionDataTable;
	Parms.InputRowName = InputRowName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.FindInputBrushFromEnhancedInputAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInputAction*               EnhancedInputAction                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UInputBlueprintHelpers::FindInputBrushFromEnhancedInputAction(class UObject* WorldContextObject, const class UInputAction* EnhancedInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "FindInputBrushFromEnhancedInputAction");

	Params::InputBlueprintHelpers_FindInputBrushFromEnhancedInputAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EnhancedInputAction = EnhancedInputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.FindInputBrushFromEnhancedInputActionByInputType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommonInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInputAction*               EnhancedInputAction                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInputMappingContext*       InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UInputBlueprintHelpers::FindInputBrushFromEnhancedInputActionByInputType(class UObject* WorldContextObject, ECommonInputType InputType, const class UInputAction* EnhancedInputAction, const class UInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "FindInputBrushFromEnhancedInputActionByInputType");

	Params::InputBlueprintHelpers_FindInputBrushFromEnhancedInputActionByInputType Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InputType = InputType;
	Parms.EnhancedInputAction = EnhancedInputAction;
	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.FindInputBrushFromInputAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             InputActionName                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UInputBlueprintHelpers::FindInputBrushFromInputAction(class UObject* WorldContextObject, class FName InputActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "FindInputBrushFromInputAction");

	Params::InputBlueprintHelpers_FindInputBrushFromInputAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InputActionName = InputActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.FindInputBrushFromKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommonInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UInputBlueprintHelpers::FindInputBrushFromKey(class UObject* WorldContextObject, ECommonInputType InputType, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "FindInputBrushFromKey");

	Params::InputBlueprintHelpers_FindInputBrushFromKey Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InputType = InputType;
	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.GetFirstKeyForEnhancedInputActionByInputType
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommonInputType                        InputType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInputAction*               EnhancedInputAction                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInputMappingContext*       InputMappingContext                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UInputBlueprintHelpers::GetFirstKeyForEnhancedInputActionByInputType(class UObject* WorldContextObject, ECommonInputType InputType, const class UInputAction* EnhancedInputAction, const class UInputMappingContext* InputMappingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "GetFirstKeyForEnhancedInputActionByInputType");

	Params::InputBlueprintHelpers_GetFirstKeyForEnhancedInputActionByInputType Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InputType = InputType;
	Parms.EnhancedInputAction = EnhancedInputAction;
	Parms.InputMappingContext = InputMappingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.GetKeyForCommonAction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UCommonInputSubsystem*      CommonInputSubsystem                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDataTableRowHandle&       InputAction                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKey                             ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FKey UInputBlueprintHelpers::GetKeyForCommonAction(const class UCommonInputSubsystem* CommonInputSubsystem, const struct FDataTableRowHandle& InputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "GetKeyForCommonAction");

	Params::InputBlueprintHelpers_GetKeyForCommonAction Parms{};

	Parms.CommonInputSubsystem = CommonInputSubsystem;
	Parms.InputAction = std::move(InputAction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.IsInGamepadOrKeyboardNavigationMode
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputBlueprintHelpers::IsInGamepadOrKeyboardNavigationMode(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "IsInGamepadOrKeyboardNavigationMode");

	Params::InputBlueprintHelpers_IsInGamepadOrKeyboardNavigationMode Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.SetIgnoreNavigationKeysInAnalogCursor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInIgnoreNavigationKeys                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputBlueprintHelpers::SetIgnoreNavigationKeysInAnalogCursor(class UObject* WorldContextObject, bool bInIgnoreNavigationKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "SetIgnoreNavigationKeysInAnalogCursor");

	Params::InputBlueprintHelpers_SetIgnoreNavigationKeysInAnalogCursor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.bInIgnoreNavigationKeys = bInIgnoreNavigationKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.InputBlueprintHelpers.TryFindKeysForEnhancedInputAction
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInputAction*               EnhancedInputAction                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKey> UInputBlueprintHelpers::TryFindKeysForEnhancedInputAction(class UObject* WorldContextObject, const class UInputAction* EnhancedInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "TryFindKeysForEnhancedInputAction");

	Params::InputBlueprintHelpers_TryFindKeysForEnhancedInputAction Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EnhancedInputAction = EnhancedInputAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.InputBlueprintHelpers.TryFindKeysForEnhancedInputActionName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName&                      EnhancedInputActionName                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FKey>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FKey> UInputBlueprintHelpers::TryFindKeysForEnhancedInputActionName(class UObject* WorldContextObject, const class FName& EnhancedInputActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputBlueprintHelpers", "TryFindKeysForEnhancedInputActionName");

	Params::InputBlueprintHelpers_TryFindKeysForEnhancedInputActionName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.EnhancedInputActionName = EnhancedInputActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_InvisibleWall.GetGeneratedInvisibleWalls
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<class ASF_GeneratedInvisibleWallBase*>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class ASF_GeneratedInvisibleWallBase*> ASF_InvisibleWall::GetGeneratedInvisibleWalls()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_InvisibleWall", "GetGeneratedInvisibleWalls");

	Params::SF_InvisibleWall_GetGeneratedInvisibleWalls Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_InvisibleWall.HasBakedData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASF_InvisibleWall::HasBakedData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_InvisibleWall", "HasBakedData");

	Params::SF_InvisibleWall_HasBakedData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_InvisibleWall.IsBakeVersionOutDated
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASF_InvisibleWall::IsBakeVersionOutDated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_InvisibleWall", "IsBakeVersionOutDated");

	Params::SF_InvisibleWall_IsBakeVersionOutDated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_InvisibleWall.TryBakeInvisibleWall
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ForceBake                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ASF_InvisibleWall::TryBakeInvisibleWall(bool ForceBake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_InvisibleWall", "TryBakeInvisibleWall");

	Params::SF_InvisibleWall_TryBakeInvisibleWall Parms{};

	Parms.ForceBake = ForceBake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.LightingScenarioHelpers.BlendDirectionalLightComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UDirectionalLightComponent*       Source                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDirectionalLightComponent*       Destination                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDirectionalLightComponent*       Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::BlendDirectionalLightComponent(class UDirectionalLightComponent* Source, class UDirectionalLightComponent* Destination, class UDirectionalLightComponent* Target, float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "BlendDirectionalLightComponent");

	Params::LightingScenarioHelpers_BlendDirectionalLightComponent Parms{};

	Parms.Source = Source;
	Parms.Destination = Destination;
	Parms.Target = Target;
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LightingScenarioHelpers.BlendExponentialHeightFogComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UExponentialHeightFogComponent*   Source                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UExponentialHeightFogComponent*   Destination                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UExponentialHeightFogComponent*   Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::BlendExponentialHeightFogComponent(class UExponentialHeightFogComponent* Source, class UExponentialHeightFogComponent* Destination, class UExponentialHeightFogComponent* Target, float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "BlendExponentialHeightFogComponent");

	Params::LightingScenarioHelpers_BlendExponentialHeightFogComponent Parms{};

	Parms.Source = Source;
	Parms.Destination = Destination;
	Parms.Target = Target;
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LightingScenarioHelpers.BlendLightComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULightComponent*                  Source                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULightComponent*                  Destination                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULightComponent*                  Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::BlendLightComponent(class ULightComponent* Source, class ULightComponent* Destination, class ULightComponent* Target, float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "BlendLightComponent");

	Params::LightingScenarioHelpers_BlendLightComponent Parms{};

	Parms.Source = Source;
	Parms.Destination = Destination;
	Parms.Target = Target;
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LightingScenarioHelpers.BlendLightComponentBase
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class ULightComponentBase*              Source                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULightComponentBase*              Destination                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULightComponentBase*              Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::BlendLightComponentBase(class ULightComponentBase* Source, class ULightComponentBase* Destination, class ULightComponentBase* Target, float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "BlendLightComponentBase");

	Params::LightingScenarioHelpers_BlendLightComponentBase Parms{};

	Parms.Source = Source;
	Parms.Destination = Destination;
	Parms.Target = Target;
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LightingScenarioHelpers.BlendSkyAtmosphereComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkyAtmosphereComponent*          Source                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyAtmosphereComponent*          Destination                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyAtmosphereComponent*          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::BlendSkyAtmosphereComponent(class USkyAtmosphereComponent* Source, class USkyAtmosphereComponent* Destination, class USkyAtmosphereComponent* Target, float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "BlendSkyAtmosphereComponent");

	Params::LightingScenarioHelpers_BlendSkyAtmosphereComponent Parms{};

	Parms.Source = Source;
	Parms.Destination = Destination;
	Parms.Target = Target;
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LightingScenarioHelpers.BlendSkyLightComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkyLightComponent*               Source                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyLightComponent*               Destination                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USkyLightComponent*               Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Multiplier                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::BlendSkyLightComponent(class USkyLightComponent* Source, class USkyLightComponent* Destination, class USkyLightComponent* Target, float Multiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "BlendSkyLightComponent");

	Params::LightingScenarioHelpers_BlendSkyLightComponent Parms{};

	Parms.Source = Source;
	Parms.Destination = Destination;
	Parms.Target = Target;
	Parms.Multiplier = Multiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.LightingScenarioHelpers.Lerp_FColor
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   T                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor ULightingScenarioHelpers::Lerp_FColor(const struct FColor& A, const struct FColor& B, float T)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "Lerp_FColor");

	Params::LightingScenarioHelpers_Lerp_FColor Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.T = T;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.LightingScenarioHelpers.Lerp_FExponentialHeightFogData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FExponentialHeightFogData& A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FExponentialHeightFogData& B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   T                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FExponentialHeightFogData        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FExponentialHeightFogData ULightingScenarioHelpers::Lerp_FExponentialHeightFogData(const struct FExponentialHeightFogData& A, const struct FExponentialHeightFogData& B, float T)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "Lerp_FExponentialHeightFogData");

	Params::LightingScenarioHelpers_Lerp_FExponentialHeightFogData Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.T = T;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.LightingScenarioHelpers.MarkWholeRenderStateDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULightingScenarioHelpers::MarkWholeRenderStateDirty(class UActorComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LightingScenarioHelpers", "MarkWholeRenderStateDirty");

	Params::LightingScenarioHelpers_MarkWholeRenderStateDirty Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_LoadingScreenGISubsystem.IsLoadingScreenSubSystemActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_LoadingScreenGISubsystem::IsLoadingScreenSubSystemActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenGISubsystem", "IsLoadingScreenSubSystemActive");

	Params::SF_LoadingScreenGISubsystem_IsLoadingScreenSubSystemActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LoadingScreenGISubsystem.OnLoadingScreenFinished
// (Final, Native, Private)

void USF_LoadingScreenGISubsystem::OnLoadingScreenFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenGISubsystem", "OnLoadingScreenFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_LoadingScreenGISubsystem.OpenLevelBySoftPtrWithLoadingScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSoftObjectPtr<class UWorld>      Level                                                  (ConstParm, Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                                    bAbsolute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Options                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USF_LoadingScreenWidget>LoadingScreenOverride                                  (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_LoadingScreenGISubsystem::OpenLevelBySoftPtrWithLoadingScreen(const class UObject* WorldContextObject, const TSoftObjectPtr<class UWorld> Level, const struct FLatentActionInfo& LatentInfo, bool bAbsolute, const class FString& Options, TSubclassOf<class USF_LoadingScreenWidget> LoadingScreenOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenGISubsystem", "OpenLevelBySoftPtrWithLoadingScreen");

	Params::SF_LoadingScreenGISubsystem_OpenLevelBySoftPtrWithLoadingScreen Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Level = Level;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.bAbsolute = bAbsolute;
	Parms.Options = std::move(Options);
	Parms.LoadingScreenOverride = LoadingScreenOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_LoadingScreenGISubsystem.OpenLevelWithLoadingScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             LevelName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// bool                                    bAbsolute                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Options                                                (Parm, ZeroConstructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USF_LoadingScreenWidget>LoadingScreenOverride                                  (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_LoadingScreenGISubsystem::OpenLevelWithLoadingScreen(const class UObject* WorldContextObject, class FName LevelName, const struct FLatentActionInfo& LatentInfo, bool bAbsolute, const class FString& Options, TSubclassOf<class USF_LoadingScreenWidget> LoadingScreenOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenGISubsystem", "OpenLevelWithLoadingScreen");

	Params::SF_LoadingScreenGISubsystem_OpenLevelWithLoadingScreen Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.LevelName = LevelName;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.bAbsolute = bAbsolute;
	Parms.Options = std::move(Options);
	Parms.LoadingScreenOverride = LoadingScreenOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_LoadingScreenGISubsystem.OverrideNextLoadingScreenData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLoadingScreenData&        dataOverride                                           (Parm, NativeAccessSpecifierPublic)

void USF_LoadingScreenGISubsystem::OverrideNextLoadingScreenData(const struct FLoadingScreenData& dataOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenGISubsystem", "OverrideNextLoadingScreenData");

	Params::SF_LoadingScreenGISubsystem_OverrideNextLoadingScreenData Parms{};

	Parms.dataOverride = std::move(dataOverride);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_LoadingScreenGISubsystem.StopPostLoadingScreenTransition
// (Final, Native, Public, BlueprintCallable)

void USF_LoadingScreenGISubsystem::StopPostLoadingScreenTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenGISubsystem", "StopPostLoadingScreenTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_LoadingScreenWidget.StartLoadingScreen
// (Event, Public, BlueprintEvent)
// Parameters:
// class FName                             LevelLoaded                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_LoadingScreenWidget::StartLoadingScreen(class FName LevelLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LoadingScreenWidget", "StartLoadingScreen");

	Params::SF_LoadingScreenWidget_StartLoadingScreen Parms{};

	Parms.LevelLoaded = LevelLoaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.SF_LocalizationGISubsystem.ChangeAssetGroupCultureSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             AssetGroup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Culture_IETF_Tag                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_LocalizationGISubsystem::ChangeAssetGroupCultureSettings(class FName AssetGroup, const class FString& Culture_IETF_Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "ChangeAssetGroupCultureSettings");

	Params::SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettings Parms{};

	Parms.AssetGroup = AssetGroup;
	Parms.Culture_IETF_Tag = std::move(Culture_IETF_Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.ChangeAssetGroupCultureSettingsByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             AssetGroup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CultureIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_LocalizationGISubsystem::ChangeAssetGroupCultureSettingsByIndex(class FName AssetGroup, int32 CultureIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "ChangeAssetGroupCultureSettingsByIndex");

	Params::SF_LocalizationGISubsystem_ChangeAssetGroupCultureSettingsByIndex Parms{};

	Parms.AssetGroup = AssetGroup;
	Parms.CultureIndex = CultureIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.ChangeGameCultureSettings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Culture_IETF_Tag                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_LocalizationGISubsystem::ChangeGameCultureSettings(const class FString& Culture_IETF_Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "ChangeGameCultureSettings");

	Params::SF_LocalizationGISubsystem_ChangeGameCultureSettings Parms{};

	Parms.Culture_IETF_Tag = std::move(Culture_IETF_Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.ChangeGameCultureSettingsByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   CultureIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_LocalizationGISubsystem::ChangeGameCultureSettingsByIndex(int32 CultureIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "ChangeGameCultureSettingsByIndex");

	Params::SF_LocalizationGISubsystem_ChangeGameCultureSettingsByIndex Parms{};

	Parms.CultureIndex = CultureIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.Get_IETF_TagIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    IETF_Tag                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USF_LocalizationGISubsystem::Get_IETF_TagIndex(const class FString& IETF_Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "Get_IETF_TagIndex");

	Params::SF_LocalizationGISubsystem_Get_IETF_TagIndex Parms{};

	Parms.IETF_Tag = std::move(IETF_Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.GetAssetGroupCultureData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             AssetGroup                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    GetDisplayNameInCurrentLanguage                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAssetGroupCultureData           ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FAssetGroupCultureData USF_LocalizationGISubsystem::GetAssetGroupCultureData(class FName AssetGroup, bool GetDisplayNameInCurrentLanguage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "GetAssetGroupCultureData");

	Params::SF_LocalizationGISubsystem_GetAssetGroupCultureData Parms{};

	Parms.AssetGroup = AssetGroup;
	Parms.GetDisplayNameInCurrentLanguage = GetDisplayNameInCurrentLanguage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.GetGameCultureData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    GetDisplayNameInCurrentLanguage                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FProjectCultureData              ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FProjectCultureData USF_LocalizationGISubsystem::GetGameCultureData(bool GetDisplayNameInCurrentLanguage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "GetGameCultureData");

	Params::SF_LocalizationGISubsystem_GetGameCultureData Parms{};

	Parms.GetDisplayNameInCurrentLanguage = GetDisplayNameInCurrentLanguage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_LocalizationGISubsystem.GetAudioAssetGroupName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName USF_LocalizationGISubsystem::GetAudioAssetGroupName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_LocalizationGISubsystem", "GetAudioAssetGroupName");

	Params::SF_LocalizationGISubsystem_GetAudioAssetGroupName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.MathHelpers.GetBlendAlpha
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// EViewTargetBlendFunction                BlendFunction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BlendExp                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMathHelpers::GetBlendAlpha(EViewTargetBlendFunction BlendFunction, float BlendExp, float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MathHelpers", "GetBlendAlpha");

	Params::MathHelpers_GetBlendAlpha Parms{};

	Parms.BlendFunction = BlendFunction;
	Parms.BlendExp = BlendExp;
	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.MathHelpers.LimitMax_Double
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UMathHelpers::LimitMax_Double()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MathHelpers", "LimitMax_Double");

	Params::MathHelpers_LimitMax_Double Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.MathHelpers.LimitMax_Integer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UMathHelpers::LimitMax_Integer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MathHelpers", "LimitMax_Integer");

	Params::MathHelpers_LimitMax_Integer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.MathHelpers.LimitMax_Integer64
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UMathHelpers::LimitMax_Integer64()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("MathHelpers", "LimitMax_Integer64");

	Params::MathHelpers_LimitMax_Integer64 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ModifierStack_Float.AddModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSF_ModifierStackEntryHandle&    OutModifierHandle                                      (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    DebugModifierName                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UModifierStack_Float::AddModifier(float NewValue, struct FSF_ModifierStackEntryHandle& OutModifierHandle, const class FString& DebugModifierName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModifierStack_Float", "AddModifier");

	Params::ModifierStack_Float_AddModifier Parms{};

	Parms.NewValue = NewValue;
	Parms.OutModifierHandle = std::move(OutModifierHandle);
	Parms.DebugModifierName = std::move(DebugModifierName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutModifierHandle = std::move(Parms.OutModifierHandle);
}


// Function SandFall.ModifierStack_Float.RemoveModifier
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSF_ModifierStackEntryHandle&    ModifierHandle                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UModifierStack_Float::RemoveModifier(struct FSF_ModifierStackEntryHandle& ModifierHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModifierStack_Float", "RemoveModifier");

	Params::ModifierStack_Float_RemoveModifier Parms{};

	Parms.ModifierHandle = std::move(ModifierHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandle = std::move(Parms.ModifierHandle);

	return Parms.ReturnValue;
}


// Function SandFall.ModifierStack_Float.UpdateStackValue
// (Final, Native, Public, BlueprintCallable)

void UModifierStack_Float::UpdateStackValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModifierStack_Float", "UpdateStackValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ModifierStack_Float.GetCurrentValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UModifierStack_Float::GetCurrentValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ModifierStack_Float", "GetCurrentValue");

	Params::ModifierStack_Float_GetCurrentValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.NamedIDHelpers.GetNamedIDClassPathName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTopLevelAssetPath               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTopLevelAssetPath UNamedIDHelpers::GetNamedIDClassPathName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NamedIDHelpers", "GetNamedIDClassPathName");

	Params::NamedIDHelpers_GetNamedIDClassPathName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.NavigationHelpers.CanEverAffectNavigation
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavigationHelpers::CanEverAffectNavigation(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavigationHelpers", "CanEverAffectNavigation");

	Params::NavigationHelpers_CanEverAffectNavigation Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.NavigationHelpers.GetNavDataForAgentName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AgentName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ANavigationData*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ANavigationData* UNavigationHelpers::GetNavDataForAgentName(class UObject* WorldContextObject, class FName AgentName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavigationHelpers", "GetNavDataForAgentName");

	Params::NavigationHelpers_GetNavDataForAgentName Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.AgentName = AgentName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.NavigationHelpers.IsNavigationRelevant
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavigationHelpers::IsNavigationRelevant(class UActorComponent* ActorComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavigationHelpers", "IsNavigationRelevant");

	Params::NavigationHelpers_IsNavigationRelevant Parms{};

	Parms.ActorComponent = ActorComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.NavigationHelpers.SetCanEverAffectNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UActorComponent*                  ActorComponent                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRelevant                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationHelpers::SetCanEverAffectNavigation(class UActorComponent* ActorComponent, bool bRelevant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavigationHelpers", "SetCanEverAffectNavigation");

	Params::NavigationHelpers_SetCanEverAffectNavigation Parms{};

	Parms.ActorComponent = ActorComponent;
	Parms.bRelevant = bRelevant;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.NavigationHelpers.SetFillCollisionUnderneathForNavmesh
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UPrimitiveComponent*              PrimitiveComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFillCollisionUnderneathForNavmesh                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavigationHelpers::SetFillCollisionUnderneathForNavmesh(class UPrimitiveComponent* PrimitiveComponent, bool bFillCollisionUnderneathForNavmesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavigationHelpers", "SetFillCollisionUnderneathForNavmesh");

	Params::NavigationHelpers_SetFillCollisionUnderneathForNavmesh Parms{};

	Parms.PrimitiveComponent = PrimitiveComponent;
	Parms.bFillCollisionUnderneathForNavmesh = bFillCollisionUnderneathForNavmesh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ProjectConfiguration.GetEditorOnlyLevelDataTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UProjectConfiguration::GetEditorOnlyLevelDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectConfiguration", "GetEditorOnlyLevelDataTable");

	Params::ProjectConfiguration_GetEditorOnlyLevelDataTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.ProjectConfiguration.GetLevelDataTable
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UProjectConfiguration::GetLevelDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProjectConfiguration", "GetLevelDataTable");

	Params::ProjectConfiguration_GetLevelDataTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.CreateQuestIdentifier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             QuestName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UQuestHelpers::CreateQuestIdentifier(class FName QuestName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "CreateQuestIdentifier");

	Params::QuestHelpers_CreateQuestIdentifier Parms{};

	Parms.QuestName = QuestName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.CreateQuestObjectiveIdentifier
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             QuestName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ObjectiveName                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FQuestObjectiveIdentifier        ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FQuestObjectiveIdentifier UQuestHelpers::CreateQuestObjectiveIdentifier(class FName QuestName, class FName ObjectiveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "CreateQuestObjectiveIdentifier");

	Params::QuestHelpers_CreateQuestObjectiveIdentifier Parms{};

	Parms.QuestName = QuestName;
	Parms.ObjectiveName = ObjectiveName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.Equal_FQuestObjectiveIdentifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuestObjectiveIdentifier& A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FQuestObjectiveIdentifier& B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestHelpers::Equal_FQuestObjectiveIdentifier(const struct FQuestObjectiveIdentifier& A, const struct FQuestObjectiveIdentifier& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "Equal_FQuestObjectiveIdentifier");

	Params::QuestHelpers_Equal_FQuestObjectiveIdentifier Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.GetObjectiveDataTable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             QuestName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UQuestHelpers::GetObjectiveDataTable(class FName QuestName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "GetObjectiveDataTable");

	Params::QuestHelpers_GetObjectiveDataTable Parms{};

	Parms.QuestName = QuestName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.GetQuestDataTable
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* UQuestHelpers::GetQuestDataTable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "GetQuestDataTable");

	Params::QuestHelpers_GetQuestDataTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.IsValid_FQuestObjectiveIdentifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuestObjectiveIdentifier& QuestObjectiveIdentifier                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestHelpers::IsValid_FQuestObjectiveIdentifier(const struct FQuestObjectiveIdentifier& QuestObjectiveIdentifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "IsValid_FQuestObjectiveIdentifier");

	Params::QuestHelpers_IsValid_FQuestObjectiveIdentifier Parms{};

	Parms.QuestObjectiveIdentifier = std::move(QuestObjectiveIdentifier);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.QuestHelpers.NotEqual_FQuestObjectiveIdentifier
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FQuestObjectiveIdentifier& A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FQuestObjectiveIdentifier& B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UQuestHelpers::NotEqual_FQuestObjectiveIdentifier(const struct FQuestObjectiveIdentifier& A, const struct FQuestObjectiveIdentifier& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestHelpers", "NotEqual_FQuestObjectiveIdentifier");

	Params::QuestHelpers_NotEqual_FQuestObjectiveIdentifier Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReadTexturePixelQuery.FeedTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        TextureRef                                             (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_ReadTexturePixelQuery::FeedTexture(TSoftObjectPtr<class UTexture2D> TextureRef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ReadTexturePixelQuery", "FeedTexture");

	Params::SF_ReadTexturePixelQuery_FeedTexture Parms{};

	Parms.TextureRef = TextureRef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_ReadTexturePixelQuery.GetTextureHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USF_ReadTexturePixelQuery::GetTextureHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ReadTexturePixelQuery", "GetTextureHeight");

	Params::SF_ReadTexturePixelQuery_GetTextureHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReadTexturePixelQuery.GetTextureWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USF_ReadTexturePixelQuery::GetTextureWidth()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ReadTexturePixelQuery", "GetTextureWidth");

	Params::SF_ReadTexturePixelQuery_GetTextureWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReadTexturePixelQuery.HasValidData
// (Final, Native, Private, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ReadTexturePixelQuery::HasValidData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ReadTexturePixelQuery", "HasValidData");

	Params::SF_ReadTexturePixelQuery_HasValidData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReadTexturePixelQuery.TryReadPixel
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   PositionX                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PositionY                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8*                                  PixelValue                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  PixelValueNormalized                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ReadTexturePixelQuery::TryReadPixel(int32 PositionX, int32 PositionY, uint8* PixelValue, float* PixelValueNormalized)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ReadTexturePixelQuery", "TryReadPixel");

	Params::SF_ReadTexturePixelQuery_TryReadPixel Parms{};

	Parms.PositionX = PositionX;
	Parms.PositionY = PositionY;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (PixelValue != nullptr)
		*PixelValue = Parms.PixelValue;

	if (PixelValueNormalized != nullptr)
		*PixelValueNormalized = Parms.PixelValueNormalized;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReferencerCounterUtils.AddReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSF_ReferenceCounter&            Target                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSF_ReferenceCounterHandle&      ReferenceHandle                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    DebugName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ReferencerCounterUtils::AddReference(struct FSF_ReferenceCounter& Target, struct FSF_ReferenceCounterHandle& ReferenceHandle, const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "AddReference");

	Params::SF_ReferencerCounterUtils_AddReference Parms{};

	Parms.Target = std::move(Target);
	Parms.ReferenceHandle = std::move(ReferenceHandle);
	Parms.DebugName = std::move(DebugName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
	ReferenceHandle = std::move(Parms.ReferenceHandle);

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReferencerCounterUtils.BindEventOnChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSF_ReferenceCounter&            Target                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool _isActive)>         Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_ReferencerCounterUtils::BindEventOnChanged(struct FSF_ReferenceCounter& Target, TDelegate<void(bool _isActive)> Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "BindEventOnChanged");

	Params::SF_ReferencerCounterUtils_BindEventOnChanged Parms{};

	Parms.Target = std::move(Target);
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function SandFall.SF_ReferencerCounterUtils.GetReferenceCounterState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSF_ReferenceCounter&      Target                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ReferencerCounterUtils::GetReferenceCounterState(const struct FSF_ReferenceCounter& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "GetReferenceCounterState");

	Params::SF_ReferencerCounterUtils_GetReferenceCounterState Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReferencerCounterUtils.IsHandleValid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FSF_ReferenceCounterHandle&ReferenceHandle                                        (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ReferencerCounterUtils::IsHandleValid(const struct FSF_ReferenceCounterHandle& ReferenceHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "IsHandleValid");

	Params::SF_ReferencerCounterUtils_IsHandleValid Parms{};

	Parms.ReferenceHandle = std::move(ReferenceHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReferencerCounterUtils.MakeReferenceCounterWrapper
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USF_ReferenceCounterWrapper*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_ReferenceCounterWrapper* USF_ReferencerCounterUtils::MakeReferenceCounterWrapper()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "MakeReferenceCounterWrapper");

	Params::SF_ReferencerCounterUtils_MakeReferenceCounterWrapper Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReferencerCounterUtils.RemoveAllReferences
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSF_ReferenceCounter&            Target                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USF_ReferencerCounterUtils::RemoveAllReferences(struct FSF_ReferenceCounter& Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "RemoveAllReferences");

	Params::SF_ReferencerCounterUtils_RemoveAllReferences Parms{};

	Parms.Target = std::move(Target);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function SandFall.SF_ReferencerCounterUtils.RemoveReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSF_ReferenceCounter&            Target                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSF_ReferenceCounterHandle&      ReferenceHandle                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USF_ReferencerCounterUtils::RemoveReference(struct FSF_ReferenceCounter& Target, struct FSF_ReferenceCounterHandle& ReferenceHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "RemoveReference");

	Params::SF_ReferencerCounterUtils_RemoveReference Parms{};

	Parms.Target = std::move(Target);
	Parms.ReferenceHandle = std::move(ReferenceHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
	ReferenceHandle = std::move(Parms.ReferenceHandle);

	return Parms.ReturnValue;
}


// Function SandFall.SF_ReferencerCounterUtils.UnbindEventOnChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSF_ReferenceCounter&            Target                                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool _isActive)>         Event                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_ReferencerCounterUtils::UnbindEventOnChanged(struct FSF_ReferenceCounter& Target, TDelegate<void(bool _isActive)> Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ReferencerCounterUtils", "UnbindEventOnChanged");

	Params::SF_ReferencerCounterUtils_UnbindEventOnChanged Parms{};

	Parms.Target = std::move(Target);
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Target = std::move(Parms.Target);
}


// Function SandFall.SandfallGameMode.OnPreStartPlay
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ASandfallGameMode::OnPreStartPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SandfallGameMode", "OnPreStartPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SandFall.SaveGameHelpers.CopyIdenticalProperties
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          FromObject                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ToObject                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USaveGameHelpers::CopyIdenticalProperties(class UObject* FromObject, class UObject* ToObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SaveGameHelpers", "CopyIdenticalProperties");

	Params::SaveGameHelpers_CopyIdenticalProperties Parms{};

	Parms.FromObject = FromObject;
	Parms.ToObject = ToObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SaveGameHelpers.LoadGameFromPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    SaveFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USaveGame*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USaveGame* USaveGameHelpers::LoadGameFromPath(const class FString& SaveFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SaveGameHelpers", "LoadGameFromPath");

	Params::SaveGameHelpers_LoadGameFromPath Parms{};

	Parms.SaveFilePath = std::move(SaveFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SaveGameHelpers.SaveGameToPath
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USaveGame*                        SaveGameObject                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    SaveFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USaveGameHelpers::SaveGameToPath(class USaveGame* SaveGameObject, const class FString& SaveFilePath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SaveGameHelpers", "SaveGameToPath");

	Params::SaveGameHelpers_SaveGameToPath Parms{};

	Parms.SaveGameObject = SaveGameObject;
	Parms.SaveFilePath = std::move(SaveFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ScreenShotRequestAsyncAction.WriteCurrentScreenToRenderTarget
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTextureRenderTarget2D*           RenderTarget_0                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FallBackTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bShowUI                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_ScreenShotRequestAsyncAction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_ScreenShotRequestAsyncAction* USF_ScreenShotRequestAsyncAction::WriteCurrentScreenToRenderTarget(class UObject* WorldContextObject, class UTextureRenderTarget2D* RenderTarget_0, float FallBackTime, bool bShowUI)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_ScreenShotRequestAsyncAction", "WriteCurrentScreenToRenderTarget");

	Params::SF_ScreenShotRequestAsyncAction_WriteCurrentScreenToRenderTarget Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.RenderTarget_0 = RenderTarget_0;
	Parms.FallBackTime = FallBackTime;
	Parms.bShowUI = bShowUI;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ScreenShotRequestAsyncAction.OnScreenShotDone
// (Final, Native, Private, HasOutParams)
// Parameters:
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Height                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FColor>&            Colors                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USF_ScreenShotRequestAsyncAction::OnScreenShotDone(int32 Width, int32 Height, const TArray<struct FColor>& Colors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ScreenShotRequestAsyncAction", "OnScreenShotDone");

	Params::SF_ScreenShotRequestAsyncAction_OnScreenShotDone Parms{};

	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Colors = std::move(Colors);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_StateTreeRunner.SendStateTreeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FStateTreeEvent&           Event                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void USF_StateTreeRunner::SendStateTreeEvent(const struct FStateTreeEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_StateTreeRunner", "SendStateTreeEvent");

	Params::SF_StateTreeRunner_SendStateTreeEvent Parms{};

	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_StateTreeRunner.StartLogic
// (Final, Native, Public, BlueprintCallable)

void USF_StateTreeRunner::StartLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_StateTreeRunner", "StartLogic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_StateTreeRunner.StopLogic
// (Final, Native, Public, BlueprintCallable)

void USF_StateTreeRunner::StopLogic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_StateTreeRunner", "StopLogic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_StateTreeRunner.Tick
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_StateTreeRunner::Tick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_StateTreeRunner", "Tick");

	Params::SF_StateTreeRunner_Tick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_SubtitlesWidget.OnSubtitleWidgetCreated_BP
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UVerticalBoxSlot*                 NewSubWidget                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_SubtitlesWidget::OnSubtitleWidgetCreated_BP(class UVerticalBoxSlot* NewSubWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_SubtitlesWidget", "OnSubtitleWidgetCreated_BP");

	Params::SF_SubtitlesWidget_OnSubtitleWidgetCreated_BP Parms{};

	Parms.NewSubWidget = NewSubWidget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SandFall.SF_SubtitlesWidget.UpdateFromGameUserSettings
// (Final, Native, Public)
// Parameters:
// const class UConfigurableGameUserSettings*Settings                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_SubtitlesWidget::UpdateFromGameUserSettings(const class UConfigurableGameUserSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_SubtitlesWidget", "UpdateFromGameUserSettings");

	Params::SF_SubtitlesWidget_UpdateFromGameUserSettings Parms{};

	Parms.Settings = Settings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_SubtitlesWorldSubsystem.ClearSubtitles
// (Final, Native, Public, BlueprintCallable)

void USF_SubtitlesWorldSubsystem::ClearSubtitles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_SubtitlesWorldSubsystem", "ClearSubtitles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_SubtitlesWorldSubsystem.DisableForcedSubtitle
// (Final, Native, Public, BlueprintCallable)

void USF_SubtitlesWorldSubsystem::DisableForcedSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_SubtitlesWorldSubsystem", "DisableForcedSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_SubtitlesWorldSubsystem.EnableForcedSubtitle
// (Final, Native, Public, BlueprintCallable)

void USF_SubtitlesWorldSubsystem::EnableForcedSubtitle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_SubtitlesWorldSubsystem", "EnableForcedSubtitle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_SubtitlesWorldSubsystem.UpdateFromGameUserSettings
// (Final, Native, Private)
// Parameters:
// const class UConfigurableGameUserSettings*Settings                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USF_SubtitlesWorldSubsystem::UpdateFromGameUserSettings(const class UConfigurableGameUserSettings* Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_SubtitlesWorldSubsystem", "UpdateFromGameUserSettings");

	Params::SF_SubtitlesWorldSubsystem_UpdateFromGameUserSettings Parms{};

	Parms.Settings = Settings;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterStats.GetStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StatId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UCharacterStats::GetStat(int32 StatId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStats", "GetStat");

	Params::CharacterStats_GetStat Parms{};

	Parms.StatId = StatId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.CharacterStats.InitStat
// (Final, Native, Public, BlueprintCallable)

void UCharacterStats::InitStat()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStats", "InitStat");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterStats.SetStat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   StatId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StatValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCharacterStats::SetStat(int32 StatId, int32 StatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStats", "SetStat");

	Params::CharacterStats_SetStat Parms{};

	Parms.StatId = StatId;
	Parms.StatValue = StatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.CharacterStats.TickStats
// (Final, Native, Public, BlueprintCallable)

void UCharacterStats::TickStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CharacterStats", "TickStats");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SandfallCharacterStatsHelpers.GetBaseStatValues
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TMap<int32, int32>                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<int32, int32> USandfallCharacterStatsHelpers::GetBaseStatValues()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallCharacterStatsHelpers", "GetBaseStatValues");

	Params::SandfallCharacterStatsHelpers_GetBaseStatValues Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SandfallCharacterStatsHelpers.RegisterStats
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             CharacterId                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TDelegate<void(int32 StatId, int32 StatValue)>StatCallback                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USandfallCharacterStatsHelpers::RegisterStats(class FName CharacterId, TDelegate<void(int32 StatId, int32 StatValue)> StatCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SandfallCharacterStatsHelpers", "RegisterStats");

	Params::SandfallCharacterStatsHelpers_RegisterStats Parms{};

	Parms.CharacterId = CharacterId;
	Parms.StatCallback = StatCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.ExtendedActorComponent.OnInitializeComponent
// (Event, Public, BlueprintEvent)

void UExtendedActorComponent::OnInitializeComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendedActorComponent", "OnInitializeComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SandFall.ExtendedActorComponent.OnPreSave
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UExtendedActorComponent::OnPreSave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendedActorComponent", "OnPreSave");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SandFall.UMGBlueprintHelpers.GetMaxCharacterHeightFromStyle
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FTextBlockStyle&           Style                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUMGBlueprintHelpers::GetMaxCharacterHeightFromStyle(const struct FTextBlockStyle& Style)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UMGBlueprintHelpers", "GetMaxCharacterHeightFromStyle");

	Params::UMGBlueprintHelpers_GetMaxCharacterHeightFromStyle Parms{};

	Parms.Style = std::move(Style);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SandFall.SF_ExtendedUserWidget.OnSynchronizeProperties
// (Native, Event, Public, BlueprintEvent)

void USF_ExtendedUserWidget::OnSynchronizeProperties()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SF_ExtendedUserWidget", "OnSynchronizeProperties");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SandFall.SF_WaitForPSOCachingAsyncAction.WaitForPSOCaching
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinWaitingTime                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USF_WaitForPSOCachingAsyncAction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USF_WaitForPSOCachingAsyncAction* USF_WaitForPSOCachingAsyncAction::WaitForPSOCaching(class UObject* WorldContextObject, float MinWaitingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SF_WaitForPSOCachingAsyncAction", "WaitForPSOCaching");

	Params::SF_WaitForPSOCachingAsyncAction_WaitForPSOCaching Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.MinWaitingTime = MinWaitingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

