#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_IndexSelectorComponent

#include "Basic.hpp"

#include "E_GPE_OrchestratorMode_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_IndexSelectorComponent.BP_GPE_IndexSelectorComponent_C
// 0x0030 (0x00D0 - 0x00A0)
class UBP_GPE_IndexSelectorComponent_C final : public UActorComponent
{
public:
	E_GPE_OrchestratorMode                        Mode;                                              // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentIndex;                                      // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 ShuffledIndexes;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         PreviousArrayLength;                               // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 UsedIndexes;                                       // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void GetNextIndex(int32 ArrayLength, int32* Index_0);
	void GetUsedIndexes(TArray<int32>* Indexes);
	void InitShuffeIndexesIfNeeded(int32 ArrayLength);
	void ResetIndexes(bool ResetCurrentIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_IndexSelectorComponent_C">();
	}
	static class UBP_GPE_IndexSelectorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GPE_IndexSelectorComponent_C>();
	}
};
static_assert(alignof(UBP_GPE_IndexSelectorComponent_C) == 0x000008, "Wrong alignment on UBP_GPE_IndexSelectorComponent_C");
static_assert(sizeof(UBP_GPE_IndexSelectorComponent_C) == 0x0000D0, "Wrong size on UBP_GPE_IndexSelectorComponent_C");
static_assert(offsetof(UBP_GPE_IndexSelectorComponent_C, Mode) == 0x0000A0, "Member 'UBP_GPE_IndexSelectorComponent_C::Mode' has a wrong offset!");
static_assert(offsetof(UBP_GPE_IndexSelectorComponent_C, CurrentIndex) == 0x0000A4, "Member 'UBP_GPE_IndexSelectorComponent_C::CurrentIndex' has a wrong offset!");
static_assert(offsetof(UBP_GPE_IndexSelectorComponent_C, ShuffledIndexes) == 0x0000A8, "Member 'UBP_GPE_IndexSelectorComponent_C::ShuffledIndexes' has a wrong offset!");
static_assert(offsetof(UBP_GPE_IndexSelectorComponent_C, PreviousArrayLength) == 0x0000B8, "Member 'UBP_GPE_IndexSelectorComponent_C::PreviousArrayLength' has a wrong offset!");
static_assert(offsetof(UBP_GPE_IndexSelectorComponent_C, UsedIndexes) == 0x0000C0, "Member 'UBP_GPE_IndexSelectorComponent_C::UsedIndexes' has a wrong offset!");

}

