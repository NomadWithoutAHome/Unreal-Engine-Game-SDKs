#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlueWhale_Spline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlueWhale_Spline.BP_BlueWhale_Spline_C
// 0x0228 (0x04B8 - 0x0290)
class ABP_BlueWhale_Spline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Whale_Sounds;                                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere5;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere4;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere3;                                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere2;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere1;                                           // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Whale;                                             // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Whale_Transform;                                   // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 ReferenceAnim;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Back;                                       // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LookAt_Back;                                       // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Front;                                      // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LookAt_Front;                                      // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Mouth_Animation_Mouth_BC05A2F84EE81EF126FB518BF2B3DDF3; // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Mouth_Animation__Direction_BC05A2F84EE81EF126FB518BF2B3DDF3; // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Mouth_Animation;                          // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Speed_Variations__Direction_F0F54BBD4877A2AA6C9B87B6C4BEAB66; // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Speed_Variations;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lookat_Front_CurrentDistance;                      // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lookat_Back_CurrentDistance;                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lookat_Front_Offset;                               // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lookat_Back_Offset;                                // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLookatSpheres;                                 // 0x0360(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MovementSpeed_Spline;                              // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimPlayRate_Min;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DynamicSpeed_SpeedingUp_;                          // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DynamicSpeed_Desired_Speed;                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Desired_BlendSpace;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicAnim_Fast_Length;                           // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicAnim_Randomness;                            // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicAnim_Slow_Length;                           // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dynamic_Speed;                                     // 0x03B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B1[0x7];                                      // 0x03B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimPlayRate_Max;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicSpeed_Speed;                                // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicSpeed_Acceleration;                         // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpace;                                        // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicSpeed_Deceleration;                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementSpeed_Min;                                 // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementSpeed_Max;                                 // 0x03E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpace_Acceleration;                           // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpace_Decelaration;                           // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Non_Dynamic_AnimPlayRate;                          // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Non_Dynamic_MovementSpeed;                         // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Non_Dynamic_Anim_Intensity;                        // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurningAngle;                                      // 0x0420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roll_Rotation_Intensity;                           // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Roll_Smoothing_Speed;                              // 0x0430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TurningAngle_Bones;                                // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBlueWhale_AnimBP_C*                    Whale_AnimBP;                                      // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBlueWhale_Reference_AnimBP_C*          Reference_AnimBP;                                  // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Mouth_OpensNearPlayer;                             // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_451[0x7];                                      // 0x0451(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Mouth_Interactive_Variable;                        // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mouth_Open_Interactive_Speed;                      // 0x0460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mouth_DistanceToOpen;                              // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Mouth_Looping_Variable;                            // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Mouth_Animates_Intermittently;                     // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowSpline;                                        // 0x0479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47A[0x6];                                      // 0x047A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material_Skin;                                     // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_Smoothing_Speed;                          // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation_Smoothing_Speed;                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        RandomFloat;                                       // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceForTick;                                   // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        PreviousSoundOnHit;                                // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Whale_Noises;                                      // 0x04B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Toggle_LookAt_Spheres();
	void Timeline_Mouth_Animation__UpdateFunc();
	void Timeline_Mouth_Animation__FinishedFunc();
	void Speed_Variations__UpdateFunc();
	void Speed_Variations__FinishedFunc();
	void Set_Meshes_initial_Transform();
	void Set_Mesh_to_Distance_along_Spline();
	void Set_LookAt_Front_s_initial_Position();
	void Set_Lookat_Positions();
	void Set_Initial_Speed();
	void Rotate_Bones_to_LookAt_Objects();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Play_Dynamic_Animations();
	void OnNotifyEnd_E5FFE8684B6F98FDC5BEA6A84C4994C3(class FName NotifyName);
	void OnNotifyBegin_E5FFE8684B6F98FDC5BEA6A84C4994C3(class FName NotifyName);
	void OnInterrupted_E5FFE8684B6F98FDC5BEA6A84C4994C3(class FName NotifyName);
	void OnCompleted_E5FFE8684B6F98FDC5BEA6A84C4994C3(class FName NotifyName);
	void OnBlendOut_E5FFE8684B6F98FDC5BEA6A84C4994C3(class FName NotifyName);
	void IsFreeAimTargetDisabled(bool* IsDisabled);
	void Interpolate_Dynamic_Speed_Variables();
	void FreeAimHit(class ABP_jRPG_Character_World_C* PlayerCharacterWorld, const struct FVector& HitLocation, bool IsDisabled);
	void ExecuteUbergraph_BP_BlueWhale_Spline(int32 EntryPoint);
	void Calculate_LookatBack_CurrentDistance();
	void Animate_Mouth_Variable_Near_Player();
	void Animate_Mouth();
	void Animate_LookAt_Objects();
	void Animate_LookAt_Front_Variable();
	void Animate_LookAt_Back_Variable();
	void Animate_Distance_Variable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlueWhale_Spline_C">();
	}
	static class ABP_BlueWhale_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BlueWhale_Spline_C>();
	}
};
static_assert(alignof(ABP_BlueWhale_Spline_C) == 0x000008, "Wrong alignment on ABP_BlueWhale_Spline_C");
static_assert(sizeof(ABP_BlueWhale_Spline_C) == 0x0004B8, "Wrong size on ABP_BlueWhale_Spline_C");
static_assert(offsetof(ABP_BlueWhale_Spline_C, UberGraphFrame) == 0x000290, "Member 'ABP_BlueWhale_Spline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Whale_Sounds) == 0x000298, "Member 'ABP_BlueWhale_Spline_C::Whale_Sounds' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere5) == 0x0002A0, "Member 'ABP_BlueWhale_Spline_C::Sphere5' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere4) == 0x0002A8, "Member 'ABP_BlueWhale_Spline_C::Sphere4' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere3) == 0x0002B0, "Member 'ABP_BlueWhale_Spline_C::Sphere3' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere2) == 0x0002B8, "Member 'ABP_BlueWhale_Spline_C::Sphere2' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Capsule) == 0x0002C0, "Member 'ABP_BlueWhale_Spline_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere1) == 0x0002C8, "Member 'ABP_BlueWhale_Spline_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Whale) == 0x0002D0, "Member 'ABP_BlueWhale_Spline_C::Whale' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Whale_Transform) == 0x0002D8, "Member 'ABP_BlueWhale_Spline_C::Whale_Transform' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, ReferenceAnim) == 0x0002E0, "Member 'ABP_BlueWhale_Spline_C::ReferenceAnim' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere_Back) == 0x0002E8, "Member 'ABP_BlueWhale_Spline_C::Sphere_Back' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, LookAt_Back) == 0x0002F0, "Member 'ABP_BlueWhale_Spline_C::LookAt_Back' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Sphere_Front) == 0x0002F8, "Member 'ABP_BlueWhale_Spline_C::Sphere_Front' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, LookAt_Front) == 0x000300, "Member 'ABP_BlueWhale_Spline_C::LookAt_Front' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Spline) == 0x000308, "Member 'ABP_BlueWhale_Spline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DefaultSceneRoot) == 0x000310, "Member 'ABP_BlueWhale_Spline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Timeline_Mouth_Animation_Mouth_BC05A2F84EE81EF126FB518BF2B3DDF3) == 0x000318, "Member 'ABP_BlueWhale_Spline_C::Timeline_Mouth_Animation_Mouth_BC05A2F84EE81EF126FB518BF2B3DDF3' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Timeline_Mouth_Animation__Direction_BC05A2F84EE81EF126FB518BF2B3DDF3) == 0x00031C, "Member 'ABP_BlueWhale_Spline_C::Timeline_Mouth_Animation__Direction_BC05A2F84EE81EF126FB518BF2B3DDF3' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Timeline_Mouth_Animation) == 0x000320, "Member 'ABP_BlueWhale_Spline_C::Timeline_Mouth_Animation' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Speed_Variations__Direction_F0F54BBD4877A2AA6C9B87B6C4BEAB66) == 0x000328, "Member 'ABP_BlueWhale_Spline_C::Speed_Variations__Direction_F0F54BBD4877A2AA6C9B87B6C4BEAB66' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Speed_Variations) == 0x000330, "Member 'ABP_BlueWhale_Spline_C::Speed_Variations' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Distance) == 0x000338, "Member 'ABP_BlueWhale_Spline_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Lookat_Front_CurrentDistance) == 0x000340, "Member 'ABP_BlueWhale_Spline_C::Lookat_Front_CurrentDistance' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Lookat_Back_CurrentDistance) == 0x000348, "Member 'ABP_BlueWhale_Spline_C::Lookat_Back_CurrentDistance' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Lookat_Front_Offset) == 0x000350, "Member 'ABP_BlueWhale_Spline_C::Lookat_Front_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Lookat_Back_Offset) == 0x000358, "Member 'ABP_BlueWhale_Spline_C::Lookat_Back_Offset' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, ShowLookatSpheres) == 0x000360, "Member 'ABP_BlueWhale_Spline_C::ShowLookatSpheres' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, MovementSpeed_Spline) == 0x000368, "Member 'ABP_BlueWhale_Spline_C::MovementSpeed_Spline' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, AnimPlayRate_Min) == 0x000370, "Member 'ABP_BlueWhale_Spline_C::AnimPlayRate_Min' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Scale) == 0x000378, "Member 'ABP_BlueWhale_Spline_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicSpeed_SpeedingUp_) == 0x000380, "Member 'ABP_BlueWhale_Spline_C::DynamicSpeed_SpeedingUp_' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicSpeed_Desired_Speed) == 0x000388, "Member 'ABP_BlueWhale_Spline_C::DynamicSpeed_Desired_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Desired_BlendSpace) == 0x000390, "Member 'ABP_BlueWhale_Spline_C::Desired_BlendSpace' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicAnim_Fast_Length) == 0x000398, "Member 'ABP_BlueWhale_Spline_C::DynamicAnim_Fast_Length' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicAnim_Randomness) == 0x0003A0, "Member 'ABP_BlueWhale_Spline_C::DynamicAnim_Randomness' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicAnim_Slow_Length) == 0x0003A8, "Member 'ABP_BlueWhale_Spline_C::DynamicAnim_Slow_Length' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Dynamic_Speed) == 0x0003B0, "Member 'ABP_BlueWhale_Spline_C::Dynamic_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, AnimPlayRate_Max) == 0x0003B8, "Member 'ABP_BlueWhale_Spline_C::AnimPlayRate_Max' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicSpeed_Speed) == 0x0003C0, "Member 'ABP_BlueWhale_Spline_C::DynamicSpeed_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicSpeed_Acceleration) == 0x0003C8, "Member 'ABP_BlueWhale_Spline_C::DynamicSpeed_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, BlendSpace) == 0x0003D0, "Member 'ABP_BlueWhale_Spline_C::BlendSpace' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DynamicSpeed_Deceleration) == 0x0003D8, "Member 'ABP_BlueWhale_Spline_C::DynamicSpeed_Deceleration' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, MovementSpeed_Min) == 0x0003E0, "Member 'ABP_BlueWhale_Spline_C::MovementSpeed_Min' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, MovementSpeed_Max) == 0x0003E8, "Member 'ABP_BlueWhale_Spline_C::MovementSpeed_Max' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, BlendSpace_Acceleration) == 0x0003F0, "Member 'ABP_BlueWhale_Spline_C::BlendSpace_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, BlendSpace_Decelaration) == 0x0003F8, "Member 'ABP_BlueWhale_Spline_C::BlendSpace_Decelaration' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Non_Dynamic_AnimPlayRate) == 0x000400, "Member 'ABP_BlueWhale_Spline_C::Non_Dynamic_AnimPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Non_Dynamic_MovementSpeed) == 0x000408, "Member 'ABP_BlueWhale_Spline_C::Non_Dynamic_MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Non_Dynamic_Anim_Intensity) == 0x000410, "Member 'ABP_BlueWhale_Spline_C::Non_Dynamic_Anim_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Pitch) == 0x000418, "Member 'ABP_BlueWhale_Spline_C::Pitch' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, TurningAngle) == 0x000420, "Member 'ABP_BlueWhale_Spline_C::TurningAngle' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Roll_Rotation_Intensity) == 0x000428, "Member 'ABP_BlueWhale_Spline_C::Roll_Rotation_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Roll_Smoothing_Speed) == 0x000430, "Member 'ABP_BlueWhale_Spline_C::Roll_Smoothing_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, TurningAngle_Bones) == 0x000438, "Member 'ABP_BlueWhale_Spline_C::TurningAngle_Bones' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Whale_AnimBP) == 0x000440, "Member 'ABP_BlueWhale_Spline_C::Whale_AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Reference_AnimBP) == 0x000448, "Member 'ABP_BlueWhale_Spline_C::Reference_AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Mouth_OpensNearPlayer) == 0x000450, "Member 'ABP_BlueWhale_Spline_C::Mouth_OpensNearPlayer' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Mouth_Interactive_Variable) == 0x000458, "Member 'ABP_BlueWhale_Spline_C::Mouth_Interactive_Variable' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Mouth_Open_Interactive_Speed) == 0x000460, "Member 'ABP_BlueWhale_Spline_C::Mouth_Open_Interactive_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Mouth_DistanceToOpen) == 0x000468, "Member 'ABP_BlueWhale_Spline_C::Mouth_DistanceToOpen' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Mouth_Looping_Variable) == 0x000470, "Member 'ABP_BlueWhale_Spline_C::Mouth_Looping_Variable' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Mouth_Animates_Intermittently) == 0x000478, "Member 'ABP_BlueWhale_Spline_C::Mouth_Animates_Intermittently' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, ShowSpline) == 0x000479, "Member 'ABP_BlueWhale_Spline_C::ShowSpline' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Material_Skin) == 0x000480, "Member 'ABP_BlueWhale_Spline_C::Material_Skin' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Movement_Smoothing_Speed) == 0x000488, "Member 'ABP_BlueWhale_Spline_C::Movement_Smoothing_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Rotation_Smoothing_Speed) == 0x000490, "Member 'ABP_BlueWhale_Spline_C::Rotation_Smoothing_Speed' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, RandomFloat) == 0x000498, "Member 'ABP_BlueWhale_Spline_C::RandomFloat' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, DistanceForTick) == 0x0004A0, "Member 'ABP_BlueWhale_Spline_C::DistanceForTick' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, PreviousSoundOnHit) == 0x0004A8, "Member 'ABP_BlueWhale_Spline_C::PreviousSoundOnHit' has a wrong offset!");
static_assert(offsetof(ABP_BlueWhale_Spline_C, Whale_Noises) == 0x0004B0, "Member 'ABP_BlueWhale_Spline_C::Whale_Noises' has a wrong offset!");

}

