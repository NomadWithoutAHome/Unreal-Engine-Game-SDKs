#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LevelAmbienceAreaManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LevelAmbienceAreaManager.BP_LevelAmbienceAreaManager_C
// 0x0040 (0x00E0 - 0x00A0)
class UBP_LevelAmbienceAreaManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_LevelAmbienceArea_C*>        LevelAmbienceAreas;                                // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_LevelAmbienceArea_C*                LastLevelAmbienceAreaForLighting;                  // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_LevelAmbienceArea_C*                LastLevelAmbienceAreaForAudio;                     // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 LastMovementMode;                                  // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_LevelAmbienceArea_C* A, class ABP_LevelAmbienceArea_C* B, class UOrderingResult* Result)> Dummy_CompareLevelAmbienceArea; // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void CanActivateLevelAmbienceArea(class ABP_LevelAmbienceArea_C* LevelAmbienceArea, bool* CanActivate);
	void CanUseLevelAmbienceAreaForAudio(class ABP_LevelAmbienceArea_C* LevelAmbienceArea, bool* CanUse);
	void CanUseLevelAmbienceAreaForLighting(class ABP_LevelAmbienceArea_C* LevelAmbienceArea, bool* CanUse);
	void CompareLevelAmbienceArea(class ABP_LevelAmbienceArea_C* A, class ABP_LevelAmbienceArea_C* B, class UOrderingResult* Result);
	class FString DEBUG_ComputeDebugString();
	void DEBUG_DisplayDebugStringIfNeeded(class FName Name_0);
	void EvaluateLevelAmbienceAreas();
	void ExecuteUbergraph_BP_LevelAmbienceAreaManager(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RegisterLevelAmbienceArea(class ABP_LevelAmbienceArea_C* LevelAmbienceArea);
	void SortLevelAmbienceAreas();
	void TryProcessLevelAmbienceAreaForAudio(class ABP_LevelAmbienceArea_C* LevelAmbienceArea, bool* HasAppliedAudio);
	void TryProcessLevelAmbienceAreaForLighting(class ABP_LevelAmbienceArea_C* LevelAmbienceArea, bool* HasAppliedLighting);
	void UnregisterLevelAmbienceArea(class ABP_LevelAmbienceArea_C* LevelAmbienceArea);
	void UpdateLastMovementMode(bool* ShouldEvaluate);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LevelAmbienceAreaManager_C">();
	}
	static class UBP_LevelAmbienceAreaManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LevelAmbienceAreaManager_C>();
	}
};
static_assert(alignof(UBP_LevelAmbienceAreaManager_C) == 0x000008, "Wrong alignment on UBP_LevelAmbienceAreaManager_C");
static_assert(sizeof(UBP_LevelAmbienceAreaManager_C) == 0x0000E0, "Wrong size on UBP_LevelAmbienceAreaManager_C");
static_assert(offsetof(UBP_LevelAmbienceAreaManager_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_LevelAmbienceAreaManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LevelAmbienceAreaManager_C, LevelAmbienceAreas) == 0x0000A8, "Member 'UBP_LevelAmbienceAreaManager_C::LevelAmbienceAreas' has a wrong offset!");
static_assert(offsetof(UBP_LevelAmbienceAreaManager_C, LastLevelAmbienceAreaForLighting) == 0x0000B8, "Member 'UBP_LevelAmbienceAreaManager_C::LastLevelAmbienceAreaForLighting' has a wrong offset!");
static_assert(offsetof(UBP_LevelAmbienceAreaManager_C, LastLevelAmbienceAreaForAudio) == 0x0000C0, "Member 'UBP_LevelAmbienceAreaManager_C::LastLevelAmbienceAreaForAudio' has a wrong offset!");
static_assert(offsetof(UBP_LevelAmbienceAreaManager_C, LastMovementMode) == 0x0000C8, "Member 'UBP_LevelAmbienceAreaManager_C::LastMovementMode' has a wrong offset!");
static_assert(offsetof(UBP_LevelAmbienceAreaManager_C, Dummy_CompareLevelAmbienceArea) == 0x0000D0, "Member 'UBP_LevelAmbienceAreaManager_C::Dummy_CompareLevelAmbienceArea' has a wrong offset!");

}

