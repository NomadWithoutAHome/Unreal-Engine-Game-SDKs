#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ClimbingComponent

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Climbing_Direction_structs.hpp"
#include "E_ClimbingComponentState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ClimbingComponent.BP_ClimbingComponent_C
// 0x01A8 (0x0248 - 0x00A0)
class UBP_ClimbingComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void()>              OnStartClimbing;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnEndClimbing;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_jRPG_Character_World_C*             OwnerAsCharacter;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CharacterMovement;                                 // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FVector                                BeginLocation;                                     // 0x00D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               BeginRotation;                                     // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                EndLocation;                                       // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EndRotation;                                       // 0x0120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	TScriptInterface<class IBPI_ClimbingElement_C> CurrentClimbingElement;                           // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ClimbingElement_C> NextClimbingElement;                              // 0x0148(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToNextClimbingElement;                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentClimbingLocation;                           // 0x0160(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CurrentClimbingRotation;                           // 0x0178(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        ClimbingSpeed;                                     // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnteringClimbingTransitionCurve;                   // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_Climbing_Direction                          CurrentClimbingDirection;                          // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_ClimbingComponentState                      CurrentState;                                      // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A2[0x6];                                      // 0x01A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TimeToPerformStateChange;                          // 0x01A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AccumulatedDeltaTime;                              // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MoveToNextClimbingZoneCurve;                       // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            ExitingClimbingTransitionCurve;                    // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TimeToPerformMoveFromAnimation;                    // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsWaitingForAnimation;                             // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x7];                                      // 0x01D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SpringArmTargetArmLength;                          // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpringArmCameraLagMaxDistance;                     // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LeftFootRaycastLocation;                           // 0x01E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RightFootRaycastLocation;                          // 0x0200(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasDoneEndClimbAnimation;                          // 0x0218(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_IsDebugEnabled;                              // 0x0219(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounterHandle             InteractionsBlockerReferenceHandle;                // 0x0220(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   AggroLockName;                                     // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void CameraShake();
	void CanUseClimbingElement(bool* CanClimb);
	void ChangeState(E_ClimbingComponentState NewState);
	void CheckExitingClimbing();
	void CheckNextHold();
	void ComputeAlpha(double Time, class UCurveFloat* Curve, double* Alpha);
	void ComputeClimbingAngle(double* Angle);
	void ComputeClimbingDirection();
	void ComputeClimbingLocation(double DeltaSeconds);
	void ComputeFootRaycast(class FName SocketName, bool* HasHit, struct FVector* Location);
	void ComputeFootRaycasts();
	void ComputeInputDirections(struct FVector* InputDirectionHorizontal, struct FVector* InputDirectionVertical, double* InputScale);
	void ComputeTime(double DeltaSeconds, double MaxTime, double* Time);
	void DEBUG_OnDebugModeEnabled(bool Enabled);
	void DEBUG_UpdateClimbingComponent(double DeltaSeconds);
	void ExecuteUbergraph_BP_ClimbingComponent(int32 EntryPoint);
	struct FVector GetCharacterHandsLocation();
	struct FVector GetCharacterHandsOffset();
	void GetClimbingDirection(E_Climbing_Direction* ClimbingDirection);
	void GetClimbingDirectionFromAngle(double Angle, E_Climbing_Direction* ClimbingDirection);
	void GetClimbingState(E_ClimbingComponentState* ClimbingState);
	struct FTransform GetCurrentClimbingElementTransform();
	void GetDistanceToNextClimbingElement(double* Value);
	void GetFootRaycasts(struct FVector* LeftFootRaycastLocation_0, struct FVector* RightFootRaycastLocation_0);
	void GetTimeToPerformStateChange(double* Value);
	void InitializeClimbingComponent();
	void InitializeDebug();
	void InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InputAxisClimbingRight(double AxisValue);
	void InputAxisClimbingUp(double AxisValue);
	bool IsClimbing();
	bool IsMovingToTop();
	void LerpLocationAndRotation(double Time, class UCurveFloat* Curve, double* Alpha, struct FVector* Location, struct FRotator* Rotation);
	void LerpLocationAndRotationForEntry(double Time, class UCurveFloat* Curve, double* Alpha, struct FVector* Location, struct FRotator* Rotation);
	void LerpLocationAndRotationForExit(double Time, class UCurveFloat* Curve, double* Alpha, struct FVector* Location, struct FRotator* Rotation);
	void OnClimbingAnimationInterrupted();
	void OnClimbingJumpMovementEnd();
	void OnClimbingJumpMovementStart(double TotalDuration);
	void OnClimbingMovementDone();
	void OnStartClimbAnimationDone();
	void PrepareCharacterForClimbing();
	void PrepareCharacterForWalking();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetCharacterCollisions(ECollisionResponse NewResponse);
	void SetDataForEnterTransition();
	void SetDataForExitTransition(const struct FVector& Location, const struct FRotator& Rotation);
	void SetDataForMove(TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement);
	void StartClimbing(TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement);
	void StopClimbing();
	void UpdateClimbingComponent(double DeltaSeconds);
	void UpdateClimbingMovement();
	void UpdateEndLocationWithHandsOffset(TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement);
	void UpdateEnteringTransition(double DeltaSeconds);
	void UpdateExitingTransition(double DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ClimbingComponent_C">();
	}
	static class UBP_ClimbingComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ClimbingComponent_C>();
	}
};
static_assert(alignof(UBP_ClimbingComponent_C) == 0x000008, "Wrong alignment on UBP_ClimbingComponent_C");
static_assert(sizeof(UBP_ClimbingComponent_C) == 0x000248, "Wrong size on UBP_ClimbingComponent_C");
static_assert(offsetof(UBP_ClimbingComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_ClimbingComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, OnStartClimbing) == 0x0000A8, "Member 'UBP_ClimbingComponent_C::OnStartClimbing' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, OnEndClimbing) == 0x0000B8, "Member 'UBP_ClimbingComponent_C::OnEndClimbing' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, OwnerAsCharacter) == 0x0000C8, "Member 'UBP_ClimbingComponent_C::OwnerAsCharacter' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, CharacterMovement) == 0x0000D0, "Member 'UBP_ClimbingComponent_C::CharacterMovement' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, BeginLocation) == 0x0000D8, "Member 'UBP_ClimbingComponent_C::BeginLocation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, BeginRotation) == 0x0000F0, "Member 'UBP_ClimbingComponent_C::BeginRotation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, EndLocation) == 0x000108, "Member 'UBP_ClimbingComponent_C::EndLocation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, EndRotation) == 0x000120, "Member 'UBP_ClimbingComponent_C::EndRotation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, CurrentClimbingElement) == 0x000138, "Member 'UBP_ClimbingComponent_C::CurrentClimbingElement' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, NextClimbingElement) == 0x000148, "Member 'UBP_ClimbingComponent_C::NextClimbingElement' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, DistanceToNextClimbingElement) == 0x000158, "Member 'UBP_ClimbingComponent_C::DistanceToNextClimbingElement' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, CurrentClimbingLocation) == 0x000160, "Member 'UBP_ClimbingComponent_C::CurrentClimbingLocation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, CurrentClimbingRotation) == 0x000178, "Member 'UBP_ClimbingComponent_C::CurrentClimbingRotation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, ClimbingSpeed) == 0x000190, "Member 'UBP_ClimbingComponent_C::ClimbingSpeed' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, EnteringClimbingTransitionCurve) == 0x000198, "Member 'UBP_ClimbingComponent_C::EnteringClimbingTransitionCurve' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, CurrentClimbingDirection) == 0x0001A0, "Member 'UBP_ClimbingComponent_C::CurrentClimbingDirection' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, CurrentState) == 0x0001A1, "Member 'UBP_ClimbingComponent_C::CurrentState' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, TimeToPerformStateChange) == 0x0001A8, "Member 'UBP_ClimbingComponent_C::TimeToPerformStateChange' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, AccumulatedDeltaTime) == 0x0001B0, "Member 'UBP_ClimbingComponent_C::AccumulatedDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, MoveToNextClimbingZoneCurve) == 0x0001B8, "Member 'UBP_ClimbingComponent_C::MoveToNextClimbingZoneCurve' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, ExitingClimbingTransitionCurve) == 0x0001C0, "Member 'UBP_ClimbingComponent_C::ExitingClimbingTransitionCurve' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, TimeToPerformMoveFromAnimation) == 0x0001C8, "Member 'UBP_ClimbingComponent_C::TimeToPerformMoveFromAnimation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, IsWaitingForAnimation) == 0x0001D0, "Member 'UBP_ClimbingComponent_C::IsWaitingForAnimation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, SpringArmTargetArmLength) == 0x0001D8, "Member 'UBP_ClimbingComponent_C::SpringArmTargetArmLength' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, SpringArmCameraLagMaxDistance) == 0x0001E0, "Member 'UBP_ClimbingComponent_C::SpringArmCameraLagMaxDistance' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, LeftFootRaycastLocation) == 0x0001E8, "Member 'UBP_ClimbingComponent_C::LeftFootRaycastLocation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, RightFootRaycastLocation) == 0x000200, "Member 'UBP_ClimbingComponent_C::RightFootRaycastLocation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, HasDoneEndClimbAnimation) == 0x000218, "Member 'UBP_ClimbingComponent_C::HasDoneEndClimbAnimation' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, DEBUG_IsDebugEnabled) == 0x000219, "Member 'UBP_ClimbingComponent_C::DEBUG_IsDebugEnabled' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, InteractionsBlockerReferenceHandle) == 0x000220, "Member 'UBP_ClimbingComponent_C::InteractionsBlockerReferenceHandle' has a wrong offset!");
static_assert(offsetof(UBP_ClimbingComponent_C, AggroLockName) == 0x000240, "Member 'UBP_ClimbingComponent_C::AggroLockName' has a wrong offset!");

}

