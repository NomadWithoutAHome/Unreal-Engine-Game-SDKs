#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ExplorationProgressionSystem

#include "Basic.hpp"

#include "E_ExplorationCapacity_structs.hpp"
#include "E_WorldMapExplorationCapacity_structs.hpp"
#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ExplorationProgressionSystem.BP_ExplorationProgressionSystem_C
// 0x0080 (0x00A8 - 0x0028)
class UBP_ExplorationProgressionSystem_C final : public UExtendedObject
{
public:
	TArray<E_ExplorationCapacity>                 UnlockedExplorationCapacities;                     // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         FreeAimDamageLevel;                                // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFreeAimTeleportUnlocked;                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 NewLevel)> OnFreeAimDamageLevelUnlocked;                     // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<E_WorldMapExplorationCapacity>         UnlockedWorldMapCapacities;                        // 0x0060(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(E_WorldMapExplorationCapacity WorldMapCapacity)> OnWorldMapCapacityUnlocked; // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnyWorldMapCapacityUnlocked;                     // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          ShouldDispatchModifications;                       // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAnyExplorationCapacityUnlocked;                  // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void DEBUG_LoadCVar_DamageLevel(const class FString& InputPin);
	void DEBUG_LoadCVar_UnlockedWorldMapCapacities(const class FString& SourceString);
	void DEBUG_LoadCVars();
	void DEBUG_OnCVarChanged_AttackInWorld(bool NewValue);
	void DEBUG_OnCVarChanged_Camp(bool NewValue);
	void DEBUG_OnCVarChanged_DamageLevel(const class FString& NewValue);
	void DEBUG_OnCVarChanged_FreeAim(bool NewValue);
	void DEBUG_OnCVarChanged_GameMenu(bool NewValue);
	void DEBUG_OnCVarChanged_Overlay(bool NewValue);
	void DEBUG_OnCVarChanged_Teleport(bool NewValue);
	void DEBUG_UnlockExplorationCapacity(E_ExplorationCapacity Capacity, bool Unlocked);
	void DEBUG_UnlockFreeAimDamageLevel(int32 DamageLevel);
	void GetFreeAimDamageLevel(int32* FreeAimDamageLevel_0);
	void GetUnlockedExplorationCapacities(TArray<E_ExplorationCapacity>* UnlockedExplorationCapacities_0);
	void GetUnlockedWorldMapCapacities(TArray<E_WorldMapExplorationCapacity>* UnlockedWorldMapCapacities_0);
	void Initialize();
	void IsExplorationCapacityUnlocked(E_ExplorationCapacity Capacity, bool* IsUnlocked);
	void IsFreeAimTeleportUnlocked(bool* FreeAimTeleportUnlocked);
	void IsWorldMapCapacityUnlocked(E_WorldMapExplorationCapacity Capacity, bool* IsUnlocked);
	void LoadState(const struct FFExplorationProgression_SaveState& State);
	void ResetState();
	void SaveState(struct FFExplorationProgression_SaveState& State);
	void SetExplorationCapacityUnlocked(E_ExplorationCapacity Capacity, bool Unlocked);
	void UnlockFreeAimDamageLevel(int32 DamageLevel);
	void UnlockFreeAimTeleport();
	void UnlockWorldMapCapacities(TArray<E_WorldMapExplorationCapacity>& Capacities);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ExplorationProgressionSystem_C">();
	}
	static class UBP_ExplorationProgressionSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ExplorationProgressionSystem_C>();
	}
};
static_assert(alignof(UBP_ExplorationProgressionSystem_C) == 0x000008, "Wrong alignment on UBP_ExplorationProgressionSystem_C");
static_assert(sizeof(UBP_ExplorationProgressionSystem_C) == 0x0000A8, "Wrong size on UBP_ExplorationProgressionSystem_C");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, UnlockedExplorationCapacities) == 0x000028, "Member 'UBP_ExplorationProgressionSystem_C::UnlockedExplorationCapacities' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, FreeAimDamageLevel) == 0x000038, "Member 'UBP_ExplorationProgressionSystem_C::FreeAimDamageLevel' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, OnFreeAimTeleportUnlocked) == 0x000040, "Member 'UBP_ExplorationProgressionSystem_C::OnFreeAimTeleportUnlocked' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, OnFreeAimDamageLevelUnlocked) == 0x000050, "Member 'UBP_ExplorationProgressionSystem_C::OnFreeAimDamageLevelUnlocked' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, UnlockedWorldMapCapacities) == 0x000060, "Member 'UBP_ExplorationProgressionSystem_C::UnlockedWorldMapCapacities' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, OnWorldMapCapacityUnlocked) == 0x000070, "Member 'UBP_ExplorationProgressionSystem_C::OnWorldMapCapacityUnlocked' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, OnAnyWorldMapCapacityUnlocked) == 0x000080, "Member 'UBP_ExplorationProgressionSystem_C::OnAnyWorldMapCapacityUnlocked' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, ShouldDispatchModifications) == 0x000090, "Member 'UBP_ExplorationProgressionSystem_C::ShouldDispatchModifications' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationProgressionSystem_C, OnAnyExplorationCapacityUnlocked) == 0x000098, "Member 'UBP_ExplorationProgressionSystem_C::OnAnyExplorationCapacityUnlocked' has a wrong offset!");

}

