#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EnemyGroup

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EnemyGroup.BP_EnemyGroup_C
// 0x0028 (0x02B8 - 0x0290)
class ABP_EnemyGroup_C final : public AActor
{
public:
	class UBP_Enemy_SerializableComponent_C*      BP_Enemy_SerializableComponent;                    // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ABP_jRPG_Enemy_World_Base_Seamless_C>> EnemyWorlds;                  // 0x02A8(0x0010)(Edit, BlueprintVisible)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void GetGlobalObjectID(class FName* ObjectId);
	void RefreshLinks();
	void UserConstructionScript();

	bool Editor_DrawDebugShapes() const;
	bool Editor_GetDebugShapes(TArray<struct FEditorDebugShape_Arrow>& Arrows, TArray<struct FEditorDebugShape_Arrow>& Lines) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EnemyGroup_C">();
	}
	static class ABP_EnemyGroup_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EnemyGroup_C>();
	}
};
static_assert(alignof(ABP_EnemyGroup_C) == 0x000008, "Wrong alignment on ABP_EnemyGroup_C");
static_assert(sizeof(ABP_EnemyGroup_C) == 0x0002B8, "Wrong size on ABP_EnemyGroup_C");
static_assert(offsetof(ABP_EnemyGroup_C, BP_Enemy_SerializableComponent) == 0x000290, "Member 'ABP_EnemyGroup_C::BP_Enemy_SerializableComponent' has a wrong offset!");
static_assert(offsetof(ABP_EnemyGroup_C, Billboard) == 0x000298, "Member 'ABP_EnemyGroup_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_EnemyGroup_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_EnemyGroup_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EnemyGroup_C, EnemyWorlds) == 0x0002A8, "Member 'ABP_EnemyGroup_C::EnemyWorlds' has a wrong offset!");

}

