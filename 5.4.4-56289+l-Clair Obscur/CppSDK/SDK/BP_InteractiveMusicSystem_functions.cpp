#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractiveMusicSystem

#include "Basic.hpp"

#include "BP_InteractiveMusicSystem_classes.hpp"
#include "BP_InteractiveMusicSystem_parameters.hpp"


namespace SDK
{

// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.AdjustVolumeByContext
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AdjustVolumeDuration                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AdjustVolumeLevel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::AdjustVolumeByContext(float AdjustVolumeDuration, float AdjustVolumeLevel, E_InteractiveMusicContext Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "AdjustVolumeByContext");

	Params::BP_InteractiveMusicSystem_C_AdjustVolumeByContext Parms{};

	Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	Parms.AdjustVolumeLevel = AdjustVolumeLevel;
	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.AdjustVolumeCurrentContext
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AdjustVolumeDuration                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AdjustVolumeLevel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::AdjustVolumeCurrentContext(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "AdjustVolumeCurrentContext");

	Params::BP_InteractiveMusicSystem_C_AdjustVolumeCurrentContext Parms{};

	Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.AdjustVolumeInteractiveMusicByContext
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InteractiveMusicContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AdjustVolumeDuration                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AdjustVolumeLevel                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::AdjustVolumeInteractiveMusicByContext(const E_InteractiveMusicContext& Context, float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "AdjustVolumeInteractiveMusicByContext");

	Params::BP_InteractiveMusicSystem_C_AdjustVolumeInteractiveMusicByContext Parms{};

	Parms.Context = Context;
	Parms.AdjustVolumeDuration = AdjustVolumeDuration;
	Parms.AdjustVolumeLevel = AdjustVolumeLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ApplyInteractiveMusicParameters
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_InteractiveMusicParameters&Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ApplyInteractiveMusicParameters(const struct FS_InteractiveMusicParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ApplyInteractiveMusicParameters");

	Params::BP_InteractiveMusicSystem_C_ApplyInteractiveMusicParameters Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ComputeCurrentInteractiveMusicParameters
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_InteractiveMusicParameters*   InteractiveMusicParameters                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ComputeCurrentInteractiveMusicParameters(struct FS_InteractiveMusicParameters* InteractiveMusicParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ComputeCurrentInteractiveMusicParameters");

	Params::BP_InteractiveMusicSystem_C_ComputeCurrentInteractiveMusicParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InteractiveMusicParameters != nullptr)
		*InteractiveMusicParameters = std::move(Parms.InteractiveMusicParameters);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.Create New Audio Component
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAudioComponent**                 SpawnedComponent                                       (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::Create_New_Audio_Component(class USoundBase* Sound, class UAudioComponent** SpawnedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "Create New Audio Component");

	Params::BP_InteractiveMusicSystem_C_Create_New_Audio_Component Parms{};

	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedComponent != nullptr)
		*SpawnedComponent = Parms.SpawnedComponent;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.CreateInteractiveMusicWithContextIfNeeded
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase*                       Sound                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FS_InteractiveMusic*             InteractiveMusic                                       (Parm, OutParm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::CreateInteractiveMusicWithContextIfNeeded(E_InteractiveMusicContext Context, class USoundBase* Sound, struct FS_InteractiveMusic* InteractiveMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "CreateInteractiveMusicWithContextIfNeeded");

	Params::BP_InteractiveMusicSystem_C_CreateInteractiveMusicWithContextIfNeeded Parms{};

	Parms.Context = Context;
	Parms.Sound = Sound;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractiveMusic != nullptr)
		*InteractiveMusic = std::move(Parms.InteractiveMusic);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.DestroyAllInteractiveMusicContexts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::DestroyAllInteractiveMusicContexts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "DestroyAllInteractiveMusicContexts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ExecuteAudioTriggerByContext
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InteractiveMusicContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AudioTrigger                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsInterruption                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ExecuteAudioTriggerByContext(const E_InteractiveMusicContext& Context, class FName AudioTrigger, bool IsInterruption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ExecuteAudioTriggerByContext");

	Params::BP_InteractiveMusicSystem_C_ExecuteAudioTriggerByContext Parms{};

	Parms.Context = Context;
	Parms.AudioTrigger = AudioTrigger;
	Parms.IsInterruption = IsInterruption;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ExecuteUbergraph_BP_InteractiveMusicSystem
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ExecuteUbergraph_BP_InteractiveMusicSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ExecuteUbergraph_BP_InteractiveMusicSystem");

	Params::BP_InteractiveMusicSystem_C_ExecuteUbergraph_BP_InteractiveMusicSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.FadeOutInteractiveMusicByContext
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InteractiveMusicContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   AdjustVolumeDuration                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::FadeOutInteractiveMusicByContext(const E_InteractiveMusicContext& Context, float AdjustVolumeDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "FadeOutInteractiveMusicByContext");

	Params::BP_InteractiveMusicSystem_C_FadeOutInteractiveMusicByContext Parms{};

	Parms.Context = Context;
	Parms.AdjustVolumeDuration = AdjustVolumeDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetAudioComponentDebugString
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAudioComponent*                  AudioComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_InteractiveMusicSystem_C::GetAudioComponentDebugString(class UAudioComponent* AudioComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetAudioComponentDebugString");

	Params::BP_InteractiveMusicSystem_C_GetAudioComponentDebugString Parms{};

	Parms.AudioComponent = AudioComponent;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetAudioTriggerNameForContextAndTable
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UDataTable*                       DataTable                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            AudioTriggerName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetAudioTriggerNameForContextAndTable(class UDataTable* DataTable, E_InteractiveMusicContext Context, class FName* AudioTriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetAudioTriggerNameForContextAndTable");

	Params::BP_InteractiveMusicSystem_C_GetAudioTriggerNameForContextAndTable Parms{};

	Parms.DataTable = DataTable;
	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	if (AudioTriggerName != nullptr)
		*AudioTriggerName = Parms.AudioTriggerName;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetAudioTriggerNameWhenInterrupted
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               NewContext                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            AudioTriggerName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetAudioTriggerNameWhenInterrupted(E_InteractiveMusicContext NewContext, class FName* AudioTriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetAudioTriggerNameWhenInterrupted");

	Params::BP_InteractiveMusicSystem_C_GetAudioTriggerNameWhenInterrupted Parms{};

	Parms.NewContext = NewContext;

	UObject::ProcessEvent(Func, &Parms);

	if (AudioTriggerName != nullptr)
		*AudioTriggerName = Parms.AudioTriggerName;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetAudioTriggerNameWhenInterrupting
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               CurrentContext_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            AudioTriggerName                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetAudioTriggerNameWhenInterrupting(E_InteractiveMusicContext CurrentContext_0, class FName* AudioTriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetAudioTriggerNameWhenInterrupting");

	Params::BP_InteractiveMusicSystem_C_GetAudioTriggerNameWhenInterrupting Parms{};

	Parms.CurrentContext_0 = CurrentContext_0;

	UObject::ProcessEvent(Func, &Parms);

	if (AudioTriggerName != nullptr)
		*AudioTriggerName = Parms.AudioTriggerName;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetCurrentContext
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_InteractiveMusicContext*              Context                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetCurrentContext(E_InteractiveMusicContext* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetCurrentContext");

	Params::BP_InteractiveMusicSystem_C_GetCurrentContext Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Context != nullptr)
		*Context = Parms.Context;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetCurrentInteractiveMusic
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_InteractiveMusic*             InteractiveMusic                                       (Parm, OutParm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetCurrentInteractiveMusic(struct FS_InteractiveMusic* InteractiveMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetCurrentInteractiveMusic");

	Params::BP_InteractiveMusicSystem_C_GetCurrentInteractiveMusic Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InteractiveMusic != nullptr)
		*InteractiveMusic = std::move(Parms.InteractiveMusic);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetCurrentSoundData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_InteractiveMusicContext*              Context                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase**                      Sound                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class FName*                            LastAudioTrigger                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetCurrentSoundData(E_InteractiveMusicContext* Context, class USoundBase** Sound, class FName* LastAudioTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetCurrentSoundData");

	Params::BP_InteractiveMusicSystem_C_GetCurrentSoundData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Context != nullptr)
		*Context = Parms.Context;

	if (Sound != nullptr)
		*Sound = Parms.Sound;

	if (LastAudioTrigger != nullptr)
		*LastAudioTrigger = Parms.LastAudioTrigger;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetDebugString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString*                          String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetDebugString(class FString* String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetDebugString");

	Params::BP_InteractiveMusicSystem_C_GetDebugString Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetInteractiveMusicByContext
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const E_InteractiveMusicContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_InteractiveMusic*             InteractiveMusic                                       (Parm, OutParm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetInteractiveMusicByContext(const E_InteractiveMusicContext& Context, struct FS_InteractiveMusic* InteractiveMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetInteractiveMusicByContext");

	Params::BP_InteractiveMusicSystem_C_GetInteractiveMusicByContext Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	if (InteractiveMusic != nullptr)
		*InteractiveMusic = std::move(Parms.InteractiveMusic);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetInteractiveMusicDebugString
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_InteractiveMusicContext               InteractiveMusicContext                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FS_InteractiveMusic&       InteractiveMusic                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_InteractiveMusicSystem_C::GetInteractiveMusicDebugString(E_InteractiveMusicContext InteractiveMusicContext, const struct FS_InteractiveMusic& InteractiveMusic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetInteractiveMusicDebugString");

	Params::BP_InteractiveMusicSystem_C_GetInteractiveMusicDebugString Parms{};

	Parms.InteractiveMusicContext = InteractiveMusicContext;
	Parms.InteractiveMusic = std::move(InteractiveMusic);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetInteractiveMusicParametersDebugString
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FS_InteractiveMusicParameters&InteractiveMusicParameters                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_InteractiveMusicSystem_C::GetInteractiveMusicParametersDebugString(const struct FS_InteractiveMusicParameters& InteractiveMusicParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetInteractiveMusicParametersDebugString");

	Params::BP_InteractiveMusicSystem_C_GetInteractiveMusicParametersDebugString Parms{};

	Parms.InteractiveMusicParameters = std::move(InteractiveMusicParameters);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.GetSoundByContext
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const E_InteractiveMusicContext&        Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase**                      Sound                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// class FName*                            LastAudioTrigger                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::GetSoundByContext(const E_InteractiveMusicContext& Context, class USoundBase** Sound, class FName* LastAudioTrigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "GetSoundByContext");

	Params::BP_InteractiveMusicSystem_C_GetSoundByContext Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);

	if (Sound != nullptr)
		*Sound = Parms.Sound;

	if (LastAudioTrigger != nullptr)
		*LastAudioTrigger = Parms.LastAudioTrigger;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.Initialize
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.InterruptInteractiveMusic
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InteractiveMusicContext&        NewContext                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::InterruptInteractiveMusic(const E_InteractiveMusicContext& NewContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "InterruptInteractiveMusic");

	Params::BP_InteractiveMusicSystem_C_InterruptInteractiveMusic Parms{};

	Parms.NewContext = NewContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.MarkAudioComponentForUnspawn
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent*                  AudioComponent                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::MarkAudioComponentForUnspawn(class UAudioComponent* AudioComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "MarkAudioComponentForUnspawn");

	Params::BP_InteractiveMusicSystem_C_MarkAudioComponentForUnspawn Parms{};

	Parms.AudioComponent = AudioComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.OnAudioPlayStateChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAudioComponentPlayState                PlayState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::OnAudioPlayStateChanged(EAudioComponentPlayState PlayState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "OnAudioPlayStateChanged");

	Params::BP_InteractiveMusicSystem_C_OnAudioPlayStateChanged Parms{};

	Parms.PlayState = PlayState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.PauseInteractiveMusicCurrentContext
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::PauseInteractiveMusicCurrentContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "PauseInteractiveMusicCurrentContext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.PlayInteractiveMusicContext
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::PlayInteractiveMusicContext(E_InteractiveMusicContext Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "PlayInteractiveMusicContext");

	Params::BP_InteractiveMusicSystem_C_PlayInteractiveMusicContext Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.PrintAudioTriggerName
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             AudioTriggerName                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::PrintAudioTriggerName(E_InteractiveMusicContext Context, class FName AudioTriggerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "PrintAudioTriggerName");

	Params::BP_InteractiveMusicSystem_C_PrintAudioTriggerName Parms{};

	Parms.Context = Context;
	Parms.AudioTriggerName = AudioTriggerName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.PrintInteractiveMusicParameters
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_InteractiveMusicParameters&Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::PrintInteractiveMusicParameters(const struct FS_InteractiveMusicParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "PrintInteractiveMusicParameters");

	Params::BP_InteractiveMusicSystem_C_PrintInteractiveMusicParameters Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.PrintInteractiveMusicStringInLog
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    String                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::PrintInteractiveMusicStringInLog(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "PrintInteractiveMusicStringInLog");

	Params::BP_InteractiveMusicSystem_C_PrintInteractiveMusicStringInLog Parms{};

	Parms.String = std::move(String);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ProcessMusicInterruption
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               NewContext                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ProcessMusicInterruption(E_InteractiveMusicContext NewContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ProcessMusicInterruption");

	Params::BP_InteractiveMusicSystem_C_ProcessMusicInterruption Parms{};

	Parms.NewContext = NewContext;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.PushInteractiveMusicContext
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_InteractiveMusicParameters&InteractiveMusicParameters                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::PushInteractiveMusicContext(const struct FS_InteractiveMusicParameters& InteractiveMusicParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "PushInteractiveMusicContext");

	Params::BP_InteractiveMusicSystem_C_PushInteractiveMusicContext Parms{};

	Parms.InteractiveMusicParameters = std::move(InteractiveMusicParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ReplaceInteractiveMusicContext
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_InteractiveMusicParameters&Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ReplaceInteractiveMusicContext(const struct FS_InteractiveMusicParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ReplaceInteractiveMusicContext");

	Params::BP_InteractiveMusicSystem_C_ReplaceInteractiveMusicContext Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.RestoreExplorationCurrentInteractiveMusicContext
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::RestoreExplorationCurrentInteractiveMusicContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "RestoreExplorationCurrentInteractiveMusicContext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.RestorePreviousInteractiveMusicParameters
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::RestorePreviousInteractiveMusicParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "RestorePreviousInteractiveMusicParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ResumeInteractiveMusicSystemWithContext
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::ResumeInteractiveMusicSystemWithContext(E_InteractiveMusicContext Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ResumeInteractiveMusicSystemWithContext");

	Params::BP_InteractiveMusicSystem_C_ResumeInteractiveMusicSystemWithContext Parms{};

	Parms.Context = Context;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.SaveCurrentInteractiveMusicParameters
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::SaveCurrentInteractiveMusicParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "SaveCurrentInteractiveMusicParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.SaveExplorationCurrentInteractiveMusicContext
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::SaveExplorationCurrentInteractiveMusicContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "SaveExplorationCurrentInteractiveMusicContext");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.SetDebugDrawEnabled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::SetDebugDrawEnabled(bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "SetDebugDrawEnabled");

	Params::BP_InteractiveMusicSystem_C_SetDebugDrawEnabled Parms{};

	Parms.Enable = Enable;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.SetFloatParameterByContext
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const E_InteractiveMusicContext         Context                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             ParameterName                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::SetFloatParameterByContext(const E_InteractiveMusicContext Context, class FName ParameterName, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "SetFloatParameterByContext");

	Params::BP_InteractiveMusicSystem_C_SetFloatParameterByContext Parms{};

	Parms.Context = Context;
	Parms.ParameterName = ParameterName;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.SetInteractiveMusicPaused
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_InteractiveMusicContext               Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bPause                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::SetInteractiveMusicPaused(E_InteractiveMusicContext Context, bool bPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "SetInteractiveMusicPaused");

	Params::BP_InteractiveMusicSystem_C_SetInteractiveMusicPaused Parms{};

	Parms.Context = Context;
	Parms.bPause = bPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.ShouldPauseMusic
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const E_InteractiveMusicContext&        NewContext                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_InteractiveMusicSystem_C::ShouldPauseMusic(const E_InteractiveMusicContext& NewContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "ShouldPauseMusic");

	Params::BP_InteractiveMusicSystem_C_ShouldPauseMusic Parms{};

	Parms.NewContext = NewContext;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.StopInteractiveMusicSystem
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeOutDuration                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::StopInteractiveMusicSystem(float FadeOutDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "StopInteractiveMusicSystem");

	Params::BP_InteractiveMusicSystem_C_StopInteractiveMusicSystem Parms{};

	Parms.FadeOutDuration = FadeOutDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.SwitchInteractiveMusicContext
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_InteractiveMusicParameters&Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InteractiveMusicSystem_C::SwitchInteractiveMusicContext(const struct FS_InteractiveMusicParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "SwitchInteractiveMusicContext");

	Params::BP_InteractiveMusicSystem_C_SwitchInteractiveMusicContext Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C.UnpauseInteractiveMusicCurrentContext
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InteractiveMusicSystem_C::UnpauseInteractiveMusicCurrentContext()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InteractiveMusicSystem_C", "UnpauseInteractiveMusicCurrentContext");

	UObject::ProcessEvent(Func, nullptr);
}

}

