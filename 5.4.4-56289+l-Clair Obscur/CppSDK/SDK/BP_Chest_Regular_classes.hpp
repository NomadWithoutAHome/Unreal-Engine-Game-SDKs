#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Chest_Regular

#include "Basic.hpp"

#include "E_LD_Annotation_Chest_LevelLocation_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_ChestFeedbackParameters_structs.hpp"
#include "BP_jRPG_InteractionObject_Base_classes.hpp"
#include "E_LD_Annotation_Chest_RewardLevel_structs.hpp"
#include "E_jRPG_ItemType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Chest_Regular.BP_Chest_Regular_C
// 0x0170 (0x0460 - 0x02F0)
class ABP_Chest_Regular_C final : public ABP_jRPG_InteractionObject_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Chest_Regular_C;                 // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_FX_OptimizedPaintMesh;                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Loot;                                           // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Loot_Idle;                                      // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_Chest;                                          // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        LightIntensity;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ChestFeedbackParameters             DefaultChestFeedbackParameters;                    // 0x0328(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash)
	struct FLinearColor                           ColorWhenOpening;                                  // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UForceFeedbackEffect>    ForceFeedbackEffect;                               // 0x03A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TMap<class FName, int32>                      ItemsToLoot;                                       // 0x03C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FDataTableRowHandle                    ChestSetupHandle;                                  // 0x0418(0x0010)(Edit, BlueprintVisible, NoDestructor, ExposeOnSpawn)
	TArray<struct FLootTableReference>            LootTableReferences;                               // 0x0428(0x0010)(Edit, BlueprintVisible)
	double                                        RollChanceMultiplier;                              // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LD_Annotation_Chest_LevelLocation           ChestLocation;                                     // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LD_Annotation_Chest_RewardLevel             ChestRewardLevel;                                  // 0x0441(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_442[0x6];                                      // 0x0442(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    OverrideLootParameters;                            // 0x0448(0x0010)(Edit, BlueprintVisible, NoDestructor)
	bool                                          PlayInWorldDialogueOnLoot;                         // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddItemsFromChestToInventory();
	void CanInteractWithMount(bool* CanInteract);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void CompareItemTypesForFeedback(E_jRPG_ItemType Existing, E_jRPG_ItemType New, bool* IsBetter);
	void ComputeChestDominantItemType(E_jRPG_ItemType* ItemType);
	void ComputeChestLootContext(struct FS_LootContext* S_LootContext);
	void ComputeChestLootTableSections(TArray<struct FS_LootTableSection>* LootTableSections, double* RollChanceMultipler);
	int32 ComputeEncounterLevelOverride();
	void ComputePreviewChestItemType(E_jRPG_ItemType* ItemType);
	void ConstructInteractionPopUpText(class FText* PopUpText, class FText* Item_Description1, class UTexture2D** Item_Icon1, int32* Items_amount1);
	void ExecuteUbergraph_BP_Chest_Regular(int32 EntryPoint);
	bool FindDuplicateID();
	void GenerateObjectID();
	void GetInteractionPromptParams(struct FFPromptParams* PromptParams);
	int32 GetItemTypeScore(E_jRPG_ItemType ItemType);
	void GetSectionsFromLootTableReferences(TArray<struct FLootTableReference>& LootTableReferences_0, TArray<struct FS_LootTableSection>* LootTableSections);
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnLoaded_3A9C66874010891688933A9C2368EED3(class UObject* Loaded);
	void OnObjectInteractionStateLoaded(bool InteractionState);
	void PlayForceFeedback();
	void ReceiveBeginPlay();
	void RollChestItems(const struct FS_LootContext& LootContext, TMap<class FName, int32>* ItemsToLoot_0);
	void UpdateFeedbackParameters(const struct FS_ChestFeedbackParameters& ChestFeedbackParameters);
	void UpdateFeedbackParametersFromLoot();
	void UpdateVisuals();
	void UserConstructionScript();

	void GetInteractionLocation(struct FVector* Location) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Chest_Regular_C">();
	}
	static class ABP_Chest_Regular_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Chest_Regular_C>();
	}
};
static_assert(alignof(ABP_Chest_Regular_C) == 0x000008, "Wrong alignment on ABP_Chest_Regular_C");
static_assert(sizeof(ABP_Chest_Regular_C) == 0x000460, "Wrong size on ABP_Chest_Regular_C");
static_assert(offsetof(ABP_Chest_Regular_C, UberGraphFrame_BP_Chest_Regular_C) == 0x0002F0, "Member 'ABP_Chest_Regular_C::UberGraphFrame_BP_Chest_Regular_C' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, SM_FX_OptimizedPaintMesh) == 0x0002F8, "Member 'ABP_Chest_Regular_C::SM_FX_OptimizedPaintMesh' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, AC_Loot) == 0x000300, "Member 'ABP_Chest_Regular_C::AC_Loot' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, AC_Loot_Idle) == 0x000308, "Member 'ABP_Chest_Regular_C::AC_Loot_Idle' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, Cube) == 0x000310, "Member 'ABP_Chest_Regular_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, FX_Chest) == 0x000318, "Member 'ABP_Chest_Regular_C::FX_Chest' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, LightIntensity) == 0x000320, "Member 'ABP_Chest_Regular_C::LightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, DefaultChestFeedbackParameters) == 0x000328, "Member 'ABP_Chest_Regular_C::DefaultChestFeedbackParameters' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, ColorWhenOpening) == 0x000390, "Member 'ABP_Chest_Regular_C::ColorWhenOpening' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, ForceFeedbackEffect) == 0x0003A0, "Member 'ABP_Chest_Regular_C::ForceFeedbackEffect' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, ItemsToLoot) == 0x0003C8, "Member 'ABP_Chest_Regular_C::ItemsToLoot' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, ChestSetupHandle) == 0x000418, "Member 'ABP_Chest_Regular_C::ChestSetupHandle' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, LootTableReferences) == 0x000428, "Member 'ABP_Chest_Regular_C::LootTableReferences' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, RollChanceMultiplier) == 0x000438, "Member 'ABP_Chest_Regular_C::RollChanceMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, ChestLocation) == 0x000440, "Member 'ABP_Chest_Regular_C::ChestLocation' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, ChestRewardLevel) == 0x000441, "Member 'ABP_Chest_Regular_C::ChestRewardLevel' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, OverrideLootParameters) == 0x000448, "Member 'ABP_Chest_Regular_C::OverrideLootParameters' has a wrong offset!");
static_assert(offsetof(ABP_Chest_Regular_C, PlayInWorldDialogueOnLoot) == 0x000458, "Member 'ABP_Chest_Regular_C::PlayInWorldDialogueOnLoot' has a wrong offset!");

}

