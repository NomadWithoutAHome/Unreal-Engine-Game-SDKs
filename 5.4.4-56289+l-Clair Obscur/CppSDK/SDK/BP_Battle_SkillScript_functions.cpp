#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Battle_SkillScript

#include "Basic.hpp"

#include "BP_Battle_SkillScript_classes.hpp"
#include "BP_Battle_SkillScript_parameters.hpp"


namespace SDK
{

// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.AcquireTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>&DesiredTargetCharacters                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*AcquiredTargetCharacters                               (Parm, OutParm)

void ABP_Battle_SkillScript_C::AcquireTargets(TArray<class ABP_jRPG_Character_Battle_Base_C*>& DesiredTargetCharacters, TArray<class ABP_jRPG_Character_Battle_Base_C*>* AcquiredTargetCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "AcquireTargets");

	Params::BP_Battle_SkillScript_C_AcquireTargets Parms{};

	Parms.DesiredTargetCharacters = std::move(DesiredTargetCharacters);

	UObject::ProcessEvent(Func, &Parms);

	DesiredTargetCharacters = std::move(Parms.DesiredTargetCharacters);

	if (AcquiredTargetCharacters != nullptr)
		*AcquiredTargetCharacters = std::move(Parms.AcquiredTargetCharacters);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ApplyBuff
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*  TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   TurnDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*  SourceCharacterIfNotSelf                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EBuffApplicationProbability             StatusEffectProbability                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleBuffInstance_C**        CreatedBuffInstance                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::ApplyBuff(class UClass* BuffClass, class UAC_jRPG_CharacterBattleStats_C* TargetCharacter, int32 TurnDuration, class UAC_jRPG_CharacterBattleStats_C* SourceCharacterIfNotSelf, EBuffApplicationProbability StatusEffectProbability, class UBP_BattleBuffInstance_C** CreatedBuffInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ApplyBuff");

	Params::BP_Battle_SkillScript_C_ApplyBuff Parms{};

	Parms.BuffClass = BuffClass;
	Parms.TargetCharacter = TargetCharacter;
	Parms.TurnDuration = TurnDuration;
	Parms.SourceCharacterIfNotSelf = SourceCharacterIfNotSelf;
	Parms.StatusEffectProbability = StatusEffectProbability;

	UObject::ProcessEvent(Func, &Parms);

	if (CreatedBuffInstance != nullptr)
		*CreatedBuffInstance = Parms.CreatedBuffInstance;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.AreAllAlive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>&CharacterList                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   SomeAreAlive                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::AreAllAlive(TArray<class ABP_jRPG_Character_Battle_Base_C*>& CharacterList, bool* SomeAreAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "AreAllAlive");

	Params::BP_Battle_SkillScript_C_AreAllAlive Parms{};

	Parms.CharacterList = std::move(CharacterList);

	UObject::ProcessEvent(Func, &Parms);

	CharacterList = std::move(Parms.CharacterList);

	if (SomeAreAlive != nullptr)
		*SomeAreAlive = Parms.SomeAreAlive;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.CameraShake
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CameraShake_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::CameraShake(class UClass* CameraShake_0, double Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "CameraShake");

	Params::BP_Battle_SkillScript_C_CameraShake Parms{};

	Parms.CameraShake_0 = CameraShake_0;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.CancelSkillCost
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::CancelSkillCost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "CancelSkillCost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.Check Target Buff
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasBuff                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::Check_Target_Buff(class UAC_jRPG_CharacterBattleStats_C* Target, class UClass* BuffClass, bool* HasBuff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "Check Target Buff");

	Params::BP_Battle_SkillScript_C_Check_Target_Buff Parms{};

	Parms.Target = Target;
	Parms.BuffClass = BuffClass;

	UObject::ProcessEvent(Func, &Parms);

	if (HasBuff != nullptr)
		*HasBuff = Parms.HasBuff;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.DoesForcedSkillAllowPlayerChoice
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Battle_SkillScript_C::DoesForcedSkillAllowPlayerChoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "DoesForcedSkillAllowPlayerChoice");

	Params::BP_Battle_SkillScript_C_DoesForcedSkillAllowPlayerChoice Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ExecuteSkill_Internal
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::ExecuteSkill_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ExecuteSkill_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ExecuteUbergraph_BP_Battle_SkillScript
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::ExecuteUbergraph_BP_Battle_SkillScript(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ExecuteUbergraph_BP_Battle_SkillScript");

	Params::BP_Battle_SkillScript_C_ExecuteUbergraph_BP_Battle_SkillScript Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ForceSkillOnNextTurn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowPlayerChoice_0                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::ForceSkillOnNextTurn(bool AllowPlayerChoice_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ForceSkillOnNextTurn");

	Params::BP_Battle_SkillScript_C_ForceSkillOnNextTurn Parms{};

	Parms.AllowPlayerChoice_0 = AllowPlayerChoice_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetCurrentCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C**CurrentCharacter_0                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::GetCurrentCharacter(class ABP_jRPG_Character_Battle_Base_C** CurrentCharacter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetCurrentCharacter");

	Params::BP_Battle_SkillScript_C_GetCurrentCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentCharacter_0 != nullptr)
		*CurrentCharacter_0 = Parms.CurrentCharacter_0;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetForcedSkillExecutionCount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_Battle_SkillScript_C::GetForcedSkillExecutionCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetForcedSkillExecutionCount");

	Params::BP_Battle_SkillScript_C_GetForcedSkillExecutionCount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetForcedSkillPreviousTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class ABP_jRPG_Character_Battle_Base_C*> ABP_Battle_SkillScript_C::GetForcedSkillPreviousTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetForcedSkillPreviousTargets");

	Params::BP_Battle_SkillScript_C_GetForcedSkillPreviousTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetSkillCostOverride
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Override                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  NewValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::GetSkillCostOverride(bool* Override, int32* NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetSkillCostOverride");

	Params::BP_Battle_SkillScript_C_GetSkillCostOverride Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Override != nullptr)
		*Override = Parms.Override;

	if (NewValue != nullptr)
		*NewValue = Parms.NewValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetSkillDefinition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_DataAsset_Skill_C*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UBP_DataAsset_Skill_C* ABP_Battle_SkillScript_C::GetSkillDefinition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetSkillDefinition");

	Params::BP_Battle_SkillScript_C_GetSkillDefinition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetSkillElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EAttackType ABP_Battle_SkillScript_C::GetSkillElement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetSkillElement");

	Params::BP_Battle_SkillScript_C_GetSkillElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.GetTargetedCharacters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*TargetedCharacters                                     (Parm, OutParm)

void ABP_Battle_SkillScript_C::GetTargetedCharacters(TArray<class ABP_jRPG_Character_Battle_Base_C*>* TargetedCharacters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "GetTargetedCharacters");

	Params::BP_Battle_SkillScript_C_GetTargetedCharacters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetedCharacters != nullptr)
		*TargetedCharacters = std::move(Parms.TargetedCharacters);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.LockSkillCostCancelInternal
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::LockSkillCostCancelInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "LockSkillCostCancelInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.OnActionEffect
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::OnActionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "OnActionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.OnExecuteSkill
// (BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::OnExecuteSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "OnExecuteSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ResetSkillScriptState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::ResetSkillScriptState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ResetSkillScriptState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ShouldBlockForcedOverchargeFeedback
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Battle_SkillScript_C::ShouldBlockForcedOverchargeFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ShouldBlockForcedOverchargeFeedback");

	Params::BP_Battle_SkillScript_C_ShouldBlockForcedOverchargeFeedback Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ShowPlayerChoice
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::ShowPlayerChoice()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ShowPlayerChoice");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_Battle_SkillScript_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ValidateSkillAvailability
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Available                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_BlockedActionFeedback*        BlockedReason                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::ValidateSkillAvailability(bool* Available, struct FS_BlockedActionFeedback* BlockedReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ValidateSkillAvailability");

	Params::BP_Battle_SkillScript_C_ValidateSkillAvailability Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Available != nullptr)
		*Available = Parms.Available;

	if (BlockedReason != nullptr)
		*BlockedReason = std::move(Parms.BlockedReason);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.ValidateSkillTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UAC_jRPG_CharacterBattleStats_C*>&TargetCharacterStats                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// bool*                                   ValidTargets                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_BlockedActionFeedback*        BlockedReason                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_Battle_SkillScript_C::ValidateSkillTargets(TArray<class UAC_jRPG_CharacterBattleStats_C*>& TargetCharacterStats, bool* ValidTargets, struct FS_BlockedActionFeedback* BlockedReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "ValidateSkillTargets");

	Params::BP_Battle_SkillScript_C_ValidateSkillTargets Parms{};

	Parms.TargetCharacterStats = std::move(TargetCharacterStats);

	UObject::ProcessEvent(Func, &Parms);

	TargetCharacterStats = std::move(Parms.TargetCharacterStats);

	if (ValidTargets != nullptr)
		*ValidTargets = Parms.ValidTargets;

	if (BlockedReason != nullptr)
		*BlockedReason = std::move(Parms.BlockedReason);
}


// Function BP_Battle_SkillScript.BP_Battle_SkillScript_C.WasSkillCostCanceled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_Battle_SkillScript_C::WasSkillCostCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Battle_SkillScript_C", "WasSkillCostCanceled");

	Params::BP_Battle_SkillScript_C_WasSkillCostCanceled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

