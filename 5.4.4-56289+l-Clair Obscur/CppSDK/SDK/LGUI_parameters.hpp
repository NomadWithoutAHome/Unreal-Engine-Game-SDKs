#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LGUI

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "LGUI_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "LTween_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseCurve
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_SetEaseCurve final
{
public:
	class UCurveFloat*                            Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_SetEaseCurve) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_SetEaseCurve");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_SetEaseCurve) == 0x000008, "Wrong size on UIEffectTextAnimation_PropertyWithEase_SetEaseCurve");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_SetEaseCurve, Value) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_SetEaseCurve::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseType
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_SetEaseType final
{
public:
	ELTweenEase                                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_SetEaseType) == 0x000001, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_SetEaseType");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_SetEaseType) == 0x000001, "Wrong size on UIEffectTextAnimation_PropertyWithEase_SetEaseType");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_SetEaseType, Value) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_SetEaseType::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetCurveFloat
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_GetCurveFloat final
{
public:
	class UCurveFloat*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_GetCurveFloat) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_GetCurveFloat");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_GetCurveFloat) == 0x000008, "Wrong size on UIEffectTextAnimation_PropertyWithEase_GetCurveFloat");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_GetCurveFloat, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_GetCurveFloat::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetEaseType
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_PropertyWithEase_GetEaseType final
{
public:
	ELTweenEase                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithEase_GetEaseType) == 0x000001, "Wrong alignment on UIEffectTextAnimation_PropertyWithEase_GetEaseType");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithEase_GetEaseType) == 0x000001, "Wrong size on UIEffectTextAnimation_PropertyWithEase_GetEaseType");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithEase_GetEaseType, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithEase_GetEaseType::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMax
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetMax final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetMax) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMin
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetMin final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetMin) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_SetUseHSV final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_SetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_SetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_SetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_SetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_SetUseHSV, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_SetUseHSV::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMax
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetMax final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetMax) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetMax) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMin
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetMin final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetMin) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetMin) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorRandomProperty_GetUseHSV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorRandomProperty_GetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorRandomProperty_GetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorRandomProperty_GetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorRandomProperty_GetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorRandomProperty_GetUseHSV, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorRandomProperty_GetUseHSV::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILayoutElementInterface.GetConstantSize
// 0x0008 (0x0008 - 0x0000)
struct LGUILayoutElementInterface_GetConstantSize final
{
public:
	ELayoutElementSizeType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILayoutElementInterface_GetConstantSize) == 0x000004, "Wrong alignment on LGUILayoutElementInterface_GetConstantSize");
static_assert(sizeof(LGUILayoutElementInterface_GetConstantSize) == 0x000008, "Wrong size on LGUILayoutElementInterface_GetConstantSize");
static_assert(offsetof(LGUILayoutElementInterface_GetConstantSize, Type) == 0x000000, "Member 'LGUILayoutElementInterface_GetConstantSize::Type' has a wrong offset!");
static_assert(offsetof(LGUILayoutElementInterface_GetConstantSize, ReturnValue) == 0x000004, "Member 'LGUILayoutElementInterface_GetConstantSize::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILayoutElementInterface.GetLayoutType
// 0x0001 (0x0001 - 0x0000)
struct LGUILayoutElementInterface_GetLayoutType final
{
public:
	ELayoutElementType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILayoutElementInterface_GetLayoutType) == 0x000001, "Wrong alignment on LGUILayoutElementInterface_GetLayoutType");
static_assert(sizeof(LGUILayoutElementInterface_GetLayoutType) == 0x000001, "Wrong size on LGUILayoutElementInterface_GetLayoutType");
static_assert(offsetof(LGUILayoutElementInterface_GetLayoutType, ReturnValue) == 0x000000, "Member 'LGUILayoutElementInterface_GetLayoutType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILayoutElementInterface.GetRatioSize
// 0x0008 (0x0008 - 0x0000)
struct LGUILayoutElementInterface_GetRatioSize final
{
public:
	ELayoutElementSizeType                        Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILayoutElementInterface_GetRatioSize) == 0x000004, "Wrong alignment on LGUILayoutElementInterface_GetRatioSize");
static_assert(sizeof(LGUILayoutElementInterface_GetRatioSize) == 0x000008, "Wrong size on LGUILayoutElementInterface_GetRatioSize");
static_assert(offsetof(LGUILayoutElementInterface_GetRatioSize, Type) == 0x000000, "Member 'LGUILayoutElementInterface_GetRatioSize::Type' has a wrong offset!");
static_assert(offsetof(LGUILayoutElementInterface_GetRatioSize, ReturnValue) == 0x000004, "Member 'LGUILayoutElementInterface_GetRatioSize::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILayoutInterface.GetCanLayoutControlAnchor
// 0x0010 (0x0010 - 0x0000)
struct LGUILayoutInterface_GetCanLayoutControlAnchor final
{
public:
	class UUIItem*                                InUIItem;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUICanLayoutControlAnchor            OutResult;                                         // 0x0008(0x0006)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000E(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUILayoutInterface_GetCanLayoutControlAnchor) == 0x000008, "Wrong alignment on LGUILayoutInterface_GetCanLayoutControlAnchor");
static_assert(sizeof(LGUILayoutInterface_GetCanLayoutControlAnchor) == 0x000010, "Wrong size on LGUILayoutInterface_GetCanLayoutControlAnchor");
static_assert(offsetof(LGUILayoutInterface_GetCanLayoutControlAnchor, InUIItem) == 0x000000, "Member 'LGUILayoutInterface_GetCanLayoutControlAnchor::InUIItem' has a wrong offset!");
static_assert(offsetof(LGUILayoutInterface_GetCanLayoutControlAnchor, OutResult) == 0x000008, "Member 'LGUILayoutInterface_GetCanLayoutControlAnchor::OutResult' has a wrong offset!");
static_assert(offsetof(LGUILayoutInterface_GetCanLayoutControlAnchor, ReturnValue) == 0x00000E, "Member 'LGUILayoutInterface_GetCanLayoutControlAnchor::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteRenderableInterface.SpriteRenderableGetSprite
// 0x0008 (0x0008 - 0x0000)
struct UISpriteRenderableInterface_SpriteRenderableGetSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteRenderableInterface_SpriteRenderableGetSprite) == 0x000008, "Wrong alignment on UISpriteRenderableInterface_SpriteRenderableGetSprite");
static_assert(sizeof(UISpriteRenderableInterface_SpriteRenderableGetSprite) == 0x000008, "Wrong size on UISpriteRenderableInterface_SpriteRenderableGetSprite");
static_assert(offsetof(UISpriteRenderableInterface_SpriteRenderableGetSprite, ReturnValue) == 0x000000, "Member 'UISpriteRenderableInterface_SpriteRenderableGetSprite::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseEventData.ToString
// 0x0010 (0x0010 - 0x0000)
struct LGUIBaseEventData_ToString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseEventData_ToString) == 0x000008, "Wrong alignment on LGUIBaseEventData_ToString");
static_assert(sizeof(LGUIBaseEventData_ToString) == 0x000010, "Wrong size on LGUIBaseEventData_ToString");
static_assert(offsetof(LGUIBaseEventData_ToString, ReturnValue) == 0x000000, "Member 'LGUIBaseEventData_ToString::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_AlphaProperty.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_AlphaProperty_SetAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_AlphaProperty_SetAlpha) == 0x000004, "Wrong alignment on UIEffectTextAnimation_AlphaProperty_SetAlpha");
static_assert(sizeof(UIEffectTextAnimation_AlphaProperty_SetAlpha) == 0x000004, "Wrong size on UIEffectTextAnimation_AlphaProperty_SetAlpha");
static_assert(offsetof(UIEffectTextAnimation_AlphaProperty_SetAlpha, Value) == 0x000000, "Member 'UIEffectTextAnimation_AlphaProperty_SetAlpha::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_AlphaProperty.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_AlphaProperty_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_AlphaProperty_GetAlpha) == 0x000004, "Wrong alignment on UIEffectTextAnimation_AlphaProperty_GetAlpha");
static_assert(sizeof(UIEffectTextAnimation_AlphaProperty_GetAlpha) == 0x000004, "Wrong size on UIEffectTextAnimation_AlphaProperty_GetAlpha");
static_assert(offsetof(UIEffectTextAnimation_AlphaProperty_GetAlpha, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_AlphaProperty_GetAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.SetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_SetClickThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_SetClickThreshold) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_SetClickThreshold");
static_assert(sizeof(LGUIBaseRaycaster_SetClickThreshold) == 0x000004, "Wrong size on LGUIBaseRaycaster_SetClickThreshold");
static_assert(offsetof(LGUIBaseRaycaster_SetClickThreshold, Value) == 0x000000, "Member 'LGUIBaseRaycaster_SetClickThreshold::Value' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.SetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIBaseRaycaster_SetHoldToDrag final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_SetHoldToDrag) == 0x000001, "Wrong alignment on LGUIBaseRaycaster_SetHoldToDrag");
static_assert(sizeof(LGUIBaseRaycaster_SetHoldToDrag) == 0x000001, "Wrong size on LGUIBaseRaycaster_SetHoldToDrag");
static_assert(offsetof(LGUIBaseRaycaster_SetHoldToDrag, Value) == 0x000000, "Member 'LGUIBaseRaycaster_SetHoldToDrag::Value' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.SetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_SetHoldToDragTime final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_SetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_SetHoldToDragTime");
static_assert(sizeof(LGUIBaseRaycaster_SetHoldToDragTime) == 0x000004, "Wrong size on LGUIBaseRaycaster_SetHoldToDragTime");
static_assert(offsetof(LGUIBaseRaycaster_SetHoldToDragTime, Value) == 0x000000, "Member 'LGUIBaseRaycaster_SetHoldToDragTime::Value' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetAffectByGamePause
// 0x0001 (0x0001 - 0x0000)
struct LGUIBaseRaycaster_GetAffectByGamePause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetAffectByGamePause) == 0x000001, "Wrong alignment on LGUIBaseRaycaster_GetAffectByGamePause");
static_assert(sizeof(LGUIBaseRaycaster_GetAffectByGamePause) == 0x000001, "Wrong size on LGUIBaseRaycaster_GetAffectByGamePause");
static_assert(offsetof(LGUIBaseRaycaster_GetAffectByGamePause, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetAffectByGamePause::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetClickThreshold
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_GetClickThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetClickThreshold) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_GetClickThreshold");
static_assert(sizeof(LGUIBaseRaycaster_GetClickThreshold) == 0x000004, "Wrong size on LGUIBaseRaycaster_GetClickThreshold");
static_assert(offsetof(LGUIBaseRaycaster_GetClickThreshold, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetClickThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetDepth
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_GetDepth final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetDepth) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_GetDepth");
static_assert(sizeof(LGUIBaseRaycaster_GetDepth) == 0x000004, "Wrong size on LGUIBaseRaycaster_GetDepth");
static_assert(offsetof(LGUIBaseRaycaster_GetDepth, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetDepth::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetEventFireType
// 0x0001 (0x0001 - 0x0000)
struct LGUIBaseRaycaster_GetEventFireType final
{
public:
	ELGUIEventFireType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetEventFireType) == 0x000001, "Wrong alignment on LGUIBaseRaycaster_GetEventFireType");
static_assert(sizeof(LGUIBaseRaycaster_GetEventFireType) == 0x000001, "Wrong size on LGUIBaseRaycaster_GetEventFireType");
static_assert(offsetof(LGUIBaseRaycaster_GetEventFireType, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetEventFireType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetHoldToDrag
// 0x0001 (0x0001 - 0x0000)
struct LGUIBaseRaycaster_GetHoldToDrag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetHoldToDrag) == 0x000001, "Wrong alignment on LGUIBaseRaycaster_GetHoldToDrag");
static_assert(sizeof(LGUIBaseRaycaster_GetHoldToDrag) == 0x000001, "Wrong size on LGUIBaseRaycaster_GetHoldToDrag");
static_assert(offsetof(LGUIBaseRaycaster_GetHoldToDrag, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetHoldToDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetHoldToDragTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_GetHoldToDragTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetHoldToDragTime) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_GetHoldToDragTime");
static_assert(sizeof(LGUIBaseRaycaster_GetHoldToDragTime) == 0x000004, "Wrong size on LGUIBaseRaycaster_GetHoldToDragTime");
static_assert(offsetof(LGUIBaseRaycaster_GetHoldToDragTime, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetHoldToDragTime::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetPointerID
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_GetPointerID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetPointerID) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_GetPointerID");
static_assert(sizeof(LGUIBaseRaycaster_GetPointerID) == 0x000004, "Wrong size on LGUIBaseRaycaster_GetPointerID");
static_assert(offsetof(LGUIBaseRaycaster_GetPointerID, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetPointerID::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetRayDirection
// 0x0018 (0x0018 - 0x0000)
struct LGUIBaseRaycaster_GetRayDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetRayDirection) == 0x000008, "Wrong alignment on LGUIBaseRaycaster_GetRayDirection");
static_assert(sizeof(LGUIBaseRaycaster_GetRayDirection) == 0x000018, "Wrong size on LGUIBaseRaycaster_GetRayDirection");
static_assert(offsetof(LGUIBaseRaycaster_GetRayDirection, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetRayDirection::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetRayLength
// 0x0004 (0x0004 - 0x0000)
struct LGUIBaseRaycaster_GetRayLength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetRayLength) == 0x000004, "Wrong alignment on LGUIBaseRaycaster_GetRayLength");
static_assert(sizeof(LGUIBaseRaycaster_GetRayLength) == 0x000004, "Wrong size on LGUIBaseRaycaster_GetRayLength");
static_assert(offsetof(LGUIBaseRaycaster_GetRayLength, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetRayLength::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetRayOrigin
// 0x0018 (0x0018 - 0x0000)
struct LGUIBaseRaycaster_GetRayOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetRayOrigin) == 0x000008, "Wrong alignment on LGUIBaseRaycaster_GetRayOrigin");
static_assert(sizeof(LGUIBaseRaycaster_GetRayOrigin) == 0x000018, "Wrong size on LGUIBaseRaycaster_GetRayOrigin");
static_assert(offsetof(LGUIBaseRaycaster_GetRayOrigin, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetRayOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBaseRaycaster.GetTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct LGUIBaseRaycaster_GetTraceChannel final
{
public:
	ETraceTypeQuery                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBaseRaycaster_GetTraceChannel) == 0x000001, "Wrong alignment on LGUIBaseRaycaster_GetTraceChannel");
static_assert(sizeof(LGUIBaseRaycaster_GetTraceChannel) == 0x000001, "Wrong size on LGUIBaseRaycaster_GetTraceChannel");
static_assert(offsetof(LGUIBaseRaycaster_GetTraceChannel, ReturnValue) == 0x000000, "Member 'LGUIBaseRaycaster_GetTraceChannel::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AlphaFrom
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AlphaFrom final
{
public:
	class UUIBaseRenderable*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AlphaFrom) == 0x000008, "Wrong alignment on LGUIBPLibrary_AlphaFrom");
static_assert(sizeof(LGUIBPLibrary_AlphaFrom) == 0x000020, "Wrong size on LGUIBPLibrary_AlphaFrom");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Target) == 0x000000, "Member 'LGUIBPLibrary_AlphaFrom::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, StartValue) == 0x000008, "Member 'LGUIBPLibrary_AlphaFrom::StartValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AlphaFrom::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Delay) == 0x000010, "Member 'LGUIBPLibrary_AlphaFrom::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, Ease) == 0x000014, "Member 'LGUIBPLibrary_AlphaFrom::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaFrom, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AlphaFrom::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AlphaTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AlphaTo final
{
public:
	class UUIBaseRenderable*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AlphaTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AlphaTo");
static_assert(sizeof(LGUIBPLibrary_AlphaTo) == 0x000020, "Wrong size on LGUIBPLibrary_AlphaTo");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AlphaTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AlphaTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorBottomTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorBottomTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorBottomTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorBottomTo");
static_assert(sizeof(LGUIBPLibrary_AnchorBottomTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorBottomTo");
static_assert(offsetof(LGUIBPLibrary_AnchorBottomTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorBottomTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorBottomTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorBottomTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorBottomTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorBottomTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorBottomTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorBottomTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorBottomTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorBottomTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorBottomTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorBottomTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchoredPositionTo
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_AnchoredPositionTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchoredPositionTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchoredPositionTo");
static_assert(sizeof(LGUIBPLibrary_AnchoredPositionTo) == 0x000030, "Wrong size on LGUIBPLibrary_AnchoredPositionTo");
static_assert(offsetof(LGUIBPLibrary_AnchoredPositionTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchoredPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchoredPositionTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchoredPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchoredPositionTo, Duration) == 0x000018, "Member 'LGUIBPLibrary_AnchoredPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchoredPositionTo, Delay) == 0x00001C, "Member 'LGUIBPLibrary_AnchoredPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchoredPositionTo, Ease) == 0x000020, "Member 'LGUIBPLibrary_AnchoredPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchoredPositionTo, ReturnValue) == 0x000028, "Member 'LGUIBPLibrary_AnchoredPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorLeftTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorLeftTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorLeftTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorLeftTo");
static_assert(sizeof(LGUIBPLibrary_AnchorLeftTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorLeftTo");
static_assert(offsetof(LGUIBPLibrary_AnchorLeftTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorLeftTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorLeftTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorLeftTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorLeftTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorLeftTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorLeftTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorLeftTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorLeftTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorLeftTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorLeftTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorLeftTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorOffsetTo
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_AnchorOffsetTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorOffsetTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorOffsetTo");
static_assert(sizeof(LGUIBPLibrary_AnchorOffsetTo) == 0x000030, "Wrong size on LGUIBPLibrary_AnchorOffsetTo");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorOffsetTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorOffsetTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Duration) == 0x000018, "Member 'LGUIBPLibrary_AnchorOffsetTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Delay) == 0x00001C, "Member 'LGUIBPLibrary_AnchorOffsetTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, Ease) == 0x000020, "Member 'LGUIBPLibrary_AnchorOffsetTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetTo, ReturnValue) == 0x000028, "Member 'LGUIBPLibrary_AnchorOffsetTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorOffsetXTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorOffsetXTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorOffsetXTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorOffsetXTo");
static_assert(sizeof(LGUIBPLibrary_AnchorOffsetXTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorOffsetXTo");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorOffsetXTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorOffsetXTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetXTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorOffsetXTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorOffsetYTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorOffsetYTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorOffsetYTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorOffsetYTo");
static_assert(sizeof(LGUIBPLibrary_AnchorOffsetYTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorOffsetYTo");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorOffsetYTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorOffsetYTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorOffsetYTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorOffsetYTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorRightTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorRightTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorRightTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorRightTo");
static_assert(sizeof(LGUIBPLibrary_AnchorRightTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorRightTo");
static_assert(offsetof(LGUIBPLibrary_AnchorRightTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorRightTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorRightTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorRightTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorRightTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorRightTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorRightTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorRightTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorRightTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorRightTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorRightTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorRightTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.AnchorTopTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_AnchorTopTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_AnchorTopTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_AnchorTopTo");
static_assert(sizeof(LGUIBPLibrary_AnchorTopTo) == 0x000020, "Wrong size on LGUIBPLibrary_AnchorTopTo");
static_assert(offsetof(LGUIBPLibrary_AnchorTopTo, Target) == 0x000000, "Member 'LGUIBPLibrary_AnchorTopTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorTopTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_AnchorTopTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorTopTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_AnchorTopTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorTopTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_AnchorTopTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorTopTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_AnchorTopTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_AnchorTopTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_AnchorTopTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ColorFrom
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_ColorFrom final
{
public:
	class UUIBaseRenderable*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartValue;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ColorFrom) == 0x000008, "Wrong alignment on LGUIBPLibrary_ColorFrom");
static_assert(sizeof(LGUIBPLibrary_ColorFrom) == 0x000020, "Wrong size on LGUIBPLibrary_ColorFrom");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Target) == 0x000000, "Member 'LGUIBPLibrary_ColorFrom::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, StartValue) == 0x000008, "Member 'LGUIBPLibrary_ColorFrom::StartValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Duration) == 0x00000C, "Member 'LGUIBPLibrary_ColorFrom::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Delay) == 0x000010, "Member 'LGUIBPLibrary_ColorFrom::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, Ease) == 0x000014, "Member 'LGUIBPLibrary_ColorFrom::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorFrom, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_ColorFrom::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.ColorTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_ColorTo final
{
public:
	class UUIBaseRenderable*                      Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_ColorTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_ColorTo");
static_assert(sizeof(LGUIBPLibrary_ColorTo) == 0x000020, "Wrong size on LGUIBPLibrary_ColorTo");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Target) == 0x000000, "Member 'LGUIBPLibrary_ColorTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_ColorTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_ColorTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_ColorTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_ColorTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_ColorTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_ColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DestroyActorWithHierarchy
// 0x0010 (0x0010 - 0x0000)
struct LGUIBPLibrary_DestroyActorWithHierarchy final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WithHierarchy;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_DestroyActorWithHierarchy) == 0x000008, "Wrong alignment on LGUIBPLibrary_DestroyActorWithHierarchy");
static_assert(sizeof(LGUIBPLibrary_DestroyActorWithHierarchy) == 0x000010, "Wrong size on LGUIBPLibrary_DestroyActorWithHierarchy");
static_assert(offsetof(LGUIBPLibrary_DestroyActorWithHierarchy, Target) == 0x000000, "Member 'LGUIBPLibrary_DestroyActorWithHierarchy::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DestroyActorWithHierarchy, WithHierarchy) == 0x000008, "Member 'LGUIBPLibrary_DestroyActorWithHierarchy::WithHierarchy' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DuplicateActor
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_DuplicateActor final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_DuplicateActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_DuplicateActor");
static_assert(sizeof(LGUIBPLibrary_DuplicateActor) == 0x000018, "Wrong size on LGUIBPLibrary_DuplicateActor");
static_assert(offsetof(LGUIBPLibrary_DuplicateActor, Target) == 0x000000, "Member 'LGUIBPLibrary_DuplicateActor::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DuplicateActor, Parent) == 0x000008, "Member 'LGUIBPLibrary_DuplicateActor::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DuplicateActor, ReturnValue) == 0x000010, "Member 'LGUIBPLibrary_DuplicateActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.DuplicateActorWithPreparedData
// 0x04A0 (0x04A0 - 0x0000)
struct LGUIBPLibrary_DuplicateActorWithPreparedData final
{
public:
	struct FLGUIDuplicateDataContainer            Data;                                              // 0x0000(0x0490)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0490(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0498(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_DuplicateActorWithPreparedData) == 0x000010, "Wrong alignment on LGUIBPLibrary_DuplicateActorWithPreparedData");
static_assert(sizeof(LGUIBPLibrary_DuplicateActorWithPreparedData) == 0x0004A0, "Wrong size on LGUIBPLibrary_DuplicateActorWithPreparedData");
static_assert(offsetof(LGUIBPLibrary_DuplicateActorWithPreparedData, Data) == 0x000000, "Member 'LGUIBPLibrary_DuplicateActorWithPreparedData::Data' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DuplicateActorWithPreparedData, Parent) == 0x000490, "Member 'LGUIBPLibrary_DuplicateActorWithPreparedData::Parent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_DuplicateActorWithPreparedData, ReturnValue) == 0x000498, "Member 'LGUIBPLibrary_DuplicateActorWithPreparedData::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentInChildren
// 0x0070 (0x0070 - 0x0000)
struct LGUIBPLibrary_GetComponentInChildren final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           InExcludeNode;                                     // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0068(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentInChildren) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentInChildren");
static_assert(sizeof(LGUIBPLibrary_GetComponentInChildren) == 0x000070, "Wrong size on LGUIBPLibrary_GetComponentInChildren");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentInChildren::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentInChildren::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentInChildren::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, InExcludeNode) == 0x000018, "Member 'LGUIBPLibrary_GetComponentInChildren::InExcludeNode' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInChildren, ReturnValue) == 0x000068, "Member 'LGUIBPLibrary_GetComponentInChildren::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentInParent
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_GetComponentInParent final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 InStopNode;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentInParent) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentInParent");
static_assert(sizeof(LGUIBPLibrary_GetComponentInParent) == 0x000028, "Wrong size on LGUIBPLibrary_GetComponentInParent");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentInParent::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentInParent::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentInParent::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, InStopNode) == 0x000018, "Member 'LGUIBPLibrary_GetComponentInParent::InStopNode' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentInParent, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_GetComponentInParent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetComponentsInChildren
// 0x0078 (0x0078 - 0x0000)
struct LGUIBPLibrary_GetComponentsInChildren final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeSelf;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           InExcludeNode;                                     // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UActorComponent*>                ReturnValue;                                       // 0x0068(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetComponentsInChildren) == 0x000008, "Wrong alignment on LGUIBPLibrary_GetComponentsInChildren");
static_assert(sizeof(LGUIBPLibrary_GetComponentsInChildren) == 0x000078, "Wrong size on LGUIBPLibrary_GetComponentsInChildren");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, InActor) == 0x000000, "Member 'LGUIBPLibrary_GetComponentsInChildren::InActor' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, ComponentClass) == 0x000008, "Member 'LGUIBPLibrary_GetComponentsInChildren::ComponentClass' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, IncludeSelf) == 0x000010, "Member 'LGUIBPLibrary_GetComponentsInChildren::IncludeSelf' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, InExcludeNode) == 0x000018, "Member 'LGUIBPLibrary_GetComponentsInChildren::InExcludeNode' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetComponentsInChildren, ReturnValue) == 0x000068, "Member 'LGUIBPLibrary_GetComponentsInChildren::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteBorderSize
// 0x0044 (0x0044 - 0x0000)
struct LGUIBPLibrary_GetSpriteBorderSize final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         borderLeft;                                        // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         borderRight;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         borderTop;                                         // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         borderBottom;                                      // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteBorderSize) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteBorderSize");
static_assert(sizeof(LGUIBPLibrary_GetSpriteBorderSize) == 0x000044, "Wrong size on LGUIBPLibrary_GetSpriteBorderSize");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteBorderSize::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderLeft) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderLeft' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderRight) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderRight' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderTop) == 0x00003C, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderTop' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderSize, borderBottom) == 0x000040, "Member 'LGUIBPLibrary_GetSpriteBorderSize::borderBottom' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteBorderUV
// 0x0044 (0x0044 - 0x0000)
struct LGUIBPLibrary_GetSpriteBorderUV final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         borderUV0X;                                        // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         borderUV0Y;                                        // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         borderUV3X;                                        // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         borderUV3Y;                                        // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteBorderUV) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteBorderUV");
static_assert(sizeof(LGUIBPLibrary_GetSpriteBorderUV) == 0x000044, "Wrong size on LGUIBPLibrary_GetSpriteBorderUV");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteBorderUV::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV0X) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV0X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV0Y) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV0Y' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV3X) == 0x00003C, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV3X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteBorderUV, borderUV3Y) == 0x000040, "Member 'LGUIBPLibrary_GetSpriteBorderUV::borderUV3Y' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteSize
// 0x003C (0x003C - 0x0000)
struct LGUIBPLibrary_GetSpriteSize final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         Width;                                             // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Height;                                            // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteSize) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteSize");
static_assert(sizeof(LGUIBPLibrary_GetSpriteSize) == 0x00003C, "Wrong size on LGUIBPLibrary_GetSpriteSize");
static_assert(offsetof(LGUIBPLibrary_GetSpriteSize, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteSize::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteSize, Width) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteSize::Width' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteSize, Height) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteSize::Height' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.GetSpriteUV
// 0x0044 (0x0044 - 0x0000)
struct LGUIBPLibrary_GetSpriteUV final
{
public:
	struct FLGUISpriteInfo                        SpriteInfo;                                        // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         uv0X;                                              // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         uv0Y;                                              // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         uv3X;                                              // 0x003C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         uv3Y;                                              // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_GetSpriteUV) == 0x000004, "Wrong alignment on LGUIBPLibrary_GetSpriteUV");
static_assert(sizeof(LGUIBPLibrary_GetSpriteUV) == 0x000044, "Wrong size on LGUIBPLibrary_GetSpriteUV");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, SpriteInfo) == 0x000000, "Member 'LGUIBPLibrary_GetSpriteUV::SpriteInfo' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, uv0X) == 0x000034, "Member 'LGUIBPLibrary_GetSpriteUV::uv0X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, uv0Y) == 0x000038, "Member 'LGUIBPLibrary_GetSpriteUV::uv0Y' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, uv3X) == 0x00003C, "Member 'LGUIBPLibrary_GetSpriteUV::uv3X' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_GetSpriteUV, uv3Y) == 0x000040, "Member 'LGUIBPLibrary_GetSpriteUV::uv3Y' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.HeightTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_HeightTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_HeightTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_HeightTo");
static_assert(sizeof(LGUIBPLibrary_HeightTo) == 0x000020, "Wrong size on LGUIBPLibrary_HeightTo");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Target) == 0x000000, "Member 'LGUIBPLibrary_HeightTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_HeightTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_HeightTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_HeightTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_HeightTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HeightTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_HeightTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.HorizontalAnchoredPositionTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_HorizontalAnchoredPositionTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_HorizontalAnchoredPositionTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_HorizontalAnchoredPositionTo");
static_assert(sizeof(LGUIBPLibrary_HorizontalAnchoredPositionTo) == 0x000020, "Wrong size on LGUIBPLibrary_HorizontalAnchoredPositionTo");
static_assert(offsetof(LGUIBPLibrary_HorizontalAnchoredPositionTo, Target) == 0x000000, "Member 'LGUIBPLibrary_HorizontalAnchoredPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HorizontalAnchoredPositionTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_HorizontalAnchoredPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HorizontalAnchoredPositionTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_HorizontalAnchoredPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HorizontalAnchoredPositionTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_HorizontalAnchoredPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HorizontalAnchoredPositionTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_HorizontalAnchoredPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_HorizontalAnchoredPositionTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_HorizontalAnchoredPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.K2_LGUICompRef_GetComponent
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_K2_LGUICompRef_GetComponent final
{
public:
	struct FLGUIComponentReference                InLGUICompRef;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UActorComponent*                        OutResult;                                         // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_K2_LGUICompRef_GetComponent) == 0x000008, "Wrong alignment on LGUIBPLibrary_K2_LGUICompRef_GetComponent");
static_assert(sizeof(LGUIBPLibrary_K2_LGUICompRef_GetComponent) == 0x000028, "Wrong size on LGUIBPLibrary_K2_LGUICompRef_GetComponent");
static_assert(offsetof(LGUIBPLibrary_K2_LGUICompRef_GetComponent, InLGUICompRef) == 0x000000, "Member 'LGUIBPLibrary_K2_LGUICompRef_GetComponent::InLGUICompRef' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_K2_LGUICompRef_GetComponent, OutResult) == 0x000020, "Member 'LGUIBPLibrary_K2_LGUICompRef_GetComponent::OutResult' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUICompRef_GetActor
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUICompRef_GetActor final
{
public:
	struct FLGUIComponentReference                InLGUIComponentReference;                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUICompRef_GetActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUICompRef_GetActor");
static_assert(sizeof(LGUIBPLibrary_LGUICompRef_GetActor) == 0x000028, "Wrong size on LGUIBPLibrary_LGUICompRef_GetActor");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetActor, InLGUIComponentReference) == 0x000000, "Member 'LGUIBPLibrary_LGUICompRef_GetActor::InLGUIComponentReference' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetActor, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_LGUICompRef_GetActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponent
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUICompRef_GetComponent final
{
public:
	struct FLGUIComponentReference                InLGUIComponentReference;                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            InComponentType;                                   // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUICompRef_GetComponent) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUICompRef_GetComponent");
static_assert(sizeof(LGUIBPLibrary_LGUICompRef_GetComponent) == 0x000030, "Wrong size on LGUIBPLibrary_LGUICompRef_GetComponent");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponent, InLGUIComponentReference) == 0x000000, "Member 'LGUIBPLibrary_LGUICompRef_GetComponent::InLGUIComponentReference' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponent, InComponentType) == 0x000020, "Member 'LGUIBPLibrary_LGUICompRef_GetComponent::InComponentType' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponent, ReturnValue) == 0x000028, "Member 'LGUIBPLibrary_LGUICompRef_GetComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponentClass
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUICompRef_GetComponentClass final
{
public:
	struct FLGUIComponentReference                InLGUIComponentReference;                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class UActorComponent>            ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUICompRef_GetComponentClass) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUICompRef_GetComponentClass");
static_assert(sizeof(LGUIBPLibrary_LGUICompRef_GetComponentClass) == 0x000028, "Wrong size on LGUIBPLibrary_LGUICompRef_GetComponentClass");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponentClass, InLGUIComponentReference) == 0x000000, "Member 'LGUIBPLibrary_LGUICompRef_GetComponentClass::InLGUIComponentReference' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUICompRef_GetComponentClass, ReturnValue) == 0x000020, "Member 'LGUIBPLibrary_LGUICompRef_GetComponentClass::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Actor_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Actor_Execute final
{
public:
	struct FLGUIEventDelegate_Actor               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Actor_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Actor_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Actor_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Actor_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Actor_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Actor_Register final
{
public:
	struct FLGUIEventDelegate_Actor               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* Value)>          InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Actor_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Actor_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Actor_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Actor_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Actor_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister final
{
public:
	struct FLGUIEventDelegate_Actor               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Bool_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Bool_Execute final
{
public:
	struct FLGUIEventDelegate_Bool                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InParameter;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Bool_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Bool_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Bool_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Bool_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Bool_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Bool_Register final
{
public:
	struct FLGUIEventDelegate_Bool                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(bool Value)>                   InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Bool_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Bool_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Bool_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Bool_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Bool_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister final
{
public:
	struct FLGUIEventDelegate_Bool                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Class_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Class_Execute final
{
public:
	struct FLGUIEventDelegate_Class               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Class_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Class_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Class_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Class_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Class_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Class_Register final
{
public:
	struct FLGUIEventDelegate_Class               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UClass* Value)>          InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Class_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Class_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Class_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Class_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Class_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Class_Unregister final
{
public:
	struct FLGUIEventDelegate_Class               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Class_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Class_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Class_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Class_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Class_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Class_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Color_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Color_Execute final
{
public:
	struct FLGUIEventDelegate_Color               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 InParameter;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Color_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Color_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Color_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Color_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Color_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Color_Register final
{
public:
	struct FLGUIEventDelegate_Color               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FColor& Value)>   InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Color_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Color_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Color_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Color_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Color_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Color_Unregister final
{
public:
	struct FLGUIEventDelegate_Color               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Color_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Color_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Color_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Color_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Color_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Color_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Double_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Double_Execute final
{
public:
	struct FLGUIEventDelegate_Double              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Double_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Double_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Double_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Double_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Double_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Double_Register final
{
public:
	struct FLGUIEventDelegate_Double              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(double Value)>                 InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Double_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Double_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Double_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Double_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Double_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Double_Unregister final
{
public:
	struct FLGUIEventDelegate_Double              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Double_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Double_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Double_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Double_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Double_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Double_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Empty_Execute
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Empty_Execute final
{
public:
	struct FLGUIEventDelegate_Empty               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Empty_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Empty_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Empty_Execute) == 0x000030, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Empty_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Empty_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Empty_Execute::InEvent' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Empty_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Empty_Register final
{
public:
	struct FLGUIEventDelegate_Empty               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Empty_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Empty_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Empty_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Empty_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Empty_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Empty_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Empty_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Empty_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Empty_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Empty_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Empty_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister final
{
public:
	struct FLGUIEventDelegate_Empty               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Float_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Float_Execute final
{
public:
	struct FLGUIEventDelegate_Float               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InParameter;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Float_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Float_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Float_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Float_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Float_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Float_Register final
{
public:
	struct FLGUIEventDelegate_Float               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(float Value)>                  InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Float_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Float_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Float_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Float_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Float_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Float_Unregister final
{
public:
	struct FLGUIEventDelegate_Float               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Float_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Float_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Float_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Float_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Float_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Float_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int32_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Int32_Execute final
{
public:
	struct FLGUIEventDelegate_Int32               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InParameter;                                       // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Int32_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Int32_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Int32_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Int32_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int32_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Int32_Register final
{
public:
	struct FLGUIEventDelegate_Int32               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Value)>                  InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Int32_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Int32_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Int32_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Int32_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int32_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister final
{
public:
	struct FLGUIEventDelegate_Int32               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int64_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Int64_Execute final
{
public:
	struct FLGUIEventDelegate_Int64               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int64                                         InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Int64_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Int64_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Int64_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Int64_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int64_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Int64_Register final
{
public:
	struct FLGUIEventDelegate_Int64               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(int64 Value)>                  InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Int64_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Int64_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Int64_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Int64_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int64_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister final
{
public:
	struct FLGUIEventDelegate_Int64               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_LinearColor_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute final
{
public:
	struct FLGUIEventDelegate_LinearColor         InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           InParameter;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_LinearColor_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register final
{
public:
	struct FLGUIEventDelegate_LinearColor         InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FLinearColor& Value)> InDelegate;                                    // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_LinearColor_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister final
{
public:
	struct FLGUIEventDelegate_LinearColor         InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Name_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Name_Execute final
{
public:
	struct FLGUIEventDelegate_Name                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Name_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Name_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Name_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Name_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Name_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Name_Register final
{
public:
	struct FLGUIEventDelegate_Name                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class FName Value)>            InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Name_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Name_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Name_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Name_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Name_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Name_Unregister final
{
public:
	struct FLGUIEventDelegate_Name                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Name_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Name_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Name_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Name_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Name_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Name_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Object_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Object_Execute final
{
public:
	struct FLGUIEventDelegate_Object              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Object_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Object_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Object_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Object_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Object_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Object_Register final
{
public:
	struct FLGUIEventDelegate_Object              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class UObject* Value)>         InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Object_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Object_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Object_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Object_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Object_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Object_Unregister final
{
public:
	struct FLGUIEventDelegate_Object              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Object_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Object_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Object_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Object_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Object_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Object_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_PointerEvent_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute final
{
public:
	struct FLGUIEventDelegate_PointerEvent        InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  InParameter;                                       // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_PointerEvent_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register final
{
public:
	struct FLGUIEventDelegate_PointerEvent        InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class ULGUIPointerEventData* Value)> InDelegate;                                  // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_PointerEvent_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister final
{
public:
	struct FLGUIEventDelegate_PointerEvent        InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Quaternion_Execute
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute final
{
public:
	struct FLGUIEventDelegate_Quaternion          InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FQuat                                  InParameter;                                       // 0x0030(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Quaternion_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register final
{
public:
	struct FLGUIEventDelegate_Quaternion          InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FQuat& Value)>    InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Quaternion_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister final
{
public:
	struct FLGUIEventDelegate_Quaternion          InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Rotator_Execute
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute final
{
public:
	struct FLGUIEventDelegate_Rotator             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               InParameter;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Rotator_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Rotator_Register final
{
public:
	struct FLGUIEventDelegate_Rotator             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRotator& Value)> InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Rotator_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Rotator_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Rotator_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister final
{
public:
	struct FLGUIEventDelegate_Rotator             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_String_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_String_Execute final
{
public:
	struct FLGUIEventDelegate_String              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InParameter;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_String_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_String_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_String_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_String_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_String_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_String_Register final
{
public:
	struct FLGUIEventDelegate_String              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const class FString& Value)>   InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_String_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_String_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_String_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_String_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_String_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_String_Unregister final
{
public:
	struct FLGUIEventDelegate_String              InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_String_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_String_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_String_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_String_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_String_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_String_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Text_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Text_Execute final
{
public:
	struct FLGUIEventDelegate_Text                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InParameter;                                       // 0x0030(0x0010)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Text_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Text_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Text_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Text_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Text_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Text_Register final
{
public:
	struct FLGUIEventDelegate_Text                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class FText Value)>            InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Text_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Text_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Text_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Text_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Text_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Text_Unregister final
{
public:
	struct FLGUIEventDelegate_Text                InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Text_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Text_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Text_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Text_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Text_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Text_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_UInt8_Execute
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute final
{
public:
	struct FLGUIEventDelegate_UInt8               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         InParameter;                                       // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_UInt8_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_UInt8_Register final
{
public:
	struct FLGUIEventDelegate_UInt8               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(uint8 Value)>                  InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_UInt8_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_UInt8_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_UInt8_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister final
{
public:
	struct FLGUIEventDelegate_UInt8               InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector2_Execute
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute final
{
public:
	struct FLGUIEventDelegate_Vector2             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              InParameter;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector2_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector2_Register final
{
public:
	struct FLGUIEventDelegate_Vector2             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector2D& Value)> InDelegate;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector2_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector2_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector2_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister final
{
public:
	struct FLGUIEventDelegate_Vector2             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector3_Execute
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute final
{
public:
	struct FLGUIEventDelegate_Vector3             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InParameter;                                       // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector3_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector3_Register final
{
public:
	struct FLGUIEventDelegate_Vector3             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector& Value)>  InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector3_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector3_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector3_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister final
{
public:
	struct FLGUIEventDelegate_Vector3             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector4_Execute
// 0x0050 (0x0050 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute final
{
public:
	struct FLGUIEventDelegate_Vector4             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector4                               InParameter;                                       // 0x0030(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute) == 0x000050, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute, InParameter) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector4_Register
// 0x0048 (0x0048 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector4_Register final
{
public:
	struct FLGUIEventDelegate_Vector4             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector4& Value)> InDelegate;                                        // 0x0030(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Register) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector4_Register");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Register) == 0x000048, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector4_Register");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Register, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Register::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Register, InDelegate) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Register::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Register, ReturnValue) == 0x000040, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Register::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector4_Unregister
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister final
{
public:
	struct FLGUIEventDelegate_Vector4             InEvent;                                           // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0030(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister) == 0x000038, "Wrong size on LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister, InDelegateHandle) == 0x000030, "Member 'LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteActor
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteActor final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteActor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteActor");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteActor) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteActor");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteActor, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteActor::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteActor, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteActor::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteBool
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteBool final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          InParameter;                                       // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteBool) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteBool");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteBool) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteBool");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteBool, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteBool::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteBool, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteBool::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteClass
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteClass final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UClass*                                 InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteClass) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteClass");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteClass) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteClass");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteClass, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteClass::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteClass, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteClass::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteColor
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteColor final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FColor                                 InParameter;                                       // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteColor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteColor");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteColor) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteColor");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteColor, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteColor::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteColor, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteColor::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteEmpty
// 0x0018 (0x0018 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteEmpty final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteEmpty) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteEmpty");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteEmpty) == 0x000018, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteEmpty");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteEmpty, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteEmpty::InEvent' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteFloat
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteFloat final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         InParameter;                                       // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteFloat) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteFloat");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteFloat) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteFloat");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteFloat, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteFloat::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteFloat, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteFloat::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteInt32
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteInt32 final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         InParameter;                                       // 0x0018(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteInt32) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteInt32");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteInt32) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteInt32");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteInt32, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteInt32::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteInt32, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteInt32::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteLinearColor
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLinearColor                           InParameter;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteName
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteName final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   InParameter;                                       // 0x0018(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteName) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteName");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteName) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteName");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteName, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteName::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteName, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteName::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteObject
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteObject final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteObject) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteObject");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteObject) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteObject");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteObject, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteObject::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteObject, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteObject::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecutePointerEvent
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  InParameter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteQuaternion
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  InParameter;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion, InParameter) == 0x000020, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteRotator
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteRotator final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               InParameter;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteRotator) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteRotator");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteRotator) == 0x000030, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteRotator");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteRotator, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteRotator::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteRotator, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteRotator::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteString
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteString final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 InParameter;                                       // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteString) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteString");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteString) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteString");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteString, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteString::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteString, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteString::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteText
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteText final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   InParameter;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteText) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteText");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteText) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteText");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteText, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteText::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteText, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteText::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteUInt8
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteUInt8 final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         InParameter;                                       // 0x0018(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteUInt8) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteUInt8");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteUInt8) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteUInt8");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteUInt8, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteUInt8::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteUInt8, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteUInt8::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteVector2
// 0x0028 (0x0028 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteVector2 final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector2D                              InParameter;                                       // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteVector2) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteVector2");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteVector2) == 0x000028, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteVector2");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteVector2, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteVector2::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteVector2, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteVector2::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteVector3
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteVector3 final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                InParameter;                                       // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteVector3) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteVector3");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteVector3) == 0x000030, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteVector3");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteVector3, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteVector3::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteVector3, InParameter) == 0x000018, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteVector3::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteVector4
// 0x0040 (0x0040 - 0x0000)
struct LGUIBPLibrary_LGUIEventDelegateExecuteVector4 final
{
public:
	struct FLGUIEventDelegate                     InEvent;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               InParameter;                                       // 0x0020(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LGUIEventDelegateExecuteVector4) == 0x000010, "Wrong alignment on LGUIBPLibrary_LGUIEventDelegateExecuteVector4");
static_assert(sizeof(LGUIBPLibrary_LGUIEventDelegateExecuteVector4) == 0x000040, "Wrong size on LGUIBPLibrary_LGUIEventDelegateExecuteVector4");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteVector4, InEvent) == 0x000000, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteVector4::InEvent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIEventDelegateExecuteVector4, InParameter) == 0x000020, "Member 'LGUIBPLibrary_LGUIEventDelegateExecuteVector4::InParameter' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAction
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteControllerInputAction final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pressOrRelease;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteControllerInputAction) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteControllerInputAction");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteControllerInputAction) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIExecuteControllerInputAction");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAction, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAction::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAction, pressOrRelease) == 0x000018, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAction::pressOrRelease' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAxis
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteControllerInputAxis final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteControllerInputAxis) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteControllerInputAxis");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteControllerInputAxis) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIExecuteControllerInputAxis");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAxis, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAxis::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteControllerInputAxis, Value) == 0x000018, "Member 'LGUIBPLibrary_LGUIExecuteControllerInputAxis::Value' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAction
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteInputAction final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pressOrRelease;                                    // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteInputAction) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteInputAction");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteInputAction) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIExecuteInputAction");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAction, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteInputAction::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAction, pressOrRelease) == 0x000018, "Member 'LGUIBPLibrary_LGUIExecuteInputAction::pressOrRelease' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAxis
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_LGUIExecuteInputAxis final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIBPLibrary_LGUIExecuteInputAxis) == 0x000008, "Wrong alignment on LGUIBPLibrary_LGUIExecuteInputAxis");
static_assert(sizeof(LGUIBPLibrary_LGUIExecuteInputAxis) == 0x000020, "Wrong size on LGUIBPLibrary_LGUIExecuteInputAxis");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAxis, InputKey) == 0x000000, "Member 'LGUIBPLibrary_LGUIExecuteInputAxis::InputKey' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LGUIExecuteInputAxis, Value) == 0x000018, "Member 'LGUIBPLibrary_LGUIExecuteInputAxis::Value' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LoadPrefab
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_LoadPrefab final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPrefab*                            InPrefab;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* LoadedRootActor)> InCallbackBeforeAwake;                            // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetRelativeTransformToIdentity;                    // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LoadPrefab) == 0x000008, "Wrong alignment on LGUIBPLibrary_LoadPrefab");
static_assert(sizeof(LGUIBPLibrary_LoadPrefab) == 0x000038, "Wrong size on LGUIBPLibrary_LoadPrefab");
static_assert(offsetof(LGUIBPLibrary_LoadPrefab, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_LoadPrefab::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefab, InPrefab) == 0x000008, "Member 'LGUIBPLibrary_LoadPrefab::InPrefab' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefab, InParent) == 0x000010, "Member 'LGUIBPLibrary_LoadPrefab::InParent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefab, InCallbackBeforeAwake) == 0x000018, "Member 'LGUIBPLibrary_LoadPrefab::InCallbackBeforeAwake' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefab, SetRelativeTransformToIdentity) == 0x000028, "Member 'LGUIBPLibrary_LoadPrefab::SetRelativeTransformToIdentity' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefab, ReturnValue) == 0x000030, "Member 'LGUIBPLibrary_LoadPrefab::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LoadPrefabWithReplacement
// 0x00D0 (0x00D0 - 0x0000)
struct LGUIBPLibrary_LoadPrefabWithReplacement final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPrefab*                            InPrefab;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UObject*, class UObject*>          InReplaceAssetMap;                                 // 0x0018(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class UClass*, class UClass*>            InReplaceClassMap;                                 // 0x0068(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* LoadedRootActor)> InCallbackBeforeAwake;                            // 0x00B8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00C8(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LoadPrefabWithReplacement) == 0x000008, "Wrong alignment on LGUIBPLibrary_LoadPrefabWithReplacement");
static_assert(sizeof(LGUIBPLibrary_LoadPrefabWithReplacement) == 0x0000D0, "Wrong size on LGUIBPLibrary_LoadPrefabWithReplacement");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, InPrefab) == 0x000008, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::InPrefab' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, InParent) == 0x000010, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::InParent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, InReplaceAssetMap) == 0x000018, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::InReplaceAssetMap' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, InReplaceClassMap) == 0x000068, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::InReplaceClassMap' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, InCallbackBeforeAwake) == 0x0000B8, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::InCallbackBeforeAwake' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithReplacement, ReturnValue) == 0x0000C8, "Member 'LGUIBPLibrary_LoadPrefabWithReplacement::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.LoadPrefabWithTransform
// 0x0078 (0x0078 - 0x0000)
struct LGUIBPLibrary_LoadPrefabWithTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPrefab*                            InPrefab;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0048(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* LoadedRootActor)> InCallbackBeforeAwake;                            // 0x0060(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_LoadPrefabWithTransform) == 0x000008, "Wrong alignment on LGUIBPLibrary_LoadPrefabWithTransform");
static_assert(sizeof(LGUIBPLibrary_LoadPrefabWithTransform) == 0x000078, "Wrong size on LGUIBPLibrary_LoadPrefabWithTransform");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, WorldContextObject) == 0x000000, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, InPrefab) == 0x000008, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::InPrefab' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, InParent) == 0x000010, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::InParent' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, Location) == 0x000018, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::Location' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, Rotation) == 0x000030, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::Rotation' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, Scale) == 0x000048, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::Scale' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, InCallbackBeforeAwake) == 0x000060, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::InCallbackBeforeAwake' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_LoadPrefabWithTransform, ReturnValue) == 0x000070, "Member 'LGUIBPLibrary_LoadPrefabWithTransform::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.PivotTo
// 0x0030 (0x0030 - 0x0000)
struct LGUIBPLibrary_PivotTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_PivotTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_PivotTo");
static_assert(sizeof(LGUIBPLibrary_PivotTo) == 0x000030, "Wrong size on LGUIBPLibrary_PivotTo");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Target) == 0x000000, "Member 'LGUIBPLibrary_PivotTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_PivotTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Duration) == 0x000018, "Member 'LGUIBPLibrary_PivotTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Delay) == 0x00001C, "Member 'LGUIBPLibrary_PivotTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, Ease) == 0x000020, "Member 'LGUIBPLibrary_PivotTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PivotTo, ReturnValue) == 0x000028, "Member 'LGUIBPLibrary_PivotTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.PrepareDuplicateData
// 0x04A0 (0x04A0 - 0x0000)
struct LGUIBPLibrary_PrepareDuplicateData final
{
public:
	class AActor*                                 Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLGUIDuplicateDataContainer            Data;                                              // 0x0010(0x0490)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_PrepareDuplicateData) == 0x000010, "Wrong alignment on LGUIBPLibrary_PrepareDuplicateData");
static_assert(sizeof(LGUIBPLibrary_PrepareDuplicateData) == 0x0004A0, "Wrong size on LGUIBPLibrary_PrepareDuplicateData");
static_assert(offsetof(LGUIBPLibrary_PrepareDuplicateData, Target) == 0x000000, "Member 'LGUIBPLibrary_PrepareDuplicateData::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_PrepareDuplicateData, Data) == 0x000010, "Member 'LGUIBPLibrary_PrepareDuplicateData::Data' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchBottomTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchBottomTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchBottomTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchBottomTo");
static_assert(sizeof(LGUIBPLibrary_StretchBottomTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchBottomTo");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchBottomTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_StretchBottomTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchBottomTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchBottomTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchBottomTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchBottomTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchBottomTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchLeftTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchLeftTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchLeftTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchLeftTo");
static_assert(sizeof(LGUIBPLibrary_StretchLeftTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchLeftTo");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchLeftTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_StretchLeftTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchLeftTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchLeftTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchLeftTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchLeftTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchLeftTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchRightTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchRightTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchRightTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchRightTo");
static_assert(sizeof(LGUIBPLibrary_StretchRightTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchRightTo");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchRightTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_StretchRightTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchRightTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchRightTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchRightTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchRightTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchRightTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.StretchTopTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_StretchTopTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_StretchTopTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_StretchTopTo");
static_assert(sizeof(LGUIBPLibrary_StretchTopTo) == 0x000020, "Wrong size on LGUIBPLibrary_StretchTopTo");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Target) == 0x000000, "Member 'LGUIBPLibrary_StretchTopTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_StretchTopTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_StretchTopTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_StretchTopTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_StretchTopTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_StretchTopTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_StretchTopTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.UILocalPositionTo
// 0x0038 (0x0038 - 0x0000)
struct LGUIBPLibrary_UILocalPositionTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_UILocalPositionTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_UILocalPositionTo");
static_assert(sizeof(LGUIBPLibrary_UILocalPositionTo) == 0x000038, "Wrong size on LGUIBPLibrary_UILocalPositionTo");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Target) == 0x000000, "Member 'LGUIBPLibrary_UILocalPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_UILocalPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Duration) == 0x000020, "Member 'LGUIBPLibrary_UILocalPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Delay) == 0x000024, "Member 'LGUIBPLibrary_UILocalPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, Ease) == 0x000028, "Member 'LGUIBPLibrary_UILocalPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_UILocalPositionTo, ReturnValue) == 0x000030, "Member 'LGUIBPLibrary_UILocalPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.VerticalAnchoredPositionTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_VerticalAnchoredPositionTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_VerticalAnchoredPositionTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_VerticalAnchoredPositionTo");
static_assert(sizeof(LGUIBPLibrary_VerticalAnchoredPositionTo) == 0x000020, "Wrong size on LGUIBPLibrary_VerticalAnchoredPositionTo");
static_assert(offsetof(LGUIBPLibrary_VerticalAnchoredPositionTo, Target) == 0x000000, "Member 'LGUIBPLibrary_VerticalAnchoredPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_VerticalAnchoredPositionTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_VerticalAnchoredPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_VerticalAnchoredPositionTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_VerticalAnchoredPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_VerticalAnchoredPositionTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_VerticalAnchoredPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_VerticalAnchoredPositionTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_VerticalAnchoredPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_VerticalAnchoredPositionTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_VerticalAnchoredPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIBPLibrary.WidthTo
// 0x0020 (0x0020 - 0x0000)
struct LGUIBPLibrary_WidthTo final
{
public:
	class UUIItem*                                Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIBPLibrary_WidthTo) == 0x000008, "Wrong alignment on LGUIBPLibrary_WidthTo");
static_assert(sizeof(LGUIBPLibrary_WidthTo) == 0x000020, "Wrong size on LGUIBPLibrary_WidthTo");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Target) == 0x000000, "Member 'LGUIBPLibrary_WidthTo::Target' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, endValue) == 0x000008, "Member 'LGUIBPLibrary_WidthTo::endValue' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Duration) == 0x00000C, "Member 'LGUIBPLibrary_WidthTo::Duration' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Delay) == 0x000010, "Member 'LGUIBPLibrary_WidthTo::Delay' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, Ease) == 0x000014, "Member 'LGUIBPLibrary_WidthTo::Ease' has a wrong offset!");
static_assert(offsetof(LGUIBPLibrary_WidthTo, ReturnValue) == 0x000018, "Member 'LGUIBPLibrary_WidthTo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetBlendDepth
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_SetBlendDepth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetBlendDepth) == 0x000004, "Wrong alignment on LGUICanvas_SetBlendDepth");
static_assert(sizeof(LGUICanvas_SetBlendDepth) == 0x000004, "Wrong size on LGUICanvas_SetBlendDepth");
static_assert(offsetof(LGUICanvas_SetBlendDepth, Value) == 0x000000, "Member 'LGUICanvas_SetBlendDepth::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetClipTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetClipTexture final
{
public:
	class UTexture2D*                             newTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetClipTexture) == 0x000008, "Wrong alignment on LGUICanvas_SetClipTexture");
static_assert(sizeof(LGUICanvas_SetClipTexture) == 0x000008, "Wrong size on LGUICanvas_SetClipTexture");
static_assert(offsetof(LGUICanvas_SetClipTexture, newTexture) == 0x000000, "Member 'LGUICanvas_SetClipTexture::newTexture' has a wrong offset!");

// Function LGUI.LGUICanvas.SetClipType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetClipType final
{
public:
	ELGUICanvasClipType                           newClipType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetClipType) == 0x000001, "Wrong alignment on LGUICanvas_SetClipType");
static_assert(sizeof(LGUICanvas_SetClipType) == 0x000001, "Wrong size on LGUICanvas_SetClipType");
static_assert(offsetof(LGUICanvas_SetClipType, newClipType) == 0x000000, "Member 'LGUICanvas_SetClipType::newClipType' has a wrong offset!");

// Function LGUI.LGUICanvas.SetCustomClip
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetCustomClip final
{
public:
	class ULGUICanvasCustomClip*                  Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetCustomClip) == 0x000008, "Wrong alignment on LGUICanvas_SetCustomClip");
static_assert(sizeof(LGUICanvas_SetCustomClip) == 0x000008, "Wrong size on LGUICanvas_SetCustomClip");
static_assert(offsetof(LGUICanvas_SetCustomClip, Value) == 0x000000, "Member 'LGUICanvas_SetCustomClip::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetDefaultMaterials
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_SetDefaultMaterials final
{
public:
	TArray<class UMaterialInterface*>             InMaterialArray;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetDefaultMaterials) == 0x000008, "Wrong alignment on LGUICanvas_SetDefaultMaterials");
static_assert(sizeof(LGUICanvas_SetDefaultMaterials) == 0x000010, "Wrong size on LGUICanvas_SetDefaultMaterials");
static_assert(offsetof(LGUICanvas_SetDefaultMaterials, InMaterialArray) == 0x000000, "Member 'LGUICanvas_SetDefaultMaterials::InMaterialArray' has a wrong offset!");

// Function LGUI.LGUICanvas.SetDefaultMeshType
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetDefaultMeshType final
{
public:
	TSubclassOf<class ULGUIMeshComponent>         InValue;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetDefaultMeshType) == 0x000008, "Wrong alignment on LGUICanvas_SetDefaultMeshType");
static_assert(sizeof(LGUICanvas_SetDefaultMeshType) == 0x000008, "Wrong size on LGUICanvas_SetDefaultMeshType");
static_assert(offsetof(LGUICanvas_SetDefaultMeshType, InValue) == 0x000000, "Member 'LGUICanvas_SetDefaultMeshType::InValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetDepthFade
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_SetDepthFade final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetDepthFade) == 0x000004, "Wrong alignment on LGUICanvas_SetDepthFade");
static_assert(sizeof(LGUICanvas_SetDepthFade) == 0x000004, "Wrong size on LGUICanvas_SetDepthFade");
static_assert(offsetof(LGUICanvas_SetDepthFade, Value) == 0x000000, "Member 'LGUICanvas_SetDepthFade::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetDynamicPixelsPerUnit
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_SetDynamicPixelsPerUnit final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetDynamicPixelsPerUnit) == 0x000004, "Wrong alignment on LGUICanvas_SetDynamicPixelsPerUnit");
static_assert(sizeof(LGUICanvas_SetDynamicPixelsPerUnit) == 0x000004, "Wrong size on LGUICanvas_SetDynamicPixelsPerUnit");
static_assert(offsetof(LGUICanvas_SetDynamicPixelsPerUnit, NewValue) == 0x000000, "Member 'LGUICanvas_SetDynamicPixelsPerUnit::NewValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetEnableDepthTest
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetEnableDepthTest final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetEnableDepthTest) == 0x000001, "Wrong alignment on LGUICanvas_SetEnableDepthTest");
static_assert(sizeof(LGUICanvas_SetEnableDepthTest) == 0x000001, "Wrong size on LGUICanvas_SetEnableDepthTest");
static_assert(offsetof(LGUICanvas_SetEnableDepthTest, Value) == 0x000000, "Member 'LGUICanvas_SetEnableDepthTest::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetInheriRectClip
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetInheriRectClip final
{
public:
	bool                                          newBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetInheriRectClip) == 0x000001, "Wrong alignment on LGUICanvas_SetInheriRectClip");
static_assert(sizeof(LGUICanvas_SetInheriRectClip) == 0x000001, "Wrong size on LGUICanvas_SetInheriRectClip");
static_assert(offsetof(LGUICanvas_SetInheriRectClip, newBool) == 0x000000, "Member 'LGUICanvas_SetInheriRectClip::newBool' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOverrideFovAngle
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetOverrideFovAngle final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InValue;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOverrideFovAngle) == 0x000004, "Wrong alignment on LGUICanvas_SetOverrideFovAngle");
static_assert(sizeof(LGUICanvas_SetOverrideFovAngle) == 0x000008, "Wrong size on LGUICanvas_SetOverrideFovAngle");
static_assert(offsetof(LGUICanvas_SetOverrideFovAngle, InOverride) == 0x000000, "Member 'LGUICanvas_SetOverrideFovAngle::InOverride' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetOverrideFovAngle, InValue) == 0x000004, "Member 'LGUICanvas_SetOverrideFovAngle::InValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOverrideProjectionMatrix
// 0x0090 (0x0090 - 0x0000)
struct LGUICanvas_SetOverrideProjectionMatrix final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0xF];                                        // 0x0001(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatrix                                InValue;                                           // 0x0010(0x0080)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOverrideProjectionMatrix) == 0x000010, "Wrong alignment on LGUICanvas_SetOverrideProjectionMatrix");
static_assert(sizeof(LGUICanvas_SetOverrideProjectionMatrix) == 0x000090, "Wrong size on LGUICanvas_SetOverrideProjectionMatrix");
static_assert(offsetof(LGUICanvas_SetOverrideProjectionMatrix, InOverride) == 0x000000, "Member 'LGUICanvas_SetOverrideProjectionMatrix::InOverride' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetOverrideProjectionMatrix, InValue) == 0x000010, "Member 'LGUICanvas_SetOverrideProjectionMatrix::InValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOverrideSorting
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetOverrideSorting final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOverrideSorting) == 0x000001, "Wrong alignment on LGUICanvas_SetOverrideSorting");
static_assert(sizeof(LGUICanvas_SetOverrideSorting) == 0x000001, "Wrong size on LGUICanvas_SetOverrideSorting");
static_assert(offsetof(LGUICanvas_SetOverrideSorting, Value) == 0x000000, "Member 'LGUICanvas_SetOverrideSorting::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOverrideViewLoation
// 0x0020 (0x0020 - 0x0000)
struct LGUICanvas_SetOverrideViewLoation final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InValue;                                           // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOverrideViewLoation) == 0x000008, "Wrong alignment on LGUICanvas_SetOverrideViewLoation");
static_assert(sizeof(LGUICanvas_SetOverrideViewLoation) == 0x000020, "Wrong size on LGUICanvas_SetOverrideViewLoation");
static_assert(offsetof(LGUICanvas_SetOverrideViewLoation, InOverride) == 0x000000, "Member 'LGUICanvas_SetOverrideViewLoation::InOverride' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetOverrideViewLoation, InValue) == 0x000008, "Member 'LGUICanvas_SetOverrideViewLoation::InValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetOverrideViewRotation
// 0x0020 (0x0020 - 0x0000)
struct LGUICanvas_SetOverrideViewRotation final
{
public:
	bool                                          InOverride;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InValue;                                           // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetOverrideViewRotation) == 0x000008, "Wrong alignment on LGUICanvas_SetOverrideViewRotation");
static_assert(sizeof(LGUICanvas_SetOverrideViewRotation) == 0x000020, "Wrong size on LGUICanvas_SetOverrideViewRotation");
static_assert(offsetof(LGUICanvas_SetOverrideViewRotation, InOverride) == 0x000000, "Member 'LGUICanvas_SetOverrideViewRotation::InOverride' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetOverrideViewRotation, InValue) == 0x000008, "Member 'LGUICanvas_SetOverrideViewRotation::InValue' has a wrong offset!");

// Function LGUI.LGUICanvas.SetPixelPerfect
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetPixelPerfect final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetPixelPerfect) == 0x000001, "Wrong alignment on LGUICanvas_SetPixelPerfect");
static_assert(sizeof(LGUICanvas_SetPixelPerfect) == 0x000001, "Wrong size on LGUICanvas_SetPixelPerfect");
static_assert(offsetof(LGUICanvas_SetPixelPerfect, Value) == 0x000000, "Member 'LGUICanvas_SetPixelPerfect::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetProjectionParameters
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_SetProjectionParameters final
{
public:
	ECameraProjectionMode                         InProjectionType;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InFovAngle;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InNearClipPlane;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InFarClipPlane;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetProjectionParameters) == 0x000004, "Wrong alignment on LGUICanvas_SetProjectionParameters");
static_assert(sizeof(LGUICanvas_SetProjectionParameters) == 0x000010, "Wrong size on LGUICanvas_SetProjectionParameters");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InProjectionType) == 0x000000, "Member 'LGUICanvas_SetProjectionParameters::InProjectionType' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InFovAngle) == 0x000004, "Member 'LGUICanvas_SetProjectionParameters::InFovAngle' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InNearClipPlane) == 0x000008, "Member 'LGUICanvas_SetProjectionParameters::InNearClipPlane' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetProjectionParameters, InFarClipPlane) == 0x00000C, "Member 'LGUICanvas_SetProjectionParameters::InFarClipPlane' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRectClipFeather
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_SetRectClipFeather final
{
public:
	struct FVector2D                              newFeather;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRectClipFeather) == 0x000008, "Wrong alignment on LGUICanvas_SetRectClipFeather");
static_assert(sizeof(LGUICanvas_SetRectClipFeather) == 0x000010, "Wrong size on LGUICanvas_SetRectClipFeather");
static_assert(offsetof(LGUICanvas_SetRectClipFeather, newFeather) == 0x000000, "Member 'LGUICanvas_SetRectClipFeather::newFeather' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRectClipOffset
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_SetRectClipOffset final
{
public:
	struct FMargin                                newOffset;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRectClipOffset) == 0x000004, "Wrong alignment on LGUICanvas_SetRectClipOffset");
static_assert(sizeof(LGUICanvas_SetRectClipOffset) == 0x000010, "Wrong size on LGUICanvas_SetRectClipOffset");
static_assert(offsetof(LGUICanvas_SetRectClipOffset, newOffset) == 0x000000, "Member 'LGUICanvas_SetRectClipOffset::newOffset' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetRenderMode final
{
public:
	ELGUIRenderMode                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderMode) == 0x000001, "Wrong alignment on LGUICanvas_SetRenderMode");
static_assert(sizeof(LGUICanvas_SetRenderMode) == 0x000001, "Wrong size on LGUICanvas_SetRenderMode");
static_assert(offsetof(LGUICanvas_SetRenderMode, Value) == 0x000000, "Member 'LGUICanvas_SetRenderMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderTarget) == 0x000008, "Wrong alignment on LGUICanvas_SetRenderTarget");
static_assert(sizeof(LGUICanvas_SetRenderTarget) == 0x000008, "Wrong size on LGUICanvas_SetRenderTarget");
static_assert(offsetof(LGUICanvas_SetRenderTarget, Value) == 0x000000, "Member 'LGUICanvas_SetRenderTarget::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderTargetResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_SetRenderTargetResolutionScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderTargetResolutionScale) == 0x000004, "Wrong alignment on LGUICanvas_SetRenderTargetResolutionScale");
static_assert(sizeof(LGUICanvas_SetRenderTargetResolutionScale) == 0x000004, "Wrong size on LGUICanvas_SetRenderTargetResolutionScale");
static_assert(offsetof(LGUICanvas_SetRenderTargetResolutionScale, Value) == 0x000000, "Member 'LGUICanvas_SetRenderTargetResolutionScale::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderTargetSizeMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetRenderTargetSizeMode final
{
public:
	ELGUICanvasRenderTargetSizeMode               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderTargetSizeMode) == 0x000001, "Wrong alignment on LGUICanvas_SetRenderTargetSizeMode");
static_assert(sizeof(LGUICanvas_SetRenderTargetSizeMode) == 0x000001, "Wrong size on LGUICanvas_SetRenderTargetSizeMode");
static_assert(offsetof(LGUICanvas_SetRenderTargetSizeMode, Value) == 0x000000, "Member 'LGUICanvas_SetRenderTargetSizeMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetRenderTargetUpdateMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetRenderTargetUpdateMode final
{
public:
	ELGUICanvasRenderTargetUpdateMode             Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetRenderTargetUpdateMode) == 0x000001, "Wrong alignment on LGUICanvas_SetRenderTargetUpdateMode");
static_assert(sizeof(LGUICanvas_SetRenderTargetUpdateMode) == 0x000001, "Wrong size on LGUICanvas_SetRenderTargetUpdateMode");
static_assert(offsetof(LGUICanvas_SetRenderTargetUpdateMode, Value) == 0x000000, "Member 'LGUICanvas_SetRenderTargetUpdateMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvas.SetSortOrder
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_SetSortOrder final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          propagateToChildrenCanvas;                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvas_SetSortOrder) == 0x000004, "Wrong alignment on LGUICanvas_SetSortOrder");
static_assert(sizeof(LGUICanvas_SetSortOrder) == 0x000008, "Wrong size on LGUICanvas_SetSortOrder");
static_assert(offsetof(LGUICanvas_SetSortOrder, NewValue) == 0x000000, "Member 'LGUICanvas_SetSortOrder::NewValue' has a wrong offset!");
static_assert(offsetof(LGUICanvas_SetSortOrder, propagateToChildrenCanvas) == 0x000004, "Member 'LGUICanvas_SetSortOrder::propagateToChildrenCanvas' has a wrong offset!");

// Function LGUI.LGUICanvas.SetSortOrderToHighestOfHierarchy
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetSortOrderToHighestOfHierarchy final
{
public:
	bool                                          propagateToChildrenCanvas;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetSortOrderToHighestOfHierarchy) == 0x000001, "Wrong alignment on LGUICanvas_SetSortOrderToHighestOfHierarchy");
static_assert(sizeof(LGUICanvas_SetSortOrderToHighestOfHierarchy) == 0x000001, "Wrong size on LGUICanvas_SetSortOrderToHighestOfHierarchy");
static_assert(offsetof(LGUICanvas_SetSortOrderToHighestOfHierarchy, propagateToChildrenCanvas) == 0x000000, "Member 'LGUICanvas_SetSortOrderToHighestOfHierarchy::propagateToChildrenCanvas' has a wrong offset!");

// Function LGUI.LGUICanvas.SetSortOrderToLowestOfHierarchy
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_SetSortOrderToLowestOfHierarchy final
{
public:
	bool                                          propagateToChildrenCanvas;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_SetSortOrderToLowestOfHierarchy) == 0x000001, "Wrong alignment on LGUICanvas_SetSortOrderToLowestOfHierarchy");
static_assert(sizeof(LGUICanvas_SetSortOrderToLowestOfHierarchy) == 0x000001, "Wrong size on LGUICanvas_SetSortOrderToLowestOfHierarchy");
static_assert(offsetof(LGUICanvas_SetSortOrderToLowestOfHierarchy, propagateToChildrenCanvas) == 0x000000, "Member 'LGUICanvas_SetSortOrderToLowestOfHierarchy::propagateToChildrenCanvas' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualBlendDepth
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetActualBlendDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualBlendDepth) == 0x000004, "Wrong alignment on LGUICanvas_GetActualBlendDepth");
static_assert(sizeof(LGUICanvas_GetActualBlendDepth) == 0x000004, "Wrong size on LGUICanvas_GetActualBlendDepth");
static_assert(offsetof(LGUICanvas_GetActualBlendDepth, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualBlendDepth::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualClipType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualClipType final
{
public:
	ELGUICanvasClipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualClipType) == 0x000001, "Wrong alignment on LGUICanvas_GetActualClipType");
static_assert(sizeof(LGUICanvas_GetActualClipType) == 0x000001, "Wrong size on LGUICanvas_GetActualClipType");
static_assert(offsetof(LGUICanvas_GetActualClipType, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualClipType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualCustomClip
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetActualCustomClip final
{
public:
	class ULGUICanvasCustomClip*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualCustomClip) == 0x000008, "Wrong alignment on LGUICanvas_GetActualCustomClip");
static_assert(sizeof(LGUICanvas_GetActualCustomClip) == 0x000008, "Wrong size on LGUICanvas_GetActualCustomClip");
static_assert(offsetof(LGUICanvas_GetActualCustomClip, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualCustomClip::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualDepthFade
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetActualDepthFade final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualDepthFade) == 0x000004, "Wrong alignment on LGUICanvas_GetActualDepthFade");
static_assert(sizeof(LGUICanvas_GetActualDepthFade) == 0x000004, "Wrong size on LGUICanvas_GetActualDepthFade");
static_assert(offsetof(LGUICanvas_GetActualDepthFade, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualDepthFade::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualDynamicPixelsPerUnit
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetActualDynamicPixelsPerUnit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualDynamicPixelsPerUnit) == 0x000004, "Wrong alignment on LGUICanvas_GetActualDynamicPixelsPerUnit");
static_assert(sizeof(LGUICanvas_GetActualDynamicPixelsPerUnit) == 0x000004, "Wrong size on LGUICanvas_GetActualDynamicPixelsPerUnit");
static_assert(offsetof(LGUICanvas_GetActualDynamicPixelsPerUnit, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualDynamicPixelsPerUnit::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualPixelPerfect
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualPixelPerfect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualPixelPerfect) == 0x000001, "Wrong alignment on LGUICanvas_GetActualPixelPerfect");
static_assert(sizeof(LGUICanvas_GetActualPixelPerfect) == 0x000001, "Wrong size on LGUICanvas_GetActualPixelPerfect");
static_assert(offsetof(LGUICanvas_GetActualPixelPerfect, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualPixelPerfect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualRenderMode final
{
public:
	ELGUIRenderMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderMode) == 0x000001, "Wrong alignment on LGUICanvas_GetActualRenderMode");
static_assert(sizeof(LGUICanvas_GetActualRenderMode) == 0x000001, "Wrong size on LGUICanvas_GetActualRenderMode");
static_assert(offsetof(LGUICanvas_GetActualRenderMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetActualRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderTarget) == 0x000008, "Wrong alignment on LGUICanvas_GetActualRenderTarget");
static_assert(sizeof(LGUICanvas_GetActualRenderTarget) == 0x000008, "Wrong size on LGUICanvas_GetActualRenderTarget");
static_assert(offsetof(LGUICanvas_GetActualRenderTarget, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderTarget::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderTargetResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetActualRenderTargetResolutionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderTargetResolutionScale) == 0x000004, "Wrong alignment on LGUICanvas_GetActualRenderTargetResolutionScale");
static_assert(sizeof(LGUICanvas_GetActualRenderTargetResolutionScale) == 0x000004, "Wrong size on LGUICanvas_GetActualRenderTargetResolutionScale");
static_assert(offsetof(LGUICanvas_GetActualRenderTargetResolutionScale, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderTargetResolutionScale::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderTargetSizeMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualRenderTargetSizeMode final
{
public:
	ELGUICanvasRenderTargetSizeMode               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderTargetSizeMode) == 0x000001, "Wrong alignment on LGUICanvas_GetActualRenderTargetSizeMode");
static_assert(sizeof(LGUICanvas_GetActualRenderTargetSizeMode) == 0x000001, "Wrong size on LGUICanvas_GetActualRenderTargetSizeMode");
static_assert(offsetof(LGUICanvas_GetActualRenderTargetSizeMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderTargetSizeMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualRenderTargetUpdateMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetActualRenderTargetUpdateMode final
{
public:
	ELGUICanvasRenderTargetUpdateMode             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualRenderTargetUpdateMode) == 0x000001, "Wrong alignment on LGUICanvas_GetActualRenderTargetUpdateMode");
static_assert(sizeof(LGUICanvas_GetActualRenderTargetUpdateMode) == 0x000001, "Wrong size on LGUICanvas_GetActualRenderTargetUpdateMode");
static_assert(offsetof(LGUICanvas_GetActualRenderTargetUpdateMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualRenderTargetUpdateMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetActualSortOrder
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetActualSortOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetActualSortOrder) == 0x000004, "Wrong alignment on LGUICanvas_GetActualSortOrder");
static_assert(sizeof(LGUICanvas_GetActualSortOrder) == 0x000004, "Wrong size on LGUICanvas_GetActualSortOrder");
static_assert(offsetof(LGUICanvas_GetActualSortOrder, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetActualSortOrder::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetBlendDepth
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetBlendDepth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetBlendDepth) == 0x000004, "Wrong alignment on LGUICanvas_GetBlendDepth");
static_assert(sizeof(LGUICanvas_GetBlendDepth) == 0x000004, "Wrong size on LGUICanvas_GetBlendDepth");
static_assert(offsetof(LGUICanvas_GetBlendDepth, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetBlendDepth::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipFeather
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_GetClipFeather final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipFeather) == 0x000008, "Wrong alignment on LGUICanvas_GetClipFeather");
static_assert(sizeof(LGUICanvas_GetClipFeather) == 0x000010, "Wrong size on LGUICanvas_GetClipFeather");
static_assert(offsetof(LGUICanvas_GetClipFeather, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipFeather::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetClipTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipTexture) == 0x000008, "Wrong alignment on LGUICanvas_GetClipTexture");
static_assert(sizeof(LGUICanvas_GetClipTexture) == 0x000008, "Wrong size on LGUICanvas_GetClipTexture");
static_assert(offsetof(LGUICanvas_GetClipTexture, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetClipType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetClipType final
{
public:
	ELGUICanvasClipType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetClipType) == 0x000001, "Wrong alignment on LGUICanvas_GetClipType");
static_assert(sizeof(LGUICanvas_GetClipType) == 0x000001, "Wrong size on LGUICanvas_GetClipType");
static_assert(offsetof(LGUICanvas_GetClipType, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetClipType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetCustomClip
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetCustomClip final
{
public:
	class ULGUICanvasCustomClip*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetCustomClip) == 0x000008, "Wrong alignment on LGUICanvas_GetCustomClip");
static_assert(sizeof(LGUICanvas_GetCustomClip) == 0x000008, "Wrong size on LGUICanvas_GetCustomClip");
static_assert(offsetof(LGUICanvas_GetCustomClip, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetCustomClip::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetDefaultMaterials
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvas_GetDefaultMaterials final
{
public:
	TArray<class UMaterialInterface*>             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetDefaultMaterials) == 0x000008, "Wrong alignment on LGUICanvas_GetDefaultMaterials");
static_assert(sizeof(LGUICanvas_GetDefaultMaterials) == 0x000010, "Wrong size on LGUICanvas_GetDefaultMaterials");
static_assert(offsetof(LGUICanvas_GetDefaultMaterials, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetDefaultMaterials::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetDefaultMeshType
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetDefaultMeshType final
{
public:
	TSubclassOf<class ULGUIMeshComponent>         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetDefaultMeshType) == 0x000008, "Wrong alignment on LGUICanvas_GetDefaultMeshType");
static_assert(sizeof(LGUICanvas_GetDefaultMeshType) == 0x000008, "Wrong size on LGUICanvas_GetDefaultMeshType");
static_assert(offsetof(LGUICanvas_GetDefaultMeshType, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetDefaultMeshType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetDepthFade
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetDepthFade final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetDepthFade) == 0x000004, "Wrong alignment on LGUICanvas_GetDepthFade");
static_assert(sizeof(LGUICanvas_GetDepthFade) == 0x000004, "Wrong size on LGUICanvas_GetDepthFade");
static_assert(offsetof(LGUICanvas_GetDepthFade, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetDepthFade::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetDynamicPixelsPerUnit
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetDynamicPixelsPerUnit final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetDynamicPixelsPerUnit) == 0x000004, "Wrong alignment on LGUICanvas_GetDynamicPixelsPerUnit");
static_assert(sizeof(LGUICanvas_GetDynamicPixelsPerUnit) == 0x000004, "Wrong size on LGUICanvas_GetDynamicPixelsPerUnit");
static_assert(offsetof(LGUICanvas_GetDynamicPixelsPerUnit, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetDynamicPixelsPerUnit::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetEnableDepthTest
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetEnableDepthTest final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetEnableDepthTest) == 0x000001, "Wrong alignment on LGUICanvas_GetEnableDepthTest");
static_assert(sizeof(LGUICanvas_GetEnableDepthTest) == 0x000001, "Wrong size on LGUICanvas_GetEnableDepthTest");
static_assert(offsetof(LGUICanvas_GetEnableDepthTest, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetEnableDepthTest::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetInheritRectClip
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetInheritRectClip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetInheritRectClip) == 0x000001, "Wrong alignment on LGUICanvas_GetInheritRectClip");
static_assert(sizeof(LGUICanvas_GetInheritRectClip) == 0x000001, "Wrong size on LGUICanvas_GetInheritRectClip");
static_assert(offsetof(LGUICanvas_GetInheritRectClip, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetInheritRectClip::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetOverrideSorting
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetOverrideSorting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetOverrideSorting) == 0x000001, "Wrong alignment on LGUICanvas_GetOverrideSorting");
static_assert(sizeof(LGUICanvas_GetOverrideSorting) == 0x000001, "Wrong size on LGUICanvas_GetOverrideSorting");
static_assert(offsetof(LGUICanvas_GetOverrideSorting, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetOverrideSorting::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetPixelPerfect
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetPixelPerfect final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetPixelPerfect) == 0x000001, "Wrong alignment on LGUICanvas_GetPixelPerfect");
static_assert(sizeof(LGUICanvas_GetPixelPerfect) == 0x000001, "Wrong size on LGUICanvas_GetPixelPerfect");
static_assert(offsetof(LGUICanvas_GetPixelPerfect, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetPixelPerfect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRenderMode final
{
public:
	ELGUIRenderMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderMode) == 0x000001, "Wrong alignment on LGUICanvas_GetRenderMode");
static_assert(sizeof(LGUICanvas_GetRenderMode) == 0x000001, "Wrong size on LGUICanvas_GetRenderMode");
static_assert(offsetof(LGUICanvas_GetRenderMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderTarget) == 0x000008, "Wrong alignment on LGUICanvas_GetRenderTarget");
static_assert(sizeof(LGUICanvas_GetRenderTarget) == 0x000008, "Wrong size on LGUICanvas_GetRenderTarget");
static_assert(offsetof(LGUICanvas_GetRenderTarget, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderTargetResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetRenderTargetResolutionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderTargetResolutionScale) == 0x000004, "Wrong alignment on LGUICanvas_GetRenderTargetResolutionScale");
static_assert(sizeof(LGUICanvas_GetRenderTargetResolutionScale) == 0x000004, "Wrong size on LGUICanvas_GetRenderTargetResolutionScale");
static_assert(offsetof(LGUICanvas_GetRenderTargetResolutionScale, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderTargetResolutionScale::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderTargetSizeMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRenderTargetSizeMode final
{
public:
	ELGUICanvasRenderTargetSizeMode               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderTargetSizeMode) == 0x000001, "Wrong alignment on LGUICanvas_GetRenderTargetSizeMode");
static_assert(sizeof(LGUICanvas_GetRenderTargetSizeMode) == 0x000001, "Wrong size on LGUICanvas_GetRenderTargetSizeMode");
static_assert(offsetof(LGUICanvas_GetRenderTargetSizeMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderTargetSizeMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRenderTargetUpdateMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRenderTargetUpdateMode final
{
public:
	ELGUICanvasRenderTargetUpdateMode             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRenderTargetUpdateMode) == 0x000001, "Wrong alignment on LGUICanvas_GetRenderTargetUpdateMode");
static_assert(sizeof(LGUICanvas_GetRenderTargetUpdateMode) == 0x000001, "Wrong size on LGUICanvas_GetRenderTargetUpdateMode");
static_assert(offsetof(LGUICanvas_GetRenderTargetUpdateMode, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRenderTargetUpdateMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireNormal
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireNormal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireNormal) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireNormal");
static_assert(sizeof(LGUICanvas_GetRequireNormal) == 0x000001, "Wrong size on LGUICanvas_GetRequireNormal");
static_assert(offsetof(LGUICanvas_GetRequireNormal, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireNormal::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireTangent
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireTangent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireTangent) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireTangent");
static_assert(sizeof(LGUICanvas_GetRequireTangent) == 0x000001, "Wrong size on LGUICanvas_GetRequireTangent");
static_assert(offsetof(LGUICanvas_GetRequireTangent, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireTangent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireUV1
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireUV1 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireUV1) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireUV1");
static_assert(sizeof(LGUICanvas_GetRequireUV1) == 0x000001, "Wrong size on LGUICanvas_GetRequireUV1");
static_assert(offsetof(LGUICanvas_GetRequireUV1, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireUV1::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireUV2
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireUV2 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireUV2) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireUV2");
static_assert(sizeof(LGUICanvas_GetRequireUV2) == 0x000001, "Wrong size on LGUICanvas_GetRequireUV2");
static_assert(offsetof(LGUICanvas_GetRequireUV2, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireUV2::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRequireUV3
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvas_GetRequireUV3 final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRequireUV3) == 0x000001, "Wrong alignment on LGUICanvas_GetRequireUV3");
static_assert(sizeof(LGUICanvas_GetRequireUV3) == 0x000001, "Wrong size on LGUICanvas_GetRequireUV3");
static_assert(offsetof(LGUICanvas_GetRequireUV3, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRequireUV3::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetRootCanvas
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetRootCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetRootCanvas) == 0x000008, "Wrong alignment on LGUICanvas_GetRootCanvas");
static_assert(sizeof(LGUICanvas_GetRootCanvas) == 0x000008, "Wrong size on LGUICanvas_GetRootCanvas");
static_assert(offsetof(LGUICanvas_GetRootCanvas, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetRootCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetSortOrder
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvas_GetSortOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetSortOrder) == 0x000004, "Wrong alignment on LGUICanvas_GetSortOrder");
static_assert(sizeof(LGUICanvas_GetSortOrder) == 0x000004, "Wrong size on LGUICanvas_GetSortOrder");
static_assert(offsetof(LGUICanvas_GetSortOrder, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetSortOrder::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvas.GetUIItem
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvas_GetUIItem final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvas_GetUIItem) == 0x000008, "Wrong alignment on LGUICanvas_GetUIItem");
static_assert(sizeof(LGUICanvas_GetUIItem) == 0x000008, "Wrong size on LGUICanvas_GetUIItem");
static_assert(offsetof(LGUICanvas_GetUIItem, ReturnValue) == 0x000000, "Member 'LGUICanvas_GetUIItem::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip.ReceiveApplyMaterialParameter
// 0x0018 (0x0018 - 0x0000)
struct LGUICanvasCustomClip_ReceiveApplyMaterialParameter final
{
public:
	class UMaterialInstanceDynamic*               InMaterial;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUICanvas*                            InCanvas;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                InUIItem;                                          // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_ReceiveApplyMaterialParameter) == 0x000008, "Wrong alignment on LGUICanvasCustomClip_ReceiveApplyMaterialParameter");
static_assert(sizeof(LGUICanvasCustomClip_ReceiveApplyMaterialParameter) == 0x000018, "Wrong size on LGUICanvasCustomClip_ReceiveApplyMaterialParameter");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveApplyMaterialParameter, InMaterial) == 0x000000, "Member 'LGUICanvasCustomClip_ReceiveApplyMaterialParameter::InMaterial' has a wrong offset!");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveApplyMaterialParameter, InCanvas) == 0x000008, "Member 'LGUICanvasCustomClip_ReceiveApplyMaterialParameter::InCanvas' has a wrong offset!");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveApplyMaterialParameter, InUIItem) == 0x000010, "Member 'LGUICanvasCustomClip_ReceiveApplyMaterialParameter::InUIItem' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip.ReceiveCheckPointVisible
// 0x0030 (0x0030 - 0x0000)
struct LGUICanvasCustomClip_ReceiveCheckPointVisible final
{
public:
	struct FVector                                InWorldPoint;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUICanvas*                            InCanvas;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                InUIItem;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvasCustomClip_ReceiveCheckPointVisible) == 0x000008, "Wrong alignment on LGUICanvasCustomClip_ReceiveCheckPointVisible");
static_assert(sizeof(LGUICanvasCustomClip_ReceiveCheckPointVisible) == 0x000030, "Wrong size on LGUICanvasCustomClip_ReceiveCheckPointVisible");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveCheckPointVisible, InWorldPoint) == 0x000000, "Member 'LGUICanvasCustomClip_ReceiveCheckPointVisible::InWorldPoint' has a wrong offset!");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveCheckPointVisible, InCanvas) == 0x000018, "Member 'LGUICanvasCustomClip_ReceiveCheckPointVisible::InCanvas' has a wrong offset!");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveCheckPointVisible, InUIItem) == 0x000020, "Member 'LGUICanvasCustomClip_ReceiveCheckPointVisible::InUIItem' has a wrong offset!");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveCheckPointVisible, ReturnValue) == 0x000028, "Member 'LGUICanvasCustomClip_ReceiveCheckPointVisible::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip.ReceiveMaterialContainsClipParameter
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter final
{
public:
	class UMaterialInterface*                     InMaterial;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter) == 0x000008, "Wrong alignment on LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter");
static_assert(sizeof(LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter) == 0x000010, "Wrong size on LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter, InMaterial) == 0x000000, "Member 'LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter::InMaterial' has a wrong offset!");
static_assert(offsetof(LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter, ReturnValue) == 0x000008, "Member 'LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithWave.SetFrequency
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PropertyWithWave_SetFrequency final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithWave_SetFrequency) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PropertyWithWave_SetFrequency");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithWave_SetFrequency) == 0x000004, "Wrong size on UIEffectTextAnimation_PropertyWithWave_SetFrequency");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithWave_SetFrequency, Value) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithWave_SetFrequency::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PropertyWithWave.GetFrequency
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PropertyWithWave_GetFrequency final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PropertyWithWave_GetFrequency) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PropertyWithWave_GetFrequency");
static_assert(sizeof(UIEffectTextAnimation_PropertyWithWave_GetFrequency) == 0x000004, "Wrong size on UIEffectTextAnimation_PropertyWithWave_GetFrequency");
static_assert(offsetof(UIEffectTextAnimation_PropertyWithWave_GetFrequency, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PropertyWithWave_GetFrequency::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.SetPosition
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionWaveProperty_SetPosition final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionWaveProperty_SetPosition) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionWaveProperty_SetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionWaveProperty_SetPosition) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionWaveProperty_SetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionWaveProperty_SetPosition, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionWaveProperty_SetPosition::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.GetPosition
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionWaveProperty_GetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionWaveProperty_GetPosition) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionWaveProperty_GetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionWaveProperty_GetPosition) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionWaveProperty_GetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionWaveProperty_GetPosition, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionWaveProperty_GetPosition::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip_Circle.SetSizeMultiply
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasCustomClip_Circle_SetSizeMultiply final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_Circle_SetSizeMultiply) == 0x000004, "Wrong alignment on LGUICanvasCustomClip_Circle_SetSizeMultiply");
static_assert(sizeof(LGUICanvasCustomClip_Circle_SetSizeMultiply) == 0x000004, "Wrong size on LGUICanvasCustomClip_Circle_SetSizeMultiply");
static_assert(offsetof(LGUICanvasCustomClip_Circle_SetSizeMultiply, Value) == 0x000000, "Member 'LGUICanvasCustomClip_Circle_SetSizeMultiply::Value' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip_Circle.GetSizeMultiply
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasCustomClip_Circle_GetSizeMultiply final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_Circle_GetSizeMultiply) == 0x000004, "Wrong alignment on LGUICanvasCustomClip_Circle_GetSizeMultiply");
static_assert(sizeof(LGUICanvasCustomClip_Circle_GetSizeMultiply) == 0x000004, "Wrong size on LGUICanvasCustomClip_Circle_GetSizeMultiply");
static_assert(offsetof(LGUICanvasCustomClip_Circle_GetSizeMultiply, ReturnValue) == 0x000000, "Member 'LGUICanvasCustomClip_Circle_GetSizeMultiply::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip_RoundedRect.SetCornerRadius
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasCustomClip_RoundedRect_SetCornerRadius final
{
public:
	struct FVector4f                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_RoundedRect_SetCornerRadius) == 0x000010, "Wrong alignment on LGUICanvasCustomClip_RoundedRect_SetCornerRadius");
static_assert(sizeof(LGUICanvasCustomClip_RoundedRect_SetCornerRadius) == 0x000010, "Wrong size on LGUICanvasCustomClip_RoundedRect_SetCornerRadius");
static_assert(offsetof(LGUICanvasCustomClip_RoundedRect_SetCornerRadius, Value) == 0x000000, "Member 'LGUICanvasCustomClip_RoundedRect_SetCornerRadius::Value' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip_RoundedRect.SetCornerRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode final
{
public:
	ELGUICanvasCustomClip_RoundedRect_UnitMode    Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode) == 0x000001, "Wrong alignment on LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode");
static_assert(sizeof(LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode) == 0x000001, "Wrong size on LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode");
static_assert(offsetof(LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode, Value) == 0x000000, "Member 'LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip_RoundedRect.GetCornerRadius
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasCustomClip_RoundedRect_GetCornerRadius final
{
public:
	struct FVector4f                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_RoundedRect_GetCornerRadius) == 0x000010, "Wrong alignment on LGUICanvasCustomClip_RoundedRect_GetCornerRadius");
static_assert(sizeof(LGUICanvasCustomClip_RoundedRect_GetCornerRadius) == 0x000010, "Wrong size on LGUICanvasCustomClip_RoundedRect_GetCornerRadius");
static_assert(offsetof(LGUICanvasCustomClip_RoundedRect_GetCornerRadius, ReturnValue) == 0x000000, "Member 'LGUICanvasCustomClip_RoundedRect_GetCornerRadius::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasCustomClip_RoundedRect.GetCornerRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode final
{
public:
	ELGUICanvasCustomClip_RoundedRect_UnitMode    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode) == 0x000001, "Wrong alignment on LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode");
static_assert(sizeof(LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode) == 0x000001, "Wrong size on LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode");
static_assert(offsetof(LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode, ReturnValue) == 0x000000, "Member 'LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleProperty.SetScale
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleProperty_SetScale final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleProperty_SetScale) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleProperty_SetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleProperty_SetScale) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleProperty_SetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleProperty_SetScale, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleProperty_SetScale::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleProperty.GetScale
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleProperty_GetScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleProperty_GetScale) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleProperty_GetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleProperty_GetScale) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleProperty_GetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleProperty_GetScale, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleProperty_GetScale::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScalerCustomScale.ReceiveCalculateSizeAndScale
// 0x0020 (0x0020 - 0x0000)
struct LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale final
{
public:
	class ULGUICanvasScaler*                      InCanvasScaler;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              InViewportSize;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              OutLGUICanvasSize;                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutScale;                                          // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale) == 0x000008, "Wrong alignment on LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale");
static_assert(sizeof(LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale) == 0x000020, "Wrong size on LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale");
static_assert(offsetof(LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale, InCanvasScaler) == 0x000000, "Member 'LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale::InCanvasScaler' has a wrong offset!");
static_assert(offsetof(LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale, InViewportSize) == 0x000008, "Member 'LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale::InViewportSize' has a wrong offset!");
static_assert(offsetof(LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale, OutLGUICanvasSize) == 0x000010, "Member 'LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale::OutLGUICanvasSize' has a wrong offset!");
static_assert(offsetof(LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale, OutScale) == 0x000018, "Member 'LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale::OutScale' has a wrong offset!");

// Function LGUI.LGUICanvasScalerCustomScale.ReceiveInit
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvasScalerCustomScale_ReceiveInit final
{
public:
	class ULGUICanvasScaler*                      InCanvasScaler;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScalerCustomScale_ReceiveInit) == 0x000008, "Wrong alignment on LGUICanvasScalerCustomScale_ReceiveInit");
static_assert(sizeof(LGUICanvasScalerCustomScale_ReceiveInit) == 0x000008, "Wrong size on LGUICanvasScalerCustomScale_ReceiveInit");
static_assert(offsetof(LGUICanvasScalerCustomScale_ReceiveInit, InCanvasScaler) == 0x000000, "Member 'LGUICanvasScalerCustomScale_ReceiveInit::InCanvasScaler' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.InstantiateActor
// 0x0018 (0x0018 - 0x0000)
struct LGUILifeCycleBehaviour_InstantiateActor final
{
public:
	class AActor*                                 OriginObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_InstantiateActor) == 0x000008, "Wrong alignment on LGUILifeCycleBehaviour_InstantiateActor");
static_assert(sizeof(LGUILifeCycleBehaviour_InstantiateActor) == 0x000018, "Wrong size on LGUILifeCycleBehaviour_InstantiateActor");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiateActor, OriginObject) == 0x000000, "Member 'LGUILifeCycleBehaviour_InstantiateActor::OriginObject' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiateActor, Parent) == 0x000008, "Member 'LGUILifeCycleBehaviour_InstantiateActor::Parent' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiateActor, ReturnValue) == 0x000010, "Member 'LGUILifeCycleBehaviour_InstantiateActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.InstantiatePrefab
// 0x0018 (0x0018 - 0x0000)
struct LGUILifeCycleBehaviour_InstantiatePrefab final
{
public:
	class ULGUIPrefab*                            OriginObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_InstantiatePrefab) == 0x000008, "Wrong alignment on LGUILifeCycleBehaviour_InstantiatePrefab");
static_assert(sizeof(LGUILifeCycleBehaviour_InstantiatePrefab) == 0x000018, "Wrong size on LGUILifeCycleBehaviour_InstantiatePrefab");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefab, OriginObject) == 0x000000, "Member 'LGUILifeCycleBehaviour_InstantiatePrefab::OriginObject' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefab, Parent) == 0x000008, "Member 'LGUILifeCycleBehaviour_InstantiatePrefab::Parent' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefab, ReturnValue) == 0x000010, "Member 'LGUILifeCycleBehaviour_InstantiatePrefab::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.InstantiatePrefabWithTransform
// 0x0060 (0x0060 - 0x0000)
struct LGUILifeCycleBehaviour_InstantiatePrefabWithTransform final
{
public:
	class ULGUIPrefab*                            OriginObject;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        Parent;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform) == 0x000008, "Wrong alignment on LGUILifeCycleBehaviour_InstantiatePrefabWithTransform");
static_assert(sizeof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform) == 0x000060, "Wrong size on LGUILifeCycleBehaviour_InstantiatePrefabWithTransform");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform, OriginObject) == 0x000000, "Member 'LGUILifeCycleBehaviour_InstantiatePrefabWithTransform::OriginObject' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform, Parent) == 0x000008, "Member 'LGUILifeCycleBehaviour_InstantiatePrefabWithTransform::Parent' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform, Location) == 0x000010, "Member 'LGUILifeCycleBehaviour_InstantiatePrefabWithTransform::Location' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform, Rotation) == 0x000028, "Member 'LGUILifeCycleBehaviour_InstantiatePrefabWithTransform::Rotation' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform, Scale) == 0x000040, "Member 'LGUILifeCycleBehaviour_InstantiatePrefabWithTransform::Scale' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleBehaviour_InstantiatePrefabWithTransform, ReturnValue) == 0x000058, "Member 'LGUILifeCycleBehaviour_InstantiatePrefabWithTransform::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.ReceiveUpdate
// 0x0004 (0x0004 - 0x0000)
struct LGUILifeCycleBehaviour_ReceiveUpdate final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_ReceiveUpdate) == 0x000004, "Wrong alignment on LGUILifeCycleBehaviour_ReceiveUpdate");
static_assert(sizeof(LGUILifeCycleBehaviour_ReceiveUpdate) == 0x000004, "Wrong size on LGUILifeCycleBehaviour_ReceiveUpdate");
static_assert(offsetof(LGUILifeCycleBehaviour_ReceiveUpdate, DeltaTime) == 0x000000, "Member 'LGUILifeCycleBehaviour_ReceiveUpdate::DeltaTime' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.SetCanExecuteUpdate
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleBehaviour_SetCanExecuteUpdate final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_SetCanExecuteUpdate) == 0x000001, "Wrong alignment on LGUILifeCycleBehaviour_SetCanExecuteUpdate");
static_assert(sizeof(LGUILifeCycleBehaviour_SetCanExecuteUpdate) == 0x000001, "Wrong size on LGUILifeCycleBehaviour_SetCanExecuteUpdate");
static_assert(offsetof(LGUILifeCycleBehaviour_SetCanExecuteUpdate, Value) == 0x000000, "Member 'LGUILifeCycleBehaviour_SetCanExecuteUpdate::Value' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleBehaviour_SetEnable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_SetEnable) == 0x000001, "Wrong alignment on LGUILifeCycleBehaviour_SetEnable");
static_assert(sizeof(LGUILifeCycleBehaviour_SetEnable) == 0x000001, "Wrong size on LGUILifeCycleBehaviour_SetEnable");
static_assert(offsetof(LGUILifeCycleBehaviour_SetEnable, Value) == 0x000000, "Member 'LGUILifeCycleBehaviour_SetEnable::Value' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.GetEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleBehaviour_GetEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_GetEnable) == 0x000001, "Wrong alignment on LGUILifeCycleBehaviour_GetEnable");
static_assert(sizeof(LGUILifeCycleBehaviour_GetEnable) == 0x000001, "Wrong size on LGUILifeCycleBehaviour_GetEnable");
static_assert(offsetof(LGUILifeCycleBehaviour_GetEnable, ReturnValue) == 0x000000, "Member 'LGUILifeCycleBehaviour_GetEnable::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.GetIsActiveAndEnable
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleBehaviour_GetIsActiveAndEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_GetIsActiveAndEnable) == 0x000001, "Wrong alignment on LGUILifeCycleBehaviour_GetIsActiveAndEnable");
static_assert(sizeof(LGUILifeCycleBehaviour_GetIsActiveAndEnable) == 0x000001, "Wrong size on LGUILifeCycleBehaviour_GetIsActiveAndEnable");
static_assert(offsetof(LGUILifeCycleBehaviour_GetIsActiveAndEnable, ReturnValue) == 0x000000, "Member 'LGUILifeCycleBehaviour_GetIsActiveAndEnable::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleBehaviour.GetRootSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUILifeCycleBehaviour_GetRootSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleBehaviour_GetRootSceneComponent) == 0x000008, "Wrong alignment on LGUILifeCycleBehaviour_GetRootSceneComponent");
static_assert(sizeof(LGUILifeCycleBehaviour_GetRootSceneComponent) == 0x000008, "Wrong size on LGUILifeCycleBehaviour_GetRootSceneComponent");
static_assert(offsetof(LGUILifeCycleBehaviour_GetRootSceneComponent, ReturnValue) == 0x000000, "Member 'LGUILifeCycleBehaviour_GetRootSceneComponent::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_Selector.SetOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_Selector_SetOffset final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_Selector_SetOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_Selector_SetOffset");
static_assert(sizeof(UIEffectTextAnimation_Selector_SetOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_Selector_SetOffset");
static_assert(offsetof(UIEffectTextAnimation_Selector_SetOffset, Value) == 0x000000, "Member 'UIEffectTextAnimation_Selector_SetOffset::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_Selector.GetOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_Selector_GetOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_Selector_GetOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_Selector_GetOffset");
static_assert(sizeof(UIEffectTextAnimation_Selector_GetOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_Selector_GetOffset");
static_assert(offsetof(UIEffectTextAnimation_Selector_GetOffset, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_Selector_GetOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.SetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_SetEnd final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_SetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_SetEnd");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_SetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_SetEnd");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_SetEnd, Value) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_SetEnd::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.SetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_SetStart final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_SetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_SetStart");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_SetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_SetStart");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_SetStart, Value) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_SetStart::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.GetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_GetEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_GetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_GetEnd");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_GetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_GetEnd");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_GetEnd, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_GetEnd::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RandomSelector.GetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RandomSelector_GetStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RandomSelector_GetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RandomSelector_GetStart");
static_assert(sizeof(UIEffectTextAnimation_RandomSelector_GetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RandomSelector_GetStart");
static_assert(offsetof(UIEffectTextAnimation_RandomSelector_GetStart, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RandomSelector_GetStart::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetMatchFromWidthToHeight
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetMatchFromWidthToHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetMatchFromWidthToHeight) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetMatchFromWidthToHeight");
static_assert(sizeof(LGUICanvasScaler_GetMatchFromWidthToHeight) == 0x000004, "Wrong size on LGUICanvasScaler_GetMatchFromWidthToHeight");
static_assert(offsetof(LGUICanvasScaler_GetMatchFromWidthToHeight, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetMatchFromWidthToHeight::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetReferenceResolution
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasScaler_GetReferenceResolution final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetReferenceResolution) == 0x000008, "Wrong alignment on LGUICanvasScaler_GetReferenceResolution");
static_assert(sizeof(LGUICanvasScaler_GetReferenceResolution) == 0x000010, "Wrong size on LGUICanvasScaler_GetReferenceResolution");
static_assert(offsetof(LGUICanvasScaler_GetReferenceResolution, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetReferenceResolution::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetScreenMatchMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_GetScreenMatchMode final
{
public:
	ELGUICanvasScreenMatchMode                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetScreenMatchMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_GetScreenMatchMode");
static_assert(sizeof(LGUICanvasScaler_GetScreenMatchMode) == 0x000001, "Wrong size on LGUICanvasScaler_GetScreenMatchMode");
static_assert(offsetof(LGUICanvasScaler_GetScreenMatchMode, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetScreenMatchMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetUIScaleMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_GetUIScaleMode final
{
public:
	ELGUICanvasScaleMode                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetUIScaleMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_GetUIScaleMode");
static_assert(sizeof(LGUICanvasScaler_GetUIScaleMode) == 0x000001, "Wrong size on LGUICanvasScaler_GetUIScaleMode");
static_assert(offsetof(LGUICanvasScaler_GetUIScaleMode, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetUIScaleMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetCustomScale
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvasScaler_SetCustomScale final
{
public:
	class ULGUICanvasScalerCustomScale*           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetCustomScale) == 0x000008, "Wrong alignment on LGUICanvasScaler_SetCustomScale");
static_assert(sizeof(LGUICanvasScaler_SetCustomScale) == 0x000008, "Wrong size on LGUICanvasScaler_SetCustomScale");
static_assert(offsetof(LGUICanvasScaler_SetCustomScale, Value) == 0x000000, "Member 'LGUICanvasScaler_SetCustomScale::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetFarClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetFarClipPlane final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetFarClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetFarClipPlane");
static_assert(sizeof(LGUICanvasScaler_SetFarClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_SetFarClipPlane");
static_assert(offsetof(LGUICanvasScaler_SetFarClipPlane, Value) == 0x000000, "Member 'LGUICanvasScaler_SetFarClipPlane::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetFovAngle
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetFovAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetFovAngle) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetFovAngle");
static_assert(sizeof(LGUICanvasScaler_SetFovAngle) == 0x000004, "Wrong size on LGUICanvasScaler_SetFovAngle");
static_assert(offsetof(LGUICanvasScaler_SetFovAngle, Value) == 0x000000, "Member 'LGUICanvasScaler_SetFovAngle::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetMatchFromWidthToHeight
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetMatchFromWidthToHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetMatchFromWidthToHeight) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetMatchFromWidthToHeight");
static_assert(sizeof(LGUICanvasScaler_SetMatchFromWidthToHeight) == 0x000004, "Wrong size on LGUICanvasScaler_SetMatchFromWidthToHeight");
static_assert(offsetof(LGUICanvasScaler_SetMatchFromWidthToHeight, Value) == 0x000000, "Member 'LGUICanvasScaler_SetMatchFromWidthToHeight::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_SetNearClipPlane final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetNearClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_SetNearClipPlane");
static_assert(sizeof(LGUICanvasScaler_SetNearClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_SetNearClipPlane");
static_assert(offsetof(LGUICanvasScaler_SetNearClipPlane, Value) == 0x000000, "Member 'LGUICanvasScaler_SetNearClipPlane::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetProjectionType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_SetProjectionType final
{
public:
	ECameraProjectionMode                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetProjectionType) == 0x000001, "Wrong alignment on LGUICanvasScaler_SetProjectionType");
static_assert(sizeof(LGUICanvasScaler_SetProjectionType) == 0x000001, "Wrong size on LGUICanvasScaler_SetProjectionType");
static_assert(offsetof(LGUICanvasScaler_SetProjectionType, Value) == 0x000000, "Member 'LGUICanvasScaler_SetProjectionType::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetReferenceResolution
// 0x0010 (0x0010 - 0x0000)
struct LGUICanvasScaler_SetReferenceResolution final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetReferenceResolution) == 0x000008, "Wrong alignment on LGUICanvasScaler_SetReferenceResolution");
static_assert(sizeof(LGUICanvasScaler_SetReferenceResolution) == 0x000010, "Wrong size on LGUICanvasScaler_SetReferenceResolution");
static_assert(offsetof(LGUICanvasScaler_SetReferenceResolution, Value) == 0x000000, "Member 'LGUICanvasScaler_SetReferenceResolution::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetScreenMatchMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_SetScreenMatchMode final
{
public:
	ELGUICanvasScreenMatchMode                    Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetScreenMatchMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_SetScreenMatchMode");
static_assert(sizeof(LGUICanvasScaler_SetScreenMatchMode) == 0x000001, "Wrong size on LGUICanvasScaler_SetScreenMatchMode");
static_assert(offsetof(LGUICanvasScaler_SetScreenMatchMode, Value) == 0x000000, "Member 'LGUICanvasScaler_SetScreenMatchMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.SetUIScaleMode
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_SetUIScaleMode final
{
public:
	ELGUICanvasScaleMode                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_SetUIScaleMode) == 0x000001, "Wrong alignment on LGUICanvasScaler_SetUIScaleMode");
static_assert(sizeof(LGUICanvasScaler_SetUIScaleMode) == 0x000001, "Wrong size on LGUICanvasScaler_SetUIScaleMode");
static_assert(offsetof(LGUICanvasScaler_SetUIScaleMode, Value) == 0x000000, "Member 'LGUICanvasScaler_SetUIScaleMode::Value' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.ConvertPositionFromLGUICanvasToViewport
// 0x0020 (0x0020 - 0x0000)
struct LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport) == 0x000008, "Wrong alignment on LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport");
static_assert(sizeof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport) == 0x000020, "Wrong size on LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport, position) == 0x000000, "Member 'LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport::position' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport, ReturnValue) == 0x000010, "Member 'LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.ConvertPositionFromViewportToLGUICanvas
// 0x0020 (0x0020 - 0x0000)
struct LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas final
{
public:
	struct FVector2D                              position;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas) == 0x000008, "Wrong alignment on LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas");
static_assert(sizeof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas) == 0x000020, "Wrong size on LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas, position) == 0x000000, "Member 'LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas::position' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas, ReturnValue) == 0x000010, "Member 'LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetCustomScale
// 0x0008 (0x0008 - 0x0000)
struct LGUICanvasScaler_GetCustomScale final
{
public:
	class ULGUICanvasScalerCustomScale*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetCustomScale) == 0x000008, "Wrong alignment on LGUICanvasScaler_GetCustomScale");
static_assert(sizeof(LGUICanvasScaler_GetCustomScale) == 0x000008, "Wrong size on LGUICanvasScaler_GetCustomScale");
static_assert(offsetof(LGUICanvasScaler_GetCustomScale, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetCustomScale::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetFarClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetFarClipPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetFarClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetFarClipPlane");
static_assert(sizeof(LGUICanvasScaler_GetFarClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_GetFarClipPlane");
static_assert(offsetof(LGUICanvasScaler_GetFarClipPlane, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetFarClipPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetFOVAngle
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetFOVAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetFOVAngle) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetFOVAngle");
static_assert(sizeof(LGUICanvasScaler_GetFOVAngle) == 0x000004, "Wrong size on LGUICanvasScaler_GetFOVAngle");
static_assert(offsetof(LGUICanvasScaler_GetFOVAngle, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetFOVAngle::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetNearClipPlane
// 0x0004 (0x0004 - 0x0000)
struct LGUICanvasScaler_GetNearClipPlane final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetNearClipPlane) == 0x000004, "Wrong alignment on LGUICanvasScaler_GetNearClipPlane");
static_assert(sizeof(LGUICanvasScaler_GetNearClipPlane) == 0x000004, "Wrong size on LGUICanvasScaler_GetNearClipPlane");
static_assert(offsetof(LGUICanvasScaler_GetNearClipPlane, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetNearClipPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.GetProjectionType
// 0x0001 (0x0001 - 0x0000)
struct LGUICanvasScaler_GetProjectionType final
{
public:
	ECameraProjectionMode                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICanvasScaler_GetProjectionType) == 0x000001, "Wrong alignment on LGUICanvasScaler_GetProjectionType");
static_assert(sizeof(LGUICanvasScaler_GetProjectionType) == 0x000001, "Wrong size on LGUICanvasScaler_GetProjectionType");
static_assert(offsetof(LGUICanvasScaler_GetProjectionType, ReturnValue) == 0x000000, "Member 'LGUICanvasScaler_GetProjectionType::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.Project3DToScreen
// 0x0030 (0x0030 - 0x0000)
struct LGUICanvasScaler_Project3DToScreen final
{
public:
	struct FVector                                Position3D;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPosition2D;                                     // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvasScaler_Project3DToScreen) == 0x000008, "Wrong alignment on LGUICanvasScaler_Project3DToScreen");
static_assert(sizeof(LGUICanvasScaler_Project3DToScreen) == 0x000030, "Wrong size on LGUICanvasScaler_Project3DToScreen");
static_assert(offsetof(LGUICanvasScaler_Project3DToScreen, Position3D) == 0x000000, "Member 'LGUICanvasScaler_Project3DToScreen::Position3D' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_Project3DToScreen, OutPosition2D) == 0x000018, "Member 'LGUICanvasScaler_Project3DToScreen::OutPosition2D' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_Project3DToScreen, ReturnValue) == 0x000028, "Member 'LGUICanvasScaler_Project3DToScreen::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICanvasScaler.ProjectWorldToScreen
// 0x0038 (0x0038 - 0x0000)
struct LGUICanvasScaler_ProjectWorldToScreen final
{
public:
	class APlayerController*                      Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Position3D;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutPosition2D;                                     // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICanvasScaler_ProjectWorldToScreen) == 0x000008, "Wrong alignment on LGUICanvasScaler_ProjectWorldToScreen");
static_assert(sizeof(LGUICanvasScaler_ProjectWorldToScreen) == 0x000038, "Wrong size on LGUICanvasScaler_ProjectWorldToScreen");
static_assert(offsetof(LGUICanvasScaler_ProjectWorldToScreen, Player) == 0x000000, "Member 'LGUICanvasScaler_ProjectWorldToScreen::Player' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ProjectWorldToScreen, Position3D) == 0x000008, "Member 'LGUICanvasScaler_ProjectWorldToScreen::Position3D' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ProjectWorldToScreen, OutPosition2D) == 0x000020, "Member 'LGUICanvasScaler_ProjectWorldToScreen::OutPosition2D' has a wrong offset!");
static_assert(offsetof(LGUICanvasScaler_ProjectWorldToScreen, ReturnValue) == 0x000030, "Member 'LGUICanvasScaler_ProjectWorldToScreen::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.CalculatePivotOffset
// 0x0028 (0x0028 - 0x0000)
struct LGUIGeometryHelper_CalculatePivotOffset final
{
public:
	float                                         InWidth;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InHeight;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              InPivot;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_CalculatePivotOffset) == 0x000008, "Wrong alignment on LGUIGeometryHelper_CalculatePivotOffset");
static_assert(sizeof(LGUIGeometryHelper_CalculatePivotOffset) == 0x000028, "Wrong size on LGUIGeometryHelper_CalculatePivotOffset");
static_assert(offsetof(LGUIGeometryHelper_CalculatePivotOffset, InWidth) == 0x000000, "Member 'LGUIGeometryHelper_CalculatePivotOffset::InWidth' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_CalculatePivotOffset, InHeight) == 0x000004, "Member 'LGUIGeometryHelper_CalculatePivotOffset::InHeight' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_CalculatePivotOffset, InPivot) == 0x000008, "Member 'LGUIGeometryHelper_CalculatePivotOffset::InPivot' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_CalculatePivotOffset, ReturnValue) == 0x000018, "Member 'LGUIGeometryHelper_CalculatePivotOffset::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.AddTriangle
// 0x000C (0x000C - 0x0000)
struct LGUIGeometryHelper_AddTriangle final
{
public:
	int32                                         Index0;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         index1;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         index2;                                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_AddTriangle) == 0x000004, "Wrong alignment on LGUIGeometryHelper_AddTriangle");
static_assert(sizeof(LGUIGeometryHelper_AddTriangle) == 0x00000C, "Wrong size on LGUIGeometryHelper_AddTriangle");
static_assert(offsetof(LGUIGeometryHelper_AddTriangle, Index0) == 0x000000, "Member 'LGUIGeometryHelper_AddTriangle::Index0' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddTriangle, index1) == 0x000004, "Member 'LGUIGeometryHelper_AddTriangle::index1' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddTriangle, index2) == 0x000008, "Member 'LGUIGeometryHelper_AddTriangle::index2' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.AddVertexFull
// 0x0090 (0x0090 - 0x0000)
struct LGUIGeometryHelper_AddVertexFull final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UV0;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV1;                                               // 0x0030(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV2;                                               // 0x0040(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UV3;                                               // 0x0050(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0060(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Tangent;                                           // 0x0078(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_AddVertexFull) == 0x000008, "Wrong alignment on LGUIGeometryHelper_AddVertexFull");
static_assert(sizeof(LGUIGeometryHelper_AddVertexFull) == 0x000090, "Wrong size on LGUIGeometryHelper_AddVertexFull");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, position) == 0x000000, "Member 'LGUIGeometryHelper_AddVertexFull::position' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, Color) == 0x000018, "Member 'LGUIGeometryHelper_AddVertexFull::Color' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, UV0) == 0x000020, "Member 'LGUIGeometryHelper_AddVertexFull::UV0' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, UV1) == 0x000030, "Member 'LGUIGeometryHelper_AddVertexFull::UV1' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, UV2) == 0x000040, "Member 'LGUIGeometryHelper_AddVertexFull::UV2' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, UV3) == 0x000050, "Member 'LGUIGeometryHelper_AddVertexFull::UV3' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, Normal) == 0x000060, "Member 'LGUIGeometryHelper_AddVertexFull::Normal' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexFull, Tangent) == 0x000078, "Member 'LGUIGeometryHelper_AddVertexFull::Tangent' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.AddVertexSimple
// 0x0030 (0x0030 - 0x0000)
struct LGUIGeometryHelper_AddVertexSimple final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              UV0;                                               // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_AddVertexSimple) == 0x000008, "Wrong alignment on LGUIGeometryHelper_AddVertexSimple");
static_assert(sizeof(LGUIGeometryHelper_AddVertexSimple) == 0x000030, "Wrong size on LGUIGeometryHelper_AddVertexSimple");
static_assert(offsetof(LGUIGeometryHelper_AddVertexSimple, position) == 0x000000, "Member 'LGUIGeometryHelper_AddVertexSimple::position' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexSimple, Color) == 0x000018, "Member 'LGUIGeometryHelper_AddVertexSimple::Color' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_AddVertexSimple, UV0) == 0x000020, "Member 'LGUIGeometryHelper_AddVertexSimple::UV0' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.AddVertexStruct
// 0x0090 (0x0090 - 0x0000)
struct LGUIGeometryHelper_AddVertexStruct final
{
public:
	struct FLGUIGeometryVertex                    Vertex;                                            // 0x0000(0x0090)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_AddVertexStruct) == 0x000008, "Wrong alignment on LGUIGeometryHelper_AddVertexStruct");
static_assert(sizeof(LGUIGeometryHelper_AddVertexStruct) == 0x000090, "Wrong size on LGUIGeometryHelper_AddVertexStruct");
static_assert(offsetof(LGUIGeometryHelper_AddVertexStruct, Vertex) == 0x000000, "Member 'LGUIGeometryHelper_AddVertexStruct::Vertex' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.AddVertexTriangleStream
// 0x0010 (0x0010 - 0x0000)
struct LGUIGeometryHelper_AddVertexTriangleStream final
{
public:
	TArray<struct FLGUIGeometryVertex>            InVertexTriangleStream;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_AddVertexTriangleStream) == 0x000008, "Wrong alignment on LGUIGeometryHelper_AddVertexTriangleStream");
static_assert(sizeof(LGUIGeometryHelper_AddVertexTriangleStream) == 0x000010, "Wrong size on LGUIGeometryHelper_AddVertexTriangleStream");
static_assert(offsetof(LGUIGeometryHelper_AddVertexTriangleStream, InVertexTriangleStream) == 0x000000, "Member 'LGUIGeometryHelper_AddVertexTriangleStream::InVertexTriangleStream' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.GetVertexTriangleStream
// 0x0010 (0x0010 - 0x0000)
struct LGUIGeometryHelper_GetVertexTriangleStream final
{
public:
	TArray<struct FLGUIGeometryVertex>            OutVertexTriangleStream;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_GetVertexTriangleStream) == 0x000008, "Wrong alignment on LGUIGeometryHelper_GetVertexTriangleStream");
static_assert(sizeof(LGUIGeometryHelper_GetVertexTriangleStream) == 0x000010, "Wrong size on LGUIGeometryHelper_GetVertexTriangleStream");
static_assert(offsetof(LGUIGeometryHelper_GetVertexTriangleStream, OutVertexTriangleStream) == 0x000000, "Member 'LGUIGeometryHelper_GetVertexTriangleStream::OutVertexTriangleStream' has a wrong offset!");

// Function LGUI.LGUIGeometryHelper.SetMesh
// 0x0020 (0x0020 - 0x0000)
struct LGUIGeometryHelper_SetMesh final
{
public:
	TArray<struct FLGUIGeometryVertex>            InVertices;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 InIndices;                                         // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryHelper_SetMesh) == 0x000008, "Wrong alignment on LGUIGeometryHelper_SetMesh");
static_assert(sizeof(LGUIGeometryHelper_SetMesh) == 0x000020, "Wrong size on LGUIGeometryHelper_SetMesh");
static_assert(offsetof(LGUIGeometryHelper_SetMesh, InVertices) == 0x000000, "Member 'LGUIGeometryHelper_SetMesh::InVertices' has a wrong offset!");
static_assert(offsetof(LGUIGeometryHelper_SetMesh, InIndices) == 0x000010, "Member 'LGUIGeometryHelper_SetMesh::InIndices' has a wrong offset!");

// Function LGUI.UIBaseActor.GetUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIBaseActor_GetUIItem final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetUIItem) == 0x000008, "Wrong alignment on UIBaseActor_GetUIItem");
static_assert(sizeof(UIBaseActor_GetUIItem) == 0x000008, "Wrong size on UIBaseActor_GetUIItem");
static_assert(offsetof(UIBaseActor_GetUIItem, ReturnValue) == 0x000000, "Member 'UIBaseActor_GetUIItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseActor.GetUIItem_BP
// 0x0008 (0x0008 - 0x0000)
struct UIBaseActor_GetUIItem_BP final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetUIItem_BP) == 0x000008, "Wrong alignment on UIBaseActor_GetUIItem_BP");
static_assert(sizeof(UIBaseActor_GetUIItem_BP) == 0x000008, "Wrong size on UIBaseActor_GetUIItem_BP");
static_assert(offsetof(UIBaseActor_GetUIItem_BP, ReturnValue) == 0x000000, "Member 'UIBaseActor_GetUIItem_BP::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseActor.GetUIItem_Impl
// 0x0008 (0x0008 - 0x0000)
struct UIBaseActor_GetUIItem_Impl final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseActor_GetUIItem_Impl) == 0x000008, "Wrong alignment on UIBaseActor_GetUIItem_Impl");
static_assert(sizeof(UIBaseActor_GetUIItem_Impl) == 0x000008, "Wrong size on UIBaseActor_GetUIItem_Impl");
static_assert(offsetof(UIBaseActor_GetUIItem_Impl, ReturnValue) == 0x000000, "Member 'UIBaseActor_GetUIItem_Impl::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderableActor.GetUIRenderable
// 0x0008 (0x0008 - 0x0000)
struct UIBaseRenderableActor_GetUIRenderable final
{
public:
	class UUIBaseRenderable*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderableActor_GetUIRenderable) == 0x000008, "Wrong alignment on UIBaseRenderableActor_GetUIRenderable");
static_assert(sizeof(UIBaseRenderableActor_GetUIRenderable) == 0x000008, "Wrong size on UIBaseRenderableActor_GetUIRenderable");
static_assert(offsetof(UIBaseRenderableActor_GetUIRenderable, ReturnValue) == 0x000000, "Member 'UIBaseRenderableActor_GetUIRenderable::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderableActor.GetUIRenderable_BP
// 0x0008 (0x0008 - 0x0000)
struct UIBaseRenderableActor_GetUIRenderable_BP final
{
public:
	class UUIBaseRenderable*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderableActor_GetUIRenderable_BP) == 0x000008, "Wrong alignment on UIBaseRenderableActor_GetUIRenderable_BP");
static_assert(sizeof(UIBaseRenderableActor_GetUIRenderable_BP) == 0x000008, "Wrong size on UIBaseRenderableActor_GetUIRenderable_BP");
static_assert(offsetof(UIBaseRenderableActor_GetUIRenderable_BP, ReturnValue) == 0x000000, "Member 'UIBaseRenderableActor_GetUIRenderable_BP::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderableActor.GetUIRenderable_Impl
// 0x0008 (0x0008 - 0x0000)
struct UIBaseRenderableActor_GetUIRenderable_Impl final
{
public:
	class UUIBaseRenderable*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderableActor_GetUIRenderable_Impl) == 0x000008, "Wrong alignment on UIBaseRenderableActor_GetUIRenderable_Impl");
static_assert(sizeof(UIBaseRenderableActor_GetUIRenderable_Impl) == 0x000008, "Wrong size on UIBaseRenderableActor_GetUIRenderable_Impl");
static_assert(offsetof(UIBaseRenderableActor_GetUIRenderable_Impl, ReturnValue) == 0x000000, "Member 'UIBaseRenderableActor_GetUIRenderable_Impl::ReturnValue' has a wrong offset!");

// Function LGUI.UIBasePostProcessActor.GetUIPostProcessRenderable
// 0x0008 (0x0008 - 0x0000)
struct UIBasePostProcessActor_GetUIPostProcessRenderable final
{
public:
	class UUIPostProcessRenderable*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBasePostProcessActor_GetUIPostProcessRenderable) == 0x000008, "Wrong alignment on UIBasePostProcessActor_GetUIPostProcessRenderable");
static_assert(sizeof(UIBasePostProcessActor_GetUIPostProcessRenderable) == 0x000008, "Wrong size on UIBasePostProcessActor_GetUIPostProcessRenderable");
static_assert(offsetof(UIBasePostProcessActor_GetUIPostProcessRenderable, ReturnValue) == 0x000000, "Member 'UIBasePostProcessActor_GetUIPostProcessRenderable::ReturnValue' has a wrong offset!");

// Function LGUI.UIBasePostProcessActor.GetUIPostProcessRenderable_BP
// 0x0008 (0x0008 - 0x0000)
struct UIBasePostProcessActor_GetUIPostProcessRenderable_BP final
{
public:
	class UUIPostProcessRenderable*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBasePostProcessActor_GetUIPostProcessRenderable_BP) == 0x000008, "Wrong alignment on UIBasePostProcessActor_GetUIPostProcessRenderable_BP");
static_assert(sizeof(UIBasePostProcessActor_GetUIPostProcessRenderable_BP) == 0x000008, "Wrong size on UIBasePostProcessActor_GetUIPostProcessRenderable_BP");
static_assert(offsetof(UIBasePostProcessActor_GetUIPostProcessRenderable_BP, ReturnValue) == 0x000000, "Member 'UIBasePostProcessActor_GetUIPostProcessRenderable_BP::ReturnValue' has a wrong offset!");

// Function LGUI.UIBasePostProcessActor.GetUIPostProcessRenderable_Impl
// 0x0008 (0x0008 - 0x0000)
struct UIBasePostProcessActor_GetUIPostProcessRenderable_Impl final
{
public:
	class UUIPostProcessRenderable*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBasePostProcessActor_GetUIPostProcessRenderable_Impl) == 0x000008, "Wrong alignment on UIBasePostProcessActor_GetUIPostProcessRenderable_Impl");
static_assert(sizeof(UIBasePostProcessActor_GetUIPostProcessRenderable_Impl) == 0x000008, "Wrong size on UIBasePostProcessActor_GetUIPostProcessRenderable_Impl");
static_assert(offsetof(UIBasePostProcessActor_GetUIPostProcessRenderable_Impl, ReturnValue) == 0x000000, "Member 'UIBasePostProcessActor_GetUIPostProcessRenderable_Impl::ReturnValue' has a wrong offset!");

// Function LGUI.UIFrameCaptureActor.GetUIFrameCapture
// 0x0008 (0x0008 - 0x0000)
struct UIFrameCaptureActor_GetUIFrameCapture final
{
public:
	class UUIFrameCapture*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFrameCaptureActor_GetUIFrameCapture) == 0x000008, "Wrong alignment on UIFrameCaptureActor_GetUIFrameCapture");
static_assert(sizeof(UIFrameCaptureActor_GetUIFrameCapture) == 0x000008, "Wrong size on UIFrameCaptureActor_GetUIFrameCapture");
static_assert(offsetof(UIFrameCaptureActor_GetUIFrameCapture, ReturnValue) == 0x000000, "Member 'UIFrameCaptureActor_GetUIFrameCapture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICustomMesh.ReceiveOnFillMesh
// 0x0010 (0x0010 - 0x0000)
struct LGUICustomMesh_ReceiveOnFillMesh final
{
public:
	class UUIBatchMeshRenderable*                 InRenderable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTriangleChanged;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexPositionChanged;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexUVChanged;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexColorChanged;                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICustomMesh_ReceiveOnFillMesh) == 0x000008, "Wrong alignment on LGUICustomMesh_ReceiveOnFillMesh");
static_assert(sizeof(LGUICustomMesh_ReceiveOnFillMesh) == 0x000010, "Wrong size on LGUICustomMesh_ReceiveOnFillMesh");
static_assert(offsetof(LGUICustomMesh_ReceiveOnFillMesh, InRenderable) == 0x000000, "Member 'LGUICustomMesh_ReceiveOnFillMesh::InRenderable' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveOnFillMesh, InTriangleChanged) == 0x000008, "Member 'LGUICustomMesh_ReceiveOnFillMesh::InTriangleChanged' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveOnFillMesh, InVertexPositionChanged) == 0x000009, "Member 'LGUICustomMesh_ReceiveOnFillMesh::InVertexPositionChanged' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveOnFillMesh, InVertexUVChanged) == 0x00000A, "Member 'LGUICustomMesh_ReceiveOnFillMesh::InVertexUVChanged' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveOnFillMesh, InVertexColorChanged) == 0x00000B, "Member 'LGUICustomMesh_ReceiveOnFillMesh::InVertexColorChanged' has a wrong offset!");

// Function LGUI.LGUICustomMesh.GetHitUVbyFaceIndex
// 0x0040 (0x0040 - 0x0000)
struct LGUICustomMesh_GetHitUVbyFaceIndex final
{
public:
	const class UUIBatchMeshRenderable*           InRenderable;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHitFaceIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InHitPoint;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutHitUV;                                          // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICustomMesh_GetHitUVbyFaceIndex) == 0x000008, "Wrong alignment on LGUICustomMesh_GetHitUVbyFaceIndex");
static_assert(sizeof(LGUICustomMesh_GetHitUVbyFaceIndex) == 0x000040, "Wrong size on LGUICustomMesh_GetHitUVbyFaceIndex");
static_assert(offsetof(LGUICustomMesh_GetHitUVbyFaceIndex, InRenderable) == 0x000000, "Member 'LGUICustomMesh_GetHitUVbyFaceIndex::InRenderable' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_GetHitUVbyFaceIndex, InHitFaceIndex) == 0x000008, "Member 'LGUICustomMesh_GetHitUVbyFaceIndex::InHitFaceIndex' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_GetHitUVbyFaceIndex, InHitPoint) == 0x000010, "Member 'LGUICustomMesh_GetHitUVbyFaceIndex::InHitPoint' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_GetHitUVbyFaceIndex, OutHitUV) == 0x000028, "Member 'LGUICustomMesh_GetHitUVbyFaceIndex::OutHitUV' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_GetHitUVbyFaceIndex, ReturnValue) == 0x000038, "Member 'LGUICustomMesh_GetHitUVbyFaceIndex::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICustomMesh.ReceiveGetHitUV
// 0x0070 (0x0070 - 0x0000)
struct LGUICustomMesh_ReceiveGetHitUV final
{
public:
	const class UUIBatchMeshRenderable*           InRenderable;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InHitFaceIndex;                                    // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InHitPoint;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLineStart;                                       // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLineEnd;                                         // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutHitUV;                                          // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUICustomMesh_ReceiveGetHitUV) == 0x000008, "Wrong alignment on LGUICustomMesh_ReceiveGetHitUV");
static_assert(sizeof(LGUICustomMesh_ReceiveGetHitUV) == 0x000070, "Wrong size on LGUICustomMesh_ReceiveGetHitUV");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, InRenderable) == 0x000000, "Member 'LGUICustomMesh_ReceiveGetHitUV::InRenderable' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, InHitFaceIndex) == 0x000008, "Member 'LGUICustomMesh_ReceiveGetHitUV::InHitFaceIndex' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, InHitPoint) == 0x000010, "Member 'LGUICustomMesh_ReceiveGetHitUV::InHitPoint' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, InLineStart) == 0x000028, "Member 'LGUICustomMesh_ReceiveGetHitUV::InLineStart' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, InLineEnd) == 0x000040, "Member 'LGUICustomMesh_ReceiveGetHitUV::InLineEnd' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, OutHitUV) == 0x000058, "Member 'LGUICustomMesh_ReceiveGetHitUV::OutHitUV' has a wrong offset!");
static_assert(offsetof(LGUICustomMesh_ReceiveGetHitUV, ReturnValue) == 0x000068, "Member 'LGUICustomMesh_ReceiveGetHitUV::ReturnValue' has a wrong offset!");

// Function LGUI.LGUICustomMesh.ReceiveSupportDrawcallBatching
// 0x0001 (0x0001 - 0x0000)
struct LGUICustomMesh_ReceiveSupportDrawcallBatching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUICustomMesh_ReceiveSupportDrawcallBatching) == 0x000001, "Wrong alignment on LGUICustomMesh_ReceiveSupportDrawcallBatching");
static_assert(sizeof(LGUICustomMesh_ReceiveSupportDrawcallBatching) == 0x000001, "Wrong size on LGUICustomMesh_ReceiveSupportDrawcallBatching");
static_assert(offsetof(LGUICustomMesh_ReceiveSupportDrawcallBatching, ReturnValue) == 0x000000, "Member 'LGUICustomMesh_ReceiveSupportDrawcallBatching::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIActiveInHierarchy
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy final
{
public:
	bool                                          activeOrInactive;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy) == 0x000001, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy) == 0x000001, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy, activeOrInactive) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy::activeOrInactive' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildAcitveInHierarchy
// 0x0010 (0x0010 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ativeOrInactive;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy) == 0x000008, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy) == 0x000010, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy, Child) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy::Child' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy, ativeOrInactive) == 0x000008, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy::ativeOrInactive' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildAttachmentChanged
// 0x0010 (0x0010 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          attachOrDetach;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged) == 0x000008, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged) == 0x000010, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged, Child) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged::Child' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged, attachOrDetach) == 0x000008, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged::attachOrDetach' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildDimensionsChanged
// 0x0010 (0x0010 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          horizontalPositionChanged;                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          verticalPositionChanged;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          widthChanged;                                      // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          heightChanged;                                     // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged) == 0x000008, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged) == 0x000010, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged, Child) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged::Child' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged, horizontalPositionChanged) == 0x000008, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged::horizontalPositionChanged' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged, verticalPositionChanged) == 0x000009, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged::verticalPositionChanged' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged, widthChanged) == 0x00000A, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged::widthChanged' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged, heightChanged) == 0x00000B, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged::heightChanged' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildHierarchyIndexChanged
// 0x0008 (0x0008 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged final
{
public:
	class UUIItem*                                Child;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged) == 0x000008, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged) == 0x000008, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged, Child) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged::Child' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIDimensionsChanged
// 0x0004 (0x0004 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged final
{
public:
	bool                                          horizontalPositionChanged;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          verticalPositionChanged;                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          widthChanged;                                      // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          heightChanged;                                     // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged) == 0x000001, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged) == 0x000004, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged, horizontalPositionChanged) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged::horizontalPositionChanged' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged, verticalPositionChanged) == 0x000001, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged::verticalPositionChanged' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged, widthChanged) == 0x000002, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged::widthChanged' has a wrong offset!");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged, heightChanged) == 0x000003, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged::heightChanged' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIInteractionStateChanged
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged final
{
public:
	bool                                          interactableOrNot;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged) == 0x000001, "Wrong alignment on LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged");
static_assert(sizeof(LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged) == 0x000001, "Wrong size on LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged");
static_assert(offsetof(LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged, interactableOrNot) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged::interactableOrNot' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.CheckRootUIComponent
// 0x0001 (0x0001 - 0x0000)
struct LGUILifeCycleUIBehaviour_CheckRootUIComponent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_CheckRootUIComponent) == 0x000001, "Wrong alignment on LGUILifeCycleUIBehaviour_CheckRootUIComponent");
static_assert(sizeof(LGUILifeCycleUIBehaviour_CheckRootUIComponent) == 0x000001, "Wrong size on LGUILifeCycleUIBehaviour_CheckRootUIComponent");
static_assert(offsetof(LGUILifeCycleUIBehaviour_CheckRootUIComponent, ReturnValue) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_CheckRootUIComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.GetRootComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUILifeCycleUIBehaviour_GetRootComponent final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_GetRootComponent) == 0x000008, "Wrong alignment on LGUILifeCycleUIBehaviour_GetRootComponent");
static_assert(sizeof(LGUILifeCycleUIBehaviour_GetRootComponent) == 0x000008, "Wrong size on LGUILifeCycleUIBehaviour_GetRootComponent");
static_assert(offsetof(LGUILifeCycleUIBehaviour_GetRootComponent, ReturnValue) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_GetRootComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUILifeCycleUIBehaviour.GetRootUIComponent
// 0x0008 (0x0008 - 0x0000)
struct LGUILifeCycleUIBehaviour_GetRootUIComponent final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUILifeCycleUIBehaviour_GetRootUIComponent) == 0x000008, "Wrong alignment on LGUILifeCycleUIBehaviour_GetRootUIComponent");
static_assert(sizeof(LGUILifeCycleUIBehaviour_GetRootUIComponent) == 0x000008, "Wrong size on LGUILifeCycleUIBehaviour_GetRootUIComponent");
static_assert(offsetof(LGUILifeCycleUIBehaviour_GetRootUIComponent, ReturnValue) == 0x000000, "Member 'LGUILifeCycleUIBehaviour_GetRootUIComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIDynamicSpriteAtlasManager.DisposeAtlasByPackingTag
// 0x0008 (0x0008 - 0x0000)
struct LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag final
{
public:
	class FName                                   inPackingTag;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag) == 0x000004, "Wrong alignment on LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag");
static_assert(sizeof(LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag) == 0x000008, "Wrong size on LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag");
static_assert(offsetof(LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag, inPackingTag) == 0x000000, "Member 'LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag::inPackingTag' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.SetScale
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleWaveProperty_SetScale final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleWaveProperty_SetScale) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleWaveProperty_SetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleWaveProperty_SetScale) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleWaveProperty_SetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleWaveProperty_SetScale, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleWaveProperty_SetScale::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.GetScale
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleWaveProperty_GetScale final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleWaveProperty_GetScale) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleWaveProperty_GetScale");
static_assert(sizeof(UIEffectTextAnimation_ScaleWaveProperty_GetScale) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleWaveProperty_GetScale");
static_assert(offsetof(UIEffectTextAnimation_ScaleWaveProperty_GetScale, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleWaveProperty_GetScale::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerBeginDrag
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerClick
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerClick final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerClick) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerClick");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerClick) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerClick");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerClick, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerClick::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerClick, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerClick::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerClick, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerClick::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerClick, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerClick::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDeselect
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerDeselect final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIBaseEventData*                     EventData;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerDeselect) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerDeselect");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerDeselect) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerDeselect");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDeselect, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDeselect::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDeselect, EventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDeselect::EventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDeselect, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDeselect::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDeselect, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDeselect::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDown
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerDown final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerDown) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerDown");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerDown) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerDown");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDown, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDown::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDown, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDown::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDown, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDown::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDown, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDown::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDrag
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerDrag final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerDrag) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerDrag");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerDrag) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerDrag");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDrag, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDrag::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDrag, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDrag::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDrag, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDrag::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDrag, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDrag::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDragDrop
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerDragDrop final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerDragDrop) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerDragDrop");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerDragDrop) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerDragDrop");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDragDrop, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDragDrop::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDragDrop, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDragDrop::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDragDrop, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDragDrop::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerDragDrop, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerDragDrop::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerEndDrag
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerEndDrag final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerEndDrag) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerEndDrag");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerEndDrag) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerEndDrag");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEndDrag, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEndDrag::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEndDrag, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEndDrag::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEndDrag, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEndDrag::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEndDrag, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEndDrag::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerEnter
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerEnter final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerEnter) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerEnter");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerEnter) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerEnter");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEnter, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEnter::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEnter, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEnter::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEnter, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEnter::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerEnter, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerEnter::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerExit
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerExit final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerExit) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerExit");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerExit) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerExit");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerExit, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerExit::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerExit, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerExit::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerExit, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerExit::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerExit, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerExit::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerScroll
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerScroll final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerScroll) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerScroll");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerScroll) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerScroll");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerScroll, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerScroll::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerScroll, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerScroll::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerScroll, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerScroll::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerScroll, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerScroll::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerSelect
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerSelect final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIBaseEventData*                     EventData;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerSelect) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerSelect");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerSelect) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerSelect");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerSelect, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerSelect::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerSelect, EventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerSelect::EventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerSelect, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerSelect::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerSelect, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerSelect::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerUp
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_ExecuteEvent_OnPointerUp final
{
public:
	class USceneComponent*                        TargetRootComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPointerEventData*                  pointerEventData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowEventBubbleUp;                                // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_ExecuteEvent_OnPointerUp) == 0x000008, "Wrong alignment on LGUIEventSystem_ExecuteEvent_OnPointerUp");
static_assert(sizeof(LGUIEventSystem_ExecuteEvent_OnPointerUp) == 0x000018, "Wrong size on LGUIEventSystem_ExecuteEvent_OnPointerUp");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerUp, TargetRootComponent) == 0x000000, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerUp::TargetRootComponent' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerUp, pointerEventData) == 0x000008, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerUp::pointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerUp, eventFireType) == 0x000010, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerUp::eventFireType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ExecuteEvent_OnPointerUp, AllowEventBubbleUp) == 0x000011, "Member 'LGUIEventSystem_ExecuteEvent_OnPointerUp::AllowEventBubbleUp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetLGUIEventSystemInstance
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_GetLGUIEventSystemInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIEventSystem*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetLGUIEventSystemInstance) == 0x000008, "Wrong alignment on LGUIEventSystem_GetLGUIEventSystemInstance");
static_assert(sizeof(LGUIEventSystem_GetLGUIEventSystemInstance) == 0x000010, "Wrong size on LGUIEventSystem_GetLGUIEventSystemInstance");
static_assert(offsetof(LGUIEventSystem_GetLGUIEventSystemInstance, WorldContextObject) == 0x000000, "Member 'LGUIEventSystem_GetLGUIEventSystemInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_GetLGUIEventSystemInstance, ReturnValue) == 0x000008, "Member 'LGUIEventSystem_GetLGUIEventSystemInstance::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.ActivateNavigationInput
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_ActivateNavigationInput final
{
public:
	int32                                         InPointerID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        InDefaultHighlightedComponent;                     // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_ActivateNavigationInput) == 0x000008, "Wrong alignment on LGUIEventSystem_ActivateNavigationInput");
static_assert(sizeof(LGUIEventSystem_ActivateNavigationInput) == 0x000010, "Wrong size on LGUIEventSystem_ActivateNavigationInput");
static_assert(offsetof(LGUIEventSystem_ActivateNavigationInput, InPointerID) == 0x000000, "Member 'LGUIEventSystem_ActivateNavigationInput::InPointerID' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_ActivateNavigationInput, InDefaultHighlightedComponent) == 0x000008, "Member 'LGUIEventSystem_ActivateNavigationInput::InDefaultHighlightedComponent' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetCurrentInputModule
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_GetCurrentInputModule final
{
public:
	class ULGUIBaseInputModule*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetCurrentInputModule) == 0x000008, "Wrong alignment on LGUIEventSystem_GetCurrentInputModule");
static_assert(sizeof(LGUIEventSystem_GetCurrentInputModule) == 0x000008, "Wrong size on LGUIEventSystem_GetCurrentInputModule");
static_assert(offsetof(LGUIEventSystem_GetCurrentInputModule, ReturnValue) == 0x000000, "Member 'LGUIEventSystem_GetCurrentInputModule::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.IsPointerOverUIByPointerID
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_IsPointerOverUIByPointerID final
{
public:
	int32                                         pointerID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_IsPointerOverUIByPointerID) == 0x000004, "Wrong alignment on LGUIEventSystem_IsPointerOverUIByPointerID");
static_assert(sizeof(LGUIEventSystem_IsPointerOverUIByPointerID) == 0x000008, "Wrong size on LGUIEventSystem_IsPointerOverUIByPointerID");
static_assert(offsetof(LGUIEventSystem_IsPointerOverUIByPointerID, pointerID) == 0x000000, "Member 'LGUIEventSystem_IsPointerOverUIByPointerID::pointerID' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_IsPointerOverUIByPointerID, ReturnValue) == 0x000004, "Member 'LGUIEventSystem_IsPointerOverUIByPointerID::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RegisterGlobalListener
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_RegisterGlobalListener final
{
public:
	TDelegate<void(class ULGUIBaseEventData* EventData)> InDelegate;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RegisterGlobalListener) == 0x000008, "Wrong alignment on LGUIEventSystem_RegisterGlobalListener");
static_assert(sizeof(LGUIEventSystem_RegisterGlobalListener) == 0x000018, "Wrong size on LGUIEventSystem_RegisterGlobalListener");
static_assert(offsetof(LGUIEventSystem_RegisterGlobalListener, InDelegate) == 0x000000, "Member 'LGUIEventSystem_RegisterGlobalListener::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_RegisterGlobalListener, ReturnValue) == 0x000010, "Member 'LGUIEventSystem_RegisterGlobalListener::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RegisterHitEvent
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_RegisterHitEvent final
{
public:
	TDelegate<void(bool isHit, const struct FHitResult& HitResult, class USceneComponent* HitComponent)> InDelegate; // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RegisterHitEvent) == 0x000008, "Wrong alignment on LGUIEventSystem_RegisterHitEvent");
static_assert(sizeof(LGUIEventSystem_RegisterHitEvent) == 0x000018, "Wrong size on LGUIEventSystem_RegisterHitEvent");
static_assert(offsetof(LGUIEventSystem_RegisterHitEvent, InDelegate) == 0x000000, "Member 'LGUIEventSystem_RegisterHitEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_RegisterHitEvent, ReturnValue) == 0x000010, "Member 'LGUIEventSystem_RegisterHitEvent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RegisterInputChangeEvent
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_RegisterInputChangeEvent final
{
public:
	TDelegate<void(int32 pointerID, ELGUIPointerInputType Type)> pointerInputChange;                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RegisterInputChangeEvent) == 0x000008, "Wrong alignment on LGUIEventSystem_RegisterInputChangeEvent");
static_assert(sizeof(LGUIEventSystem_RegisterInputChangeEvent) == 0x000018, "Wrong size on LGUIEventSystem_RegisterInputChangeEvent");
static_assert(offsetof(LGUIEventSystem_RegisterInputChangeEvent, pointerInputChange) == 0x000000, "Member 'LGUIEventSystem_RegisterInputChangeEvent::pointerInputChange' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_RegisterInputChangeEvent, ReturnValue) == 0x000010, "Member 'LGUIEventSystem_RegisterInputChangeEvent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.RemovePointerEventData
// 0x0004 (0x0004 - 0x0000)
struct LGUIEventSystem_RemovePointerEventData final
{
public:
	int32                                         pointerID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_RemovePointerEventData) == 0x000004, "Wrong alignment on LGUIEventSystem_RemovePointerEventData");
static_assert(sizeof(LGUIEventSystem_RemovePointerEventData) == 0x000004, "Wrong size on LGUIEventSystem_RemovePointerEventData");
static_assert(offsetof(LGUIEventSystem_RemovePointerEventData, pointerID) == 0x000000, "Member 'LGUIEventSystem_RemovePointerEventData::pointerID' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetHighlightedComponentForNavigation
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_SetHighlightedComponentForNavigation final
{
public:
	class USceneComponent*                        InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InPointerID;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_SetHighlightedComponentForNavigation) == 0x000008, "Wrong alignment on LGUIEventSystem_SetHighlightedComponentForNavigation");
static_assert(sizeof(LGUIEventSystem_SetHighlightedComponentForNavigation) == 0x000010, "Wrong size on LGUIEventSystem_SetHighlightedComponentForNavigation");
static_assert(offsetof(LGUIEventSystem_SetHighlightedComponentForNavigation, InComp) == 0x000000, "Member 'LGUIEventSystem_SetHighlightedComponentForNavigation::InComp' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetHighlightedComponentForNavigation, InPointerID) == 0x000008, "Member 'LGUIEventSystem_SetHighlightedComponentForNavigation::InPointerID' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetPointerInputTypeByPointerID
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_SetPointerInputTypeByPointerID final
{
public:
	int32                                         InPointerID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIPointerInputType                         InInputType;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0005(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_SetPointerInputTypeByPointerID) == 0x000004, "Wrong alignment on LGUIEventSystem_SetPointerInputTypeByPointerID");
static_assert(sizeof(LGUIEventSystem_SetPointerInputTypeByPointerID) == 0x000008, "Wrong size on LGUIEventSystem_SetPointerInputTypeByPointerID");
static_assert(offsetof(LGUIEventSystem_SetPointerInputTypeByPointerID, InPointerID) == 0x000000, "Member 'LGUIEventSystem_SetPointerInputTypeByPointerID::InPointerID' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetPointerInputTypeByPointerID, InInputType) == 0x000004, "Member 'LGUIEventSystem_SetPointerInputTypeByPointerID::InInputType' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetPointerInputTypeByPointerID, ReturnValue) == 0x000005, "Member 'LGUIEventSystem_SetPointerInputTypeByPointerID::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetRaycastEnable
// 0x0002 (0x0002 - 0x0000)
struct LGUIEventSystem_SetRaycastEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClearEvent;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_SetRaycastEnable) == 0x000001, "Wrong alignment on LGUIEventSystem_SetRaycastEnable");
static_assert(sizeof(LGUIEventSystem_SetRaycastEnable) == 0x000002, "Wrong size on LGUIEventSystem_SetRaycastEnable");
static_assert(offsetof(LGUIEventSystem_SetRaycastEnable, Enable) == 0x000000, "Member 'LGUIEventSystem_SetRaycastEnable::Enable' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetRaycastEnable, ClearEvent) == 0x000001, "Member 'LGUIEventSystem_SetRaycastEnable::ClearEvent' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetSelectComponent
// 0x0018 (0x0018 - 0x0000)
struct LGUIEventSystem_SetSelectComponent final
{
public:
	class USceneComponent*                        InSelectComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIBaseEventData*                     EventData;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIEventFireType                            eventFireType;                                     // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIEventSystem_SetSelectComponent) == 0x000008, "Wrong alignment on LGUIEventSystem_SetSelectComponent");
static_assert(sizeof(LGUIEventSystem_SetSelectComponent) == 0x000018, "Wrong size on LGUIEventSystem_SetSelectComponent");
static_assert(offsetof(LGUIEventSystem_SetSelectComponent, InSelectComp) == 0x000000, "Member 'LGUIEventSystem_SetSelectComponent::InSelectComp' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetSelectComponent, EventData) == 0x000008, "Member 'LGUIEventSystem_SetSelectComponent::EventData' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_SetSelectComponent, eventFireType) == 0x000010, "Member 'LGUIEventSystem_SetSelectComponent::eventFireType' has a wrong offset!");

// Function LGUI.LGUIEventSystem.SetSelectComponentWithDefault
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_SetSelectComponentWithDefault final
{
public:
	class USceneComponent*                        InSelectComp;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_SetSelectComponentWithDefault) == 0x000008, "Wrong alignment on LGUIEventSystem_SetSelectComponentWithDefault");
static_assert(sizeof(LGUIEventSystem_SetSelectComponentWithDefault) == 0x000008, "Wrong size on LGUIEventSystem_SetSelectComponentWithDefault");
static_assert(offsetof(LGUIEventSystem_SetSelectComponentWithDefault, InSelectComp) == 0x000000, "Member 'LGUIEventSystem_SetSelectComponentWithDefault::InSelectComp' has a wrong offset!");

// Function LGUI.LGUIEventSystem.UnregisterGlobalListener
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_UnregisterGlobalListener final
{
public:
	struct FLGUIDelegateHandleWrapper             InHandle;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_UnregisterGlobalListener) == 0x000008, "Wrong alignment on LGUIEventSystem_UnregisterGlobalListener");
static_assert(sizeof(LGUIEventSystem_UnregisterGlobalListener) == 0x000008, "Wrong size on LGUIEventSystem_UnregisterGlobalListener");
static_assert(offsetof(LGUIEventSystem_UnregisterGlobalListener, InHandle) == 0x000000, "Member 'LGUIEventSystem_UnregisterGlobalListener::InHandle' has a wrong offset!");

// Function LGUI.LGUIEventSystem.UnregisterHitEvent
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_UnregisterHitEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InHandle;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_UnregisterHitEvent) == 0x000008, "Wrong alignment on LGUIEventSystem_UnregisterHitEvent");
static_assert(sizeof(LGUIEventSystem_UnregisterHitEvent) == 0x000008, "Wrong size on LGUIEventSystem_UnregisterHitEvent");
static_assert(offsetof(LGUIEventSystem_UnregisterHitEvent, InHandle) == 0x000000, "Member 'LGUIEventSystem_UnregisterHitEvent::InHandle' has a wrong offset!");

// Function LGUI.LGUIEventSystem.UnregisterInputChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct LGUIEventSystem_UnregisterInputChangeEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             delegateHandle;                                    // 0x0000(0x0008)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_UnregisterInputChangeEvent) == 0x000008, "Wrong alignment on LGUIEventSystem_UnregisterInputChangeEvent");
static_assert(sizeof(LGUIEventSystem_UnregisterInputChangeEvent) == 0x000008, "Wrong size on LGUIEventSystem_UnregisterInputChangeEvent");
static_assert(offsetof(LGUIEventSystem_UnregisterInputChangeEvent, delegateHandle) == 0x000000, "Member 'LGUIEventSystem_UnregisterInputChangeEvent::delegateHandle' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetCurrentSelectedComponent
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_GetCurrentSelectedComponent final
{
public:
	int32                                         InPointerID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetCurrentSelectedComponent) == 0x000008, "Wrong alignment on LGUIEventSystem_GetCurrentSelectedComponent");
static_assert(sizeof(LGUIEventSystem_GetCurrentSelectedComponent) == 0x000010, "Wrong size on LGUIEventSystem_GetCurrentSelectedComponent");
static_assert(offsetof(LGUIEventSystem_GetCurrentSelectedComponent, InPointerID) == 0x000000, "Member 'LGUIEventSystem_GetCurrentSelectedComponent::InPointerID' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_GetCurrentSelectedComponent, ReturnValue) == 0x000008, "Member 'LGUIEventSystem_GetCurrentSelectedComponent::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetHighlightedComponentForNavigation
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_GetHighlightedComponentForNavigation final
{
public:
	int32                                         InPointerID;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetHighlightedComponentForNavigation) == 0x000008, "Wrong alignment on LGUIEventSystem_GetHighlightedComponentForNavigation");
static_assert(sizeof(LGUIEventSystem_GetHighlightedComponentForNavigation) == 0x000010, "Wrong size on LGUIEventSystem_GetHighlightedComponentForNavigation");
static_assert(offsetof(LGUIEventSystem_GetHighlightedComponentForNavigation, InPointerID) == 0x000000, "Member 'LGUIEventSystem_GetHighlightedComponentForNavigation::InPointerID' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_GetHighlightedComponentForNavigation, ReturnValue) == 0x000008, "Member 'LGUIEventSystem_GetHighlightedComponentForNavigation::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIEventSystem.GetPointerEventData
// 0x0010 (0x0010 - 0x0000)
struct LGUIEventSystem_GetPointerEventData final
{
public:
	int32                                         pointerID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          createIfNotExist;                                  // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGUIPointerEventData*                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIEventSystem_GetPointerEventData) == 0x000008, "Wrong alignment on LGUIEventSystem_GetPointerEventData");
static_assert(sizeof(LGUIEventSystem_GetPointerEventData) == 0x000010, "Wrong size on LGUIEventSystem_GetPointerEventData");
static_assert(offsetof(LGUIEventSystem_GetPointerEventData, pointerID) == 0x000000, "Member 'LGUIEventSystem_GetPointerEventData::pointerID' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_GetPointerEventData, createIfNotExist) == 0x000004, "Member 'LGUIEventSystem_GetPointerEventData::createIfNotExist' has a wrong offset!");
static_assert(offsetof(LGUIEventSystem_GetPointerEventData, ReturnValue) == 0x000008, "Member 'LGUIEventSystem_GetPointerEventData::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPlayTween.RegisterOnComplete
// 0x0018 (0x0018 - 0x0000)
struct LGUIPlayTween_RegisterOnComplete final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_RegisterOnComplete) == 0x000008, "Wrong alignment on LGUIPlayTween_RegisterOnComplete");
static_assert(sizeof(LGUIPlayTween_RegisterOnComplete) == 0x000018, "Wrong size on LGUIPlayTween_RegisterOnComplete");
static_assert(offsetof(LGUIPlayTween_RegisterOnComplete, InDelegate) == 0x000000, "Member 'LGUIPlayTween_RegisterOnComplete::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIPlayTween_RegisterOnComplete, ReturnValue) == 0x000010, "Member 'LGUIPlayTween_RegisterOnComplete::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPlayTween.RegisterOnCycleComplete
// 0x0018 (0x0018 - 0x0000)
struct LGUIPlayTween_RegisterOnCycleComplete final
{
public:
	TDelegate<void(int32 InCycleCompleteCount)>   InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_RegisterOnCycleComplete) == 0x000008, "Wrong alignment on LGUIPlayTween_RegisterOnCycleComplete");
static_assert(sizeof(LGUIPlayTween_RegisterOnCycleComplete) == 0x000018, "Wrong size on LGUIPlayTween_RegisterOnCycleComplete");
static_assert(offsetof(LGUIPlayTween_RegisterOnCycleComplete, InDelegate) == 0x000000, "Member 'LGUIPlayTween_RegisterOnCycleComplete::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIPlayTween_RegisterOnCycleComplete, ReturnValue) == 0x000010, "Member 'LGUIPlayTween_RegisterOnCycleComplete::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPlayTween.UnregisterOnComplete
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTween_UnregisterOnComplete final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_UnregisterOnComplete) == 0x000008, "Wrong alignment on LGUIPlayTween_UnregisterOnComplete");
static_assert(sizeof(LGUIPlayTween_UnregisterOnComplete) == 0x000008, "Wrong size on LGUIPlayTween_UnregisterOnComplete");
static_assert(offsetof(LGUIPlayTween_UnregisterOnComplete, InDelegateHandle) == 0x000000, "Member 'LGUIPlayTween_UnregisterOnComplete::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIPlayTween.UnregisterOnCycleComplete
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTween_UnregisterOnCycleComplete final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_UnregisterOnCycleComplete) == 0x000008, "Wrong alignment on LGUIPlayTween_UnregisterOnCycleComplete");
static_assert(sizeof(LGUIPlayTween_UnregisterOnCycleComplete) == 0x000008, "Wrong size on LGUIPlayTween_UnregisterOnCycleComplete");
static_assert(offsetof(LGUIPlayTween_UnregisterOnCycleComplete, InDelegateHandle) == 0x000000, "Member 'LGUIPlayTween_UnregisterOnCycleComplete::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIPlayTween.GetTweener
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTween_GetTweener final
{
public:
	class ULTweener*                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTween_GetTweener) == 0x000008, "Wrong alignment on LGUIPlayTween_GetTweener");
static_assert(sizeof(LGUIPlayTween_GetTweener) == 0x000008, "Wrong size on LGUIPlayTween_GetTweener");
static_assert(offsetof(LGUIPlayTween_GetTweener, ReturnValue) == 0x000000, "Member 'LGUIPlayTween_GetTweener::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.SetColumnCount
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_SetColumnCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_SetColumnCount) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_SetColumnCount");
static_assert(sizeof(UIFlexibleGridLayoutElement_SetColumnCount) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_SetColumnCount");
static_assert(offsetof(UIFlexibleGridLayoutElement_SetColumnCount, Value) == 0x000000, "Member 'UIFlexibleGridLayoutElement_SetColumnCount::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.SetColumnIndex
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_SetColumnIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_SetColumnIndex) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_SetColumnIndex");
static_assert(sizeof(UIFlexibleGridLayoutElement_SetColumnIndex) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_SetColumnIndex");
static_assert(offsetof(UIFlexibleGridLayoutElement_SetColumnIndex, Value) == 0x000000, "Member 'UIFlexibleGridLayoutElement_SetColumnIndex::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.SetIgnoreLayout
// 0x0001 (0x0001 - 0x0000)
struct UIFlexibleGridLayoutElement_SetIgnoreLayout final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_SetIgnoreLayout) == 0x000001, "Wrong alignment on UIFlexibleGridLayoutElement_SetIgnoreLayout");
static_assert(sizeof(UIFlexibleGridLayoutElement_SetIgnoreLayout) == 0x000001, "Wrong size on UIFlexibleGridLayoutElement_SetIgnoreLayout");
static_assert(offsetof(UIFlexibleGridLayoutElement_SetIgnoreLayout, Value) == 0x000000, "Member 'UIFlexibleGridLayoutElement_SetIgnoreLayout::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.SetRowCount
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_SetRowCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_SetRowCount) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_SetRowCount");
static_assert(sizeof(UIFlexibleGridLayoutElement_SetRowCount) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_SetRowCount");
static_assert(offsetof(UIFlexibleGridLayoutElement_SetRowCount, Value) == 0x000000, "Member 'UIFlexibleGridLayoutElement_SetRowCount::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.SetRowIndex
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_SetRowIndex final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_SetRowIndex) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_SetRowIndex");
static_assert(sizeof(UIFlexibleGridLayoutElement_SetRowIndex) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_SetRowIndex");
static_assert(offsetof(UIFlexibleGridLayoutElement_SetRowIndex, Value) == 0x000000, "Member 'UIFlexibleGridLayoutElement_SetRowIndex::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.GetColumnCount
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_GetColumnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_GetColumnCount) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_GetColumnCount");
static_assert(sizeof(UIFlexibleGridLayoutElement_GetColumnCount) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_GetColumnCount");
static_assert(offsetof(UIFlexibleGridLayoutElement_GetColumnCount, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayoutElement_GetColumnCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.GetColumnIndex
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_GetColumnIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_GetColumnIndex) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_GetColumnIndex");
static_assert(sizeof(UIFlexibleGridLayoutElement_GetColumnIndex) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_GetColumnIndex");
static_assert(offsetof(UIFlexibleGridLayoutElement_GetColumnIndex, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayoutElement_GetColumnIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.GetIgnoreLayout
// 0x0001 (0x0001 - 0x0000)
struct UIFlexibleGridLayoutElement_GetIgnoreLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_GetIgnoreLayout) == 0x000001, "Wrong alignment on UIFlexibleGridLayoutElement_GetIgnoreLayout");
static_assert(sizeof(UIFlexibleGridLayoutElement_GetIgnoreLayout) == 0x000001, "Wrong size on UIFlexibleGridLayoutElement_GetIgnoreLayout");
static_assert(offsetof(UIFlexibleGridLayoutElement_GetIgnoreLayout, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayoutElement_GetIgnoreLayout::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.GetRowCount
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_GetRowCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_GetRowCount) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_GetRowCount");
static_assert(sizeof(UIFlexibleGridLayoutElement_GetRowCount) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_GetRowCount");
static_assert(offsetof(UIFlexibleGridLayoutElement_GetRowCount, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayoutElement_GetRowCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayoutElement.GetRowIndex
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayoutElement_GetRowIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayoutElement_GetRowIndex) == 0x000004, "Wrong alignment on UIFlexibleGridLayoutElement_GetRowIndex");
static_assert(sizeof(UIFlexibleGridLayoutElement_GetRowIndex) == 0x000004, "Wrong size on UIFlexibleGridLayoutElement_GetRowIndex");
static_assert(offsetof(UIFlexibleGridLayoutElement_GetRowIndex, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayoutElement_GetRowIndex::ReturnValue' has a wrong offset!");

// Function LGUI.LGUINavigationInterface.OnNavigate
// 0x0020 (0x0020 - 0x0000)
struct LGUINavigationInterface_OnNavigate final
{
public:
	ELGUINavigationDirection                      Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ILGUINavigationInterface> Result;                                         // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUINavigationInterface_OnNavigate) == 0x000008, "Wrong alignment on LGUINavigationInterface_OnNavigate");
static_assert(sizeof(LGUINavigationInterface_OnNavigate) == 0x000020, "Wrong size on LGUINavigationInterface_OnNavigate");
static_assert(offsetof(LGUINavigationInterface_OnNavigate, Direction) == 0x000000, "Member 'LGUINavigationInterface_OnNavigate::Direction' has a wrong offset!");
static_assert(offsetof(LGUINavigationInterface_OnNavigate, Result) == 0x000008, "Member 'LGUINavigationInterface_OnNavigate::Result' has a wrong offset!");
static_assert(offsetof(LGUINavigationInterface_OnNavigate, ReturnValue) == 0x000018, "Member 'LGUINavigationInterface_OnNavigate::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayoutSlotBase.SetDesiredSize
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayoutSlotBase_SetDesiredSize final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayoutSlotBase_SetDesiredSize) == 0x000008, "Wrong alignment on UIPanelLayoutSlotBase_SetDesiredSize");
static_assert(sizeof(UIPanelLayoutSlotBase_SetDesiredSize) == 0x000010, "Wrong size on UIPanelLayoutSlotBase_SetDesiredSize");
static_assert(offsetof(UIPanelLayoutSlotBase_SetDesiredSize, Value) == 0x000000, "Member 'UIPanelLayoutSlotBase_SetDesiredSize::Value' has a wrong offset!");

// Function LGUI.UIPanelLayoutSlotBase.SetIgnoreLayout
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayoutSlotBase_SetIgnoreLayout final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayoutSlotBase_SetIgnoreLayout) == 0x000001, "Wrong alignment on UIPanelLayoutSlotBase_SetIgnoreLayout");
static_assert(sizeof(UIPanelLayoutSlotBase_SetIgnoreLayout) == 0x000001, "Wrong size on UIPanelLayoutSlotBase_SetIgnoreLayout");
static_assert(offsetof(UIPanelLayoutSlotBase_SetIgnoreLayout, Value) == 0x000000, "Member 'UIPanelLayoutSlotBase_SetIgnoreLayout::Value' has a wrong offset!");

// Function LGUI.UIPanelLayoutSlotBase.GetDesiredSize
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayoutSlotBase_GetDesiredSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayoutSlotBase_GetDesiredSize) == 0x000008, "Wrong alignment on UIPanelLayoutSlotBase_GetDesiredSize");
static_assert(sizeof(UIPanelLayoutSlotBase_GetDesiredSize) == 0x000010, "Wrong size on UIPanelLayoutSlotBase_GetDesiredSize");
static_assert(offsetof(UIPanelLayoutSlotBase_GetDesiredSize, ReturnValue) == 0x000000, "Member 'UIPanelLayoutSlotBase_GetDesiredSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayoutSlotBase.GetIgnoreLayout
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayoutSlotBase_GetIgnoreLayout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayoutSlotBase_GetIgnoreLayout) == 0x000001, "Wrong alignment on UIPanelLayoutSlotBase_GetIgnoreLayout");
static_assert(sizeof(UIPanelLayoutSlotBase_GetIgnoreLayout) == 0x000001, "Wrong size on UIPanelLayoutSlotBase_GetIgnoreLayout");
static_assert(offsetof(UIPanelLayoutSlotBase_GetIgnoreLayout, ReturnValue) == 0x000000, "Member 'UIPanelLayoutSlotBase_GetIgnoreLayout::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SeekFrame
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_SeekFrame final
{
public:
	int32                                         FrameNumber;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SeekFrame) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_SeekFrame");
static_assert(sizeof(LGUIImageSequencePlayer_SeekFrame) == 0x000004, "Wrong size on LGUIImageSequencePlayer_SeekFrame");
static_assert(offsetof(LGUIImageSequencePlayer_SeekFrame, FrameNumber) == 0x000000, "Member 'LGUIImageSequencePlayer_SeekFrame::FrameNumber' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SeekTime
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_SeekTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SeekTime) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_SeekTime");
static_assert(sizeof(LGUIImageSequencePlayer_SeekTime) == 0x000004, "Wrong size on LGUIImageSequencePlayer_SeekTime");
static_assert(offsetof(LGUIImageSequencePlayer_SeekTime, Time) == 0x000000, "Member 'LGUIImageSequencePlayer_SeekTime::Time' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SetFps
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_SetFps final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SetFps) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_SetFps");
static_assert(sizeof(LGUIImageSequencePlayer_SetFps) == 0x000004, "Wrong size on LGUIImageSequencePlayer_SetFps");
static_assert(offsetof(LGUIImageSequencePlayer_SetFps, Value) == 0x000000, "Member 'LGUIImageSequencePlayer_SetFps::Value' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.SetLoop
// 0x0001 (0x0001 - 0x0000)
struct LGUIImageSequencePlayer_SetLoop final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_SetLoop) == 0x000001, "Wrong alignment on LGUIImageSequencePlayer_SetLoop");
static_assert(sizeof(LGUIImageSequencePlayer_SetLoop) == 0x000001, "Wrong size on LGUIImageSequencePlayer_SetLoop");
static_assert(offsetof(LGUIImageSequencePlayer_SetLoop, Value) == 0x000000, "Member 'LGUIImageSequencePlayer_SetLoop::Value' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetDuration) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_GetDuration");
static_assert(sizeof(LGUIImageSequencePlayer_GetDuration) == 0x000004, "Wrong size on LGUIImageSequencePlayer_GetDuration");
static_assert(offsetof(LGUIImageSequencePlayer_GetDuration, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetDuration::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetFps
// 0x0004 (0x0004 - 0x0000)
struct LGUIImageSequencePlayer_GetFps final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetFps) == 0x000004, "Wrong alignment on LGUIImageSequencePlayer_GetFps");
static_assert(sizeof(LGUIImageSequencePlayer_GetFps) == 0x000004, "Wrong size on LGUIImageSequencePlayer_GetFps");
static_assert(offsetof(LGUIImageSequencePlayer_GetFps, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetFps::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetIsPlaying
// 0x0001 (0x0001 - 0x0000)
struct LGUIImageSequencePlayer_GetIsPlaying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetIsPlaying) == 0x000001, "Wrong alignment on LGUIImageSequencePlayer_GetIsPlaying");
static_assert(sizeof(LGUIImageSequencePlayer_GetIsPlaying) == 0x000001, "Wrong size on LGUIImageSequencePlayer_GetIsPlaying");
static_assert(offsetof(LGUIImageSequencePlayer_GetIsPlaying, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetIsPlaying::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIImageSequencePlayer.GetLoop
// 0x0001 (0x0001 - 0x0000)
struct LGUIImageSequencePlayer_GetLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIImageSequencePlayer_GetLoop) == 0x000001, "Wrong alignment on LGUIImageSequencePlayer_GetLoop");
static_assert(sizeof(LGUIImageSequencePlayer_GetLoop) == 0x000001, "Wrong size on LGUIImageSequencePlayer_GetLoop");
static_assert(offsetof(LGUIImageSequencePlayer_GetLoop, ReturnValue) == 0x000000, "Member 'LGUIImageSequencePlayer_GetLoop::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.CancelAllAnimations
// 0x0001 (0x0001 - 0x0000)
struct UILayoutWithAnimation_CancelAllAnimations final
{
public:
	bool                                          callComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CancelAllAnimations) == 0x000001, "Wrong alignment on UILayoutWithAnimation_CancelAllAnimations");
static_assert(sizeof(UILayoutWithAnimation_CancelAllAnimations) == 0x000001, "Wrong size on UILayoutWithAnimation_CancelAllAnimations");
static_assert(offsetof(UILayoutWithAnimation_CancelAllAnimations, callComplete) == 0x000000, "Member 'UILayoutWithAnimation_CancelAllAnimations::callComplete' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.SetAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct UILayoutWithAnimation_SetAnimationDuration final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_SetAnimationDuration) == 0x000004, "Wrong alignment on UILayoutWithAnimation_SetAnimationDuration");
static_assert(sizeof(UILayoutWithAnimation_SetAnimationDuration) == 0x000004, "Wrong size on UILayoutWithAnimation_SetAnimationDuration");
static_assert(offsetof(UILayoutWithAnimation_SetAnimationDuration, Value) == 0x000000, "Member 'UILayoutWithAnimation_SetAnimationDuration::Value' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.SetAnimationType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutWithAnimation_SetAnimationType final
{
public:
	EUILayoutAnimationType                        Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_SetAnimationType) == 0x000001, "Wrong alignment on UILayoutWithAnimation_SetAnimationType");
static_assert(sizeof(UILayoutWithAnimation_SetAnimationType) == 0x000001, "Wrong size on UILayoutWithAnimation_SetAnimationType");
static_assert(offsetof(UILayoutWithAnimation_SetAnimationType, Value) == 0x000000, "Member 'UILayoutWithAnimation_SetAnimationType::Value' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.SetCustomAnimation
// 0x0008 (0x0008 - 0x0000)
struct UILayoutWithAnimation_SetCustomAnimation final
{
public:
	class UUILayoutWithAnimation_CustomAnimation* Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_SetCustomAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_SetCustomAnimation");
static_assert(sizeof(UILayoutWithAnimation_SetCustomAnimation) == 0x000008, "Wrong size on UILayoutWithAnimation_SetCustomAnimation");
static_assert(offsetof(UILayoutWithAnimation_SetCustomAnimation, Value) == 0x000000, "Member 'UILayoutWithAnimation_SetCustomAnimation::Value' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.GetAnimationDuration
// 0x0004 (0x0004 - 0x0000)
struct UILayoutWithAnimation_GetAnimationDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_GetAnimationDuration) == 0x000004, "Wrong alignment on UILayoutWithAnimation_GetAnimationDuration");
static_assert(sizeof(UILayoutWithAnimation_GetAnimationDuration) == 0x000004, "Wrong size on UILayoutWithAnimation_GetAnimationDuration");
static_assert(offsetof(UILayoutWithAnimation_GetAnimationDuration, ReturnValue) == 0x000000, "Member 'UILayoutWithAnimation_GetAnimationDuration::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.GetAnimationType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutWithAnimation_GetAnimationType final
{
public:
	EUILayoutAnimationType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_GetAnimationType) == 0x000001, "Wrong alignment on UILayoutWithAnimation_GetAnimationType");
static_assert(sizeof(UILayoutWithAnimation_GetAnimationType) == 0x000001, "Wrong size on UILayoutWithAnimation_GetAnimationType");
static_assert(offsetof(UILayoutWithAnimation_GetAnimationType, ReturnValue) == 0x000000, "Member 'UILayoutWithAnimation_GetAnimationType::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation.GetCustomAnimation
// 0x0008 (0x0008 - 0x0000)
struct UILayoutWithAnimation_GetCustomAnimation final
{
public:
	class UUILayoutWithAnimation_CustomAnimation* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_GetCustomAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_GetCustomAnimation");
static_assert(sizeof(UILayoutWithAnimation_GetCustomAnimation) == 0x000008, "Wrong size on UILayoutWithAnimation_GetCustomAnimation");
static_assert(offsetof(UILayoutWithAnimation_GetCustomAnimation, ReturnValue) == 0x000000, "Member 'UILayoutWithAnimation_GetCustomAnimation::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetAlign final
{
public:
	ELGUILayoutAlignmentType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetAlign) == 0x000001, "Wrong alignment on UIGridLayout_SetAlign");
static_assert(sizeof(UIGridLayout_SetAlign) == 0x000001, "Wrong size on UIGridLayout_SetAlign");
static_assert(offsetof(UIGridLayout_SetAlign, Value) == 0x000000, "Member 'UIGridLayout_SetAlign::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetCellSize
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_SetCellSize final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetCellSize) == 0x000008, "Wrong alignment on UIGridLayout_SetCellSize");
static_assert(sizeof(UIGridLayout_SetCellSize) == 0x000010, "Wrong size on UIGridLayout_SetCellSize");
static_assert(offsetof(UIGridLayout_SetCellSize, Value) == 0x000000, "Member 'UIGridLayout_SetCellSize::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetDependOnSizeOrCount
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetDependOnSizeOrCount final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetDependOnSizeOrCount) == 0x000001, "Wrong alignment on UIGridLayout_SetDependOnSizeOrCount");
static_assert(sizeof(UIGridLayout_SetDependOnSizeOrCount) == 0x000001, "Wrong size on UIGridLayout_SetDependOnSizeOrCount");
static_assert(offsetof(UIGridLayout_SetDependOnSizeOrCount, Value) == 0x000000, "Member 'UIGridLayout_SetDependOnSizeOrCount::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetExpendChildSize
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetExpendChildSize final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetExpendChildSize) == 0x000001, "Wrong alignment on UIGridLayout_SetExpendChildSize");
static_assert(sizeof(UIGridLayout_SetExpendChildSize) == 0x000001, "Wrong size on UIGridLayout_SetExpendChildSize");
static_assert(offsetof(UIGridLayout_SetExpendChildSize, Value) == 0x000000, "Member 'UIGridLayout_SetExpendChildSize::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_SetHeightFitToChildren");
static_assert(sizeof(UIGridLayout_SetHeightFitToChildren) == 0x000001, "Wrong size on UIGridLayout_SetHeightFitToChildren");
static_assert(offsetof(UIGridLayout_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIGridLayout_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetHorizontalOrVertical
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetHorizontalOrVertical final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetHorizontalOrVertical) == 0x000001, "Wrong alignment on UIGridLayout_SetHorizontalOrVertical");
static_assert(sizeof(UIGridLayout_SetHorizontalOrVertical) == 0x000001, "Wrong size on UIGridLayout_SetHorizontalOrVertical");
static_assert(offsetof(UIGridLayout_SetHorizontalOrVertical, Value) == 0x000000, "Member 'UIGridLayout_SetHorizontalOrVertical::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetLastLineCanAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetLastLineCanAlign final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetLastLineCanAlign) == 0x000001, "Wrong alignment on UIGridLayout_SetLastLineCanAlign");
static_assert(sizeof(UIGridLayout_SetLastLineCanAlign) == 0x000001, "Wrong size on UIGridLayout_SetLastLineCanAlign");
static_assert(offsetof(UIGridLayout_SetLastLineCanAlign, Value) == 0x000000, "Member 'UIGridLayout_SetLastLineCanAlign::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetMaxItemCountInOneLine
// 0x0004 (0x0004 - 0x0000)
struct UIGridLayout_SetMaxItemCountInOneLine final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetMaxItemCountInOneLine) == 0x000004, "Wrong alignment on UIGridLayout_SetMaxItemCountInOneLine");
static_assert(sizeof(UIGridLayout_SetMaxItemCountInOneLine) == 0x000004, "Wrong size on UIGridLayout_SetMaxItemCountInOneLine");
static_assert(offsetof(UIGridLayout_SetMaxItemCountInOneLine, Value) == 0x000000, "Member 'UIGridLayout_SetMaxItemCountInOneLine::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetPadding) == 0x000004, "Wrong alignment on UIGridLayout_SetPadding");
static_assert(sizeof(UIGridLayout_SetPadding) == 0x000010, "Wrong size on UIGridLayout_SetPadding");
static_assert(offsetof(UIGridLayout_SetPadding, Value) == 0x000000, "Member 'UIGridLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetSpacing
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_SetSpacing final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetSpacing) == 0x000008, "Wrong alignment on UIGridLayout_SetSpacing");
static_assert(sizeof(UIGridLayout_SetSpacing) == 0x000010, "Wrong size on UIGridLayout_SetSpacing");
static_assert(offsetof(UIGridLayout_SetSpacing, Value) == 0x000000, "Member 'UIGridLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_SetWidthFitToChildren");
static_assert(sizeof(UIGridLayout_SetWidthFitToChildren) == 0x000001, "Wrong size on UIGridLayout_SetWidthFitToChildren");
static_assert(offsetof(UIGridLayout_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIGridLayout_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIGridLayout.GetActuralRange
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_GetActuralRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetActuralRange) == 0x000008, "Wrong alignment on UIGridLayout_GetActuralRange");
static_assert(sizeof(UIGridLayout_GetActuralRange) == 0x000010, "Wrong size on UIGridLayout_GetActuralRange");
static_assert(offsetof(UIGridLayout_GetActuralRange, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetActuralRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetAlign final
{
public:
	ELGUILayoutAlignmentType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetAlign) == 0x000001, "Wrong alignment on UIGridLayout_GetAlign");
static_assert(sizeof(UIGridLayout_GetAlign) == 0x000001, "Wrong size on UIGridLayout_GetAlign");
static_assert(offsetof(UIGridLayout_GetAlign, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetCellSize
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_GetCellSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetCellSize) == 0x000008, "Wrong alignment on UIGridLayout_GetCellSize");
static_assert(sizeof(UIGridLayout_GetCellSize) == 0x000010, "Wrong size on UIGridLayout_GetCellSize");
static_assert(offsetof(UIGridLayout_GetCellSize, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetCellSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetDependOnSizeOrCount
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetDependOnSizeOrCount final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetDependOnSizeOrCount) == 0x000001, "Wrong alignment on UIGridLayout_GetDependOnSizeOrCount");
static_assert(sizeof(UIGridLayout_GetDependOnSizeOrCount) == 0x000001, "Wrong size on UIGridLayout_GetDependOnSizeOrCount");
static_assert(offsetof(UIGridLayout_GetDependOnSizeOrCount, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetDependOnSizeOrCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetExpendChildSize
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetExpendChildSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetExpendChildSize) == 0x000001, "Wrong alignment on UIGridLayout_GetExpendChildSize");
static_assert(sizeof(UIGridLayout_GetExpendChildSize) == 0x000001, "Wrong size on UIGridLayout_GetExpendChildSize");
static_assert(offsetof(UIGridLayout_GetExpendChildSize, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetExpendChildSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_GetHeightFitToChildren");
static_assert(sizeof(UIGridLayout_GetHeightFitToChildren) == 0x000001, "Wrong size on UIGridLayout_GetHeightFitToChildren");
static_assert(offsetof(UIGridLayout_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetHorizontalOrVertical
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetHorizontalOrVertical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetHorizontalOrVertical) == 0x000001, "Wrong alignment on UIGridLayout_GetHorizontalOrVertical");
static_assert(sizeof(UIGridLayout_GetHorizontalOrVertical) == 0x000001, "Wrong size on UIGridLayout_GetHorizontalOrVertical");
static_assert(offsetof(UIGridLayout_GetHorizontalOrVertical, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetHorizontalOrVertical::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetLastLineCanAlign
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetLastLineCanAlign final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetLastLineCanAlign) == 0x000001, "Wrong alignment on UIGridLayout_GetLastLineCanAlign");
static_assert(sizeof(UIGridLayout_GetLastLineCanAlign) == 0x000001, "Wrong size on UIGridLayout_GetLastLineCanAlign");
static_assert(offsetof(UIGridLayout_GetLastLineCanAlign, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetLastLineCanAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetMaxItemCountInOneLine
// 0x0004 (0x0004 - 0x0000)
struct UIGridLayout_GetMaxItemCountInOneLine final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetMaxItemCountInOneLine) == 0x000004, "Wrong alignment on UIGridLayout_GetMaxItemCountInOneLine");
static_assert(sizeof(UIGridLayout_GetMaxItemCountInOneLine) == 0x000004, "Wrong size on UIGridLayout_GetMaxItemCountInOneLine");
static_assert(offsetof(UIGridLayout_GetMaxItemCountInOneLine, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetMaxItemCountInOneLine::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetPadding) == 0x000004, "Wrong alignment on UIGridLayout_GetPadding");
static_assert(sizeof(UIGridLayout_GetPadding) == 0x000010, "Wrong size on UIGridLayout_GetPadding");
static_assert(offsetof(UIGridLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetSpacing
// 0x0010 (0x0010 - 0x0000)
struct UIGridLayout_GetSpacing final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetSpacing) == 0x000008, "Wrong alignment on UIGridLayout_GetSpacing");
static_assert(sizeof(UIGridLayout_GetSpacing) == 0x000010, "Wrong size on UIGridLayout_GetSpacing");
static_assert(offsetof(UIGridLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIGridLayout.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIGridLayout_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGridLayout_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIGridLayout_GetWidthFitToChildren");
static_assert(sizeof(UIGridLayout_GetWidthFitToChildren) == 0x000001, "Wrong size on UIGridLayout_GetWidthFitToChildren");
static_assert(offsetof(UIGridLayout_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIGridLayout_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIManagerWorldSubsystem.ForceUpdateLayout
// 0x0008 (0x0008 - 0x0000)
struct LGUIManagerWorldSubsystem_ForceUpdateLayout final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerWorldSubsystem_ForceUpdateLayout) == 0x000008, "Wrong alignment on LGUIManagerWorldSubsystem_ForceUpdateLayout");
static_assert(sizeof(LGUIManagerWorldSubsystem_ForceUpdateLayout) == 0x000008, "Wrong size on LGUIManagerWorldSubsystem_ForceUpdateLayout");
static_assert(offsetof(LGUIManagerWorldSubsystem_ForceUpdateLayout, WorldContextObject) == 0x000000, "Member 'LGUIManagerWorldSubsystem_ForceUpdateLayout::WorldContextObject' has a wrong offset!");

// Function LGUI.LGUIManagerWorldSubsystem.RebuildLayout
// 0x0008 (0x0008 - 0x0000)
struct LGUIManagerWorldSubsystem_RebuildLayout final
{
public:
	class UUIItem*                                InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerWorldSubsystem_RebuildLayout) == 0x000008, "Wrong alignment on LGUIManagerWorldSubsystem_RebuildLayout");
static_assert(sizeof(LGUIManagerWorldSubsystem_RebuildLayout) == 0x000008, "Wrong size on LGUIManagerWorldSubsystem_RebuildLayout");
static_assert(offsetof(LGUIManagerWorldSubsystem_RebuildLayout, InItem) == 0x000000, "Member 'LGUIManagerWorldSubsystem_RebuildLayout::InItem' has a wrong offset!");

// Function LGUI.LGUIManagerWorldSubsystem.RegisterLGUICultureChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent final
{
public:
	TScriptInterface<class ILGUICultureChangedInterface> InItem;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent) == 0x000008, "Wrong alignment on LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent");
static_assert(sizeof(LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent) == 0x000010, "Wrong size on LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent");
static_assert(offsetof(LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent, InItem) == 0x000000, "Member 'LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent::InItem' has a wrong offset!");

// Function LGUI.LGUIManagerWorldSubsystem.RegisterLGUILayout
// 0x0010 (0x0010 - 0x0000)
struct LGUIManagerWorldSubsystem_RegisterLGUILayout final
{
public:
	TScriptInterface<class ILGUILayoutInterface>  InItem;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerWorldSubsystem_RegisterLGUILayout) == 0x000008, "Wrong alignment on LGUIManagerWorldSubsystem_RegisterLGUILayout");
static_assert(sizeof(LGUIManagerWorldSubsystem_RegisterLGUILayout) == 0x000010, "Wrong size on LGUIManagerWorldSubsystem_RegisterLGUILayout");
static_assert(offsetof(LGUIManagerWorldSubsystem_RegisterLGUILayout, InItem) == 0x000000, "Member 'LGUIManagerWorldSubsystem_RegisterLGUILayout::InItem' has a wrong offset!");

// Function LGUI.LGUIManagerWorldSubsystem.UnregisterLGUICultureChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent final
{
public:
	TScriptInterface<class ILGUICultureChangedInterface> InItem;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent) == 0x000008, "Wrong alignment on LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent");
static_assert(sizeof(LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent) == 0x000010, "Wrong size on LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent");
static_assert(offsetof(LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent, InItem) == 0x000000, "Member 'LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent::InItem' has a wrong offset!");

// Function LGUI.LGUIManagerWorldSubsystem.UnregisterLGUILayout
// 0x0010 (0x0010 - 0x0000)
struct LGUIManagerWorldSubsystem_UnregisterLGUILayout final
{
public:
	TScriptInterface<class ILGUILayoutInterface>  InItem;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIManagerWorldSubsystem_UnregisterLGUILayout) == 0x000008, "Wrong alignment on LGUIManagerWorldSubsystem_UnregisterLGUILayout");
static_assert(sizeof(LGUIManagerWorldSubsystem_UnregisterLGUILayout) == 0x000010, "Wrong size on LGUIManagerWorldSubsystem_UnregisterLGUILayout");
static_assert(offsetof(LGUIManagerWorldSubsystem_UnregisterLGUILayout, InItem) == 0x000000, "Member 'LGUIManagerWorldSubsystem_UnregisterLGUILayout::InItem' has a wrong offset!");

// Function LGUI.LGUIPlayTweenComponent.GetPlayTween
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTweenComponent_GetPlayTween final
{
public:
	class ULGUIPlayTween*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTweenComponent_GetPlayTween) == 0x000008, "Wrong alignment on LGUIPlayTweenComponent_GetPlayTween");
static_assert(sizeof(LGUIPlayTweenComponent_GetPlayTween) == 0x000008, "Wrong size on LGUIPlayTweenComponent_GetPlayTween");
static_assert(offsetof(LGUIPlayTweenComponent_GetPlayTween, ReturnValue) == 0x000000, "Member 'LGUIPlayTweenComponent_GetPlayTween::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPlayTweenSequenceComponent.RegisterOnComplete
// 0x0018 (0x0018 - 0x0000)
struct LGUIPlayTweenSequenceComponent_RegisterOnComplete final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTweenSequenceComponent_RegisterOnComplete) == 0x000008, "Wrong alignment on LGUIPlayTweenSequenceComponent_RegisterOnComplete");
static_assert(sizeof(LGUIPlayTweenSequenceComponent_RegisterOnComplete) == 0x000018, "Wrong size on LGUIPlayTweenSequenceComponent_RegisterOnComplete");
static_assert(offsetof(LGUIPlayTweenSequenceComponent_RegisterOnComplete, InDelegate) == 0x000000, "Member 'LGUIPlayTweenSequenceComponent_RegisterOnComplete::InDelegate' has a wrong offset!");
static_assert(offsetof(LGUIPlayTweenSequenceComponent_RegisterOnComplete, ReturnValue) == 0x000010, "Member 'LGUIPlayTweenSequenceComponent_RegisterOnComplete::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPlayTweenSequenceComponent.UnregisterOnComplete
// 0x0008 (0x0008 - 0x0000)
struct LGUIPlayTweenSequenceComponent_UnregisterOnComplete final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPlayTweenSequenceComponent_UnregisterOnComplete) == 0x000008, "Wrong alignment on LGUIPlayTweenSequenceComponent_UnregisterOnComplete");
static_assert(sizeof(LGUIPlayTweenSequenceComponent_UnregisterOnComplete) == 0x000008, "Wrong size on LGUIPlayTweenSequenceComponent_UnregisterOnComplete");
static_assert(offsetof(LGUIPlayTweenSequenceComponent_UnregisterOnComplete, InDelegateHandle) == 0x000000, "Member 'LGUIPlayTweenSequenceComponent_UnregisterOnComplete::InDelegateHandle' has a wrong offset!");

// Function LGUI.LGUIPointerClickInterface.OnPointerClick
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerClickInterface_OnPointerClick final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerClickInterface_OnPointerClick) == 0x000008, "Wrong alignment on LGUIPointerClickInterface_OnPointerClick");
static_assert(sizeof(LGUIPointerClickInterface_OnPointerClick) == 0x000010, "Wrong size on LGUIPointerClickInterface_OnPointerClick");
static_assert(offsetof(LGUIPointerClickInterface_OnPointerClick, EventData) == 0x000000, "Member 'LGUIPointerClickInterface_OnPointerClick::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerClickInterface_OnPointerClick, ReturnValue) == 0x000008, "Member 'LGUIPointerClickInterface_OnPointerClick::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDownUpInterface.OnPointerDown
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDownUpInterface_OnPointerDown final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDownUpInterface_OnPointerDown) == 0x000008, "Wrong alignment on LGUIPointerDownUpInterface_OnPointerDown");
static_assert(sizeof(LGUIPointerDownUpInterface_OnPointerDown) == 0x000010, "Wrong size on LGUIPointerDownUpInterface_OnPointerDown");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerDown, EventData) == 0x000000, "Member 'LGUIPointerDownUpInterface_OnPointerDown::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerDown, ReturnValue) == 0x000008, "Member 'LGUIPointerDownUpInterface_OnPointerDown::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDownUpInterface.OnPointerUp
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDownUpInterface_OnPointerUp final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDownUpInterface_OnPointerUp) == 0x000008, "Wrong alignment on LGUIPointerDownUpInterface_OnPointerUp");
static_assert(sizeof(LGUIPointerDownUpInterface_OnPointerUp) == 0x000010, "Wrong size on LGUIPointerDownUpInterface_OnPointerUp");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerUp, EventData) == 0x000000, "Member 'LGUIPointerDownUpInterface_OnPointerUp::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDownUpInterface_OnPointerUp, ReturnValue) == 0x000008, "Member 'LGUIPointerDownUpInterface_OnPointerUp::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragDropInterface.OnPointerDragDrop
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragDropInterface_OnPointerDragDrop final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragDropInterface_OnPointerDragDrop) == 0x000008, "Wrong alignment on LGUIPointerDragDropInterface_OnPointerDragDrop");
static_assert(sizeof(LGUIPointerDragDropInterface_OnPointerDragDrop) == 0x000010, "Wrong size on LGUIPointerDragDropInterface_OnPointerDragDrop");
static_assert(offsetof(LGUIPointerDragDropInterface_OnPointerDragDrop, EventData) == 0x000000, "Member 'LGUIPointerDragDropInterface_OnPointerDragDrop::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragDropInterface_OnPointerDragDrop, ReturnValue) == 0x000008, "Member 'LGUIPointerDragDropInterface_OnPointerDragDrop::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragInterface.OnPointerBeginDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragInterface_OnPointerBeginDrag final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragInterface_OnPointerBeginDrag) == 0x000008, "Wrong alignment on LGUIPointerDragInterface_OnPointerBeginDrag");
static_assert(sizeof(LGUIPointerDragInterface_OnPointerBeginDrag) == 0x000010, "Wrong size on LGUIPointerDragInterface_OnPointerBeginDrag");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerBeginDrag, EventData) == 0x000000, "Member 'LGUIPointerDragInterface_OnPointerBeginDrag::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerBeginDrag, ReturnValue) == 0x000008, "Member 'LGUIPointerDragInterface_OnPointerBeginDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragInterface.OnPointerDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragInterface_OnPointerDrag final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragInterface_OnPointerDrag) == 0x000008, "Wrong alignment on LGUIPointerDragInterface_OnPointerDrag");
static_assert(sizeof(LGUIPointerDragInterface_OnPointerDrag) == 0x000010, "Wrong size on LGUIPointerDragInterface_OnPointerDrag");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerDrag, EventData) == 0x000000, "Member 'LGUIPointerDragInterface_OnPointerDrag::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerDrag, ReturnValue) == 0x000008, "Member 'LGUIPointerDragInterface_OnPointerDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerDragInterface.OnPointerEndDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerDragInterface_OnPointerEndDrag final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerDragInterface_OnPointerEndDrag) == 0x000008, "Wrong alignment on LGUIPointerDragInterface_OnPointerEndDrag");
static_assert(sizeof(LGUIPointerDragInterface_OnPointerEndDrag) == 0x000010, "Wrong size on LGUIPointerDragInterface_OnPointerEndDrag");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerEndDrag, EventData) == 0x000000, "Member 'LGUIPointerDragInterface_OnPointerEndDrag::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerDragInterface_OnPointerEndDrag, ReturnValue) == 0x000008, "Member 'LGUIPointerDragInterface_OnPointerEndDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEnterExitInterface.OnPointerEnter
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerEnterExitInterface_OnPointerEnter final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerEnterExitInterface_OnPointerEnter) == 0x000008, "Wrong alignment on LGUIPointerEnterExitInterface_OnPointerEnter");
static_assert(sizeof(LGUIPointerEnterExitInterface_OnPointerEnter) == 0x000010, "Wrong size on LGUIPointerEnterExitInterface_OnPointerEnter");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerEnter, EventData) == 0x000000, "Member 'LGUIPointerEnterExitInterface_OnPointerEnter::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerEnter, ReturnValue) == 0x000008, "Member 'LGUIPointerEnterExitInterface_OnPointerEnter::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEnterExitInterface.OnPointerExit
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerEnterExitInterface_OnPointerExit final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerEnterExitInterface_OnPointerExit) == 0x000008, "Wrong alignment on LGUIPointerEnterExitInterface_OnPointerExit");
static_assert(sizeof(LGUIPointerEnterExitInterface_OnPointerExit) == 0x000010, "Wrong size on LGUIPointerEnterExitInterface_OnPointerExit");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerExit, EventData) == 0x000000, "Member 'LGUIPointerEnterExitInterface_OnPointerExit::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerEnterExitInterface_OnPointerExit, ReturnValue) == 0x000008, "Member 'LGUIPointerEnterExitInterface_OnPointerExit::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.IsPointerOverUI
// 0x0001 (0x0001 - 0x0000)
struct LGUIPointerEventData_IsPointerOverUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_IsPointerOverUI) == 0x000001, "Wrong alignment on LGUIPointerEventData_IsPointerOverUI");
static_assert(sizeof(LGUIPointerEventData_IsPointerOverUI) == 0x000001, "Wrong size on LGUIPointerEventData_IsPointerOverUI");
static_assert(offsetof(LGUIPointerEventData_IsPointerOverUI, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_IsPointerOverUI::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.SetHighlightedComponentForNavigation
// 0x0008 (0x0008 - 0x0000)
struct LGUIPointerEventData_SetHighlightedComponentForNavigation final
{
public:
	class USceneComponent*                        InComp;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_SetHighlightedComponentForNavigation) == 0x000008, "Wrong alignment on LGUIPointerEventData_SetHighlightedComponentForNavigation");
static_assert(sizeof(LGUIPointerEventData_SetHighlightedComponentForNavigation) == 0x000008, "Wrong size on LGUIPointerEventData_SetHighlightedComponentForNavigation");
static_assert(offsetof(LGUIPointerEventData_SetHighlightedComponentForNavigation, InComp) == 0x000000, "Member 'LGUIPointerEventData_SetHighlightedComponentForNavigation::InComp' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetCumulativeMoveDelta
// 0x0018 (0x0018 - 0x0000)
struct LGUIPointerEventData_GetCumulativeMoveDelta final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetCumulativeMoveDelta) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetCumulativeMoveDelta");
static_assert(sizeof(LGUIPointerEventData_GetCumulativeMoveDelta) == 0x000018, "Wrong size on LGUIPointerEventData_GetCumulativeMoveDelta");
static_assert(offsetof(LGUIPointerEventData_GetCumulativeMoveDelta, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetCumulativeMoveDelta::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetDragRayDirection
// 0x0018 (0x0018 - 0x0000)
struct LGUIPointerEventData_GetDragRayDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetDragRayDirection) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetDragRayDirection");
static_assert(sizeof(LGUIPointerEventData_GetDragRayDirection) == 0x000018, "Wrong size on LGUIPointerEventData_GetDragRayDirection");
static_assert(offsetof(LGUIPointerEventData_GetDragRayDirection, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetDragRayDirection::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetDragRayOrigin
// 0x0018 (0x0018 - 0x0000)
struct LGUIPointerEventData_GetDragRayOrigin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetDragRayOrigin) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetDragRayOrigin");
static_assert(sizeof(LGUIPointerEventData_GetDragRayOrigin) == 0x000018, "Wrong size on LGUIPointerEventData_GetDragRayOrigin");
static_assert(offsetof(LGUIPointerEventData_GetDragRayOrigin, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetDragRayOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetHighlightedComponentForNavigation
// 0x0008 (0x0008 - 0x0000)
struct LGUIPointerEventData_GetHighlightedComponentForNavigation final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetHighlightedComponentForNavigation) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetHighlightedComponentForNavigation");
static_assert(sizeof(LGUIPointerEventData_GetHighlightedComponentForNavigation) == 0x000008, "Wrong size on LGUIPointerEventData_GetHighlightedComponentForNavigation");
static_assert(offsetof(LGUIPointerEventData_GetHighlightedComponentForNavigation, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetHighlightedComponentForNavigation::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetLocalPointInPlane
// 0x0018 (0x0018 - 0x0000)
struct LGUIPointerEventData_GetLocalPointInPlane final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetLocalPointInPlane) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetLocalPointInPlane");
static_assert(sizeof(LGUIPointerEventData_GetLocalPointInPlane) == 0x000018, "Wrong size on LGUIPointerEventData_GetLocalPointInPlane");
static_assert(offsetof(LGUIPointerEventData_GetLocalPointInPlane, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetLocalPointInPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetWorldPointInPlane
// 0x0018 (0x0018 - 0x0000)
struct LGUIPointerEventData_GetWorldPointInPlane final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetWorldPointInPlane) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetWorldPointInPlane");
static_assert(sizeof(LGUIPointerEventData_GetWorldPointInPlane) == 0x000018, "Wrong size on LGUIPointerEventData_GetWorldPointInPlane");
static_assert(offsetof(LGUIPointerEventData_GetWorldPointInPlane, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetWorldPointInPlane::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerEventData.GetWorldPointSpherical
// 0x0018 (0x0018 - 0x0000)
struct LGUIPointerEventData_GetWorldPointSpherical final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPointerEventData_GetWorldPointSpherical) == 0x000008, "Wrong alignment on LGUIPointerEventData_GetWorldPointSpherical");
static_assert(sizeof(LGUIPointerEventData_GetWorldPointSpherical) == 0x000018, "Wrong size on LGUIPointerEventData_GetWorldPointSpherical");
static_assert(offsetof(LGUIPointerEventData_GetWorldPointSpherical, ReturnValue) == 0x000000, "Member 'LGUIPointerEventData_GetWorldPointSpherical::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerScrollInterface.OnPointerScroll
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerScrollInterface_OnPointerScroll final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerScrollInterface_OnPointerScroll) == 0x000008, "Wrong alignment on LGUIPointerScrollInterface_OnPointerScroll");
static_assert(sizeof(LGUIPointerScrollInterface_OnPointerScroll) == 0x000010, "Wrong size on LGUIPointerScrollInterface_OnPointerScroll");
static_assert(offsetof(LGUIPointerScrollInterface_OnPointerScroll, EventData) == 0x000000, "Member 'LGUIPointerScrollInterface_OnPointerScroll::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerScrollInterface_OnPointerScroll, ReturnValue) == 0x000008, "Member 'LGUIPointerScrollInterface_OnPointerScroll::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerDeselect
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerSelectDeselectInterface_OnPointerDeselect final
{
public:
	class ULGUIBaseEventData*                     EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerSelectDeselectInterface_OnPointerDeselect) == 0x000008, "Wrong alignment on LGUIPointerSelectDeselectInterface_OnPointerDeselect");
static_assert(sizeof(LGUIPointerSelectDeselectInterface_OnPointerDeselect) == 0x000010, "Wrong size on LGUIPointerSelectDeselectInterface_OnPointerDeselect");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerDeselect, EventData) == 0x000000, "Member 'LGUIPointerSelectDeselectInterface_OnPointerDeselect::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerDeselect, ReturnValue) == 0x000008, "Member 'LGUIPointerSelectDeselectInterface_OnPointerDeselect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerSelect
// 0x0010 (0x0010 - 0x0000)
struct LGUIPointerSelectDeselectInterface_OnPointerSelect final
{
public:
	class ULGUIBaseEventData*                     EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPointerSelectDeselectInterface_OnPointerSelect) == 0x000008, "Wrong alignment on LGUIPointerSelectDeselectInterface_OnPointerSelect");
static_assert(sizeof(LGUIPointerSelectDeselectInterface_OnPointerSelect) == 0x000010, "Wrong size on LGUIPointerSelectDeselectInterface_OnPointerSelect");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerSelect, EventData) == 0x000000, "Member 'LGUIPointerSelectDeselectInterface_OnPointerSelect::EventData' has a wrong offset!");
static_assert(offsetof(LGUIPointerSelectDeselectInterface_OnPointerSelect, ReturnValue) == 0x000008, "Member 'LGUIPointerSelectDeselectInterface_OnPointerSelect::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefab.LoadPrefab
// 0x0030 (0x0030 - 0x0000)
struct LGUIPrefab_LoadPrefab final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* LoadedRootActor)> InCallbackBeforeAwake;                            // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetRelativeTransformToIdentity;                    // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefab_LoadPrefab) == 0x000008, "Wrong alignment on LGUIPrefab_LoadPrefab");
static_assert(sizeof(LGUIPrefab_LoadPrefab) == 0x000030, "Wrong size on LGUIPrefab_LoadPrefab");
static_assert(offsetof(LGUIPrefab_LoadPrefab, WorldContextObject) == 0x000000, "Member 'LGUIPrefab_LoadPrefab::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefab, InParent) == 0x000008, "Member 'LGUIPrefab_LoadPrefab::InParent' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefab, InCallbackBeforeAwake) == 0x000010, "Member 'LGUIPrefab_LoadPrefab::InCallbackBeforeAwake' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefab, SetRelativeTransformToIdentity) == 0x000020, "Member 'LGUIPrefab_LoadPrefab::SetRelativeTransformToIdentity' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefab, ReturnValue) == 0x000028, "Member 'LGUIPrefab_LoadPrefab::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefab.LoadPrefabWithReplacement
// 0x00C8 (0x00C8 - 0x0000)
struct LGUIPrefab_LoadPrefabWithReplacement final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UObject*, class UObject*>          InReplaceAssetMap;                                 // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TMap<class UClass*, class UClass*>            InReplaceClassMap;                                 // 0x0060(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* LoadedRootActor)> InCallbackBeforeAwake;                            // 0x00B0(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x00C0(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefab_LoadPrefabWithReplacement) == 0x000008, "Wrong alignment on LGUIPrefab_LoadPrefabWithReplacement");
static_assert(sizeof(LGUIPrefab_LoadPrefabWithReplacement) == 0x0000C8, "Wrong size on LGUIPrefab_LoadPrefabWithReplacement");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithReplacement, WorldContextObject) == 0x000000, "Member 'LGUIPrefab_LoadPrefabWithReplacement::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithReplacement, InParent) == 0x000008, "Member 'LGUIPrefab_LoadPrefabWithReplacement::InParent' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithReplacement, InReplaceAssetMap) == 0x000010, "Member 'LGUIPrefab_LoadPrefabWithReplacement::InReplaceAssetMap' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithReplacement, InReplaceClassMap) == 0x000060, "Member 'LGUIPrefab_LoadPrefabWithReplacement::InReplaceClassMap' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithReplacement, InCallbackBeforeAwake) == 0x0000B0, "Member 'LGUIPrefab_LoadPrefabWithReplacement::InCallbackBeforeAwake' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithReplacement, ReturnValue) == 0x0000C0, "Member 'LGUIPrefab_LoadPrefabWithReplacement::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefab.LoadPrefabWithTransform
// 0x0070 (0x0070 - 0x0000)
struct LGUIPrefab_LoadPrefabWithTransform final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        InParent;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0028(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0040(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* LoadedRootActor)> InCallbackBeforeAwake;                            // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefab_LoadPrefabWithTransform) == 0x000008, "Wrong alignment on LGUIPrefab_LoadPrefabWithTransform");
static_assert(sizeof(LGUIPrefab_LoadPrefabWithTransform) == 0x000070, "Wrong size on LGUIPrefab_LoadPrefabWithTransform");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, WorldContextObject) == 0x000000, "Member 'LGUIPrefab_LoadPrefabWithTransform::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, InParent) == 0x000008, "Member 'LGUIPrefab_LoadPrefabWithTransform::InParent' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, Location) == 0x000010, "Member 'LGUIPrefab_LoadPrefabWithTransform::Location' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, Rotation) == 0x000028, "Member 'LGUIPrefab_LoadPrefabWithTransform::Rotation' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, Scale) == 0x000040, "Member 'LGUIPrefab_LoadPrefabWithTransform::Scale' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, InCallbackBeforeAwake) == 0x000058, "Member 'LGUIPrefab_LoadPrefabWithTransform::InCallbackBeforeAwake' has a wrong offset!");
static_assert(offsetof(LGUIPrefab_LoadPrefabWithTransform, ReturnValue) == 0x000068, "Member 'LGUIPrefab_LoadPrefabWithTransform::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabWorldSubsystem.IsLGUIPrefabSystemProcessingActor
// 0x0010 (0x0010 - 0x0000)
struct LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor) == 0x000008, "Wrong alignment on LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor");
static_assert(sizeof(LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor) == 0x000010, "Wrong size on LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor");
static_assert(offsetof(LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor, InActor) == 0x000000, "Member 'LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor::InActor' has a wrong offset!");
static_assert(offsetof(LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor, ReturnValue) == 0x000008, "Member 'LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.SetSequenceByDisplayName
// 0x0010 (0x0010 - 0x0000)
struct LGUIPrefabSequenceComponent_SetSequenceByDisplayName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_SetSequenceByDisplayName) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_SetSequenceByDisplayName");
static_assert(sizeof(LGUIPrefabSequenceComponent_SetSequenceByDisplayName) == 0x000010, "Wrong size on LGUIPrefabSequenceComponent_SetSequenceByDisplayName");
static_assert(offsetof(LGUIPrefabSequenceComponent_SetSequenceByDisplayName, InName) == 0x000000, "Member 'LGUIPrefabSequenceComponent_SetSequenceByDisplayName::InName' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.SetSequenceByIndex
// 0x0004 (0x0004 - 0x0000)
struct LGUIPrefabSequenceComponent_SetSequenceByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_SetSequenceByIndex) == 0x000004, "Wrong alignment on LGUIPrefabSequenceComponent_SetSequenceByIndex");
static_assert(sizeof(LGUIPrefabSequenceComponent_SetSequenceByIndex) == 0x000004, "Wrong size on LGUIPrefabSequenceComponent_SetSequenceByIndex");
static_assert(offsetof(LGUIPrefabSequenceComponent_SetSequenceByIndex, InIndex) == 0x000000, "Member 'LGUIPrefabSequenceComponent_SetSequenceByIndex::InIndex' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.SetSequenceByName
// 0x0008 (0x0008 - 0x0000)
struct LGUIPrefabSequenceComponent_SetSequenceByName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_SetSequenceByName) == 0x000004, "Wrong alignment on LGUIPrefabSequenceComponent_SetSequenceByName");
static_assert(sizeof(LGUIPrefabSequenceComponent_SetSequenceByName) == 0x000008, "Wrong size on LGUIPrefabSequenceComponent_SetSequenceByName");
static_assert(offsetof(LGUIPrefabSequenceComponent_SetSequenceByName, InName) == 0x000000, "Member 'LGUIPrefabSequenceComponent_SetSequenceByName::InName' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetCurrentSequence
// 0x0008 (0x0008 - 0x0000)
struct LGUIPrefabSequenceComponent_GetCurrentSequence final
{
public:
	class ULGUIPrefabSequence*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetCurrentSequence) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_GetCurrentSequence");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetCurrentSequence) == 0x000008, "Wrong size on LGUIPrefabSequenceComponent_GetCurrentSequence");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetCurrentSequence, ReturnValue) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetCurrentSequence::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetCurrentSequenceIndex
// 0x0004 (0x0004 - 0x0000)
struct LGUIPrefabSequenceComponent_GetCurrentSequenceIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetCurrentSequenceIndex) == 0x000004, "Wrong alignment on LGUIPrefabSequenceComponent_GetCurrentSequenceIndex");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetCurrentSequenceIndex) == 0x000004, "Wrong size on LGUIPrefabSequenceComponent_GetCurrentSequenceIndex");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetCurrentSequenceIndex, ReturnValue) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetCurrentSequenceIndex::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceArray
// 0x0010 (0x0010 - 0x0000)
struct LGUIPrefabSequenceComponent_GetSequenceArray final
{
public:
	TArray<class ULGUIPrefabSequence*>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetSequenceArray) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_GetSequenceArray");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetSequenceArray) == 0x000010, "Wrong size on LGUIPrefabSequenceComponent_GetSequenceArray");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceArray, ReturnValue) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetSequenceArray::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceByDisplayName
// 0x0018 (0x0018 - 0x0000)
struct LGUIPrefabSequenceComponent_GetSequenceByDisplayName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPrefabSequence*                    ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetSequenceByDisplayName) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_GetSequenceByDisplayName");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetSequenceByDisplayName) == 0x000018, "Wrong size on LGUIPrefabSequenceComponent_GetSequenceByDisplayName");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceByDisplayName, InName) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetSequenceByDisplayName::InName' has a wrong offset!");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceByDisplayName, ReturnValue) == 0x000010, "Member 'LGUIPrefabSequenceComponent_GetSequenceByDisplayName::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceByIndex
// 0x0010 (0x0010 - 0x0000)
struct LGUIPrefabSequenceComponent_GetSequenceByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULGUIPrefabSequence*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetSequenceByIndex) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_GetSequenceByIndex");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetSequenceByIndex) == 0x000010, "Wrong size on LGUIPrefabSequenceComponent_GetSequenceByIndex");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceByIndex, InIndex) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetSequenceByIndex::InIndex' has a wrong offset!");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceByIndex, ReturnValue) == 0x000008, "Member 'LGUIPrefabSequenceComponent_GetSequenceByIndex::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceByName
// 0x0010 (0x0010 - 0x0000)
struct LGUIPrefabSequenceComponent_GetSequenceByName final
{
public:
	class FName                                   InName;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUIPrefabSequence*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetSequenceByName) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_GetSequenceByName");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetSequenceByName) == 0x000010, "Wrong size on LGUIPrefabSequenceComponent_GetSequenceByName");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceByName, InName) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetSequenceByName::InName' has a wrong offset!");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequenceByName, ReturnValue) == 0x000008, "Member 'LGUIPrefabSequenceComponent_GetSequenceByName::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIPrefabSequenceComponent.GetSequencePlayer
// 0x0008 (0x0008 - 0x0000)
struct LGUIPrefabSequenceComponent_GetSequencePlayer final
{
public:
	class ULGUIPrefabSequencePlayer*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIPrefabSequenceComponent_GetSequencePlayer) == 0x000008, "Wrong alignment on LGUIPrefabSequenceComponent_GetSequencePlayer");
static_assert(sizeof(LGUIPrefabSequenceComponent_GetSequencePlayer) == 0x000008, "Wrong size on LGUIPrefabSequenceComponent_GetSequencePlayer");
static_assert(offsetof(LGUIPrefabSequenceComponent_GetSequencePlayer, ReturnValue) == 0x000000, "Member 'LGUIPrefabSequenceComponent_GetSequencePlayer::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.SetCanvas
// 0x0008 (0x0008 - 0x0000)
struct LGUIRenderTargetGeometrySource_SetCanvas final
{
public:
	class ULGUICanvas*                            Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_SetCanvas) == 0x000008, "Wrong alignment on LGUIRenderTargetGeometrySource_SetCanvas");
static_assert(sizeof(LGUIRenderTargetGeometrySource_SetCanvas) == 0x000008, "Wrong size on LGUIRenderTargetGeometrySource_SetCanvas");
static_assert(offsetof(LGUIRenderTargetGeometrySource_SetCanvas, Value) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_SetCanvas::Value' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.SetCylinderArcAngle
// 0x0004 (0x0004 - 0x0000)
struct LGUIRenderTargetGeometrySource_SetCylinderArcAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_SetCylinderArcAngle) == 0x000004, "Wrong alignment on LGUIRenderTargetGeometrySource_SetCylinderArcAngle");
static_assert(sizeof(LGUIRenderTargetGeometrySource_SetCylinderArcAngle) == 0x000004, "Wrong size on LGUIRenderTargetGeometrySource_SetCylinderArcAngle");
static_assert(offsetof(LGUIRenderTargetGeometrySource_SetCylinderArcAngle, Value) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_SetCylinderArcAngle::Value' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.SetEnableInteractOnBackside
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside");
static_assert(sizeof(LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside");
static_assert(offsetof(LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside, Value) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside::Value' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.SetFlipVerticalOnGLES
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES");
static_assert(sizeof(LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES");
static_assert(offsetof(LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES, Value) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES::Value' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.SetGeometryMode
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_SetGeometryMode final
{
public:
	ELGUIRenderTargetGeometryMode                 Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_SetGeometryMode) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_SetGeometryMode");
static_assert(sizeof(LGUIRenderTargetGeometrySource_SetGeometryMode) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_SetGeometryMode");
static_assert(offsetof(LGUIRenderTargetGeometrySource_SetGeometryMode, Value) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_SetGeometryMode::Value' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.SetPivot
// 0x0010 (0x0010 - 0x0000)
struct LGUIRenderTargetGeometrySource_SetPivot final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_SetPivot) == 0x000008, "Wrong alignment on LGUIRenderTargetGeometrySource_SetPivot");
static_assert(sizeof(LGUIRenderTargetGeometrySource_SetPivot) == 0x000010, "Wrong size on LGUIRenderTargetGeometrySource_SetPivot");
static_assert(offsetof(LGUIRenderTargetGeometrySource_SetPivot, Value) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_SetPivot::Value' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetCanvas
// 0x0008 (0x0008 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetCanvas) == 0x000008, "Wrong alignment on LGUIRenderTargetGeometrySource_GetCanvas");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetCanvas) == 0x000008, "Wrong size on LGUIRenderTargetGeometrySource_GetCanvas");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetCanvas, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetCylinderArcAngle
// 0x0004 (0x0004 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetCylinderArcAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetCylinderArcAngle) == 0x000004, "Wrong alignment on LGUIRenderTargetGeometrySource_GetCylinderArcAngle");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetCylinderArcAngle) == 0x000004, "Wrong size on LGUIRenderTargetGeometrySource_GetCylinderArcAngle");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetCylinderArcAngle, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetCylinderArcAngle::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetEnableInteractOnBackside
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetFlipVerticalOnGLES
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetGeometryMode
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetGeometryMode final
{
public:
	ELGUIRenderTargetGeometryMode                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetGeometryMode) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_GetGeometryMode");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetGeometryMode) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_GetGeometryMode");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetGeometryMode, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetGeometryMode::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetMaterialInstance) == 0x000008, "Wrong alignment on LGUIRenderTargetGeometrySource_GetMaterialInstance");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetMaterialInstance) == 0x000008, "Wrong size on LGUIRenderTargetGeometrySource_GetMaterialInstance");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetMaterialInstance, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetMaterialInstance::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetOverrideStaticMeshMaterial
// 0x0001 (0x0001 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial) == 0x000001, "Wrong alignment on LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial) == 0x000001, "Wrong size on LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetPivot
// 0x0010 (0x0010 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetPivot final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetPivot) == 0x000008, "Wrong alignment on LGUIRenderTargetGeometrySource_GetPivot");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetPivot) == 0x000010, "Wrong size on LGUIRenderTargetGeometrySource_GetPivot");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetPivot, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetPivot::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetRenderTarget) == 0x000008, "Wrong alignment on LGUIRenderTargetGeometrySource_GetRenderTarget");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetRenderTarget) == 0x000008, "Wrong size on LGUIRenderTargetGeometrySource_GetRenderTarget");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetRenderTarget, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetGeometrySource.GetRenderTargetSize
// 0x0008 (0x0008 - 0x0000)
struct LGUIRenderTargetGeometrySource_GetRenderTargetSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetGeometrySource_GetRenderTargetSize) == 0x000004, "Wrong alignment on LGUIRenderTargetGeometrySource_GetRenderTargetSize");
static_assert(sizeof(LGUIRenderTargetGeometrySource_GetRenderTargetSize) == 0x000008, "Wrong size on LGUIRenderTargetGeometrySource_GetRenderTargetSize");
static_assert(offsetof(LGUIRenderTargetGeometrySource_GetRenderTargetSize, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetGeometrySource_GetRenderTargetSize::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetInteractionSourceInterface.PerformLineTrace
// 0x0068 (0x0068 - 0x0000)
struct LGUIRenderTargetInteractionSourceInterface_PerformLineTrace final
{
public:
	int32                                         InHitFaceIndex;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InHitPoint;                                        // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLineStart;                                       // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLineEnd;                                         // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutHitUV;                                          // 0x0050(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace) == 0x000008, "Wrong alignment on LGUIRenderTargetInteractionSourceInterface_PerformLineTrace");
static_assert(sizeof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace) == 0x000068, "Wrong size on LGUIRenderTargetInteractionSourceInterface_PerformLineTrace");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace, InHitFaceIndex) == 0x000000, "Member 'LGUIRenderTargetInteractionSourceInterface_PerformLineTrace::InHitFaceIndex' has a wrong offset!");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace, InHitPoint) == 0x000008, "Member 'LGUIRenderTargetInteractionSourceInterface_PerformLineTrace::InHitPoint' has a wrong offset!");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace, InLineStart) == 0x000020, "Member 'LGUIRenderTargetInteractionSourceInterface_PerformLineTrace::InLineStart' has a wrong offset!");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace, InLineEnd) == 0x000038, "Member 'LGUIRenderTargetInteractionSourceInterface_PerformLineTrace::InLineEnd' has a wrong offset!");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace, OutHitUV) == 0x000050, "Member 'LGUIRenderTargetInteractionSourceInterface_PerformLineTrace::OutHitUV' has a wrong offset!");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_PerformLineTrace, ReturnValue) == 0x000060, "Member 'LGUIRenderTargetInteractionSourceInterface_PerformLineTrace::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRenderTargetInteractionSourceInterface.GetTargetCanvas
// 0x0008 (0x0008 - 0x0000)
struct LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas) == 0x000008, "Wrong alignment on LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas");
static_assert(sizeof(LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas) == 0x000008, "Wrong size on LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas");
static_assert(offsetof(LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas, ReturnValue) == 0x000000, "Member 'LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRichTextCustomStyleData.GetDataMap
// 0x0050 (0x0050 - 0x0000)
struct LGUIRichTextCustomStyleData_GetDataMap final
{
public:
	TMap<class FName, struct FLGUIRichTextCustomStyleItemData> ReturnValue;                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRichTextCustomStyleData_GetDataMap) == 0x000008, "Wrong alignment on LGUIRichTextCustomStyleData_GetDataMap");
static_assert(sizeof(LGUIRichTextCustomStyleData_GetDataMap) == 0x000050, "Wrong size on LGUIRichTextCustomStyleData_GetDataMap");
static_assert(offsetof(LGUIRichTextCustomStyleData_GetDataMap, ReturnValue) == 0x000000, "Member 'LGUIRichTextCustomStyleData_GetDataMap::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRichTextImageData.GetMutableImageMap
// 0x0050 (0x0050 - 0x0000)
struct LGUIRichTextImageData_GetMutableImageMap final
{
public:
	TMap<class FName, struct FLGUIRichTextImageItemData> ReturnValue;                                // 0x0000(0x0050)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRichTextImageData_GetMutableImageMap) == 0x000008, "Wrong alignment on LGUIRichTextImageData_GetMutableImageMap");
static_assert(sizeof(LGUIRichTextImageData_GetMutableImageMap) == 0x000050, "Wrong size on LGUIRichTextImageData_GetMutableImageMap");
static_assert(offsetof(LGUIRichTextImageData_GetMutableImageMap, ReturnValue) == 0x000000, "Member 'LGUIRichTextImageData_GetMutableImageMap::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRichTextImageData.SetAnimationFps
// 0x0004 (0x0004 - 0x0000)
struct LGUIRichTextImageData_SetAnimationFps final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRichTextImageData_SetAnimationFps) == 0x000004, "Wrong alignment on LGUIRichTextImageData_SetAnimationFps");
static_assert(sizeof(LGUIRichTextImageData_SetAnimationFps) == 0x000004, "Wrong size on LGUIRichTextImageData_SetAnimationFps");
static_assert(offsetof(LGUIRichTextImageData_SetAnimationFps, Value) == 0x000000, "Member 'LGUIRichTextImageData_SetAnimationFps::Value' has a wrong offset!");

// Function LGUI.LGUIRichTextImageData.SetImageMap
// 0x0050 (0x0050 - 0x0000)
struct LGUIRichTextImageData_SetImageMap final
{
public:
	TMap<class FName, struct FLGUIRichTextImageItemData> Value;                                      // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRichTextImageData_SetImageMap) == 0x000008, "Wrong alignment on LGUIRichTextImageData_SetImageMap");
static_assert(sizeof(LGUIRichTextImageData_SetImageMap) == 0x000050, "Wrong size on LGUIRichTextImageData_SetImageMap");
static_assert(offsetof(LGUIRichTextImageData_SetImageMap, Value) == 0x000000, "Member 'LGUIRichTextImageData_SetImageMap::Value' has a wrong offset!");

// Function LGUI.LGUIRichTextImageData.GetAnimationFps
// 0x0004 (0x0004 - 0x0000)
struct LGUIRichTextImageData_GetAnimationFps final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRichTextImageData_GetAnimationFps) == 0x000004, "Wrong alignment on LGUIRichTextImageData_GetAnimationFps");
static_assert(sizeof(LGUIRichTextImageData_GetAnimationFps) == 0x000004, "Wrong size on LGUIRichTextImageData_GetAnimationFps");
static_assert(offsetof(LGUIRichTextImageData_GetAnimationFps, ReturnValue) == 0x000000, "Member 'LGUIRichTextImageData_GetAnimationFps::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIRichTextImageData.GetImageMap
// 0x0050 (0x0050 - 0x0000)
struct LGUIRichTextImageData_GetImageMap final
{
public:
	TMap<class FName, struct FLGUIRichTextImageItemData> ReturnValue;                                // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIRichTextImageData_GetImageMap) == 0x000008, "Wrong alignment on LGUIRichTextImageData_GetImageMap");
static_assert(sizeof(LGUIRichTextImageData_GetImageMap) == 0x000050, "Wrong size on LGUIRichTextImageData_GetImageMap");
static_assert(offsetof(LGUIRichTextImageData_GetImageMap, ReturnValue) == 0x000000, "Member 'LGUIRichTextImageData_GetImageMap::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.GetAtlasTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUISpriteData_BaseObject_GetAtlasTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_BaseObject_GetAtlasTexture) == 0x000008, "Wrong alignment on LGUISpriteData_BaseObject_GetAtlasTexture");
static_assert(sizeof(LGUISpriteData_BaseObject_GetAtlasTexture) == 0x000008, "Wrong size on LGUISpriteData_BaseObject_GetAtlasTexture");
static_assert(offsetof(LGUISpriteData_BaseObject_GetAtlasTexture, ReturnValue) == 0x000000, "Member 'LGUISpriteData_BaseObject_GetAtlasTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.GetSpriteInfo
// 0x0034 (0x0034 - 0x0000)
struct LGUISpriteData_BaseObject_GetSpriteInfo final
{
public:
	struct FLGUISpriteInfo                        ReturnValue;                                       // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_BaseObject_GetSpriteInfo) == 0x000004, "Wrong alignment on LGUISpriteData_BaseObject_GetSpriteInfo");
static_assert(sizeof(LGUISpriteData_BaseObject_GetSpriteInfo) == 0x000034, "Wrong size on LGUISpriteData_BaseObject_GetSpriteInfo");
static_assert(offsetof(LGUISpriteData_BaseObject_GetSpriteInfo, ReturnValue) == 0x000000, "Member 'LGUISpriteData_BaseObject_GetSpriteInfo::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.IsIndividual
// 0x0001 (0x0001 - 0x0000)
struct LGUISpriteData_BaseObject_IsIndividual final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_BaseObject_IsIndividual) == 0x000001, "Wrong alignment on LGUISpriteData_BaseObject_IsIndividual");
static_assert(sizeof(LGUISpriteData_BaseObject_IsIndividual) == 0x000001, "Wrong size on LGUISpriteData_BaseObject_IsIndividual");
static_assert(offsetof(LGUISpriteData_BaseObject_IsIndividual, ReturnValue) == 0x000000, "Member 'LGUISpriteData_BaseObject_IsIndividual::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData_BaseObject.ReadPixel
// 0x0018 (0x0018 - 0x0000)
struct LGUISpriteData_BaseObject_ReadPixel final
{
public:
	struct FVector2D                              InUV;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OutPixel;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUISpriteData_BaseObject_ReadPixel) == 0x000008, "Wrong alignment on LGUISpriteData_BaseObject_ReadPixel");
static_assert(sizeof(LGUISpriteData_BaseObject_ReadPixel) == 0x000018, "Wrong size on LGUISpriteData_BaseObject_ReadPixel");
static_assert(offsetof(LGUISpriteData_BaseObject_ReadPixel, InUV) == 0x000000, "Member 'LGUISpriteData_BaseObject_ReadPixel::InUV' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_BaseObject_ReadPixel, OutPixel) == 0x000010, "Member 'LGUISpriteData_BaseObject_ReadPixel::OutPixel' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_BaseObject_ReadPixel, ReturnValue) == 0x000014, "Member 'LGUISpriteData_BaseObject_ReadPixel::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.CreateLGUISpriteData
// 0x0040 (0x0040 - 0x0000)
struct LGUISpriteData_CreateLGUISpriteData final
{
public:
	class UObject*                                Outer_0;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             inSpriteTexture;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              inHorizontalBorder;                                // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              inVerticalBorder;                                  // 0x0020(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   inPackingTag;                                      // 0x0030(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULGUISpriteData*                        ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_CreateLGUISpriteData) == 0x000008, "Wrong alignment on LGUISpriteData_CreateLGUISpriteData");
static_assert(sizeof(LGUISpriteData_CreateLGUISpriteData) == 0x000040, "Wrong size on LGUISpriteData_CreateLGUISpriteData");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, Outer_0) == 0x000000, "Member 'LGUISpriteData_CreateLGUISpriteData::Outer_0' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, inSpriteTexture) == 0x000008, "Member 'LGUISpriteData_CreateLGUISpriteData::inSpriteTexture' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, inHorizontalBorder) == 0x000010, "Member 'LGUISpriteData_CreateLGUISpriteData::inHorizontalBorder' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, inVerticalBorder) == 0x000020, "Member 'LGUISpriteData_CreateLGUISpriteData::inVerticalBorder' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, inPackingTag) == 0x000030, "Member 'LGUISpriteData_CreateLGUISpriteData::inPackingTag' has a wrong offset!");
static_assert(offsetof(LGUISpriteData_CreateLGUISpriteData, ReturnValue) == 0x000038, "Member 'LGUISpriteData_CreateLGUISpriteData::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.GetPackingTag
// 0x0008 (0x0008 - 0x0000)
struct LGUISpriteData_GetPackingTag final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_GetPackingTag) == 0x000004, "Wrong alignment on LGUISpriteData_GetPackingTag");
static_assert(sizeof(LGUISpriteData_GetPackingTag) == 0x000008, "Wrong size on LGUISpriteData_GetPackingTag");
static_assert(offsetof(LGUISpriteData_GetPackingTag, ReturnValue) == 0x000000, "Member 'LGUISpriteData_GetPackingTag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.GetSpriteTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUISpriteData_GetSpriteTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_GetSpriteTexture) == 0x000008, "Wrong alignment on LGUISpriteData_GetSpriteTexture");
static_assert(sizeof(LGUISpriteData_GetSpriteTexture) == 0x000008, "Wrong size on LGUISpriteData_GetSpriteTexture");
static_assert(offsetof(LGUISpriteData_GetSpriteTexture, ReturnValue) == 0x000000, "Member 'LGUISpriteData_GetSpriteTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUISpriteData.HavePackingTag
// 0x0001 (0x0001 - 0x0000)
struct LGUISpriteData_HavePackingTag final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUISpriteData_HavePackingTag) == 0x000001, "Wrong alignment on LGUISpriteData_HavePackingTag");
static_assert(sizeof(LGUISpriteData_HavePackingTag) == 0x000001, "Wrong size on LGUISpriteData_HavePackingTag");
static_assert(offsetof(LGUISpriteData_HavePackingTag, ReturnValue) == 0x000000, "Member 'LGUISpriteData_HavePackingTag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIStaticSpriteAtlasData.GetAtlasTexture
// 0x0008 (0x0008 - 0x0000)
struct LGUIStaticSpriteAtlasData_GetAtlasTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIStaticSpriteAtlasData_GetAtlasTexture) == 0x000008, "Wrong alignment on LGUIStaticSpriteAtlasData_GetAtlasTexture");
static_assert(sizeof(LGUIStaticSpriteAtlasData_GetAtlasTexture) == 0x000008, "Wrong size on LGUIStaticSpriteAtlasData_GetAtlasTexture");
static_assert(offsetof(LGUIStaticSpriteAtlasData_GetAtlasTexture, ReturnValue) == 0x000000, "Member 'LGUIStaticSpriteAtlasData_GetAtlasTexture::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIStaticSpriteAtlasData.ReadPixel
// 0x0018 (0x0018 - 0x0000)
struct LGUIStaticSpriteAtlasData_ReadPixel final
{
public:
	struct FVector2D                              InUV;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OutPixel;                                          // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIStaticSpriteAtlasData_ReadPixel) == 0x000008, "Wrong alignment on LGUIStaticSpriteAtlasData_ReadPixel");
static_assert(sizeof(LGUIStaticSpriteAtlasData_ReadPixel) == 0x000018, "Wrong size on LGUIStaticSpriteAtlasData_ReadPixel");
static_assert(offsetof(LGUIStaticSpriteAtlasData_ReadPixel, InUV) == 0x000000, "Member 'LGUIStaticSpriteAtlasData_ReadPixel::InUV' has a wrong offset!");
static_assert(offsetof(LGUIStaticSpriteAtlasData_ReadPixel, OutPixel) == 0x000010, "Member 'LGUIStaticSpriteAtlasData_ReadPixel::OutPixel' has a wrong offset!");
static_assert(offsetof(LGUIStaticSpriteAtlasData_ReadPixel, ReturnValue) == 0x000014, "Member 'LGUIStaticSpriteAtlasData_ReadPixel::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceRaycasterSource.ReceiveGenerateRay
// 0x0040 (0x0040 - 0x0000)
struct LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay final
{
public:
	class ULGUIPointerEventData*                  InPointerEventData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutRayOrigin;                                      // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutRayDirection;                                   // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay) == 0x000008, "Wrong alignment on LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay");
static_assert(sizeof(LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay) == 0x000040, "Wrong size on LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay, InPointerEventData) == 0x000000, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay::InPointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay, OutRayOrigin) == 0x000008, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay::OutRayOrigin' has a wrong offset!");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay, OutRayDirection) == 0x000020, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay::OutRayDirection' has a wrong offset!");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay, ReturnValue) == 0x000038, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceRaycasterSource.ReceiveInit
// 0x0008 (0x0008 - 0x0000)
struct LGUIWorldSpaceRaycasterSource_ReceiveInit final
{
public:
	class ULGUIBaseRaycaster*                     InRaycaster;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceRaycasterSource_ReceiveInit) == 0x000008, "Wrong alignment on LGUIWorldSpaceRaycasterSource_ReceiveInit");
static_assert(sizeof(LGUIWorldSpaceRaycasterSource_ReceiveInit) == 0x000008, "Wrong size on LGUIWorldSpaceRaycasterSource_ReceiveInit");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveInit, InRaycaster) == 0x000000, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveInit::InRaycaster' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceRaycasterSource.ReceiveShouldStartDrag
// 0x0010 (0x0010 - 0x0000)
struct LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag final
{
public:
	class ULGUIPointerEventData*                  InPointerEventData;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag) == 0x000008, "Wrong alignment on LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag");
static_assert(sizeof(LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag) == 0x000010, "Wrong size on LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag, InPointerEventData) == 0x000000, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag::InPointerEventData' has a wrong offset!");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag, ReturnValue) == 0x000008, "Member 'LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceRaycasterSource.GetRaycasterObject
// 0x0008 (0x0008 - 0x0000)
struct LGUIWorldSpaceRaycasterSource_GetRaycasterObject final
{
public:
	class ULGUIBaseRaycaster*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceRaycasterSource_GetRaycasterObject) == 0x000008, "Wrong alignment on LGUIWorldSpaceRaycasterSource_GetRaycasterObject");
static_assert(sizeof(LGUIWorldSpaceRaycasterSource_GetRaycasterObject) == 0x000008, "Wrong size on LGUIWorldSpaceRaycasterSource_GetRaycasterObject");
static_assert(offsetof(LGUIWorldSpaceRaycasterSource_GetRaycasterObject, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceRaycasterSource_GetRaycasterObject::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceRaycaster.SetRaycasterSourceObject
// 0x0008 (0x0008 - 0x0000)
struct LGUIWorldSpaceRaycaster_SetRaycasterSourceObject final
{
public:
	class ULGUIWorldSpaceRaycasterSource*         NewSource;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceRaycaster_SetRaycasterSourceObject) == 0x000008, "Wrong alignment on LGUIWorldSpaceRaycaster_SetRaycasterSourceObject");
static_assert(sizeof(LGUIWorldSpaceRaycaster_SetRaycasterSourceObject) == 0x000008, "Wrong size on LGUIWorldSpaceRaycaster_SetRaycasterSourceObject");
static_assert(offsetof(LGUIWorldSpaceRaycaster_SetRaycasterSourceObject, NewSource) == 0x000000, "Member 'LGUIWorldSpaceRaycaster_SetRaycasterSourceObject::NewSource' has a wrong offset!");

// Function LGUI.LGUIWorldSpaceRaycaster.GetRaycasterSourceObject
// 0x0008 (0x0008 - 0x0000)
struct LGUIWorldSpaceRaycaster_GetRaycasterSourceObject final
{
public:
	class ULGUIWorldSpaceRaycasterSource*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIWorldSpaceRaycaster_GetRaycasterSourceObject) == 0x000008, "Wrong alignment on LGUIWorldSpaceRaycaster_GetRaycasterSourceObject");
static_assert(sizeof(LGUIWorldSpaceRaycaster_GetRaycasterSourceObject) == 0x000008, "Wrong size on LGUIWorldSpaceRaycaster_GetRaycasterSourceObject");
static_assert(offsetof(LGUIWorldSpaceRaycaster_GetRaycasterSourceObject, ReturnValue) == 0x000000, "Member 'LGUIWorldSpaceRaycaster_GetRaycasterSourceObject::ReturnValue' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.InputNavigation
// 0x0008 (0x0008 - 0x0000)
struct LGUI_PointerInputModule_InputNavigation final
{
public:
	ELGUINavigationDirection                      Direction;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          pressOrRelease;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         pointerID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_InputNavigation) == 0x000004, "Wrong alignment on LGUI_PointerInputModule_InputNavigation");
static_assert(sizeof(LGUI_PointerInputModule_InputNavigation) == 0x000008, "Wrong size on LGUI_PointerInputModule_InputNavigation");
static_assert(offsetof(LGUI_PointerInputModule_InputNavigation, Direction) == 0x000000, "Member 'LGUI_PointerInputModule_InputNavigation::Direction' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_InputNavigation, pressOrRelease) == 0x000001, "Member 'LGUI_PointerInputModule_InputNavigation::pressOrRelease' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_InputNavigation, pointerID) == 0x000004, "Member 'LGUI_PointerInputModule_InputNavigation::pointerID' has a wrong offset!");

// Function LGUI.LGUI_PointerInputModule.InputTriggerForNavigation
// 0x0008 (0x0008 - 0x0000)
struct LGUI_PointerInputModule_InputTriggerForNavigation final
{
public:
	bool                                          triggerPress;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         pointerID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_PointerInputModule_InputTriggerForNavigation) == 0x000004, "Wrong alignment on LGUI_PointerInputModule_InputTriggerForNavigation");
static_assert(sizeof(LGUI_PointerInputModule_InputTriggerForNavigation) == 0x000008, "Wrong size on LGUI_PointerInputModule_InputTriggerForNavigation");
static_assert(offsetof(LGUI_PointerInputModule_InputTriggerForNavigation, triggerPress) == 0x000000, "Member 'LGUI_PointerInputModule_InputTriggerForNavigation::triggerPress' has a wrong offset!");
static_assert(offsetof(LGUI_PointerInputModule_InputTriggerForNavigation, pointerID) == 0x000004, "Member 'LGUI_PointerInputModule_InputTriggerForNavigation::pointerID' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.InputOverrideMousePosition
// 0x0010 (0x0010 - 0x0000)
struct LGUI_StandaloneInputModule_InputOverrideMousePosition final
{
public:
	struct FVector2D                              inMousePosition;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_InputOverrideMousePosition) == 0x000008, "Wrong alignment on LGUI_StandaloneInputModule_InputOverrideMousePosition");
static_assert(sizeof(LGUI_StandaloneInputModule_InputOverrideMousePosition) == 0x000010, "Wrong size on LGUI_StandaloneInputModule_InputOverrideMousePosition");
static_assert(offsetof(LGUI_StandaloneInputModule_InputOverrideMousePosition, inMousePosition) == 0x000000, "Member 'LGUI_StandaloneInputModule_InputOverrideMousePosition::inMousePosition' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.InputScroll
// 0x0010 (0x0010 - 0x0000)
struct LGUI_StandaloneInputModule_InputScroll final
{
public:
	struct FVector2D                              inAxisValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_InputScroll) == 0x000008, "Wrong alignment on LGUI_StandaloneInputModule_InputScroll");
static_assert(sizeof(LGUI_StandaloneInputModule_InputScroll) == 0x000010, "Wrong size on LGUI_StandaloneInputModule_InputScroll");
static_assert(offsetof(LGUI_StandaloneInputModule_InputScroll, inAxisValue) == 0x000000, "Member 'LGUI_StandaloneInputModule_InputScroll::inAxisValue' has a wrong offset!");

// Function LGUI.LGUI_StandaloneInputModule.InputTrigger
// 0x0002 (0x0002 - 0x0000)
struct LGUI_StandaloneInputModule_InputTrigger final
{
public:
	bool                                          inTriggerPress;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMouseButtonType                              inMouseButtonType;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_StandaloneInputModule_InputTrigger) == 0x000001, "Wrong alignment on LGUI_StandaloneInputModule_InputTrigger");
static_assert(sizeof(LGUI_StandaloneInputModule_InputTrigger) == 0x000002, "Wrong size on LGUI_StandaloneInputModule_InputTrigger");
static_assert(offsetof(LGUI_StandaloneInputModule_InputTrigger, inTriggerPress) == 0x000000, "Member 'LGUI_StandaloneInputModule_InputTrigger::inTriggerPress' has a wrong offset!");
static_assert(offsetof(LGUI_StandaloneInputModule_InputTrigger, inMouseButtonType) == 0x000001, "Member 'LGUI_StandaloneInputModule_InputTrigger::inMouseButtonType' has a wrong offset!");

// Function LGUI.LGUI_TouchInputModule.InputScroll
// 0x0010 (0x0010 - 0x0000)
struct LGUI_TouchInputModule_InputScroll final
{
public:
	struct FVector2D                              inAxisValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_TouchInputModule_InputScroll) == 0x000008, "Wrong alignment on LGUI_TouchInputModule_InputScroll");
static_assert(sizeof(LGUI_TouchInputModule_InputScroll) == 0x000010, "Wrong size on LGUI_TouchInputModule_InputScroll");
static_assert(offsetof(LGUI_TouchInputModule_InputScroll, inAxisValue) == 0x000000, "Member 'LGUI_TouchInputModule_InputScroll::inAxisValue' has a wrong offset!");

// Function LGUI.LGUI_TouchInputModule.InputTouchMoved
// 0x0020 (0x0020 - 0x0000)
struct LGUI_TouchInputModule_InputTouchMoved final
{
public:
	int32                                         inTouchID;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                inTouchPointPosition;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_TouchInputModule_InputTouchMoved) == 0x000008, "Wrong alignment on LGUI_TouchInputModule_InputTouchMoved");
static_assert(sizeof(LGUI_TouchInputModule_InputTouchMoved) == 0x000020, "Wrong size on LGUI_TouchInputModule_InputTouchMoved");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchMoved, inTouchID) == 0x000000, "Member 'LGUI_TouchInputModule_InputTouchMoved::inTouchID' has a wrong offset!");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchMoved, inTouchPointPosition) == 0x000008, "Member 'LGUI_TouchInputModule_InputTouchMoved::inTouchPointPosition' has a wrong offset!");

// Function LGUI.LGUI_TouchInputModule.InputTouchTrigger
// 0x0020 (0x0020 - 0x0000)
struct LGUI_TouchInputModule_InputTouchTrigger final
{
public:
	bool                                          inTouchPress;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         inTouchID;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                inTouchPointPosition;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUI_TouchInputModule_InputTouchTrigger) == 0x000008, "Wrong alignment on LGUI_TouchInputModule_InputTouchTrigger");
static_assert(sizeof(LGUI_TouchInputModule_InputTouchTrigger) == 0x000020, "Wrong size on LGUI_TouchInputModule_InputTouchTrigger");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchTrigger, inTouchPress) == 0x000000, "Member 'LGUI_TouchInputModule_InputTouchTrigger::inTouchPress' has a wrong offset!");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchTrigger, inTouchID) == 0x000004, "Member 'LGUI_TouchInputModule_InputTouchTrigger::inTouchID' has a wrong offset!");
static_assert(offsetof(LGUI_TouchInputModule_InputTouchTrigger, inTouchPointPosition) == 0x000008, "Member 'LGUI_TouchInputModule_InputTouchTrigger::inTouchPointPosition' has a wrong offset!");

// Function LGUI.UIItem.AnchorBottomTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_AnchorBottomTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_AnchorBottomTo) == 0x000008, "Wrong alignment on UIItem_AnchorBottomTo");
static_assert(sizeof(UIItem_AnchorBottomTo) == 0x000018, "Wrong size on UIItem_AnchorBottomTo");
static_assert(offsetof(UIItem_AnchorBottomTo, endValue) == 0x000000, "Member 'UIItem_AnchorBottomTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorBottomTo, Duration) == 0x000004, "Member 'UIItem_AnchorBottomTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorBottomTo, Delay) == 0x000008, "Member 'UIItem_AnchorBottomTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorBottomTo, Ease) == 0x00000C, "Member 'UIItem_AnchorBottomTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorBottomTo, ReturnValue) == 0x000010, "Member 'UIItem_AnchorBottomTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.AnchoredPositionTo
// 0x0028 (0x0028 - 0x0000)
struct UIItem_AnchoredPositionTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_AnchoredPositionTo) == 0x000008, "Wrong alignment on UIItem_AnchoredPositionTo");
static_assert(sizeof(UIItem_AnchoredPositionTo) == 0x000028, "Wrong size on UIItem_AnchoredPositionTo");
static_assert(offsetof(UIItem_AnchoredPositionTo, endValue) == 0x000000, "Member 'UIItem_AnchoredPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_AnchoredPositionTo, Duration) == 0x000010, "Member 'UIItem_AnchoredPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_AnchoredPositionTo, Delay) == 0x000014, "Member 'UIItem_AnchoredPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_AnchoredPositionTo, Ease) == 0x000018, "Member 'UIItem_AnchoredPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_AnchoredPositionTo, ReturnValue) == 0x000020, "Member 'UIItem_AnchoredPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.AnchorLeftTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_AnchorLeftTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_AnchorLeftTo) == 0x000008, "Wrong alignment on UIItem_AnchorLeftTo");
static_assert(sizeof(UIItem_AnchorLeftTo) == 0x000018, "Wrong size on UIItem_AnchorLeftTo");
static_assert(offsetof(UIItem_AnchorLeftTo, endValue) == 0x000000, "Member 'UIItem_AnchorLeftTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorLeftTo, Duration) == 0x000004, "Member 'UIItem_AnchorLeftTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorLeftTo, Delay) == 0x000008, "Member 'UIItem_AnchorLeftTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorLeftTo, Ease) == 0x00000C, "Member 'UIItem_AnchorLeftTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorLeftTo, ReturnValue) == 0x000010, "Member 'UIItem_AnchorLeftTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.AnchorRightTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_AnchorRightTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_AnchorRightTo) == 0x000008, "Wrong alignment on UIItem_AnchorRightTo");
static_assert(sizeof(UIItem_AnchorRightTo) == 0x000018, "Wrong size on UIItem_AnchorRightTo");
static_assert(offsetof(UIItem_AnchorRightTo, endValue) == 0x000000, "Member 'UIItem_AnchorRightTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorRightTo, Duration) == 0x000004, "Member 'UIItem_AnchorRightTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorRightTo, Delay) == 0x000008, "Member 'UIItem_AnchorRightTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorRightTo, Ease) == 0x00000C, "Member 'UIItem_AnchorRightTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorRightTo, ReturnValue) == 0x000010, "Member 'UIItem_AnchorRightTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.AnchorTopTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_AnchorTopTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_AnchorTopTo) == 0x000008, "Wrong alignment on UIItem_AnchorTopTo");
static_assert(sizeof(UIItem_AnchorTopTo) == 0x000018, "Wrong size on UIItem_AnchorTopTo");
static_assert(offsetof(UIItem_AnchorTopTo, endValue) == 0x000000, "Member 'UIItem_AnchorTopTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorTopTo, Duration) == 0x000004, "Member 'UIItem_AnchorTopTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorTopTo, Delay) == 0x000008, "Member 'UIItem_AnchorTopTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorTopTo, Ease) == 0x00000C, "Member 'UIItem_AnchorTopTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_AnchorTopTo, ReturnValue) == 0x000010, "Member 'UIItem_AnchorTopTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.HeightTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_HeightTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_HeightTo) == 0x000008, "Wrong alignment on UIItem_HeightTo");
static_assert(sizeof(UIItem_HeightTo) == 0x000018, "Wrong size on UIItem_HeightTo");
static_assert(offsetof(UIItem_HeightTo, endValue) == 0x000000, "Member 'UIItem_HeightTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_HeightTo, Duration) == 0x000004, "Member 'UIItem_HeightTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_HeightTo, Delay) == 0x000008, "Member 'UIItem_HeightTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_HeightTo, Ease) == 0x00000C, "Member 'UIItem_HeightTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_HeightTo, ReturnValue) == 0x000010, "Member 'UIItem_HeightTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.HorizontalAnchoredPositionTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_HorizontalAnchoredPositionTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_HorizontalAnchoredPositionTo) == 0x000008, "Wrong alignment on UIItem_HorizontalAnchoredPositionTo");
static_assert(sizeof(UIItem_HorizontalAnchoredPositionTo) == 0x000018, "Wrong size on UIItem_HorizontalAnchoredPositionTo");
static_assert(offsetof(UIItem_HorizontalAnchoredPositionTo, endValue) == 0x000000, "Member 'UIItem_HorizontalAnchoredPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_HorizontalAnchoredPositionTo, Duration) == 0x000004, "Member 'UIItem_HorizontalAnchoredPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_HorizontalAnchoredPositionTo, Delay) == 0x000008, "Member 'UIItem_HorizontalAnchoredPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_HorizontalAnchoredPositionTo, Ease) == 0x00000C, "Member 'UIItem_HorizontalAnchoredPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_HorizontalAnchoredPositionTo, ReturnValue) == 0x000010, "Member 'UIItem_HorizontalAnchoredPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.PivotTo
// 0x0028 (0x0028 - 0x0000)
struct UIItem_PivotTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_PivotTo) == 0x000008, "Wrong alignment on UIItem_PivotTo");
static_assert(sizeof(UIItem_PivotTo) == 0x000028, "Wrong size on UIItem_PivotTo");
static_assert(offsetof(UIItem_PivotTo, endValue) == 0x000000, "Member 'UIItem_PivotTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_PivotTo, Duration) == 0x000010, "Member 'UIItem_PivotTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_PivotTo, Delay) == 0x000014, "Member 'UIItem_PivotTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_PivotTo, Ease) == 0x000018, "Member 'UIItem_PivotTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_PivotTo, ReturnValue) == 0x000020, "Member 'UIItem_PivotTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorBottom
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAnchorBottom final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorBottom) == 0x000004, "Wrong alignment on UIItem_SetAnchorBottom");
static_assert(sizeof(UIItem_SetAnchorBottom) == 0x000004, "Wrong size on UIItem_SetAnchorBottom");
static_assert(offsetof(UIItem_SetAnchorBottom, Value) == 0x000000, "Member 'UIItem_SetAnchorBottom::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorData
// 0x0050 (0x0050 - 0x0000)
struct UIItem_SetAnchorData final
{
public:
	struct FUIAnchorData                          Value;                                             // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorData) == 0x000008, "Wrong alignment on UIItem_SetAnchorData");
static_assert(sizeof(UIItem_SetAnchorData) == 0x000050, "Wrong size on UIItem_SetAnchorData");
static_assert(offsetof(UIItem_SetAnchorData, Value) == 0x000000, "Member 'UIItem_SetAnchorData::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchoredPosition
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetAnchoredPosition final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchoredPosition) == 0x000008, "Wrong alignment on UIItem_SetAnchoredPosition");
static_assert(sizeof(UIItem_SetAnchoredPosition) == 0x000010, "Wrong size on UIItem_SetAnchoredPosition");
static_assert(offsetof(UIItem_SetAnchoredPosition, Value) == 0x000000, "Member 'UIItem_SetAnchoredPosition::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorLeft
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAnchorLeft final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorLeft) == 0x000004, "Wrong alignment on UIItem_SetAnchorLeft");
static_assert(sizeof(UIItem_SetAnchorLeft) == 0x000004, "Wrong size on UIItem_SetAnchorLeft");
static_assert(offsetof(UIItem_SetAnchorLeft, Value) == 0x000000, "Member 'UIItem_SetAnchorLeft::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorMax
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetAnchorMax final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorMax) == 0x000008, "Wrong alignment on UIItem_SetAnchorMax");
static_assert(sizeof(UIItem_SetAnchorMax) == 0x000010, "Wrong size on UIItem_SetAnchorMax");
static_assert(offsetof(UIItem_SetAnchorMax, Value) == 0x000000, "Member 'UIItem_SetAnchorMax::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorMin
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetAnchorMin final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorMin) == 0x000008, "Wrong alignment on UIItem_SetAnchorMin");
static_assert(sizeof(UIItem_SetAnchorMin) == 0x000010, "Wrong size on UIItem_SetAnchorMin");
static_assert(offsetof(UIItem_SetAnchorMin, Value) == 0x000000, "Member 'UIItem_SetAnchorMin::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorRight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAnchorRight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorRight) == 0x000004, "Wrong alignment on UIItem_SetAnchorRight");
static_assert(sizeof(UIItem_SetAnchorRight) == 0x000004, "Wrong size on UIItem_SetAnchorRight");
static_assert(offsetof(UIItem_SetAnchorRight, Value) == 0x000000, "Member 'UIItem_SetAnchorRight::Value' has a wrong offset!");

// Function LGUI.UIItem.SetAnchorTop
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetAnchorTop final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetAnchorTop) == 0x000004, "Wrong alignment on UIItem_SetAnchorTop");
static_assert(sizeof(UIItem_SetAnchorTop) == 0x000004, "Wrong size on UIItem_SetAnchorTop");
static_assert(offsetof(UIItem_SetAnchorTop, Value) == 0x000000, "Member 'UIItem_SetAnchorTop::Value' has a wrong offset!");

// Function LGUI.UIItem.SetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetDisplayName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetDisplayName) == 0x000008, "Wrong alignment on UIItem_SetDisplayName");
static_assert(sizeof(UIItem_SetDisplayName) == 0x000010, "Wrong size on UIItem_SetDisplayName");
static_assert(offsetof(UIItem_SetDisplayName, InName) == 0x000000, "Member 'UIItem_SetDisplayName::InName' has a wrong offset!");

// Function LGUI.UIItem.SetHeight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetHeight) == 0x000004, "Wrong alignment on UIItem_SetHeight");
static_assert(sizeof(UIItem_SetHeight) == 0x000004, "Wrong size on UIItem_SetHeight");
static_assert(offsetof(UIItem_SetHeight, Value) == 0x000000, "Member 'UIItem_SetHeight::Value' has a wrong offset!");

// Function LGUI.UIItem.SetHierarchyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetHierarchyIndex final
{
public:
	int32                                         inInt;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetHierarchyIndex) == 0x000004, "Wrong alignment on UIItem_SetHierarchyIndex");
static_assert(sizeof(UIItem_SetHierarchyIndex) == 0x000004, "Wrong size on UIItem_SetHierarchyIndex");
static_assert(offsetof(UIItem_SetHierarchyIndex, inInt) == 0x000000, "Member 'UIItem_SetHierarchyIndex::inInt' has a wrong offset!");

// Function LGUI.UIItem.SetHorizontalAnchoredPosition
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetHorizontalAnchoredPosition final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetHorizontalAnchoredPosition) == 0x000004, "Wrong alignment on UIItem_SetHorizontalAnchoredPosition");
static_assert(sizeof(UIItem_SetHorizontalAnchoredPosition) == 0x000004, "Wrong size on UIItem_SetHorizontalAnchoredPosition");
static_assert(offsetof(UIItem_SetHorizontalAnchoredPosition, Value) == 0x000000, "Member 'UIItem_SetHorizontalAnchoredPosition::Value' has a wrong offset!");

// Function LGUI.UIItem.SetHorizontalAnchorMinMax
// 0x0018 (0x0018 - 0x0000)
struct UIItem_SetHorizontalAnchorMinMax final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepSize;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepRelativeLocation;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIItem_SetHorizontalAnchorMinMax) == 0x000008, "Wrong alignment on UIItem_SetHorizontalAnchorMinMax");
static_assert(sizeof(UIItem_SetHorizontalAnchorMinMax) == 0x000018, "Wrong size on UIItem_SetHorizontalAnchorMinMax");
static_assert(offsetof(UIItem_SetHorizontalAnchorMinMax, Value) == 0x000000, "Member 'UIItem_SetHorizontalAnchorMinMax::Value' has a wrong offset!");
static_assert(offsetof(UIItem_SetHorizontalAnchorMinMax, bKeepSize) == 0x000010, "Member 'UIItem_SetHorizontalAnchorMinMax::bKeepSize' has a wrong offset!");
static_assert(offsetof(UIItem_SetHorizontalAnchorMinMax, bKeepRelativeLocation) == 0x000011, "Member 'UIItem_SetHorizontalAnchorMinMax::bKeepRelativeLocation' has a wrong offset!");

// Function LGUI.UIItem.SetHorizontalAndVerticalAnchorMinMax
// 0x0028 (0x0028 - 0x0000)
struct UIItem_SetHorizontalAndVerticalAnchorMinMax final
{
public:
	struct FVector2D                              MinValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxValue;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepSize;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepRelativeLocation;                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIItem_SetHorizontalAndVerticalAnchorMinMax) == 0x000008, "Wrong alignment on UIItem_SetHorizontalAndVerticalAnchorMinMax");
static_assert(sizeof(UIItem_SetHorizontalAndVerticalAnchorMinMax) == 0x000028, "Wrong size on UIItem_SetHorizontalAndVerticalAnchorMinMax");
static_assert(offsetof(UIItem_SetHorizontalAndVerticalAnchorMinMax, MinValue) == 0x000000, "Member 'UIItem_SetHorizontalAndVerticalAnchorMinMax::MinValue' has a wrong offset!");
static_assert(offsetof(UIItem_SetHorizontalAndVerticalAnchorMinMax, MaxValue) == 0x000010, "Member 'UIItem_SetHorizontalAndVerticalAnchorMinMax::MaxValue' has a wrong offset!");
static_assert(offsetof(UIItem_SetHorizontalAndVerticalAnchorMinMax, bKeepSize) == 0x000020, "Member 'UIItem_SetHorizontalAndVerticalAnchorMinMax::bKeepSize' has a wrong offset!");
static_assert(offsetof(UIItem_SetHorizontalAndVerticalAnchorMinMax, bKeepRelativeLocation) == 0x000021, "Member 'UIItem_SetHorizontalAndVerticalAnchorMinMax::bKeepRelativeLocation' has a wrong offset!");

// Function LGUI.UIItem.SetIsUIActive
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetIsUIActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetIsUIActive) == 0x000001, "Wrong alignment on UIItem_SetIsUIActive");
static_assert(sizeof(UIItem_SetIsUIActive) == 0x000001, "Wrong size on UIItem_SetIsUIActive");
static_assert(offsetof(UIItem_SetIsUIActive, Active) == 0x000000, "Member 'UIItem_SetIsUIActive::Active' has a wrong offset!");

// Function LGUI.UIItem.SetPivot
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetPivot final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetPivot) == 0x000008, "Wrong alignment on UIItem_SetPivot");
static_assert(sizeof(UIItem_SetPivot) == 0x000010, "Wrong size on UIItem_SetPivot");
static_assert(offsetof(UIItem_SetPivot, Value) == 0x000000, "Member 'UIItem_SetPivot::Value' has a wrong offset!");

// Function LGUI.UIItem.SetRaycastTarget
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetRaycastTarget final
{
public:
	bool                                          newBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetRaycastTarget) == 0x000001, "Wrong alignment on UIItem_SetRaycastTarget");
static_assert(sizeof(UIItem_SetRaycastTarget) == 0x000001, "Wrong size on UIItem_SetRaycastTarget");
static_assert(offsetof(UIItem_SetRaycastTarget, newBool) == 0x000000, "Member 'UIItem_SetRaycastTarget::newBool' has a wrong offset!");

// Function LGUI.UIItem.SetSizeDelta
// 0x0010 (0x0010 - 0x0000)
struct UIItem_SetSizeDelta final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetSizeDelta) == 0x000008, "Wrong alignment on UIItem_SetSizeDelta");
static_assert(sizeof(UIItem_SetSizeDelta) == 0x000010, "Wrong size on UIItem_SetSizeDelta");
static_assert(offsetof(UIItem_SetSizeDelta, Value) == 0x000000, "Member 'UIItem_SetSizeDelta::Value' has a wrong offset!");

// Function LGUI.UIItem.SetTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct UIItem_SetTraceChannel final
{
public:
	ETraceTypeQuery                               InTraceChannel;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetTraceChannel) == 0x000001, "Wrong alignment on UIItem_SetTraceChannel");
static_assert(sizeof(UIItem_SetTraceChannel) == 0x000001, "Wrong size on UIItem_SetTraceChannel");
static_assert(offsetof(UIItem_SetTraceChannel, InTraceChannel) == 0x000000, "Member 'UIItem_SetTraceChannel::InTraceChannel' has a wrong offset!");

// Function LGUI.UIItem.SetVerticalAnchoredPosition
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetVerticalAnchoredPosition final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetVerticalAnchoredPosition) == 0x000004, "Wrong alignment on UIItem_SetVerticalAnchoredPosition");
static_assert(sizeof(UIItem_SetVerticalAnchoredPosition) == 0x000004, "Wrong size on UIItem_SetVerticalAnchoredPosition");
static_assert(offsetof(UIItem_SetVerticalAnchoredPosition, Value) == 0x000000, "Member 'UIItem_SetVerticalAnchoredPosition::Value' has a wrong offset!");

// Function LGUI.UIItem.SetVerticalAnchorMinMax
// 0x0018 (0x0018 - 0x0000)
struct UIItem_SetVerticalAnchorMinMax final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepSize;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepRelativeLocation;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIItem_SetVerticalAnchorMinMax) == 0x000008, "Wrong alignment on UIItem_SetVerticalAnchorMinMax");
static_assert(sizeof(UIItem_SetVerticalAnchorMinMax) == 0x000018, "Wrong size on UIItem_SetVerticalAnchorMinMax");
static_assert(offsetof(UIItem_SetVerticalAnchorMinMax, Value) == 0x000000, "Member 'UIItem_SetVerticalAnchorMinMax::Value' has a wrong offset!");
static_assert(offsetof(UIItem_SetVerticalAnchorMinMax, bKeepSize) == 0x000010, "Member 'UIItem_SetVerticalAnchorMinMax::bKeepSize' has a wrong offset!");
static_assert(offsetof(UIItem_SetVerticalAnchorMinMax, bKeepRelativeLocation) == 0x000011, "Member 'UIItem_SetVerticalAnchorMinMax::bKeepRelativeLocation' has a wrong offset!");

// Function LGUI.UIItem.SetWidth
// 0x0004 (0x0004 - 0x0000)
struct UIItem_SetWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_SetWidth) == 0x000004, "Wrong alignment on UIItem_SetWidth");
static_assert(sizeof(UIItem_SetWidth) == 0x000004, "Wrong size on UIItem_SetWidth");
static_assert(offsetof(UIItem_SetWidth, Value) == 0x000000, "Member 'UIItem_SetWidth::Value' has a wrong offset!");

// Function LGUI.UIItem.VerticalAnchoredPositionTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_VerticalAnchoredPositionTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_VerticalAnchoredPositionTo) == 0x000008, "Wrong alignment on UIItem_VerticalAnchoredPositionTo");
static_assert(sizeof(UIItem_VerticalAnchoredPositionTo) == 0x000018, "Wrong size on UIItem_VerticalAnchoredPositionTo");
static_assert(offsetof(UIItem_VerticalAnchoredPositionTo, endValue) == 0x000000, "Member 'UIItem_VerticalAnchoredPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_VerticalAnchoredPositionTo, Duration) == 0x000004, "Member 'UIItem_VerticalAnchoredPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_VerticalAnchoredPositionTo, Delay) == 0x000008, "Member 'UIItem_VerticalAnchoredPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_VerticalAnchoredPositionTo, Ease) == 0x00000C, "Member 'UIItem_VerticalAnchoredPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_VerticalAnchoredPositionTo, ReturnValue) == 0x000010, "Member 'UIItem_VerticalAnchoredPositionTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.WidthTo
// 0x0018 (0x0018 - 0x0000)
struct UIItem_WidthTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_WidthTo) == 0x000008, "Wrong alignment on UIItem_WidthTo");
static_assert(sizeof(UIItem_WidthTo) == 0x000018, "Wrong size on UIItem_WidthTo");
static_assert(offsetof(UIItem_WidthTo, endValue) == 0x000000, "Member 'UIItem_WidthTo::endValue' has a wrong offset!");
static_assert(offsetof(UIItem_WidthTo, Duration) == 0x000004, "Member 'UIItem_WidthTo::Duration' has a wrong offset!");
static_assert(offsetof(UIItem_WidthTo, Delay) == 0x000008, "Member 'UIItem_WidthTo::Delay' has a wrong offset!");
static_assert(offsetof(UIItem_WidthTo, Ease) == 0x00000C, "Member 'UIItem_WidthTo::Ease' has a wrong offset!");
static_assert(offsetof(UIItem_WidthTo, ReturnValue) == 0x000010, "Member 'UIItem_WidthTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.FindChildArrayByDisplayName
// 0x0028 (0x0028 - 0x0000)
struct UIItem_FindChildArrayByDisplayName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeChildren;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUIItem*>                        ReturnValue;                                       // 0x0018(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_FindChildArrayByDisplayName) == 0x000008, "Wrong alignment on UIItem_FindChildArrayByDisplayName");
static_assert(sizeof(UIItem_FindChildArrayByDisplayName) == 0x000028, "Wrong size on UIItem_FindChildArrayByDisplayName");
static_assert(offsetof(UIItem_FindChildArrayByDisplayName, InName) == 0x000000, "Member 'UIItem_FindChildArrayByDisplayName::InName' has a wrong offset!");
static_assert(offsetof(UIItem_FindChildArrayByDisplayName, IncludeChildren) == 0x000010, "Member 'UIItem_FindChildArrayByDisplayName::IncludeChildren' has a wrong offset!");
static_assert(offsetof(UIItem_FindChildArrayByDisplayName, ReturnValue) == 0x000018, "Member 'UIItem_FindChildArrayByDisplayName::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.FindChildByDisplayName
// 0x0020 (0x0020 - 0x0000)
struct UIItem_FindChildByDisplayName final
{
public:
	class FString                                 InName;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeChildren;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIItem*                                ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_FindChildByDisplayName) == 0x000008, "Wrong alignment on UIItem_FindChildByDisplayName");
static_assert(sizeof(UIItem_FindChildByDisplayName) == 0x000020, "Wrong size on UIItem_FindChildByDisplayName");
static_assert(offsetof(UIItem_FindChildByDisplayName, InName) == 0x000000, "Member 'UIItem_FindChildByDisplayName::InName' has a wrong offset!");
static_assert(offsetof(UIItem_FindChildByDisplayName, IncludeChildren) == 0x000010, "Member 'UIItem_FindChildByDisplayName::IncludeChildren' has a wrong offset!");
static_assert(offsetof(UIItem_FindChildByDisplayName, ReturnValue) == 0x000018, "Member 'UIItem_FindChildByDisplayName::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorBottom
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAnchorBottom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorBottom) == 0x000004, "Wrong alignment on UIItem_GetAnchorBottom");
static_assert(sizeof(UIItem_GetAnchorBottom) == 0x000004, "Wrong size on UIItem_GetAnchorBottom");
static_assert(offsetof(UIItem_GetAnchorBottom, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorBottom::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorData
// 0x0050 (0x0050 - 0x0000)
struct UIItem_GetAnchorData final
{
public:
	struct FUIAnchorData                          ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorData) == 0x000008, "Wrong alignment on UIItem_GetAnchorData");
static_assert(sizeof(UIItem_GetAnchorData) == 0x000050, "Wrong size on UIItem_GetAnchorData");
static_assert(offsetof(UIItem_GetAnchorData, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorData::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchoredPosition
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAnchoredPosition final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchoredPosition) == 0x000008, "Wrong alignment on UIItem_GetAnchoredPosition");
static_assert(sizeof(UIItem_GetAnchoredPosition) == 0x000010, "Wrong size on UIItem_GetAnchoredPosition");
static_assert(offsetof(UIItem_GetAnchoredPosition, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchoredPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorLeft
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAnchorLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorLeft) == 0x000004, "Wrong alignment on UIItem_GetAnchorLeft");
static_assert(sizeof(UIItem_GetAnchorLeft) == 0x000004, "Wrong size on UIItem_GetAnchorLeft");
static_assert(offsetof(UIItem_GetAnchorLeft, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorLeft::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorMax
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAnchorMax final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorMax) == 0x000008, "Wrong alignment on UIItem_GetAnchorMax");
static_assert(sizeof(UIItem_GetAnchorMax) == 0x000010, "Wrong size on UIItem_GetAnchorMax");
static_assert(offsetof(UIItem_GetAnchorMax, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorMin
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAnchorMin final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorMin) == 0x000008, "Wrong alignment on UIItem_GetAnchorMin");
static_assert(sizeof(UIItem_GetAnchorMin) == 0x000010, "Wrong size on UIItem_GetAnchorMin");
static_assert(offsetof(UIItem_GetAnchorMin, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorRight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAnchorRight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorRight) == 0x000004, "Wrong alignment on UIItem_GetAnchorRight");
static_assert(sizeof(UIItem_GetAnchorRight) == 0x000004, "Wrong size on UIItem_GetAnchorRight");
static_assert(offsetof(UIItem_GetAnchorRight, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorRight::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAnchorTop
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetAnchorTop final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAnchorTop) == 0x000004, "Wrong alignment on UIItem_GetAnchorTop");
static_assert(sizeof(UIItem_GetAnchorTop) == 0x000004, "Wrong size on UIItem_GetAnchorTop");
static_assert(offsetof(UIItem_GetAnchorTop, ReturnValue) == 0x000000, "Member 'UIItem_GetAnchorTop::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAttachUIChild
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAttachUIChild final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIItem*                                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAttachUIChild) == 0x000008, "Wrong alignment on UIItem_GetAttachUIChild");
static_assert(sizeof(UIItem_GetAttachUIChild) == 0x000010, "Wrong size on UIItem_GetAttachUIChild");
static_assert(offsetof(UIItem_GetAttachUIChild, Index_0) == 0x000000, "Member 'UIItem_GetAttachUIChild::Index_0' has a wrong offset!");
static_assert(offsetof(UIItem_GetAttachUIChild, ReturnValue) == 0x000008, "Member 'UIItem_GetAttachUIChild::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetAttachUIChildren
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetAttachUIChildren final
{
public:
	TArray<class UUIItem*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetAttachUIChildren) == 0x000008, "Wrong alignment on UIItem_GetAttachUIChildren");
static_assert(sizeof(UIItem_GetAttachUIChildren) == 0x000010, "Wrong size on UIItem_GetAttachUIChildren");
static_assert(offsetof(UIItem_GetAttachUIChildren, ReturnValue) == 0x000000, "Member 'UIItem_GetAttachUIChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetCanvasGroup
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetCanvasGroup final
{
public:
	class UUICanvasGroup*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetCanvasGroup) == 0x000008, "Wrong alignment on UIItem_GetCanvasGroup");
static_assert(sizeof(UIItem_GetCanvasGroup) == 0x000008, "Wrong size on UIItem_GetCanvasGroup");
static_assert(offsetof(UIItem_GetCanvasGroup, ReturnValue) == 0x000000, "Member 'UIItem_GetCanvasGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetCanvasScaler
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetCanvasScaler final
{
public:
	class ULGUICanvasScaler*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetCanvasScaler) == 0x000008, "Wrong alignment on UIItem_GetCanvasScaler");
static_assert(sizeof(UIItem_GetCanvasScaler) == 0x000008, "Wrong size on UIItem_GetCanvasScaler");
static_assert(offsetof(UIItem_GetCanvasScaler, ReturnValue) == 0x000000, "Member 'UIItem_GetCanvasScaler::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetDisplayName) == 0x000008, "Wrong alignment on UIItem_GetDisplayName");
static_assert(sizeof(UIItem_GetDisplayName) == 0x000010, "Wrong size on UIItem_GetDisplayName");
static_assert(offsetof(UIItem_GetDisplayName, ReturnValue) == 0x000000, "Member 'UIItem_GetDisplayName::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetFlattenHierarchyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetFlattenHierarchyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetFlattenHierarchyIndex) == 0x000004, "Wrong alignment on UIItem_GetFlattenHierarchyIndex");
static_assert(sizeof(UIItem_GetFlattenHierarchyIndex) == 0x000004, "Wrong size on UIItem_GetFlattenHierarchyIndex");
static_assert(offsetof(UIItem_GetFlattenHierarchyIndex, ReturnValue) == 0x000000, "Member 'UIItem_GetFlattenHierarchyIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetHeight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetHeight) == 0x000004, "Wrong alignment on UIItem_GetHeight");
static_assert(sizeof(UIItem_GetHeight) == 0x000004, "Wrong size on UIItem_GetHeight");
static_assert(offsetof(UIItem_GetHeight, ReturnValue) == 0x000000, "Member 'UIItem_GetHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetHierarchyIndex
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetHierarchyIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetHierarchyIndex) == 0x000004, "Wrong alignment on UIItem_GetHierarchyIndex");
static_assert(sizeof(UIItem_GetHierarchyIndex) == 0x000004, "Wrong size on UIItem_GetHierarchyIndex");
static_assert(offsetof(UIItem_GetHierarchyIndex, ReturnValue) == 0x000000, "Member 'UIItem_GetHierarchyIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetHorizontalAnchoredPosition
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetHorizontalAnchoredPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetHorizontalAnchoredPosition) == 0x000004, "Wrong alignment on UIItem_GetHorizontalAnchoredPosition");
static_assert(sizeof(UIItem_GetHorizontalAnchoredPosition) == 0x000004, "Wrong size on UIItem_GetHorizontalAnchoredPosition");
static_assert(offsetof(UIItem_GetHorizontalAnchoredPosition, ReturnValue) == 0x000000, "Member 'UIItem_GetHorizontalAnchoredPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetIsUIActiveInHierarchy
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetIsUIActiveInHierarchy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetIsUIActiveInHierarchy) == 0x000001, "Wrong alignment on UIItem_GetIsUIActiveInHierarchy");
static_assert(sizeof(UIItem_GetIsUIActiveInHierarchy) == 0x000001, "Wrong size on UIItem_GetIsUIActiveInHierarchy");
static_assert(offsetof(UIItem_GetIsUIActiveInHierarchy, ReturnValue) == 0x000000, "Member 'UIItem_GetIsUIActiveInHierarchy::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetIsUIActiveSelf
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetIsUIActiveSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetIsUIActiveSelf) == 0x000001, "Wrong alignment on UIItem_GetIsUIActiveSelf");
static_assert(sizeof(UIItem_GetIsUIActiveSelf) == 0x000001, "Wrong size on UIItem_GetIsUIActiveSelf");
static_assert(offsetof(UIItem_GetIsUIActiveSelf, ReturnValue) == 0x000000, "Member 'UIItem_GetIsUIActiveSelf::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceBottom
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceBottom final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceBottom) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceBottom");
static_assert(sizeof(UIItem_GetLocalSpaceBottom) == 0x000004, "Wrong size on UIItem_GetLocalSpaceBottom");
static_assert(offsetof(UIItem_GetLocalSpaceBottom, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceBottom::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceCenter
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetLocalSpaceCenter final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceCenter) == 0x000008, "Wrong alignment on UIItem_GetLocalSpaceCenter");
static_assert(sizeof(UIItem_GetLocalSpaceCenter) == 0x000010, "Wrong size on UIItem_GetLocalSpaceCenter");
static_assert(offsetof(UIItem_GetLocalSpaceCenter, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceCenter::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceLeft
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceLeft) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceLeft");
static_assert(sizeof(UIItem_GetLocalSpaceLeft) == 0x000004, "Wrong size on UIItem_GetLocalSpaceLeft");
static_assert(offsetof(UIItem_GetLocalSpaceLeft, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceLeft::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceLeftBottomPoint
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetLocalSpaceLeftBottomPoint final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceLeftBottomPoint) == 0x000008, "Wrong alignment on UIItem_GetLocalSpaceLeftBottomPoint");
static_assert(sizeof(UIItem_GetLocalSpaceLeftBottomPoint) == 0x000010, "Wrong size on UIItem_GetLocalSpaceLeftBottomPoint");
static_assert(offsetof(UIItem_GetLocalSpaceLeftBottomPoint, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceLeftBottomPoint::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceRight
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceRight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceRight) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceRight");
static_assert(sizeof(UIItem_GetLocalSpaceRight) == 0x000004, "Wrong size on UIItem_GetLocalSpaceRight");
static_assert(offsetof(UIItem_GetLocalSpaceRight, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceRight::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceRightTopPoint
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetLocalSpaceRightTopPoint final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceRightTopPoint) == 0x000008, "Wrong alignment on UIItem_GetLocalSpaceRightTopPoint");
static_assert(sizeof(UIItem_GetLocalSpaceRightTopPoint) == 0x000010, "Wrong size on UIItem_GetLocalSpaceRightTopPoint");
static_assert(offsetof(UIItem_GetLocalSpaceRightTopPoint, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceRightTopPoint::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetLocalSpaceTop
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetLocalSpaceTop final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetLocalSpaceTop) == 0x000004, "Wrong alignment on UIItem_GetLocalSpaceTop");
static_assert(sizeof(UIItem_GetLocalSpaceTop) == 0x000004, "Wrong size on UIItem_GetLocalSpaceTop");
static_assert(offsetof(UIItem_GetLocalSpaceTop, ReturnValue) == 0x000000, "Member 'UIItem_GetLocalSpaceTop::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetParentUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetParentUIItem final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetParentUIItem) == 0x000008, "Wrong alignment on UIItem_GetParentUIItem");
static_assert(sizeof(UIItem_GetParentUIItem) == 0x000008, "Wrong size on UIItem_GetParentUIItem");
static_assert(offsetof(UIItem_GetParentUIItem, ReturnValue) == 0x000000, "Member 'UIItem_GetParentUIItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetPivot
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetPivot final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetPivot) == 0x000008, "Wrong alignment on UIItem_GetPivot");
static_assert(sizeof(UIItem_GetPivot) == 0x000010, "Wrong size on UIItem_GetPivot");
static_assert(offsetof(UIItem_GetPivot, ReturnValue) == 0x000000, "Member 'UIItem_GetPivot::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetRenderCanvas
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetRenderCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetRenderCanvas) == 0x000008, "Wrong alignment on UIItem_GetRenderCanvas");
static_assert(sizeof(UIItem_GetRenderCanvas) == 0x000008, "Wrong size on UIItem_GetRenderCanvas");
static_assert(offsetof(UIItem_GetRenderCanvas, ReturnValue) == 0x000000, "Member 'UIItem_GetRenderCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetRootCanvas
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetRootCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetRootCanvas) == 0x000008, "Wrong alignment on UIItem_GetRootCanvas");
static_assert(sizeof(UIItem_GetRootCanvas) == 0x000008, "Wrong size on UIItem_GetRootCanvas");
static_assert(offsetof(UIItem_GetRootCanvas, ReturnValue) == 0x000000, "Member 'UIItem_GetRootCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetRootUIItemInHierarchy
// 0x0008 (0x0008 - 0x0000)
struct UIItem_GetRootUIItemInHierarchy final
{
public:
	class UUIItem*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetRootUIItemInHierarchy) == 0x000008, "Wrong alignment on UIItem_GetRootUIItemInHierarchy");
static_assert(sizeof(UIItem_GetRootUIItemInHierarchy) == 0x000008, "Wrong size on UIItem_GetRootUIItemInHierarchy");
static_assert(offsetof(UIItem_GetRootUIItemInHierarchy, ReturnValue) == 0x000000, "Member 'UIItem_GetRootUIItemInHierarchy::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetSizeDelta
// 0x0010 (0x0010 - 0x0000)
struct UIItem_GetSizeDelta final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetSizeDelta) == 0x000008, "Wrong alignment on UIItem_GetSizeDelta");
static_assert(sizeof(UIItem_GetSizeDelta) == 0x000010, "Wrong size on UIItem_GetSizeDelta");
static_assert(offsetof(UIItem_GetSizeDelta, ReturnValue) == 0x000000, "Member 'UIItem_GetSizeDelta::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetTraceChannel
// 0x0001 (0x0001 - 0x0000)
struct UIItem_GetTraceChannel final
{
public:
	ETraceTypeQuery                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetTraceChannel) == 0x000001, "Wrong alignment on UIItem_GetTraceChannel");
static_assert(sizeof(UIItem_GetTraceChannel) == 0x000001, "Wrong size on UIItem_GetTraceChannel");
static_assert(offsetof(UIItem_GetTraceChannel, ReturnValue) == 0x000000, "Member 'UIItem_GetTraceChannel::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetVerticalAnchoredPosition
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetVerticalAnchoredPosition final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetVerticalAnchoredPosition) == 0x000004, "Wrong alignment on UIItem_GetVerticalAnchoredPosition");
static_assert(sizeof(UIItem_GetVerticalAnchoredPosition) == 0x000004, "Wrong size on UIItem_GetVerticalAnchoredPosition");
static_assert(offsetof(UIItem_GetVerticalAnchoredPosition, ReturnValue) == 0x000000, "Member 'UIItem_GetVerticalAnchoredPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.GetWidth
// 0x0004 (0x0004 - 0x0000)
struct UIItem_GetWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_GetWidth) == 0x000004, "Wrong alignment on UIItem_GetWidth");
static_assert(sizeof(UIItem_GetWidth) == 0x000004, "Wrong size on UIItem_GetWidth");
static_assert(offsetof(UIItem_GetWidth, ReturnValue) == 0x000000, "Member 'UIItem_GetWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsRaycastTarget
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsRaycastTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsRaycastTarget) == 0x000001, "Wrong alignment on UIItem_IsRaycastTarget");
static_assert(sizeof(UIItem_IsRaycastTarget) == 0x000001, "Wrong size on UIItem_IsRaycastTarget");
static_assert(offsetof(UIItem_IsRaycastTarget, ReturnValue) == 0x000000, "Member 'UIItem_IsRaycastTarget::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsRenderTargetUI
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsRenderTargetUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsRenderTargetUI) == 0x000001, "Wrong alignment on UIItem_IsRenderTargetUI");
static_assert(sizeof(UIItem_IsRenderTargetUI) == 0x000001, "Wrong size on UIItem_IsRenderTargetUI");
static_assert(offsetof(UIItem_IsRenderTargetUI, ReturnValue) == 0x000000, "Member 'UIItem_IsRenderTargetUI::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsScreenSpaceOverlayUI
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsScreenSpaceOverlayUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsScreenSpaceOverlayUI) == 0x000001, "Wrong alignment on UIItem_IsScreenSpaceOverlayUI");
static_assert(sizeof(UIItem_IsScreenSpaceOverlayUI) == 0x000001, "Wrong size on UIItem_IsScreenSpaceOverlayUI");
static_assert(offsetof(UIItem_IsScreenSpaceOverlayUI, ReturnValue) == 0x000000, "Member 'UIItem_IsScreenSpaceOverlayUI::ReturnValue' has a wrong offset!");

// Function LGUI.UIItem.IsWorldSpaceUI
// 0x0001 (0x0001 - 0x0000)
struct UIItem_IsWorldSpaceUI final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIItem_IsWorldSpaceUI) == 0x000001, "Wrong alignment on UIItem_IsWorldSpaceUI");
static_assert(sizeof(UIItem_IsWorldSpaceUI) == 0x000001, "Wrong size on UIItem_IsWorldSpaceUI");
static_assert(offsetof(UIItem_IsWorldSpaceUI, ReturnValue) == 0x000000, "Member 'UIItem_IsWorldSpaceUI::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.AlphaFrom
// 0x0018 (0x0018 - 0x0000)
struct UIBaseRenderable_AlphaFrom final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_AlphaFrom) == 0x000008, "Wrong alignment on UIBaseRenderable_AlphaFrom");
static_assert(sizeof(UIBaseRenderable_AlphaFrom) == 0x000018, "Wrong size on UIBaseRenderable_AlphaFrom");
static_assert(offsetof(UIBaseRenderable_AlphaFrom, StartValue) == 0x000000, "Member 'UIBaseRenderable_AlphaFrom::StartValue' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaFrom, Duration) == 0x000004, "Member 'UIBaseRenderable_AlphaFrom::Duration' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaFrom, Delay) == 0x000008, "Member 'UIBaseRenderable_AlphaFrom::Delay' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaFrom, Ease) == 0x00000C, "Member 'UIBaseRenderable_AlphaFrom::Ease' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaFrom, ReturnValue) == 0x000010, "Member 'UIBaseRenderable_AlphaFrom::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.AlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIBaseRenderable_AlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_AlphaTo) == 0x000008, "Wrong alignment on UIBaseRenderable_AlphaTo");
static_assert(sizeof(UIBaseRenderable_AlphaTo) == 0x000018, "Wrong size on UIBaseRenderable_AlphaTo");
static_assert(offsetof(UIBaseRenderable_AlphaTo, endValue) == 0x000000, "Member 'UIBaseRenderable_AlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaTo, Duration) == 0x000004, "Member 'UIBaseRenderable_AlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaTo, Delay) == 0x000008, "Member 'UIBaseRenderable_AlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaTo, Ease) == 0x00000C, "Member 'UIBaseRenderable_AlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_AlphaTo, ReturnValue) == 0x000010, "Member 'UIBaseRenderable_AlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.ColorFrom
// 0x0018 (0x0018 - 0x0000)
struct UIBaseRenderable_ColorFrom final
{
public:
	struct FColor                                 StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_ColorFrom) == 0x000008, "Wrong alignment on UIBaseRenderable_ColorFrom");
static_assert(sizeof(UIBaseRenderable_ColorFrom) == 0x000018, "Wrong size on UIBaseRenderable_ColorFrom");
static_assert(offsetof(UIBaseRenderable_ColorFrom, StartValue) == 0x000000, "Member 'UIBaseRenderable_ColorFrom::StartValue' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorFrom, Duration) == 0x000004, "Member 'UIBaseRenderable_ColorFrom::Duration' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorFrom, Delay) == 0x000008, "Member 'UIBaseRenderable_ColorFrom::Delay' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorFrom, Ease) == 0x00000C, "Member 'UIBaseRenderable_ColorFrom::Ease' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorFrom, ReturnValue) == 0x000010, "Member 'UIBaseRenderable_ColorFrom::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.ColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIBaseRenderable_ColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_ColorTo) == 0x000008, "Wrong alignment on UIBaseRenderable_ColorTo");
static_assert(sizeof(UIBaseRenderable_ColorTo) == 0x000018, "Wrong size on UIBaseRenderable_ColorTo");
static_assert(offsetof(UIBaseRenderable_ColorTo, endValue) == 0x000000, "Member 'UIBaseRenderable_ColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorTo, Duration) == 0x000004, "Member 'UIBaseRenderable_ColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorTo, Delay) == 0x000008, "Member 'UIBaseRenderable_ColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorTo, Ease) == 0x00000C, "Member 'UIBaseRenderable_ColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIBaseRenderable_ColorTo, ReturnValue) == 0x000010, "Member 'UIBaseRenderable_ColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIBaseRenderable_SetAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_SetAlpha) == 0x000004, "Wrong alignment on UIBaseRenderable_SetAlpha");
static_assert(sizeof(UIBaseRenderable_SetAlpha) == 0x000004, "Wrong size on UIBaseRenderable_SetAlpha");
static_assert(offsetof(UIBaseRenderable_SetAlpha, Value) == 0x000000, "Member 'UIBaseRenderable_SetAlpha::Value' has a wrong offset!");

// Function LGUI.UIBaseRenderable.SetColor
// 0x0004 (0x0004 - 0x0000)
struct UIBaseRenderable_SetColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_SetColor) == 0x000004, "Wrong alignment on UIBaseRenderable_SetColor");
static_assert(sizeof(UIBaseRenderable_SetColor) == 0x000004, "Wrong size on UIBaseRenderable_SetColor");
static_assert(offsetof(UIBaseRenderable_SetColor, Value) == 0x000000, "Member 'UIBaseRenderable_SetColor::Value' has a wrong offset!");

// Function LGUI.UIBaseRenderable.SetCustomRaycastObject
// 0x0008 (0x0008 - 0x0000)
struct UIBaseRenderable_SetCustomRaycastObject final
{
public:
	class UUIRenderableCustomRaycast*             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_SetCustomRaycastObject) == 0x000008, "Wrong alignment on UIBaseRenderable_SetCustomRaycastObject");
static_assert(sizeof(UIBaseRenderable_SetCustomRaycastObject) == 0x000008, "Wrong size on UIBaseRenderable_SetCustomRaycastObject");
static_assert(offsetof(UIBaseRenderable_SetCustomRaycastObject, Value) == 0x000000, "Member 'UIBaseRenderable_SetCustomRaycastObject::Value' has a wrong offset!");

// Function LGUI.UIBaseRenderable.SetRaycastType
// 0x0001 (0x0001 - 0x0000)
struct UIBaseRenderable_SetRaycastType final
{
public:
	EUIRenderableRaycastType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_SetRaycastType) == 0x000001, "Wrong alignment on UIBaseRenderable_SetRaycastType");
static_assert(sizeof(UIBaseRenderable_SetRaycastType) == 0x000001, "Wrong size on UIBaseRenderable_SetRaycastType");
static_assert(offsetof(UIBaseRenderable_SetRaycastType, Value) == 0x000000, "Member 'UIBaseRenderable_SetRaycastType::Value' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UIBaseRenderable_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetAlpha) == 0x000004, "Wrong alignment on UIBaseRenderable_GetAlpha");
static_assert(sizeof(UIBaseRenderable_GetAlpha) == 0x000004, "Wrong size on UIBaseRenderable_GetAlpha");
static_assert(offsetof(UIBaseRenderable_GetAlpha, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetColor
// 0x0004 (0x0004 - 0x0000)
struct UIBaseRenderable_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetColor) == 0x000004, "Wrong alignment on UIBaseRenderable_GetColor");
static_assert(sizeof(UIBaseRenderable_GetColor) == 0x000004, "Wrong size on UIBaseRenderable_GetColor");
static_assert(offsetof(UIBaseRenderable_GetColor, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetCustomRaycastObject
// 0x0008 (0x0008 - 0x0000)
struct UIBaseRenderable_GetCustomRaycastObject final
{
public:
	class UUIRenderableCustomRaycast*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetCustomRaycastObject) == 0x000008, "Wrong alignment on UIBaseRenderable_GetCustomRaycastObject");
static_assert(sizeof(UIBaseRenderable_GetCustomRaycastObject) == 0x000008, "Wrong size on UIBaseRenderable_GetCustomRaycastObject");
static_assert(offsetof(UIBaseRenderable_GetCustomRaycastObject, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetCustomRaycastObject::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetFinalAlpha01
// 0x0004 (0x0004 - 0x0000)
struct UIBaseRenderable_GetFinalAlpha01 final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetFinalAlpha01) == 0x000004, "Wrong alignment on UIBaseRenderable_GetFinalAlpha01");
static_assert(sizeof(UIBaseRenderable_GetFinalAlpha01) == 0x000004, "Wrong size on UIBaseRenderable_GetFinalAlpha01");
static_assert(offsetof(UIBaseRenderable_GetFinalAlpha01, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetFinalAlpha01::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetFinalColor
// 0x0004 (0x0004 - 0x0000)
struct UIBaseRenderable_GetFinalColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetFinalColor) == 0x000004, "Wrong alignment on UIBaseRenderable_GetFinalColor");
static_assert(sizeof(UIBaseRenderable_GetFinalColor) == 0x000004, "Wrong size on UIBaseRenderable_GetFinalColor");
static_assert(offsetof(UIBaseRenderable_GetFinalColor, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetFinalColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetRaycastType
// 0x0001 (0x0001 - 0x0000)
struct UIBaseRenderable_GetRaycastType final
{
public:
	EUIRenderableRaycastType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetRaycastType) == 0x000001, "Wrong alignment on UIBaseRenderable_GetRaycastType");
static_assert(sizeof(UIBaseRenderable_GetRaycastType) == 0x000001, "Wrong size on UIBaseRenderable_GetRaycastType");
static_assert(offsetof(UIBaseRenderable_GetRaycastType, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetRaycastType::ReturnValue' has a wrong offset!");

// Function LGUI.UIBaseRenderable.GetUIRenderableType
// 0x0001 (0x0001 - 0x0000)
struct UIBaseRenderable_GetUIRenderableType final
{
public:
	EUIRenderableType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBaseRenderable_GetUIRenderableType) == 0x000001, "Wrong alignment on UIBaseRenderable_GetUIRenderableType");
static_assert(sizeof(UIBaseRenderable_GetUIRenderableType) == 0x000001, "Wrong size on UIBaseRenderable_GetUIRenderableType");
static_assert(offsetof(UIBaseRenderable_GetUIRenderableType, ReturnValue) == 0x000000, "Member 'UIBaseRenderable_GetUIRenderableType::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchMeshRenderable.ReceiveGetMaterialToCreateGeometry
// 0x0008 (0x0008 - 0x0000)
struct UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry) == 0x000008, "Wrong alignment on UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry");
static_assert(sizeof(UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry) == 0x000008, "Wrong size on UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry, ReturnValue) == 0x000000, "Member 'UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchMeshRenderable.ReceiveGetTextureToCreateGeometry
// 0x0008 (0x0008 - 0x0000)
struct UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry) == 0x000008, "Wrong alignment on UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry");
static_assert(sizeof(UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry) == 0x000008, "Wrong size on UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry, ReturnValue) == 0x000000, "Member 'UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchMeshRenderable.ReceiveOnUpdateGeometry
// 0x0010 (0x0010 - 0x0000)
struct UIBatchMeshRenderable_ReceiveOnUpdateGeometry final
{
public:
	class ULGUIGeometryHelper*                    InGeometryHelper;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InTriangleChanged;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexPositionChanged;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexUVChanged;                                 // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InVertexColorChanged;                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry) == 0x000008, "Wrong alignment on UIBatchMeshRenderable_ReceiveOnUpdateGeometry");
static_assert(sizeof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry) == 0x000010, "Wrong size on UIBatchMeshRenderable_ReceiveOnUpdateGeometry");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry, InGeometryHelper) == 0x000000, "Member 'UIBatchMeshRenderable_ReceiveOnUpdateGeometry::InGeometryHelper' has a wrong offset!");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry, InTriangleChanged) == 0x000008, "Member 'UIBatchMeshRenderable_ReceiveOnUpdateGeometry::InTriangleChanged' has a wrong offset!");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry, InVertexPositionChanged) == 0x000009, "Member 'UIBatchMeshRenderable_ReceiveOnUpdateGeometry::InVertexPositionChanged' has a wrong offset!");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry, InVertexUVChanged) == 0x00000A, "Member 'UIBatchMeshRenderable_ReceiveOnUpdateGeometry::InVertexUVChanged' has a wrong offset!");
static_assert(offsetof(UIBatchMeshRenderable_ReceiveOnUpdateGeometry, InVertexColorChanged) == 0x00000B, "Member 'UIBatchMeshRenderable_ReceiveOnUpdateGeometry::InVertexColorChanged' has a wrong offset!");

// Function LGUI.UIBatchMeshRenderable.SetCustomUIMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIBatchMeshRenderable_SetCustomUIMaterial final
{
public:
	class UMaterialInterface*                     InMat;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchMeshRenderable_SetCustomUIMaterial) == 0x000008, "Wrong alignment on UIBatchMeshRenderable_SetCustomUIMaterial");
static_assert(sizeof(UIBatchMeshRenderable_SetCustomUIMaterial) == 0x000008, "Wrong size on UIBatchMeshRenderable_SetCustomUIMaterial");
static_assert(offsetof(UIBatchMeshRenderable_SetCustomUIMaterial, InMat) == 0x000000, "Member 'UIBatchMeshRenderable_SetCustomUIMaterial::InMat' has a wrong offset!");

// Function LGUI.UIBatchMeshRenderable.GetCustomUIMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIBatchMeshRenderable_GetCustomUIMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchMeshRenderable_GetCustomUIMaterial) == 0x000008, "Wrong alignment on UIBatchMeshRenderable_GetCustomUIMaterial");
static_assert(sizeof(UIBatchMeshRenderable_GetCustomUIMaterial) == 0x000008, "Wrong size on UIBatchMeshRenderable_GetCustomUIMaterial");
static_assert(offsetof(UIBatchMeshRenderable_GetCustomUIMaterial, ReturnValue) == 0x000000, "Member 'UIBatchMeshRenderable_GetCustomUIMaterial::ReturnValue' has a wrong offset!");

// Function LGUI.UIBatchMeshRenderable.GetMaterialInstanceDynamic
// 0x0008 (0x0008 - 0x0000)
struct UIBatchMeshRenderable_GetMaterialInstanceDynamic final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBatchMeshRenderable_GetMaterialInstanceDynamic) == 0x000008, "Wrong alignment on UIBatchMeshRenderable_GetMaterialInstanceDynamic");
static_assert(sizeof(UIBatchMeshRenderable_GetMaterialInstanceDynamic) == 0x000008, "Wrong size on UIBatchMeshRenderable_GetMaterialInstanceDynamic");
static_assert(offsetof(UIBatchMeshRenderable_GetMaterialInstanceDynamic, ReturnValue) == 0x000000, "Member 'UIBatchMeshRenderable_GetMaterialInstanceDynamic::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteBase.SetSprite
// 0x0010 (0x0010 - 0x0000)
struct UISpriteBase_SetSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SetSize;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISpriteBase_SetSprite) == 0x000008, "Wrong alignment on UISpriteBase_SetSprite");
static_assert(sizeof(UISpriteBase_SetSprite) == 0x000010, "Wrong size on UISpriteBase_SetSprite");
static_assert(offsetof(UISpriteBase_SetSprite, NewSprite) == 0x000000, "Member 'UISpriteBase_SetSprite::NewSprite' has a wrong offset!");
static_assert(offsetof(UISpriteBase_SetSprite, SetSize) == 0x000008, "Member 'UISpriteBase_SetSprite::SetSize' has a wrong offset!");

// Function LGUI.UISpriteBase.GetSprite
// 0x0008 (0x0008 - 0x0000)
struct UISpriteBase_GetSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteBase_GetSprite) == 0x000008, "Wrong alignment on UISpriteBase_GetSprite");
static_assert(sizeof(UISpriteBase_GetSprite) == 0x000008, "Wrong size on UISpriteBase_GetSprite");
static_assert(offsetof(UISpriteBase_GetSprite, ReturnValue) == 0x000000, "Member 'UISpriteBase_GetSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.LineWidthTo
// 0x0018 (0x0018 - 0x0000)
struct UI2DLineRendererBase_LineWidthTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_LineWidthTo) == 0x000008, "Wrong alignment on UI2DLineRendererBase_LineWidthTo");
static_assert(sizeof(UI2DLineRendererBase_LineWidthTo) == 0x000018, "Wrong size on UI2DLineRendererBase_LineWidthTo");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, endValue) == 0x000000, "Member 'UI2DLineRendererBase_LineWidthTo::endValue' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, Duration) == 0x000004, "Member 'UI2DLineRendererBase_LineWidthTo::Duration' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, Delay) == 0x000008, "Member 'UI2DLineRendererBase_LineWidthTo::Delay' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, easetype) == 0x00000C, "Member 'UI2DLineRendererBase_LineWidthTo::easetype' has a wrong offset!");
static_assert(offsetof(UI2DLineRendererBase_LineWidthTo, ReturnValue) == 0x000010, "Member 'UI2DLineRendererBase_LineWidthTo::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.SetEndType
// 0x0001 (0x0001 - 0x0000)
struct UI2DLineRendererBase_SetEndType final
{
public:
	EUI2DLineRenderer_EndType                     NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_SetEndType) == 0x000001, "Wrong alignment on UI2DLineRendererBase_SetEndType");
static_assert(sizeof(UI2DLineRendererBase_SetEndType) == 0x000001, "Wrong size on UI2DLineRendererBase_SetEndType");
static_assert(offsetof(UI2DLineRendererBase_SetEndType, NewValue) == 0x000000, "Member 'UI2DLineRendererBase_SetEndType::NewValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.SetLineWidth
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_SetLineWidth final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_SetLineWidth) == 0x000004, "Wrong alignment on UI2DLineRendererBase_SetLineWidth");
static_assert(sizeof(UI2DLineRendererBase_SetLineWidth) == 0x000004, "Wrong size on UI2DLineRendererBase_SetLineWidth");
static_assert(offsetof(UI2DLineRendererBase_SetLineWidth, NewValue) == 0x000000, "Member 'UI2DLineRendererBase_SetLineWidth::NewValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.SetLineWidthOffset
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_SetLineWidthOffset final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_SetLineWidthOffset) == 0x000004, "Wrong alignment on UI2DLineRendererBase_SetLineWidthOffset");
static_assert(sizeof(UI2DLineRendererBase_SetLineWidthOffset) == 0x000004, "Wrong size on UI2DLineRendererBase_SetLineWidthOffset");
static_assert(offsetof(UI2DLineRendererBase_SetLineWidthOffset, NewValue) == 0x000000, "Member 'UI2DLineRendererBase_SetLineWidthOffset::NewValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.GetEndType
// 0x0001 (0x0001 - 0x0000)
struct UI2DLineRendererBase_GetEndType final
{
public:
	EUI2DLineRenderer_EndType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_GetEndType) == 0x000001, "Wrong alignment on UI2DLineRendererBase_GetEndType");
static_assert(sizeof(UI2DLineRendererBase_GetEndType) == 0x000001, "Wrong size on UI2DLineRendererBase_GetEndType");
static_assert(offsetof(UI2DLineRendererBase_GetEndType, ReturnValue) == 0x000000, "Member 'UI2DLineRendererBase_GetEndType::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.GetLineWidth
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_GetLineWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_GetLineWidth) == 0x000004, "Wrong alignment on UI2DLineRendererBase_GetLineWidth");
static_assert(sizeof(UI2DLineRendererBase_GetLineWidth) == 0x000004, "Wrong size on UI2DLineRendererBase_GetLineWidth");
static_assert(offsetof(UI2DLineRendererBase_GetLineWidth, ReturnValue) == 0x000000, "Member 'UI2DLineRendererBase_GetLineWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRendererBase.GetLineWidthOffset
// 0x0004 (0x0004 - 0x0000)
struct UI2DLineRendererBase_GetLineWidthOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRendererBase_GetLineWidthOffset) == 0x000004, "Wrong alignment on UI2DLineRendererBase_GetLineWidthOffset");
static_assert(sizeof(UI2DLineRendererBase_GetLineWidthOffset) == 0x000004, "Wrong size on UI2DLineRendererBase_GetLineWidthOffset");
static_assert(offsetof(UI2DLineRendererBase_GetLineWidthOffset, ReturnValue) == 0x000000, "Member 'UI2DLineRendererBase_GetLineWidthOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineChildrenAsPointsActor.Get2DLineChildrenAsPoints
// 0x0008 (0x0008 - 0x0000)
struct UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints final
{
public:
	class UUI2DLineChildrenAsPoints*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints) == 0x000008, "Wrong alignment on UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints");
static_assert(sizeof(UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints) == 0x000008, "Wrong size on UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints");
static_assert(offsetof(UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints, ReturnValue) == 0x000000, "Member 'UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints::ReturnValue' has a wrong offset!");

// Function LGUI.UI2DLineRaw.SetPoints
// 0x0010 (0x0010 - 0x0000)
struct UI2DLineRaw_SetPoints final
{
public:
	TArray<struct FVector2D>                      InPoints;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineRaw_SetPoints) == 0x000008, "Wrong alignment on UI2DLineRaw_SetPoints");
static_assert(sizeof(UI2DLineRaw_SetPoints) == 0x000010, "Wrong size on UI2DLineRaw_SetPoints");
static_assert(offsetof(UI2DLineRaw_SetPoints, InPoints) == 0x000000, "Member 'UI2DLineRaw_SetPoints::InPoints' has a wrong offset!");

// Function LGUI.UI2DLineActor.Get2DLineRaw
// 0x0008 (0x0008 - 0x0000)
struct UI2DLineActor_Get2DLineRaw final
{
public:
	class UUI2DLineRaw*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UI2DLineActor_Get2DLineRaw) == 0x000008, "Wrong alignment on UI2DLineActor_Get2DLineRaw");
static_assert(sizeof(UI2DLineActor_Get2DLineRaw) == 0x000008, "Wrong size on UI2DLineActor_Get2DLineRaw");
static_assert(offsetof(UI2DLineActor_Get2DLineRaw, ReturnValue) == 0x000000, "Member 'UI2DLineActor_Get2DLineRaw::ReturnValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.SetMaskTexture
// 0x0008 (0x0008 - 0x0000)
struct UIPostProcessRenderable_SetMaskTexture final
{
public:
	class UTexture2D*                             NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_SetMaskTexture) == 0x000008, "Wrong alignment on UIPostProcessRenderable_SetMaskTexture");
static_assert(sizeof(UIPostProcessRenderable_SetMaskTexture) == 0x000008, "Wrong size on UIPostProcessRenderable_SetMaskTexture");
static_assert(offsetof(UIPostProcessRenderable_SetMaskTexture, NewValue) == 0x000000, "Member 'UIPostProcessRenderable_SetMaskTexture::NewValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.SetMaskTextureSpriteInfo
// 0x0034 (0x0034 - 0x0000)
struct UIPostProcessRenderable_SetMaskTextureSpriteInfo final
{
public:
	struct FLGUISpriteInfo                        Value;                                             // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_SetMaskTextureSpriteInfo) == 0x000004, "Wrong alignment on UIPostProcessRenderable_SetMaskTextureSpriteInfo");
static_assert(sizeof(UIPostProcessRenderable_SetMaskTextureSpriteInfo) == 0x000034, "Wrong size on UIPostProcessRenderable_SetMaskTextureSpriteInfo");
static_assert(offsetof(UIPostProcessRenderable_SetMaskTextureSpriteInfo, Value) == 0x000000, "Member 'UIPostProcessRenderable_SetMaskTextureSpriteInfo::Value' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.SetMaskTextureType
// 0x0001 (0x0001 - 0x0000)
struct UIPostProcessRenderable_SetMaskTextureType final
{
public:
	EUIPostProcessMaskTextureType                 Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_SetMaskTextureType) == 0x000001, "Wrong alignment on UIPostProcessRenderable_SetMaskTextureType");
static_assert(sizeof(UIPostProcessRenderable_SetMaskTextureType) == 0x000001, "Wrong size on UIPostProcessRenderable_SetMaskTextureType");
static_assert(offsetof(UIPostProcessRenderable_SetMaskTextureType, Value) == 0x000000, "Member 'UIPostProcessRenderable_SetMaskTextureType::Value' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.SetMaskTextureUVRect
// 0x0020 (0x0020 - 0x0000)
struct UIPostProcessRenderable_SetMaskTextureUVRect final
{
public:
	struct FVector4                               Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_SetMaskTextureUVRect) == 0x000010, "Wrong alignment on UIPostProcessRenderable_SetMaskTextureUVRect");
static_assert(sizeof(UIPostProcessRenderable_SetMaskTextureUVRect) == 0x000020, "Wrong size on UIPostProcessRenderable_SetMaskTextureUVRect");
static_assert(offsetof(UIPostProcessRenderable_SetMaskTextureUVRect, Value) == 0x000000, "Member 'UIPostProcessRenderable_SetMaskTextureUVRect::Value' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.GetMaskTexture
// 0x0008 (0x0008 - 0x0000)
struct UIPostProcessRenderable_GetMaskTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_GetMaskTexture) == 0x000008, "Wrong alignment on UIPostProcessRenderable_GetMaskTexture");
static_assert(sizeof(UIPostProcessRenderable_GetMaskTexture) == 0x000008, "Wrong size on UIPostProcessRenderable_GetMaskTexture");
static_assert(offsetof(UIPostProcessRenderable_GetMaskTexture, ReturnValue) == 0x000000, "Member 'UIPostProcessRenderable_GetMaskTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.GetMaskTextureSpriteInfo
// 0x0034 (0x0034 - 0x0000)
struct UIPostProcessRenderable_GetMaskTextureSpriteInfo final
{
public:
	struct FLGUISpriteInfo                        ReturnValue;                                       // 0x0000(0x0034)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_GetMaskTextureSpriteInfo) == 0x000004, "Wrong alignment on UIPostProcessRenderable_GetMaskTextureSpriteInfo");
static_assert(sizeof(UIPostProcessRenderable_GetMaskTextureSpriteInfo) == 0x000034, "Wrong size on UIPostProcessRenderable_GetMaskTextureSpriteInfo");
static_assert(offsetof(UIPostProcessRenderable_GetMaskTextureSpriteInfo, ReturnValue) == 0x000000, "Member 'UIPostProcessRenderable_GetMaskTextureSpriteInfo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.GetMaskTextureType
// 0x0001 (0x0001 - 0x0000)
struct UIPostProcessRenderable_GetMaskTextureType final
{
public:
	EUIPostProcessMaskTextureType                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_GetMaskTextureType) == 0x000001, "Wrong alignment on UIPostProcessRenderable_GetMaskTextureType");
static_assert(sizeof(UIPostProcessRenderable_GetMaskTextureType) == 0x000001, "Wrong size on UIPostProcessRenderable_GetMaskTextureType");
static_assert(offsetof(UIPostProcessRenderable_GetMaskTextureType, ReturnValue) == 0x000000, "Member 'UIPostProcessRenderable_GetMaskTextureType::ReturnValue' has a wrong offset!");

// Function LGUI.UIPostProcessRenderable.GetMaskTextureUVRect
// 0x0020 (0x0020 - 0x0000)
struct UIPostProcessRenderable_GetMaskTextureUVRect final
{
public:
	struct FVector4                               ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPostProcessRenderable_GetMaskTextureUVRect) == 0x000010, "Wrong alignment on UIPostProcessRenderable_GetMaskTextureUVRect");
static_assert(sizeof(UIPostProcessRenderable_GetMaskTextureUVRect) == 0x000020, "Wrong size on UIPostProcessRenderable_GetMaskTextureUVRect");
static_assert(offsetof(UIPostProcessRenderable_GetMaskTextureUVRect, ReturnValue) == 0x000000, "Member 'UIPostProcessRenderable_GetMaskTextureUVRect::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetApplyAlphaToBlur
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundBlur_SetApplyAlphaToBlur final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetApplyAlphaToBlur) == 0x000001, "Wrong alignment on UIBackgroundBlur_SetApplyAlphaToBlur");
static_assert(sizeof(UIBackgroundBlur_SetApplyAlphaToBlur) == 0x000001, "Wrong size on UIBackgroundBlur_SetApplyAlphaToBlur");
static_assert(offsetof(UIBackgroundBlur_SetApplyAlphaToBlur, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetApplyAlphaToBlur::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetBlurStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_SetBlurStrength final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetBlurStrength) == 0x000004, "Wrong alignment on UIBackgroundBlur_SetBlurStrength");
static_assert(sizeof(UIBackgroundBlur_SetBlurStrength) == 0x000004, "Wrong size on UIBackgroundBlur_SetBlurStrength");
static_assert(offsetof(UIBackgroundBlur_SetBlurStrength, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetBlurStrength::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetMaxDownSampleLevel
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_SetMaxDownSampleLevel final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetMaxDownSampleLevel) == 0x000004, "Wrong alignment on UIBackgroundBlur_SetMaxDownSampleLevel");
static_assert(sizeof(UIBackgroundBlur_SetMaxDownSampleLevel) == 0x000004, "Wrong size on UIBackgroundBlur_SetMaxDownSampleLevel");
static_assert(offsetof(UIBackgroundBlur_SetMaxDownSampleLevel, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetMaxDownSampleLevel::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.SetStrengthTexture
// 0x0008 (0x0008 - 0x0000)
struct UIBackgroundBlur_SetStrengthTexture final
{
public:
	class UTexture2D*                             NewValue;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_SetStrengthTexture) == 0x000008, "Wrong alignment on UIBackgroundBlur_SetStrengthTexture");
static_assert(sizeof(UIBackgroundBlur_SetStrengthTexture) == 0x000008, "Wrong size on UIBackgroundBlur_SetStrengthTexture");
static_assert(offsetof(UIBackgroundBlur_SetStrengthTexture, NewValue) == 0x000000, "Member 'UIBackgroundBlur_SetStrengthTexture::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetApplyAlphaToBlur
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundBlur_GetApplyAlphaToBlur final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetApplyAlphaToBlur) == 0x000001, "Wrong alignment on UIBackgroundBlur_GetApplyAlphaToBlur");
static_assert(sizeof(UIBackgroundBlur_GetApplyAlphaToBlur) == 0x000001, "Wrong size on UIBackgroundBlur_GetApplyAlphaToBlur");
static_assert(offsetof(UIBackgroundBlur_GetApplyAlphaToBlur, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetApplyAlphaToBlur::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetBlurStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_GetBlurStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetBlurStrength) == 0x000004, "Wrong alignment on UIBackgroundBlur_GetBlurStrength");
static_assert(sizeof(UIBackgroundBlur_GetBlurStrength) == 0x000004, "Wrong size on UIBackgroundBlur_GetBlurStrength");
static_assert(offsetof(UIBackgroundBlur_GetBlurStrength, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetBlurStrength::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetMaxDownSampleLevel
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundBlur_GetMaxDownSampleLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetMaxDownSampleLevel) == 0x000004, "Wrong alignment on UIBackgroundBlur_GetMaxDownSampleLevel");
static_assert(sizeof(UIBackgroundBlur_GetMaxDownSampleLevel) == 0x000004, "Wrong size on UIBackgroundBlur_GetMaxDownSampleLevel");
static_assert(offsetof(UIBackgroundBlur_GetMaxDownSampleLevel, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetMaxDownSampleLevel::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlur.GetStrengthTexture
// 0x0008 (0x0008 - 0x0000)
struct UIBackgroundBlur_GetStrengthTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlur_GetStrengthTexture) == 0x000008, "Wrong alignment on UIBackgroundBlur_GetStrengthTexture");
static_assert(sizeof(UIBackgroundBlur_GetStrengthTexture) == 0x000008, "Wrong size on UIBackgroundBlur_GetStrengthTexture");
static_assert(offsetof(UIBackgroundBlur_GetStrengthTexture, ReturnValue) == 0x000000, "Member 'UIBackgroundBlur_GetStrengthTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundBlurActor.GetUIBackgroundBlur
// 0x0008 (0x0008 - 0x0000)
struct UIBackgroundBlurActor_GetUIBackgroundBlur final
{
public:
	class UUIBackgroundBlur*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundBlurActor_GetUIBackgroundBlur) == 0x000008, "Wrong alignment on UIBackgroundBlurActor_GetUIBackgroundBlur");
static_assert(sizeof(UIBackgroundBlurActor_GetUIBackgroundBlur) == 0x000008, "Wrong size on UIBackgroundBlurActor_GetUIBackgroundBlur");
static_assert(offsetof(UIBackgroundBlurActor_GetUIBackgroundBlur, ReturnValue) == 0x000000, "Member 'UIBackgroundBlurActor_GetUIBackgroundBlur::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.SetApplyAlphaToStrength
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundPixelate_SetApplyAlphaToStrength final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_SetApplyAlphaToStrength) == 0x000001, "Wrong alignment on UIBackgroundPixelate_SetApplyAlphaToStrength");
static_assert(sizeof(UIBackgroundPixelate_SetApplyAlphaToStrength) == 0x000001, "Wrong size on UIBackgroundPixelate_SetApplyAlphaToStrength");
static_assert(offsetof(UIBackgroundPixelate_SetApplyAlphaToStrength, NewValue) == 0x000000, "Member 'UIBackgroundPixelate_SetApplyAlphaToStrength::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.SetPixelateStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundPixelate_SetPixelateStrength final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_SetPixelateStrength) == 0x000004, "Wrong alignment on UIBackgroundPixelate_SetPixelateStrength");
static_assert(sizeof(UIBackgroundPixelate_SetPixelateStrength) == 0x000004, "Wrong size on UIBackgroundPixelate_SetPixelateStrength");
static_assert(offsetof(UIBackgroundPixelate_SetPixelateStrength, NewValue) == 0x000000, "Member 'UIBackgroundPixelate_SetPixelateStrength::NewValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.GetApplyAlphaToStrength
// 0x0001 (0x0001 - 0x0000)
struct UIBackgroundPixelate_GetApplyAlphaToStrength final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_GetApplyAlphaToStrength) == 0x000001, "Wrong alignment on UIBackgroundPixelate_GetApplyAlphaToStrength");
static_assert(sizeof(UIBackgroundPixelate_GetApplyAlphaToStrength) == 0x000001, "Wrong size on UIBackgroundPixelate_GetApplyAlphaToStrength");
static_assert(offsetof(UIBackgroundPixelate_GetApplyAlphaToStrength, ReturnValue) == 0x000000, "Member 'UIBackgroundPixelate_GetApplyAlphaToStrength::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelate.GetPixelateStrength
// 0x0004 (0x0004 - 0x0000)
struct UIBackgroundPixelate_GetPixelateStrength final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelate_GetPixelateStrength) == 0x000004, "Wrong alignment on UIBackgroundPixelate_GetPixelateStrength");
static_assert(sizeof(UIBackgroundPixelate_GetPixelateStrength) == 0x000004, "Wrong size on UIBackgroundPixelate_GetPixelateStrength");
static_assert(offsetof(UIBackgroundPixelate_GetPixelateStrength, ReturnValue) == 0x000000, "Member 'UIBackgroundPixelate_GetPixelateStrength::ReturnValue' has a wrong offset!");

// Function LGUI.UIBackgroundPixelateActor.GetUIBackgroundPixelate
// 0x0008 (0x0008 - 0x0000)
struct UIBackgroundPixelateActor_GetUIBackgroundPixelate final
{
public:
	class UUIBackgroundPixelate*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIBackgroundPixelateActor_GetUIBackgroundPixelate) == 0x000008, "Wrong alignment on UIBackgroundPixelateActor_GetUIBackgroundPixelate");
static_assert(sizeof(UIBackgroundPixelateActor_GetUIBackgroundPixelate) == 0x000008, "Wrong size on UIBackgroundPixelateActor_GetUIBackgroundPixelate");
static_assert(offsetof(UIBackgroundPixelateActor_GetUIBackgroundPixelate, ReturnValue) == 0x000000, "Member 'UIBackgroundPixelateActor_GetUIBackgroundPixelate::ReturnValue' has a wrong offset!");

// Function LGUI.UIRenderableCustomRaycast.GetRaycastPixelFromUIBatchMeshRenderable
// 0x0088 (0x0088 - 0x0000)
struct UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable final
{
public:
	class UUIBatchMeshRenderable*                 InUIRenderable;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocalSpaceRayStart;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocalSpaceRayEnd;                                // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              OutUV;                                             // 0x0038(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OutPixel;                                          // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutHitPoint;                                       // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitNormal;                                      // 0x0068(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable) == 0x000008, "Wrong alignment on UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable");
static_assert(sizeof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable) == 0x000088, "Wrong size on UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, InUIRenderable) == 0x000000, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::InUIRenderable' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, InLocalSpaceRayStart) == 0x000008, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::InLocalSpaceRayStart' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, InLocalSpaceRayEnd) == 0x000020, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::InLocalSpaceRayEnd' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, OutUV) == 0x000038, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::OutUV' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, OutPixel) == 0x000048, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::OutPixel' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, OutHitPoint) == 0x000050, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::OutHitPoint' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, OutHitNormal) == 0x000068, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::OutHitNormal' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable, ReturnValue) == 0x000080, "Member 'UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable::ReturnValue' has a wrong offset!");

// Function LGUI.UIRenderableCustomRaycast.ReceiveRaycast
// 0x0070 (0x0070 - 0x0000)
struct UIRenderableCustomRaycast_ReceiveRaycast final
{
public:
	class UUIBaseRenderable*                      InUIRenderable;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocalSpaceRayStart;                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InLocalSpaceRayEnd;                                // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitPoint;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OutHitNormal;                                      // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIRenderableCustomRaycast_ReceiveRaycast) == 0x000008, "Wrong alignment on UIRenderableCustomRaycast_ReceiveRaycast");
static_assert(sizeof(UIRenderableCustomRaycast_ReceiveRaycast) == 0x000070, "Wrong size on UIRenderableCustomRaycast_ReceiveRaycast");
static_assert(offsetof(UIRenderableCustomRaycast_ReceiveRaycast, InUIRenderable) == 0x000000, "Member 'UIRenderableCustomRaycast_ReceiveRaycast::InUIRenderable' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_ReceiveRaycast, InLocalSpaceRayStart) == 0x000008, "Member 'UIRenderableCustomRaycast_ReceiveRaycast::InLocalSpaceRayStart' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_ReceiveRaycast, InLocalSpaceRayEnd) == 0x000020, "Member 'UIRenderableCustomRaycast_ReceiveRaycast::InLocalSpaceRayEnd' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_ReceiveRaycast, OutHitPoint) == 0x000038, "Member 'UIRenderableCustomRaycast_ReceiveRaycast::OutHitPoint' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_ReceiveRaycast, OutHitNormal) == 0x000050, "Member 'UIRenderableCustomRaycast_ReceiveRaycast::OutHitNormal' has a wrong offset!");
static_assert(offsetof(UIRenderableCustomRaycast_ReceiveRaycast, ReturnValue) == 0x000068, "Member 'UIRenderableCustomRaycast_ReceiveRaycast::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetCanNavigateHere
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetCanNavigateHere final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetCanNavigateHere) == 0x000001, "Wrong alignment on UISelectableComponent_SetCanNavigateHere");
static_assert(sizeof(UISelectableComponent_SetCanNavigateHere) == 0x000001, "Wrong size on UISelectableComponent_SetCanNavigateHere");
static_assert(offsetof(UISelectableComponent_SetCanNavigateHere, Value) == 0x000000, "Member 'UISelectableComponent_SetCanNavigateHere::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetDisabledColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetDisabledColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetDisabledColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetDisabledColor");
static_assert(sizeof(UISelectableComponent_SetDisabledColor) == 0x000004, "Wrong size on UISelectableComponent_SetDisabledColor");
static_assert(offsetof(UISelectableComponent_SetDisabledColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetDisabledColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetDisabledSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetDisabledSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetDisabledSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetDisabledSprite");
static_assert(sizeof(UISelectableComponent_SetDisabledSprite) == 0x000008, "Wrong size on UISelectableComponent_SetDisabledSprite");
static_assert(offsetof(UISelectableComponent_SetDisabledSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetDisabledSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetHighlightedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetHighlightedColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetHighlightedColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetHighlightedColor");
static_assert(sizeof(UISelectableComponent_SetHighlightedColor) == 0x000004, "Wrong size on UISelectableComponent_SetHighlightedColor");
static_assert(offsetof(UISelectableComponent_SetHighlightedColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetHighlightedColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetHighlightedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetHighlightedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetHighlightedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetHighlightedSprite");
static_assert(sizeof(UISelectableComponent_SetHighlightedSprite) == 0x000008, "Wrong size on UISelectableComponent_SetHighlightedSprite");
static_assert(offsetof(UISelectableComponent_SetHighlightedSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetHighlightedSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationDown
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationDown final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationDown) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationDown");
static_assert(sizeof(UISelectableComponent_SetNavigationDown) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationDown");
static_assert(offsetof(UISelectableComponent_SetNavigationDown, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationDown::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationDownExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationDownExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationDownExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationDownExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationDownExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationDownExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationDownExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationDownExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationLeft
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationLeft final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationLeft) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationLeft");
static_assert(sizeof(UISelectableComponent_SetNavigationLeft) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationLeft");
static_assert(offsetof(UISelectableComponent_SetNavigationLeft, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationLeft::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationLeftExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationLeftExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationLeftExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationLeftExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationLeftExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationLeftExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationLeftExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationLeftExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationNext
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationNext final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationNext) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationNext");
static_assert(sizeof(UISelectableComponent_SetNavigationNext) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationNext");
static_assert(offsetof(UISelectableComponent_SetNavigationNext, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationNext::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationNextExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationNextExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationNextExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationNextExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationNextExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationNextExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationNextExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationNextExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationPrev
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationPrev final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationPrev) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationPrev");
static_assert(sizeof(UISelectableComponent_SetNavigationPrev) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationPrev");
static_assert(offsetof(UISelectableComponent_SetNavigationPrev, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationPrev::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationPrevExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationPrevExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationPrevExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationPrevExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationPrevExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationPrevExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationPrevExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationPrevExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationRight
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationRight final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationRight) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationRight");
static_assert(sizeof(UISelectableComponent_SetNavigationRight) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationRight");
static_assert(offsetof(UISelectableComponent_SetNavigationRight, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationRight::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationRightExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationRightExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationRightExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationRightExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationRightExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationRightExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationRightExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationRightExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationUp
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetNavigationUp final
{
public:
	EUISelectableNavigationMode                   Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationUp) == 0x000001, "Wrong alignment on UISelectableComponent_SetNavigationUp");
static_assert(sizeof(UISelectableComponent_SetNavigationUp) == 0x000001, "Wrong size on UISelectableComponent_SetNavigationUp");
static_assert(offsetof(UISelectableComponent_SetNavigationUp, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationUp::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNavigationUpExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNavigationUpExplicit final
{
public:
	class UUISelectableComponent*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNavigationUpExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_SetNavigationUpExplicit");
static_assert(sizeof(UISelectableComponent_SetNavigationUpExplicit) == 0x000008, "Wrong size on UISelectableComponent_SetNavigationUpExplicit");
static_assert(offsetof(UISelectableComponent_SetNavigationUpExplicit, Value) == 0x000000, "Member 'UISelectableComponent_SetNavigationUpExplicit::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNormalColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetNormalColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNormalColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetNormalColor");
static_assert(sizeof(UISelectableComponent_SetNormalColor) == 0x000004, "Wrong size on UISelectableComponent_SetNormalColor");
static_assert(offsetof(UISelectableComponent_SetNormalColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetNormalColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetNormalSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetNormalSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetNormalSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetNormalSprite");
static_assert(sizeof(UISelectableComponent_SetNormalSprite) == 0x000008, "Wrong size on UISelectableComponent_SetNormalSprite");
static_assert(offsetof(UISelectableComponent_SetNormalSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetNormalSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetPressedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_SetPressedColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetPressedColor) == 0x000004, "Wrong alignment on UISelectableComponent_SetPressedColor");
static_assert(sizeof(UISelectableComponent_SetPressedColor) == 0x000004, "Wrong size on UISelectableComponent_SetPressedColor");
static_assert(offsetof(UISelectableComponent_SetPressedColor, NewColor) == 0x000000, "Member 'UISelectableComponent_SetPressedColor::NewColor' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetPressedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetPressedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             NewSprite;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetPressedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_SetPressedSprite");
static_assert(sizeof(UISelectableComponent_SetPressedSprite) == 0x000008, "Wrong size on UISelectableComponent_SetPressedSprite");
static_assert(offsetof(UISelectableComponent_SetPressedSprite, NewSprite) == 0x000000, "Member 'UISelectableComponent_SetPressedSprite::NewSprite' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetSelectionState
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_SetSelectionState final
{
public:
	EUISelectableSelectionState                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetSelectionState) == 0x000001, "Wrong alignment on UISelectableComponent_SetSelectionState");
static_assert(sizeof(UISelectableComponent_SetSelectionState) == 0x000001, "Wrong size on UISelectableComponent_SetSelectionState");
static_assert(offsetof(UISelectableComponent_SetSelectionState, NewState) == 0x000000, "Member 'UISelectableComponent_SetSelectionState::NewState' has a wrong offset!");

// Function LGUI.UISelectableComponent.SetTransitionTarget
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_SetTransitionTarget final
{
public:
	class AUIBaseRenderableActor*                 Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_SetTransitionTarget) == 0x000008, "Wrong alignment on UISelectableComponent_SetTransitionTarget");
static_assert(sizeof(UISelectableComponent_SetTransitionTarget) == 0x000008, "Wrong size on UISelectableComponent_SetTransitionTarget");
static_assert(offsetof(UISelectableComponent_SetTransitionTarget, Value) == 0x000000, "Member 'UISelectableComponent_SetTransitionTarget::Value' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetCanNavigateHere
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetCanNavigateHere final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetCanNavigateHere) == 0x000001, "Wrong alignment on UISelectableComponent_GetCanNavigateHere");
static_assert(sizeof(UISelectableComponent_GetCanNavigateHere) == 0x000001, "Wrong size on UISelectableComponent_GetCanNavigateHere");
static_assert(offsetof(UISelectableComponent_GetCanNavigateHere, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetCanNavigateHere::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetDisabledColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetDisabledColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetDisabledColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetDisabledColor");
static_assert(sizeof(UISelectableComponent_GetDisabledColor) == 0x000004, "Wrong size on UISelectableComponent_GetDisabledColor");
static_assert(offsetof(UISelectableComponent_GetDisabledColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetDisabledColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetDisabledSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetDisabledSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetDisabledSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetDisabledSprite");
static_assert(sizeof(UISelectableComponent_GetDisabledSprite) == 0x000008, "Wrong size on UISelectableComponent_GetDisabledSprite");
static_assert(offsetof(UISelectableComponent_GetDisabledSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetDisabledSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetHighlightedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetHighlightedColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetHighlightedColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetHighlightedColor");
static_assert(sizeof(UISelectableComponent_GetHighlightedColor) == 0x000004, "Wrong size on UISelectableComponent_GetHighlightedColor");
static_assert(offsetof(UISelectableComponent_GetHighlightedColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetHighlightedColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetHighlightedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetHighlightedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetHighlightedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetHighlightedSprite");
static_assert(sizeof(UISelectableComponent_GetHighlightedSprite) == 0x000008, "Wrong size on UISelectableComponent_GetHighlightedSprite");
static_assert(offsetof(UISelectableComponent_GetHighlightedSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetHighlightedSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationDown
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationDown final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationDown) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationDown");
static_assert(sizeof(UISelectableComponent_GetNavigationDown) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationDown");
static_assert(offsetof(UISelectableComponent_GetNavigationDown, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationDown::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationDownExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationDownExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationDownExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationDownExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationDownExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationDownExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationDownExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationDownExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationLeft
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationLeft final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationLeft) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationLeft");
static_assert(sizeof(UISelectableComponent_GetNavigationLeft) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationLeft");
static_assert(offsetof(UISelectableComponent_GetNavigationLeft, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationLeft::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationLeftExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationLeftExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationLeftExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationLeftExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationLeftExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationLeftExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationLeftExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationLeftExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationNext
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationNext final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationNext) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationNext");
static_assert(sizeof(UISelectableComponent_GetNavigationNext) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationNext");
static_assert(offsetof(UISelectableComponent_GetNavigationNext, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationNext::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationNextExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationNextExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationNextExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationNextExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationNextExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationNextExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationNextExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationNextExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationPrev
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationPrev final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationPrev) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationPrev");
static_assert(sizeof(UISelectableComponent_GetNavigationPrev) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationPrev");
static_assert(offsetof(UISelectableComponent_GetNavigationPrev, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationPrev::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationPrevExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationPrevExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationPrevExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationPrevExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationPrevExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationPrevExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationPrevExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationPrevExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationRight
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationRight final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationRight) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationRight");
static_assert(sizeof(UISelectableComponent_GetNavigationRight) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationRight");
static_assert(offsetof(UISelectableComponent_GetNavigationRight, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationRight::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationRightExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationRightExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationRightExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationRightExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationRightExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationRightExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationRightExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationRightExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationUp
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetNavigationUp final
{
public:
	EUISelectableNavigationMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationUp) == 0x000001, "Wrong alignment on UISelectableComponent_GetNavigationUp");
static_assert(sizeof(UISelectableComponent_GetNavigationUp) == 0x000001, "Wrong size on UISelectableComponent_GetNavigationUp");
static_assert(offsetof(UISelectableComponent_GetNavigationUp, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationUp::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNavigationUpExplicit
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNavigationUpExplicit final
{
public:
	class UUISelectableComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNavigationUpExplicit) == 0x000008, "Wrong alignment on UISelectableComponent_GetNavigationUpExplicit");
static_assert(sizeof(UISelectableComponent_GetNavigationUpExplicit) == 0x000008, "Wrong size on UISelectableComponent_GetNavigationUpExplicit");
static_assert(offsetof(UISelectableComponent_GetNavigationUpExplicit, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNavigationUpExplicit::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNormalColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetNormalColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNormalColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetNormalColor");
static_assert(sizeof(UISelectableComponent_GetNormalColor) == 0x000004, "Wrong size on UISelectableComponent_GetNormalColor");
static_assert(offsetof(UISelectableComponent_GetNormalColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNormalColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetNormalSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetNormalSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetNormalSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetNormalSprite");
static_assert(sizeof(UISelectableComponent_GetNormalSprite) == 0x000008, "Wrong size on UISelectableComponent_GetNormalSprite");
static_assert(offsetof(UISelectableComponent_GetNormalSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetNormalSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetPressedColor
// 0x0004 (0x0004 - 0x0000)
struct UISelectableComponent_GetPressedColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetPressedColor) == 0x000004, "Wrong alignment on UISelectableComponent_GetPressedColor");
static_assert(sizeof(UISelectableComponent_GetPressedColor) == 0x000004, "Wrong size on UISelectableComponent_GetPressedColor");
static_assert(offsetof(UISelectableComponent_GetPressedColor, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetPressedColor::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetPressedSprite
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetPressedSprite final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetPressedSprite) == 0x000008, "Wrong alignment on UISelectableComponent_GetPressedSprite");
static_assert(sizeof(UISelectableComponent_GetPressedSprite) == 0x000008, "Wrong size on UISelectableComponent_GetPressedSprite");
static_assert(offsetof(UISelectableComponent_GetPressedSprite, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetPressedSprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetSelectionState
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_GetSelectionState final
{
public:
	EUISelectableSelectionState                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetSelectionState) == 0x000001, "Wrong alignment on UISelectableComponent_GetSelectionState");
static_assert(sizeof(UISelectableComponent_GetSelectionState) == 0x000001, "Wrong size on UISelectableComponent_GetSelectionState");
static_assert(offsetof(UISelectableComponent_GetSelectionState, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetSelectionState::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.GetTransitionTarget
// 0x0008 (0x0008 - 0x0000)
struct UISelectableComponent_GetTransitionTarget final
{
public:
	class AUIBaseRenderableActor*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_GetTransitionTarget) == 0x000008, "Wrong alignment on UISelectableComponent_GetTransitionTarget");
static_assert(sizeof(UISelectableComponent_GetTransitionTarget) == 0x000008, "Wrong size on UISelectableComponent_GetTransitionTarget");
static_assert(offsetof(UISelectableComponent_GetTransitionTarget, ReturnValue) == 0x000000, "Member 'UISelectableComponent_GetTransitionTarget::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableComponent.IsInteractable
// 0x0001 (0x0001 - 0x0000)
struct UISelectableComponent_IsInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableComponent_IsInteractable) == 0x000001, "Wrong alignment on UISelectableComponent_IsInteractable");
static_assert(sizeof(UISelectableComponent_IsInteractable) == 0x000001, "Wrong size on UISelectableComponent_IsInteractable");
static_assert(offsetof(UISelectableComponent_IsInteractable, ReturnValue) == 0x000000, "Member 'UISelectableComponent_IsInteractable::ReturnValue' has a wrong offset!");

// Function LGUI.UIButtonComponent.RegisterClickEvent
// 0x0018 (0x0018 - 0x0000)
struct UIButtonComponent_RegisterClickEvent final
{
public:
	TDelegate<void()>                             InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIButtonComponent_RegisterClickEvent) == 0x000008, "Wrong alignment on UIButtonComponent_RegisterClickEvent");
static_assert(sizeof(UIButtonComponent_RegisterClickEvent) == 0x000018, "Wrong size on UIButtonComponent_RegisterClickEvent");
static_assert(offsetof(UIButtonComponent_RegisterClickEvent, InDelegate) == 0x000000, "Member 'UIButtonComponent_RegisterClickEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIButtonComponent_RegisterClickEvent, ReturnValue) == 0x000010, "Member 'UIButtonComponent_RegisterClickEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIButtonComponent.UnregisterClickEvent
// 0x0008 (0x0008 - 0x0000)
struct UIButtonComponent_UnregisterClickEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIButtonComponent_UnregisterClickEvent) == 0x000008, "Wrong alignment on UIButtonComponent_UnregisterClickEvent");
static_assert(sizeof(UIButtonComponent_UnregisterClickEvent) == 0x000008, "Wrong size on UIButtonComponent_UnregisterClickEvent");
static_assert(offsetof(UIButtonComponent_UnregisterClickEvent, InDelegateHandle) == 0x000000, "Member 'UIButtonComponent_UnregisterClickEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UICanvasGroup.AlphaFrom
// 0x0018 (0x0018 - 0x0000)
struct UICanvasGroup_AlphaFrom final
{
public:
	float                                         StartValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_AlphaFrom) == 0x000008, "Wrong alignment on UICanvasGroup_AlphaFrom");
static_assert(sizeof(UICanvasGroup_AlphaFrom) == 0x000018, "Wrong size on UICanvasGroup_AlphaFrom");
static_assert(offsetof(UICanvasGroup_AlphaFrom, StartValue) == 0x000000, "Member 'UICanvasGroup_AlphaFrom::StartValue' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaFrom, Duration) == 0x000004, "Member 'UICanvasGroup_AlphaFrom::Duration' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaFrom, Delay) == 0x000008, "Member 'UICanvasGroup_AlphaFrom::Delay' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaFrom, Ease) == 0x00000C, "Member 'UICanvasGroup_AlphaFrom::Ease' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaFrom, ReturnValue) == 0x000010, "Member 'UICanvasGroup_AlphaFrom::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.AlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UICanvasGroup_AlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_AlphaTo) == 0x000008, "Wrong alignment on UICanvasGroup_AlphaTo");
static_assert(sizeof(UICanvasGroup_AlphaTo) == 0x000018, "Wrong size on UICanvasGroup_AlphaTo");
static_assert(offsetof(UICanvasGroup_AlphaTo, endValue) == 0x000000, "Member 'UICanvasGroup_AlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaTo, Duration) == 0x000004, "Member 'UICanvasGroup_AlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaTo, Delay) == 0x000008, "Member 'UICanvasGroup_AlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaTo, Ease) == 0x00000C, "Member 'UICanvasGroup_AlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UICanvasGroup_AlphaTo, ReturnValue) == 0x000010, "Member 'UICanvasGroup_AlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.SetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UICanvasGroup_SetAlpha final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_SetAlpha) == 0x000004, "Wrong alignment on UICanvasGroup_SetAlpha");
static_assert(sizeof(UICanvasGroup_SetAlpha) == 0x000004, "Wrong size on UICanvasGroup_SetAlpha");
static_assert(offsetof(UICanvasGroup_SetAlpha, Value) == 0x000000, "Member 'UICanvasGroup_SetAlpha::Value' has a wrong offset!");

// Function LGUI.UICanvasGroup.SetIgnoreParentGroup
// 0x0001 (0x0001 - 0x0000)
struct UICanvasGroup_SetIgnoreParentGroup final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_SetIgnoreParentGroup) == 0x000001, "Wrong alignment on UICanvasGroup_SetIgnoreParentGroup");
static_assert(sizeof(UICanvasGroup_SetIgnoreParentGroup) == 0x000001, "Wrong size on UICanvasGroup_SetIgnoreParentGroup");
static_assert(offsetof(UICanvasGroup_SetIgnoreParentGroup, Value) == 0x000000, "Member 'UICanvasGroup_SetIgnoreParentGroup::Value' has a wrong offset!");

// Function LGUI.UICanvasGroup.SetInteractable
// 0x0001 (0x0001 - 0x0000)
struct UICanvasGroup_SetInteractable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_SetInteractable) == 0x000001, "Wrong alignment on UICanvasGroup_SetInteractable");
static_assert(sizeof(UICanvasGroup_SetInteractable) == 0x000001, "Wrong size on UICanvasGroup_SetInteractable");
static_assert(offsetof(UICanvasGroup_SetInteractable, Value) == 0x000000, "Member 'UICanvasGroup_SetInteractable::Value' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetAlpha
// 0x0004 (0x0004 - 0x0000)
struct UICanvasGroup_GetAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetAlpha) == 0x000004, "Wrong alignment on UICanvasGroup_GetAlpha");
static_assert(sizeof(UICanvasGroup_GetAlpha) == 0x000004, "Wrong size on UICanvasGroup_GetAlpha");
static_assert(offsetof(UICanvasGroup_GetAlpha, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetFinalAlpha
// 0x0004 (0x0004 - 0x0000)
struct UICanvasGroup_GetFinalAlpha final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetFinalAlpha) == 0x000004, "Wrong alignment on UICanvasGroup_GetFinalAlpha");
static_assert(sizeof(UICanvasGroup_GetFinalAlpha) == 0x000004, "Wrong size on UICanvasGroup_GetFinalAlpha");
static_assert(offsetof(UICanvasGroup_GetFinalAlpha, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetFinalAlpha::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetFinalInteractable
// 0x0001 (0x0001 - 0x0000)
struct UICanvasGroup_GetFinalInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetFinalInteractable) == 0x000001, "Wrong alignment on UICanvasGroup_GetFinalInteractable");
static_assert(sizeof(UICanvasGroup_GetFinalInteractable) == 0x000001, "Wrong size on UICanvasGroup_GetFinalInteractable");
static_assert(offsetof(UICanvasGroup_GetFinalInteractable, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetFinalInteractable::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetIgnoreParentGroup
// 0x0001 (0x0001 - 0x0000)
struct UICanvasGroup_GetIgnoreParentGroup final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetIgnoreParentGroup) == 0x000001, "Wrong alignment on UICanvasGroup_GetIgnoreParentGroup");
static_assert(sizeof(UICanvasGroup_GetIgnoreParentGroup) == 0x000001, "Wrong size on UICanvasGroup_GetIgnoreParentGroup");
static_assert(offsetof(UICanvasGroup_GetIgnoreParentGroup, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetIgnoreParentGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetInteractable
// 0x0001 (0x0001 - 0x0000)
struct UICanvasGroup_GetInteractable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetInteractable) == 0x000001, "Wrong alignment on UICanvasGroup_GetInteractable");
static_assert(sizeof(UICanvasGroup_GetInteractable) == 0x000001, "Wrong size on UICanvasGroup_GetInteractable");
static_assert(offsetof(UICanvasGroup_GetInteractable, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetInteractable::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetRestrictNavigationArea
// 0x0001 (0x0001 - 0x0000)
struct UICanvasGroup_GetRestrictNavigationArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetRestrictNavigationArea) == 0x000001, "Wrong alignment on UICanvasGroup_GetRestrictNavigationArea");
static_assert(sizeof(UICanvasGroup_GetRestrictNavigationArea) == 0x000001, "Wrong size on UICanvasGroup_GetRestrictNavigationArea");
static_assert(offsetof(UICanvasGroup_GetRestrictNavigationArea, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetRestrictNavigationArea::ReturnValue' has a wrong offset!");

// Function LGUI.UICanvasGroup.GetRestrictNavigationAreaCanvasGroup
// 0x0008 (0x0008 - 0x0000)
struct UICanvasGroup_GetRestrictNavigationAreaCanvasGroup final
{
public:
	const class UUICanvasGroup*                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICanvasGroup_GetRestrictNavigationAreaCanvasGroup) == 0x000008, "Wrong alignment on UICanvasGroup_GetRestrictNavigationAreaCanvasGroup");
static_assert(sizeof(UICanvasGroup_GetRestrictNavigationAreaCanvasGroup) == 0x000008, "Wrong size on UICanvasGroup_GetRestrictNavigationAreaCanvasGroup");
static_assert(offsetof(UICanvasGroup_GetRestrictNavigationAreaCanvasGroup, ReturnValue) == 0x000000, "Member 'UICanvasGroup_GetRestrictNavigationAreaCanvasGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UICustomMesh.SetCustomMesh
// 0x0008 (0x0008 - 0x0000)
struct UICustomMesh_SetCustomMesh final
{
public:
	class ULGUICustomMesh*                        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomMesh_SetCustomMesh) == 0x000008, "Wrong alignment on UICustomMesh_SetCustomMesh");
static_assert(sizeof(UICustomMesh_SetCustomMesh) == 0x000008, "Wrong size on UICustomMesh_SetCustomMesh");
static_assert(offsetof(UICustomMesh_SetCustomMesh, Value) == 0x000000, "Member 'UICustomMesh_SetCustomMesh::Value' has a wrong offset!");

// Function LGUI.UICustomMesh.GetCustomMesh
// 0x0008 (0x0008 - 0x0000)
struct UICustomMesh_GetCustomMesh final
{
public:
	class ULGUICustomMesh*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomMesh_GetCustomMesh) == 0x000008, "Wrong alignment on UICustomMesh_GetCustomMesh");
static_assert(sizeof(UICustomMesh_GetCustomMesh) == 0x000008, "Wrong size on UICustomMesh_GetCustomMesh");
static_assert(offsetof(UICustomMesh_GetCustomMesh, ReturnValue) == 0x000000, "Member 'UICustomMesh_GetCustomMesh::ReturnValue' has a wrong offset!");

// Function LGUI.UICustomMeshActor.GetUICustomMesh
// 0x0008 (0x0008 - 0x0000)
struct UICustomMeshActor_GetUICustomMesh final
{
public:
	class UUICustomMesh*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UICustomMeshActor_GetUICustomMesh) == 0x000008, "Wrong alignment on UICustomMeshActor_GetUICustomMesh");
static_assert(sizeof(UICustomMeshActor_GetUICustomMesh) == 0x000008, "Wrong size on UICustomMeshActor_GetUICustomMesh");
static_assert(offsetof(UICustomMeshActor_GetUICustomMesh, ReturnValue) == 0x000000, "Member 'UICustomMeshActor_GetUICustomMesh::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.AddOptions
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_AddOptions final
{
public:
	TArray<struct FUIDropdownOptionData>          InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_AddOptions) == 0x000008, "Wrong alignment on UIDropdownComponent_AddOptions");
static_assert(sizeof(UIDropdownComponent_AddOptions) == 0x000010, "Wrong size on UIDropdownComponent_AddOptions");
static_assert(offsetof(UIDropdownComponent_AddOptions, InOptions) == 0x000000, "Member 'UIDropdownComponent_AddOptions::InOptions' has a wrong offset!");

// Function LGUI.UIDropdownComponent.RegisterSelectionChangeEvent
// 0x0018 (0x0018 - 0x0000)
struct UIDropdownComponent_RegisterSelectionChangeEvent final
{
public:
	TDelegate<void(int32 InSelectIndex)>          InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_RegisterSelectionChangeEvent) == 0x000008, "Wrong alignment on UIDropdownComponent_RegisterSelectionChangeEvent");
static_assert(sizeof(UIDropdownComponent_RegisterSelectionChangeEvent) == 0x000018, "Wrong size on UIDropdownComponent_RegisterSelectionChangeEvent");
static_assert(offsetof(UIDropdownComponent_RegisterSelectionChangeEvent, InDelegate) == 0x000000, "Member 'UIDropdownComponent_RegisterSelectionChangeEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIDropdownComponent_RegisterSelectionChangeEvent, ReturnValue) == 0x000010, "Member 'UIDropdownComponent_RegisterSelectionChangeEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetHorizontalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetHorizontalPosition final
{
public:
	EUIDropdownHorizontalPosition                 InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetHorizontalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_SetHorizontalPosition");
static_assert(sizeof(UIDropdownComponent_SetHorizontalPosition) == 0x000001, "Wrong size on UIDropdownComponent_SetHorizontalPosition");
static_assert(offsetof(UIDropdownComponent_SetHorizontalPosition, InValue) == 0x000000, "Member 'UIDropdownComponent_SetHorizontalPosition::InValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetItemCustomDataFunction
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_SetItemCustomDataFunction final
{
public:
	TDelegate<void(int32 InItemIndex, class UUIDropdownItemComponent* InItemScript, class AActor* InItemActor)> InFunction; // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetItemCustomDataFunction) == 0x000004, "Wrong alignment on UIDropdownComponent_SetItemCustomDataFunction");
static_assert(sizeof(UIDropdownComponent_SetItemCustomDataFunction) == 0x000010, "Wrong size on UIDropdownComponent_SetItemCustomDataFunction");
static_assert(offsetof(UIDropdownComponent_SetItemCustomDataFunction, InFunction) == 0x000000, "Member 'UIDropdownComponent_SetItemCustomDataFunction::InFunction' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct UIDropdownComponent_SetMaxHeight final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetMaxHeight) == 0x000004, "Wrong alignment on UIDropdownComponent_SetMaxHeight");
static_assert(sizeof(UIDropdownComponent_SetMaxHeight) == 0x000004, "Wrong size on UIDropdownComponent_SetMaxHeight");
static_assert(offsetof(UIDropdownComponent_SetMaxHeight, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetMaxHeight::NewValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetOptions
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_SetOptions final
{
public:
	TArray<struct FUIDropdownOptionData>          InOptions;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetOptions) == 0x000008, "Wrong alignment on UIDropdownComponent_SetOptions");
static_assert(sizeof(UIDropdownComponent_SetOptions) == 0x000010, "Wrong size on UIDropdownComponent_SetOptions");
static_assert(offsetof(UIDropdownComponent_SetOptions, InOptions) == 0x000000, "Member 'UIDropdownComponent_SetOptions::InOptions' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetUseInteractionBlock
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetUseInteractionBlock final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetUseInteractionBlock) == 0x000001, "Wrong alignment on UIDropdownComponent_SetUseInteractionBlock");
static_assert(sizeof(UIDropdownComponent_SetUseInteractionBlock) == 0x000001, "Wrong size on UIDropdownComponent_SetUseInteractionBlock");
static_assert(offsetof(UIDropdownComponent_SetUseInteractionBlock, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetUseInteractionBlock::NewValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownComponent_SetValue final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIDropdownComponent_SetValue) == 0x000004, "Wrong alignment on UIDropdownComponent_SetValue");
static_assert(sizeof(UIDropdownComponent_SetValue) == 0x000008, "Wrong size on UIDropdownComponent_SetValue");
static_assert(offsetof(UIDropdownComponent_SetValue, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetValue::NewValue' has a wrong offset!");
static_assert(offsetof(UIDropdownComponent_SetValue, fireEvent) == 0x000004, "Member 'UIDropdownComponent_SetValue::fireEvent' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetVerticalOverlap
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetVerticalOverlap final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetVerticalOverlap) == 0x000001, "Wrong alignment on UIDropdownComponent_SetVerticalOverlap");
static_assert(sizeof(UIDropdownComponent_SetVerticalOverlap) == 0x000001, "Wrong size on UIDropdownComponent_SetVerticalOverlap");
static_assert(offsetof(UIDropdownComponent_SetVerticalOverlap, NewValue) == 0x000000, "Member 'UIDropdownComponent_SetVerticalOverlap::NewValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.SetVerticalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_SetVerticalPosition final
{
public:
	EUIDropdownVerticalPosition                   InValue;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_SetVerticalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_SetVerticalPosition");
static_assert(sizeof(UIDropdownComponent_SetVerticalPosition) == 0x000001, "Wrong size on UIDropdownComponent_SetVerticalPosition");
static_assert(offsetof(UIDropdownComponent_SetVerticalPosition, InValue) == 0x000000, "Member 'UIDropdownComponent_SetVerticalPosition::InValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.UnregisterSelectionChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownComponent_UnregisterSelectionChangeEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_UnregisterSelectionChangeEvent) == 0x000008, "Wrong alignment on UIDropdownComponent_UnregisterSelectionChangeEvent");
static_assert(sizeof(UIDropdownComponent_UnregisterSelectionChangeEvent) == 0x000008, "Wrong size on UIDropdownComponent_UnregisterSelectionChangeEvent");
static_assert(offsetof(UIDropdownComponent_UnregisterSelectionChangeEvent, InDelegateHandle) == 0x000000, "Member 'UIDropdownComponent_UnregisterSelectionChangeEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetCurrentOption
// 0x0018 (0x0018 - 0x0000)
struct UIDropdownComponent_GetCurrentOption final
{
public:
	struct FUIDropdownOptionData                  ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetCurrentOption) == 0x000008, "Wrong alignment on UIDropdownComponent_GetCurrentOption");
static_assert(sizeof(UIDropdownComponent_GetCurrentOption) == 0x000018, "Wrong size on UIDropdownComponent_GetCurrentOption");
static_assert(offsetof(UIDropdownComponent_GetCurrentOption, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetCurrentOption::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetHorizontalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetHorizontalPosition final
{
public:
	EUIDropdownHorizontalPosition                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetHorizontalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_GetHorizontalPosition");
static_assert(sizeof(UIDropdownComponent_GetHorizontalPosition) == 0x000001, "Wrong size on UIDropdownComponent_GetHorizontalPosition");
static_assert(offsetof(UIDropdownComponent_GetHorizontalPosition, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetHorizontalPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetListRoot
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownComponent_GetListRoot final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetListRoot) == 0x000008, "Wrong alignment on UIDropdownComponent_GetListRoot");
static_assert(sizeof(UIDropdownComponent_GetListRoot) == 0x000008, "Wrong size on UIDropdownComponent_GetListRoot");
static_assert(offsetof(UIDropdownComponent_GetListRoot, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetListRoot::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetMaxHeight
// 0x0004 (0x0004 - 0x0000)
struct UIDropdownComponent_GetMaxHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetMaxHeight) == 0x000004, "Wrong alignment on UIDropdownComponent_GetMaxHeight");
static_assert(sizeof(UIDropdownComponent_GetMaxHeight) == 0x000004, "Wrong size on UIDropdownComponent_GetMaxHeight");
static_assert(offsetof(UIDropdownComponent_GetMaxHeight, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetMaxHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetOption
// 0x0020 (0x0020 - 0x0000)
struct UIDropdownComponent_GetOption final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIDropdownOptionData                  ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetOption) == 0x000008, "Wrong alignment on UIDropdownComponent_GetOption");
static_assert(sizeof(UIDropdownComponent_GetOption) == 0x000020, "Wrong size on UIDropdownComponent_GetOption");
static_assert(offsetof(UIDropdownComponent_GetOption, Index_0) == 0x000000, "Member 'UIDropdownComponent_GetOption::Index_0' has a wrong offset!");
static_assert(offsetof(UIDropdownComponent_GetOption, ReturnValue) == 0x000008, "Member 'UIDropdownComponent_GetOption::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetOptions
// 0x0010 (0x0010 - 0x0000)
struct UIDropdownComponent_GetOptions final
{
public:
	TArray<struct FUIDropdownOptionData>          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetOptions) == 0x000008, "Wrong alignment on UIDropdownComponent_GetOptions");
static_assert(sizeof(UIDropdownComponent_GetOptions) == 0x000010, "Wrong size on UIDropdownComponent_GetOptions");
static_assert(offsetof(UIDropdownComponent_GetOptions, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetOptions::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetUseInteractionBlock
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetUseInteractionBlock final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetUseInteractionBlock) == 0x000001, "Wrong alignment on UIDropdownComponent_GetUseInteractionBlock");
static_assert(sizeof(UIDropdownComponent_GetUseInteractionBlock) == 0x000001, "Wrong size on UIDropdownComponent_GetUseInteractionBlock");
static_assert(offsetof(UIDropdownComponent_GetUseInteractionBlock, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetUseInteractionBlock::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UIDropdownComponent_GetValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetValue) == 0x000004, "Wrong alignment on UIDropdownComponent_GetValue");
static_assert(sizeof(UIDropdownComponent_GetValue) == 0x000004, "Wrong size on UIDropdownComponent_GetValue");
static_assert(offsetof(UIDropdownComponent_GetValue, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetVerticalOverlap
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetVerticalOverlap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetVerticalOverlap) == 0x000001, "Wrong alignment on UIDropdownComponent_GetVerticalOverlap");
static_assert(sizeof(UIDropdownComponent_GetVerticalOverlap) == 0x000001, "Wrong size on UIDropdownComponent_GetVerticalOverlap");
static_assert(offsetof(UIDropdownComponent_GetVerticalOverlap, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetVerticalOverlap::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownComponent.GetVerticalPosition
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownComponent_GetVerticalPosition final
{
public:
	EUIDropdownVerticalPosition                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownComponent_GetVerticalPosition) == 0x000001, "Wrong alignment on UIDropdownComponent_GetVerticalPosition");
static_assert(sizeof(UIDropdownComponent_GetVerticalPosition) == 0x000001, "Wrong size on UIDropdownComponent_GetVerticalPosition");
static_assert(offsetof(UIDropdownComponent_GetVerticalPosition, ReturnValue) == 0x000000, "Member 'UIDropdownComponent_GetVerticalPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownItemComponent.ReceiveInit
// 0x0030 (0x0030 - 0x0000)
struct UIDropdownItemComponent_ReceiveInit final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIDropdownOptionData                  Data;                                              // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnSelectCallback;                                  // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownItemComponent_ReceiveInit) == 0x000008, "Wrong alignment on UIDropdownItemComponent_ReceiveInit");
static_assert(sizeof(UIDropdownItemComponent_ReceiveInit) == 0x000030, "Wrong size on UIDropdownItemComponent_ReceiveInit");
static_assert(offsetof(UIDropdownItemComponent_ReceiveInit, Index_0) == 0x000000, "Member 'UIDropdownItemComponent_ReceiveInit::Index_0' has a wrong offset!");
static_assert(offsetof(UIDropdownItemComponent_ReceiveInit, Data) == 0x000008, "Member 'UIDropdownItemComponent_ReceiveInit::Data' has a wrong offset!");
static_assert(offsetof(UIDropdownItemComponent_ReceiveInit, OnSelectCallback) == 0x000020, "Member 'UIDropdownItemComponent_ReceiveInit::OnSelectCallback' has a wrong offset!");

// Function LGUI.UIDropdownItemComponent.ReceiveSetSelectionState
// 0x0001 (0x0001 - 0x0000)
struct UIDropdownItemComponent_ReceiveSetSelectionState final
{
public:
	bool                                          InSelect;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownItemComponent_ReceiveSetSelectionState) == 0x000001, "Wrong alignment on UIDropdownItemComponent_ReceiveSetSelectionState");
static_assert(sizeof(UIDropdownItemComponent_ReceiveSetSelectionState) == 0x000001, "Wrong size on UIDropdownItemComponent_ReceiveSetSelectionState");
static_assert(offsetof(UIDropdownItemComponent_ReceiveSetSelectionState, InSelect) == 0x000000, "Member 'UIDropdownItemComponent_ReceiveSetSelectionState::InSelect' has a wrong offset!");

// Function LGUI.UIDropdownItemComponent.GetSpriteActor
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownItemComponent_GetSpriteActor final
{
public:
	class AUISpriteActor*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownItemComponent_GetSpriteActor) == 0x000008, "Wrong alignment on UIDropdownItemComponent_GetSpriteActor");
static_assert(sizeof(UIDropdownItemComponent_GetSpriteActor) == 0x000008, "Wrong size on UIDropdownItemComponent_GetSpriteActor");
static_assert(offsetof(UIDropdownItemComponent_GetSpriteActor, ReturnValue) == 0x000000, "Member 'UIDropdownItemComponent_GetSpriteActor::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownItemComponent.GetTextActor
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownItemComponent_GetTextActor final
{
public:
	class AUITextActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownItemComponent_GetTextActor) == 0x000008, "Wrong alignment on UIDropdownItemComponent_GetTextActor");
static_assert(sizeof(UIDropdownItemComponent_GetTextActor) == 0x000008, "Wrong size on UIDropdownItemComponent_GetTextActor");
static_assert(offsetof(UIDropdownItemComponent_GetTextActor, ReturnValue) == 0x000000, "Member 'UIDropdownItemComponent_GetTextActor::ReturnValue' has a wrong offset!");

// Function LGUI.UIDropdownItemComponent.GetToggle
// 0x0008 (0x0008 - 0x0000)
struct UIDropdownItemComponent_GetToggle final
{
public:
	class UUIToggleComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIDropdownItemComponent_GetToggle) == 0x000008, "Wrong alignment on UIDropdownItemComponent_GetToggle");
static_assert(sizeof(UIDropdownItemComponent_GetToggle) == 0x000008, "Wrong size on UIDropdownItemComponent_GetToggle");
static_assert(offsetof(UIDropdownItemComponent_GetToggle, ReturnValue) == 0x000000, "Member 'UIDropdownItemComponent_GetToggle::ReturnValue' has a wrong offset!");

// Function LGUI.UIGeometryModifierBase.ReceiveModifyUIGeometry
// 0x0008 (0x0008 - 0x0000)
struct UIGeometryModifierBase_ReceiveModifyUIGeometry final
{
public:
	class ULGUIGeometryModifierHelper*            InGeometryModifierHelper;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGeometryModifierBase_ReceiveModifyUIGeometry) == 0x000008, "Wrong alignment on UIGeometryModifierBase_ReceiveModifyUIGeometry");
static_assert(sizeof(UIGeometryModifierBase_ReceiveModifyUIGeometry) == 0x000008, "Wrong size on UIGeometryModifierBase_ReceiveModifyUIGeometry");
static_assert(offsetof(UIGeometryModifierBase_ReceiveModifyUIGeometry, InGeometryModifierHelper) == 0x000000, "Member 'UIGeometryModifierBase_ReceiveModifyUIGeometry::InGeometryModifierHelper' has a wrong offset!");

// Function LGUI.UIGeometryModifierBase.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct UIGeometryModifierBase_SetEnable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGeometryModifierBase_SetEnable) == 0x000001, "Wrong alignment on UIGeometryModifierBase_SetEnable");
static_assert(sizeof(UIGeometryModifierBase_SetEnable) == 0x000001, "Wrong size on UIGeometryModifierBase_SetEnable");
static_assert(offsetof(UIGeometryModifierBase_SetEnable, Value) == 0x000000, "Member 'UIGeometryModifierBase_SetEnable::Value' has a wrong offset!");

// Function LGUI.UIGeometryModifierBase.GetEnable
// 0x0001 (0x0001 - 0x0000)
struct UIGeometryModifierBase_GetEnable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGeometryModifierBase_GetEnable) == 0x000001, "Wrong alignment on UIGeometryModifierBase_GetEnable");
static_assert(sizeof(UIGeometryModifierBase_GetEnable) == 0x000001, "Wrong size on UIGeometryModifierBase_GetEnable");
static_assert(offsetof(UIGeometryModifierBase_GetEnable, ReturnValue) == 0x000000, "Member 'UIGeometryModifierBase_GetEnable::ReturnValue' has a wrong offset!");

// Function LGUI.UIGeometryModifierBase.GetExecuteOrder
// 0x0004 (0x0004 - 0x0000)
struct UIGeometryModifierBase_GetExecuteOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGeometryModifierBase_GetExecuteOrder) == 0x000004, "Wrong alignment on UIGeometryModifierBase_GetExecuteOrder");
static_assert(sizeof(UIGeometryModifierBase_GetExecuteOrder) == 0x000004, "Wrong size on UIGeometryModifierBase_GetExecuteOrder");
static_assert(offsetof(UIGeometryModifierBase_GetExecuteOrder, ReturnValue) == 0x000000, "Member 'UIGeometryModifierBase_GetExecuteOrder::ReturnValue' has a wrong offset!");

// Function LGUI.UIGeometryModifierBase.GetRenderableUIItem
// 0x0008 (0x0008 - 0x0000)
struct UIGeometryModifierBase_GetRenderableUIItem final
{
public:
	class UUIBatchMeshRenderable*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGeometryModifierBase_GetRenderableUIItem) == 0x000008, "Wrong alignment on UIGeometryModifierBase_GetRenderableUIItem");
static_assert(sizeof(UIGeometryModifierBase_GetRenderableUIItem) == 0x000008, "Wrong size on UIGeometryModifierBase_GetRenderableUIItem");
static_assert(offsetof(UIGeometryModifierBase_GetRenderableUIItem, ReturnValue) == 0x000000, "Member 'UIGeometryModifierBase_GetRenderableUIItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIGeometryModifierBase.GetUIRenderable
// 0x0008 (0x0008 - 0x0000)
struct UIGeometryModifierBase_GetUIRenderable final
{
public:
	class UUIBatchMeshRenderable*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIGeometryModifierBase_GetUIRenderable) == 0x000008, "Wrong alignment on UIGeometryModifierBase_GetUIRenderable");
static_assert(sizeof(UIGeometryModifierBase_GetUIRenderable) == 0x000008, "Wrong size on UIGeometryModifierBase_GetUIRenderable");
static_assert(offsetof(UIGeometryModifierBase_GetUIRenderable, ReturnValue) == 0x000000, "Member 'UIGeometryModifierBase_GetUIRenderable::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_SetGradientColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetGradientColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_SetGradientColor");
static_assert(sizeof(UIEffectLongShadow_SetGradientColor) == 0x000004, "Wrong size on UIEffectLongShadow_SetGradientColor");
static_assert(offsetof(UIEffectLongShadow_SetGradientColor, NewColor) == 0x000000, "Member 'UIEffectLongShadow_SetGradientColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_SetShadowColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetShadowColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_SetShadowColor");
static_assert(sizeof(UIEffectLongShadow_SetShadowColor) == 0x000004, "Wrong size on UIEffectLongShadow_SetShadowColor");
static_assert(offsetof(UIEffectLongShadow_SetShadowColor, NewColor) == 0x000000, "Member 'UIEffectLongShadow_SetShadowColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetShadowSegment
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_SetShadowSegment final
{
public:
	uint8                                         newSegment;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetShadowSegment) == 0x000001, "Wrong alignment on UIEffectLongShadow_SetShadowSegment");
static_assert(sizeof(UIEffectLongShadow_SetShadowSegment) == 0x000001, "Wrong size on UIEffectLongShadow_SetShadowSegment");
static_assert(offsetof(UIEffectLongShadow_SetShadowSegment, newSegment) == 0x000000, "Member 'UIEffectLongShadow_SetShadowSegment::newSegment' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetShadowSize
// 0x0018 (0x0018 - 0x0000)
struct UIEffectLongShadow_SetShadowSize final
{
public:
	struct FVector                                NewSize;                                           // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetShadowSize) == 0x000008, "Wrong alignment on UIEffectLongShadow_SetShadowSize");
static_assert(sizeof(UIEffectLongShadow_SetShadowSize) == 0x000018, "Wrong size on UIEffectLongShadow_SetShadowSize");
static_assert(offsetof(UIEffectLongShadow_SetShadowSize, NewSize) == 0x000000, "Member 'UIEffectLongShadow_SetShadowSize::NewSize' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.SetUseGradientColor
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_SetUseGradientColor final
{
public:
	bool                                          newBool;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_SetUseGradientColor) == 0x000001, "Wrong alignment on UIEffectLongShadow_SetUseGradientColor");
static_assert(sizeof(UIEffectLongShadow_SetUseGradientColor) == 0x000001, "Wrong size on UIEffectLongShadow_SetUseGradientColor");
static_assert(offsetof(UIEffectLongShadow_SetUseGradientColor, newBool) == 0x000000, "Member 'UIEffectLongShadow_SetUseGradientColor::newBool' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_GetGradientColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetGradientColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_GetGradientColor");
static_assert(sizeof(UIEffectLongShadow_GetGradientColor) == 0x000004, "Wrong size on UIEffectLongShadow_GetGradientColor");
static_assert(offsetof(UIEffectLongShadow_GetGradientColor, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetGradientColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectLongShadow_GetShadowColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetShadowColor) == 0x000004, "Wrong alignment on UIEffectLongShadow_GetShadowColor");
static_assert(sizeof(UIEffectLongShadow_GetShadowColor) == 0x000004, "Wrong size on UIEffectLongShadow_GetShadowColor");
static_assert(offsetof(UIEffectLongShadow_GetShadowColor, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetShadowColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetShadowSegments
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_GetShadowSegments final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetShadowSegments) == 0x000001, "Wrong alignment on UIEffectLongShadow_GetShadowSegments");
static_assert(sizeof(UIEffectLongShadow_GetShadowSegments) == 0x000001, "Wrong size on UIEffectLongShadow_GetShadowSegments");
static_assert(offsetof(UIEffectLongShadow_GetShadowSegments, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetShadowSegments::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetShadowSize
// 0x0018 (0x0018 - 0x0000)
struct UIEffectLongShadow_GetShadowSize final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetShadowSize) == 0x000008, "Wrong alignment on UIEffectLongShadow_GetShadowSize");
static_assert(sizeof(UIEffectLongShadow_GetShadowSize) == 0x000018, "Wrong size on UIEffectLongShadow_GetShadowSize");
static_assert(offsetof(UIEffectLongShadow_GetShadowSize, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetShadowSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectLongShadow.GetUseGradientColor
// 0x0001 (0x0001 - 0x0000)
struct UIEffectLongShadow_GetUseGradientColor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectLongShadow_GetUseGradientColor) == 0x000001, "Wrong alignment on UIEffectLongShadow_GetUseGradientColor");
static_assert(sizeof(UIEffectLongShadow_GetUseGradientColor) == 0x000001, "Wrong size on UIEffectLongShadow_GetUseGradientColor");
static_assert(offsetof(UIEffectLongShadow_GetUseGradientColor, ReturnValue) == 0x000000, "Member 'UIEffectLongShadow_GetUseGradientColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.SetOutlineColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectOutline_SetOutlineColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_SetOutlineColor) == 0x000004, "Wrong alignment on UIEffectOutline_SetOutlineColor");
static_assert(sizeof(UIEffectOutline_SetOutlineColor) == 0x000004, "Wrong size on UIEffectOutline_SetOutlineColor");
static_assert(offsetof(UIEffectOutline_SetOutlineColor, NewColor) == 0x000000, "Member 'UIEffectOutline_SetOutlineColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectOutline.SetOutlineSize
// 0x0010 (0x0010 - 0x0000)
struct UIEffectOutline_SetOutlineSize final
{
public:
	struct FVector2D                              NewSize;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_SetOutlineSize) == 0x000008, "Wrong alignment on UIEffectOutline_SetOutlineSize");
static_assert(sizeof(UIEffectOutline_SetOutlineSize) == 0x000010, "Wrong size on UIEffectOutline_SetOutlineSize");
static_assert(offsetof(UIEffectOutline_SetOutlineSize, NewSize) == 0x000000, "Member 'UIEffectOutline_SetOutlineSize::NewSize' has a wrong offset!");

// Function LGUI.UIEffectOutline.SetUse8Direction
// 0x0001 (0x0001 - 0x0000)
struct UIEffectOutline_SetUse8Direction final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_SetUse8Direction) == 0x000001, "Wrong alignment on UIEffectOutline_SetUse8Direction");
static_assert(sizeof(UIEffectOutline_SetUse8Direction) == 0x000001, "Wrong size on UIEffectOutline_SetUse8Direction");
static_assert(offsetof(UIEffectOutline_SetUse8Direction, NewValue) == 0x000000, "Member 'UIEffectOutline_SetUse8Direction::NewValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.GetOutlineColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectOutline_GetOutlineColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_GetOutlineColor) == 0x000004, "Wrong alignment on UIEffectOutline_GetOutlineColor");
static_assert(sizeof(UIEffectOutline_GetOutlineColor) == 0x000004, "Wrong size on UIEffectOutline_GetOutlineColor");
static_assert(offsetof(UIEffectOutline_GetOutlineColor, ReturnValue) == 0x000000, "Member 'UIEffectOutline_GetOutlineColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.GetOutlineSize
// 0x0010 (0x0010 - 0x0000)
struct UIEffectOutline_GetOutlineSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_GetOutlineSize) == 0x000008, "Wrong alignment on UIEffectOutline_GetOutlineSize");
static_assert(sizeof(UIEffectOutline_GetOutlineSize) == 0x000010, "Wrong size on UIEffectOutline_GetOutlineSize");
static_assert(offsetof(UIEffectOutline_GetOutlineSize, ReturnValue) == 0x000000, "Member 'UIEffectOutline_GetOutlineSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectOutline.GetUse8Direction
// 0x0001 (0x0001 - 0x0000)
struct UIEffectOutline_GetUse8Direction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectOutline_GetUse8Direction) == 0x000001, "Wrong alignment on UIEffectOutline_GetUse8Direction");
static_assert(sizeof(UIEffectOutline_GetUse8Direction) == 0x000001, "Wrong size on UIEffectOutline_GetUse8Direction");
static_assert(offsetof(UIEffectOutline_GetUse8Direction, ReturnValue) == 0x000000, "Member 'UIEffectOutline_GetUse8Direction::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectShadow.SetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectShadow_SetShadowColor final
{
public:
	struct FColor                                 NewColor;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_SetShadowColor) == 0x000004, "Wrong alignment on UIEffectShadow_SetShadowColor");
static_assert(sizeof(UIEffectShadow_SetShadowColor) == 0x000004, "Wrong size on UIEffectShadow_SetShadowColor");
static_assert(offsetof(UIEffectShadow_SetShadowColor, NewColor) == 0x000000, "Member 'UIEffectShadow_SetShadowColor::NewColor' has a wrong offset!");

// Function LGUI.UIEffectShadow.SetShadowOffset
// 0x0010 (0x0010 - 0x0000)
struct UIEffectShadow_SetShadowOffset final
{
public:
	struct FVector2D                              newOffset;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_SetShadowOffset) == 0x000008, "Wrong alignment on UIEffectShadow_SetShadowOffset");
static_assert(sizeof(UIEffectShadow_SetShadowOffset) == 0x000010, "Wrong size on UIEffectShadow_SetShadowOffset");
static_assert(offsetof(UIEffectShadow_SetShadowOffset, newOffset) == 0x000000, "Member 'UIEffectShadow_SetShadowOffset::newOffset' has a wrong offset!");

// Function LGUI.UIEffectShadow.GetShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectShadow_GetShadowColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_GetShadowColor) == 0x000004, "Wrong alignment on UIEffectShadow_GetShadowColor");
static_assert(sizeof(UIEffectShadow_GetShadowColor) == 0x000004, "Wrong size on UIEffectShadow_GetShadowColor");
static_assert(offsetof(UIEffectShadow_GetShadowColor, ReturnValue) == 0x000000, "Member 'UIEffectShadow_GetShadowColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectShadow.GetShadowOffset
// 0x0010 (0x0010 - 0x0000)
struct UIEffectShadow_GetShadowOffset final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectShadow_GetShadowOffset) == 0x000008, "Wrong alignment on UIEffectShadow_GetShadowOffset");
static_assert(sizeof(UIEffectShadow_GetShadowOffset) == 0x000010, "Wrong size on UIEffectShadow_GetShadowOffset");
static_assert(offsetof(UIEffectShadow_GetShadowOffset, ReturnValue) == 0x000000, "Member 'UIEffectShadow_GetShadowOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetProperties
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_SetProperties final
{
public:
	TArray<class UUIEffectTextAnimation_Property*> Value;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetProperties) == 0x000008, "Wrong alignment on UIEffectTextAnimation_SetProperties");
static_assert(sizeof(UIEffectTextAnimation_SetProperties) == 0x000010, "Wrong size on UIEffectTextAnimation_SetProperties");
static_assert(offsetof(UIEffectTextAnimation_SetProperties, Value) == 0x000000, "Member 'UIEffectTextAnimation_SetProperties::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetProperty
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_SetProperty final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIEffectTextAnimation_Property*        Value;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetProperty) == 0x000008, "Wrong alignment on UIEffectTextAnimation_SetProperty");
static_assert(sizeof(UIEffectTextAnimation_SetProperty) == 0x000010, "Wrong size on UIEffectTextAnimation_SetProperty");
static_assert(offsetof(UIEffectTextAnimation_SetProperty, Index_0) == 0x000000, "Member 'UIEffectTextAnimation_SetProperty::Index_0' has a wrong offset!");
static_assert(offsetof(UIEffectTextAnimation_SetProperty, Value) == 0x000008, "Member 'UIEffectTextAnimation_SetProperty::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetSelector
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_SetSelector final
{
public:
	class UUIEffectTextAnimation_Selector*        Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetSelector) == 0x000008, "Wrong alignment on UIEffectTextAnimation_SetSelector");
static_assert(sizeof(UIEffectTextAnimation_SetSelector) == 0x000008, "Wrong size on UIEffectTextAnimation_SetSelector");
static_assert(offsetof(UIEffectTextAnimation_SetSelector, Value) == 0x000000, "Member 'UIEffectTextAnimation_SetSelector::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.SetSelectorOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_SetSelectorOffset final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_SetSelectorOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_SetSelectorOffset");
static_assert(sizeof(UIEffectTextAnimation_SetSelectorOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_SetSelectorOffset");
static_assert(offsetof(UIEffectTextAnimation_SetSelectorOffset, Value) == 0x000000, "Member 'UIEffectTextAnimation_SetSelectorOffset::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetProperties
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_GetProperties final
{
public:
	TArray<class UUIEffectTextAnimation_Property*> ReturnValue;                                      // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetProperties) == 0x000008, "Wrong alignment on UIEffectTextAnimation_GetProperties");
static_assert(sizeof(UIEffectTextAnimation_GetProperties) == 0x000010, "Wrong size on UIEffectTextAnimation_GetProperties");
static_assert(offsetof(UIEffectTextAnimation_GetProperties, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_GetProperties::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetProperty
// 0x0010 (0x0010 - 0x0000)
struct UIEffectTextAnimation_GetProperty final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIEffectTextAnimation_Property*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetProperty) == 0x000008, "Wrong alignment on UIEffectTextAnimation_GetProperty");
static_assert(sizeof(UIEffectTextAnimation_GetProperty) == 0x000010, "Wrong size on UIEffectTextAnimation_GetProperty");
static_assert(offsetof(UIEffectTextAnimation_GetProperty, Index_0) == 0x000000, "Member 'UIEffectTextAnimation_GetProperty::Index_0' has a wrong offset!");
static_assert(offsetof(UIEffectTextAnimation_GetProperty, ReturnValue) == 0x000008, "Member 'UIEffectTextAnimation_GetProperty::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetSelector
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_GetSelector final
{
public:
	class UUIEffectTextAnimation_Selector*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetSelector) == 0x000008, "Wrong alignment on UIEffectTextAnimation_GetSelector");
static_assert(sizeof(UIEffectTextAnimation_GetSelector) == 0x000008, "Wrong size on UIEffectTextAnimation_GetSelector");
static_assert(offsetof(UIEffectTextAnimation_GetSelector, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_GetSelector::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation.GetSelectorOffset
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_GetSelectorOffset final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_GetSelectorOffset) == 0x000004, "Wrong alignment on UIEffectTextAnimation_GetSelectorOffset");
static_assert(sizeof(UIEffectTextAnimation_GetSelectorOffset) == 0x000004, "Wrong size on UIEffectTextAnimation_GetSelectorOffset");
static_assert(offsetof(UIEffectTextAnimation_GetSelectorOffset, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_GetSelectorOffset::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionProperty.SetPosition
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionProperty_SetPosition final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionProperty_SetPosition) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionProperty_SetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionProperty_SetPosition) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionProperty_SetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionProperty_SetPosition, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionProperty_SetPosition::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionProperty.GetPosition
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionProperty_GetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionProperty_GetPosition) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionProperty_GetPosition");
static_assert(sizeof(UIEffectTextAnimation_PositionProperty_GetPosition) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionProperty_GetPosition");
static_assert(offsetof(UIEffectTextAnimation_PositionProperty_GetPosition, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionProperty_GetPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMax
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_SetMax final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_SetMax) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_SetMax) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMin
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_SetMin final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_SetMin) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_SetMin) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMax
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_GetMax final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_GetMax) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_GetMax) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMin
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_GetMin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_GetMin) == 0x000008, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_GetMin) == 0x000018, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_PositionRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_PositionRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_PositionRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_PositionRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_PositionRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_PositionRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_PositionRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationProperty.SetRotator
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationProperty_SetRotator final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationProperty_SetRotator) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationProperty_SetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationProperty_SetRotator) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationProperty_SetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationProperty_SetRotator, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationProperty_SetRotator::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationProperty.GetRotator
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationProperty_GetRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationProperty_GetRotator) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationProperty_GetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationProperty_GetRotator) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationProperty_GetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationProperty_GetRotator, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationProperty_GetRotator::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMax
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_SetMax final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_SetMax) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_SetMax) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMin
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_SetMin final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_SetMin) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_SetMin) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMax
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_GetMax final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_GetMax) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_GetMax) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMin
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_GetMin final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_GetMin) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_GetMin) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RotationRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RotationRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_RotationRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_RotationRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_RotationRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMax
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_SetMax final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_SetMax) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_SetMax");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_SetMax) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_SetMax");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_SetMax, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_SetMax::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMin
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_SetMin final
{
public:
	struct FVector                                Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_SetMin) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_SetMin");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_SetMin) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_SetMin");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_SetMin, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_SetMin::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_SetSeed final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_SetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_SetSeed");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_SetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_SetSeed");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_SetSeed, Value) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_SetSeed::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMax
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_GetMax final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_GetMax) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_GetMax");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_GetMax) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_GetMax");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_GetMax, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_GetMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMin
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_GetMin final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_GetMin) == 0x000008, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_GetMin");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_GetMin) == 0x000018, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_GetMin");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_GetMin, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_GetMin::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetSeed
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ScaleRandomProperty_GetSeed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ScaleRandomProperty_GetSeed) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ScaleRandomProperty_GetSeed");
static_assert(sizeof(UIEffectTextAnimation_ScaleRandomProperty_GetSeed) == 0x000004, "Wrong size on UIEffectTextAnimation_ScaleRandomProperty_GetSeed");
static_assert(offsetof(UIEffectTextAnimation_ScaleRandomProperty_GetSeed, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ScaleRandomProperty_GetSeed::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.SetColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_SetColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_SetColor) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorProperty_SetColor");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_SetColor) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorProperty_SetColor");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_SetColor, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_SetColor::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.SetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_SetUseHSV final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_SetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorProperty_SetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_SetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorProperty_SetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_SetUseHSV, Value) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_SetUseHSV::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.GetColor
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_GetColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_GetColor) == 0x000004, "Wrong alignment on UIEffectTextAnimation_ColorProperty_GetColor");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_GetColor) == 0x000004, "Wrong size on UIEffectTextAnimation_ColorProperty_GetColor");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_GetColor, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_GetColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_ColorProperty.GetUseHSV
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_ColorProperty_GetUseHSV final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_ColorProperty_GetUseHSV) == 0x000001, "Wrong alignment on UIEffectTextAnimation_ColorProperty_GetUseHSV");
static_assert(sizeof(UIEffectTextAnimation_ColorProperty_GetUseHSV) == 0x000001, "Wrong size on UIEffectTextAnimation_ColorProperty_GetUseHSV");
static_assert(offsetof(UIEffectTextAnimation_ColorProperty_GetUseHSV, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_ColorProperty_GetUseHSV::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.SetRotator
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationWaveProperty_SetRotator final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationWaveProperty_SetRotator) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationWaveProperty_SetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationWaveProperty_SetRotator) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationWaveProperty_SetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationWaveProperty_SetRotator, Value) == 0x000000, "Member 'UIEffectTextAnimation_RotationWaveProperty_SetRotator::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.GetRotator
// 0x0018 (0x0018 - 0x0000)
struct UIEffectTextAnimation_RotationWaveProperty_GetRotator final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RotationWaveProperty_GetRotator) == 0x000008, "Wrong alignment on UIEffectTextAnimation_RotationWaveProperty_GetRotator");
static_assert(sizeof(UIEffectTextAnimation_RotationWaveProperty_GetRotator) == 0x000018, "Wrong size on UIEffectTextAnimation_RotationWaveProperty_GetRotator");
static_assert(offsetof(UIEffectTextAnimation_RotationWaveProperty_GetRotator, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RotationWaveProperty_GetRotator::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetEnd final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetEnd");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_SetEnd");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetEnd, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetEnd::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetFlipDirection final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RangeSelector_SetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetFlipDirection, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetFlipDirection::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetRange");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_SetRange");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetRange, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetRange::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.SetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_SetStart final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_SetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_SetStart");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_SetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_SetStart");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_SetStart, Value) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_SetStart::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetEnd
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetEnd final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetEnd) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetEnd");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetEnd) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_GetEnd");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetEnd, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetEnd::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetFlipDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RangeSelector_GetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetFlipDirection, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetFlipDirection::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetRange");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_GetRange");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetRange, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RangeSelector.GetStart
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RangeSelector_GetStart final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RangeSelector_GetStart) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RangeSelector_GetStart");
static_assert(sizeof(UIEffectTextAnimation_RangeSelector_GetStart) == 0x000004, "Wrong size on UIEffectTextAnimation_RangeSelector_GetStart");
static_assert(offsetof(UIEffectTextAnimation_RangeSelector_GetStart, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RangeSelector_GetStart::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection, Value) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_SetRange final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_SetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_SetRange");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_SetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_SetRange");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_SetRange, Value) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_SetRange::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetTagName
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_SetTagName final
{
public:
	class FName                                   Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_SetTagName) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_SetTagName");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_SetTagName) == 0x000008, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_SetTagName");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_SetTagName, Value) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_SetTagName::Value' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetFlipDirection
// 0x0001 (0x0001 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection) == 0x000001, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection) == 0x000001, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetRange
// 0x0004 (0x0004 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_GetRange) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_GetRange");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_GetRange) == 0x000004, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_GetRange");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_GetRange, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_GetRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetTagName
// 0x0008 (0x0008 - 0x0000)
struct UIEffectTextAnimation_RichTextTagSelector_GetTagName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEffectTextAnimation_RichTextTagSelector_GetTagName) == 0x000004, "Wrong alignment on UIEffectTextAnimation_RichTextTagSelector_GetTagName");
static_assert(sizeof(UIEffectTextAnimation_RichTextTagSelector_GetTagName) == 0x000008, "Wrong size on UIEffectTextAnimation_RichTextTagSelector_GetTagName");
static_assert(offsetof(UIEffectTextAnimation_RichTextTagSelector_GetTagName, ReturnValue) == 0x000000, "Member 'UIEffectTextAnimation_RichTextTagSelector_GetTagName::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerBeginDrag
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerBeginDrag final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerBeginDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerBeginDrag");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerBeginDrag) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerBeginDrag");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerBeginDrag, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerBeginDrag::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerBeginDrag, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerBeginDrag::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerClick
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerClick final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerClick) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerClick");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerClick) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerClick");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerClick, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerClick::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerClick, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerClick::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDeselect
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDeselect final
{
public:
	TDelegate<void(class ULGUIBaseEventData* EventData)> InDelegate;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDeselect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDeselect");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDeselect) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDeselect");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDeselect, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDeselect::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDeselect, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerDeselect::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDown
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDown final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDown) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDown");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDown) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDown");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDown, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDown::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDown, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerDown::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDrag
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDrag final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDrag");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDrag) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDrag");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDrag, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDrag::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDrag, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerDrag::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragDrop
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerDragDrop final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerDragDrop) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerDragDrop");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerDragDrop) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerDragDrop");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragDrop, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerDragDrop::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerDragDrop, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerDragDrop::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEndDrag
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerEndDrag final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerEndDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerEndDrag");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerEndDrag) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerEndDrag");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEndDrag, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerEndDrag::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEndDrag, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerEndDrag::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEnter
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerEnter final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerEnter) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerEnter");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerEnter) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerEnter");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEnter, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerEnter::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerEnter, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerEnter::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerExit
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerExit final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerExit) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerExit");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerExit) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerExit");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerExit, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerExit::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerExit, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerExit::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerScroll
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerScroll final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerScroll) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerScroll");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerScroll) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerScroll");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerScroll, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerScroll::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerScroll, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerScroll::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerSelect
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerSelect final
{
public:
	TDelegate<void(class ULGUIBaseEventData* EventData)> InDelegate;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerSelect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerSelect");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerSelect) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerSelect");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerSelect, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerSelect::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerSelect, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerSelect::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.RegisterOnPointerUp
// 0x0018 (0x0018 - 0x0000)
struct UIEventTriggerComponent_RegisterOnPointerUp final
{
public:
	TDelegate<void(class ULGUIPointerEventData* pointerEventData)> InDelegate;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_RegisterOnPointerUp) == 0x000008, "Wrong alignment on UIEventTriggerComponent_RegisterOnPointerUp");
static_assert(sizeof(UIEventTriggerComponent_RegisterOnPointerUp) == 0x000018, "Wrong size on UIEventTriggerComponent_RegisterOnPointerUp");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerUp, InDelegate) == 0x000000, "Member 'UIEventTriggerComponent_RegisterOnPointerUp::InDelegate' has a wrong offset!");
static_assert(offsetof(UIEventTriggerComponent_RegisterOnPointerUp, ReturnValue) == 0x000010, "Member 'UIEventTriggerComponent_RegisterOnPointerUp::ReturnValue' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerBeginDrag
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerBeginDrag final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerBeginDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerBeginDrag");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerBeginDrag) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerBeginDrag");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerBeginDrag, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerBeginDrag::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerClick
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerClick final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerClick) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerClick");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerClick) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerClick");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerClick, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerClick::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDeselect
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDeselect final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDeselect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDeselect");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDeselect) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDeselect");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDeselect, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDeselect::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDown
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDown final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDown) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDown");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDown) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDown");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDown, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDown::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDrag
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDrag final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDrag");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDrag) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDrag");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDrag, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDrag::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragDrop
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerDragDrop final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerDragDrop) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerDragDrop");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerDragDrop) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerDragDrop");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerDragDrop, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerDragDrop::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEndDrag
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerEndDrag final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerEndDrag) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerEndDrag");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerEndDrag) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerEndDrag");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerEndDrag, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerEndDrag::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEnter
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerEnter final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerEnter) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerEnter");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerEnter) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerEnter");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerEnter, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerEnter::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerExit
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerExit final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerExit) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerExit");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerExit) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerExit");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerExit, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerExit::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerScroll
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerScroll final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerScroll) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerScroll");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerScroll) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerScroll");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerScroll, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerScroll::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerSelect
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerSelect final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerSelect) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerSelect");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerSelect) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerSelect");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerSelect, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerSelect::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerUp
// 0x0008 (0x0008 - 0x0000)
struct UIEventTriggerComponent_UnregisterOnPointerUp final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIEventTriggerComponent_UnregisterOnPointerUp) == 0x000008, "Wrong alignment on UIEventTriggerComponent_UnregisterOnPointerUp");
static_assert(sizeof(UIEventTriggerComponent_UnregisterOnPointerUp) == 0x000008, "Wrong size on UIEventTriggerComponent_UnregisterOnPointerUp");
static_assert(offsetof(UIEventTriggerComponent_UnregisterOnPointerUp, InDelegateHandle) == 0x000000, "Member 'UIEventTriggerComponent_UnregisterOnPointerUp::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.SetColumns
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_SetColumns final
{
public:
	TArray<struct FUIFlexibleGridLayoutCellData>  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_SetColumns) == 0x000008, "Wrong alignment on UIFlexibleGridLayout_SetColumns");
static_assert(sizeof(UIFlexibleGridLayout_SetColumns) == 0x000010, "Wrong size on UIFlexibleGridLayout_SetColumns");
static_assert(offsetof(UIFlexibleGridLayout_SetColumns, Value) == 0x000000, "Member 'UIFlexibleGridLayout_SetColumns::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_SetPadding) == 0x000004, "Wrong alignment on UIFlexibleGridLayout_SetPadding");
static_assert(sizeof(UIFlexibleGridLayout_SetPadding) == 0x000010, "Wrong size on UIFlexibleGridLayout_SetPadding");
static_assert(offsetof(UIFlexibleGridLayout_SetPadding, Value) == 0x000000, "Member 'UIFlexibleGridLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.SetRows
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_SetRows final
{
public:
	TArray<struct FUIFlexibleGridLayoutCellData>  Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_SetRows) == 0x000008, "Wrong alignment on UIFlexibleGridLayout_SetRows");
static_assert(sizeof(UIFlexibleGridLayout_SetRows) == 0x000010, "Wrong size on UIFlexibleGridLayout_SetRows");
static_assert(offsetof(UIFlexibleGridLayout_SetRows, Value) == 0x000000, "Member 'UIFlexibleGridLayout_SetRows::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.SetSpacing
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_SetSpacing final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_SetSpacing) == 0x000008, "Wrong alignment on UIFlexibleGridLayout_SetSpacing");
static_assert(sizeof(UIFlexibleGridLayout_SetSpacing) == 0x000010, "Wrong size on UIFlexibleGridLayout_SetSpacing");
static_assert(offsetof(UIFlexibleGridLayout_SetSpacing, Value) == 0x000000, "Member 'UIFlexibleGridLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.GetColumnCount
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayout_GetColumnCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_GetColumnCount) == 0x000004, "Wrong alignment on UIFlexibleGridLayout_GetColumnCount");
static_assert(sizeof(UIFlexibleGridLayout_GetColumnCount) == 0x000004, "Wrong size on UIFlexibleGridLayout_GetColumnCount");
static_assert(offsetof(UIFlexibleGridLayout_GetColumnCount, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayout_GetColumnCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.GetColumns
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_GetColumns final
{
public:
	TArray<struct FUIFlexibleGridLayoutCellData>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_GetColumns) == 0x000008, "Wrong alignment on UIFlexibleGridLayout_GetColumns");
static_assert(sizeof(UIFlexibleGridLayout_GetColumns) == 0x000010, "Wrong size on UIFlexibleGridLayout_GetColumns");
static_assert(offsetof(UIFlexibleGridLayout_GetColumns, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayout_GetColumns::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_GetPadding) == 0x000004, "Wrong alignment on UIFlexibleGridLayout_GetPadding");
static_assert(sizeof(UIFlexibleGridLayout_GetPadding) == 0x000010, "Wrong size on UIFlexibleGridLayout_GetPadding");
static_assert(offsetof(UIFlexibleGridLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.GetRowCount
// 0x0004 (0x0004 - 0x0000)
struct UIFlexibleGridLayout_GetRowCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_GetRowCount) == 0x000004, "Wrong alignment on UIFlexibleGridLayout_GetRowCount");
static_assert(sizeof(UIFlexibleGridLayout_GetRowCount) == 0x000004, "Wrong size on UIFlexibleGridLayout_GetRowCount");
static_assert(offsetof(UIFlexibleGridLayout_GetRowCount, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayout_GetRowCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.GetRows
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_GetRows final
{
public:
	TArray<struct FUIFlexibleGridLayoutCellData>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_GetRows) == 0x000008, "Wrong alignment on UIFlexibleGridLayout_GetRows");
static_assert(sizeof(UIFlexibleGridLayout_GetRows) == 0x000010, "Wrong size on UIFlexibleGridLayout_GetRows");
static_assert(offsetof(UIFlexibleGridLayout_GetRows, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayout_GetRows::ReturnValue' has a wrong offset!");

// Function LGUI.UIFlexibleGridLayout.GetSpacing
// 0x0010 (0x0010 - 0x0000)
struct UIFlexibleGridLayout_GetSpacing final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFlexibleGridLayout_GetSpacing) == 0x000008, "Wrong alignment on UIFlexibleGridLayout_GetSpacing");
static_assert(sizeof(UIFlexibleGridLayout_GetSpacing) == 0x000010, "Wrong size on UIFlexibleGridLayout_GetSpacing");
static_assert(offsetof(UIFlexibleGridLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIFlexibleGridLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIFrameCapture.DoCapture
// 0x0010 (0x0010 - 0x0000)
struct UIFrameCapture_DoCapture final
{
public:
	TDelegate<void(class UTextureRenderTarget2D* CapturedFrame)> InDelegate;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFrameCapture_DoCapture) == 0x000004, "Wrong alignment on UIFrameCapture_DoCapture");
static_assert(sizeof(UIFrameCapture_DoCapture) == 0x000010, "Wrong size on UIFrameCapture_DoCapture");
static_assert(offsetof(UIFrameCapture_DoCapture, InDelegate) == 0x000000, "Member 'UIFrameCapture_DoCapture::InDelegate' has a wrong offset!");

// Function LGUI.UIFrameCapture.GetCapturedFrame
// 0x0008 (0x0008 - 0x0000)
struct UIFrameCapture_GetCapturedFrame final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIFrameCapture_GetCapturedFrame) == 0x000008, "Wrong alignment on UIFrameCapture_GetCapturedFrame");
static_assert(sizeof(UIFrameCapture_GetCapturedFrame) == 0x000008, "Wrong size on UIFrameCapture_GetCapturedFrame");
static_assert(offsetof(UIFrameCapture_GetCapturedFrame, ReturnValue) == 0x000000, "Member 'UIFrameCapture_GetCapturedFrame::ReturnValue' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Alpha
// 0x0010 (0x0010 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InAlpha;                                           // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha) == 0x000010, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha, InAlpha) == 0x00000C, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha::InAlpha' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Color
// 0x0010 (0x0010 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 InColor;                                           // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color) == 0x000010, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color, InColor) == 0x00000C, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color::InColor' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Position
// 0x0030 (0x0030 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPosition;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIGeometryModifierHelper_UITextModifyPositionType InPositionType;                             // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position) == 0x000030, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position, InPosition) == 0x000010, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position::InPosition' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position, InPositionType) == 0x000028, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position::InPositionType' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Rotate
// 0x0028 (0x0028 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               InRotator;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate) == 0x000028, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate, InRotator) == 0x000010, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate::InRotator' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Scale
// 0x0028 (0x0028 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InScale;                                           // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale) == 0x000028, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale, InScale) == 0x000010, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale::InScale' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Transform
// 0x0058 (0x0058 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELGUIGeometryModifierHelper_UITextModifyPositionType InPositionType;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InPosition;                                        // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InRotator;                                         // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                InScale;                                           // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform) == 0x000058, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform, InPositionType) == 0x00000C, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform::InPositionType' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform, InPosition) == 0x000010, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform::InPosition' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform, InRotator) == 0x000028, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform::InRotator' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform, InScale) == 0x000040, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform::InScale' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_GetCharGeometry_AbsolutePosition
// 0x0028 (0x0028 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OutPosition;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition) == 0x000028, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition, OutPosition) == 0x000010, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition::OutPosition' has a wrong offset!");

// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_GetCharHorizontalPositionRatio01
// 0x0010 (0x0010 - 0x0000)
struct LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01 final
{
public:
	class UUIText*                                InUIText;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InCharIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01) == 0x000008, "Wrong alignment on LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01");
static_assert(sizeof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01) == 0x000010, "Wrong size on LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01, InUIText) == 0x000000, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01::InUIText' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01, InCharIndex) == 0x000008, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01::InCharIndex' has a wrong offset!");
static_assert(offsetof(LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01, ReturnValue) == 0x00000C, "Member 'LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetAlign final
{
public:
	ELGUILayoutAlignmentType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetAlign) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetAlign");
static_assert(sizeof(UIHorizontalLayout_SetAlign) == 0x000001, "Wrong size on UIHorizontalLayout_SetAlign");
static_assert(offsetof(UIHorizontalLayout_SetAlign, Value) == 0x000000, "Member 'UIHorizontalLayout_SetAlign::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetControlChildHeight
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetControlChildHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetControlChildHeight) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetControlChildHeight");
static_assert(sizeof(UIHorizontalLayout_SetControlChildHeight) == 0x000001, "Wrong size on UIHorizontalLayout_SetControlChildHeight");
static_assert(offsetof(UIHorizontalLayout_SetControlChildHeight, Value) == 0x000000, "Member 'UIHorizontalLayout_SetControlChildHeight::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetControlChildWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetControlChildWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetControlChildWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetControlChildWidth");
static_assert(sizeof(UIHorizontalLayout_SetControlChildWidth) == 0x000001, "Wrong size on UIHorizontalLayout_SetControlChildWidth");
static_assert(offsetof(UIHorizontalLayout_SetControlChildWidth, Value) == 0x000000, "Member 'UIHorizontalLayout_SetControlChildWidth::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetExpandChildHeightArea
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetExpandChildHeightArea final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetExpandChildHeightArea) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetExpandChildHeightArea");
static_assert(sizeof(UIHorizontalLayout_SetExpandChildHeightArea) == 0x000001, "Wrong size on UIHorizontalLayout_SetExpandChildHeightArea");
static_assert(offsetof(UIHorizontalLayout_SetExpandChildHeightArea, Value) == 0x000000, "Member 'UIHorizontalLayout_SetExpandChildHeightArea::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetExpandChildWidthArea
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetExpandChildWidthArea final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetExpandChildWidthArea) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetExpandChildWidthArea");
static_assert(sizeof(UIHorizontalLayout_SetExpandChildWidthArea) == 0x000001, "Wrong size on UIHorizontalLayout_SetExpandChildWidthArea");
static_assert(offsetof(UIHorizontalLayout_SetExpandChildWidthArea, Value) == 0x000000, "Member 'UIHorizontalLayout_SetExpandChildWidthArea::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetExpendChildrenHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetExpendChildrenHeight");
static_assert(sizeof(UIHorizontalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong size on UIHorizontalLayout_SetExpendChildrenHeight");
static_assert(offsetof(UIHorizontalLayout_SetExpendChildrenHeight, Value) == 0x000000, "Member 'UIHorizontalLayout_SetExpendChildrenHeight::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetExpendChildrenWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetExpendChildrenWidth");
static_assert(sizeof(UIHorizontalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong size on UIHorizontalLayout_SetExpendChildrenWidth");
static_assert(offsetof(UIHorizontalLayout_SetExpendChildrenWidth, Value) == 0x000000, "Member 'UIHorizontalLayout_SetExpendChildrenWidth::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetHeightFitToChildren");
static_assert(sizeof(UIHorizontalLayout_SetHeightFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_SetHeightFitToChildren");
static_assert(offsetof(UIHorizontalLayout_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIHorizontalLayout_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetHeightFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax");
static_assert(sizeof(UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax");
static_assert(offsetof(UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax, Value) == 0x000000, "Member 'UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIHorizontalLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetPadding) == 0x000004, "Wrong alignment on UIHorizontalLayout_SetPadding");
static_assert(sizeof(UIHorizontalLayout_SetPadding) == 0x000010, "Wrong size on UIHorizontalLayout_SetPadding");
static_assert(offsetof(UIHorizontalLayout_SetPadding, Value) == 0x000000, "Member 'UIHorizontalLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_SetSpacing final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetSpacing) == 0x000004, "Wrong alignment on UIHorizontalLayout_SetSpacing");
static_assert(sizeof(UIHorizontalLayout_SetSpacing) == 0x000004, "Wrong size on UIHorizontalLayout_SetSpacing");
static_assert(offsetof(UIHorizontalLayout_SetSpacing, Value) == 0x000000, "Member 'UIHorizontalLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetUseChildScaleOnWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetUseChildScaleOnWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetUseChildScaleOnWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetUseChildScaleOnWidth");
static_assert(sizeof(UIHorizontalLayout_SetUseChildScaleOnWidth) == 0x000001, "Wrong size on UIHorizontalLayout_SetUseChildScaleOnWidth");
static_assert(offsetof(UIHorizontalLayout_SetUseChildScaleOnWidth, Value) == 0x000000, "Member 'UIHorizontalLayout_SetUseChildScaleOnWidth::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_SetWidthFitToChildren");
static_assert(sizeof(UIHorizontalLayout_SetWidthFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_SetWidthFitToChildren");
static_assert(offsetof(UIHorizontalLayout_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIHorizontalLayout_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetActuralRange
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_GetActuralRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetActuralRange) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetActuralRange");
static_assert(sizeof(UIHorizontalLayout_GetActuralRange) == 0x000004, "Wrong size on UIHorizontalLayout_GetActuralRange");
static_assert(offsetof(UIHorizontalLayout_GetActuralRange, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetActuralRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetAlign final
{
public:
	ELGUILayoutAlignmentType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetAlign) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetAlign");
static_assert(sizeof(UIHorizontalLayout_GetAlign) == 0x000001, "Wrong size on UIHorizontalLayout_GetAlign");
static_assert(offsetof(UIHorizontalLayout_GetAlign, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetControlChildHeight
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetControlChildHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetControlChildHeight) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetControlChildHeight");
static_assert(sizeof(UIHorizontalLayout_GetControlChildHeight) == 0x000001, "Wrong size on UIHorizontalLayout_GetControlChildHeight");
static_assert(offsetof(UIHorizontalLayout_GetControlChildHeight, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetControlChildHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetControlChildWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetControlChildWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetControlChildWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetControlChildWidth");
static_assert(sizeof(UIHorizontalLayout_GetControlChildWidth) == 0x000001, "Wrong size on UIHorizontalLayout_GetControlChildWidth");
static_assert(offsetof(UIHorizontalLayout_GetControlChildWidth, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetControlChildWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetExpandChildHeightArea
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetExpandChildHeightArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetExpandChildHeightArea) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetExpandChildHeightArea");
static_assert(sizeof(UIHorizontalLayout_GetExpandChildHeightArea) == 0x000001, "Wrong size on UIHorizontalLayout_GetExpandChildHeightArea");
static_assert(offsetof(UIHorizontalLayout_GetExpandChildHeightArea, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetExpandChildHeightArea::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetExpandChildWidthArea
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetExpandChildWidthArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetExpandChildWidthArea) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetExpandChildWidthArea");
static_assert(sizeof(UIHorizontalLayout_GetExpandChildWidthArea) == 0x000001, "Wrong size on UIHorizontalLayout_GetExpandChildWidthArea");
static_assert(offsetof(UIHorizontalLayout_GetExpandChildWidthArea, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetExpandChildWidthArea::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetExpendChildrenHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetExpendChildrenHeight");
static_assert(sizeof(UIHorizontalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong size on UIHorizontalLayout_GetExpendChildrenHeight");
static_assert(offsetof(UIHorizontalLayout_GetExpendChildrenHeight, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetExpendChildrenHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetExpendChildrenWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetExpendChildrenWidth");
static_assert(sizeof(UIHorizontalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong size on UIHorizontalLayout_GetExpendChildrenWidth");
static_assert(offsetof(UIHorizontalLayout_GetExpendChildrenWidth, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetExpendChildrenWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetHeightFitToChildren");
static_assert(sizeof(UIHorizontalLayout_GetHeightFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_GetHeightFitToChildren");
static_assert(offsetof(UIHorizontalLayout_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetHeightFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax");
static_assert(sizeof(UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax");
static_assert(offsetof(UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIHorizontalLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetPadding) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetPadding");
static_assert(sizeof(UIHorizontalLayout_GetPadding) == 0x000010, "Wrong size on UIHorizontalLayout_GetPadding");
static_assert(offsetof(UIHorizontalLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIHorizontalLayout_GetSpacing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetSpacing) == 0x000004, "Wrong alignment on UIHorizontalLayout_GetSpacing");
static_assert(sizeof(UIHorizontalLayout_GetSpacing) == 0x000004, "Wrong size on UIHorizontalLayout_GetSpacing");
static_assert(offsetof(UIHorizontalLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetUseChildScaleOnWidth
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetUseChildScaleOnWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetUseChildScaleOnWidth) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetUseChildScaleOnWidth");
static_assert(sizeof(UIHorizontalLayout_GetUseChildScaleOnWidth) == 0x000001, "Wrong size on UIHorizontalLayout_GetUseChildScaleOnWidth");
static_assert(offsetof(UIHorizontalLayout_GetUseChildScaleOnWidth, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetUseChildScaleOnWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIHorizontalLayout.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIHorizontalLayout_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIHorizontalLayout_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIHorizontalLayout_GetWidthFitToChildren");
static_assert(sizeof(UIHorizontalLayout_GetWidthFitToChildren) == 0x000001, "Wrong size on UIHorizontalLayout_GetWidthFitToChildren");
static_assert(offsetof(UIHorizontalLayout_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIHorizontalLayout_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutElement.SetConstantSize
// 0x0004 (0x0004 - 0x0000)
struct UILayoutElement_SetConstantSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetConstantSize) == 0x000004, "Wrong alignment on UILayoutElement_SetConstantSize");
static_assert(sizeof(UILayoutElement_SetConstantSize) == 0x000004, "Wrong size on UILayoutElement_SetConstantSize");
static_assert(offsetof(UILayoutElement_SetConstantSize, Value) == 0x000000, "Member 'UILayoutElement_SetConstantSize::Value' has a wrong offset!");

// Function LGUI.UILayoutElement.SetConstantSizeType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutElement_SetConstantSizeType final
{
public:
	EUILayoutElement_ConstantSizeType             Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetConstantSizeType) == 0x000001, "Wrong alignment on UILayoutElement_SetConstantSizeType");
static_assert(sizeof(UILayoutElement_SetConstantSizeType) == 0x000001, "Wrong size on UILayoutElement_SetConstantSizeType");
static_assert(offsetof(UILayoutElement_SetConstantSizeType, Value) == 0x000000, "Member 'UILayoutElement_SetConstantSizeType::Value' has a wrong offset!");

// Function LGUI.UILayoutElement.SetLayoutType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutElement_SetLayoutType final
{
public:
	ELayoutElementType                            InType;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetLayoutType) == 0x000001, "Wrong alignment on UILayoutElement_SetLayoutType");
static_assert(sizeof(UILayoutElement_SetLayoutType) == 0x000001, "Wrong size on UILayoutElement_SetLayoutType");
static_assert(offsetof(UILayoutElement_SetLayoutType, InType) == 0x000000, "Member 'UILayoutElement_SetLayoutType::InType' has a wrong offset!");

// Function LGUI.UILayoutElement.SetRatioSize
// 0x0004 (0x0004 - 0x0000)
struct UILayoutElement_SetRatioSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_SetRatioSize) == 0x000004, "Wrong alignment on UILayoutElement_SetRatioSize");
static_assert(sizeof(UILayoutElement_SetRatioSize) == 0x000004, "Wrong size on UILayoutElement_SetRatioSize");
static_assert(offsetof(UILayoutElement_SetRatioSize, Value) == 0x000000, "Member 'UILayoutElement_SetRatioSize::Value' has a wrong offset!");

// Function LGUI.UILayoutElement.GetConstantSizeType
// 0x0001 (0x0001 - 0x0000)
struct UILayoutElement_GetConstantSizeType final
{
public:
	EUILayoutElement_ConstantSizeType             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutElement_GetConstantSizeType) == 0x000001, "Wrong alignment on UILayoutElement_GetConstantSizeType");
static_assert(sizeof(UILayoutElement_GetConstantSizeType) == 0x000001, "Wrong size on UILayoutElement_GetConstantSizeType");
static_assert(offsetof(UILayoutElement_GetConstantSizeType, ReturnValue) == 0x000000, "Member 'UILayoutElement_GetConstantSizeType::ReturnValue' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyAnchoredPositionAnimation
// 0x0018 (0x0018 - 0x0000)
struct UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation");
static_assert(sizeof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation) == 0x000018, "Wrong size on UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation, Value) == 0x000000, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation::Value' has a wrong offset!");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation, Target) == 0x000010, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation::Target' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyHeightAnimation
// 0x0010 (0x0010 - 0x0000)
struct UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIItem*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation");
static_assert(sizeof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation) == 0x000010, "Wrong size on UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation, Value) == 0x000000, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation::Value' has a wrong offset!");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation, Target) == 0x000008, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation::Target' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyRotatorAnimation
// 0x0020 (0x0020 - 0x0000)
struct UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation final
{
public:
	struct FRotator                               Value;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class UUIItem*                                Target;                                            // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation");
static_assert(sizeof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation) == 0x000020, "Wrong size on UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation, Value) == 0x000000, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation::Value' has a wrong offset!");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation, Target) == 0x000018, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation::Target' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplySizeDeltaAnimation
// 0x0018 (0x0018 - 0x0000)
struct UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIItem*                                Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation");
static_assert(sizeof(UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation) == 0x000018, "Wrong size on UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation, Value) == 0x000000, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation::Value' has a wrong offset!");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation, Target) == 0x000010, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation::Target' has a wrong offset!");

// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyWidthAnimation
// 0x0010 (0x0010 - 0x0000)
struct UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIItem*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation) == 0x000008, "Wrong alignment on UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation");
static_assert(sizeof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation) == 0x000010, "Wrong size on UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation, Value) == 0x000000, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation::Value' has a wrong offset!");
static_assert(offsetof(UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation, Target) == 0x000008, "Member 'UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation::Target' has a wrong offset!");

// Function LGUI.UIPanelLayoutSlotWithOverrideOrder.SetOverrideLayoutOrder
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder) == 0x000004, "Wrong alignment on UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder");
static_assert(sizeof(UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder) == 0x000004, "Wrong size on UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder");
static_assert(offsetof(UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder, Value) == 0x000000, "Member 'UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder::Value' has a wrong offset!");

// Function LGUI.UIPanelLayoutSlotWithOverrideOrder.GetOverrideLayoutOrder
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder) == 0x000004, "Wrong alignment on UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder");
static_assert(sizeof(UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder) == 0x000004, "Wrong size on UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder");
static_assert(offsetof(UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder, ReturnValue) == 0x000000, "Member 'UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid.SetColumns
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_FlexibleGrid_SetColumns final
{
public:
	TArray<struct FUIPanelLayout_FlexibleGridSize> Value;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_SetColumns) == 0x000008, "Wrong alignment on UIPanelLayout_FlexibleGrid_SetColumns");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_SetColumns) == 0x000010, "Wrong size on UIPanelLayout_FlexibleGrid_SetColumns");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_SetColumns, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_SetColumns::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid.SetRows
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_FlexibleGrid_SetRows final
{
public:
	TArray<struct FUIPanelLayout_FlexibleGridSize> Value;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_SetRows) == 0x000008, "Wrong alignment on UIPanelLayout_FlexibleGrid_SetRows");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_SetRows) == 0x000010, "Wrong size on UIPanelLayout_FlexibleGrid_SetRows");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_SetRows, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_SetRows::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid.GetColumns
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_FlexibleGrid_GetColumns final
{
public:
	TArray<struct FUIPanelLayout_FlexibleGridSize> ReturnValue;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_GetColumns) == 0x000008, "Wrong alignment on UIPanelLayout_FlexibleGrid_GetColumns");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_GetColumns) == 0x000010, "Wrong size on UIPanelLayout_FlexibleGrid_GetColumns");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_GetColumns, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_GetColumns::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid.GetRows
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_FlexibleGrid_GetRows final
{
public:
	TArray<struct FUIPanelLayout_FlexibleGridSize> ReturnValue;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_GetRows) == 0x000008, "Wrong alignment on UIPanelLayout_FlexibleGrid_GetRows");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_GetRows) == 0x000010, "Wrong size on UIPanelLayout_FlexibleGrid_GetRows");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_GetRows, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_GetRows::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetColumn
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetColumn final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetColumn) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetColumn");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetColumn) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetColumn");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetColumn, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetColumn::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetColumnSpan
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetPadding");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetPadding) == 0x000010, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetPadding");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetPadding, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetRow
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetRow final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetRow) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetRow");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetRow) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetRow");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetRow, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetRow::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetRowSpan
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetRowSpan final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetRowSpan) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetRowSpan");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetRowSpan) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetRowSpan");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetRowSpan, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetRowSpan::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetColumn
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetColumn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetColumn) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetColumn");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetColumn) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetColumn");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetColumn, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetColumn::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetColumnSpan
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetPadding");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetPadding) == 0x000010, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetPadding");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetPadding, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetRow
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetRow final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetRow) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetRow");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetRow) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetRow");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetRow, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetRow::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetRowSpan
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetRowSpan final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetRowSpan) == 0x000004, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetRowSpan");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetRowSpan) == 0x000004, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetRowSpan");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetRowSpan, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetRowSpan::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment final
{
public:
	EVerticalAlignment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_SetHeightFitToChildren");
static_assert(sizeof(UIPanelLayout_HorizontalBox_SetHeightFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_SetHeightFitToChildren");
static_assert(offsetof(UIPanelLayout_HorizontalBox_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox.SetHeightFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_SetWidthFitToChildren");
static_assert(sizeof(UIPanelLayout_HorizontalBox_SetWidthFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_SetWidthFitToChildren");
static_assert(offsetof(UIPanelLayout_HorizontalBox_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_GetHeightFitToChildren");
static_assert(sizeof(UIPanelLayout_HorizontalBox_GetHeightFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_GetHeightFitToChildren");
static_assert(offsetof(UIPanelLayout_HorizontalBox_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox.GetHeightFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_GetWidthFitToChildren");
static_assert(sizeof(UIPanelLayout_HorizontalBox_GetWidthFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_GetWidthFitToChildren");
static_assert(offsetof(UIPanelLayout_HorizontalBox_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_SetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_SetPadding");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_SetPadding) == 0x000010, "Wrong size on UIPanelLayout_HorizontalBox_Slot_SetPadding");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_SetPadding, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetSizeRule
// 0x0008 (0x0008 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_SetSizeRule final
{
public:
	struct FSlateChildSize                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_SetSizeRule) == 0x000004, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_SetSizeRule");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_SetSizeRule) == 0x000008, "Wrong size on UIPanelLayout_HorizontalBox_Slot_SetSizeRule");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_SetSizeRule, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_SetSizeRule::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_GetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_GetPadding");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_GetPadding) == 0x000010, "Wrong size on UIPanelLayout_HorizontalBox_Slot_GetPadding");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_GetPadding, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetSizeRule
// 0x0008 (0x0008 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_GetSizeRule final
{
public:
	struct FSlateChildSize                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_GetSizeRule) == 0x000004, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_GetSizeRule");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_GetSizeRule) == 0x000008, "Wrong size on UIPanelLayout_HorizontalBox_Slot_GetSizeRule");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_GetSizeRule, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_GetSizeRule::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment final
{
public:
	EVerticalAlignment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_SetHeightFitToChildren");
static_assert(sizeof(UIPanelLayout_UniformGrid_SetHeightFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_SetHeightFitToChildren");
static_assert(offsetof(UIPanelLayout_UniformGrid_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.SetHeightFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_SetWidthFitToChildren");
static_assert(sizeof(UIPanelLayout_UniformGrid_SetWidthFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_SetWidthFitToChildren");
static_assert(offsetof(UIPanelLayout_UniformGrid_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.SetWidthFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_GetHeightFitToChildren");
static_assert(sizeof(UIPanelLayout_UniformGrid_GetHeightFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_GetHeightFitToChildren");
static_assert(offsetof(UIPanelLayout_UniformGrid_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.GetHeightFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_GetWidthFitToChildren");
static_assert(sizeof(UIPanelLayout_UniformGrid_GetWidthFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_GetWidthFitToChildren");
static_assert(offsetof(UIPanelLayout_UniformGrid_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid.GetWidthFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetColumn
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_SetColumn final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_SetColumn) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_SetColumn");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_SetColumn) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_Slot_SetColumn");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_SetColumn, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_SetColumn::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_SetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_SetPadding");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_SetPadding) == 0x000010, "Wrong size on UIPanelLayout_UniformGrid_Slot_SetPadding");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_SetPadding, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetRow
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_SetRow final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_SetRow) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_SetRow");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_SetRow) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_Slot_SetRow");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_SetRow, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_SetRow::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetColumn
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_GetColumn final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_GetColumn) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_GetColumn");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_GetColumn) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_Slot_GetColumn");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_GetColumn, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_GetColumn::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_GetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_GetPadding");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_GetPadding) == 0x000010, "Wrong size on UIPanelLayout_UniformGrid_Slot_GetPadding");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_GetPadding, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetRow
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_GetRow final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_GetRow) == 0x000004, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_GetRow");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_GetRow) == 0x000004, "Wrong size on UIPanelLayout_UniformGrid_Slot_GetRow");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_GetRow, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_GetRow::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment final
{
public:
	EVerticalAlignment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_SetHeightFitToChildren");
static_assert(sizeof(UIPanelLayout_VerticalBox_SetHeightFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_SetHeightFitToChildren");
static_assert(offsetof(UIPanelLayout_VerticalBox_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_SetWidthFitToChildren");
static_assert(sizeof(UIPanelLayout_VerticalBox_SetWidthFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_SetWidthFitToChildren");
static_assert(offsetof(UIPanelLayout_VerticalBox_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox.SetWidthFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_GetHeightFitToChildren");
static_assert(sizeof(UIPanelLayout_VerticalBox_GetHeightFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_GetHeightFitToChildren");
static_assert(offsetof(UIPanelLayout_VerticalBox_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_GetWidthFitToChildren");
static_assert(sizeof(UIPanelLayout_VerticalBox_GetWidthFitToChildren) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_GetWidthFitToChildren");
static_assert(offsetof(UIPanelLayout_VerticalBox_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox.GetWidthFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax");
static_assert(sizeof(UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax");
static_assert(offsetof(UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_SetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_SetPadding");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_SetPadding) == 0x000010, "Wrong size on UIPanelLayout_VerticalBox_Slot_SetPadding");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_SetPadding, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetSizeRule
// 0x0008 (0x0008 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_SetSizeRule final
{
public:
	struct FSlateChildSize                        Value;                                             // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_SetSizeRule) == 0x000004, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_SetSizeRule");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_SetSizeRule) == 0x000008, "Wrong size on UIPanelLayout_VerticalBox_Slot_SetSizeRule");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_SetSizeRule, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_SetSizeRule::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment final
{
public:
	EVerticalAlignment                            Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment, Value) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment::Value' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment final
{
public:
	EHorizontalAlignment                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_GetPadding) == 0x000004, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_GetPadding");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_GetPadding) == 0x000010, "Wrong size on UIPanelLayout_VerticalBox_Slot_GetPadding");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_GetPadding, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetSizeRule
// 0x0008 (0x0008 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_GetSizeRule final
{
public:
	struct FSlateChildSize                        ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_GetSizeRule) == 0x000004, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_GetSizeRule");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_GetSizeRule) == 0x000008, "Wrong size on UIPanelLayout_VerticalBox_Slot_GetSizeRule");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_GetSizeRule, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_GetSizeRule::ReturnValue' has a wrong offset!");

// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment final
{
public:
	EVerticalAlignment                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment) == 0x000001, "Wrong alignment on UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment");
static_assert(sizeof(UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment) == 0x000001, "Wrong size on UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment");
static_assert(offsetof(UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment, ReturnValue) == 0x000000, "Member 'UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.EndAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygon_EndAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_EndAngleTo) == 0x000008, "Wrong alignment on UIPolygon_EndAngleTo");
static_assert(sizeof(UIPolygon_EndAngleTo) == 0x000018, "Wrong size on UIPolygon_EndAngleTo");
static_assert(offsetof(UIPolygon_EndAngleTo, endValue) == 0x000000, "Member 'UIPolygon_EndAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, Duration) == 0x000004, "Member 'UIPolygon_EndAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, Delay) == 0x000008, "Member 'UIPolygon_EndAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, easetype) == 0x00000C, "Member 'UIPolygon_EndAngleTo::easetype' has a wrong offset!");
static_assert(offsetof(UIPolygon_EndAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygon_EndAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_SetEndAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetEndAngle) == 0x000004, "Wrong alignment on UIPolygon_SetEndAngle");
static_assert(sizeof(UIPolygon_SetEndAngle) == 0x000004, "Wrong size on UIPolygon_SetEndAngle");
static_assert(offsetof(UIPolygon_SetEndAngle, Value) == 0x000000, "Member 'UIPolygon_SetEndAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetFullCycle
// 0x0001 (0x0001 - 0x0000)
struct UIPolygon_SetFullCycle final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetFullCycle) == 0x000001, "Wrong alignment on UIPolygon_SetFullCycle");
static_assert(sizeof(UIPolygon_SetFullCycle) == 0x000001, "Wrong size on UIPolygon_SetFullCycle");
static_assert(offsetof(UIPolygon_SetFullCycle, Value) == 0x000000, "Member 'UIPolygon_SetFullCycle::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_SetSides final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetSides) == 0x000004, "Wrong alignment on UIPolygon_SetSides");
static_assert(sizeof(UIPolygon_SetSides) == 0x000004, "Wrong size on UIPolygon_SetSides");
static_assert(offsetof(UIPolygon_SetSides, Value) == 0x000000, "Member 'UIPolygon_SetSides::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_SetStartAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetStartAngle) == 0x000004, "Wrong alignment on UIPolygon_SetStartAngle");
static_assert(sizeof(UIPolygon_SetStartAngle) == 0x000004, "Wrong size on UIPolygon_SetStartAngle");
static_assert(offsetof(UIPolygon_SetStartAngle, Value) == 0x000000, "Member 'UIPolygon_SetStartAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetUVType
// 0x0001 (0x0001 - 0x0000)
struct UIPolygon_SetUVType final
{
public:
	EUIPolygonUVType                              Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetUVType) == 0x000001, "Wrong alignment on UIPolygon_SetUVType");
static_assert(sizeof(UIPolygon_SetUVType) == 0x000001, "Wrong size on UIPolygon_SetUVType");
static_assert(offsetof(UIPolygon_SetUVType, Value) == 0x000000, "Member 'UIPolygon_SetUVType::Value' has a wrong offset!");

// Function LGUI.UIPolygon.SetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygon_SetVertexOffsetArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_SetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygon_SetVertexOffsetArray");
static_assert(sizeof(UIPolygon_SetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygon_SetVertexOffsetArray");
static_assert(offsetof(UIPolygon_SetVertexOffsetArray, Value) == 0x000000, "Member 'UIPolygon_SetVertexOffsetArray::Value' has a wrong offset!");

// Function LGUI.UIPolygon.StartAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygon_StartAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_StartAngleTo) == 0x000008, "Wrong alignment on UIPolygon_StartAngleTo");
static_assert(sizeof(UIPolygon_StartAngleTo) == 0x000018, "Wrong size on UIPolygon_StartAngleTo");
static_assert(offsetof(UIPolygon_StartAngleTo, endValue) == 0x000000, "Member 'UIPolygon_StartAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, Duration) == 0x000004, "Member 'UIPolygon_StartAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, Delay) == 0x000008, "Member 'UIPolygon_StartAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, easetype) == 0x00000C, "Member 'UIPolygon_StartAngleTo::easetype' has a wrong offset!");
static_assert(offsetof(UIPolygon_StartAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygon_StartAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_GetEndAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetEndAngle) == 0x000004, "Wrong alignment on UIPolygon_GetEndAngle");
static_assert(sizeof(UIPolygon_GetEndAngle) == 0x000004, "Wrong size on UIPolygon_GetEndAngle");
static_assert(offsetof(UIPolygon_GetEndAngle, ReturnValue) == 0x000000, "Member 'UIPolygon_GetEndAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetFullCycle
// 0x0001 (0x0001 - 0x0000)
struct UIPolygon_GetFullCycle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetFullCycle) == 0x000001, "Wrong alignment on UIPolygon_GetFullCycle");
static_assert(sizeof(UIPolygon_GetFullCycle) == 0x000001, "Wrong size on UIPolygon_GetFullCycle");
static_assert(offsetof(UIPolygon_GetFullCycle, ReturnValue) == 0x000000, "Member 'UIPolygon_GetFullCycle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_GetSides final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetSides) == 0x000004, "Wrong alignment on UIPolygon_GetSides");
static_assert(sizeof(UIPolygon_GetSides) == 0x000004, "Wrong size on UIPolygon_GetSides");
static_assert(offsetof(UIPolygon_GetSides, ReturnValue) == 0x000000, "Member 'UIPolygon_GetSides::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygon_GetStartAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetStartAngle) == 0x000004, "Wrong alignment on UIPolygon_GetStartAngle");
static_assert(sizeof(UIPolygon_GetStartAngle) == 0x000004, "Wrong size on UIPolygon_GetStartAngle");
static_assert(offsetof(UIPolygon_GetStartAngle, ReturnValue) == 0x000000, "Member 'UIPolygon_GetStartAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetUVType
// 0x0001 (0x0001 - 0x0000)
struct UIPolygon_GetUVType final
{
public:
	EUIPolygonUVType                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetUVType) == 0x000001, "Wrong alignment on UIPolygon_GetUVType");
static_assert(sizeof(UIPolygon_GetUVType) == 0x000001, "Wrong size on UIPolygon_GetUVType");
static_assert(offsetof(UIPolygon_GetUVType, ReturnValue) == 0x000000, "Member 'UIPolygon_GetUVType::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygon.GetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygon_GetVertexOffsetArray final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygon_GetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygon_GetVertexOffsetArray");
static_assert(sizeof(UIPolygon_GetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygon_GetVertexOffsetArray");
static_assert(offsetof(UIPolygon_GetVertexOffsetArray, ReturnValue) == 0x000000, "Member 'UIPolygon_GetVertexOffsetArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonActor.GetUIPolygon
// 0x0008 (0x0008 - 0x0000)
struct UIPolygonActor_GetUIPolygon final
{
public:
	class UUIPolygon*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonActor_GetUIPolygon) == 0x000008, "Wrong alignment on UIPolygonActor_GetUIPolygon");
static_assert(sizeof(UIPolygonActor_GetUIPolygon) == 0x000008, "Wrong size on UIPolygonActor_GetUIPolygon");
static_assert(offsetof(UIPolygonActor_GetUIPolygon, ReturnValue) == 0x000000, "Member 'UIPolygonActor_GetUIPolygon::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.EndAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygonLine_EndAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_EndAngleTo) == 0x000008, "Wrong alignment on UIPolygonLine_EndAngleTo");
static_assert(sizeof(UIPolygonLine_EndAngleTo) == 0x000018, "Wrong size on UIPolygonLine_EndAngleTo");
static_assert(offsetof(UIPolygonLine_EndAngleTo, endValue) == 0x000000, "Member 'UIPolygonLine_EndAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, Duration) == 0x000004, "Member 'UIPolygonLine_EndAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, Delay) == 0x000008, "Member 'UIPolygonLine_EndAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, easetype) == 0x00000C, "Member 'UIPolygonLine_EndAngleTo::easetype' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_EndAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygonLine_EndAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_SetEndAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetEndAngle) == 0x000004, "Wrong alignment on UIPolygonLine_SetEndAngle");
static_assert(sizeof(UIPolygonLine_SetEndAngle) == 0x000004, "Wrong size on UIPolygonLine_SetEndAngle");
static_assert(offsetof(UIPolygonLine_SetEndAngle, Value) == 0x000000, "Member 'UIPolygonLine_SetEndAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetFullCycle
// 0x0001 (0x0001 - 0x0000)
struct UIPolygonLine_SetFullCycle final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetFullCycle) == 0x000001, "Wrong alignment on UIPolygonLine_SetFullCycle");
static_assert(sizeof(UIPolygonLine_SetFullCycle) == 0x000001, "Wrong size on UIPolygonLine_SetFullCycle");
static_assert(offsetof(UIPolygonLine_SetFullCycle, Value) == 0x000000, "Member 'UIPolygonLine_SetFullCycle::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_SetSides final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetSides) == 0x000004, "Wrong alignment on UIPolygonLine_SetSides");
static_assert(sizeof(UIPolygonLine_SetSides) == 0x000004, "Wrong size on UIPolygonLine_SetSides");
static_assert(offsetof(UIPolygonLine_SetSides, Value) == 0x000000, "Member 'UIPolygonLine_SetSides::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_SetStartAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetStartAngle) == 0x000004, "Wrong alignment on UIPolygonLine_SetStartAngle");
static_assert(sizeof(UIPolygonLine_SetStartAngle) == 0x000004, "Wrong size on UIPolygonLine_SetStartAngle");
static_assert(offsetof(UIPolygonLine_SetStartAngle, Value) == 0x000000, "Member 'UIPolygonLine_SetStartAngle::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.SetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygonLine_SetVertexOffsetArray final
{
public:
	TArray<float>                                 Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_SetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygonLine_SetVertexOffsetArray");
static_assert(sizeof(UIPolygonLine_SetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygonLine_SetVertexOffsetArray");
static_assert(offsetof(UIPolygonLine_SetVertexOffsetArray, Value) == 0x000000, "Member 'UIPolygonLine_SetVertexOffsetArray::Value' has a wrong offset!");

// Function LGUI.UIPolygonLine.StartAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIPolygonLine_StartAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_StartAngleTo) == 0x000008, "Wrong alignment on UIPolygonLine_StartAngleTo");
static_assert(sizeof(UIPolygonLine_StartAngleTo) == 0x000018, "Wrong size on UIPolygonLine_StartAngleTo");
static_assert(offsetof(UIPolygonLine_StartAngleTo, endValue) == 0x000000, "Member 'UIPolygonLine_StartAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, Duration) == 0x000004, "Member 'UIPolygonLine_StartAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, Delay) == 0x000008, "Member 'UIPolygonLine_StartAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, easetype) == 0x00000C, "Member 'UIPolygonLine_StartAngleTo::easetype' has a wrong offset!");
static_assert(offsetof(UIPolygonLine_StartAngleTo, ReturnValue) == 0x000010, "Member 'UIPolygonLine_StartAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_GetEndAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetEndAngle) == 0x000004, "Wrong alignment on UIPolygonLine_GetEndAngle");
static_assert(sizeof(UIPolygonLine_GetEndAngle) == 0x000004, "Wrong size on UIPolygonLine_GetEndAngle");
static_assert(offsetof(UIPolygonLine_GetEndAngle, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetEndAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetFullCycle
// 0x0001 (0x0001 - 0x0000)
struct UIPolygonLine_GetFullCycle final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetFullCycle) == 0x000001, "Wrong alignment on UIPolygonLine_GetFullCycle");
static_assert(sizeof(UIPolygonLine_GetFullCycle) == 0x000001, "Wrong size on UIPolygonLine_GetFullCycle");
static_assert(offsetof(UIPolygonLine_GetFullCycle, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetFullCycle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetSides
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_GetSides final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetSides) == 0x000004, "Wrong alignment on UIPolygonLine_GetSides");
static_assert(sizeof(UIPolygonLine_GetSides) == 0x000004, "Wrong size on UIPolygonLine_GetSides");
static_assert(offsetof(UIPolygonLine_GetSides, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetSides::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIPolygonLine_GetStartAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetStartAngle) == 0x000004, "Wrong alignment on UIPolygonLine_GetStartAngle");
static_assert(sizeof(UIPolygonLine_GetStartAngle) == 0x000004, "Wrong size on UIPolygonLine_GetStartAngle");
static_assert(offsetof(UIPolygonLine_GetStartAngle, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetStartAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLine.GetVertexOffsetArray
// 0x0010 (0x0010 - 0x0000)
struct UIPolygonLine_GetVertexOffsetArray final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLine_GetVertexOffsetArray) == 0x000008, "Wrong alignment on UIPolygonLine_GetVertexOffsetArray");
static_assert(sizeof(UIPolygonLine_GetVertexOffsetArray) == 0x000010, "Wrong size on UIPolygonLine_GetVertexOffsetArray");
static_assert(offsetof(UIPolygonLine_GetVertexOffsetArray, ReturnValue) == 0x000000, "Member 'UIPolygonLine_GetVertexOffsetArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIPolygonLineActor.GetUIPolygonLine
// 0x0008 (0x0008 - 0x0000)
struct UIPolygonLineActor_GetUIPolygonLine final
{
public:
	class UUIPolygonLine*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIPolygonLineActor_GetUIPolygonLine) == 0x000008, "Wrong alignment on UIPolygonLineActor_GetUIPolygonLine");
static_assert(sizeof(UIPolygonLineActor_GetUIPolygonLine) == 0x000008, "Wrong size on UIPolygonLineActor_GetUIPolygonLine");
static_assert(offsetof(UIPolygonLineActor_GetUIPolygonLine, ReturnValue) == 0x000000, "Member 'UIPolygonLineActor_GetUIPolygonLine::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyAlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BodyAlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyAlphaTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyAlphaTo");
static_assert(sizeof(UIProceduralRect_BodyAlphaTo) == 0x000018, "Wrong size on UIProceduralRect_BodyAlphaTo");
static_assert(offsetof(UIProceduralRect_BodyAlphaTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyAlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyAlphaTo, Duration) == 0x000004, "Member 'UIProceduralRect_BodyAlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyAlphaTo, Delay) == 0x000008, "Member 'UIProceduralRect_BodyAlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyAlphaTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BodyAlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyAlphaTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BodyAlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BodyColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyColorTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyColorTo");
static_assert(sizeof(UIProceduralRect_BodyColorTo) == 0x000018, "Wrong size on UIProceduralRect_BodyColorTo");
static_assert(offsetof(UIProceduralRect_BodyColorTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyColorTo, Duration) == 0x000004, "Member 'UIProceduralRect_BodyColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyColorTo, Delay) == 0x000008, "Member 'UIProceduralRect_BodyColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyColorTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BodyColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyColorTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BodyColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyGradientAlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BodyGradientAlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyGradientAlphaTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyGradientAlphaTo");
static_assert(sizeof(UIProceduralRect_BodyGradientAlphaTo) == 0x000018, "Wrong size on UIProceduralRect_BodyGradientAlphaTo");
static_assert(offsetof(UIProceduralRect_BodyGradientAlphaTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyGradientAlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientAlphaTo, Duration) == 0x000004, "Member 'UIProceduralRect_BodyGradientAlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientAlphaTo, Delay) == 0x000008, "Member 'UIProceduralRect_BodyGradientAlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientAlphaTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BodyGradientAlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientAlphaTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BodyGradientAlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyGradientCenterTo
// 0x0028 (0x0028 - 0x0000)
struct UIProceduralRect_BodyGradientCenterTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyGradientCenterTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyGradientCenterTo");
static_assert(sizeof(UIProceduralRect_BodyGradientCenterTo) == 0x000028, "Wrong size on UIProceduralRect_BodyGradientCenterTo");
static_assert(offsetof(UIProceduralRect_BodyGradientCenterTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyGradientCenterTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientCenterTo, Duration) == 0x000010, "Member 'UIProceduralRect_BodyGradientCenterTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientCenterTo, Delay) == 0x000014, "Member 'UIProceduralRect_BodyGradientCenterTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientCenterTo, Ease) == 0x000018, "Member 'UIProceduralRect_BodyGradientCenterTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientCenterTo, ReturnValue) == 0x000020, "Member 'UIProceduralRect_BodyGradientCenterTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyGradientColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BodyGradientColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyGradientColorTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyGradientColorTo");
static_assert(sizeof(UIProceduralRect_BodyGradientColorTo) == 0x000018, "Wrong size on UIProceduralRect_BodyGradientColorTo");
static_assert(offsetof(UIProceduralRect_BodyGradientColorTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyGradientColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientColorTo, Duration) == 0x000004, "Member 'UIProceduralRect_BodyGradientColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientColorTo, Delay) == 0x000008, "Member 'UIProceduralRect_BodyGradientColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientColorTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BodyGradientColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientColorTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BodyGradientColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyGradientRadiusTo
// 0x0028 (0x0028 - 0x0000)
struct UIProceduralRect_BodyGradientRadiusTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyGradientRadiusTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyGradientRadiusTo");
static_assert(sizeof(UIProceduralRect_BodyGradientRadiusTo) == 0x000028, "Wrong size on UIProceduralRect_BodyGradientRadiusTo");
static_assert(offsetof(UIProceduralRect_BodyGradientRadiusTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyGradientRadiusTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRadiusTo, Duration) == 0x000010, "Member 'UIProceduralRect_BodyGradientRadiusTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRadiusTo, Delay) == 0x000014, "Member 'UIProceduralRect_BodyGradientRadiusTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRadiusTo, Ease) == 0x000018, "Member 'UIProceduralRect_BodyGradientRadiusTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRadiusTo, ReturnValue) == 0x000020, "Member 'UIProceduralRect_BodyGradientRadiusTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BodyGradientRotationTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BodyGradientRotationTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BodyGradientRotationTo) == 0x000008, "Wrong alignment on UIProceduralRect_BodyGradientRotationTo");
static_assert(sizeof(UIProceduralRect_BodyGradientRotationTo) == 0x000018, "Wrong size on UIProceduralRect_BodyGradientRotationTo");
static_assert(offsetof(UIProceduralRect_BodyGradientRotationTo, endValue) == 0x000000, "Member 'UIProceduralRect_BodyGradientRotationTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRotationTo, Duration) == 0x000004, "Member 'UIProceduralRect_BodyGradientRotationTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRotationTo, Delay) == 0x000008, "Member 'UIProceduralRect_BodyGradientRotationTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRotationTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BodyGradientRotationTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BodyGradientRotationTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BodyGradientRotationTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderAlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BorderAlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderAlphaTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderAlphaTo");
static_assert(sizeof(UIProceduralRect_BorderAlphaTo) == 0x000018, "Wrong size on UIProceduralRect_BorderAlphaTo");
static_assert(offsetof(UIProceduralRect_BorderAlphaTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderAlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderAlphaTo, Duration) == 0x000004, "Member 'UIProceduralRect_BorderAlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderAlphaTo, Delay) == 0x000008, "Member 'UIProceduralRect_BorderAlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderAlphaTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BorderAlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderAlphaTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BorderAlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BorderColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderColorTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderColorTo");
static_assert(sizeof(UIProceduralRect_BorderColorTo) == 0x000018, "Wrong size on UIProceduralRect_BorderColorTo");
static_assert(offsetof(UIProceduralRect_BorderColorTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderColorTo, Duration) == 0x000004, "Member 'UIProceduralRect_BorderColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderColorTo, Delay) == 0x000008, "Member 'UIProceduralRect_BorderColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderColorTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BorderColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderColorTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BorderColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderGradientAlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BorderGradientAlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderGradientAlphaTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderGradientAlphaTo");
static_assert(sizeof(UIProceduralRect_BorderGradientAlphaTo) == 0x000018, "Wrong size on UIProceduralRect_BorderGradientAlphaTo");
static_assert(offsetof(UIProceduralRect_BorderGradientAlphaTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderGradientAlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientAlphaTo, Duration) == 0x000004, "Member 'UIProceduralRect_BorderGradientAlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientAlphaTo, Delay) == 0x000008, "Member 'UIProceduralRect_BorderGradientAlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientAlphaTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BorderGradientAlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientAlphaTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BorderGradientAlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderGradientCenterTo
// 0x0028 (0x0028 - 0x0000)
struct UIProceduralRect_BorderGradientCenterTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderGradientCenterTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderGradientCenterTo");
static_assert(sizeof(UIProceduralRect_BorderGradientCenterTo) == 0x000028, "Wrong size on UIProceduralRect_BorderGradientCenterTo");
static_assert(offsetof(UIProceduralRect_BorderGradientCenterTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderGradientCenterTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientCenterTo, Duration) == 0x000010, "Member 'UIProceduralRect_BorderGradientCenterTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientCenterTo, Delay) == 0x000014, "Member 'UIProceduralRect_BorderGradientCenterTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientCenterTo, Ease) == 0x000018, "Member 'UIProceduralRect_BorderGradientCenterTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientCenterTo, ReturnValue) == 0x000020, "Member 'UIProceduralRect_BorderGradientCenterTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderGradientColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BorderGradientColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderGradientColorTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderGradientColorTo");
static_assert(sizeof(UIProceduralRect_BorderGradientColorTo) == 0x000018, "Wrong size on UIProceduralRect_BorderGradientColorTo");
static_assert(offsetof(UIProceduralRect_BorderGradientColorTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderGradientColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientColorTo, Duration) == 0x000004, "Member 'UIProceduralRect_BorderGradientColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientColorTo, Delay) == 0x000008, "Member 'UIProceduralRect_BorderGradientColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientColorTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BorderGradientColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientColorTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BorderGradientColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderGradientRadiusTo
// 0x0028 (0x0028 - 0x0000)
struct UIProceduralRect_BorderGradientRadiusTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderGradientRadiusTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderGradientRadiusTo");
static_assert(sizeof(UIProceduralRect_BorderGradientRadiusTo) == 0x000028, "Wrong size on UIProceduralRect_BorderGradientRadiusTo");
static_assert(offsetof(UIProceduralRect_BorderGradientRadiusTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderGradientRadiusTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRadiusTo, Duration) == 0x000010, "Member 'UIProceduralRect_BorderGradientRadiusTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRadiusTo, Delay) == 0x000014, "Member 'UIProceduralRect_BorderGradientRadiusTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRadiusTo, Ease) == 0x000018, "Member 'UIProceduralRect_BorderGradientRadiusTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRadiusTo, ReturnValue) == 0x000020, "Member 'UIProceduralRect_BorderGradientRadiusTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderGradientRotationTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BorderGradientRotationTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderGradientRotationTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderGradientRotationTo");
static_assert(sizeof(UIProceduralRect_BorderGradientRotationTo) == 0x000018, "Wrong size on UIProceduralRect_BorderGradientRotationTo");
static_assert(offsetof(UIProceduralRect_BorderGradientRotationTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderGradientRotationTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRotationTo, Duration) == 0x000004, "Member 'UIProceduralRect_BorderGradientRotationTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRotationTo, Delay) == 0x000008, "Member 'UIProceduralRect_BorderGradientRotationTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRotationTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BorderGradientRotationTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderGradientRotationTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BorderGradientRotationTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.BorderWidthTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_BorderWidthTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_BorderWidthTo) == 0x000008, "Wrong alignment on UIProceduralRect_BorderWidthTo");
static_assert(sizeof(UIProceduralRect_BorderWidthTo) == 0x000018, "Wrong size on UIProceduralRect_BorderWidthTo");
static_assert(offsetof(UIProceduralRect_BorderWidthTo, endValue) == 0x000000, "Member 'UIProceduralRect_BorderWidthTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderWidthTo, Duration) == 0x000004, "Member 'UIProceduralRect_BorderWidthTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderWidthTo, Delay) == 0x000008, "Member 'UIProceduralRect_BorderWidthTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderWidthTo, Ease) == 0x00000C, "Member 'UIProceduralRect_BorderWidthTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_BorderWidthTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_BorderWidthTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.CornerRadiusTo
// 0x0040 (0x0040 - 0x0000)
struct UIProceduralRect_CornerRadiusTo final
{
public:
	struct FVector4                               endValue;                                          // 0x0000(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIProceduralRect_CornerRadiusTo) == 0x000010, "Wrong alignment on UIProceduralRect_CornerRadiusTo");
static_assert(sizeof(UIProceduralRect_CornerRadiusTo) == 0x000040, "Wrong size on UIProceduralRect_CornerRadiusTo");
static_assert(offsetof(UIProceduralRect_CornerRadiusTo, endValue) == 0x000000, "Member 'UIProceduralRect_CornerRadiusTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_CornerRadiusTo, Duration) == 0x000020, "Member 'UIProceduralRect_CornerRadiusTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_CornerRadiusTo, Delay) == 0x000024, "Member 'UIProceduralRect_CornerRadiusTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_CornerRadiusTo, Ease) == 0x000028, "Member 'UIProceduralRect_CornerRadiusTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_CornerRadiusTo, ReturnValue) == 0x000030, "Member 'UIProceduralRect_CornerRadiusTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.InnerShadowAlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_InnerShadowAlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_InnerShadowAlphaTo) == 0x000008, "Wrong alignment on UIProceduralRect_InnerShadowAlphaTo");
static_assert(sizeof(UIProceduralRect_InnerShadowAlphaTo) == 0x000018, "Wrong size on UIProceduralRect_InnerShadowAlphaTo");
static_assert(offsetof(UIProceduralRect_InnerShadowAlphaTo, endValue) == 0x000000, "Member 'UIProceduralRect_InnerShadowAlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAlphaTo, Duration) == 0x000004, "Member 'UIProceduralRect_InnerShadowAlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAlphaTo, Delay) == 0x000008, "Member 'UIProceduralRect_InnerShadowAlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAlphaTo, Ease) == 0x00000C, "Member 'UIProceduralRect_InnerShadowAlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAlphaTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_InnerShadowAlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.InnerShadowAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_InnerShadowAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_InnerShadowAngleTo) == 0x000008, "Wrong alignment on UIProceduralRect_InnerShadowAngleTo");
static_assert(sizeof(UIProceduralRect_InnerShadowAngleTo) == 0x000018, "Wrong size on UIProceduralRect_InnerShadowAngleTo");
static_assert(offsetof(UIProceduralRect_InnerShadowAngleTo, endValue) == 0x000000, "Member 'UIProceduralRect_InnerShadowAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAngleTo, Duration) == 0x000004, "Member 'UIProceduralRect_InnerShadowAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAngleTo, Delay) == 0x000008, "Member 'UIProceduralRect_InnerShadowAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAngleTo, Ease) == 0x00000C, "Member 'UIProceduralRect_InnerShadowAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowAngleTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_InnerShadowAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.InnerShadowBlurTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_InnerShadowBlurTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_InnerShadowBlurTo) == 0x000008, "Wrong alignment on UIProceduralRect_InnerShadowBlurTo");
static_assert(sizeof(UIProceduralRect_InnerShadowBlurTo) == 0x000018, "Wrong size on UIProceduralRect_InnerShadowBlurTo");
static_assert(offsetof(UIProceduralRect_InnerShadowBlurTo, endValue) == 0x000000, "Member 'UIProceduralRect_InnerShadowBlurTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowBlurTo, Duration) == 0x000004, "Member 'UIProceduralRect_InnerShadowBlurTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowBlurTo, Delay) == 0x000008, "Member 'UIProceduralRect_InnerShadowBlurTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowBlurTo, Ease) == 0x00000C, "Member 'UIProceduralRect_InnerShadowBlurTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowBlurTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_InnerShadowBlurTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.InnerShadowColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_InnerShadowColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_InnerShadowColorTo) == 0x000008, "Wrong alignment on UIProceduralRect_InnerShadowColorTo");
static_assert(sizeof(UIProceduralRect_InnerShadowColorTo) == 0x000018, "Wrong size on UIProceduralRect_InnerShadowColorTo");
static_assert(offsetof(UIProceduralRect_InnerShadowColorTo, endValue) == 0x000000, "Member 'UIProceduralRect_InnerShadowColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowColorTo, Duration) == 0x000004, "Member 'UIProceduralRect_InnerShadowColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowColorTo, Delay) == 0x000008, "Member 'UIProceduralRect_InnerShadowColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowColorTo, Ease) == 0x00000C, "Member 'UIProceduralRect_InnerShadowColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowColorTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_InnerShadowColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.InnerShadowDistanceTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_InnerShadowDistanceTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_InnerShadowDistanceTo) == 0x000008, "Wrong alignment on UIProceduralRect_InnerShadowDistanceTo");
static_assert(sizeof(UIProceduralRect_InnerShadowDistanceTo) == 0x000018, "Wrong size on UIProceduralRect_InnerShadowDistanceTo");
static_assert(offsetof(UIProceduralRect_InnerShadowDistanceTo, endValue) == 0x000000, "Member 'UIProceduralRect_InnerShadowDistanceTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowDistanceTo, Duration) == 0x000004, "Member 'UIProceduralRect_InnerShadowDistanceTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowDistanceTo, Delay) == 0x000008, "Member 'UIProceduralRect_InnerShadowDistanceTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowDistanceTo, Ease) == 0x00000C, "Member 'UIProceduralRect_InnerShadowDistanceTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowDistanceTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_InnerShadowDistanceTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.InnerShadowSizeTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_InnerShadowSizeTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_InnerShadowSizeTo) == 0x000008, "Wrong alignment on UIProceduralRect_InnerShadowSizeTo");
static_assert(sizeof(UIProceduralRect_InnerShadowSizeTo) == 0x000018, "Wrong size on UIProceduralRect_InnerShadowSizeTo");
static_assert(offsetof(UIProceduralRect_InnerShadowSizeTo, endValue) == 0x000000, "Member 'UIProceduralRect_InnerShadowSizeTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowSizeTo, Duration) == 0x000004, "Member 'UIProceduralRect_InnerShadowSizeTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowSizeTo, Delay) == 0x000008, "Member 'UIProceduralRect_InnerShadowSizeTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowSizeTo, Ease) == 0x00000C, "Member 'UIProceduralRect_InnerShadowSizeTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_InnerShadowSizeTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_InnerShadowSizeTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.OuterShadowAlphaTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_OuterShadowAlphaTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_OuterShadowAlphaTo) == 0x000008, "Wrong alignment on UIProceduralRect_OuterShadowAlphaTo");
static_assert(sizeof(UIProceduralRect_OuterShadowAlphaTo) == 0x000018, "Wrong size on UIProceduralRect_OuterShadowAlphaTo");
static_assert(offsetof(UIProceduralRect_OuterShadowAlphaTo, endValue) == 0x000000, "Member 'UIProceduralRect_OuterShadowAlphaTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAlphaTo, Duration) == 0x000004, "Member 'UIProceduralRect_OuterShadowAlphaTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAlphaTo, Delay) == 0x000008, "Member 'UIProceduralRect_OuterShadowAlphaTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAlphaTo, Ease) == 0x00000C, "Member 'UIProceduralRect_OuterShadowAlphaTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAlphaTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_OuterShadowAlphaTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.OuterShadowAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_OuterShadowAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_OuterShadowAngleTo) == 0x000008, "Wrong alignment on UIProceduralRect_OuterShadowAngleTo");
static_assert(sizeof(UIProceduralRect_OuterShadowAngleTo) == 0x000018, "Wrong size on UIProceduralRect_OuterShadowAngleTo");
static_assert(offsetof(UIProceduralRect_OuterShadowAngleTo, endValue) == 0x000000, "Member 'UIProceduralRect_OuterShadowAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAngleTo, Duration) == 0x000004, "Member 'UIProceduralRect_OuterShadowAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAngleTo, Delay) == 0x000008, "Member 'UIProceduralRect_OuterShadowAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAngleTo, Ease) == 0x00000C, "Member 'UIProceduralRect_OuterShadowAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowAngleTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_OuterShadowAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.OuterShadowBlurTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_OuterShadowBlurTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_OuterShadowBlurTo) == 0x000008, "Wrong alignment on UIProceduralRect_OuterShadowBlurTo");
static_assert(sizeof(UIProceduralRect_OuterShadowBlurTo) == 0x000018, "Wrong size on UIProceduralRect_OuterShadowBlurTo");
static_assert(offsetof(UIProceduralRect_OuterShadowBlurTo, endValue) == 0x000000, "Member 'UIProceduralRect_OuterShadowBlurTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowBlurTo, Duration) == 0x000004, "Member 'UIProceduralRect_OuterShadowBlurTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowBlurTo, Delay) == 0x000008, "Member 'UIProceduralRect_OuterShadowBlurTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowBlurTo, Ease) == 0x00000C, "Member 'UIProceduralRect_OuterShadowBlurTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowBlurTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_OuterShadowBlurTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.OuterShadowColorTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_OuterShadowColorTo final
{
public:
	struct FColor                                 endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_OuterShadowColorTo) == 0x000008, "Wrong alignment on UIProceduralRect_OuterShadowColorTo");
static_assert(sizeof(UIProceduralRect_OuterShadowColorTo) == 0x000018, "Wrong size on UIProceduralRect_OuterShadowColorTo");
static_assert(offsetof(UIProceduralRect_OuterShadowColorTo, endValue) == 0x000000, "Member 'UIProceduralRect_OuterShadowColorTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowColorTo, Duration) == 0x000004, "Member 'UIProceduralRect_OuterShadowColorTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowColorTo, Delay) == 0x000008, "Member 'UIProceduralRect_OuterShadowColorTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowColorTo, Ease) == 0x00000C, "Member 'UIProceduralRect_OuterShadowColorTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowColorTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_OuterShadowColorTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.OuterShadowDistanceTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_OuterShadowDistanceTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_OuterShadowDistanceTo) == 0x000008, "Wrong alignment on UIProceduralRect_OuterShadowDistanceTo");
static_assert(sizeof(UIProceduralRect_OuterShadowDistanceTo) == 0x000018, "Wrong size on UIProceduralRect_OuterShadowDistanceTo");
static_assert(offsetof(UIProceduralRect_OuterShadowDistanceTo, endValue) == 0x000000, "Member 'UIProceduralRect_OuterShadowDistanceTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowDistanceTo, Duration) == 0x000004, "Member 'UIProceduralRect_OuterShadowDistanceTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowDistanceTo, Delay) == 0x000008, "Member 'UIProceduralRect_OuterShadowDistanceTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowDistanceTo, Ease) == 0x00000C, "Member 'UIProceduralRect_OuterShadowDistanceTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowDistanceTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_OuterShadowDistanceTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.OuterShadowSizeTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_OuterShadowSizeTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_OuterShadowSizeTo) == 0x000008, "Wrong alignment on UIProceduralRect_OuterShadowSizeTo");
static_assert(sizeof(UIProceduralRect_OuterShadowSizeTo) == 0x000018, "Wrong size on UIProceduralRect_OuterShadowSizeTo");
static_assert(offsetof(UIProceduralRect_OuterShadowSizeTo, endValue) == 0x000000, "Member 'UIProceduralRect_OuterShadowSizeTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowSizeTo, Duration) == 0x000004, "Member 'UIProceduralRect_OuterShadowSizeTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowSizeTo, Delay) == 0x000008, "Member 'UIProceduralRect_OuterShadowSizeTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowSizeTo, Ease) == 0x00000C, "Member 'UIProceduralRect_OuterShadowSizeTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_OuterShadowSizeTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_OuterShadowSizeTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.RadialFillAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_RadialFillAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_RadialFillAngleTo) == 0x000008, "Wrong alignment on UIProceduralRect_RadialFillAngleTo");
static_assert(sizeof(UIProceduralRect_RadialFillAngleTo) == 0x000018, "Wrong size on UIProceduralRect_RadialFillAngleTo");
static_assert(offsetof(UIProceduralRect_RadialFillAngleTo, endValue) == 0x000000, "Member 'UIProceduralRect_RadialFillAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillAngleTo, Duration) == 0x000004, "Member 'UIProceduralRect_RadialFillAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillAngleTo, Delay) == 0x000008, "Member 'UIProceduralRect_RadialFillAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillAngleTo, Ease) == 0x00000C, "Member 'UIProceduralRect_RadialFillAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillAngleTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_RadialFillAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.RadialFillCenterTo
// 0x0028 (0x0028 - 0x0000)
struct UIProceduralRect_RadialFillCenterTo final
{
public:
	struct FVector2D                              endValue;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_RadialFillCenterTo) == 0x000008, "Wrong alignment on UIProceduralRect_RadialFillCenterTo");
static_assert(sizeof(UIProceduralRect_RadialFillCenterTo) == 0x000028, "Wrong size on UIProceduralRect_RadialFillCenterTo");
static_assert(offsetof(UIProceduralRect_RadialFillCenterTo, endValue) == 0x000000, "Member 'UIProceduralRect_RadialFillCenterTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillCenterTo, Duration) == 0x000010, "Member 'UIProceduralRect_RadialFillCenterTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillCenterTo, Delay) == 0x000014, "Member 'UIProceduralRect_RadialFillCenterTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillCenterTo, Ease) == 0x000018, "Member 'UIProceduralRect_RadialFillCenterTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillCenterTo, ReturnValue) == 0x000020, "Member 'UIProceduralRect_RadialFillCenterTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.RadialFillRotationTo
// 0x0018 (0x0018 - 0x0000)
struct UIProceduralRect_RadialFillRotationTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_RadialFillRotationTo) == 0x000008, "Wrong alignment on UIProceduralRect_RadialFillRotationTo");
static_assert(sizeof(UIProceduralRect_RadialFillRotationTo) == 0x000018, "Wrong size on UIProceduralRect_RadialFillRotationTo");
static_assert(offsetof(UIProceduralRect_RadialFillRotationTo, endValue) == 0x000000, "Member 'UIProceduralRect_RadialFillRotationTo::endValue' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillRotationTo, Duration) == 0x000004, "Member 'UIProceduralRect_RadialFillRotationTo::Duration' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillRotationTo, Delay) == 0x000008, "Member 'UIProceduralRect_RadialFillRotationTo::Delay' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillRotationTo, Ease) == 0x00000C, "Member 'UIProceduralRect_RadialFillRotationTo::Ease' has a wrong offset!");
static_assert(offsetof(UIProceduralRect_RadialFillRotationTo, ReturnValue) == 0x000010, "Member 'UIProceduralRect_RadialFillRotationTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBodyColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyColor) == 0x000004, "Wrong alignment on UIProceduralRect_SetBodyColor");
static_assert(sizeof(UIProceduralRect_SetBodyColor) == 0x000004, "Wrong size on UIProceduralRect_SetBodyColor");
static_assert(offsetof(UIProceduralRect_SetBodyColor, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyColor::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyGradientCenter
// 0x0010 (0x0010 - 0x0000)
struct UIProceduralRect_SetBodyGradientCenter final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyGradientCenter) == 0x000008, "Wrong alignment on UIProceduralRect_SetBodyGradientCenter");
static_assert(sizeof(UIProceduralRect_SetBodyGradientCenter) == 0x000010, "Wrong size on UIProceduralRect_SetBodyGradientCenter");
static_assert(offsetof(UIProceduralRect_SetBodyGradientCenter, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyGradientCenter::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyGradientCenterUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBodyGradientCenterUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyGradientCenterUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBodyGradientCenterUnitMode");
static_assert(sizeof(UIProceduralRect_SetBodyGradientCenterUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetBodyGradientCenterUnitMode");
static_assert(offsetof(UIProceduralRect_SetBodyGradientCenterUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyGradientCenterUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBodyGradientColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyGradientColor) == 0x000004, "Wrong alignment on UIProceduralRect_SetBodyGradientColor");
static_assert(sizeof(UIProceduralRect_SetBodyGradientColor) == 0x000004, "Wrong size on UIProceduralRect_SetBodyGradientColor");
static_assert(offsetof(UIProceduralRect_SetBodyGradientColor, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyGradientColor::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyGradientRadius
// 0x0010 (0x0010 - 0x0000)
struct UIProceduralRect_SetBodyGradientRadius final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyGradientRadius) == 0x000008, "Wrong alignment on UIProceduralRect_SetBodyGradientRadius");
static_assert(sizeof(UIProceduralRect_SetBodyGradientRadius) == 0x000010, "Wrong size on UIProceduralRect_SetBodyGradientRadius");
static_assert(offsetof(UIProceduralRect_SetBodyGradientRadius, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyGradientRadius::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyGradientRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBodyGradientRadiusUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyGradientRadiusUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBodyGradientRadiusUnitMode");
static_assert(sizeof(UIProceduralRect_SetBodyGradientRadiusUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetBodyGradientRadiusUnitMode");
static_assert(offsetof(UIProceduralRect_SetBodyGradientRadiusUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyGradientRadiusUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyGradientRotation
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBodyGradientRotation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyGradientRotation) == 0x000004, "Wrong alignment on UIProceduralRect_SetBodyGradientRotation");
static_assert(sizeof(UIProceduralRect_SetBodyGradientRotation) == 0x000004, "Wrong size on UIProceduralRect_SetBodyGradientRotation");
static_assert(offsetof(UIProceduralRect_SetBodyGradientRotation, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyGradientRotation::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodySpriteTexture
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_SetBodySpriteTexture final
{
public:
	class ULGUISpriteData_BaseObject*             Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodySpriteTexture) == 0x000008, "Wrong alignment on UIProceduralRect_SetBodySpriteTexture");
static_assert(sizeof(UIProceduralRect_SetBodySpriteTexture) == 0x000008, "Wrong size on UIProceduralRect_SetBodySpriteTexture");
static_assert(offsetof(UIProceduralRect_SetBodySpriteTexture, Value) == 0x000000, "Member 'UIProceduralRect_SetBodySpriteTexture::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyTexture
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_SetBodyTexture final
{
public:
	class UTexture*                               Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyTexture) == 0x000008, "Wrong alignment on UIProceduralRect_SetBodyTexture");
static_assert(sizeof(UIProceduralRect_SetBodyTexture) == 0x000008, "Wrong size on UIProceduralRect_SetBodyTexture");
static_assert(offsetof(UIProceduralRect_SetBodyTexture, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyTexture::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyTextureMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBodyTextureMode final
{
public:
	EUIProceduralBodyTextureMode                  Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyTextureMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBodyTextureMode");
static_assert(sizeof(UIProceduralRect_SetBodyTextureMode) == 0x000001, "Wrong size on UIProceduralRect_SetBodyTextureMode");
static_assert(offsetof(UIProceduralRect_SetBodyTextureMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyTextureMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBodyTextureScaleMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBodyTextureScaleMode final
{
public:
	EUIProceduralRectTextureScaleMode             Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBodyTextureScaleMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBodyTextureScaleMode");
static_assert(sizeof(UIProceduralRect_SetBodyTextureScaleMode) == 0x000001, "Wrong size on UIProceduralRect_SetBodyTextureScaleMode");
static_assert(offsetof(UIProceduralRect_SetBodyTextureScaleMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBodyTextureScaleMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBorderColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderColor) == 0x000004, "Wrong alignment on UIProceduralRect_SetBorderColor");
static_assert(sizeof(UIProceduralRect_SetBorderColor) == 0x000004, "Wrong size on UIProceduralRect_SetBorderColor");
static_assert(offsetof(UIProceduralRect_SetBorderColor, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderColor::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderGradientCenter
// 0x0010 (0x0010 - 0x0000)
struct UIProceduralRect_SetBorderGradientCenter final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderGradientCenter) == 0x000008, "Wrong alignment on UIProceduralRect_SetBorderGradientCenter");
static_assert(sizeof(UIProceduralRect_SetBorderGradientCenter) == 0x000010, "Wrong size on UIProceduralRect_SetBorderGradientCenter");
static_assert(offsetof(UIProceduralRect_SetBorderGradientCenter, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderGradientCenter::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderGradientCenterUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBorderGradientCenterUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderGradientCenterUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBorderGradientCenterUnitMode");
static_assert(sizeof(UIProceduralRect_SetBorderGradientCenterUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetBorderGradientCenterUnitMode");
static_assert(offsetof(UIProceduralRect_SetBorderGradientCenterUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderGradientCenterUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBorderGradientColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderGradientColor) == 0x000004, "Wrong alignment on UIProceduralRect_SetBorderGradientColor");
static_assert(sizeof(UIProceduralRect_SetBorderGradientColor) == 0x000004, "Wrong size on UIProceduralRect_SetBorderGradientColor");
static_assert(offsetof(UIProceduralRect_SetBorderGradientColor, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderGradientColor::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderGradientRadius
// 0x0010 (0x0010 - 0x0000)
struct UIProceduralRect_SetBorderGradientRadius final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderGradientRadius) == 0x000008, "Wrong alignment on UIProceduralRect_SetBorderGradientRadius");
static_assert(sizeof(UIProceduralRect_SetBorderGradientRadius) == 0x000010, "Wrong size on UIProceduralRect_SetBorderGradientRadius");
static_assert(offsetof(UIProceduralRect_SetBorderGradientRadius, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderGradientRadius::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderGradientRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBorderGradientRadiusUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderGradientRadiusUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBorderGradientRadiusUnitMode");
static_assert(sizeof(UIProceduralRect_SetBorderGradientRadiusUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetBorderGradientRadiusUnitMode");
static_assert(offsetof(UIProceduralRect_SetBorderGradientRadiusUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderGradientRadiusUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderGradientRotation
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBorderGradientRotation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderGradientRotation) == 0x000004, "Wrong alignment on UIProceduralRect_SetBorderGradientRotation");
static_assert(sizeof(UIProceduralRect_SetBorderGradientRotation) == 0x000004, "Wrong size on UIProceduralRect_SetBorderGradientRotation");
static_assert(offsetof(UIProceduralRect_SetBorderGradientRotation, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderGradientRotation::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderWidth
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetBorderWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderWidth) == 0x000004, "Wrong alignment on UIProceduralRect_SetBorderWidth");
static_assert(sizeof(UIProceduralRect_SetBorderWidth) == 0x000004, "Wrong size on UIProceduralRect_SetBorderWidth");
static_assert(offsetof(UIProceduralRect_SetBorderWidth, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderWidth::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetBorderWidthUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetBorderWidthUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetBorderWidthUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetBorderWidthUnitMode");
static_assert(sizeof(UIProceduralRect_SetBorderWidthUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetBorderWidthUnitMode");
static_assert(offsetof(UIProceduralRect_SetBorderWidthUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetBorderWidthUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetCornerRadius
// 0x0020 (0x0020 - 0x0000)
struct UIProceduralRect_SetCornerRadius final
{
public:
	struct FVector4                               Value;                                             // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetCornerRadius) == 0x000010, "Wrong alignment on UIProceduralRect_SetCornerRadius");
static_assert(sizeof(UIProceduralRect_SetCornerRadius) == 0x000020, "Wrong size on UIProceduralRect_SetCornerRadius");
static_assert(offsetof(UIProceduralRect_SetCornerRadius, Value) == 0x000000, "Member 'UIProceduralRect_SetCornerRadius::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetCornerRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetCornerRadiusUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetCornerRadiusUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetCornerRadiusUnitMode");
static_assert(sizeof(UIProceduralRect_SetCornerRadiusUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetCornerRadiusUnitMode");
static_assert(offsetof(UIProceduralRect_SetCornerRadiusUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetCornerRadiusUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableBody
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableBody final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableBody) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableBody");
static_assert(sizeof(UIProceduralRect_SetEnableBody) == 0x000001, "Wrong size on UIProceduralRect_SetEnableBody");
static_assert(offsetof(UIProceduralRect_SetEnableBody, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableBody::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableBodyGradient
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableBodyGradient final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableBodyGradient) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableBodyGradient");
static_assert(sizeof(UIProceduralRect_SetEnableBodyGradient) == 0x000001, "Wrong size on UIProceduralRect_SetEnableBodyGradient");
static_assert(offsetof(UIProceduralRect_SetEnableBodyGradient, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableBodyGradient::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableBorder
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableBorder final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableBorder) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableBorder");
static_assert(sizeof(UIProceduralRect_SetEnableBorder) == 0x000001, "Wrong size on UIProceduralRect_SetEnableBorder");
static_assert(offsetof(UIProceduralRect_SetEnableBorder, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableBorder::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableBorderGradient
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableBorderGradient final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableBorderGradient) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableBorderGradient");
static_assert(sizeof(UIProceduralRect_SetEnableBorderGradient) == 0x000001, "Wrong size on UIProceduralRect_SetEnableBorderGradient");
static_assert(offsetof(UIProceduralRect_SetEnableBorderGradient, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableBorderGradient::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableInnerShadow
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableInnerShadow final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableInnerShadow) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableInnerShadow");
static_assert(sizeof(UIProceduralRect_SetEnableInnerShadow) == 0x000001, "Wrong size on UIProceduralRect_SetEnableInnerShadow");
static_assert(offsetof(UIProceduralRect_SetEnableInnerShadow, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableInnerShadow::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableOuterShadow
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableOuterShadow final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableOuterShadow) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableOuterShadow");
static_assert(sizeof(UIProceduralRect_SetEnableOuterShadow) == 0x000001, "Wrong size on UIProceduralRect_SetEnableOuterShadow");
static_assert(offsetof(UIProceduralRect_SetEnableOuterShadow, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableOuterShadow::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetEnableRadialFill
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetEnableRadialFill final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetEnableRadialFill) == 0x000001, "Wrong alignment on UIProceduralRect_SetEnableRadialFill");
static_assert(sizeof(UIProceduralRect_SetEnableRadialFill) == 0x000001, "Wrong size on UIProceduralRect_SetEnableRadialFill");
static_assert(offsetof(UIProceduralRect_SetEnableRadialFill, Value) == 0x000000, "Member 'UIProceduralRect_SetEnableRadialFill::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowAngle
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetInnerShadowAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowAngle) == 0x000004, "Wrong alignment on UIProceduralRect_SetInnerShadowAngle");
static_assert(sizeof(UIProceduralRect_SetInnerShadowAngle) == 0x000004, "Wrong size on UIProceduralRect_SetInnerShadowAngle");
static_assert(offsetof(UIProceduralRect_SetInnerShadowAngle, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowAngle::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowBlur
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetInnerShadowBlur final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowBlur) == 0x000004, "Wrong alignment on UIProceduralRect_SetInnerShadowBlur");
static_assert(sizeof(UIProceduralRect_SetInnerShadowBlur) == 0x000004, "Wrong size on UIProceduralRect_SetInnerShadowBlur");
static_assert(offsetof(UIProceduralRect_SetInnerShadowBlur, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowBlur::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowBlurUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetInnerShadowBlurUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowBlurUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetInnerShadowBlurUnitMode");
static_assert(sizeof(UIProceduralRect_SetInnerShadowBlurUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetInnerShadowBlurUnitMode");
static_assert(offsetof(UIProceduralRect_SetInnerShadowBlurUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowBlurUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetInnerShadowColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowColor) == 0x000004, "Wrong alignment on UIProceduralRect_SetInnerShadowColor");
static_assert(sizeof(UIProceduralRect_SetInnerShadowColor) == 0x000004, "Wrong size on UIProceduralRect_SetInnerShadowColor");
static_assert(offsetof(UIProceduralRect_SetInnerShadowColor, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowColor::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowDistance
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetInnerShadowDistance final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowDistance) == 0x000004, "Wrong alignment on UIProceduralRect_SetInnerShadowDistance");
static_assert(sizeof(UIProceduralRect_SetInnerShadowDistance) == 0x000004, "Wrong size on UIProceduralRect_SetInnerShadowDistance");
static_assert(offsetof(UIProceduralRect_SetInnerShadowDistance, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowDistance::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowDistanceUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetInnerShadowDistanceUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowDistanceUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetInnerShadowDistanceUnitMode");
static_assert(sizeof(UIProceduralRect_SetInnerShadowDistanceUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetInnerShadowDistanceUnitMode");
static_assert(offsetof(UIProceduralRect_SetInnerShadowDistanceUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowDistanceUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowSize
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetInnerShadowSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowSize) == 0x000004, "Wrong alignment on UIProceduralRect_SetInnerShadowSize");
static_assert(sizeof(UIProceduralRect_SetInnerShadowSize) == 0x000004, "Wrong size on UIProceduralRect_SetInnerShadowSize");
static_assert(offsetof(UIProceduralRect_SetInnerShadowSize, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowSize::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetInnerShadowSizeUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetInnerShadowSizeUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetInnerShadowSizeUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetInnerShadowSizeUnitMode");
static_assert(sizeof(UIProceduralRect_SetInnerShadowSizeUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetInnerShadowSizeUnitMode");
static_assert(offsetof(UIProceduralRect_SetInnerShadowSizeUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetInnerShadowSizeUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowAngle
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetOuterShadowAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowAngle) == 0x000004, "Wrong alignment on UIProceduralRect_SetOuterShadowAngle");
static_assert(sizeof(UIProceduralRect_SetOuterShadowAngle) == 0x000004, "Wrong size on UIProceduralRect_SetOuterShadowAngle");
static_assert(offsetof(UIProceduralRect_SetOuterShadowAngle, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowAngle::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowBlur
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetOuterShadowBlur final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowBlur) == 0x000004, "Wrong alignment on UIProceduralRect_SetOuterShadowBlur");
static_assert(sizeof(UIProceduralRect_SetOuterShadowBlur) == 0x000004, "Wrong size on UIProceduralRect_SetOuterShadowBlur");
static_assert(offsetof(UIProceduralRect_SetOuterShadowBlur, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowBlur::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowBlurUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetOuterShadowBlurUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowBlurUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetOuterShadowBlurUnitMode");
static_assert(sizeof(UIProceduralRect_SetOuterShadowBlurUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetOuterShadowBlurUnitMode");
static_assert(offsetof(UIProceduralRect_SetOuterShadowBlurUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowBlurUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetOuterShadowColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowColor) == 0x000004, "Wrong alignment on UIProceduralRect_SetOuterShadowColor");
static_assert(sizeof(UIProceduralRect_SetOuterShadowColor) == 0x000004, "Wrong size on UIProceduralRect_SetOuterShadowColor");
static_assert(offsetof(UIProceduralRect_SetOuterShadowColor, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowColor::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowDistance
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetOuterShadowDistance final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowDistance) == 0x000004, "Wrong alignment on UIProceduralRect_SetOuterShadowDistance");
static_assert(sizeof(UIProceduralRect_SetOuterShadowDistance) == 0x000004, "Wrong size on UIProceduralRect_SetOuterShadowDistance");
static_assert(offsetof(UIProceduralRect_SetOuterShadowDistance, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowDistance::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowDistanceUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetOuterShadowDistanceUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowDistanceUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetOuterShadowDistanceUnitMode");
static_assert(sizeof(UIProceduralRect_SetOuterShadowDistanceUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetOuterShadowDistanceUnitMode");
static_assert(offsetof(UIProceduralRect_SetOuterShadowDistanceUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowDistanceUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowSize
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetOuterShadowSize final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowSize) == 0x000004, "Wrong alignment on UIProceduralRect_SetOuterShadowSize");
static_assert(sizeof(UIProceduralRect_SetOuterShadowSize) == 0x000004, "Wrong size on UIProceduralRect_SetOuterShadowSize");
static_assert(offsetof(UIProceduralRect_SetOuterShadowSize, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowSize::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetOuterShadowSizeUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetOuterShadowSizeUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetOuterShadowSizeUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetOuterShadowSizeUnitMode");
static_assert(sizeof(UIProceduralRect_SetOuterShadowSizeUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetOuterShadowSizeUnitMode");
static_assert(offsetof(UIProceduralRect_SetOuterShadowSizeUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetOuterShadowSizeUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetRadialFillAngle
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetRadialFillAngle final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetRadialFillAngle) == 0x000004, "Wrong alignment on UIProceduralRect_SetRadialFillAngle");
static_assert(sizeof(UIProceduralRect_SetRadialFillAngle) == 0x000004, "Wrong size on UIProceduralRect_SetRadialFillAngle");
static_assert(offsetof(UIProceduralRect_SetRadialFillAngle, Value) == 0x000000, "Member 'UIProceduralRect_SetRadialFillAngle::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetRadialFillCenter
// 0x0010 (0x0010 - 0x0000)
struct UIProceduralRect_SetRadialFillCenter final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetRadialFillCenter) == 0x000008, "Wrong alignment on UIProceduralRect_SetRadialFillCenter");
static_assert(sizeof(UIProceduralRect_SetRadialFillCenter) == 0x000010, "Wrong size on UIProceduralRect_SetRadialFillCenter");
static_assert(offsetof(UIProceduralRect_SetRadialFillCenter, Value) == 0x000000, "Member 'UIProceduralRect_SetRadialFillCenter::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetRadialFillCenterUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetRadialFillCenterUnitMode final
{
public:
	EUIProceduralRectUnitMode                     Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetRadialFillCenterUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_SetRadialFillCenterUnitMode");
static_assert(sizeof(UIProceduralRect_SetRadialFillCenterUnitMode) == 0x000001, "Wrong size on UIProceduralRect_SetRadialFillCenterUnitMode");
static_assert(offsetof(UIProceduralRect_SetRadialFillCenterUnitMode, Value) == 0x000000, "Member 'UIProceduralRect_SetRadialFillCenterUnitMode::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetRadialFillRotation
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_SetRadialFillRotation final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetRadialFillRotation) == 0x000004, "Wrong alignment on UIProceduralRect_SetRadialFillRotation");
static_assert(sizeof(UIProceduralRect_SetRadialFillRotation) == 0x000004, "Wrong size on UIProceduralRect_SetRadialFillRotation");
static_assert(offsetof(UIProceduralRect_SetRadialFillRotation, Value) == 0x000000, "Member 'UIProceduralRect_SetRadialFillRotation::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetRaycastSupportCornerRadius
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetRaycastSupportCornerRadius final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetRaycastSupportCornerRadius) == 0x000001, "Wrong alignment on UIProceduralRect_SetRaycastSupportCornerRadius");
static_assert(sizeof(UIProceduralRect_SetRaycastSupportCornerRadius) == 0x000001, "Wrong size on UIProceduralRect_SetRaycastSupportCornerRadius");
static_assert(offsetof(UIProceduralRect_SetRaycastSupportCornerRadius, Value) == 0x000000, "Member 'UIProceduralRect_SetRaycastSupportCornerRadius::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.SetSoftEdge
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_SetSoftEdge final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_SetSoftEdge) == 0x000001, "Wrong alignment on UIProceduralRect_SetSoftEdge");
static_assert(sizeof(UIProceduralRect_SetSoftEdge) == 0x000001, "Wrong size on UIProceduralRect_SetSoftEdge");
static_assert(offsetof(UIProceduralRect_SetSoftEdge, Value) == 0x000000, "Member 'UIProceduralRect_SetSoftEdge::Value' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBodyColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyColor) == 0x000004, "Wrong alignment on UIProceduralRect_GetBodyColor");
static_assert(sizeof(UIProceduralRect_GetBodyColor) == 0x000004, "Wrong size on UIProceduralRect_GetBodyColor");
static_assert(offsetof(UIProceduralRect_GetBodyColor, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyGradientCenter
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetBodyGradientCenter final
{
public:
	struct FVector2f                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyGradientCenter) == 0x000004, "Wrong alignment on UIProceduralRect_GetBodyGradientCenter");
static_assert(sizeof(UIProceduralRect_GetBodyGradientCenter) == 0x000008, "Wrong size on UIProceduralRect_GetBodyGradientCenter");
static_assert(offsetof(UIProceduralRect_GetBodyGradientCenter, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyGradientCenter::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyGradientCenterUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBodyGradientCenterUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyGradientCenterUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBodyGradientCenterUnitMode");
static_assert(sizeof(UIProceduralRect_GetBodyGradientCenterUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetBodyGradientCenterUnitMode");
static_assert(offsetof(UIProceduralRect_GetBodyGradientCenterUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyGradientCenterUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBodyGradientColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyGradientColor) == 0x000004, "Wrong alignment on UIProceduralRect_GetBodyGradientColor");
static_assert(sizeof(UIProceduralRect_GetBodyGradientColor) == 0x000004, "Wrong size on UIProceduralRect_GetBodyGradientColor");
static_assert(offsetof(UIProceduralRect_GetBodyGradientColor, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyGradientColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyGradientRadius
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetBodyGradientRadius final
{
public:
	struct FVector2f                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyGradientRadius) == 0x000004, "Wrong alignment on UIProceduralRect_GetBodyGradientRadius");
static_assert(sizeof(UIProceduralRect_GetBodyGradientRadius) == 0x000008, "Wrong size on UIProceduralRect_GetBodyGradientRadius");
static_assert(offsetof(UIProceduralRect_GetBodyGradientRadius, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyGradientRadius::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyGradientRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBodyGradientRadiusUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyGradientRadiusUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBodyGradientRadiusUnitMode");
static_assert(sizeof(UIProceduralRect_GetBodyGradientRadiusUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetBodyGradientRadiusUnitMode");
static_assert(offsetof(UIProceduralRect_GetBodyGradientRadiusUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyGradientRadiusUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyGradientRotation
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBodyGradientRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyGradientRotation) == 0x000004, "Wrong alignment on UIProceduralRect_GetBodyGradientRotation");
static_assert(sizeof(UIProceduralRect_GetBodyGradientRotation) == 0x000004, "Wrong size on UIProceduralRect_GetBodyGradientRotation");
static_assert(offsetof(UIProceduralRect_GetBodyGradientRotation, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyGradientRotation::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodySpriteTexture
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetBodySpriteTexture final
{
public:
	class ULGUISpriteData_BaseObject*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodySpriteTexture) == 0x000008, "Wrong alignment on UIProceduralRect_GetBodySpriteTexture");
static_assert(sizeof(UIProceduralRect_GetBodySpriteTexture) == 0x000008, "Wrong size on UIProceduralRect_GetBodySpriteTexture");
static_assert(offsetof(UIProceduralRect_GetBodySpriteTexture, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodySpriteTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyTexture
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetBodyTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyTexture) == 0x000008, "Wrong alignment on UIProceduralRect_GetBodyTexture");
static_assert(sizeof(UIProceduralRect_GetBodyTexture) == 0x000008, "Wrong size on UIProceduralRect_GetBodyTexture");
static_assert(offsetof(UIProceduralRect_GetBodyTexture, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyTextureMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBodyTextureMode final
{
public:
	EUIProceduralBodyTextureMode                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyTextureMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBodyTextureMode");
static_assert(sizeof(UIProceduralRect_GetBodyTextureMode) == 0x000001, "Wrong size on UIProceduralRect_GetBodyTextureMode");
static_assert(offsetof(UIProceduralRect_GetBodyTextureMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyTextureMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBodyTextureScaleMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBodyTextureScaleMode final
{
public:
	EUIProceduralRectTextureScaleMode             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBodyTextureScaleMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBodyTextureScaleMode");
static_assert(sizeof(UIProceduralRect_GetBodyTextureScaleMode) == 0x000001, "Wrong size on UIProceduralRect_GetBodyTextureScaleMode");
static_assert(offsetof(UIProceduralRect_GetBodyTextureScaleMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBodyTextureScaleMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBorderColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderColor) == 0x000004, "Wrong alignment on UIProceduralRect_GetBorderColor");
static_assert(sizeof(UIProceduralRect_GetBorderColor) == 0x000004, "Wrong size on UIProceduralRect_GetBorderColor");
static_assert(offsetof(UIProceduralRect_GetBorderColor, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderGradientCenter
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetBorderGradientCenter final
{
public:
	struct FVector2f                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderGradientCenter) == 0x000004, "Wrong alignment on UIProceduralRect_GetBorderGradientCenter");
static_assert(sizeof(UIProceduralRect_GetBorderGradientCenter) == 0x000008, "Wrong size on UIProceduralRect_GetBorderGradientCenter");
static_assert(offsetof(UIProceduralRect_GetBorderGradientCenter, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderGradientCenter::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderGradientCenterUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBorderGradientCenterUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderGradientCenterUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBorderGradientCenterUnitMode");
static_assert(sizeof(UIProceduralRect_GetBorderGradientCenterUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetBorderGradientCenterUnitMode");
static_assert(offsetof(UIProceduralRect_GetBorderGradientCenterUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderGradientCenterUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderGradientColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBorderGradientColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderGradientColor) == 0x000004, "Wrong alignment on UIProceduralRect_GetBorderGradientColor");
static_assert(sizeof(UIProceduralRect_GetBorderGradientColor) == 0x000004, "Wrong size on UIProceduralRect_GetBorderGradientColor");
static_assert(offsetof(UIProceduralRect_GetBorderGradientColor, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderGradientColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderGradientRadius
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetBorderGradientRadius final
{
public:
	struct FVector2f                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderGradientRadius) == 0x000004, "Wrong alignment on UIProceduralRect_GetBorderGradientRadius");
static_assert(sizeof(UIProceduralRect_GetBorderGradientRadius) == 0x000008, "Wrong size on UIProceduralRect_GetBorderGradientRadius");
static_assert(offsetof(UIProceduralRect_GetBorderGradientRadius, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderGradientRadius::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderGradientRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBorderGradientRadiusUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderGradientRadiusUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBorderGradientRadiusUnitMode");
static_assert(sizeof(UIProceduralRect_GetBorderGradientRadiusUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetBorderGradientRadiusUnitMode");
static_assert(offsetof(UIProceduralRect_GetBorderGradientRadiusUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderGradientRadiusUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderGradientRotation
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBorderGradientRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderGradientRotation) == 0x000004, "Wrong alignment on UIProceduralRect_GetBorderGradientRotation");
static_assert(sizeof(UIProceduralRect_GetBorderGradientRotation) == 0x000004, "Wrong size on UIProceduralRect_GetBorderGradientRotation");
static_assert(offsetof(UIProceduralRect_GetBorderGradientRotation, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderGradientRotation::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderWidth
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetBorderWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderWidth) == 0x000004, "Wrong alignment on UIProceduralRect_GetBorderWidth");
static_assert(sizeof(UIProceduralRect_GetBorderWidth) == 0x000004, "Wrong size on UIProceduralRect_GetBorderWidth");
static_assert(offsetof(UIProceduralRect_GetBorderWidth, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetBorderWidthUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetBorderWidthUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetBorderWidthUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetBorderWidthUnitMode");
static_assert(sizeof(UIProceduralRect_GetBorderWidthUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetBorderWidthUnitMode");
static_assert(offsetof(UIProceduralRect_GetBorderWidthUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetBorderWidthUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetCornerRadius
// 0x0010 (0x0010 - 0x0000)
struct UIProceduralRect_GetCornerRadius final
{
public:
	struct FVector4f                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetCornerRadius) == 0x000010, "Wrong alignment on UIProceduralRect_GetCornerRadius");
static_assert(sizeof(UIProceduralRect_GetCornerRadius) == 0x000010, "Wrong size on UIProceduralRect_GetCornerRadius");
static_assert(offsetof(UIProceduralRect_GetCornerRadius, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetCornerRadius::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetCornerRadiusUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetCornerRadiusUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetCornerRadiusUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetCornerRadiusUnitMode");
static_assert(sizeof(UIProceduralRect_GetCornerRadiusUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetCornerRadiusUnitMode");
static_assert(offsetof(UIProceduralRect_GetCornerRadiusUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetCornerRadiusUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableBody
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableBody final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableBody) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableBody");
static_assert(sizeof(UIProceduralRect_GetEnableBody) == 0x000001, "Wrong size on UIProceduralRect_GetEnableBody");
static_assert(offsetof(UIProceduralRect_GetEnableBody, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableBody::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableBodyGradient
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableBodyGradient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableBodyGradient) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableBodyGradient");
static_assert(sizeof(UIProceduralRect_GetEnableBodyGradient) == 0x000001, "Wrong size on UIProceduralRect_GetEnableBodyGradient");
static_assert(offsetof(UIProceduralRect_GetEnableBodyGradient, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableBodyGradient::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableBorder
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableBorder final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableBorder) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableBorder");
static_assert(sizeof(UIProceduralRect_GetEnableBorder) == 0x000001, "Wrong size on UIProceduralRect_GetEnableBorder");
static_assert(offsetof(UIProceduralRect_GetEnableBorder, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableBorder::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableBorderGradient
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableBorderGradient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableBorderGradient) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableBorderGradient");
static_assert(sizeof(UIProceduralRect_GetEnableBorderGradient) == 0x000001, "Wrong size on UIProceduralRect_GetEnableBorderGradient");
static_assert(offsetof(UIProceduralRect_GetEnableBorderGradient, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableBorderGradient::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableInnerShadow
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableInnerShadow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableInnerShadow) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableInnerShadow");
static_assert(sizeof(UIProceduralRect_GetEnableInnerShadow) == 0x000001, "Wrong size on UIProceduralRect_GetEnableInnerShadow");
static_assert(offsetof(UIProceduralRect_GetEnableInnerShadow, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableInnerShadow::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableOuterShadow
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableOuterShadow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableOuterShadow) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableOuterShadow");
static_assert(sizeof(UIProceduralRect_GetEnableOuterShadow) == 0x000001, "Wrong size on UIProceduralRect_GetEnableOuterShadow");
static_assert(offsetof(UIProceduralRect_GetEnableOuterShadow, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableOuterShadow::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetEnableRadialFill
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetEnableRadialFill final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetEnableRadialFill) == 0x000001, "Wrong alignment on UIProceduralRect_GetEnableRadialFill");
static_assert(sizeof(UIProceduralRect_GetEnableRadialFill) == 0x000001, "Wrong size on UIProceduralRect_GetEnableRadialFill");
static_assert(offsetof(UIProceduralRect_GetEnableRadialFill, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetEnableRadialFill::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowAngle
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetInnerShadowAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowAngle) == 0x000004, "Wrong alignment on UIProceduralRect_GetInnerShadowAngle");
static_assert(sizeof(UIProceduralRect_GetInnerShadowAngle) == 0x000004, "Wrong size on UIProceduralRect_GetInnerShadowAngle");
static_assert(offsetof(UIProceduralRect_GetInnerShadowAngle, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowBlur
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetInnerShadowBlur final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowBlur) == 0x000004, "Wrong alignment on UIProceduralRect_GetInnerShadowBlur");
static_assert(sizeof(UIProceduralRect_GetInnerShadowBlur) == 0x000004, "Wrong size on UIProceduralRect_GetInnerShadowBlur");
static_assert(offsetof(UIProceduralRect_GetInnerShadowBlur, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowBlur::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowBlurUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetInnerShadowBlurUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowBlurUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetInnerShadowBlurUnitMode");
static_assert(sizeof(UIProceduralRect_GetInnerShadowBlurUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetInnerShadowBlurUnitMode");
static_assert(offsetof(UIProceduralRect_GetInnerShadowBlurUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowBlurUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetInnerShadowColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowColor) == 0x000004, "Wrong alignment on UIProceduralRect_GetInnerShadowColor");
static_assert(sizeof(UIProceduralRect_GetInnerShadowColor) == 0x000004, "Wrong size on UIProceduralRect_GetInnerShadowColor");
static_assert(offsetof(UIProceduralRect_GetInnerShadowColor, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowDistance
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetInnerShadowDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowDistance) == 0x000004, "Wrong alignment on UIProceduralRect_GetInnerShadowDistance");
static_assert(sizeof(UIProceduralRect_GetInnerShadowDistance) == 0x000004, "Wrong size on UIProceduralRect_GetInnerShadowDistance");
static_assert(offsetof(UIProceduralRect_GetInnerShadowDistance, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowDistance::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowDistanceUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetInnerShadowDistanceUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowDistanceUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetInnerShadowDistanceUnitMode");
static_assert(sizeof(UIProceduralRect_GetInnerShadowDistanceUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetInnerShadowDistanceUnitMode");
static_assert(offsetof(UIProceduralRect_GetInnerShadowDistanceUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowDistanceUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowSize
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetInnerShadowSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowSize) == 0x000004, "Wrong alignment on UIProceduralRect_GetInnerShadowSize");
static_assert(sizeof(UIProceduralRect_GetInnerShadowSize) == 0x000004, "Wrong size on UIProceduralRect_GetInnerShadowSize");
static_assert(offsetof(UIProceduralRect_GetInnerShadowSize, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetInnerShadowSizeUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetInnerShadowSizeUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetInnerShadowSizeUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetInnerShadowSizeUnitMode");
static_assert(sizeof(UIProceduralRect_GetInnerShadowSizeUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetInnerShadowSizeUnitMode");
static_assert(offsetof(UIProceduralRect_GetInnerShadowSizeUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetInnerShadowSizeUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowAngle
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetOuterShadowAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowAngle) == 0x000004, "Wrong alignment on UIProceduralRect_GetOuterShadowAngle");
static_assert(sizeof(UIProceduralRect_GetOuterShadowAngle) == 0x000004, "Wrong size on UIProceduralRect_GetOuterShadowAngle");
static_assert(offsetof(UIProceduralRect_GetOuterShadowAngle, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowBlur
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetOuterShadowBlur final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowBlur) == 0x000004, "Wrong alignment on UIProceduralRect_GetOuterShadowBlur");
static_assert(sizeof(UIProceduralRect_GetOuterShadowBlur) == 0x000004, "Wrong size on UIProceduralRect_GetOuterShadowBlur");
static_assert(offsetof(UIProceduralRect_GetOuterShadowBlur, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowBlur::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowBlurUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetOuterShadowBlurUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowBlurUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetOuterShadowBlurUnitMode");
static_assert(sizeof(UIProceduralRect_GetOuterShadowBlurUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetOuterShadowBlurUnitMode");
static_assert(offsetof(UIProceduralRect_GetOuterShadowBlurUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowBlurUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowColor
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetOuterShadowColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowColor) == 0x000004, "Wrong alignment on UIProceduralRect_GetOuterShadowColor");
static_assert(sizeof(UIProceduralRect_GetOuterShadowColor) == 0x000004, "Wrong size on UIProceduralRect_GetOuterShadowColor");
static_assert(offsetof(UIProceduralRect_GetOuterShadowColor, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowColor::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowDistance
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetOuterShadowDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowDistance) == 0x000004, "Wrong alignment on UIProceduralRect_GetOuterShadowDistance");
static_assert(sizeof(UIProceduralRect_GetOuterShadowDistance) == 0x000004, "Wrong size on UIProceduralRect_GetOuterShadowDistance");
static_assert(offsetof(UIProceduralRect_GetOuterShadowDistance, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowDistance::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowDistanceUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetOuterShadowDistanceUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowDistanceUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetOuterShadowDistanceUnitMode");
static_assert(sizeof(UIProceduralRect_GetOuterShadowDistanceUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetOuterShadowDistanceUnitMode");
static_assert(offsetof(UIProceduralRect_GetOuterShadowDistanceUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowDistanceUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowSize
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetOuterShadowSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowSize) == 0x000004, "Wrong alignment on UIProceduralRect_GetOuterShadowSize");
static_assert(sizeof(UIProceduralRect_GetOuterShadowSize) == 0x000004, "Wrong size on UIProceduralRect_GetOuterShadowSize");
static_assert(offsetof(UIProceduralRect_GetOuterShadowSize, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetOuterShadowSizeUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetOuterShadowSizeUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetOuterShadowSizeUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetOuterShadowSizeUnitMode");
static_assert(sizeof(UIProceduralRect_GetOuterShadowSizeUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetOuterShadowSizeUnitMode");
static_assert(offsetof(UIProceduralRect_GetOuterShadowSizeUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetOuterShadowSizeUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetRadialFillAngle
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetRadialFillAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetRadialFillAngle) == 0x000004, "Wrong alignment on UIProceduralRect_GetRadialFillAngle");
static_assert(sizeof(UIProceduralRect_GetRadialFillAngle) == 0x000004, "Wrong size on UIProceduralRect_GetRadialFillAngle");
static_assert(offsetof(UIProceduralRect_GetRadialFillAngle, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetRadialFillAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetRadialFillCenter
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRect_GetRadialFillCenter final
{
public:
	struct FVector2f                              ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetRadialFillCenter) == 0x000004, "Wrong alignment on UIProceduralRect_GetRadialFillCenter");
static_assert(sizeof(UIProceduralRect_GetRadialFillCenter) == 0x000008, "Wrong size on UIProceduralRect_GetRadialFillCenter");
static_assert(offsetof(UIProceduralRect_GetRadialFillCenter, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetRadialFillCenter::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetRadialFillCenterUnitMode
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetRadialFillCenterUnitMode final
{
public:
	EUIProceduralRectUnitMode                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetRadialFillCenterUnitMode) == 0x000001, "Wrong alignment on UIProceduralRect_GetRadialFillCenterUnitMode");
static_assert(sizeof(UIProceduralRect_GetRadialFillCenterUnitMode) == 0x000001, "Wrong size on UIProceduralRect_GetRadialFillCenterUnitMode");
static_assert(offsetof(UIProceduralRect_GetRadialFillCenterUnitMode, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetRadialFillCenterUnitMode::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetRadialFillRotation
// 0x0004 (0x0004 - 0x0000)
struct UIProceduralRect_GetRadialFillRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetRadialFillRotation) == 0x000004, "Wrong alignment on UIProceduralRect_GetRadialFillRotation");
static_assert(sizeof(UIProceduralRect_GetRadialFillRotation) == 0x000004, "Wrong size on UIProceduralRect_GetRadialFillRotation");
static_assert(offsetof(UIProceduralRect_GetRadialFillRotation, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetRadialFillRotation::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetRaycastSupportCornerRadius
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetRaycastSupportCornerRadius final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetRaycastSupportCornerRadius) == 0x000001, "Wrong alignment on UIProceduralRect_GetRaycastSupportCornerRadius");
static_assert(sizeof(UIProceduralRect_GetRaycastSupportCornerRadius) == 0x000001, "Wrong size on UIProceduralRect_GetRaycastSupportCornerRadius");
static_assert(offsetof(UIProceduralRect_GetRaycastSupportCornerRadius, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetRaycastSupportCornerRadius::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRect.GetSoftEdge
// 0x0001 (0x0001 - 0x0000)
struct UIProceduralRect_GetSoftEdge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRect_GetSoftEdge) == 0x000001, "Wrong alignment on UIProceduralRect_GetSoftEdge");
static_assert(sizeof(UIProceduralRect_GetSoftEdge) == 0x000001, "Wrong size on UIProceduralRect_GetSoftEdge");
static_assert(offsetof(UIProceduralRect_GetSoftEdge, ReturnValue) == 0x000000, "Member 'UIProceduralRect_GetSoftEdge::ReturnValue' has a wrong offset!");

// Function LGUI.UIProceduralRectActor.GetUIProceduralRect
// 0x0008 (0x0008 - 0x0000)
struct UIProceduralRectActor_GetUIProceduralRect final
{
public:
	class UUIProceduralRect*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIProceduralRectActor_GetUIProceduralRect) == 0x000008, "Wrong alignment on UIProceduralRectActor_GetUIProceduralRect");
static_assert(sizeof(UIProceduralRectActor_GetUIProceduralRect) == 0x000008, "Wrong size on UIProceduralRectActor_GetUIProceduralRect");
static_assert(offsetof(UIProceduralRectActor_GetUIProceduralRect, ReturnValue) == 0x000000, "Member 'UIProceduralRectActor_GetUIProceduralRect::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewDataSource.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct UIRecyclableScrollViewDataSource_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewDataSource_GetItemCount) == 0x000004, "Wrong alignment on UIRecyclableScrollViewDataSource_GetItemCount");
static_assert(sizeof(UIRecyclableScrollViewDataSource_GetItemCount) == 0x000004, "Wrong size on UIRecyclableScrollViewDataSource_GetItemCount");
static_assert(offsetof(UIRecyclableScrollViewDataSource_GetItemCount, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewDataSource_GetItemCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewDataSource.InitOnCreate
// 0x0008 (0x0008 - 0x0000)
struct UIRecyclableScrollViewDataSource_InitOnCreate final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewDataSource_InitOnCreate) == 0x000008, "Wrong alignment on UIRecyclableScrollViewDataSource_InitOnCreate");
static_assert(sizeof(UIRecyclableScrollViewDataSource_InitOnCreate) == 0x000008, "Wrong size on UIRecyclableScrollViewDataSource_InitOnCreate");
static_assert(offsetof(UIRecyclableScrollViewDataSource_InitOnCreate, Component) == 0x000000, "Member 'UIRecyclableScrollViewDataSource_InitOnCreate::Component' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewDataSource.SetCell
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewDataSource_SetCell final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIRecyclableScrollViewDataSource_SetCell) == 0x000008, "Wrong alignment on UIRecyclableScrollViewDataSource_SetCell");
static_assert(sizeof(UIRecyclableScrollViewDataSource_SetCell) == 0x000010, "Wrong size on UIRecyclableScrollViewDataSource_SetCell");
static_assert(offsetof(UIRecyclableScrollViewDataSource_SetCell, Component) == 0x000000, "Member 'UIRecyclableScrollViewDataSource_SetCell::Component' has a wrong offset!");
static_assert(offsetof(UIRecyclableScrollViewDataSource_SetCell, Index_0) == 0x000008, "Member 'UIRecyclableScrollViewDataSource_SetCell::Index_0' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.RegisterScrollEvent
// 0x0018 (0x0018 - 0x0000)
struct UIScrollViewComponent_RegisterScrollEvent final
{
public:
	TDelegate<void(const struct FVector2D& InVector2)> InDelegate;                                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_RegisterScrollEvent) == 0x000008, "Wrong alignment on UIScrollViewComponent_RegisterScrollEvent");
static_assert(sizeof(UIScrollViewComponent_RegisterScrollEvent) == 0x000018, "Wrong size on UIScrollViewComponent_RegisterScrollEvent");
static_assert(offsetof(UIScrollViewComponent_RegisterScrollEvent, InDelegate) == 0x000000, "Member 'UIScrollViewComponent_RegisterScrollEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIScrollViewComponent_RegisterScrollEvent, ReturnValue) == 0x000010, "Member 'UIScrollViewComponent_RegisterScrollEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.ScrollTo
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_ScrollTo final
{
public:
	class UUIItem*                                InChild;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEaseAnimation;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAnimationDuration;                               // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_ScrollTo) == 0x000008, "Wrong alignment on UIScrollViewComponent_ScrollTo");
static_assert(sizeof(UIScrollViewComponent_ScrollTo) == 0x000010, "Wrong size on UIScrollViewComponent_ScrollTo");
static_assert(offsetof(UIScrollViewComponent_ScrollTo, InChild) == 0x000000, "Member 'UIScrollViewComponent_ScrollTo::InChild' has a wrong offset!");
static_assert(offsetof(UIScrollViewComponent_ScrollTo, InEaseAnimation) == 0x000008, "Member 'UIScrollViewComponent_ScrollTo::InEaseAnimation' has a wrong offset!");
static_assert(offsetof(UIScrollViewComponent_ScrollTo, InAnimationDuration) == 0x00000C, "Member 'UIScrollViewComponent_ScrollTo::InAnimationDuration' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetCanScrollInSmallSize
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetCanScrollInSmallSize final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetCanScrollInSmallSize) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetCanScrollInSmallSize");
static_assert(sizeof(UIScrollViewComponent_SetCanScrollInSmallSize) == 0x000001, "Wrong size on UIScrollViewComponent_SetCanScrollInSmallSize");
static_assert(offsetof(UIScrollViewComponent_SetCanScrollInSmallSize, Value) == 0x000000, "Member 'UIScrollViewComponent_SetCanScrollInSmallSize::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetDecelerateRate
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetDecelerateRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetDecelerateRate) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetDecelerateRate");
static_assert(sizeof(UIScrollViewComponent_SetDecelerateRate) == 0x000004, "Wrong size on UIScrollViewComponent_SetDecelerateRate");
static_assert(offsetof(UIScrollViewComponent_SetDecelerateRate, Value) == 0x000000, "Member 'UIScrollViewComponent_SetDecelerateRate::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetHorizontal
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetHorizontal final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetHorizontal) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetHorizontal");
static_assert(sizeof(UIScrollViewComponent_SetHorizontal) == 0x000001, "Wrong size on UIScrollViewComponent_SetHorizontal");
static_assert(offsetof(UIScrollViewComponent_SetHorizontal, Value) == 0x000000, "Member 'UIScrollViewComponent_SetHorizontal::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetOnlyOneDirection
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetOnlyOneDirection final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetOnlyOneDirection) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetOnlyOneDirection");
static_assert(sizeof(UIScrollViewComponent_SetOnlyOneDirection) == 0x000001, "Wrong size on UIScrollViewComponent_SetOnlyOneDirection");
static_assert(offsetof(UIScrollViewComponent_SetOnlyOneDirection, Value) == 0x000000, "Member 'UIScrollViewComponent_SetOnlyOneDirection::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetOutOfRangeDamper
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetOutOfRangeDamper final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetOutOfRangeDamper) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetOutOfRangeDamper");
static_assert(sizeof(UIScrollViewComponent_SetOutOfRangeDamper) == 0x000004, "Wrong size on UIScrollViewComponent_SetOutOfRangeDamper");
static_assert(offsetof(UIScrollViewComponent_SetOutOfRangeDamper, Value) == 0x000000, "Member 'UIScrollViewComponent_SetOutOfRangeDamper::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetRestrictRectArea
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetRestrictRectArea final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetRestrictRectArea) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetRestrictRectArea");
static_assert(sizeof(UIScrollViewComponent_SetRestrictRectArea) == 0x000001, "Wrong size on UIScrollViewComponent_SetRestrictRectArea");
static_assert(offsetof(UIScrollViewComponent_SetRestrictRectArea, Value) == 0x000000, "Member 'UIScrollViewComponent_SetRestrictRectArea::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollDelta
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_SetScrollDelta final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollDelta) == 0x000008, "Wrong alignment on UIScrollViewComponent_SetScrollDelta");
static_assert(sizeof(UIScrollViewComponent_SetScrollDelta) == 0x000010, "Wrong size on UIScrollViewComponent_SetScrollDelta");
static_assert(offsetof(UIScrollViewComponent_SetScrollDelta, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollDelta::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollProgress
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_SetScrollProgress final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollProgress) == 0x000008, "Wrong alignment on UIScrollViewComponent_SetScrollProgress");
static_assert(sizeof(UIScrollViewComponent_SetScrollProgress) == 0x000010, "Wrong size on UIScrollViewComponent_SetScrollProgress");
static_assert(offsetof(UIScrollViewComponent_SetScrollProgress, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollProgress::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollSensitivity
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_SetScrollSensitivity final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollSensitivity) == 0x000004, "Wrong alignment on UIScrollViewComponent_SetScrollSensitivity");
static_assert(sizeof(UIScrollViewComponent_SetScrollSensitivity) == 0x000004, "Wrong size on UIScrollViewComponent_SetScrollSensitivity");
static_assert(offsetof(UIScrollViewComponent_SetScrollSensitivity, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollSensitivity::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetScrollValue
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_SetScrollValue final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetScrollValue) == 0x000008, "Wrong alignment on UIScrollViewComponent_SetScrollValue");
static_assert(sizeof(UIScrollViewComponent_SetScrollValue) == 0x000010, "Wrong size on UIScrollViewComponent_SetScrollValue");
static_assert(offsetof(UIScrollViewComponent_SetScrollValue, Value) == 0x000000, "Member 'UIScrollViewComponent_SetScrollValue::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetVelocity
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_SetVelocity final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetVelocity) == 0x000008, "Wrong alignment on UIScrollViewComponent_SetVelocity");
static_assert(sizeof(UIScrollViewComponent_SetVelocity) == 0x000010, "Wrong size on UIScrollViewComponent_SetVelocity");
static_assert(offsetof(UIScrollViewComponent_SetVelocity, Value) == 0x000000, "Member 'UIScrollViewComponent_SetVelocity::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.SetVertical
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_SetVertical final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_SetVertical) == 0x000001, "Wrong alignment on UIScrollViewComponent_SetVertical");
static_assert(sizeof(UIScrollViewComponent_SetVertical) == 0x000001, "Wrong size on UIScrollViewComponent_SetVertical");
static_assert(offsetof(UIScrollViewComponent_SetVertical, Value) == 0x000000, "Member 'UIScrollViewComponent_SetVertical::Value' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.UnregisterScrollEvent
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewComponent_UnregisterScrollEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_UnregisterScrollEvent) == 0x000008, "Wrong alignment on UIScrollViewComponent_UnregisterScrollEvent");
static_assert(sizeof(UIScrollViewComponent_UnregisterScrollEvent) == 0x000008, "Wrong size on UIScrollViewComponent_UnregisterScrollEvent");
static_assert(offsetof(UIScrollViewComponent_UnregisterScrollEvent, InDelegateHandle) == 0x000000, "Member 'UIScrollViewComponent_UnregisterScrollEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetCanScrollInSmallSize
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetCanScrollInSmallSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetCanScrollInSmallSize) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetCanScrollInSmallSize");
static_assert(sizeof(UIScrollViewComponent_GetCanScrollInSmallSize) == 0x000001, "Wrong size on UIScrollViewComponent_GetCanScrollInSmallSize");
static_assert(offsetof(UIScrollViewComponent_GetCanScrollInSmallSize, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetCanScrollInSmallSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetContent
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewComponent_GetContent final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetContent) == 0x000008, "Wrong alignment on UIScrollViewComponent_GetContent");
static_assert(sizeof(UIScrollViewComponent_GetContent) == 0x000008, "Wrong size on UIScrollViewComponent_GetContent");
static_assert(offsetof(UIScrollViewComponent_GetContent, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetContent::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetDecelerateRate
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetDecelerateRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetDecelerateRate) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetDecelerateRate");
static_assert(sizeof(UIScrollViewComponent_GetDecelerateRate) == 0x000004, "Wrong size on UIScrollViewComponent_GetDecelerateRate");
static_assert(offsetof(UIScrollViewComponent_GetDecelerateRate, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetDecelerateRate::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetHorizontal
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetHorizontal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetHorizontal) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetHorizontal");
static_assert(sizeof(UIScrollViewComponent_GetHorizontal) == 0x000001, "Wrong size on UIScrollViewComponent_GetHorizontal");
static_assert(offsetof(UIScrollViewComponent_GetHorizontal, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetHorizontal::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetHorizontalRange
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_GetHorizontalRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetHorizontalRange) == 0x000008, "Wrong alignment on UIScrollViewComponent_GetHorizontalRange");
static_assert(sizeof(UIScrollViewComponent_GetHorizontalRange) == 0x000010, "Wrong size on UIScrollViewComponent_GetHorizontalRange");
static_assert(offsetof(UIScrollViewComponent_GetHorizontalRange, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetHorizontalRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetOnlyOneDirection
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetOnlyOneDirection final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetOnlyOneDirection) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetOnlyOneDirection");
static_assert(sizeof(UIScrollViewComponent_GetOnlyOneDirection) == 0x000001, "Wrong size on UIScrollViewComponent_GetOnlyOneDirection");
static_assert(offsetof(UIScrollViewComponent_GetOnlyOneDirection, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetOnlyOneDirection::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetOutOfRangeDamper
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetOutOfRangeDamper final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetOutOfRangeDamper) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetOutOfRangeDamper");
static_assert(sizeof(UIScrollViewComponent_GetOutOfRangeDamper) == 0x000004, "Wrong size on UIScrollViewComponent_GetOutOfRangeDamper");
static_assert(offsetof(UIScrollViewComponent_GetOutOfRangeDamper, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetOutOfRangeDamper::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetRestrictRectArea
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetRestrictRectArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetRestrictRectArea) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetRestrictRectArea");
static_assert(sizeof(UIScrollViewComponent_GetRestrictRectArea) == 0x000001, "Wrong size on UIScrollViewComponent_GetRestrictRectArea");
static_assert(offsetof(UIScrollViewComponent_GetRestrictRectArea, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetRestrictRectArea::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetScrollProgress
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_GetScrollProgress final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetScrollProgress) == 0x000008, "Wrong alignment on UIScrollViewComponent_GetScrollProgress");
static_assert(sizeof(UIScrollViewComponent_GetScrollProgress) == 0x000010, "Wrong size on UIScrollViewComponent_GetScrollProgress");
static_assert(offsetof(UIScrollViewComponent_GetScrollProgress, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetScrollProgress::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetScrollSensitivity
// 0x0004 (0x0004 - 0x0000)
struct UIScrollViewComponent_GetScrollSensitivity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetScrollSensitivity) == 0x000004, "Wrong alignment on UIScrollViewComponent_GetScrollSensitivity");
static_assert(sizeof(UIScrollViewComponent_GetScrollSensitivity) == 0x000004, "Wrong size on UIScrollViewComponent_GetScrollSensitivity");
static_assert(offsetof(UIScrollViewComponent_GetScrollSensitivity, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetScrollSensitivity::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetVelocity
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_GetVelocity final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetVelocity) == 0x000008, "Wrong alignment on UIScrollViewComponent_GetVelocity");
static_assert(sizeof(UIScrollViewComponent_GetVelocity) == 0x000010, "Wrong size on UIScrollViewComponent_GetVelocity");
static_assert(offsetof(UIScrollViewComponent_GetVelocity, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetVelocity::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetVertical
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewComponent_GetVertical final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetVertical) == 0x000001, "Wrong alignment on UIScrollViewComponent_GetVertical");
static_assert(sizeof(UIScrollViewComponent_GetVertical) == 0x000001, "Wrong size on UIScrollViewComponent_GetVertical");
static_assert(offsetof(UIScrollViewComponent_GetVertical, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetVertical::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewComponent.GetVerticalRange
// 0x0010 (0x0010 - 0x0000)
struct UIScrollViewComponent_GetVerticalRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewComponent_GetVerticalRange) == 0x000008, "Wrong alignment on UIScrollViewComponent_GetVerticalRange");
static_assert(sizeof(UIScrollViewComponent_GetVerticalRange) == 0x000010, "Wrong size on UIScrollViewComponent_GetVerticalRange");
static_assert(offsetof(UIScrollViewComponent_GetVerticalRange, ReturnValue) == 0x000000, "Member 'UIScrollViewComponent_GetVerticalRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.SetHorizontalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility, Value) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility::Value' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.SetVerticalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility, Value) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility::Value' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbar
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbar
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetVerticalScrollbar final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbar) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetVerticalScrollbar");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbar) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_GetVerticalScrollbar");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbar, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetVerticalScrollbar::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbarVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility final
{
public:
	EScrollViewScrollbarVisibility                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility) == 0x000001, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility) == 0x000001, "Wrong size on UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollViewWithScrollbarComponent.GetViewport
// 0x0008 (0x0008 - 0x0000)
struct UIScrollViewWithScrollbarComponent_GetViewport final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollViewWithScrollbarComponent_GetViewport) == 0x000008, "Wrong alignment on UIScrollViewWithScrollbarComponent_GetViewport");
static_assert(sizeof(UIScrollViewWithScrollbarComponent_GetViewport) == 0x000008, "Wrong size on UIScrollViewWithScrollbarComponent_GetViewport");
static_assert(offsetof(UIScrollViewWithScrollbarComponent_GetViewport, ReturnValue) == 0x000000, "Member 'UIScrollViewWithScrollbarComponent_GetViewport::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.ScrollToByDataIndex
// 0x000C (0x000C - 0x0000)
struct UIRecyclableScrollViewComponent_ScrollToByDataIndex final
{
public:
	int32                                         InDataIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InEaseAnimation;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InAnimationDuration;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_ScrollToByDataIndex) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_ScrollToByDataIndex");
static_assert(sizeof(UIRecyclableScrollViewComponent_ScrollToByDataIndex) == 0x00000C, "Wrong size on UIRecyclableScrollViewComponent_ScrollToByDataIndex");
static_assert(offsetof(UIRecyclableScrollViewComponent_ScrollToByDataIndex, InDataIndex) == 0x000000, "Member 'UIRecyclableScrollViewComponent_ScrollToByDataIndex::InDataIndex' has a wrong offset!");
static_assert(offsetof(UIRecyclableScrollViewComponent_ScrollToByDataIndex, InEaseAnimation) == 0x000004, "Member 'UIRecyclableScrollViewComponent_ScrollToByDataIndex::InEaseAnimation' has a wrong offset!");
static_assert(offsetof(UIRecyclableScrollViewComponent_ScrollToByDataIndex, InAnimationDuration) == 0x000008, "Member 'UIRecyclableScrollViewComponent_ScrollToByDataIndex::InAnimationDuration' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetCellTemplate
// 0x0008 (0x0008 - 0x0000)
struct UIRecyclableScrollViewComponent_SetCellTemplate final
{
public:
	class AUIBaseActor*                           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetCellTemplate) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_SetCellTemplate");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetCellTemplate) == 0x000008, "Wrong size on UIRecyclableScrollViewComponent_SetCellTemplate");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetCellTemplate, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetCellTemplate::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetCellTemplatePrefab
// 0x0008 (0x0008 - 0x0000)
struct UIRecyclableScrollViewComponent_SetCellTemplatePrefab final
{
public:
	class ULGUIPrefab*                            Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetCellTemplatePrefab) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_SetCellTemplatePrefab");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetCellTemplatePrefab) == 0x000008, "Wrong size on UIRecyclableScrollViewComponent_SetCellTemplatePrefab");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetCellTemplatePrefab, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetCellTemplatePrefab::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetColumns
// 0x0004 (0x0004 - 0x0000)
struct UIRecyclableScrollViewComponent_SetColumns final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetColumns) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_SetColumns");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetColumns) == 0x000004, "Wrong size on UIRecyclableScrollViewComponent_SetColumns");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetColumns, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetColumns::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetDataSource
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_SetDataSource final
{
public:
	TScriptInterface<class IUIRecyclableScrollViewDataSource> InDataSource;                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetDataSource) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_SetDataSource");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetDataSource) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_SetDataSource");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetDataSource, InDataSource) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetDataSource::InDataSource' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetInfiniteLoop
// 0x0001 (0x0001 - 0x0000)
struct UIRecyclableScrollViewComponent_SetInfiniteLoop final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetInfiniteLoop) == 0x000001, "Wrong alignment on UIRecyclableScrollViewComponent_SetInfiniteLoop");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetInfiniteLoop) == 0x000001, "Wrong size on UIRecyclableScrollViewComponent_SetInfiniteLoop");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetInfiniteLoop, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetInfiniteLoop::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetPadding) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_SetPadding");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetPadding) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_SetPadding");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetPadding, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetRows
// 0x0004 (0x0004 - 0x0000)
struct UIRecyclableScrollViewComponent_SetRows final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetRows) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_SetRows");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetRows) == 0x000004, "Wrong size on UIRecyclableScrollViewComponent_SetRows");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetRows, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetRows::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.SetSpace
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_SetSpace final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_SetSpace) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_SetSpace");
static_assert(sizeof(UIRecyclableScrollViewComponent_SetSpace) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_SetSpace");
static_assert(offsetof(UIRecyclableScrollViewComponent_SetSpace, Value) == 0x000000, "Member 'UIRecyclableScrollViewComponent_SetSpace::Value' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetCacheCellList
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_GetCacheCellList final
{
public:
	TArray<struct FUIRecyclableScrollViewCellContainer> ReturnValue;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetCacheCellList) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetCacheCellList");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetCacheCellList) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_GetCacheCellList");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCacheCellList, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetCacheCellList::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetCellItemByDataIndex
// 0x0020 (0x0020 - 0x0000)
struct UIRecyclableScrollViewComponent_GetCellItemByDataIndex final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIRecyclableScrollViewCellContainer   OutResult;                                         // 0x0008(0x0010)(Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetCellItemByDataIndex) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetCellItemByDataIndex");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetCellItemByDataIndex) == 0x000020, "Wrong size on UIRecyclableScrollViewComponent_GetCellItemByDataIndex");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCellItemByDataIndex, Index_0) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetCellItemByDataIndex::Index_0' has a wrong offset!");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCellItemByDataIndex, OutResult) == 0x000008, "Member 'UIRecyclableScrollViewComponent_GetCellItemByDataIndex::OutResult' has a wrong offset!");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCellItemByDataIndex, ReturnValue) == 0x000018, "Member 'UIRecyclableScrollViewComponent_GetCellItemByDataIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetCellTemplate
// 0x0008 (0x0008 - 0x0000)
struct UIRecyclableScrollViewComponent_GetCellTemplate final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetCellTemplate) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetCellTemplate");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetCellTemplate) == 0x000008, "Wrong size on UIRecyclableScrollViewComponent_GetCellTemplate");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCellTemplate, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetCellTemplate::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetCellTemplatePrefab
// 0x0008 (0x0008 - 0x0000)
struct UIRecyclableScrollViewComponent_GetCellTemplatePrefab final
{
public:
	class ULGUIPrefab*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetCellTemplatePrefab) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetCellTemplatePrefab");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetCellTemplatePrefab) == 0x000008, "Wrong size on UIRecyclableScrollViewComponent_GetCellTemplatePrefab");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCellTemplatePrefab, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetCellTemplatePrefab::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetCellTemplateType
// 0x0001 (0x0001 - 0x0000)
struct UIRecyclableScrollViewComponent_GetCellTemplateType final
{
public:
	EUIRecyclableScrollViewCellTemplateType       ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetCellTemplateType) == 0x000001, "Wrong alignment on UIRecyclableScrollViewComponent_GetCellTemplateType");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetCellTemplateType) == 0x000001, "Wrong size on UIRecyclableScrollViewComponent_GetCellTemplateType");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetCellTemplateType, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetCellTemplateType::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetColumns
// 0x0004 (0x0004 - 0x0000)
struct UIRecyclableScrollViewComponent_GetColumns final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetColumns) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_GetColumns");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetColumns) == 0x000004, "Wrong size on UIRecyclableScrollViewComponent_GetColumns");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetColumns, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetColumns::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetDataSource
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_GetDataSource final
{
public:
	TScriptInterface<class IUIRecyclableScrollViewDataSource> ReturnValue;                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetDataSource) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetDataSource");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetDataSource) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_GetDataSource");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetDataSource, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetDataSource::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetInfiniteLoop
// 0x0001 (0x0001 - 0x0000)
struct UIRecyclableScrollViewComponent_GetInfiniteLoop final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetInfiniteLoop) == 0x000001, "Wrong alignment on UIRecyclableScrollViewComponent_GetInfiniteLoop");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetInfiniteLoop) == 0x000001, "Wrong size on UIRecyclableScrollViewComponent_GetInfiniteLoop");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetInfiniteLoop, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetInfiniteLoop::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetPadding) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_GetPadding");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetPadding) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_GetPadding");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetPadding, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetRows
// 0x0004 (0x0004 - 0x0000)
struct UIRecyclableScrollViewComponent_GetRows final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetRows) == 0x000004, "Wrong alignment on UIRecyclableScrollViewComponent_GetRows");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetRows) == 0x000004, "Wrong size on UIRecyclableScrollViewComponent_GetRows");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetRows, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetRows::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetSpace
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_GetSpace final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetSpace) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetSpace");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetSpace) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_GetSpace");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetSpace, ReturnValue) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetSpace::ReturnValue' has a wrong offset!");

// Function LGUI.UIRecyclableScrollViewComponent.GetUserFriendlyCacheCellList
// 0x0010 (0x0010 - 0x0000)
struct UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList final
{
public:
	TArray<struct FUIRecyclableScrollViewCellContainer> OutResult;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList) == 0x000008, "Wrong alignment on UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList");
static_assert(sizeof(UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList) == 0x000010, "Wrong size on UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList");
static_assert(offsetof(UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList, OutResult) == 0x000000, "Member 'UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList::OutResult' has a wrong offset!");

// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.SetPixelChannel
// 0x0001 (0x0001 - 0x0000)
struct UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel final
{
public:
	uint8                                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel) == 0x000001, "Wrong alignment on UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel");
static_assert(sizeof(UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel) == 0x000001, "Wrong size on UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel");
static_assert(offsetof(UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel, Value) == 0x000000, "Member 'UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel::Value' has a wrong offset!");

// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.SetVisibilityThreshold
// 0x0004 (0x0004 - 0x0000)
struct UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold) == 0x000004, "Wrong alignment on UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold");
static_assert(sizeof(UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold) == 0x000004, "Wrong size on UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold");
static_assert(offsetof(UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold, Value) == 0x000000, "Member 'UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold::Value' has a wrong offset!");

// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.GetPixelChannel
// 0x0001 (0x0001 - 0x0000)
struct UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel) == 0x000001, "Wrong alignment on UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel");
static_assert(sizeof(UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel) == 0x000001, "Wrong size on UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel");
static_assert(offsetof(UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel, ReturnValue) == 0x000000, "Member 'UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel::ReturnValue' has a wrong offset!");

// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.GetVisibilityThreshold
// 0x0004 (0x0004 - 0x0000)
struct UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold) == 0x000004, "Wrong alignment on UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold");
static_assert(sizeof(UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold) == 0x000004, "Wrong size on UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold");
static_assert(offsetof(UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold, ReturnValue) == 0x000000, "Member 'UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold::ReturnValue' has a wrong offset!");

// Function LGUI.UIRenderTarget.SetCanvas
// 0x0008 (0x0008 - 0x0000)
struct UIRenderTarget_SetCanvas final
{
public:
	class ULGUICanvas*                            Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderTarget_SetCanvas) == 0x000008, "Wrong alignment on UIRenderTarget_SetCanvas");
static_assert(sizeof(UIRenderTarget_SetCanvas) == 0x000008, "Wrong size on UIRenderTarget_SetCanvas");
static_assert(offsetof(UIRenderTarget_SetCanvas, Value) == 0x000000, "Member 'UIRenderTarget_SetCanvas::Value' has a wrong offset!");

// Function LGUI.UIRenderTarget.GetCanvas
// 0x0008 (0x0008 - 0x0000)
struct UIRenderTarget_GetCanvas final
{
public:
	class ULGUICanvas*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderTarget_GetCanvas) == 0x000008, "Wrong alignment on UIRenderTarget_GetCanvas");
static_assert(sizeof(UIRenderTarget_GetCanvas) == 0x000008, "Wrong size on UIRenderTarget_GetCanvas");
static_assert(offsetof(UIRenderTarget_GetCanvas, ReturnValue) == 0x000000, "Member 'UIRenderTarget_GetCanvas::ReturnValue' has a wrong offset!");

// Function LGUI.UIRenderTargetActor.Get2DLineRing
// 0x0008 (0x0008 - 0x0000)
struct UIRenderTargetActor_Get2DLineRing final
{
public:
	class UUIRenderTarget*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRenderTargetActor_Get2DLineRing) == 0x000008, "Wrong alignment on UIRenderTargetActor_Get2DLineRing");
static_assert(sizeof(UIRenderTargetActor_Get2DLineRing) == 0x000008, "Wrong size on UIRenderTargetActor_Get2DLineRing");
static_assert(offsetof(UIRenderTargetActor_Get2DLineRing, ReturnValue) == 0x000000, "Member 'UIRenderTargetActor_Get2DLineRing::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.EndAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIRing_EndAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_EndAngleTo) == 0x000008, "Wrong alignment on UIRing_EndAngleTo");
static_assert(sizeof(UIRing_EndAngleTo) == 0x000018, "Wrong size on UIRing_EndAngleTo");
static_assert(offsetof(UIRing_EndAngleTo, endValue) == 0x000000, "Member 'UIRing_EndAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, Duration) == 0x000004, "Member 'UIRing_EndAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, Delay) == 0x000008, "Member 'UIRing_EndAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, easetype) == 0x00000C, "Member 'UIRing_EndAngleTo::easetype' has a wrong offset!");
static_assert(offsetof(UIRing_EndAngleTo, ReturnValue) == 0x000010, "Member 'UIRing_EndAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.SetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_SetEndAngle final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_SetEndAngle) == 0x000004, "Wrong alignment on UIRing_SetEndAngle");
static_assert(sizeof(UIRing_SetEndAngle) == 0x000004, "Wrong size on UIRing_SetEndAngle");
static_assert(offsetof(UIRing_SetEndAngle, NewValue) == 0x000000, "Member 'UIRing_SetEndAngle::NewValue' has a wrong offset!");

// Function LGUI.UIRing.SetSegment
// 0x0004 (0x0004 - 0x0000)
struct UIRing_SetSegment final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_SetSegment) == 0x000004, "Wrong alignment on UIRing_SetSegment");
static_assert(sizeof(UIRing_SetSegment) == 0x000004, "Wrong size on UIRing_SetSegment");
static_assert(offsetof(UIRing_SetSegment, NewValue) == 0x000000, "Member 'UIRing_SetSegment::NewValue' has a wrong offset!");

// Function LGUI.UIRing.SetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_SetStartAngle final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_SetStartAngle) == 0x000004, "Wrong alignment on UIRing_SetStartAngle");
static_assert(sizeof(UIRing_SetStartAngle) == 0x000004, "Wrong size on UIRing_SetStartAngle");
static_assert(offsetof(UIRing_SetStartAngle, NewValue) == 0x000000, "Member 'UIRing_SetStartAngle::NewValue' has a wrong offset!");

// Function LGUI.UIRing.StartAngleTo
// 0x0018 (0x0018 - 0x0000)
struct UIRing_StartAngleTo final
{
public:
	float                                         endValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   easetype;                                          // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_StartAngleTo) == 0x000008, "Wrong alignment on UIRing_StartAngleTo");
static_assert(sizeof(UIRing_StartAngleTo) == 0x000018, "Wrong size on UIRing_StartAngleTo");
static_assert(offsetof(UIRing_StartAngleTo, endValue) == 0x000000, "Member 'UIRing_StartAngleTo::endValue' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, Duration) == 0x000004, "Member 'UIRing_StartAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, Delay) == 0x000008, "Member 'UIRing_StartAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, easetype) == 0x00000C, "Member 'UIRing_StartAngleTo::easetype' has a wrong offset!");
static_assert(offsetof(UIRing_StartAngleTo, ReturnValue) == 0x000010, "Member 'UIRing_StartAngleTo::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.GetEndAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_GetEndAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_GetEndAngle) == 0x000004, "Wrong alignment on UIRing_GetEndAngle");
static_assert(sizeof(UIRing_GetEndAngle) == 0x000004, "Wrong size on UIRing_GetEndAngle");
static_assert(offsetof(UIRing_GetEndAngle, ReturnValue) == 0x000000, "Member 'UIRing_GetEndAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.GetSegment
// 0x0004 (0x0004 - 0x0000)
struct UIRing_GetSegment final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_GetSegment) == 0x000004, "Wrong alignment on UIRing_GetSegment");
static_assert(sizeof(UIRing_GetSegment) == 0x000004, "Wrong size on UIRing_GetSegment");
static_assert(offsetof(UIRing_GetSegment, ReturnValue) == 0x000000, "Member 'UIRing_GetSegment::ReturnValue' has a wrong offset!");

// Function LGUI.UIRing.GetStartAngle
// 0x0004 (0x0004 - 0x0000)
struct UIRing_GetStartAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRing_GetStartAngle) == 0x000004, "Wrong alignment on UIRing_GetStartAngle");
static_assert(sizeof(UIRing_GetStartAngle) == 0x000004, "Wrong size on UIRing_GetStartAngle");
static_assert(offsetof(UIRing_GetStartAngle, ReturnValue) == 0x000000, "Member 'UIRing_GetStartAngle::ReturnValue' has a wrong offset!");

// Function LGUI.UIRingActor.Get2DLineRing
// 0x0008 (0x0008 - 0x0000)
struct UIRingActor_Get2DLineRing final
{
public:
	class UUIRing*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRingActor_Get2DLineRing) == 0x000008, "Wrong alignment on UIRingActor_Get2DLineRing");
static_assert(sizeof(UIRingActor_Get2DLineRing) == 0x000008, "Wrong size on UIRingActor_Get2DLineRing");
static_assert(offsetof(UIRingActor_Get2DLineRing, ReturnValue) == 0x000000, "Member 'UIRingActor_Get2DLineRing::ReturnValue' has a wrong offset!");

// Function LGUI.UIRingActor.GetUIRing
// 0x0008 (0x0008 - 0x0000)
struct UIRingActor_GetUIRing final
{
public:
	class UUIRing*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIRingActor_GetUIRing) == 0x000008, "Wrong alignment on UIRingActor_GetUIRing");
static_assert(sizeof(UIRingActor_GetUIRing) == 0x000008, "Wrong size on UIRingActor_GetUIRing");
static_assert(offsetof(UIRingActor_GetUIRing, ReturnValue) == 0x000000, "Member 'UIRingActor_GetUIRing::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.RegisterSlideEvent
// 0x0018 (0x0018 - 0x0000)
struct UIScrollbarComponent_RegisterSlideEvent final
{
public:
	TDelegate<void(float InFloat)>                InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_RegisterSlideEvent) == 0x000008, "Wrong alignment on UIScrollbarComponent_RegisterSlideEvent");
static_assert(sizeof(UIScrollbarComponent_RegisterSlideEvent) == 0x000018, "Wrong size on UIScrollbarComponent_RegisterSlideEvent");
static_assert(offsetof(UIScrollbarComponent_RegisterSlideEvent, InDelegate) == 0x000000, "Member 'UIScrollbarComponent_RegisterSlideEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_RegisterSlideEvent, ReturnValue) == 0x000010, "Member 'UIScrollbarComponent_RegisterSlideEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetNavigationChangeInterval
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_SetNavigationChangeInterval final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_SetNavigationChangeInterval) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetNavigationChangeInterval");
static_assert(sizeof(UIScrollbarComponent_SetNavigationChangeInterval) == 0x000004, "Wrong size on UIScrollbarComponent_SetNavigationChangeInterval");
static_assert(offsetof(UIScrollbarComponent_SetNavigationChangeInterval, InValue) == 0x000000, "Member 'UIScrollbarComponent_SetNavigationChangeInterval::InValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetSize
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_SetSize final
{
public:
	float                                         InSize;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_SetSize) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetSize");
static_assert(sizeof(UIScrollbarComponent_SetSize) == 0x000004, "Wrong size on UIScrollbarComponent_SetSize");
static_assert(offsetof(UIScrollbarComponent_SetSize, InSize) == 0x000000, "Member 'UIScrollbarComponent_SetSize::InSize' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UIScrollbarComponent_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollbarComponent_SetValue) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetValue");
static_assert(sizeof(UIScrollbarComponent_SetValue) == 0x000008, "Wrong size on UIScrollbarComponent_SetValue");
static_assert(offsetof(UIScrollbarComponent_SetValue, InValue) == 0x000000, "Member 'UIScrollbarComponent_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_SetValue, fireEvent) == 0x000004, "Member 'UIScrollbarComponent_SetValue::fireEvent' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.SetValueAndSize
// 0x000C (0x000C - 0x0000)
struct UIScrollbarComponent_SetValueAndSize final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSize;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIScrollbarComponent_SetValueAndSize) == 0x000004, "Wrong alignment on UIScrollbarComponent_SetValueAndSize");
static_assert(sizeof(UIScrollbarComponent_SetValueAndSize) == 0x00000C, "Wrong size on UIScrollbarComponent_SetValueAndSize");
static_assert(offsetof(UIScrollbarComponent_SetValueAndSize, InValue) == 0x000000, "Member 'UIScrollbarComponent_SetValueAndSize::InValue' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_SetValueAndSize, InSize) == 0x000004, "Member 'UIScrollbarComponent_SetValueAndSize::InSize' has a wrong offset!");
static_assert(offsetof(UIScrollbarComponent_SetValueAndSize, fireEvent) == 0x000008, "Member 'UIScrollbarComponent_SetValueAndSize::fireEvent' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.UnregisterSlideEvent
// 0x0008 (0x0008 - 0x0000)
struct UIScrollbarComponent_UnregisterSlideEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_UnregisterSlideEvent) == 0x000008, "Wrong alignment on UIScrollbarComponent_UnregisterSlideEvent");
static_assert(sizeof(UIScrollbarComponent_UnregisterSlideEvent) == 0x000008, "Wrong size on UIScrollbarComponent_UnregisterSlideEvent");
static_assert(offsetof(UIScrollbarComponent_UnregisterSlideEvent, InDelegateHandle) == 0x000000, "Member 'UIScrollbarComponent_UnregisterSlideEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetDirectionType
// 0x0001 (0x0001 - 0x0000)
struct UIScrollbarComponent_GetDirectionType final
{
public:
	EUIScrollbarDirectionType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetDirectionType) == 0x000001, "Wrong alignment on UIScrollbarComponent_GetDirectionType");
static_assert(sizeof(UIScrollbarComponent_GetDirectionType) == 0x000001, "Wrong size on UIScrollbarComponent_GetDirectionType");
static_assert(offsetof(UIScrollbarComponent_GetDirectionType, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetDirectionType::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetHandleActor
// 0x0008 (0x0008 - 0x0000)
struct UIScrollbarComponent_GetHandleActor final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetHandleActor) == 0x000008, "Wrong alignment on UIScrollbarComponent_GetHandleActor");
static_assert(sizeof(UIScrollbarComponent_GetHandleActor) == 0x000008, "Wrong size on UIScrollbarComponent_GetHandleActor");
static_assert(offsetof(UIScrollbarComponent_GetHandleActor, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetHandleActor::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetNavigationChangeInterval
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_GetNavigationChangeInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetNavigationChangeInterval) == 0x000004, "Wrong alignment on UIScrollbarComponent_GetNavigationChangeInterval");
static_assert(sizeof(UIScrollbarComponent_GetNavigationChangeInterval) == 0x000004, "Wrong size on UIScrollbarComponent_GetNavigationChangeInterval");
static_assert(offsetof(UIScrollbarComponent_GetNavigationChangeInterval, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetNavigationChangeInterval::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetSize
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_GetSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetSize) == 0x000004, "Wrong alignment on UIScrollbarComponent_GetSize");
static_assert(sizeof(UIScrollbarComponent_GetSize) == 0x000004, "Wrong size on UIScrollbarComponent_GetSize");
static_assert(offsetof(UIScrollbarComponent_GetSize, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIScrollbarComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UIScrollbarComponent_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIScrollbarComponent_GetValue) == 0x000004, "Wrong alignment on UIScrollbarComponent_GetValue");
static_assert(sizeof(UIScrollbarComponent_GetValue) == 0x000004, "Wrong size on UIScrollbarComponent_GetValue");
static_assert(offsetof(UIScrollbarComponent_GetValue, ReturnValue) == 0x000000, "Member 'UIScrollbarComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.CollectTweener
// 0x0008 (0x0008 - 0x0000)
struct UISelectableTransitionComponent_CollectTweener final
{
public:
	class ULTweener*                              InItem;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_CollectTweener) == 0x000008, "Wrong alignment on UISelectableTransitionComponent_CollectTweener");
static_assert(sizeof(UISelectableTransitionComponent_CollectTweener) == 0x000008, "Wrong size on UISelectableTransitionComponent_CollectTweener");
static_assert(offsetof(UISelectableTransitionComponent_CollectTweener, InItem) == 0x000000, "Member 'UISelectableTransitionComponent_CollectTweener::InItem' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.CollectTweeners
// 0x0050 (0x0050 - 0x0000)
struct UISelectableTransitionComponent_CollectTweeners final
{
public:
	TSet<class ULTweener*>                        InItems;                                           // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_CollectTweeners) == 0x000008, "Wrong alignment on UISelectableTransitionComponent_CollectTweeners");
static_assert(sizeof(UISelectableTransitionComponent_CollectTweeners) == 0x000050, "Wrong size on UISelectableTransitionComponent_CollectTweeners");
static_assert(offsetof(UISelectableTransitionComponent_CollectTweeners, InItems) == 0x000000, "Member 'UISelectableTransitionComponent_CollectTweeners::InItems' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.ReceiveOnDisabled
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_ReceiveOnDisabled final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_ReceiveOnDisabled) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_ReceiveOnDisabled");
static_assert(sizeof(UISelectableTransitionComponent_ReceiveOnDisabled) == 0x000001, "Wrong size on UISelectableTransitionComponent_ReceiveOnDisabled");
static_assert(offsetof(UISelectableTransitionComponent_ReceiveOnDisabled, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_ReceiveOnDisabled::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.ReceiveOnHighlighted
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_ReceiveOnHighlighted final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_ReceiveOnHighlighted) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_ReceiveOnHighlighted");
static_assert(sizeof(UISelectableTransitionComponent_ReceiveOnHighlighted) == 0x000001, "Wrong size on UISelectableTransitionComponent_ReceiveOnHighlighted");
static_assert(offsetof(UISelectableTransitionComponent_ReceiveOnHighlighted, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_ReceiveOnHighlighted::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.ReceiveOnNormal
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_ReceiveOnNormal final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_ReceiveOnNormal) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_ReceiveOnNormal");
static_assert(sizeof(UISelectableTransitionComponent_ReceiveOnNormal) == 0x000001, "Wrong size on UISelectableTransitionComponent_ReceiveOnNormal");
static_assert(offsetof(UISelectableTransitionComponent_ReceiveOnNormal, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_ReceiveOnNormal::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.ReceiveOnPressed
// 0x0001 (0x0001 - 0x0000)
struct UISelectableTransitionComponent_ReceiveOnPressed final
{
public:
	bool                                          InImmediateSet;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISelectableTransitionComponent_ReceiveOnPressed) == 0x000001, "Wrong alignment on UISelectableTransitionComponent_ReceiveOnPressed");
static_assert(sizeof(UISelectableTransitionComponent_ReceiveOnPressed) == 0x000001, "Wrong size on UISelectableTransitionComponent_ReceiveOnPressed");
static_assert(offsetof(UISelectableTransitionComponent_ReceiveOnPressed, InImmediateSet) == 0x000000, "Member 'UISelectableTransitionComponent_ReceiveOnPressed::InImmediateSet' has a wrong offset!");

// Function LGUI.UISelectableTransitionComponent.ReceiveOnStartCustomTransition
// 0x000C (0x000C - 0x0000)
struct UISelectableTransitionComponent_ReceiveOnStartCustomTransition final
{
public:
	class FName                                   InTransitionName;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InImmediateSet;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISelectableTransitionComponent_ReceiveOnStartCustomTransition) == 0x000004, "Wrong alignment on UISelectableTransitionComponent_ReceiveOnStartCustomTransition");
static_assert(sizeof(UISelectableTransitionComponent_ReceiveOnStartCustomTransition) == 0x00000C, "Wrong size on UISelectableTransitionComponent_ReceiveOnStartCustomTransition");
static_assert(offsetof(UISelectableTransitionComponent_ReceiveOnStartCustomTransition, InTransitionName) == 0x000000, "Member 'UISelectableTransitionComponent_ReceiveOnStartCustomTransition::InTransitionName' has a wrong offset!");
static_assert(offsetof(UISelectableTransitionComponent_ReceiveOnStartCustomTransition, InImmediateSet) == 0x000008, "Member 'UISelectableTransitionComponent_ReceiveOnStartCustomTransition::InImmediateSet' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.SetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByAspectRatio_SetAspectRatio final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_SetAspectRatio) == 0x000004, "Wrong alignment on UISizeControlByAspectRatio_SetAspectRatio");
static_assert(sizeof(UISizeControlByAspectRatio_SetAspectRatio) == 0x000004, "Wrong size on UISizeControlByAspectRatio_SetAspectRatio");
static_assert(offsetof(UISizeControlByAspectRatio_SetAspectRatio, Value) == 0x000000, "Member 'UISizeControlByAspectRatio_SetAspectRatio::Value' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.SetControlMode
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByAspectRatio_SetControlMode final
{
public:
	EUISizeControlByAspectRatioMode               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_SetControlMode) == 0x000001, "Wrong alignment on UISizeControlByAspectRatio_SetControlMode");
static_assert(sizeof(UISizeControlByAspectRatio_SetControlMode) == 0x000001, "Wrong size on UISizeControlByAspectRatio_SetControlMode");
static_assert(offsetof(UISizeControlByAspectRatio_SetControlMode, Value) == 0x000000, "Member 'UISizeControlByAspectRatio_SetControlMode::Value' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.GetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByAspectRatio_GetAspectRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_GetAspectRatio) == 0x000004, "Wrong alignment on UISizeControlByAspectRatio_GetAspectRatio");
static_assert(sizeof(UISizeControlByAspectRatio_GetAspectRatio) == 0x000004, "Wrong size on UISizeControlByAspectRatio_GetAspectRatio");
static_assert(offsetof(UISizeControlByAspectRatio_GetAspectRatio, ReturnValue) == 0x000000, "Member 'UISizeControlByAspectRatio_GetAspectRatio::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByAspectRatio.GetControlMode
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByAspectRatio_GetControlMode final
{
public:
	EUISizeControlByAspectRatioMode               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByAspectRatio_GetControlMode) == 0x000001, "Wrong alignment on UISizeControlByAspectRatio_GetControlMode");
static_assert(sizeof(UISizeControlByAspectRatio_GetControlMode) == 0x000001, "Wrong size on UISizeControlByAspectRatio_GetControlMode");
static_assert(offsetof(UISizeControlByAspectRatio_GetControlMode, ReturnValue) == 0x000000, "Member 'UISizeControlByAspectRatio_GetControlMode::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.SetAdditionalHeight
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByChildren_SetAdditionalHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_SetAdditionalHeight) == 0x000004, "Wrong alignment on UISizeControlByChildren_SetAdditionalHeight");
static_assert(sizeof(UISizeControlByChildren_SetAdditionalHeight) == 0x000004, "Wrong size on UISizeControlByChildren_SetAdditionalHeight");
static_assert(offsetof(UISizeControlByChildren_SetAdditionalHeight, Value) == 0x000000, "Member 'UISizeControlByChildren_SetAdditionalHeight::Value' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.SetAdditionalWidth
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByChildren_SetAdditionalWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_SetAdditionalWidth) == 0x000004, "Wrong alignment on UISizeControlByChildren_SetAdditionalWidth");
static_assert(sizeof(UISizeControlByChildren_SetAdditionalWidth) == 0x000004, "Wrong size on UISizeControlByChildren_SetAdditionalWidth");
static_assert(offsetof(UISizeControlByChildren_SetAdditionalWidth, Value) == 0x000000, "Member 'UISizeControlByChildren_SetAdditionalWidth::Value' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByChildren_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UISizeControlByChildren_SetHeightFitToChildren");
static_assert(sizeof(UISizeControlByChildren_SetHeightFitToChildren) == 0x000001, "Wrong size on UISizeControlByChildren_SetHeightFitToChildren");
static_assert(offsetof(UISizeControlByChildren_SetHeightFitToChildren, Value) == 0x000000, "Member 'UISizeControlByChildren_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByChildren_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UISizeControlByChildren_SetWidthFitToChildren");
static_assert(sizeof(UISizeControlByChildren_SetWidthFitToChildren) == 0x000001, "Wrong size on UISizeControlByChildren_SetWidthFitToChildren");
static_assert(offsetof(UISizeControlByChildren_SetWidthFitToChildren, Value) == 0x000000, "Member 'UISizeControlByChildren_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.GetAdditionalHeight
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByChildren_GetAdditionalHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_GetAdditionalHeight) == 0x000004, "Wrong alignment on UISizeControlByChildren_GetAdditionalHeight");
static_assert(sizeof(UISizeControlByChildren_GetAdditionalHeight) == 0x000004, "Wrong size on UISizeControlByChildren_GetAdditionalHeight");
static_assert(offsetof(UISizeControlByChildren_GetAdditionalHeight, ReturnValue) == 0x000000, "Member 'UISizeControlByChildren_GetAdditionalHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.GetAdditionalWidth
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByChildren_GetAdditionalWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_GetAdditionalWidth) == 0x000004, "Wrong alignment on UISizeControlByChildren_GetAdditionalWidth");
static_assert(sizeof(UISizeControlByChildren_GetAdditionalWidth) == 0x000004, "Wrong size on UISizeControlByChildren_GetAdditionalWidth");
static_assert(offsetof(UISizeControlByChildren_GetAdditionalWidth, ReturnValue) == 0x000000, "Member 'UISizeControlByChildren_GetAdditionalWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.GetHeightFitToChildren
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByChildren_GetHeightFitToChildren final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_GetHeightFitToChildren) == 0x000004, "Wrong alignment on UISizeControlByChildren_GetHeightFitToChildren");
static_assert(sizeof(UISizeControlByChildren_GetHeightFitToChildren) == 0x000004, "Wrong size on UISizeControlByChildren_GetHeightFitToChildren");
static_assert(offsetof(UISizeControlByChildren_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UISizeControlByChildren_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByChildren.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByChildren_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByChildren_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UISizeControlByChildren_GetWidthFitToChildren");
static_assert(sizeof(UISizeControlByChildren_GetWidthFitToChildren) == 0x000001, "Wrong size on UISizeControlByChildren_GetWidthFitToChildren");
static_assert(offsetof(UISizeControlByChildren_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UISizeControlByChildren_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetAdditionalHeight
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_SetAdditionalHeight final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetAdditionalHeight) == 0x000004, "Wrong alignment on UISizeControlByOther_SetAdditionalHeight");
static_assert(sizeof(UISizeControlByOther_SetAdditionalHeight) == 0x000004, "Wrong size on UISizeControlByOther_SetAdditionalHeight");
static_assert(offsetof(UISizeControlByOther_SetAdditionalHeight, Value) == 0x000000, "Member 'UISizeControlByOther_SetAdditionalHeight::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetAdditionalWidth
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_SetAdditionalWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetAdditionalWidth) == 0x000004, "Wrong alignment on UISizeControlByOther_SetAdditionalWidth");
static_assert(sizeof(UISizeControlByOther_SetAdditionalWidth) == 0x000004, "Wrong size on UISizeControlByOther_SetAdditionalWidth");
static_assert(offsetof(UISizeControlByOther_SetAdditionalWidth, Value) == 0x000000, "Member 'UISizeControlByOther_SetAdditionalWidth::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetControlHeight
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_SetControlHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetControlHeight) == 0x000001, "Wrong alignment on UISizeControlByOther_SetControlHeight");
static_assert(sizeof(UISizeControlByOther_SetControlHeight) == 0x000001, "Wrong size on UISizeControlByOther_SetControlHeight");
static_assert(offsetof(UISizeControlByOther_SetControlHeight, Value) == 0x000000, "Member 'UISizeControlByOther_SetControlHeight::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetControlWidth
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_SetControlWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetControlWidth) == 0x000001, "Wrong alignment on UISizeControlByOther_SetControlWidth");
static_assert(sizeof(UISizeControlByOther_SetControlWidth) == 0x000001, "Wrong size on UISizeControlByOther_SetControlWidth");
static_assert(offsetof(UISizeControlByOther_SetControlWidth, Value) == 0x000000, "Member 'UISizeControlByOther_SetControlWidth::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.SetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct UISizeControlByOther_SetTargetActor final
{
public:
	class AUIBaseActor*                           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_SetTargetActor) == 0x000008, "Wrong alignment on UISizeControlByOther_SetTargetActor");
static_assert(sizeof(UISizeControlByOther_SetTargetActor) == 0x000008, "Wrong size on UISizeControlByOther_SetTargetActor");
static_assert(offsetof(UISizeControlByOther_SetTargetActor, Value) == 0x000000, "Member 'UISizeControlByOther_SetTargetActor::Value' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetAdditionalHeight
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_GetAdditionalHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetAdditionalHeight) == 0x000004, "Wrong alignment on UISizeControlByOther_GetAdditionalHeight");
static_assert(sizeof(UISizeControlByOther_GetAdditionalHeight) == 0x000004, "Wrong size on UISizeControlByOther_GetAdditionalHeight");
static_assert(offsetof(UISizeControlByOther_GetAdditionalHeight, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetAdditionalHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetAdditionalWidth
// 0x0004 (0x0004 - 0x0000)
struct UISizeControlByOther_GetAdditionalWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetAdditionalWidth) == 0x000004, "Wrong alignment on UISizeControlByOther_GetAdditionalWidth");
static_assert(sizeof(UISizeControlByOther_GetAdditionalWidth) == 0x000004, "Wrong size on UISizeControlByOther_GetAdditionalWidth");
static_assert(offsetof(UISizeControlByOther_GetAdditionalWidth, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetAdditionalWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetControlHeight
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_GetControlHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetControlHeight) == 0x000001, "Wrong alignment on UISizeControlByOther_GetControlHeight");
static_assert(sizeof(UISizeControlByOther_GetControlHeight) == 0x000001, "Wrong size on UISizeControlByOther_GetControlHeight");
static_assert(offsetof(UISizeControlByOther_GetControlHeight, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetControlHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetControlWidth
// 0x0001 (0x0001 - 0x0000)
struct UISizeControlByOther_GetControlWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetControlWidth) == 0x000001, "Wrong alignment on UISizeControlByOther_GetControlWidth");
static_assert(sizeof(UISizeControlByOther_GetControlWidth) == 0x000001, "Wrong size on UISizeControlByOther_GetControlWidth");
static_assert(offsetof(UISizeControlByOther_GetControlWidth, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetControlWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UISizeControlByOther.GetTargetActor
// 0x0008 (0x0008 - 0x0000)
struct UISizeControlByOther_GetTargetActor final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISizeControlByOther_GetTargetActor) == 0x000008, "Wrong alignment on UISizeControlByOther_GetTargetActor");
static_assert(sizeof(UISizeControlByOther_GetTargetActor) == 0x000008, "Wrong size on UISizeControlByOther_GetTargetActor");
static_assert(offsetof(UISizeControlByOther_GetTargetActor, ReturnValue) == 0x000000, "Member 'UISizeControlByOther_GetTargetActor::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.RegisterSlideEvent
// 0x0018 (0x0018 - 0x0000)
struct UISliderComponent_RegisterSlideEvent final
{
public:
	TDelegate<void(float InFloat)>                InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_RegisterSlideEvent) == 0x000008, "Wrong alignment on UISliderComponent_RegisterSlideEvent");
static_assert(sizeof(UISliderComponent_RegisterSlideEvent) == 0x000018, "Wrong size on UISliderComponent_RegisterSlideEvent");
static_assert(offsetof(UISliderComponent_RegisterSlideEvent, InDelegate) == 0x000000, "Member 'UISliderComponent_RegisterSlideEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UISliderComponent_RegisterSlideEvent, ReturnValue) == 0x000010, "Member 'UISliderComponent_RegisterSlideEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.SetMaxValue
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetMaxValue final
{
public:
	float                                         InMaxValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepRelativeValue;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetMaxValue) == 0x000004, "Wrong alignment on UISliderComponent_SetMaxValue");
static_assert(sizeof(UISliderComponent_SetMaxValue) == 0x000008, "Wrong size on UISliderComponent_SetMaxValue");
static_assert(offsetof(UISliderComponent_SetMaxValue, InMaxValue) == 0x000000, "Member 'UISliderComponent_SetMaxValue::InMaxValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMaxValue, KeepRelativeValue) == 0x000004, "Member 'UISliderComponent_SetMaxValue::KeepRelativeValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMaxValue, fireEvent) == 0x000005, "Member 'UISliderComponent_SetMaxValue::fireEvent' has a wrong offset!");

// Function LGUI.UISliderComponent.SetMinValue
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetMinValue final
{
public:
	float                                         InMinValue;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepRelativeValue;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetMinValue) == 0x000004, "Wrong alignment on UISliderComponent_SetMinValue");
static_assert(sizeof(UISliderComponent_SetMinValue) == 0x000008, "Wrong size on UISliderComponent_SetMinValue");
static_assert(offsetof(UISliderComponent_SetMinValue, InMinValue) == 0x000000, "Member 'UISliderComponent_SetMinValue::InMinValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMinValue, KeepRelativeValue) == 0x000004, "Member 'UISliderComponent_SetMinValue::KeepRelativeValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetMinValue, fireEvent) == 0x000005, "Member 'UISliderComponent_SetMinValue::fireEvent' has a wrong offset!");

// Function LGUI.UISliderComponent.SetNavigationChangeInterval
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_SetNavigationChangeInterval final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_SetNavigationChangeInterval) == 0x000004, "Wrong alignment on UISliderComponent_SetNavigationChangeInterval");
static_assert(sizeof(UISliderComponent_SetNavigationChangeInterval) == 0x000004, "Wrong size on UISliderComponent_SetNavigationChangeInterval");
static_assert(offsetof(UISliderComponent_SetNavigationChangeInterval, InValue) == 0x000000, "Member 'UISliderComponent_SetNavigationChangeInterval::InValue' has a wrong offset!");

// Function LGUI.UISliderComponent.SetValue
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_SetValue final
{
public:
	float                                         InValue;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UISliderComponent_SetValue) == 0x000004, "Wrong alignment on UISliderComponent_SetValue");
static_assert(sizeof(UISliderComponent_SetValue) == 0x000008, "Wrong size on UISliderComponent_SetValue");
static_assert(offsetof(UISliderComponent_SetValue, InValue) == 0x000000, "Member 'UISliderComponent_SetValue::InValue' has a wrong offset!");
static_assert(offsetof(UISliderComponent_SetValue, fireEvent) == 0x000004, "Member 'UISliderComponent_SetValue::fireEvent' has a wrong offset!");

// Function LGUI.UISliderComponent.UnregisterSlideEvent
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_UnregisterSlideEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_UnregisterSlideEvent) == 0x000008, "Wrong alignment on UISliderComponent_UnregisterSlideEvent");
static_assert(sizeof(UISliderComponent_UnregisterSlideEvent) == 0x000008, "Wrong size on UISliderComponent_UnregisterSlideEvent");
static_assert(offsetof(UISliderComponent_UnregisterSlideEvent, InDelegateHandle) == 0x000000, "Member 'UISliderComponent_UnregisterSlideEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UISliderComponent.GetDirectionType
// 0x0001 (0x0001 - 0x0000)
struct UISliderComponent_GetDirectionType final
{
public:
	EUISliderDirectionType                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetDirectionType) == 0x000001, "Wrong alignment on UISliderComponent_GetDirectionType");
static_assert(sizeof(UISliderComponent_GetDirectionType) == 0x000001, "Wrong size on UISliderComponent_GetDirectionType");
static_assert(offsetof(UISliderComponent_GetDirectionType, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetDirectionType::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetFillActor
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_GetFillActor final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetFillActor) == 0x000008, "Wrong alignment on UISliderComponent_GetFillActor");
static_assert(sizeof(UISliderComponent_GetFillActor) == 0x000008, "Wrong size on UISliderComponent_GetFillActor");
static_assert(offsetof(UISliderComponent_GetFillActor, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetFillActor::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetHandleActor
// 0x0008 (0x0008 - 0x0000)
struct UISliderComponent_GetHandleActor final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetHandleActor) == 0x000008, "Wrong alignment on UISliderComponent_GetHandleActor");
static_assert(sizeof(UISliderComponent_GetHandleActor) == 0x000008, "Wrong size on UISliderComponent_GetHandleActor");
static_assert(offsetof(UISliderComponent_GetHandleActor, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetHandleActor::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetMaxValue
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetMaxValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetMaxValue) == 0x000004, "Wrong alignment on UISliderComponent_GetMaxValue");
static_assert(sizeof(UISliderComponent_GetMaxValue) == 0x000004, "Wrong size on UISliderComponent_GetMaxValue");
static_assert(offsetof(UISliderComponent_GetMaxValue, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetMaxValue::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetMinValue
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetMinValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetMinValue) == 0x000004, "Wrong alignment on UISliderComponent_GetMinValue");
static_assert(sizeof(UISliderComponent_GetMinValue) == 0x000004, "Wrong size on UISliderComponent_GetMinValue");
static_assert(offsetof(UISliderComponent_GetMinValue, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetMinValue::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetNavigationChangeInterval
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetNavigationChangeInterval final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetNavigationChangeInterval) == 0x000004, "Wrong alignment on UISliderComponent_GetNavigationChangeInterval");
static_assert(sizeof(UISliderComponent_GetNavigationChangeInterval) == 0x000004, "Wrong size on UISliderComponent_GetNavigationChangeInterval");
static_assert(offsetof(UISliderComponent_GetNavigationChangeInterval, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetNavigationChangeInterval::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetValue
// 0x0004 (0x0004 - 0x0000)
struct UISliderComponent_GetValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetValue) == 0x000004, "Wrong alignment on UISliderComponent_GetValue");
static_assert(sizeof(UISliderComponent_GetValue) == 0x000004, "Wrong size on UISliderComponent_GetValue");
static_assert(offsetof(UISliderComponent_GetValue, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.UISliderComponent.GetWholeNumber
// 0x0001 (0x0001 - 0x0000)
struct UISliderComponent_GetWholeNumber final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISliderComponent_GetWholeNumber) == 0x000001, "Wrong alignment on UISliderComponent_GetWholeNumber");
static_assert(sizeof(UISliderComponent_GetWholeNumber) == 0x000001, "Wrong size on UISliderComponent_GetWholeNumber");
static_assert(offsetof(UISliderComponent_GetWholeNumber, ReturnValue) == 0x000000, "Member 'UISliderComponent_GetWholeNumber::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UISprite_SetFillAmount final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillAmount) == 0x000004, "Wrong alignment on UISprite_SetFillAmount");
static_assert(sizeof(UISprite_SetFillAmount) == 0x000004, "Wrong size on UISprite_SetFillAmount");
static_assert(offsetof(UISprite_SetFillAmount, NewValue) == 0x000000, "Member 'UISprite_SetFillAmount::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetFillDirectionFlip final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillDirectionFlip) == 0x000001, "Wrong alignment on UISprite_SetFillDirectionFlip");
static_assert(sizeof(UISprite_SetFillDirectionFlip) == 0x000001, "Wrong size on UISprite_SetFillDirectionFlip");
static_assert(offsetof(UISprite_SetFillDirectionFlip, NewValue) == 0x000000, "Member 'UISprite_SetFillDirectionFlip::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetFillMethod final
{
public:
	EUISpriteFillMethod                           NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillMethod) == 0x000001, "Wrong alignment on UISprite_SetFillMethod");
static_assert(sizeof(UISprite_SetFillMethod) == 0x000001, "Wrong size on UISprite_SetFillMethod");
static_assert(offsetof(UISprite_SetFillMethod, NewValue) == 0x000000, "Member 'UISprite_SetFillMethod::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetFillOrigin final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetFillOrigin) == 0x000001, "Wrong alignment on UISprite_SetFillOrigin");
static_assert(sizeof(UISprite_SetFillOrigin) == 0x000001, "Wrong size on UISprite_SetFillOrigin");
static_assert(offsetof(UISprite_SetFillOrigin, NewValue) == 0x000000, "Member 'UISprite_SetFillOrigin::NewValue' has a wrong offset!");

// Function LGUI.UISprite.SetSpriteType
// 0x0001 (0x0001 - 0x0000)
struct UISprite_SetSpriteType final
{
public:
	EUISpriteType                                 NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_SetSpriteType) == 0x000001, "Wrong alignment on UISprite_SetSpriteType");
static_assert(sizeof(UISprite_SetSpriteType) == 0x000001, "Wrong size on UISprite_SetSpriteType");
static_assert(offsetof(UISprite_SetSpriteType, NewType) == 0x000000, "Member 'UISprite_SetSpriteType::NewType' has a wrong offset!");

// Function LGUI.UISprite.GetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UISprite_GetFillAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillAmount) == 0x000004, "Wrong alignment on UISprite_GetFillAmount");
static_assert(sizeof(UISprite_GetFillAmount) == 0x000004, "Wrong size on UISprite_GetFillAmount");
static_assert(offsetof(UISprite_GetFillAmount, ReturnValue) == 0x000000, "Member 'UISprite_GetFillAmount::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetFillDirectionFlip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillDirectionFlip) == 0x000001, "Wrong alignment on UISprite_GetFillDirectionFlip");
static_assert(sizeof(UISprite_GetFillDirectionFlip) == 0x000001, "Wrong size on UISprite_GetFillDirectionFlip");
static_assert(offsetof(UISprite_GetFillDirectionFlip, ReturnValue) == 0x000000, "Member 'UISprite_GetFillDirectionFlip::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetFillMethod final
{
public:
	EUISpriteFillMethod                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillMethod) == 0x000001, "Wrong alignment on UISprite_GetFillMethod");
static_assert(sizeof(UISprite_GetFillMethod) == 0x000001, "Wrong size on UISprite_GetFillMethod");
static_assert(offsetof(UISprite_GetFillMethod, ReturnValue) == 0x000000, "Member 'UISprite_GetFillMethod::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetFillOrigin final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetFillOrigin) == 0x000001, "Wrong alignment on UISprite_GetFillOrigin");
static_assert(sizeof(UISprite_GetFillOrigin) == 0x000001, "Wrong size on UISprite_GetFillOrigin");
static_assert(offsetof(UISprite_GetFillOrigin, ReturnValue) == 0x000000, "Member 'UISprite_GetFillOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.UISprite.GetSpriteType
// 0x0001 (0x0001 - 0x0000)
struct UISprite_GetSpriteType final
{
public:
	EUISpriteType                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISprite_GetSpriteType) == 0x000001, "Wrong alignment on UISprite_GetSpriteType");
static_assert(sizeof(UISprite_GetSpriteType) == 0x000001, "Wrong size on UISprite_GetSpriteType");
static_assert(offsetof(UISprite_GetSpriteType, ReturnValue) == 0x000000, "Member 'UISprite_GetSpriteType::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteActor.GetUISprite
// 0x0008 (0x0008 - 0x0000)
struct UISpriteActor_GetUISprite final
{
public:
	class UUISprite*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteActor_GetUISprite) == 0x000008, "Wrong alignment on UISpriteActor_GetUISprite");
static_assert(sizeof(UISpriteActor_GetUISprite) == 0x000008, "Wrong size on UISpriteActor_GetUISprite");
static_assert(offsetof(UISpriteActor_GetUISprite, ReturnValue) == 0x000000, "Member 'UISpriteActor_GetUISprite::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteSequencePlayer.SetSnapSpriteSize
// 0x0001 (0x0001 - 0x0000)
struct UISpriteSequencePlayer_SetSnapSpriteSize final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSequencePlayer_SetSnapSpriteSize) == 0x000001, "Wrong alignment on UISpriteSequencePlayer_SetSnapSpriteSize");
static_assert(sizeof(UISpriteSequencePlayer_SetSnapSpriteSize) == 0x000001, "Wrong size on UISpriteSequencePlayer_SetSnapSpriteSize");
static_assert(offsetof(UISpriteSequencePlayer_SetSnapSpriteSize, Value) == 0x000000, "Member 'UISpriteSequencePlayer_SetSnapSpriteSize::Value' has a wrong offset!");

// Function LGUI.UISpriteSequencePlayer.SetSpriteSequence
// 0x0010 (0x0010 - 0x0000)
struct UISpriteSequencePlayer_SetSpriteSequence final
{
public:
	TArray<class ULGUISpriteData_BaseObject*>     Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSequencePlayer_SetSpriteSequence) == 0x000008, "Wrong alignment on UISpriteSequencePlayer_SetSpriteSequence");
static_assert(sizeof(UISpriteSequencePlayer_SetSpriteSequence) == 0x000010, "Wrong size on UISpriteSequencePlayer_SetSpriteSequence");
static_assert(offsetof(UISpriteSequencePlayer_SetSpriteSequence, Value) == 0x000000, "Member 'UISpriteSequencePlayer_SetSpriteSequence::Value' has a wrong offset!");

// Function LGUI.UISpriteSequencePlayer.GetSnapSpriteSize
// 0x0001 (0x0001 - 0x0000)
struct UISpriteSequencePlayer_GetSnapSpriteSize final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSequencePlayer_GetSnapSpriteSize) == 0x000001, "Wrong alignment on UISpriteSequencePlayer_GetSnapSpriteSize");
static_assert(sizeof(UISpriteSequencePlayer_GetSnapSpriteSize) == 0x000001, "Wrong size on UISpriteSequencePlayer_GetSnapSpriteSize");
static_assert(offsetof(UISpriteSequencePlayer_GetSnapSpriteSize, ReturnValue) == 0x000000, "Member 'UISpriteSequencePlayer_GetSnapSpriteSize::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteSequencePlayer.GetSpriteSequence
// 0x0010 (0x0010 - 0x0000)
struct UISpriteSequencePlayer_GetSpriteSequence final
{
public:
	TArray<class ULGUISpriteData_BaseObject*>     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSequencePlayer_GetSpriteSequence) == 0x000008, "Wrong alignment on UISpriteSequencePlayer_GetSpriteSequence");
static_assert(sizeof(UISpriteSequencePlayer_GetSpriteSequence) == 0x000010, "Wrong size on UISpriteSequencePlayer_GetSpriteSequence");
static_assert(offsetof(UISpriteSequencePlayer_GetSpriteSequence, ReturnValue) == 0x000000, "Member 'UISpriteSequencePlayer_GetSpriteSequence::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.SetHeightCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_SetHeightCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_SetHeightCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_SetHeightCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_SetHeightCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_SetHeightCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_SetHeightCount, Value) == 0x000000, "Member 'UISpriteSheetTexturePlayer_SetHeightCount::Value' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.SetWidthCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_SetWidthCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_SetWidthCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_SetWidthCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_SetWidthCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_SetWidthCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_SetWidthCount, Value) == 0x000000, "Member 'UISpriteSheetTexturePlayer_SetWidthCount::Value' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.GetHeightCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_GetHeightCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_GetHeightCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_GetHeightCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_GetHeightCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_GetHeightCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_GetHeightCount, ReturnValue) == 0x000000, "Member 'UISpriteSheetTexturePlayer_GetHeightCount::ReturnValue' has a wrong offset!");

// Function LGUI.UISpriteSheetTexturePlayer.GetWidthCount
// 0x0004 (0x0004 - 0x0000)
struct UISpriteSheetTexturePlayer_GetWidthCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UISpriteSheetTexturePlayer_GetWidthCount) == 0x000004, "Wrong alignment on UISpriteSheetTexturePlayer_GetWidthCount");
static_assert(sizeof(UISpriteSheetTexturePlayer_GetWidthCount) == 0x000004, "Wrong size on UISpriteSheetTexturePlayer_GetWidthCount");
static_assert(offsetof(UISpriteSheetTexturePlayer_GetWidthCount, ReturnValue) == 0x000000, "Member 'UISpriteSheetTexturePlayer_GetWidthCount::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetOrCreateDynamicMaterialInstance
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_GetOrCreateDynamicMaterialInstance final
{
public:
	class UMaterialInstanceDynamic*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetOrCreateDynamicMaterialInstance) == 0x000008, "Wrong alignment on UIStaticMesh_GetOrCreateDynamicMaterialInstance");
static_assert(sizeof(UIStaticMesh_GetOrCreateDynamicMaterialInstance) == 0x000008, "Wrong size on UIStaticMesh_GetOrCreateDynamicMaterialInstance");
static_assert(offsetof(UIStaticMesh_GetOrCreateDynamicMaterialInstance, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetOrCreateDynamicMaterialInstance::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMesh.SetMesh
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_SetMesh final
{
public:
	class ULGUIStaticMeshCacheData*               Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_SetMesh) == 0x000008, "Wrong alignment on UIStaticMesh_SetMesh");
static_assert(sizeof(UIStaticMesh_SetMesh) == 0x000008, "Wrong size on UIStaticMesh_SetMesh");
static_assert(offsetof(UIStaticMesh_SetMesh, Value) == 0x000000, "Member 'UIStaticMesh_SetMesh::Value' has a wrong offset!");

// Function LGUI.UIStaticMesh.SetReplaceMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_SetReplaceMaterial final
{
public:
	class UMaterialInterface*                     Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_SetReplaceMaterial) == 0x000008, "Wrong alignment on UIStaticMesh_SetReplaceMaterial");
static_assert(sizeof(UIStaticMesh_SetReplaceMaterial) == 0x000008, "Wrong size on UIStaticMesh_SetReplaceMaterial");
static_assert(offsetof(UIStaticMesh_SetReplaceMaterial, Value) == 0x000000, "Member 'UIStaticMesh_SetReplaceMaterial::Value' has a wrong offset!");

// Function LGUI.UIStaticMesh.SetVertexColorType
// 0x0001 (0x0001 - 0x0000)
struct UIStaticMesh_SetVertexColorType final
{
public:
	EUIStaticMeshVertexColorType                  Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_SetVertexColorType) == 0x000001, "Wrong alignment on UIStaticMesh_SetVertexColorType");
static_assert(sizeof(UIStaticMesh_SetVertexColorType) == 0x000001, "Wrong size on UIStaticMesh_SetVertexColorType");
static_assert(offsetof(UIStaticMesh_SetVertexColorType, Value) == 0x000000, "Member 'UIStaticMesh_SetVertexColorType::Value' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetMeshCache
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_GetMeshCache final
{
public:
	class ULGUIStaticMeshCacheData*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetMeshCache) == 0x000008, "Wrong alignment on UIStaticMesh_GetMeshCache");
static_assert(sizeof(UIStaticMesh_GetMeshCache) == 0x000008, "Wrong size on UIStaticMesh_GetMeshCache");
static_assert(offsetof(UIStaticMesh_GetMeshCache, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetMeshCache::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetRenderMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_GetRenderMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetRenderMaterial) == 0x000008, "Wrong alignment on UIStaticMesh_GetRenderMaterial");
static_assert(sizeof(UIStaticMesh_GetRenderMaterial) == 0x000008, "Wrong size on UIStaticMesh_GetRenderMaterial");
static_assert(offsetof(UIStaticMesh_GetRenderMaterial, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetRenderMaterial::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetReplaceMaterial
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMesh_GetReplaceMaterial final
{
public:
	class UMaterialInterface*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetReplaceMaterial) == 0x000008, "Wrong alignment on UIStaticMesh_GetReplaceMaterial");
static_assert(sizeof(UIStaticMesh_GetReplaceMaterial) == 0x000008, "Wrong size on UIStaticMesh_GetReplaceMaterial");
static_assert(offsetof(UIStaticMesh_GetReplaceMaterial, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetReplaceMaterial::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMesh.GetVertexColorType
// 0x0001 (0x0001 - 0x0000)
struct UIStaticMesh_GetVertexColorType final
{
public:
	EUIStaticMeshVertexColorType                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMesh_GetVertexColorType) == 0x000001, "Wrong alignment on UIStaticMesh_GetVertexColorType");
static_assert(sizeof(UIStaticMesh_GetVertexColorType) == 0x000001, "Wrong size on UIStaticMesh_GetVertexColorType");
static_assert(offsetof(UIStaticMesh_GetVertexColorType, ReturnValue) == 0x000000, "Member 'UIStaticMesh_GetVertexColorType::ReturnValue' has a wrong offset!");

// Function LGUI.UIStaticMeshActor.GetUIStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct UIStaticMeshActor_GetUIStaticMesh final
{
public:
	class UUIStaticMesh*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIStaticMeshActor_GetUIStaticMesh) == 0x000008, "Wrong alignment on UIStaticMeshActor_GetUIStaticMesh");
static_assert(sizeof(UIStaticMeshActor_GetUIStaticMesh) == 0x000008, "Wrong size on UIStaticMeshActor_GetUIStaticMesh");
static_assert(offsetof(UIStaticMeshActor_GetUIStaticMesh, ReturnValue) == 0x000000, "Member 'UIStaticMeshActor_GetUIStaticMesh::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRealSize
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetRealSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRealSize) == 0x000008, "Wrong alignment on UIText_GetRealSize");
static_assert(sizeof(UIText_GetRealSize) == 0x000010, "Wrong size on UIText_GetRealSize");
static_assert(offsetof(UIText_GetRealSize, ReturnValue) == 0x000000, "Member 'UIText_GetRealSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.SetAdjustHeight
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetAdjustHeight final
{
public:
	bool                                          newAdjustHeight;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetAdjustHeight) == 0x000001, "Wrong alignment on UIText_SetAdjustHeight");
static_assert(sizeof(UIText_SetAdjustHeight) == 0x000001, "Wrong size on UIText_SetAdjustHeight");
static_assert(offsetof(UIText_SetAdjustHeight, newAdjustHeight) == 0x000000, "Member 'UIText_SetAdjustHeight::newAdjustHeight' has a wrong offset!");

// Function LGUI.UIText.SetAdjustWidth
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetAdjustWidth final
{
public:
	bool                                          newAdjustWidth;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetAdjustWidth) == 0x000001, "Wrong alignment on UIText_SetAdjustWidth");
static_assert(sizeof(UIText_SetAdjustWidth) == 0x000001, "Wrong size on UIText_SetAdjustWidth");
static_assert(offsetof(UIText_SetAdjustWidth, newAdjustWidth) == 0x000000, "Member 'UIText_SetAdjustWidth::newAdjustWidth' has a wrong offset!");

// Function LGUI.UIText.SetFont
// 0x0008 (0x0008 - 0x0000)
struct UIText_SetFont final
{
public:
	class ULGUIFontData_BaseObject*               newFont;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFont) == 0x000008, "Wrong alignment on UIText_SetFont");
static_assert(sizeof(UIText_SetFont) == 0x000008, "Wrong size on UIText_SetFont");
static_assert(offsetof(UIText_SetFont, newFont) == 0x000000, "Member 'UIText_SetFont::newFont' has a wrong offset!");

// Function LGUI.UIText.SetFontSize
// 0x0004 (0x0004 - 0x0000)
struct UIText_SetFontSize final
{
public:
	float                                         NewSize;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontSize) == 0x000004, "Wrong alignment on UIText_SetFontSize");
static_assert(sizeof(UIText_SetFontSize) == 0x000004, "Wrong size on UIText_SetFontSize");
static_assert(offsetof(UIText_SetFontSize, NewSize) == 0x000000, "Member 'UIText_SetFontSize::NewSize' has a wrong offset!");

// Function LGUI.UIText.SetFontSpace
// 0x0010 (0x0010 - 0x0000)
struct UIText_SetFontSpace final
{
public:
	struct FVector2D                              NewSpace;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontSpace) == 0x000008, "Wrong alignment on UIText_SetFontSpace");
static_assert(sizeof(UIText_SetFontSpace) == 0x000010, "Wrong size on UIText_SetFontSpace");
static_assert(offsetof(UIText_SetFontSpace, NewSpace) == 0x000000, "Member 'UIText_SetFontSpace::NewSpace' has a wrong offset!");

// Function LGUI.UIText.SetFontStyle
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetFontStyle final
{
public:
	EUITextFontStyle                              newFontStyle;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetFontStyle) == 0x000001, "Wrong alignment on UIText_SetFontStyle");
static_assert(sizeof(UIText_SetFontStyle) == 0x000001, "Wrong size on UIText_SetFontStyle");
static_assert(offsetof(UIText_SetFontStyle, newFontStyle) == 0x000000, "Member 'UIText_SetFontStyle::newFontStyle' has a wrong offset!");

// Function LGUI.UIText.SetMaxHorizontalWidth
// 0x0004 (0x0004 - 0x0000)
struct UIText_SetMaxHorizontalWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetMaxHorizontalWidth) == 0x000004, "Wrong alignment on UIText_SetMaxHorizontalWidth");
static_assert(sizeof(UIText_SetMaxHorizontalWidth) == 0x000004, "Wrong size on UIText_SetMaxHorizontalWidth");
static_assert(offsetof(UIText_SetMaxHorizontalWidth, Value) == 0x000000, "Member 'UIText_SetMaxHorizontalWidth::Value' has a wrong offset!");

// Function LGUI.UIText.SetOverflowType
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetOverflowType final
{
public:
	EUITextOverflowType                           newOverflowType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetOverflowType) == 0x000001, "Wrong alignment on UIText_SetOverflowType");
static_assert(sizeof(UIText_SetOverflowType) == 0x000001, "Wrong size on UIText_SetOverflowType");
static_assert(offsetof(UIText_SetOverflowType, newOverflowType) == 0x000000, "Member 'UIText_SetOverflowType::newOverflowType' has a wrong offset!");

// Function LGUI.UIText.SetParagraphHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetParagraphHorizontalAlignment final
{
public:
	EUITextParagraphHorizontalAlign               newHAlign;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetParagraphHorizontalAlignment) == 0x000001, "Wrong alignment on UIText_SetParagraphHorizontalAlignment");
static_assert(sizeof(UIText_SetParagraphHorizontalAlignment) == 0x000001, "Wrong size on UIText_SetParagraphHorizontalAlignment");
static_assert(offsetof(UIText_SetParagraphHorizontalAlignment, newHAlign) == 0x000000, "Member 'UIText_SetParagraphHorizontalAlignment::newHAlign' has a wrong offset!");

// Function LGUI.UIText.SetParagraphVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetParagraphVerticalAlignment final
{
public:
	EUITextParagraphVerticalAlign                 newVAlign;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetParagraphVerticalAlignment) == 0x000001, "Wrong alignment on UIText_SetParagraphVerticalAlignment");
static_assert(sizeof(UIText_SetParagraphVerticalAlignment) == 0x000001, "Wrong size on UIText_SetParagraphVerticalAlignment");
static_assert(offsetof(UIText_SetParagraphVerticalAlignment, newVAlign) == 0x000000, "Member 'UIText_SetParagraphVerticalAlignment::newVAlign' has a wrong offset!");

// Function LGUI.UIText.SetRichText
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetRichText final
{
public:
	bool                                          newRichText;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetRichText) == 0x000001, "Wrong alignment on UIText_SetRichText");
static_assert(sizeof(UIText_SetRichText) == 0x000001, "Wrong size on UIText_SetRichText");
static_assert(offsetof(UIText_SetRichText, newRichText) == 0x000000, "Member 'UIText_SetRichText::newRichText' has a wrong offset!");

// Function LGUI.UIText.SetRichTextCustomStyleData
// 0x0008 (0x0008 - 0x0000)
struct UIText_SetRichTextCustomStyleData final
{
public:
	class ULGUIRichTextCustomStyleData*           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetRichTextCustomStyleData) == 0x000008, "Wrong alignment on UIText_SetRichTextCustomStyleData");
static_assert(sizeof(UIText_SetRichTextCustomStyleData) == 0x000008, "Wrong size on UIText_SetRichTextCustomStyleData");
static_assert(offsetof(UIText_SetRichTextCustomStyleData, Value) == 0x000000, "Member 'UIText_SetRichTextCustomStyleData::Value' has a wrong offset!");

// Function LGUI.UIText.SetRichTextImageData
// 0x0008 (0x0008 - 0x0000)
struct UIText_SetRichTextImageData final
{
public:
	class ULGUIRichTextImageData_BaseObject*      Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetRichTextImageData) == 0x000008, "Wrong alignment on UIText_SetRichTextImageData");
static_assert(sizeof(UIText_SetRichTextImageData) == 0x000008, "Wrong size on UIText_SetRichTextImageData");
static_assert(offsetof(UIText_SetRichTextImageData, Value) == 0x000000, "Member 'UIText_SetRichTextImageData::Value' has a wrong offset!");

// Function LGUI.UIText.SetRichTextTagFilterFlags
// 0x0004 (0x0004 - 0x0000)
struct UIText_SetRichTextTagFilterFlags final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetRichTextTagFilterFlags) == 0x000004, "Wrong alignment on UIText_SetRichTextTagFilterFlags");
static_assert(sizeof(UIText_SetRichTextTagFilterFlags) == 0x000004, "Wrong size on UIText_SetRichTextTagFilterFlags");
static_assert(offsetof(UIText_SetRichTextTagFilterFlags, Value) == 0x000000, "Member 'UIText_SetRichTextTagFilterFlags::Value' has a wrong offset!");

// Function LGUI.UIText.SetText
// 0x0010 (0x0010 - 0x0000)
struct UIText_SetText final
{
public:
	class FText                                   newText;                                           // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetText) == 0x000008, "Wrong alignment on UIText_SetText");
static_assert(sizeof(UIText_SetText) == 0x000010, "Wrong size on UIText_SetText");
static_assert(offsetof(UIText_SetText, newText) == 0x000000, "Member 'UIText_SetText::newText' has a wrong offset!");

// Function LGUI.UIText.SetUseKerning
// 0x0001 (0x0001 - 0x0000)
struct UIText_SetUseKerning final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_SetUseKerning) == 0x000001, "Wrong alignment on UIText_SetUseKerning");
static_assert(sizeof(UIText_SetUseKerning) == 0x000001, "Wrong size on UIText_SetUseKerning");
static_assert(offsetof(UIText_SetUseKerning, Value) == 0x000000, "Member 'UIText_SetUseKerning::Value' has a wrong offset!");

// Function LGUI.UIText.GetAdjustHeight
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAdjustHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAdjustHeight) == 0x000001, "Wrong alignment on UIText_GetAdjustHeight");
static_assert(sizeof(UIText_GetAdjustHeight) == 0x000001, "Wrong size on UIText_GetAdjustHeight");
static_assert(offsetof(UIText_GetAdjustHeight, ReturnValue) == 0x000000, "Member 'UIText_GetAdjustHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAdjustHeightRange
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetAdjustHeightRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAdjustHeightRange) == 0x000008, "Wrong alignment on UIText_GetAdjustHeightRange");
static_assert(sizeof(UIText_GetAdjustHeightRange) == 0x000010, "Wrong size on UIText_GetAdjustHeightRange");
static_assert(offsetof(UIText_GetAdjustHeightRange, ReturnValue) == 0x000000, "Member 'UIText_GetAdjustHeightRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAdjustWidth
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetAdjustWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAdjustWidth) == 0x000001, "Wrong alignment on UIText_GetAdjustWidth");
static_assert(sizeof(UIText_GetAdjustWidth) == 0x000001, "Wrong size on UIText_GetAdjustWidth");
static_assert(offsetof(UIText_GetAdjustWidth, ReturnValue) == 0x000000, "Member 'UIText_GetAdjustWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetAdjustWidthRange
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetAdjustWidthRange final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetAdjustWidthRange) == 0x000008, "Wrong alignment on UIText_GetAdjustWidthRange");
static_assert(sizeof(UIText_GetAdjustWidthRange) == 0x000010, "Wrong size on UIText_GetAdjustWidthRange");
static_assert(offsetof(UIText_GetAdjustWidthRange, ReturnValue) == 0x000000, "Member 'UIText_GetAdjustWidthRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetCharPropertyArray
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetCharPropertyArray final
{
public:
	TArray<struct FUITextCharProperty>            ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetCharPropertyArray) == 0x000008, "Wrong alignment on UIText_GetCharPropertyArray");
static_assert(sizeof(UIText_GetCharPropertyArray) == 0x000010, "Wrong size on UIText_GetCharPropertyArray");
static_assert(offsetof(UIText_GetCharPropertyArray, ReturnValue) == 0x000000, "Member 'UIText_GetCharPropertyArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFont
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetFont final
{
public:
	class ULGUIFontData_BaseObject*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFont) == 0x000008, "Wrong alignment on UIText_GetFont");
static_assert(sizeof(UIText_GetFont) == 0x000008, "Wrong size on UIText_GetFont");
static_assert(offsetof(UIText_GetFont, ReturnValue) == 0x000000, "Member 'UIText_GetFont::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontSize
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetFontSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontSize) == 0x000004, "Wrong alignment on UIText_GetFontSize");
static_assert(sizeof(UIText_GetFontSize) == 0x000004, "Wrong size on UIText_GetFontSize");
static_assert(offsetof(UIText_GetFontSize, ReturnValue) == 0x000000, "Member 'UIText_GetFontSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontSpace
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetFontSpace final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontSpace) == 0x000008, "Wrong alignment on UIText_GetFontSpace");
static_assert(sizeof(UIText_GetFontSpace) == 0x000010, "Wrong size on UIText_GetFontSpace");
static_assert(offsetof(UIText_GetFontSpace, ReturnValue) == 0x000000, "Member 'UIText_GetFontSpace::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetFontStyle
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetFontStyle final
{
public:
	EUITextFontStyle                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetFontStyle) == 0x000001, "Wrong alignment on UIText_GetFontStyle");
static_assert(sizeof(UIText_GetFontStyle) == 0x000001, "Wrong size on UIText_GetFontStyle");
static_assert(offsetof(UIText_GetFontStyle, ReturnValue) == 0x000000, "Member 'UIText_GetFontStyle::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetMaxHorizontalWidth
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetMaxHorizontalWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetMaxHorizontalWidth) == 0x000004, "Wrong alignment on UIText_GetMaxHorizontalWidth");
static_assert(sizeof(UIText_GetMaxHorizontalWidth) == 0x000004, "Wrong size on UIText_GetMaxHorizontalWidth");
static_assert(offsetof(UIText_GetMaxHorizontalWidth, ReturnValue) == 0x000000, "Member 'UIText_GetMaxHorizontalWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetOverflowType
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetOverflowType final
{
public:
	EUITextOverflowType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetOverflowType) == 0x000001, "Wrong alignment on UIText_GetOverflowType");
static_assert(sizeof(UIText_GetOverflowType) == 0x000001, "Wrong size on UIText_GetOverflowType");
static_assert(offsetof(UIText_GetOverflowType, ReturnValue) == 0x000000, "Member 'UIText_GetOverflowType::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetParagraphHorizontalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetParagraphHorizontalAlignment final
{
public:
	EUITextParagraphHorizontalAlign               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetParagraphHorizontalAlignment) == 0x000001, "Wrong alignment on UIText_GetParagraphHorizontalAlignment");
static_assert(sizeof(UIText_GetParagraphHorizontalAlignment) == 0x000001, "Wrong size on UIText_GetParagraphHorizontalAlignment");
static_assert(offsetof(UIText_GetParagraphHorizontalAlignment, ReturnValue) == 0x000000, "Member 'UIText_GetParagraphHorizontalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetParagraphVerticalAlignment
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetParagraphVerticalAlignment final
{
public:
	EUITextParagraphVerticalAlign                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetParagraphVerticalAlignment) == 0x000001, "Wrong alignment on UIText_GetParagraphVerticalAlignment");
static_assert(sizeof(UIText_GetParagraphVerticalAlignment) == 0x000001, "Wrong size on UIText_GetParagraphVerticalAlignment");
static_assert(offsetof(UIText_GetParagraphVerticalAlignment, ReturnValue) == 0x000000, "Member 'UIText_GetParagraphVerticalAlignment::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichText
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetRichText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichText) == 0x000001, "Wrong alignment on UIText_GetRichText");
static_assert(sizeof(UIText_GetRichText) == 0x000001, "Wrong size on UIText_GetRichText");
static_assert(offsetof(UIText_GetRichText, ReturnValue) == 0x000000, "Member 'UIText_GetRichText::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichTextCustomStyleData
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetRichTextCustomStyleData final
{
public:
	class ULGUIRichTextCustomStyleData*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichTextCustomStyleData) == 0x000008, "Wrong alignment on UIText_GetRichTextCustomStyleData");
static_assert(sizeof(UIText_GetRichTextCustomStyleData) == 0x000008, "Wrong size on UIText_GetRichTextCustomStyleData");
static_assert(offsetof(UIText_GetRichTextCustomStyleData, ReturnValue) == 0x000000, "Member 'UIText_GetRichTextCustomStyleData::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichTextCustomTagArray
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetRichTextCustomTagArray final
{
public:
	TArray<struct FUIText_RichTextCustomTag>      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichTextCustomTagArray) == 0x000008, "Wrong alignment on UIText_GetRichTextCustomTagArray");
static_assert(sizeof(UIText_GetRichTextCustomTagArray) == 0x000010, "Wrong size on UIText_GetRichTextCustomTagArray");
static_assert(offsetof(UIText_GetRichTextCustomTagArray, ReturnValue) == 0x000000, "Member 'UIText_GetRichTextCustomTagArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichTextImageData
// 0x0008 (0x0008 - 0x0000)
struct UIText_GetRichTextImageData final
{
public:
	class ULGUIRichTextImageData_BaseObject*      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichTextImageData) == 0x000008, "Wrong alignment on UIText_GetRichTextImageData");
static_assert(sizeof(UIText_GetRichTextImageData) == 0x000008, "Wrong size on UIText_GetRichTextImageData");
static_assert(offsetof(UIText_GetRichTextImageData, ReturnValue) == 0x000000, "Member 'UIText_GetRichTextImageData::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichTextImageTagArray
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetRichTextImageTagArray final
{
public:
	TArray<struct FUIText_RichTextImageTag>       ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichTextImageTagArray) == 0x000008, "Wrong alignment on UIText_GetRichTextImageTagArray");
static_assert(sizeof(UIText_GetRichTextImageTagArray) == 0x000010, "Wrong size on UIText_GetRichTextImageTagArray");
static_assert(offsetof(UIText_GetRichTextImageTagArray, ReturnValue) == 0x000000, "Member 'UIText_GetRichTextImageTagArray::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetRichTextTagFilterFlags
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetRichTextTagFilterFlags final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetRichTextTagFilterFlags) == 0x000004, "Wrong alignment on UIText_GetRichTextTagFilterFlags");
static_assert(sizeof(UIText_GetRichTextTagFilterFlags) == 0x000004, "Wrong size on UIText_GetRichTextTagFilterFlags");
static_assert(offsetof(UIText_GetRichTextTagFilterFlags, ReturnValue) == 0x000000, "Member 'UIText_GetRichTextTagFilterFlags::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetSize
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetSize final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetSize) == 0x000004, "Wrong alignment on UIText_GetSize");
static_assert(sizeof(UIText_GetSize) == 0x000004, "Wrong size on UIText_GetSize");
static_assert(offsetof(UIText_GetSize, ReturnValue) == 0x000000, "Member 'UIText_GetSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetText
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetText) == 0x000008, "Wrong alignment on UIText_GetText");
static_assert(sizeof(UIText_GetText) == 0x000010, "Wrong size on UIText_GetText");
static_assert(offsetof(UIText_GetText, ReturnValue) == 0x000000, "Member 'UIText_GetText::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetTextRealSize
// 0x0010 (0x0010 - 0x0000)
struct UIText_GetTextRealSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetTextRealSize) == 0x000008, "Wrong alignment on UIText_GetTextRealSize");
static_assert(sizeof(UIText_GetTextRealSize) == 0x000010, "Wrong size on UIText_GetTextRealSize");
static_assert(offsetof(UIText_GetTextRealSize, ReturnValue) == 0x000000, "Member 'UIText_GetTextRealSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetUseKerning
// 0x0001 (0x0001 - 0x0000)
struct UIText_GetUseKerning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetUseKerning) == 0x000001, "Wrong alignment on UIText_GetUseKerning");
static_assert(sizeof(UIText_GetUseKerning) == 0x000001, "Wrong size on UIText_GetUseKerning");
static_assert(offsetof(UIText_GetUseKerning, ReturnValue) == 0x000000, "Member 'UIText_GetUseKerning::ReturnValue' has a wrong offset!");

// Function LGUI.UIText.GetVisibleCharCount
// 0x0004 (0x0004 - 0x0000)
struct UIText_GetVisibleCharCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIText_GetVisibleCharCount) == 0x000004, "Wrong alignment on UIText_GetVisibleCharCount");
static_assert(sizeof(UIText_GetVisibleCharCount) == 0x000004, "Wrong size on UIText_GetVisibleCharCount");
static_assert(offsetof(UIText_GetVisibleCharCount, ReturnValue) == 0x000000, "Member 'UIText_GetVisibleCharCount::ReturnValue' has a wrong offset!");

// Function LGUI.UITextActor.GetUIText
// 0x0008 (0x0008 - 0x0000)
struct UITextActor_GetUIText final
{
public:
	class UUIText*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextActor_GetUIText) == 0x000008, "Wrong alignment on UITextActor_GetUIText");
static_assert(sizeof(UITextActor_GetUIText) == 0x000008, "Wrong size on UITextActor_GetUIText");
static_assert(offsetof(UITextActor_GetUIText, ReturnValue) == 0x000000, "Member 'UITextActor_GetUIText::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputCustomValidation.ReceiveOnValidateInput
// 0x0020 (0x0020 - 0x0000)
struct UITextInputCustomValidation_ReceiveOnValidateInput final
{
public:
	class UUITextInputComponent*                  InTextInput;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InIndexOfInsertedChar;                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITextInputCustomValidation_ReceiveOnValidateInput) == 0x000008, "Wrong alignment on UITextInputCustomValidation_ReceiveOnValidateInput");
static_assert(sizeof(UITextInputCustomValidation_ReceiveOnValidateInput) == 0x000020, "Wrong size on UITextInputCustomValidation_ReceiveOnValidateInput");
static_assert(offsetof(UITextInputCustomValidation_ReceiveOnValidateInput, InTextInput) == 0x000000, "Member 'UITextInputCustomValidation_ReceiveOnValidateInput::InTextInput' has a wrong offset!");
static_assert(offsetof(UITextInputCustomValidation_ReceiveOnValidateInput, InString) == 0x000008, "Member 'UITextInputCustomValidation_ReceiveOnValidateInput::InString' has a wrong offset!");
static_assert(offsetof(UITextInputCustomValidation_ReceiveOnValidateInput, InIndexOfInsertedChar) == 0x000018, "Member 'UITextInputCustomValidation_ReceiveOnValidateInput::InIndexOfInsertedChar' has a wrong offset!");
static_assert(offsetof(UITextInputCustomValidation_ReceiveOnValidateInput, ReturnValue) == 0x00001C, "Member 'UITextInputCustomValidation_ReceiveOnValidateInput::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.ActivateInput
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_ActivateInput final
{
public:
	class ULGUIPointerEventData*                  EventData;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_ActivateInput) == 0x000008, "Wrong alignment on UITextInputComponent_ActivateInput");
static_assert(sizeof(UITextInputComponent_ActivateInput) == 0x000008, "Wrong size on UITextInputComponent_ActivateInput");
static_assert(offsetof(UITextInputComponent_ActivateInput, EventData) == 0x000000, "Member 'UITextInputComponent_ActivateInput::EventData' has a wrong offset!");

// Function LGUI.UITextInputComponent.DeactivateInput
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_DeactivateInput final
{
public:
	bool                                          InFireEvent;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_DeactivateInput) == 0x000001, "Wrong alignment on UITextInputComponent_DeactivateInput");
static_assert(sizeof(UITextInputComponent_DeactivateInput) == 0x000001, "Wrong size on UITextInputComponent_DeactivateInput");
static_assert(offsetof(UITextInputComponent_DeactivateInput, InFireEvent) == 0x000000, "Member 'UITextInputComponent_DeactivateInput::InFireEvent' has a wrong offset!");

// Function LGUI.UITextInputComponent.RegisterInputActivateEvent
// 0x0018 (0x0018 - 0x0000)
struct UITextInputComponent_RegisterInputActivateEvent final
{
public:
	TDelegate<void(bool InActivate)>              InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_RegisterInputActivateEvent) == 0x000008, "Wrong alignment on UITextInputComponent_RegisterInputActivateEvent");
static_assert(sizeof(UITextInputComponent_RegisterInputActivateEvent) == 0x000018, "Wrong size on UITextInputComponent_RegisterInputActivateEvent");
static_assert(offsetof(UITextInputComponent_RegisterInputActivateEvent, InDelegate) == 0x000000, "Member 'UITextInputComponent_RegisterInputActivateEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_RegisterInputActivateEvent, ReturnValue) == 0x000010, "Member 'UITextInputComponent_RegisterInputActivateEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.RegisterSubmitEvent
// 0x0018 (0x0018 - 0x0000)
struct UITextInputComponent_RegisterSubmitEvent final
{
public:
	TDelegate<void(const class FString& InString)> InDelegate;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_RegisterSubmitEvent) == 0x000008, "Wrong alignment on UITextInputComponent_RegisterSubmitEvent");
static_assert(sizeof(UITextInputComponent_RegisterSubmitEvent) == 0x000018, "Wrong size on UITextInputComponent_RegisterSubmitEvent");
static_assert(offsetof(UITextInputComponent_RegisterSubmitEvent, InDelegate) == 0x000000, "Member 'UITextInputComponent_RegisterSubmitEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_RegisterSubmitEvent, ReturnValue) == 0x000010, "Member 'UITextInputComponent_RegisterSubmitEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.RegisterValueChangeEvent
// 0x0018 (0x0018 - 0x0000)
struct UITextInputComponent_RegisterValueChangeEvent final
{
public:
	TDelegate<void(const class FString& InString)> InDelegate;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_RegisterValueChangeEvent) == 0x000008, "Wrong alignment on UITextInputComponent_RegisterValueChangeEvent");
static_assert(sizeof(UITextInputComponent_RegisterValueChangeEvent) == 0x000018, "Wrong size on UITextInputComponent_RegisterValueChangeEvent");
static_assert(offsetof(UITextInputComponent_RegisterValueChangeEvent, InDelegate) == 0x000000, "Member 'UITextInputComponent_RegisterValueChangeEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_RegisterValueChangeEvent, ReturnValue) == 0x000010, "Member 'UITextInputComponent_RegisterValueChangeEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetAllowMultiLine
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetAllowMultiLine final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetAllowMultiLine) == 0x000001, "Wrong alignment on UITextInputComponent_SetAllowMultiLine");
static_assert(sizeof(UITextInputComponent_SetAllowMultiLine) == 0x000001, "Wrong size on UITextInputComponent_SetAllowMultiLine");
static_assert(offsetof(UITextInputComponent_SetAllowMultiLine, Value) == 0x000000, "Member 'UITextInputComponent_SetAllowMultiLine::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetAutoActivateInputWhenNavigateIn
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetAutoActivateInputWhenNavigateIn final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetAutoActivateInputWhenNavigateIn) == 0x000001, "Wrong alignment on UITextInputComponent_SetAutoActivateInputWhenNavigateIn");
static_assert(sizeof(UITextInputComponent_SetAutoActivateInputWhenNavigateIn) == 0x000001, "Wrong size on UITextInputComponent_SetAutoActivateInputWhenNavigateIn");
static_assert(offsetof(UITextInputComponent_SetAutoActivateInputWhenNavigateIn, Value) == 0x000000, "Member 'UITextInputComponent_SetAutoActivateInputWhenNavigateIn::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetCaretBlinkRate
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_SetCaretBlinkRate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetCaretBlinkRate) == 0x000004, "Wrong alignment on UITextInputComponent_SetCaretBlinkRate");
static_assert(sizeof(UITextInputComponent_SetCaretBlinkRate) == 0x000004, "Wrong size on UITextInputComponent_SetCaretBlinkRate");
static_assert(offsetof(UITextInputComponent_SetCaretBlinkRate, Value) == 0x000000, "Member 'UITextInputComponent_SetCaretBlinkRate::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetCaretColor
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_SetCaretColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetCaretColor) == 0x000004, "Wrong alignment on UITextInputComponent_SetCaretColor");
static_assert(sizeof(UITextInputComponent_SetCaretColor) == 0x000004, "Wrong size on UITextInputComponent_SetCaretColor");
static_assert(offsetof(UITextInputComponent_SetCaretColor, Value) == 0x000000, "Member 'UITextInputComponent_SetCaretColor::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetCaretWidth
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_SetCaretWidth final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetCaretWidth) == 0x000004, "Wrong alignment on UITextInputComponent_SetCaretWidth");
static_assert(sizeof(UITextInputComponent_SetCaretWidth) == 0x000004, "Wrong size on UITextInputComponent_SetCaretWidth");
static_assert(offsetof(UITextInputComponent_SetCaretWidth, Value) == 0x000000, "Member 'UITextInputComponent_SetCaretWidth::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetCustomInputTypeFunction
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_SetCustomInputTypeFunction final
{
public:
	TDelegate<void(const class FString& InString, int32 InStartIndex)> InFunction;                   // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetCustomInputTypeFunction) == 0x000004, "Wrong alignment on UITextInputComponent_SetCustomInputTypeFunction");
static_assert(sizeof(UITextInputComponent_SetCustomInputTypeFunction) == 0x000010, "Wrong size on UITextInputComponent_SetCustomInputTypeFunction");
static_assert(offsetof(UITextInputComponent_SetCustomInputTypeFunction, InFunction) == 0x000000, "Member 'UITextInputComponent_SetCustomInputTypeFunction::InFunction' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetCustomValidation
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_SetCustomValidation final
{
public:
	class UUITextInputCustomValidation*           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetCustomValidation) == 0x000008, "Wrong alignment on UITextInputComponent_SetCustomValidation");
static_assert(sizeof(UITextInputComponent_SetCustomValidation) == 0x000008, "Wrong size on UITextInputComponent_SetCustomValidation");
static_assert(offsetof(UITextInputComponent_SetCustomValidation, Value) == 0x000000, "Member 'UITextInputComponent_SetCustomValidation::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetDisplayType
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetDisplayType final
{
public:
	ELGUITextInputDisplayType                     NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetDisplayType) == 0x000001, "Wrong alignment on UITextInputComponent_SetDisplayType");
static_assert(sizeof(UITextInputComponent_SetDisplayType) == 0x000001, "Wrong size on UITextInputComponent_SetDisplayType");
static_assert(offsetof(UITextInputComponent_SetDisplayType, NewValue) == 0x000000, "Member 'UITextInputComponent_SetDisplayType::NewValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetIgnoreKeys
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_SetIgnoreKeys final
{
public:
	TArray<struct FKey>                           Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetIgnoreKeys) == 0x000008, "Wrong alignment on UITextInputComponent_SetIgnoreKeys");
static_assert(sizeof(UITextInputComponent_SetIgnoreKeys) == 0x000010, "Wrong size on UITextInputComponent_SetIgnoreKeys");
static_assert(offsetof(UITextInputComponent_SetIgnoreKeys, Value) == 0x000000, "Member 'UITextInputComponent_SetIgnoreKeys::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetInputType
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetInputType final
{
public:
	ELGUITextInputType                            NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetInputType) == 0x000001, "Wrong alignment on UITextInputComponent_SetInputType");
static_assert(sizeof(UITextInputComponent_SetInputType) == 0x000001, "Wrong size on UITextInputComponent_SetInputType");
static_assert(offsetof(UITextInputComponent_SetInputType, NewValue) == 0x000000, "Member 'UITextInputComponent_SetInputType::NewValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetMultiLineSubmitFunctionKeys
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_SetMultiLineSubmitFunctionKeys final
{
public:
	TArray<struct FKey>                           Value;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetMultiLineSubmitFunctionKeys) == 0x000008, "Wrong alignment on UITextInputComponent_SetMultiLineSubmitFunctionKeys");
static_assert(sizeof(UITextInputComponent_SetMultiLineSubmitFunctionKeys) == 0x000010, "Wrong size on UITextInputComponent_SetMultiLineSubmitFunctionKeys");
static_assert(offsetof(UITextInputComponent_SetMultiLineSubmitFunctionKeys, Value) == 0x000000, "Member 'UITextInputComponent_SetMultiLineSubmitFunctionKeys::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetPasswordChar
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_SetPasswordChar final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetPasswordChar) == 0x000008, "Wrong alignment on UITextInputComponent_SetPasswordChar");
static_assert(sizeof(UITextInputComponent_SetPasswordChar) == 0x000010, "Wrong size on UITextInputComponent_SetPasswordChar");
static_assert(offsetof(UITextInputComponent_SetPasswordChar, Value) == 0x000000, "Member 'UITextInputComponent_SetPasswordChar::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetPlaceHolderActor
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_SetPlaceHolderActor final
{
public:
	class AUIBaseActor*                           Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetPlaceHolderActor) == 0x000008, "Wrong alignment on UITextInputComponent_SetPlaceHolderActor");
static_assert(sizeof(UITextInputComponent_SetPlaceHolderActor) == 0x000008, "Wrong size on UITextInputComponent_SetPlaceHolderActor");
static_assert(offsetof(UITextInputComponent_SetPlaceHolderActor, Value) == 0x000000, "Member 'UITextInputComponent_SetPlaceHolderActor::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetReadOnly
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetReadOnly final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetReadOnly) == 0x000001, "Wrong alignment on UITextInputComponent_SetReadOnly");
static_assert(sizeof(UITextInputComponent_SetReadOnly) == 0x000001, "Wrong size on UITextInputComponent_SetReadOnly");
static_assert(offsetof(UITextInputComponent_SetReadOnly, Value) == 0x000000, "Member 'UITextInputComponent_SetReadOnly::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetSelectionColor
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_SetSelectionColor final
{
public:
	struct FColor                                 Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetSelectionColor) == 0x000004, "Wrong alignment on UITextInputComponent_SetSelectionColor");
static_assert(sizeof(UITextInputComponent_SetSelectionColor) == 0x000004, "Wrong size on UITextInputComponent_SetSelectionColor");
static_assert(offsetof(UITextInputComponent_SetSelectionColor, Value) == 0x000000, "Member 'UITextInputComponent_SetSelectionColor::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetText
// 0x0018 (0x0018 - 0x0000)
struct UITextInputComponent_SetText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InFireEvent;                                       // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITextInputComponent_SetText) == 0x000008, "Wrong alignment on UITextInputComponent_SetText");
static_assert(sizeof(UITextInputComponent_SetText) == 0x000018, "Wrong size on UITextInputComponent_SetText");
static_assert(offsetof(UITextInputComponent_SetText, InText) == 0x000000, "Member 'UITextInputComponent_SetText::InText' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_SetText, InFireEvent) == 0x000010, "Member 'UITextInputComponent_SetText::InFireEvent' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_SetText, ReturnValue) == 0x000011, "Member 'UITextInputComponent_SetText::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.SetVirtualKeyboradOptions
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_SetVirtualKeyboradOptions final
{
public:
	struct FVirtualKeyboardOptions                Value;                                             // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_SetVirtualKeyboradOptions) == 0x000001, "Wrong alignment on UITextInputComponent_SetVirtualKeyboradOptions");
static_assert(sizeof(UITextInputComponent_SetVirtualKeyboradOptions) == 0x000001, "Wrong size on UITextInputComponent_SetVirtualKeyboradOptions");
static_assert(offsetof(UITextInputComponent_SetVirtualKeyboradOptions, Value) == 0x000000, "Member 'UITextInputComponent_SetVirtualKeyboradOptions::Value' has a wrong offset!");

// Function LGUI.UITextInputComponent.UnregisterInputActivateEvent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_UnregisterInputActivateEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_UnregisterInputActivateEvent) == 0x000008, "Wrong alignment on UITextInputComponent_UnregisterInputActivateEvent");
static_assert(sizeof(UITextInputComponent_UnregisterInputActivateEvent) == 0x000008, "Wrong size on UITextInputComponent_UnregisterInputActivateEvent");
static_assert(offsetof(UITextInputComponent_UnregisterInputActivateEvent, InDelegateHandle) == 0x000000, "Member 'UITextInputComponent_UnregisterInputActivateEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UITextInputComponent.UnregisterSubmitEvent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_UnregisterSubmitEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_UnregisterSubmitEvent) == 0x000008, "Wrong alignment on UITextInputComponent_UnregisterSubmitEvent");
static_assert(sizeof(UITextInputComponent_UnregisterSubmitEvent) == 0x000008, "Wrong size on UITextInputComponent_UnregisterSubmitEvent");
static_assert(offsetof(UITextInputComponent_UnregisterSubmitEvent, InDelegateHandle) == 0x000000, "Member 'UITextInputComponent_UnregisterSubmitEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UITextInputComponent.UnregisterValueChangeEvent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_UnregisterValueChangeEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_UnregisterValueChangeEvent) == 0x000008, "Wrong alignment on UITextInputComponent_UnregisterValueChangeEvent");
static_assert(sizeof(UITextInputComponent_UnregisterValueChangeEvent) == 0x000008, "Wrong size on UITextInputComponent_UnregisterValueChangeEvent");
static_assert(offsetof(UITextInputComponent_UnregisterValueChangeEvent, InDelegateHandle) == 0x000000, "Member 'UITextInputComponent_UnregisterValueChangeEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UITextInputComponent.VerifyAndInsertStringAtCaretPosition
// 0x0018 (0x0018 - 0x0000)
struct UITextInputComponent_VerifyAndInsertStringAtCaretPosition final
{
public:
	class FString                                 Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UITextInputComponent_VerifyAndInsertStringAtCaretPosition) == 0x000008, "Wrong alignment on UITextInputComponent_VerifyAndInsertStringAtCaretPosition");
static_assert(sizeof(UITextInputComponent_VerifyAndInsertStringAtCaretPosition) == 0x000018, "Wrong size on UITextInputComponent_VerifyAndInsertStringAtCaretPosition");
static_assert(offsetof(UITextInputComponent_VerifyAndInsertStringAtCaretPosition, Value) == 0x000000, "Member 'UITextInputComponent_VerifyAndInsertStringAtCaretPosition::Value' has a wrong offset!");
static_assert(offsetof(UITextInputComponent_VerifyAndInsertStringAtCaretPosition, ReturnValue) == 0x000010, "Member 'UITextInputComponent_VerifyAndInsertStringAtCaretPosition::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetAllowMultiLine
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetAllowMultiLine final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetAllowMultiLine) == 0x000001, "Wrong alignment on UITextInputComponent_GetAllowMultiLine");
static_assert(sizeof(UITextInputComponent_GetAllowMultiLine) == 0x000001, "Wrong size on UITextInputComponent_GetAllowMultiLine");
static_assert(offsetof(UITextInputComponent_GetAllowMultiLine, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetAllowMultiLine::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetAutoActivateInputWhenNavigateIn
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetAutoActivateInputWhenNavigateIn final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetAutoActivateInputWhenNavigateIn) == 0x000001, "Wrong alignment on UITextInputComponent_GetAutoActivateInputWhenNavigateIn");
static_assert(sizeof(UITextInputComponent_GetAutoActivateInputWhenNavigateIn) == 0x000001, "Wrong size on UITextInputComponent_GetAutoActivateInputWhenNavigateIn");
static_assert(offsetof(UITextInputComponent_GetAutoActivateInputWhenNavigateIn, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetAutoActivateInputWhenNavigateIn::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetCaretBlinkRate
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_GetCaretBlinkRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetCaretBlinkRate) == 0x000004, "Wrong alignment on UITextInputComponent_GetCaretBlinkRate");
static_assert(sizeof(UITextInputComponent_GetCaretBlinkRate) == 0x000004, "Wrong size on UITextInputComponent_GetCaretBlinkRate");
static_assert(offsetof(UITextInputComponent_GetCaretBlinkRate, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetCaretBlinkRate::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetCaretColor
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_GetCaretColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetCaretColor) == 0x000004, "Wrong alignment on UITextInputComponent_GetCaretColor");
static_assert(sizeof(UITextInputComponent_GetCaretColor) == 0x000004, "Wrong size on UITextInputComponent_GetCaretColor");
static_assert(offsetof(UITextInputComponent_GetCaretColor, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetCaretColor::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetCaretWidth
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_GetCaretWidth final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetCaretWidth) == 0x000004, "Wrong alignment on UITextInputComponent_GetCaretWidth");
static_assert(sizeof(UITextInputComponent_GetCaretWidth) == 0x000004, "Wrong size on UITextInputComponent_GetCaretWidth");
static_assert(offsetof(UITextInputComponent_GetCaretWidth, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetCaretWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetCustomValidation
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_GetCustomValidation final
{
public:
	class UUITextInputCustomValidation*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetCustomValidation) == 0x000008, "Wrong alignment on UITextInputComponent_GetCustomValidation");
static_assert(sizeof(UITextInputComponent_GetCustomValidation) == 0x000008, "Wrong size on UITextInputComponent_GetCustomValidation");
static_assert(offsetof(UITextInputComponent_GetCustomValidation, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetCustomValidation::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetDisplayType
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetDisplayType final
{
public:
	ELGUITextInputDisplayType                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetDisplayType) == 0x000001, "Wrong alignment on UITextInputComponent_GetDisplayType");
static_assert(sizeof(UITextInputComponent_GetDisplayType) == 0x000001, "Wrong size on UITextInputComponent_GetDisplayType");
static_assert(offsetof(UITextInputComponent_GetDisplayType, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetDisplayType::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetIgnoreKeys
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_GetIgnoreKeys final
{
public:
	TArray<struct FKey>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetIgnoreKeys) == 0x000008, "Wrong alignment on UITextInputComponent_GetIgnoreKeys");
static_assert(sizeof(UITextInputComponent_GetIgnoreKeys) == 0x000010, "Wrong size on UITextInputComponent_GetIgnoreKeys");
static_assert(offsetof(UITextInputComponent_GetIgnoreKeys, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetIgnoreKeys::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetInputType
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetInputType final
{
public:
	ELGUITextInputType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetInputType) == 0x000001, "Wrong alignment on UITextInputComponent_GetInputType");
static_assert(sizeof(UITextInputComponent_GetInputType) == 0x000001, "Wrong size on UITextInputComponent_GetInputType");
static_assert(offsetof(UITextInputComponent_GetInputType, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetInputType::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetMultiLineSubmitFunctionKeys
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_GetMultiLineSubmitFunctionKeys final
{
public:
	TArray<struct FKey>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetMultiLineSubmitFunctionKeys) == 0x000008, "Wrong alignment on UITextInputComponent_GetMultiLineSubmitFunctionKeys");
static_assert(sizeof(UITextInputComponent_GetMultiLineSubmitFunctionKeys) == 0x000010, "Wrong size on UITextInputComponent_GetMultiLineSubmitFunctionKeys");
static_assert(offsetof(UITextInputComponent_GetMultiLineSubmitFunctionKeys, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetMultiLineSubmitFunctionKeys::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetPasswordChar
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_GetPasswordChar final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetPasswordChar) == 0x000008, "Wrong alignment on UITextInputComponent_GetPasswordChar");
static_assert(sizeof(UITextInputComponent_GetPasswordChar) == 0x000010, "Wrong size on UITextInputComponent_GetPasswordChar");
static_assert(offsetof(UITextInputComponent_GetPasswordChar, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetPasswordChar::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetPlaceHolderActor
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_GetPlaceHolderActor final
{
public:
	class AUIBaseActor*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetPlaceHolderActor) == 0x000008, "Wrong alignment on UITextInputComponent_GetPlaceHolderActor");
static_assert(sizeof(UITextInputComponent_GetPlaceHolderActor) == 0x000008, "Wrong size on UITextInputComponent_GetPlaceHolderActor");
static_assert(offsetof(UITextInputComponent_GetPlaceHolderActor, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetPlaceHolderActor::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetReadOnly
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetReadOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetReadOnly) == 0x000001, "Wrong alignment on UITextInputComponent_GetReadOnly");
static_assert(sizeof(UITextInputComponent_GetReadOnly) == 0x000001, "Wrong size on UITextInputComponent_GetReadOnly");
static_assert(offsetof(UITextInputComponent_GetReadOnly, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetReadOnly::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetSelectionColor
// 0x0004 (0x0004 - 0x0000)
struct UITextInputComponent_GetSelectionColor final
{
public:
	struct FColor                                 ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetSelectionColor) == 0x000004, "Wrong alignment on UITextInputComponent_GetSelectionColor");
static_assert(sizeof(UITextInputComponent_GetSelectionColor) == 0x000004, "Wrong size on UITextInputComponent_GetSelectionColor");
static_assert(offsetof(UITextInputComponent_GetSelectionColor, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetSelectionColor::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetText
// 0x0010 (0x0010 - 0x0000)
struct UITextInputComponent_GetText final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetText) == 0x000008, "Wrong alignment on UITextInputComponent_GetText");
static_assert(sizeof(UITextInputComponent_GetText) == 0x000010, "Wrong size on UITextInputComponent_GetText");
static_assert(offsetof(UITextInputComponent_GetText, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetText::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetTextComponent
// 0x0008 (0x0008 - 0x0000)
struct UITextInputComponent_GetTextComponent final
{
public:
	class UUIText*                                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetTextComponent) == 0x000008, "Wrong alignment on UITextInputComponent_GetTextComponent");
static_assert(sizeof(UITextInputComponent_GetTextComponent) == 0x000008, "Wrong size on UITextInputComponent_GetTextComponent");
static_assert(offsetof(UITextInputComponent_GetTextComponent, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetTextComponent::ReturnValue' has a wrong offset!");

// Function LGUI.UITextInputComponent.GetVirtualKeyboradOptions
// 0x0001 (0x0001 - 0x0000)
struct UITextInputComponent_GetVirtualKeyboradOptions final
{
public:
	struct FVirtualKeyboardOptions                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextInputComponent_GetVirtualKeyboradOptions) == 0x000001, "Wrong alignment on UITextInputComponent_GetVirtualKeyboradOptions");
static_assert(sizeof(UITextInputComponent_GetVirtualKeyboradOptions) == 0x000001, "Wrong size on UITextInputComponent_GetVirtualKeyboradOptions");
static_assert(offsetof(UITextInputComponent_GetVirtualKeyboradOptions, ReturnValue) == 0x000000, "Member 'UITextInputComponent_GetVirtualKeyboradOptions::ReturnValue' has a wrong offset!");

// Function LGUI.UITextureBase.GetDefaultWhiteTexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureBase_GetDefaultWhiteTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_GetDefaultWhiteTexture) == 0x000008, "Wrong alignment on UITextureBase_GetDefaultWhiteTexture");
static_assert(sizeof(UITextureBase_GetDefaultWhiteTexture) == 0x000008, "Wrong size on UITextureBase_GetDefaultWhiteTexture");
static_assert(offsetof(UITextureBase_GetDefaultWhiteTexture, ReturnValue) == 0x000000, "Member 'UITextureBase_GetDefaultWhiteTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UITextureBase.SetTexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureBase_SetTexture final
{
public:
	class UTexture*                               newTexture;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_SetTexture) == 0x000008, "Wrong alignment on UITextureBase_SetTexture");
static_assert(sizeof(UITextureBase_SetTexture) == 0x000008, "Wrong size on UITextureBase_SetTexture");
static_assert(offsetof(UITextureBase_SetTexture, newTexture) == 0x000000, "Member 'UITextureBase_SetTexture::newTexture' has a wrong offset!");

// Function LGUI.UITextureBase.GetTexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureBase_GetTexture final
{
public:
	class UTexture*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureBase_GetTexture) == 0x000008, "Wrong alignment on UITextureBase_GetTexture");
static_assert(sizeof(UITextureBase_GetTexture) == 0x000008, "Wrong size on UITextureBase_GetTexture");
static_assert(offsetof(UITextureBase_GetTexture, ReturnValue) == 0x000000, "Member 'UITextureBase_GetTexture::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UITexture_SetFillAmount final
{
public:
	float                                         NewValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillAmount) == 0x000004, "Wrong alignment on UITexture_SetFillAmount");
static_assert(sizeof(UITexture_SetFillAmount) == 0x000004, "Wrong size on UITexture_SetFillAmount");
static_assert(offsetof(UITexture_SetFillAmount, NewValue) == 0x000000, "Member 'UITexture_SetFillAmount::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetFillDirectionFlip final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillDirectionFlip) == 0x000001, "Wrong alignment on UITexture_SetFillDirectionFlip");
static_assert(sizeof(UITexture_SetFillDirectionFlip) == 0x000001, "Wrong size on UITexture_SetFillDirectionFlip");
static_assert(offsetof(UITexture_SetFillDirectionFlip, NewValue) == 0x000000, "Member 'UITexture_SetFillDirectionFlip::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetFillMethod final
{
public:
	EUISpriteFillMethod                           NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillMethod) == 0x000001, "Wrong alignment on UITexture_SetFillMethod");
static_assert(sizeof(UITexture_SetFillMethod) == 0x000001, "Wrong size on UITexture_SetFillMethod");
static_assert(offsetof(UITexture_SetFillMethod, NewValue) == 0x000000, "Member 'UITexture_SetFillMethod::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetFillOrigin final
{
public:
	uint8                                         NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetFillOrigin) == 0x000001, "Wrong alignment on UITexture_SetFillOrigin");
static_assert(sizeof(UITexture_SetFillOrigin) == 0x000001, "Wrong size on UITexture_SetFillOrigin");
static_assert(offsetof(UITexture_SetFillOrigin, NewValue) == 0x000000, "Member 'UITexture_SetFillOrigin::NewValue' has a wrong offset!");

// Function LGUI.UITexture.SetSpriteData
// 0x0034 (0x0034 - 0x0000)
struct UITexture_SetSpriteData final
{
public:
	struct FLGUISpriteInfo                        newSpriteData;                                     // 0x0000(0x0034)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetSpriteData) == 0x000004, "Wrong alignment on UITexture_SetSpriteData");
static_assert(sizeof(UITexture_SetSpriteData) == 0x000034, "Wrong size on UITexture_SetSpriteData");
static_assert(offsetof(UITexture_SetSpriteData, newSpriteData) == 0x000000, "Member 'UITexture_SetSpriteData::newSpriteData' has a wrong offset!");

// Function LGUI.UITexture.SetTextureType
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetTextureType final
{
public:
	EUITextureType                                NewType;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetTextureType) == 0x000001, "Wrong alignment on UITexture_SetTextureType");
static_assert(sizeof(UITexture_SetTextureType) == 0x000001, "Wrong size on UITexture_SetTextureType");
static_assert(offsetof(UITexture_SetTextureType, NewType) == 0x000000, "Member 'UITexture_SetTextureType::NewType' has a wrong offset!");

// Function LGUI.UITexture.SetUVRect
// 0x0020 (0x0020 - 0x0000)
struct UITexture_SetUVRect final
{
public:
	struct FVector4                               newUVRect;                                         // 0x0000(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetUVRect) == 0x000010, "Wrong alignment on UITexture_SetUVRect");
static_assert(sizeof(UITexture_SetUVRect) == 0x000020, "Wrong size on UITexture_SetUVRect");
static_assert(offsetof(UITexture_SetUVRect, newUVRect) == 0x000000, "Member 'UITexture_SetUVRect::newUVRect' has a wrong offset!");

// Function LGUI.UITexture.SetUVRectControlMode
// 0x0001 (0x0001 - 0x0000)
struct UITexture_SetUVRectControlMode final
{
public:
	EUITextureUVRectControlMode                   NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_SetUVRectControlMode) == 0x000001, "Wrong alignment on UITexture_SetUVRectControlMode");
static_assert(sizeof(UITexture_SetUVRectControlMode) == 0x000001, "Wrong size on UITexture_SetUVRectControlMode");
static_assert(offsetof(UITexture_SetUVRectControlMode, NewValue) == 0x000000, "Member 'UITexture_SetUVRectControlMode::NewValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillAmount
// 0x0004 (0x0004 - 0x0000)
struct UITexture_GetFillAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillAmount) == 0x000004, "Wrong alignment on UITexture_GetFillAmount");
static_assert(sizeof(UITexture_GetFillAmount) == 0x000004, "Wrong size on UITexture_GetFillAmount");
static_assert(offsetof(UITexture_GetFillAmount, ReturnValue) == 0x000000, "Member 'UITexture_GetFillAmount::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillDirectionFlip
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetFillDirectionFlip final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillDirectionFlip) == 0x000001, "Wrong alignment on UITexture_GetFillDirectionFlip");
static_assert(sizeof(UITexture_GetFillDirectionFlip) == 0x000001, "Wrong size on UITexture_GetFillDirectionFlip");
static_assert(offsetof(UITexture_GetFillDirectionFlip, ReturnValue) == 0x000000, "Member 'UITexture_GetFillDirectionFlip::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillMethod
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetFillMethod final
{
public:
	EUISpriteFillMethod                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillMethod) == 0x000001, "Wrong alignment on UITexture_GetFillMethod");
static_assert(sizeof(UITexture_GetFillMethod) == 0x000001, "Wrong size on UITexture_GetFillMethod");
static_assert(offsetof(UITexture_GetFillMethod, ReturnValue) == 0x000000, "Member 'UITexture_GetFillMethod::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetFillOrigin
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetFillOrigin final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetFillOrigin) == 0x000001, "Wrong alignment on UITexture_GetFillOrigin");
static_assert(sizeof(UITexture_GetFillOrigin) == 0x000001, "Wrong size on UITexture_GetFillOrigin");
static_assert(offsetof(UITexture_GetFillOrigin, ReturnValue) == 0x000000, "Member 'UITexture_GetFillOrigin::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetSpriteData
// 0x0034 (0x0034 - 0x0000)
struct UITexture_GetSpriteData final
{
public:
	struct FLGUISpriteInfo                        ReturnValue;                                       // 0x0000(0x0034)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetSpriteData) == 0x000004, "Wrong alignment on UITexture_GetSpriteData");
static_assert(sizeof(UITexture_GetSpriteData) == 0x000034, "Wrong size on UITexture_GetSpriteData");
static_assert(offsetof(UITexture_GetSpriteData, ReturnValue) == 0x000000, "Member 'UITexture_GetSpriteData::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetTextureType
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetTextureType final
{
public:
	EUITextureType                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetTextureType) == 0x000001, "Wrong alignment on UITexture_GetTextureType");
static_assert(sizeof(UITexture_GetTextureType) == 0x000001, "Wrong size on UITexture_GetTextureType");
static_assert(offsetof(UITexture_GetTextureType, ReturnValue) == 0x000000, "Member 'UITexture_GetTextureType::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetUVRect
// 0x0020 (0x0020 - 0x0000)
struct UITexture_GetUVRect final
{
public:
	struct FVector4                               ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetUVRect) == 0x000010, "Wrong alignment on UITexture_GetUVRect");
static_assert(sizeof(UITexture_GetUVRect) == 0x000020, "Wrong size on UITexture_GetUVRect");
static_assert(offsetof(UITexture_GetUVRect, ReturnValue) == 0x000000, "Member 'UITexture_GetUVRect::ReturnValue' has a wrong offset!");

// Function LGUI.UITexture.GetUVRectControlMode
// 0x0001 (0x0001 - 0x0000)
struct UITexture_GetUVRectControlMode final
{
public:
	EUITextureUVRectControlMode                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITexture_GetUVRectControlMode) == 0x000001, "Wrong alignment on UITexture_GetUVRectControlMode");
static_assert(sizeof(UITexture_GetUVRectControlMode) == 0x000001, "Wrong size on UITexture_GetUVRectControlMode");
static_assert(offsetof(UITexture_GetUVRectControlMode, ReturnValue) == 0x000000, "Member 'UITexture_GetUVRectControlMode::ReturnValue' has a wrong offset!");

// Function LGUI.UITextureActor.GetUITexture
// 0x0008 (0x0008 - 0x0000)
struct UITextureActor_GetUITexture final
{
public:
	class UUITexture*                             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UITextureActor_GetUITexture) == 0x000008, "Wrong alignment on UITextureActor_GetUITexture");
static_assert(sizeof(UITextureActor_GetUITexture) == 0x000008, "Wrong size on UITextureActor_GetUITexture");
static_assert(offsetof(UITextureActor_GetUITexture, ReturnValue) == 0x000000, "Member 'UITextureActor_GetUITexture::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.RegisterToggleEvent
// 0x0018 (0x0018 - 0x0000)
struct UIToggleComponent_RegisterToggleEvent final
{
public:
	TDelegate<void(bool InBool)>                  InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_RegisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleComponent_RegisterToggleEvent");
static_assert(sizeof(UIToggleComponent_RegisterToggleEvent) == 0x000018, "Wrong size on UIToggleComponent_RegisterToggleEvent");
static_assert(offsetof(UIToggleComponent_RegisterToggleEvent, InDelegate) == 0x000000, "Member 'UIToggleComponent_RegisterToggleEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIToggleComponent_RegisterToggleEvent, ReturnValue) == 0x000010, "Member 'UIToggleComponent_RegisterToggleEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.SetToggleGroup
// 0x0008 (0x0008 - 0x0000)
struct UIToggleComponent_SetToggleGroup final
{
public:
	class UUIToggleGroupComponent*                InGroupComp;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_SetToggleGroup) == 0x000008, "Wrong alignment on UIToggleComponent_SetToggleGroup");
static_assert(sizeof(UIToggleComponent_SetToggleGroup) == 0x000008, "Wrong size on UIToggleComponent_SetToggleGroup");
static_assert(offsetof(UIToggleComponent_SetToggleGroup, InGroupComp) == 0x000000, "Member 'UIToggleComponent_SetToggleGroup::InGroupComp' has a wrong offset!");

// Function LGUI.UIToggleComponent.SetValue
// 0x0002 (0x0002 - 0x0000)
struct UIToggleComponent_SetValue final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          fireEvent;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_SetValue) == 0x000001, "Wrong alignment on UIToggleComponent_SetValue");
static_assert(sizeof(UIToggleComponent_SetValue) == 0x000002, "Wrong size on UIToggleComponent_SetValue");
static_assert(offsetof(UIToggleComponent_SetValue, NewValue) == 0x000000, "Member 'UIToggleComponent_SetValue::NewValue' has a wrong offset!");
static_assert(offsetof(UIToggleComponent_SetValue, fireEvent) == 0x000001, "Member 'UIToggleComponent_SetValue::fireEvent' has a wrong offset!");

// Function LGUI.UIToggleComponent.UnregisterToggleEvent
// 0x0008 (0x0008 - 0x0000)
struct UIToggleComponent_UnregisterToggleEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_UnregisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleComponent_UnregisterToggleEvent");
static_assert(sizeof(UIToggleComponent_UnregisterToggleEvent) == 0x000008, "Wrong size on UIToggleComponent_UnregisterToggleEvent");
static_assert(offsetof(UIToggleComponent_UnregisterToggleEvent, InDelegateHandle) == 0x000000, "Member 'UIToggleComponent_UnregisterToggleEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetIndexInGroup
// 0x0004 (0x0004 - 0x0000)
struct UIToggleComponent_GetIndexInGroup final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetIndexInGroup) == 0x000004, "Wrong alignment on UIToggleComponent_GetIndexInGroup");
static_assert(sizeof(UIToggleComponent_GetIndexInGroup) == 0x000004, "Wrong size on UIToggleComponent_GetIndexInGroup");
static_assert(offsetof(UIToggleComponent_GetIndexInGroup, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetIndexInGroup::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetToggleGroupActor
// 0x0008 (0x0008 - 0x0000)
struct UIToggleComponent_GetToggleGroupActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetToggleGroupActor) == 0x000008, "Wrong alignment on UIToggleComponent_GetToggleGroupActor");
static_assert(sizeof(UIToggleComponent_GetToggleGroupActor) == 0x000008, "Wrong size on UIToggleComponent_GetToggleGroupActor");
static_assert(offsetof(UIToggleComponent_GetToggleGroupActor, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetToggleGroupActor::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleComponent.GetValue
// 0x0001 (0x0001 - 0x0000)
struct UIToggleComponent_GetValue final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleComponent_GetValue) == 0x000001, "Wrong alignment on UIToggleComponent_GetValue");
static_assert(sizeof(UIToggleComponent_GetValue) == 0x000001, "Wrong size on UIToggleComponent_GetValue");
static_assert(offsetof(UIToggleComponent_GetValue, ReturnValue) == 0x000000, "Member 'UIToggleComponent_GetValue::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.RegisterToggleEvent
// 0x0018 (0x0018 - 0x0000)
struct UIToggleGroupComponent_RegisterToggleEvent final
{
public:
	TDelegate<void(int32 Index)>                  InDelegate;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLGUIDelegateHandleWrapper             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_RegisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleGroupComponent_RegisterToggleEvent");
static_assert(sizeof(UIToggleGroupComponent_RegisterToggleEvent) == 0x000018, "Wrong size on UIToggleGroupComponent_RegisterToggleEvent");
static_assert(offsetof(UIToggleGroupComponent_RegisterToggleEvent, InDelegate) == 0x000000, "Member 'UIToggleGroupComponent_RegisterToggleEvent::InDelegate' has a wrong offset!");
static_assert(offsetof(UIToggleGroupComponent_RegisterToggleEvent, ReturnValue) == 0x000010, "Member 'UIToggleGroupComponent_RegisterToggleEvent::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.SetAllowNoneSelected
// 0x0001 (0x0001 - 0x0000)
struct UIToggleGroupComponent_SetAllowNoneSelected final
{
public:
	bool                                          InBool;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_SetAllowNoneSelected) == 0x000001, "Wrong alignment on UIToggleGroupComponent_SetAllowNoneSelected");
static_assert(sizeof(UIToggleGroupComponent_SetAllowNoneSelected) == 0x000001, "Wrong size on UIToggleGroupComponent_SetAllowNoneSelected");
static_assert(offsetof(UIToggleGroupComponent_SetAllowNoneSelected, InBool) == 0x000000, "Member 'UIToggleGroupComponent_SetAllowNoneSelected::InBool' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.SetSelection
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_SetSelection final
{
public:
	class UUIToggleComponent*                     Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_SetSelection) == 0x000008, "Wrong alignment on UIToggleGroupComponent_SetSelection");
static_assert(sizeof(UIToggleGroupComponent_SetSelection) == 0x000008, "Wrong size on UIToggleGroupComponent_SetSelection");
static_assert(offsetof(UIToggleGroupComponent_SetSelection, Target) == 0x000000, "Member 'UIToggleGroupComponent_SetSelection::Target' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.UnregisterToggleEvent
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_UnregisterToggleEvent final
{
public:
	struct FLGUIDelegateHandleWrapper             InDelegateHandle;                                  // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_UnregisterToggleEvent) == 0x000008, "Wrong alignment on UIToggleGroupComponent_UnregisterToggleEvent");
static_assert(sizeof(UIToggleGroupComponent_UnregisterToggleEvent) == 0x000008, "Wrong size on UIToggleGroupComponent_UnregisterToggleEvent");
static_assert(offsetof(UIToggleGroupComponent_UnregisterToggleEvent, InDelegateHandle) == 0x000000, "Member 'UIToggleGroupComponent_UnregisterToggleEvent::InDelegateHandle' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetAllowNoneSelected
// 0x0001 (0x0001 - 0x0000)
struct UIToggleGroupComponent_GetAllowNoneSelected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_GetAllowNoneSelected) == 0x000001, "Wrong alignment on UIToggleGroupComponent_GetAllowNoneSelected");
static_assert(sizeof(UIToggleGroupComponent_GetAllowNoneSelected) == 0x000001, "Wrong size on UIToggleGroupComponent_GetAllowNoneSelected");
static_assert(offsetof(UIToggleGroupComponent_GetAllowNoneSelected, ReturnValue) == 0x000000, "Member 'UIToggleGroupComponent_GetAllowNoneSelected::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetSelectedItem
// 0x0008 (0x0008 - 0x0000)
struct UIToggleGroupComponent_GetSelectedItem final
{
public:
	class UUIToggleComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_GetSelectedItem) == 0x000008, "Wrong alignment on UIToggleGroupComponent_GetSelectedItem");
static_assert(sizeof(UIToggleGroupComponent_GetSelectedItem) == 0x000008, "Wrong size on UIToggleGroupComponent_GetSelectedItem");
static_assert(offsetof(UIToggleGroupComponent_GetSelectedItem, ReturnValue) == 0x000000, "Member 'UIToggleGroupComponent_GetSelectedItem::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetToggleByIndex
// 0x0010 (0x0010 - 0x0000)
struct UIToggleGroupComponent_GetToggleByIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIToggleComponent*                     ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIToggleGroupComponent_GetToggleByIndex) == 0x000008, "Wrong alignment on UIToggleGroupComponent_GetToggleByIndex");
static_assert(sizeof(UIToggleGroupComponent_GetToggleByIndex) == 0x000010, "Wrong size on UIToggleGroupComponent_GetToggleByIndex");
static_assert(offsetof(UIToggleGroupComponent_GetToggleByIndex, InIndex) == 0x000000, "Member 'UIToggleGroupComponent_GetToggleByIndex::InIndex' has a wrong offset!");
static_assert(offsetof(UIToggleGroupComponent_GetToggleByIndex, ReturnValue) == 0x000008, "Member 'UIToggleGroupComponent_GetToggleByIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIToggleGroupComponent.GetToggleIndex
// 0x0010 (0x0010 - 0x0000)
struct UIToggleGroupComponent_GetToggleIndex final
{
public:
	const class UUIToggleComponent*               InComp;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIToggleGroupComponent_GetToggleIndex) == 0x000008, "Wrong alignment on UIToggleGroupComponent_GetToggleIndex");
static_assert(sizeof(UIToggleGroupComponent_GetToggleIndex) == 0x000010, "Wrong size on UIToggleGroupComponent_GetToggleIndex");
static_assert(offsetof(UIToggleGroupComponent_GetToggleIndex, InComp) == 0x000000, "Member 'UIToggleGroupComponent_GetToggleIndex::InComp' has a wrong offset!");
static_assert(offsetof(UIToggleGroupComponent_GetToggleIndex, ReturnValue) == 0x000008, "Member 'UIToggleGroupComponent_GetToggleIndex::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetAlign final
{
public:
	ELGUILayoutAlignmentType                      Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetAlign) == 0x000001, "Wrong alignment on UIVerticalLayout_SetAlign");
static_assert(sizeof(UIVerticalLayout_SetAlign) == 0x000001, "Wrong size on UIVerticalLayout_SetAlign");
static_assert(offsetof(UIVerticalLayout_SetAlign, Value) == 0x000000, "Member 'UIVerticalLayout_SetAlign::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetControlChildHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetControlChildHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetControlChildHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_SetControlChildHeight");
static_assert(sizeof(UIVerticalLayout_SetControlChildHeight) == 0x000001, "Wrong size on UIVerticalLayout_SetControlChildHeight");
static_assert(offsetof(UIVerticalLayout_SetControlChildHeight, Value) == 0x000000, "Member 'UIVerticalLayout_SetControlChildHeight::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetControlChildWidth
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetControlChildWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetControlChildWidth) == 0x000001, "Wrong alignment on UIVerticalLayout_SetControlChildWidth");
static_assert(sizeof(UIVerticalLayout_SetControlChildWidth) == 0x000001, "Wrong size on UIVerticalLayout_SetControlChildWidth");
static_assert(offsetof(UIVerticalLayout_SetControlChildWidth, Value) == 0x000000, "Member 'UIVerticalLayout_SetControlChildWidth::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetExpandChildHeightArea
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetExpandChildHeightArea final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetExpandChildHeightArea) == 0x000001, "Wrong alignment on UIVerticalLayout_SetExpandChildHeightArea");
static_assert(sizeof(UIVerticalLayout_SetExpandChildHeightArea) == 0x000001, "Wrong size on UIVerticalLayout_SetExpandChildHeightArea");
static_assert(offsetof(UIVerticalLayout_SetExpandChildHeightArea, Value) == 0x000000, "Member 'UIVerticalLayout_SetExpandChildHeightArea::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetExpandChildWidthArea
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetExpandChildWidthArea final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetExpandChildWidthArea) == 0x000001, "Wrong alignment on UIVerticalLayout_SetExpandChildWidthArea");
static_assert(sizeof(UIVerticalLayout_SetExpandChildWidthArea) == 0x000001, "Wrong size on UIVerticalLayout_SetExpandChildWidthArea");
static_assert(offsetof(UIVerticalLayout_SetExpandChildWidthArea, Value) == 0x000000, "Member 'UIVerticalLayout_SetExpandChildWidthArea::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetExpendChildrenHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_SetExpendChildrenHeight");
static_assert(sizeof(UIVerticalLayout_SetExpendChildrenHeight) == 0x000001, "Wrong size on UIVerticalLayout_SetExpendChildrenHeight");
static_assert(offsetof(UIVerticalLayout_SetExpendChildrenHeight, Value) == 0x000000, "Member 'UIVerticalLayout_SetExpendChildrenHeight::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetExpendChildrenWidth final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIVerticalLayout_SetExpendChildrenWidth");
static_assert(sizeof(UIVerticalLayout_SetExpendChildrenWidth) == 0x000001, "Wrong size on UIVerticalLayout_SetExpendChildrenWidth");
static_assert(offsetof(UIVerticalLayout_SetExpendChildrenWidth, Value) == 0x000000, "Member 'UIVerticalLayout_SetExpendChildrenWidth::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetHeightFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetHeightFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_SetHeightFitToChildren");
static_assert(sizeof(UIVerticalLayout_SetHeightFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_SetHeightFitToChildren");
static_assert(offsetof(UIVerticalLayout_SetHeightFitToChildren, Value) == 0x000000, "Member 'UIVerticalLayout_SetHeightFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIVerticalLayout_SetPadding final
{
public:
	struct FMargin                                Value;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetPadding) == 0x000004, "Wrong alignment on UIVerticalLayout_SetPadding");
static_assert(sizeof(UIVerticalLayout_SetPadding) == 0x000010, "Wrong size on UIVerticalLayout_SetPadding");
static_assert(offsetof(UIVerticalLayout_SetPadding, Value) == 0x000000, "Member 'UIVerticalLayout_SetPadding::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_SetSpacing final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetSpacing) == 0x000004, "Wrong alignment on UIVerticalLayout_SetSpacing");
static_assert(sizeof(UIVerticalLayout_SetSpacing) == 0x000004, "Wrong size on UIVerticalLayout_SetSpacing");
static_assert(offsetof(UIVerticalLayout_SetSpacing, Value) == 0x000000, "Member 'UIVerticalLayout_SetSpacing::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetUseChildScaleOnHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetUseChildScaleOnHeight final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetUseChildScaleOnHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_SetUseChildScaleOnHeight");
static_assert(sizeof(UIVerticalLayout_SetUseChildScaleOnHeight) == 0x000001, "Wrong size on UIVerticalLayout_SetUseChildScaleOnHeight");
static_assert(offsetof(UIVerticalLayout_SetUseChildScaleOnHeight, Value) == 0x000000, "Member 'UIVerticalLayout_SetUseChildScaleOnHeight::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_SetWidthFitToChildren final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetWidthFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_SetWidthFitToChildren");
static_assert(sizeof(UIVerticalLayout_SetWidthFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_SetWidthFitToChildren");
static_assert(offsetof(UIVerticalLayout_SetWidthFitToChildren, Value) == 0x000000, "Member 'UIVerticalLayout_SetWidthFitToChildren::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.SetWidthFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_SetWidthFitToChildrenFromMinToMax final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_SetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIVerticalLayout_SetWidthFitToChildrenFromMinToMax");
static_assert(sizeof(UIVerticalLayout_SetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIVerticalLayout_SetWidthFitToChildrenFromMinToMax");
static_assert(offsetof(UIVerticalLayout_SetWidthFitToChildrenFromMinToMax, Value) == 0x000000, "Member 'UIVerticalLayout_SetWidthFitToChildrenFromMinToMax::Value' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetActuralRange
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_GetActuralRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetActuralRange) == 0x000004, "Wrong alignment on UIVerticalLayout_GetActuralRange");
static_assert(sizeof(UIVerticalLayout_GetActuralRange) == 0x000004, "Wrong size on UIVerticalLayout_GetActuralRange");
static_assert(offsetof(UIVerticalLayout_GetActuralRange, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetActuralRange::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetAlign
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetAlign final
{
public:
	ELGUILayoutAlignmentType                      ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetAlign) == 0x000001, "Wrong alignment on UIVerticalLayout_GetAlign");
static_assert(sizeof(UIVerticalLayout_GetAlign) == 0x000001, "Wrong size on UIVerticalLayout_GetAlign");
static_assert(offsetof(UIVerticalLayout_GetAlign, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetAlign::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetControlChildHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetControlChildHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetControlChildHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_GetControlChildHeight");
static_assert(sizeof(UIVerticalLayout_GetControlChildHeight) == 0x000001, "Wrong size on UIVerticalLayout_GetControlChildHeight");
static_assert(offsetof(UIVerticalLayout_GetControlChildHeight, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetControlChildHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetControlChildWidth
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetControlChildWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetControlChildWidth) == 0x000001, "Wrong alignment on UIVerticalLayout_GetControlChildWidth");
static_assert(sizeof(UIVerticalLayout_GetControlChildWidth) == 0x000001, "Wrong size on UIVerticalLayout_GetControlChildWidth");
static_assert(offsetof(UIVerticalLayout_GetControlChildWidth, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetControlChildWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetExpandChildHeightArea
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetExpandChildHeightArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetExpandChildHeightArea) == 0x000001, "Wrong alignment on UIVerticalLayout_GetExpandChildHeightArea");
static_assert(sizeof(UIVerticalLayout_GetExpandChildHeightArea) == 0x000001, "Wrong size on UIVerticalLayout_GetExpandChildHeightArea");
static_assert(offsetof(UIVerticalLayout_GetExpandChildHeightArea, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetExpandChildHeightArea::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetExpandChildWidthArea
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetExpandChildWidthArea final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetExpandChildWidthArea) == 0x000001, "Wrong alignment on UIVerticalLayout_GetExpandChildWidthArea");
static_assert(sizeof(UIVerticalLayout_GetExpandChildWidthArea) == 0x000001, "Wrong size on UIVerticalLayout_GetExpandChildWidthArea");
static_assert(offsetof(UIVerticalLayout_GetExpandChildWidthArea, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetExpandChildWidthArea::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetExpendChildrenHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetExpendChildrenHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_GetExpendChildrenHeight");
static_assert(sizeof(UIVerticalLayout_GetExpendChildrenHeight) == 0x000001, "Wrong size on UIVerticalLayout_GetExpendChildrenHeight");
static_assert(offsetof(UIVerticalLayout_GetExpendChildrenHeight, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetExpendChildrenHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetExpendChildrenWidth
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetExpendChildrenWidth final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong alignment on UIVerticalLayout_GetExpendChildrenWidth");
static_assert(sizeof(UIVerticalLayout_GetExpendChildrenWidth) == 0x000001, "Wrong size on UIVerticalLayout_GetExpendChildrenWidth");
static_assert(offsetof(UIVerticalLayout_GetExpendChildrenWidth, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetExpendChildrenWidth::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetHeightFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetHeightFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetHeightFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_GetHeightFitToChildren");
static_assert(sizeof(UIVerticalLayout_GetHeightFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_GetHeightFitToChildren");
static_assert(offsetof(UIVerticalLayout_GetHeightFitToChildren, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetHeightFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetPadding
// 0x0010 (0x0010 - 0x0000)
struct UIVerticalLayout_GetPadding final
{
public:
	struct FMargin                                ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetPadding) == 0x000004, "Wrong alignment on UIVerticalLayout_GetPadding");
static_assert(sizeof(UIVerticalLayout_GetPadding) == 0x000010, "Wrong size on UIVerticalLayout_GetPadding");
static_assert(offsetof(UIVerticalLayout_GetPadding, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetPadding::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetSpacing
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_GetSpacing final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetSpacing) == 0x000004, "Wrong alignment on UIVerticalLayout_GetSpacing");
static_assert(sizeof(UIVerticalLayout_GetSpacing) == 0x000004, "Wrong size on UIVerticalLayout_GetSpacing");
static_assert(offsetof(UIVerticalLayout_GetSpacing, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetSpacing::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetUseChildScaleOnHeight
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetUseChildScaleOnHeight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetUseChildScaleOnHeight) == 0x000001, "Wrong alignment on UIVerticalLayout_GetUseChildScaleOnHeight");
static_assert(sizeof(UIVerticalLayout_GetUseChildScaleOnHeight) == 0x000001, "Wrong size on UIVerticalLayout_GetUseChildScaleOnHeight");
static_assert(offsetof(UIVerticalLayout_GetUseChildScaleOnHeight, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetUseChildScaleOnHeight::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetWidthFitToChildren
// 0x0001 (0x0001 - 0x0000)
struct UIVerticalLayout_GetWidthFitToChildren final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetWidthFitToChildren) == 0x000001, "Wrong alignment on UIVerticalLayout_GetWidthFitToChildren");
static_assert(sizeof(UIVerticalLayout_GetWidthFitToChildren) == 0x000001, "Wrong size on UIVerticalLayout_GetWidthFitToChildren");
static_assert(offsetof(UIVerticalLayout_GetWidthFitToChildren, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetWidthFitToChildren::ReturnValue' has a wrong offset!");

// Function LGUI.UIVerticalLayout.GetWidthFitToChildrenFromMinToMax
// 0x0004 (0x0004 - 0x0000)
struct UIVerticalLayout_GetWidthFitToChildrenFromMinToMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIVerticalLayout_GetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong alignment on UIVerticalLayout_GetWidthFitToChildrenFromMinToMax");
static_assert(sizeof(UIVerticalLayout_GetWidthFitToChildrenFromMinToMax) == 0x000004, "Wrong size on UIVerticalLayout_GetWidthFitToChildrenFromMinToMax");
static_assert(offsetof(UIVerticalLayout_GetWidthFitToChildrenFromMinToMax, ReturnValue) == 0x000000, "Member 'UIVerticalLayout_GetWidthFitToChildrenFromMinToMax::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.SetBackgroundColor
// 0x0010 (0x0010 - 0x0000)
struct UIWidget_SetBackgroundColor final
{
public:
	struct FLinearColor                           NewBackgroundColor;                                // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetBackgroundColor) == 0x000004, "Wrong alignment on UIWidget_SetBackgroundColor");
static_assert(sizeof(UIWidget_SetBackgroundColor) == 0x000010, "Wrong size on UIWidget_SetBackgroundColor");
static_assert(offsetof(UIWidget_SetBackgroundColor, NewBackgroundColor) == 0x000000, "Member 'UIWidget_SetBackgroundColor::NewBackgroundColor' has a wrong offset!");

// Function LGUI.UIWidget.SetManuallyRedraw
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_SetManuallyRedraw final
{
public:
	bool                                          bUseManualRedraw;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetManuallyRedraw) == 0x000001, "Wrong alignment on UIWidget_SetManuallyRedraw");
static_assert(sizeof(UIWidget_SetManuallyRedraw) == 0x000001, "Wrong size on UIWidget_SetManuallyRedraw");
static_assert(offsetof(UIWidget_SetManuallyRedraw, bUseManualRedraw) == 0x000000, "Member 'UIWidget_SetManuallyRedraw::bUseManualRedraw' has a wrong offset!");

// Function LGUI.UIWidget.SetRedrawTime
// 0x0004 (0x0004 - 0x0000)
struct UIWidget_SetRedrawTime final
{
public:
	float                                         InRedrawTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetRedrawTime) == 0x000004, "Wrong alignment on UIWidget_SetRedrawTime");
static_assert(sizeof(UIWidget_SetRedrawTime) == 0x000004, "Wrong size on UIWidget_SetRedrawTime");
static_assert(offsetof(UIWidget_SetRedrawTime, InRedrawTime) == 0x000000, "Member 'UIWidget_SetRedrawTime::InRedrawTime' has a wrong offset!");

// Function LGUI.UIWidget.SetResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct UIWidget_SetResolutionScale final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetResolutionScale) == 0x000004, "Wrong alignment on UIWidget_SetResolutionScale");
static_assert(sizeof(UIWidget_SetResolutionScale) == 0x000004, "Wrong size on UIWidget_SetResolutionScale");
static_assert(offsetof(UIWidget_SetResolutionScale, Value) == 0x000000, "Member 'UIWidget_SetResolutionScale::Value' has a wrong offset!");

// Function LGUI.UIWidget.SetTickMode
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_SetTickMode final
{
public:
	ETickMode                                     InTickMode;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetTickMode) == 0x000001, "Wrong alignment on UIWidget_SetTickMode");
static_assert(sizeof(UIWidget_SetTickMode) == 0x000001, "Wrong size on UIWidget_SetTickMode");
static_assert(offsetof(UIWidget_SetTickMode, InTickMode) == 0x000000, "Member 'UIWidget_SetTickMode::InTickMode' has a wrong offset!");

// Function LGUI.UIWidget.SetTickWhenOffscreen
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_SetTickWhenOffscreen final
{
public:
	bool                                          bWantTickWhenOffscreen;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetTickWhenOffscreen) == 0x000001, "Wrong alignment on UIWidget_SetTickWhenOffscreen");
static_assert(sizeof(UIWidget_SetTickWhenOffscreen) == 0x000001, "Wrong size on UIWidget_SetTickWhenOffscreen");
static_assert(offsetof(UIWidget_SetTickWhenOffscreen, bWantTickWhenOffscreen) == 0x000000, "Member 'UIWidget_SetTickWhenOffscreen::bWantTickWhenOffscreen' has a wrong offset!");

// Function LGUI.UIWidget.SetWidget
// 0x0008 (0x0008 - 0x0000)
struct UIWidget_SetWidget final
{
public:
	class UUserWidget*                            Widget_0;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetWidget) == 0x000008, "Wrong alignment on UIWidget_SetWidget");
static_assert(sizeof(UIWidget_SetWidget) == 0x000008, "Wrong size on UIWidget_SetWidget");
static_assert(offsetof(UIWidget_SetWidget, Widget_0) == 0x000000, "Member 'UIWidget_SetWidget::Widget_0' has a wrong offset!");

// Function LGUI.UIWidget.SetWindowFocusable
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_SetWindowFocusable final
{
public:
	bool                                          bInWindowFocusable;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetWindowFocusable) == 0x000001, "Wrong alignment on UIWidget_SetWindowFocusable");
static_assert(sizeof(UIWidget_SetWindowFocusable) == 0x000001, "Wrong size on UIWidget_SetWindowFocusable");
static_assert(offsetof(UIWidget_SetWindowFocusable, bInWindowFocusable) == 0x000000, "Member 'UIWidget_SetWindowFocusable::bInWindowFocusable' has a wrong offset!");

// Function LGUI.UIWidget.SetWindowVisibility
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_SetWindowVisibility final
{
public:
	EWindowVisibility                             InVisibility;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_SetWindowVisibility) == 0x000001, "Wrong alignment on UIWidget_SetWindowVisibility");
static_assert(sizeof(UIWidget_SetWindowVisibility) == 0x000001, "Wrong size on UIWidget_SetWindowVisibility");
static_assert(offsetof(UIWidget_SetWindowVisibility, InVisibility) == 0x000000, "Member 'UIWidget_SetWindowVisibility::InVisibility' has a wrong offset!");

// Function LGUI.UIWidget.GetCurrentDrawSize
// 0x0010 (0x0010 - 0x0000)
struct UIWidget_GetCurrentDrawSize final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetCurrentDrawSize) == 0x000008, "Wrong alignment on UIWidget_GetCurrentDrawSize");
static_assert(sizeof(UIWidget_GetCurrentDrawSize) == 0x000010, "Wrong size on UIWidget_GetCurrentDrawSize");
static_assert(offsetof(UIWidget_GetCurrentDrawSize, ReturnValue) == 0x000000, "Member 'UIWidget_GetCurrentDrawSize::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetManuallyRedraw
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_GetManuallyRedraw final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetManuallyRedraw) == 0x000001, "Wrong alignment on UIWidget_GetManuallyRedraw");
static_assert(sizeof(UIWidget_GetManuallyRedraw) == 0x000001, "Wrong size on UIWidget_GetManuallyRedraw");
static_assert(offsetof(UIWidget_GetManuallyRedraw, ReturnValue) == 0x000000, "Member 'UIWidget_GetManuallyRedraw::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetRedrawTime
// 0x0004 (0x0004 - 0x0000)
struct UIWidget_GetRedrawTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetRedrawTime) == 0x000004, "Wrong alignment on UIWidget_GetRedrawTime");
static_assert(sizeof(UIWidget_GetRedrawTime) == 0x000004, "Wrong size on UIWidget_GetRedrawTime");
static_assert(offsetof(UIWidget_GetRedrawTime, ReturnValue) == 0x000000, "Member 'UIWidget_GetRedrawTime::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetRenderTarget
// 0x0008 (0x0008 - 0x0000)
struct UIWidget_GetRenderTarget final
{
public:
	class UTextureRenderTarget2D*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetRenderTarget) == 0x000008, "Wrong alignment on UIWidget_GetRenderTarget");
static_assert(sizeof(UIWidget_GetRenderTarget) == 0x000008, "Wrong size on UIWidget_GetRenderTarget");
static_assert(offsetof(UIWidget_GetRenderTarget, ReturnValue) == 0x000000, "Member 'UIWidget_GetRenderTarget::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetResolutionScale
// 0x0004 (0x0004 - 0x0000)
struct UIWidget_GetResolutionScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetResolutionScale) == 0x000004, "Wrong alignment on UIWidget_GetResolutionScale");
static_assert(sizeof(UIWidget_GetResolutionScale) == 0x000004, "Wrong size on UIWidget_GetResolutionScale");
static_assert(offsetof(UIWidget_GetResolutionScale, ReturnValue) == 0x000000, "Member 'UIWidget_GetResolutionScale::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetTickWhenOffscreen
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_GetTickWhenOffscreen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetTickWhenOffscreen) == 0x000001, "Wrong alignment on UIWidget_GetTickWhenOffscreen");
static_assert(sizeof(UIWidget_GetTickWhenOffscreen) == 0x000001, "Wrong size on UIWidget_GetTickWhenOffscreen");
static_assert(offsetof(UIWidget_GetTickWhenOffscreen, ReturnValue) == 0x000000, "Member 'UIWidget_GetTickWhenOffscreen::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetUserWidgetObject
// 0x0008 (0x0008 - 0x0000)
struct UIWidget_GetUserWidgetObject final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetUserWidgetObject) == 0x000008, "Wrong alignment on UIWidget_GetUserWidgetObject");
static_assert(sizeof(UIWidget_GetUserWidgetObject) == 0x000008, "Wrong size on UIWidget_GetUserWidgetObject");
static_assert(offsetof(UIWidget_GetUserWidgetObject, ReturnValue) == 0x000000, "Member 'UIWidget_GetUserWidgetObject::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetWidget
// 0x0008 (0x0008 - 0x0000)
struct UIWidget_GetWidget final
{
public:
	class UUserWidget*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetWidget) == 0x000008, "Wrong alignment on UIWidget_GetWidget");
static_assert(sizeof(UIWidget_GetWidget) == 0x000008, "Wrong size on UIWidget_GetWidget");
static_assert(offsetof(UIWidget_GetWidget, ReturnValue) == 0x000000, "Member 'UIWidget_GetWidget::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetWindowFocusable
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_GetWindowFocusable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetWindowFocusable) == 0x000001, "Wrong alignment on UIWidget_GetWindowFocusable");
static_assert(sizeof(UIWidget_GetWindowFocusable) == 0x000001, "Wrong size on UIWidget_GetWindowFocusable");
static_assert(offsetof(UIWidget_GetWindowFocusable, ReturnValue) == 0x000000, "Member 'UIWidget_GetWindowFocusable::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.GetWindowVisiblility
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_GetWindowVisiblility final
{
public:
	EWindowVisibility                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_GetWindowVisiblility) == 0x000001, "Wrong alignment on UIWidget_GetWindowVisiblility");
static_assert(sizeof(UIWidget_GetWindowVisiblility) == 0x000001, "Wrong size on UIWidget_GetWindowVisiblility");
static_assert(offsetof(UIWidget_GetWindowVisiblility, ReturnValue) == 0x000000, "Member 'UIWidget_GetWindowVisiblility::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidget.IsWidgetVisible
// 0x0001 (0x0001 - 0x0000)
struct UIWidget_IsWidgetVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidget_IsWidgetVisible) == 0x000001, "Wrong alignment on UIWidget_IsWidgetVisible");
static_assert(sizeof(UIWidget_IsWidgetVisible) == 0x000001, "Wrong size on UIWidget_IsWidgetVisible");
static_assert(offsetof(UIWidget_IsWidgetVisible, ReturnValue) == 0x000000, "Member 'UIWidget_IsWidgetVisible::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetActor.GetUIWidget
// 0x0008 (0x0008 - 0x0000)
struct UIWidgetActor_GetUIWidget final
{
public:
	class UUIWidget*                              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetActor_GetUIWidget) == 0x000008, "Wrong alignment on UIWidgetActor_GetUIWidget");
static_assert(sizeof(UIWidgetActor_GetUIWidget) == 0x000008, "Wrong size on UIWidgetActor_GetUIWidget");
static_assert(offsetof(UIWidgetActor_GetUIWidget, ReturnValue) == 0x000000, "Member 'UIWidgetActor_GetUIWidget::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.PressAndReleaseKey
// 0x0020 (0x0020 - 0x0000)
struct UIWidgetInteraction_PressAndReleaseKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIWidgetInteraction_PressAndReleaseKey) == 0x000008, "Wrong alignment on UIWidgetInteraction_PressAndReleaseKey");
static_assert(sizeof(UIWidgetInteraction_PressAndReleaseKey) == 0x000020, "Wrong size on UIWidgetInteraction_PressAndReleaseKey");
static_assert(offsetof(UIWidgetInteraction_PressAndReleaseKey, Key) == 0x000000, "Member 'UIWidgetInteraction_PressAndReleaseKey::Key' has a wrong offset!");
static_assert(offsetof(UIWidgetInteraction_PressAndReleaseKey, ReturnValue) == 0x000018, "Member 'UIWidgetInteraction_PressAndReleaseKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.PressKey
// 0x0020 (0x0020 - 0x0000)
struct UIWidgetInteraction_PressKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepeat;                                           // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIWidgetInteraction_PressKey) == 0x000008, "Wrong alignment on UIWidgetInteraction_PressKey");
static_assert(sizeof(UIWidgetInteraction_PressKey) == 0x000020, "Wrong size on UIWidgetInteraction_PressKey");
static_assert(offsetof(UIWidgetInteraction_PressKey, Key) == 0x000000, "Member 'UIWidgetInteraction_PressKey::Key' has a wrong offset!");
static_assert(offsetof(UIWidgetInteraction_PressKey, bRepeat) == 0x000018, "Member 'UIWidgetInteraction_PressKey::bRepeat' has a wrong offset!");
static_assert(offsetof(UIWidgetInteraction_PressKey, ReturnValue) == 0x000019, "Member 'UIWidgetInteraction_PressKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.PressPointerKey
// 0x0018 (0x0018 - 0x0000)
struct UIWidgetInteraction_PressPointerKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_PressPointerKey) == 0x000008, "Wrong alignment on UIWidgetInteraction_PressPointerKey");
static_assert(sizeof(UIWidgetInteraction_PressPointerKey) == 0x000018, "Wrong size on UIWidgetInteraction_PressPointerKey");
static_assert(offsetof(UIWidgetInteraction_PressPointerKey, Key) == 0x000000, "Member 'UIWidgetInteraction_PressPointerKey::Key' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.ReleaseKey
// 0x0020 (0x0020 - 0x0000)
struct UIWidgetInteraction_ReleaseKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIWidgetInteraction_ReleaseKey) == 0x000008, "Wrong alignment on UIWidgetInteraction_ReleaseKey");
static_assert(sizeof(UIWidgetInteraction_ReleaseKey) == 0x000020, "Wrong size on UIWidgetInteraction_ReleaseKey");
static_assert(offsetof(UIWidgetInteraction_ReleaseKey, Key) == 0x000000, "Member 'UIWidgetInteraction_ReleaseKey::Key' has a wrong offset!");
static_assert(offsetof(UIWidgetInteraction_ReleaseKey, ReturnValue) == 0x000018, "Member 'UIWidgetInteraction_ReleaseKey::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.ReleasePointerKey
// 0x0018 (0x0018 - 0x0000)
struct UIWidgetInteraction_ReleasePointerKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_ReleasePointerKey) == 0x000008, "Wrong alignment on UIWidgetInteraction_ReleasePointerKey");
static_assert(sizeof(UIWidgetInteraction_ReleasePointerKey) == 0x000018, "Wrong size on UIWidgetInteraction_ReleasePointerKey");
static_assert(offsetof(UIWidgetInteraction_ReleasePointerKey, Key) == 0x000000, "Member 'UIWidgetInteraction_ReleasePointerKey::Key' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.ScrollWheel
// 0x0004 (0x0004 - 0x0000)
struct UIWidgetInteraction_ScrollWheel final
{
public:
	float                                         ScrollDelta;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_ScrollWheel) == 0x000004, "Wrong alignment on UIWidgetInteraction_ScrollWheel");
static_assert(sizeof(UIWidgetInteraction_ScrollWheel) == 0x000004, "Wrong size on UIWidgetInteraction_ScrollWheel");
static_assert(offsetof(UIWidgetInteraction_ScrollWheel, ScrollDelta) == 0x000000, "Member 'UIWidgetInteraction_ScrollWheel::ScrollDelta' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.SendKeyChar
// 0x0018 (0x0018 - 0x0000)
struct UIWidgetInteraction_SendKeyChar final
{
public:
	class FString                                 Characters;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRepeat;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UIWidgetInteraction_SendKeyChar) == 0x000008, "Wrong alignment on UIWidgetInteraction_SendKeyChar");
static_assert(sizeof(UIWidgetInteraction_SendKeyChar) == 0x000018, "Wrong size on UIWidgetInteraction_SendKeyChar");
static_assert(offsetof(UIWidgetInteraction_SendKeyChar, Characters) == 0x000000, "Member 'UIWidgetInteraction_SendKeyChar::Characters' has a wrong offset!");
static_assert(offsetof(UIWidgetInteraction_SendKeyChar, bRepeat) == 0x000010, "Member 'UIWidgetInteraction_SendKeyChar::bRepeat' has a wrong offset!");
static_assert(offsetof(UIWidgetInteraction_SendKeyChar, ReturnValue) == 0x000011, "Member 'UIWidgetInteraction_SendKeyChar::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.SetCustomHitResult
// 0x00F8 (0x00F8 - 0x0000)
struct UIWidgetInteraction_SetCustomHitResult final
{
public:
	struct FHitResult                             HitResult;                                         // 0x0000(0x00F8)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_SetCustomHitResult) == 0x000008, "Wrong alignment on UIWidgetInteraction_SetCustomHitResult");
static_assert(sizeof(UIWidgetInteraction_SetCustomHitResult) == 0x0000F8, "Wrong size on UIWidgetInteraction_SetCustomHitResult");
static_assert(offsetof(UIWidgetInteraction_SetCustomHitResult, HitResult) == 0x000000, "Member 'UIWidgetInteraction_SetCustomHitResult::HitResult' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.SetFocus
// 0x0008 (0x0008 - 0x0000)
struct UIWidgetInteraction_SetFocus final
{
public:
	class UWidget*                                FocusWidget;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_SetFocus) == 0x000008, "Wrong alignment on UIWidgetInteraction_SetFocus");
static_assert(sizeof(UIWidgetInteraction_SetFocus) == 0x000008, "Wrong size on UIWidgetInteraction_SetFocus");
static_assert(offsetof(UIWidgetInteraction_SetFocus, FocusWidget) == 0x000000, "Member 'UIWidgetInteraction_SetFocus::FocusWidget' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.Get2DHitLocation
// 0x0010 (0x0010 - 0x0000)
struct UIWidgetInteraction_Get2DHitLocation final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_Get2DHitLocation) == 0x000008, "Wrong alignment on UIWidgetInteraction_Get2DHitLocation");
static_assert(sizeof(UIWidgetInteraction_Get2DHitLocation) == 0x000010, "Wrong size on UIWidgetInteraction_Get2DHitLocation");
static_assert(offsetof(UIWidgetInteraction_Get2DHitLocation, ReturnValue) == 0x000000, "Member 'UIWidgetInteraction_Get2DHitLocation::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.IsOverFocusableWidget
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetInteraction_IsOverFocusableWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_IsOverFocusableWidget) == 0x000001, "Wrong alignment on UIWidgetInteraction_IsOverFocusableWidget");
static_assert(sizeof(UIWidgetInteraction_IsOverFocusableWidget) == 0x000001, "Wrong size on UIWidgetInteraction_IsOverFocusableWidget");
static_assert(offsetof(UIWidgetInteraction_IsOverFocusableWidget, ReturnValue) == 0x000000, "Member 'UIWidgetInteraction_IsOverFocusableWidget::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.IsOverHitTestVisibleWidget
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetInteraction_IsOverHitTestVisibleWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_IsOverHitTestVisibleWidget) == 0x000001, "Wrong alignment on UIWidgetInteraction_IsOverHitTestVisibleWidget");
static_assert(sizeof(UIWidgetInteraction_IsOverHitTestVisibleWidget) == 0x000001, "Wrong size on UIWidgetInteraction_IsOverHitTestVisibleWidget");
static_assert(offsetof(UIWidgetInteraction_IsOverHitTestVisibleWidget, ReturnValue) == 0x000000, "Member 'UIWidgetInteraction_IsOverHitTestVisibleWidget::ReturnValue' has a wrong offset!");

// Function LGUI.UIWidgetInteraction.IsOverInteractableWidget
// 0x0001 (0x0001 - 0x0000)
struct UIWidgetInteraction_IsOverInteractableWidget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIWidgetInteraction_IsOverInteractableWidget) == 0x000001, "Wrong alignment on UIWidgetInteraction_IsOverInteractableWidget");
static_assert(sizeof(UIWidgetInteraction_IsOverInteractableWidget) == 0x000001, "Wrong size on UIWidgetInteraction_IsOverInteractableWidget");
static_assert(offsetof(UIWidgetInteraction_IsOverInteractableWidget, ReturnValue) == 0x000000, "Member 'UIWidgetInteraction_IsOverInteractableWidget::ReturnValue' has a wrong offset!");

}

