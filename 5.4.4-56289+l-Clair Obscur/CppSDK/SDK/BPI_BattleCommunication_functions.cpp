#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCommunication

#include "Basic.hpp"

#include "BPI_BattleCommunication_classes.hpp"
#include "BPI_BattleCommunication_parameters.hpp"


namespace SDK
{

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnAPRecovered
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFromTurnStart                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnAPRecovered(int32 Amount, bool IsFromTurnStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnAPRecovered");

	Params::BPI_BattleCommunication_C_OnAPRecovered Parms{};

	Parms.Amount = Amount;
	Parms.IsFromTurnStart = IsFromTurnStart;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnCharacterTurnEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnCharacterTurnEnd(class ABP_jRPG_Character_Battle_Base_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnCharacterTurnEnd");

	Params::BPI_BattleCommunication_C_OnCharacterTurnEnd Parms{};

	Parms.Character = Character;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnDamageReceived
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Critical_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Weakness_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Resistant_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackType                             Element                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageReason                           Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_jRPG_Character_Battle_Base_C* DamageCharacterSource                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnDamageReceived(double Damage, bool Critical_, bool Weakness_, bool Resistant_, EAttackType Element, EDamageReason Reason, class ABP_jRPG_Character_Battle_Base_C* DamageCharacterSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnDamageReceived");

	Params::BPI_BattleCommunication_C_OnDamageReceived Parms{};

	Parms.Damage = Damage;
	Parms.Critical_ = Critical_;
	Parms.Weakness_ = Weakness_;
	Parms.Resistant_ = Resistant_;
	Parms.Element = Element;
	Parms.Reason = Reason;
	Parms.DamageCharacterSource = DamageCharacterSource;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DeathByCounter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnDeath(bool DeathByCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnDeath");

	Params::BPI_BattleCommunication_C_OnDeath Parms{};

	Parms.DeathByCounter = DeathByCounter;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnHealed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RestoredMP_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*  SourceCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EHealReason                             Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnHealed(double HealAmount, bool RestoredMP_, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, EHealReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnHealed");

	Params::BPI_BattleCommunication_C_OnHealed Parms{};

	Parms.HealAmount = HealAmount;
	Parms.RestoredMP_ = RestoredMP_;
	Parms.SourceCharacter = SourceCharacter;
	Parms.Reason = Reason;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnInitiativeReduced
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ReductionAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnInitiativeReduced(double ReductionAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnInitiativeReduced");

	Params::BPI_BattleCommunication_C_OnInitiativeReduced Parms{};

	Parms.ReductionAmount = ReductionAmount;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnPowerDebuff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Debuff_Power                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnPowerDebuff(double Debuff_Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnPowerDebuff");

	Params::BPI_BattleCommunication_C_OnPowerDebuff Parms{};

	Parms.Debuff_Power = Debuff_Power;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnResurrected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_BattleCommunication_C::OnResurrected(double HealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_BattleCommunication_C", "OnResurrected");

	Params::BPI_BattleCommunication_C_OnResurrected Parms{};

	Parms.HealAmount = HealAmount;

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

