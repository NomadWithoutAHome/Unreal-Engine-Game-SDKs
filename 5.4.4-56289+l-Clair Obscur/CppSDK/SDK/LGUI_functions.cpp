#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LGUI

#include "Basic.hpp"

#include "LGUI_classes.hpp"
#include "LGUI_parameters.hpp"


namespace SDK
{

// Function LGUI.LGUICultureChangedInterface.OnCultureChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILGUICultureChangedInterface::OnCultureChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUICultureChangedInterface", "OnCultureChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseCurve
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UCurveFloat*                      Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PropertyWithEase::SetEaseCurve(class UCurveFloat* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "SetEaseCurve");

	Params::UIEffectTextAnimation_PropertyWithEase_SetEaseCurve Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.SetEaseType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELTweenEase                             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PropertyWithEase::SetEaseType(ELTweenEase Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "SetEaseType");

	Params::UIEffectTextAnimation_PropertyWithEase_SetEaseType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetCurveFloat
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UCurveFloat*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCurveFloat* UUIEffectTextAnimation_PropertyWithEase::GetCurveFloat() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "GetCurveFloat");

	Params::UIEffectTextAnimation_PropertyWithEase_GetCurveFloat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithEase.GetEaseType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELTweenEase                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELTweenEase UUIEffectTextAnimation_PropertyWithEase::GetEaseType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithEase", "GetEaseType");

	Params::UIEffectTextAnimation_PropertyWithEase_GetEaseType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetMax(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetMax Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetMin(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetMin Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetSeed(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetSeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.SetUseHSV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorRandomProperty::SetUseHSV(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "SetUseHSV");

	Params::UIEffectTextAnimation_ColorRandomProperty_SetUseHSV Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectTextAnimation_ColorRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectTextAnimation_ColorRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_ColorRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorRandomProperty.GetUseHSV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_ColorRandomProperty::GetUseHSV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorRandomProperty", "GetUseHSV");

	Params::UIEffectTextAnimation_ColorRandomProperty_GetUseHSV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILayoutElementInterface.GetConstantSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ELayoutElementSizeType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ILGUILayoutElementInterface::GetConstantSize(ELayoutElementSizeType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUILayoutElementInterface", "GetConstantSize");

	Params::LGUILayoutElementInterface_GetConstantSize Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILayoutElementInterface.GetLayoutType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ELayoutElementType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELayoutElementType ILGUILayoutElementInterface::GetLayoutType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUILayoutElementInterface", "GetLayoutType");

	Params::LGUILayoutElementInterface_GetLayoutType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILayoutElementInterface.GetRatioSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// ELayoutElementSizeType                  Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ILGUILayoutElementInterface::GetRatioSize(ELayoutElementSizeType Type) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUILayoutElementInterface", "GetRatioSize");

	Params::LGUILayoutElementInterface_GetRatioSize Parms{};

	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILayoutInterface.MarkRebuildLayout
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILGUILayoutInterface::MarkRebuildLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUILayoutInterface", "MarkRebuildLayout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUILayoutInterface.OnUpdateLayout
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILGUILayoutInterface::OnUpdateLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUILayoutInterface", "OnUpdateLayout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUILayoutInterface.GetCanLayoutControlAnchor
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          InUIItem                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUICanLayoutControlAnchor*     OutResult                                              (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUILayoutInterface::GetCanLayoutControlAnchor(class UUIItem* InUIItem, struct FLGUICanLayoutControlAnchor* OutResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUILayoutInterface", "GetCanLayoutControlAnchor");

	Params::LGUILayoutInterface_GetCanLayoutControlAnchor Parms{};

	Parms.InUIItem = InUIItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabInterface.Awake
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILGUIPrefabInterface::Awake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPrefabInterface", "Awake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPrefabInterface.EditorAwake
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILGUIPrefabInterface::EditorAwake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPrefabInterface", "EditorAwake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteRenderableInterface.ApplyAtlasTextureChange
// (Native, Event, Public, BlueprintEvent)

void IUISpriteRenderableInterface::ApplyAtlasTextureChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UISpriteRenderableInterface", "ApplyAtlasTextureChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteRenderableInterface.ApplyAtlasTextureScaleUp
// (Native, Event, Public, BlueprintEvent)

void IUISpriteRenderableInterface::ApplyAtlasTextureScaleUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UISpriteRenderableInterface", "ApplyAtlasTextureScaleUp");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteRenderableInterface.SpriteRenderableGetSprite
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* IUISpriteRenderableInterface::SpriteRenderableGetSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UISpriteRenderableInterface", "SpriteRenderableGetSprite");

	Params::UISpriteRenderableInterface_SpriteRenderableGetSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseEventData.ToString
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ULGUIBaseEventData::ToString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseEventData", "ToString");

	Params::LGUIBaseEventData_ToString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseInputModule.ClearEvent
// (Native, Public, BlueprintCallable)

void ULGUIBaseInputModule::ClearEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseInputModule", "ClearEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_AlphaProperty.SetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_AlphaProperty::SetAlpha(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_AlphaProperty", "SetAlpha");

	Params::UIEffectTextAnimation_AlphaProperty_SetAlpha Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_AlphaProperty.GetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_AlphaProperty::GetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_AlphaProperty", "GetAlpha");

	Params::UIEffectTextAnimation_AlphaProperty_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.ActivateRaycaster
// (Native, Public, BlueprintCallable)

void ULGUIBaseRaycaster::ActivateRaycaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "ActivateRaycaster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.DeactivateRaycaster
// (Native, Public, BlueprintCallable)

void ULGUIBaseRaycaster::DeactivateRaycaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "DeactivateRaycaster");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.SetClickThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBaseRaycaster::SetClickThreshold(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "SetClickThreshold");

	Params::LGUIBaseRaycaster_SetClickThreshold Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.SetHoldToDrag
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBaseRaycaster::SetHoldToDrag(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "SetHoldToDrag");

	Params::LGUIBaseRaycaster_SetHoldToDrag Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.SetHoldToDragTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBaseRaycaster::SetHoldToDragTime(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "SetHoldToDragTime");

	Params::LGUIBaseRaycaster_SetHoldToDragTime Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBaseRaycaster.GetAffectByGamePause
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBaseRaycaster::GetAffectByGamePause() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetAffectByGamePause");

	Params::LGUIBaseRaycaster_GetAffectByGamePause Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetClickThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIBaseRaycaster::GetClickThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetClickThreshold");

	Params::LGUIBaseRaycaster_GetClickThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIBaseRaycaster::GetDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetDepth");

	Params::LGUIBaseRaycaster_GetDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetEventFireType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIEventFireType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIEventFireType ULGUIBaseRaycaster::GetEventFireType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetEventFireType");

	Params::LGUIBaseRaycaster_GetEventFireType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetHoldToDrag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIBaseRaycaster::GetHoldToDrag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetHoldToDrag");

	Params::LGUIBaseRaycaster_GetHoldToDrag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetHoldToDragTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIBaseRaycaster::GetHoldToDragTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetHoldToDragTime");

	Params::LGUIBaseRaycaster_GetHoldToDragTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetPointerID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIBaseRaycaster::GetPointerID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetPointerID");

	Params::LGUIBaseRaycaster_GetPointerID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetRayDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIBaseRaycaster::GetRayDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetRayDirection");

	Params::LGUIBaseRaycaster_GetRayDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetRayLength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIBaseRaycaster::GetRayLength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetRayLength");

	Params::LGUIBaseRaycaster_GetRayLength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetRayOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIBaseRaycaster::GetRayOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetRayOrigin");

	Params::LGUIBaseRaycaster_GetRayOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBaseRaycaster.GetTraceChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETraceTypeQuery                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETraceTypeQuery ULGUIBaseRaycaster::GetTraceChannel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIBaseRaycaster", "GetTraceChannel");

	Params::LGUIBaseRaycaster_GetTraceChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AlphaFrom
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIBaseRenderable*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AlphaFrom(class UUIBaseRenderable* Target, float StartValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AlphaFrom");

	Params::LGUIBPLibrary_AlphaFrom Parms{};

	Parms.Target = Target;
	Parms.StartValue = StartValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AlphaTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIBaseRenderable*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AlphaTo(class UUIBaseRenderable* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AlphaTo");

	Params::LGUIBPLibrary_AlphaTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorBottomTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorBottomTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorBottomTo");

	Params::LGUIBPLibrary_AnchorBottomTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchoredPositionTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchoredPositionTo(class UUIItem* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchoredPositionTo");

	Params::LGUIBPLibrary_AnchoredPositionTo Parms{};

	Parms.Target = Target;
	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorLeftTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorLeftTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorLeftTo");

	Params::LGUIBPLibrary_AnchorLeftTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorOffsetTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorOffsetTo(class UUIItem* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorOffsetTo");

	Params::LGUIBPLibrary_AnchorOffsetTo Parms{};

	Parms.Target = Target;
	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorOffsetXTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorOffsetXTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorOffsetXTo");

	Params::LGUIBPLibrary_AnchorOffsetXTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorOffsetYTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorOffsetYTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorOffsetYTo");

	Params::LGUIBPLibrary_AnchorOffsetYTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorRightTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorRightTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorRightTo");

	Params::LGUIBPLibrary_AnchorRightTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.AnchorTopTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::AnchorTopTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "AnchorTopTo");

	Params::LGUIBPLibrary_AnchorTopTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.ColorFrom
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIBaseRenderable*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::ColorFrom(class UUIBaseRenderable* Target, const struct FColor& StartValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ColorFrom");

	Params::LGUIBPLibrary_ColorFrom Parms{};

	Parms.Target = Target;
	Parms.StartValue = std::move(StartValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.ColorTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIBaseRenderable*                Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::ColorTo(class UUIBaseRenderable* Target, const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "ColorTo");

	Params::LGUIBPLibrary_ColorTo Parms{};

	Parms.Target = Target;
	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.DestroyActorWithHierarchy
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WithHierarchy                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::DestroyActorWithHierarchy(class AActor* Target, bool WithHierarchy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DestroyActorWithHierarchy");

	Params::LGUIBPLibrary_DestroyActorWithHierarchy Parms{};

	Parms.Target = Target;
	Parms.WithHierarchy = WithHierarchy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.DuplicateActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::DuplicateActor(class AActor* Target, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DuplicateActor");

	Params::LGUIBPLibrary_DuplicateActor Parms{};

	Parms.Target = Target;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.DuplicateActorWithPreparedData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FLGUIDuplicateDataContainer&     Data                                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::DuplicateActorWithPreparedData(struct FLGUIDuplicateDataContainer& Data, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "DuplicateActorWithPreparedData");

	Params::LGUIBPLibrary_DuplicateActorWithPreparedData Parms{};

	Parms.Data = std::move(Data);
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Data = std::move(Parms.Data);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentInChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSet<class AActor*>&              InExcludeNode                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ULGUIBPLibrary::GetComponentInChildren(class AActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf, const TSet<class AActor*>& InExcludeNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentInChildren");

	Params::LGUIBPLibrary_GetComponentInChildren Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;
	Parms.InExcludeNode = std::move(InExcludeNode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentInParent
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           InStopNode                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ULGUIBPLibrary::GetComponentInParent(class AActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf, class AActor* InStopNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentInParent");

	Params::LGUIBPLibrary_GetComponentInParent Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;
	Parms.InStopNode = InStopNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetComponentsInChildren
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ComponentClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeSelf                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSet<class AActor*>&              InExcludeNode                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UActorComponent*>          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UActorComponent*> ULGUIBPLibrary::GetComponentsInChildren(class AActor* InActor, TSubclassOf<class UActorComponent> ComponentClass, bool IncludeSelf, const TSet<class AActor*>& InExcludeNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetComponentsInChildren");

	Params::LGUIBPLibrary_GetComponentsInChildren Parms{};

	Parms.InActor = InActor;
	Parms.ComponentClass = ComponentClass;
	Parms.IncludeSelf = IncludeSelf;
	Parms.InExcludeNode = std::move(InExcludeNode);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.GetSpriteBorderSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  borderLeft                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  borderRight                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  borderTop                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  borderBottom                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteBorderSize(const struct FLGUISpriteInfo& SpriteInfo, int32* borderLeft, int32* borderRight, int32* borderTop, int32* borderBottom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteBorderSize");

	Params::LGUIBPLibrary_GetSpriteBorderSize Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (borderLeft != nullptr)
		*borderLeft = Parms.borderLeft;

	if (borderRight != nullptr)
		*borderRight = Parms.borderRight;

	if (borderTop != nullptr)
		*borderTop = Parms.borderTop;

	if (borderBottom != nullptr)
		*borderBottom = Parms.borderBottom;
}


// Function LGUI.LGUIBPLibrary.GetSpriteBorderUV
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float*                                  borderUV0X                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  borderUV0Y                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  borderUV3X                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  borderUV3Y                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteBorderUV(const struct FLGUISpriteInfo& SpriteInfo, float* borderUV0X, float* borderUV0Y, float* borderUV3X, float* borderUV3Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteBorderUV");

	Params::LGUIBPLibrary_GetSpriteBorderUV Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (borderUV0X != nullptr)
		*borderUV0X = Parms.borderUV0X;

	if (borderUV0Y != nullptr)
		*borderUV0Y = Parms.borderUV0Y;

	if (borderUV3X != nullptr)
		*borderUV3X = Parms.borderUV3X;

	if (borderUV3Y != nullptr)
		*borderUV3Y = Parms.borderUV3Y;
}


// Function LGUI.LGUIBPLibrary.GetSpriteSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32*                                  Width                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Height                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteSize(const struct FLGUISpriteInfo& SpriteInfo, int32* Width, int32* Height)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteSize");

	Params::LGUIBPLibrary_GetSpriteSize Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Width != nullptr)
		*Width = Parms.Width;

	if (Height != nullptr)
		*Height = Parms.Height;
}


// Function LGUI.LGUIBPLibrary.GetSpriteUV
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUISpriteInfo&           SpriteInfo                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float*                                  uv0X                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  uv0Y                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  uv3X                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  uv3Y                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::GetSpriteUV(const struct FLGUISpriteInfo& SpriteInfo, float* uv0X, float* uv0Y, float* uv3X, float* uv3Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "GetSpriteUV");

	Params::LGUIBPLibrary_GetSpriteUV Parms{};

	Parms.SpriteInfo = std::move(SpriteInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (uv0X != nullptr)
		*uv0X = Parms.uv0X;

	if (uv0Y != nullptr)
		*uv0Y = Parms.uv0Y;

	if (uv3X != nullptr)
		*uv3X = Parms.uv3X;

	if (uv3Y != nullptr)
		*uv3Y = Parms.uv3Y;
}


// Function LGUI.LGUIBPLibrary.HeightTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::HeightTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "HeightTo");

	Params::LGUIBPLibrary_HeightTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.HorizontalAnchoredPositionTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::HorizontalAnchoredPositionTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "HorizontalAnchoredPositionTo");

	Params::LGUIBPLibrary_HorizontalAnchoredPositionTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.K2_LGUICompRef_GetComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUICompRef                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UActorComponent**                 OutResult                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::K2_LGUICompRef_GetComponent(const struct FLGUIComponentReference& InLGUICompRef, class UActorComponent** OutResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "K2_LGUICompRef_GetComponent");

	Params::LGUIBPLibrary_K2_LGUICompRef_GetComponent Parms{};

	Parms.InLGUICompRef = std::move(InLGUICompRef);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = Parms.OutResult;
}


// Function LGUI.LGUIBPLibrary.LGUICompRef_GetActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUIComponentReference                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::LGUICompRef_GetActor(const struct FLGUIComponentReference& InLGUIComponentReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUICompRef_GetActor");

	Params::LGUIBPLibrary_LGUICompRef_GetActor Parms{};

	Parms.InLGUIComponentReference = std::move(InLGUIComponentReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUIComponentReference                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      InComponentType                                        (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UActorComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UActorComponent* ULGUIBPLibrary::LGUICompRef_GetComponent(const struct FLGUIComponentReference& InLGUIComponentReference, TSubclassOf<class UActorComponent> InComponentType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUICompRef_GetComponent");

	Params::LGUIBPLibrary_LGUICompRef_GetComponent Parms{};

	Parms.InLGUIComponentReference = std::move(InLGUIComponentReference);
	Parms.InComponentType = InComponentType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUICompRef_GetComponentClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLGUIComponentReference&   InLGUIComponentReference                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// TSubclassOf<class UActorComponent>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UActorComponent> ULGUIBPLibrary::LGUICompRef_GetComponentClass(const struct FLGUIComponentReference& InLGUIComponentReference)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUICompRef_GetComponentClass");

	Params::LGUIBPLibrary_LGUICompRef_GetComponentClass Parms{};

	Parms.InLGUIComponentReference = std::move(InLGUIComponentReference);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Actor_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Actor&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Actor_Execute(const struct FLGUIEventDelegate_Actor& InEvent, class AActor* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Actor_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Actor_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Actor_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Actor&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class AActor* Value)>    InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Actor_Register(const struct FLGUIEventDelegate_Actor& InEvent, TDelegate<void(class AActor* Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Actor_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Actor_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Actor_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Actor&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Actor_Unregister(const struct FLGUIEventDelegate_Actor& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Actor_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Actor_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Bool_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Bool&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Bool_Execute(const struct FLGUIEventDelegate_Bool& InEvent, bool InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Bool_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Bool_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Bool_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Bool&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool Value)>             InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Bool_Register(const struct FLGUIEventDelegate_Bool& InEvent, TDelegate<void(bool Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Bool_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Bool_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Bool_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Bool&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Bool_Unregister(const struct FLGUIEventDelegate_Bool& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Bool_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Bool_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Class_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Class&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                           InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Class_Execute(const struct FLGUIEventDelegate_Class& InEvent, class UClass* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Class_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Class_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Class_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Class&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UClass* Value)>    InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Class_Register(const struct FLGUIEventDelegate_Class& InEvent, TDelegate<void(class UClass* Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Class_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Class_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Class_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Class&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Class_Unregister(const struct FLGUIEventDelegate_Class& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Class_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Class_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Color_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Color&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FColor&                    InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Color_Execute(const struct FLGUIEventDelegate_Color& InEvent, const struct FColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Color_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Color_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Color_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Color&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FColor& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Color_Register(const struct FLGUIEventDelegate_Color& InEvent, TDelegate<void(const struct FColor& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Color_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Color_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Color_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Color&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Color_Unregister(const struct FLGUIEventDelegate_Color& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Color_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Color_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Double_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Double& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// double                                  InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Double_Execute(const struct FLGUIEventDelegate_Double& InEvent, double InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Double_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Double_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Double_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Double& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(double Value)>           InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Double_Register(const struct FLGUIEventDelegate_Double& InEvent, TDelegate<void(double Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Double_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Double_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Double_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Double& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Double_Unregister(const struct FLGUIEventDelegate_Double& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Double_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Double_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Empty_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Empty&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Empty_Execute(const struct FLGUIEventDelegate_Empty& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Empty_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Empty_Execute Parms{};

	Parms.InEvent = std::move(InEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Empty_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Empty&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void()>                       InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Empty_Register(const struct FLGUIEventDelegate_Empty& InEvent, TDelegate<void()> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Empty_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Empty_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Empty_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Empty&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Empty_Unregister(const struct FLGUIEventDelegate_Empty& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Empty_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Empty_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Float_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Float&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Float_Execute(const struct FLGUIEventDelegate_Float& InEvent, float InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Float_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Float_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Float_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Float&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(float Value)>            InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Float_Register(const struct FLGUIEventDelegate_Float& InEvent, TDelegate<void(float Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Float_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Float_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Float_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Float&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Float_Unregister(const struct FLGUIEventDelegate_Float& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Float_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Float_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int32_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Int32&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Int32_Execute(const struct FLGUIEventDelegate_Int32& InEvent, int32 InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Int32_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Int32_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int32_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Int32&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(int32 Value)>            InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Int32_Register(const struct FLGUIEventDelegate_Int32& InEvent, TDelegate<void(int32 Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Int32_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Int32_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int32_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Int32&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Int32_Unregister(const struct FLGUIEventDelegate_Int32& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Int32_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Int32_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int64_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Int64&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int64                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Int64_Execute(const struct FLGUIEventDelegate_Int64& InEvent, int64 InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Int64_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Int64_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int64_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Int64&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(int64 Value)>            InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Int64_Register(const struct FLGUIEventDelegate_Int64& InEvent, TDelegate<void(int64 Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Int64_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Int64_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Int64_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Int64&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Int64_Unregister(const struct FLGUIEventDelegate_Int64& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Int64_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Int64_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_LinearColor_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_LinearColor&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_LinearColor_Execute(const struct FLGUIEventDelegate_LinearColor& InEvent, const struct FLinearColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_LinearColor_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_LinearColor_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_LinearColor_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_LinearColor&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FLinearColor& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_LinearColor_Register(const struct FLGUIEventDelegate_LinearColor& InEvent, TDelegate<void(const struct FLinearColor& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_LinearColor_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_LinearColor_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_LinearColor_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_LinearColor&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_LinearColor_Unregister(const struct FLGUIEventDelegate_LinearColor& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_LinearColor_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_LinearColor_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Name_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Name&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Name_Execute(const struct FLGUIEventDelegate_Name& InEvent, class FName InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Name_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Name_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Name_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Name&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class FName Value)>      InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Name_Register(const struct FLGUIEventDelegate_Name& InEvent, TDelegate<void(class FName Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Name_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Name_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Name_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Name&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Name_Unregister(const struct FLGUIEventDelegate_Name& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Name_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Name_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Object_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Object& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Object_Execute(const struct FLGUIEventDelegate_Object& InEvent, class UObject* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Object_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Object_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Object_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Object& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UObject* Value)>   InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Object_Register(const struct FLGUIEventDelegate_Object& InEvent, TDelegate<void(class UObject* Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Object_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Object_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Object_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Object& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Object_Unregister(const struct FLGUIEventDelegate_Object& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Object_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Object_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_PointerEvent_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_PointerEvent&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_PointerEvent_Execute(const struct FLGUIEventDelegate_PointerEvent& InEvent, class ULGUIPointerEventData* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_PointerEvent_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_PointerEvent_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_PointerEvent&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class ULGUIPointerEventData* Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_PointerEvent_Register(const struct FLGUIEventDelegate_PointerEvent& InEvent, TDelegate<void(class ULGUIPointerEventData* Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_PointerEvent_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_PointerEvent_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_PointerEvent&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_PointerEvent_Unregister(const struct FLGUIEventDelegate_PointerEvent& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_PointerEvent_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_PointerEvent_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Quaternion_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Quaternion&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FQuat&                     InParameter                                            (Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Quaternion_Execute(const struct FLGUIEventDelegate_Quaternion& InEvent, const struct FQuat& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Quaternion_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Quaternion_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Quaternion_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Quaternion&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FQuat& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Quaternion_Register(const struct FLGUIEventDelegate_Quaternion& InEvent, TDelegate<void(const struct FQuat& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Quaternion_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Quaternion_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Quaternion_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Quaternion&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Quaternion_Unregister(const struct FLGUIEventDelegate_Quaternion& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Quaternion_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Quaternion_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Rotator_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Rotator&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRotator&                  InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Rotator_Execute(const struct FLGUIEventDelegate_Rotator& InEvent, const struct FRotator& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Rotator_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Rotator_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Rotator_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Rotator&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FRotator& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Rotator_Register(const struct FLGUIEventDelegate_Rotator& InEvent, TDelegate<void(const struct FRotator& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Rotator_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Rotator_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Rotator_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Rotator&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Rotator_Unregister(const struct FLGUIEventDelegate_Rotator& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Rotator_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Rotator_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_String_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_String& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    InParameter                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_String_Execute(const struct FLGUIEventDelegate_String& InEvent, const class FString& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_String_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_String_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_String_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_String& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const class FString& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_String_Register(const struct FLGUIEventDelegate_String& InEvent, TDelegate<void(const class FString& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_String_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_String_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_String_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_String& InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_String_Unregister(const struct FLGUIEventDelegate_String& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_String_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_String_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Text_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Text&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      InParameter                                            (Parm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Text_Execute(const struct FLGUIEventDelegate_Text& InEvent, const class FText& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Text_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Text_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Text_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Text&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class FText Value)>      InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Text_Register(const struct FLGUIEventDelegate_Text& InEvent, TDelegate<void(class FText Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Text_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Text_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Text_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Text&   InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Text_Unregister(const struct FLGUIEventDelegate_Text& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Text_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Text_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_UInt8_Execute
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_UInt8&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_UInt8_Execute(const struct FLGUIEventDelegate_UInt8& InEvent, uint8 InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_UInt8_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_UInt8_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_UInt8_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_UInt8&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(uint8 Value)>            InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_UInt8_Register(const struct FLGUIEventDelegate_UInt8& InEvent, TDelegate<void(uint8 Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_UInt8_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_UInt8_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_UInt8_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_UInt8&  InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_UInt8_Unregister(const struct FLGUIEventDelegate_UInt8& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_UInt8_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_UInt8_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector2_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector2&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Vector2_Execute(const struct FLGUIEventDelegate_Vector2& InEvent, const struct FVector2D& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector2_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector2_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector2_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector2&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector2D& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Vector2_Register(const struct FLGUIEventDelegate_Vector2& InEvent, TDelegate<void(const struct FVector2D& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector2_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector2_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector2_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector2&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Vector2_Unregister(const struct FLGUIEventDelegate_Vector2& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector2_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector2_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector3_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector3&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Vector3_Execute(const struct FLGUIEventDelegate_Vector3& InEvent, const struct FVector& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector3_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector3_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector3_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector3&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Vector3_Register(const struct FLGUIEventDelegate_Vector3& InEvent, TDelegate<void(const struct FVector& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector3_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector3_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector3_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector3&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Vector3_Unregister(const struct FLGUIEventDelegate_Vector3& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector3_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector3_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector4_Execute
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector4&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector4&                  InParameter                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Vector4_Execute(const struct FLGUIEventDelegate_Vector4& InEvent, const struct FVector4& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector4_Execute");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector4_Execute Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector4_Register
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector4&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FVector4& Value)>InDelegate                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIBPLibrary::LGUIEventDelegate_Vector4_Register(const struct FLGUIEventDelegate_Vector4& InEvent, TDelegate<void(const struct FVector4& Value)> InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector4_Register");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector4_Register Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegate_Vector4_Unregister
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate_Vector4&InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegate_Vector4_Unregister(const struct FLGUIEventDelegate_Vector4& InEvent, const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegate_Vector4_Unregister");

	Params::LGUIBPLibrary_LGUIEventDelegate_Vector4_Unregister Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class AActor*                           InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteActor(const struct FLGUIEventDelegate& InEvent, class AActor* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteActor");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteActor Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const bool&                             InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteBool(const struct FLGUIEventDelegate& InEvent, const bool& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteBool");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteBool Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UClass*                           InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteClass(const struct FLGUIEventDelegate& InEvent, class UClass* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteClass");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteClass Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FColor&                    InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteColor(const struct FLGUIEventDelegate& InEvent, const struct FColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteColor");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteColor Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteEmpty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteEmpty(const struct FLGUIEventDelegate& InEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteEmpty");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteEmpty Parms{};

	Parms.InEvent = std::move(InEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const float&                            InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteFloat(const struct FLGUIEventDelegate& InEvent, const float& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteFloat");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteFloat Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteInt32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const int32&                            InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteInt32(const struct FLGUIEventDelegate& InEvent, const int32& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteInt32");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteInt32 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteLinearColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FLinearColor&              InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteLinearColor(const struct FLGUIEventDelegate& InEvent, const struct FLinearColor& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteLinearColor");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteLinearColor Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName&                      InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteName(const struct FLGUIEventDelegate& InEvent, const class FName& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteName");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteName Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteObject(const struct FLGUIEventDelegate& InEvent, class UObject* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteObject");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteObject Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecutePointerEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            InParameter                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecutePointerEvent(const struct FLGUIEventDelegate& InEvent, class ULGUIPointerEventData* InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecutePointerEvent");

	Params::LGUIBPLibrary_LGUIEventDelegateExecutePointerEvent Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteQuaternion
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FQuat&                     InParameter                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteQuaternion(const struct FLGUIEventDelegate& InEvent, const struct FQuat& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteQuaternion");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteQuaternion Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FRotator&                  InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteRotator(const struct FLGUIEventDelegate& InEvent, const struct FRotator& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteRotator");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteRotator Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FString&                    InParameter                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteString(const struct FLGUIEventDelegate& InEvent, const class FString& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteString");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteString Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      InParameter                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteText(const struct FLGUIEventDelegate& InEvent, const class FText& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteText");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteText Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteUInt8
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const uint8&                            InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteUInt8(const struct FLGUIEventDelegate& InEvent, const uint8& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteUInt8");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteUInt8 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = InParameter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteVector2
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteVector2(const struct FLGUIEventDelegate& InEvent, const struct FVector2D& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteVector2");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteVector2 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteVector3
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector&                   InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteVector3(const struct FLGUIEventDelegate& InEvent, const struct FVector& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteVector3");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteVector3 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIEventDelegateExecuteVector4
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLGUIEventDelegate&        InEvent                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FVector4&                  InParameter                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIEventDelegateExecuteVector4(const struct FLGUIEventDelegate& InEvent, const struct FVector4& InParameter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIEventDelegateExecuteVector4");

	Params::LGUIBPLibrary_LGUIEventDelegateExecuteVector4 Parms{};

	Parms.InEvent = std::move(InEvent);
	Parms.InParameter = std::move(InParameter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pressOrRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteControllerInputAction(const struct FKey& InputKey, bool pressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteControllerInputAction");

	Params::LGUIBPLibrary_LGUIExecuteControllerInputAction Parms{};

	Parms.InputKey = std::move(InputKey);
	Parms.pressOrRelease = pressOrRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteControllerInputAxis
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteControllerInputAxis(const struct FKey& InputKey, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteControllerInputAxis");

	Params::LGUIBPLibrary_LGUIExecuteControllerInputAxis Parms{};

	Parms.InputKey = std::move(InputKey);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pressOrRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteInputAction(const struct FKey& InputKey, bool pressOrRelease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteInputAction");

	Params::LGUIBPLibrary_LGUIExecuteInputAction Parms{};

	Parms.InputKey = std::move(InputKey);
	Parms.pressOrRelease = pressOrRelease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LGUIExecuteInputAxis
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      InputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::LGUIExecuteInputAxis(const struct FKey& InputKey, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LGUIExecuteInputAxis");

	Params::LGUIBPLibrary_LGUIExecuteInputAxis Parms{};

	Parms.InputKey = std::move(InputKey);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIBPLibrary.LoadPrefab
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPrefab*                      InPrefab                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class AActor* LoadedRootActor)>&InCallbackBeforeAwake                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SetRelativeTransformToIdentity                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::LoadPrefab(class UObject* WorldContextObject, class ULGUIPrefab* InPrefab, class USceneComponent* InParent, const TDelegate<void(class AActor* LoadedRootActor)>& InCallbackBeforeAwake, bool SetRelativeTransformToIdentity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LoadPrefab");

	Params::LGUIBPLibrary_LoadPrefab Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InPrefab = InPrefab;
	Parms.InParent = InParent;
	Parms.InCallbackBeforeAwake = InCallbackBeforeAwake;
	Parms.SetRelativeTransformToIdentity = SetRelativeTransformToIdentity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LoadPrefabWithReplacement
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPrefab*                      InPrefab                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class UObject*, class UObject*>&InReplaceAssetMap                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class UClass*, class UClass*>&InReplaceClassMap                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(class AActor* LoadedRootActor)>&InCallbackBeforeAwake                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::LoadPrefabWithReplacement(class UObject* WorldContextObject, class ULGUIPrefab* InPrefab, class USceneComponent* InParent, const TMap<class UObject*, class UObject*>& InReplaceAssetMap, const TMap<class UClass*, class UClass*>& InReplaceClassMap, const TDelegate<void(class AActor* LoadedRootActor)>& InCallbackBeforeAwake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LoadPrefabWithReplacement");

	Params::LGUIBPLibrary_LoadPrefabWithReplacement Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InPrefab = InPrefab;
	Parms.InParent = InParent;
	Parms.InReplaceAssetMap = std::move(InReplaceAssetMap);
	Parms.InReplaceClassMap = std::move(InReplaceClassMap);
	Parms.InCallbackBeforeAwake = InCallbackBeforeAwake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.LoadPrefabWithTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPrefab*                      InPrefab                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class AActor* LoadedRootActor)>&InCallbackBeforeAwake                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIBPLibrary::LoadPrefabWithTransform(class UObject* WorldContextObject, class ULGUIPrefab* InPrefab, class USceneComponent* InParent, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, const TDelegate<void(class AActor* LoadedRootActor)>& InCallbackBeforeAwake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "LoadPrefabWithTransform");

	Params::LGUIBPLibrary_LoadPrefabWithTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InPrefab = InPrefab;
	Parms.InParent = InParent;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.InCallbackBeforeAwake = InCallbackBeforeAwake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.PivotTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::PivotTo(class UUIItem* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "PivotTo");

	Params::LGUIBPLibrary_PivotTo Parms{};

	Parms.Target = Target;
	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.PrepareDuplicateData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDuplicateDataContainer*     Data                                                   (Parm, OutParm, NativeAccessSpecifierPublic)

void ULGUIBPLibrary::PrepareDuplicateData(class AActor* Target, struct FLGUIDuplicateDataContainer* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "PrepareDuplicateData");

	Params::LGUIBPLibrary_PrepareDuplicateData Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function LGUI.LGUIBPLibrary.StretchBottomTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchBottomTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchBottomTo");

	Params::LGUIBPLibrary_StretchBottomTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchLeftTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchLeftTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchLeftTo");

	Params::LGUIBPLibrary_StretchLeftTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchRightTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchRightTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchRightTo");

	Params::LGUIBPLibrary_StretchRightTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.StretchTopTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::StretchTopTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "StretchTopTo");

	Params::LGUIBPLibrary_StretchTopTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.UILocalPositionTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::UILocalPositionTo(class UUIItem* Target, const struct FVector& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "UILocalPositionTo");

	Params::LGUIBPLibrary_UILocalPositionTo Parms{};

	Parms.Target = Target;
	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.VerticalAnchoredPositionTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::VerticalAnchoredPositionTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "VerticalAnchoredPositionTo");

	Params::LGUIBPLibrary_VerticalAnchoredPositionTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIBPLibrary.WidthTo
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIBPLibrary::WidthTo(class UUIItem* Target, float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIBPLibrary", "WidthTo");

	Params::LGUIBPLibrary_WidthTo Parms{};

	Parms.Target = Target;
	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.RequestUpdateForRenderTarget
// (Final, Native, Public, BlueprintCallable)

void ULGUICanvas::RequestUpdateForRenderTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "RequestUpdateForRenderTarget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetBlendDepth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetBlendDepth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetBlendDepth");

	Params::LGUICanvas_SetBlendDepth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetClipTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       newTexture                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetClipTexture(class UTexture2D* newTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetClipTexture");

	Params::LGUICanvas_SetClipTexture Parms{};

	Parms.newTexture = newTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetClipType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasClipType                     newClipType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetClipType(ELGUICanvasClipType newClipType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetClipType");

	Params::LGUICanvas_SetClipType Parms{};

	Parms.newClipType = newClipType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetCustomClip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICanvasCustomClip*            Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetCustomClip(class ULGUICanvasCustomClip* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetCustomClip");

	Params::LGUICanvas_SetCustomClip Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetDefaultMaterials
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UMaterialInterface*>&InMaterialArray                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUICanvas::SetDefaultMaterials(const TArray<class UMaterialInterface*>& InMaterialArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetDefaultMaterials");

	Params::LGUICanvas_SetDefaultMaterials Parms{};

	Parms.InMaterialArray = std::move(InMaterialArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetDefaultMeshType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class ULGUIMeshComponent>   InValue                                                (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetDefaultMeshType(TSubclassOf<class ULGUIMeshComponent> InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetDefaultMeshType");

	Params::LGUICanvas_SetDefaultMeshType Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetDepthFade
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetDepthFade(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetDepthFade");

	Params::LGUICanvas_SetDepthFade Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetDynamicPixelsPerUnit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetDynamicPixelsPerUnit(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetDynamicPixelsPerUnit");

	Params::LGUICanvas_SetDynamicPixelsPerUnit Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetEnableDepthTest
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetEnableDepthTest(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetEnableDepthTest");

	Params::LGUICanvas_SetEnableDepthTest Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetInheriRectClip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetInheriRectClip(bool newBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetInheriRectClip");

	Params::LGUICanvas_SetInheriRectClip Parms{};

	Parms.newBool = newBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOverrideFovAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOverrideFovAngle(bool InOverride, float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOverrideFovAngle");

	Params::LGUICanvas_SetOverrideFovAngle Parms{};

	Parms.InOverride = InOverride;
	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOverrideProjectionMatrix
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    InOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FMatrix&                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOverrideProjectionMatrix(bool InOverride, const struct FMatrix& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOverrideProjectionMatrix");

	Params::LGUICanvas_SetOverrideProjectionMatrix Parms{};

	Parms.InOverride = InOverride;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOverrideSorting
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOverrideSorting(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOverrideSorting");

	Params::LGUICanvas_SetOverrideSorting Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOverrideViewLoation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    InOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOverrideViewLoation(bool InOverride, const struct FVector& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOverrideViewLoation");

	Params::LGUICanvas_SetOverrideViewLoation Parms{};

	Parms.InOverride = InOverride;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetOverrideViewRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    InOverride                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUICanvas::SetOverrideViewRotation(bool InOverride, const struct FRotator& InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetOverrideViewRotation");

	Params::LGUICanvas_SetOverrideViewRotation Parms{};

	Parms.InOverride = InOverride;
	Parms.InValue = std::move(InValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetPixelPerfect
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetPixelPerfect(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetPixelPerfect");

	Params::LGUICanvas_SetPixelPerfect Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetProjectionParameters
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECameraProjectionMode                   InProjectionType                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFovAngle                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InNearClipPlane                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InFarClipPlane                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetProjectionParameters(ECameraProjectionMode InProjectionType, float InFovAngle, float InNearClipPlane, float InFarClipPlane)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetProjectionParameters");

	Params::LGUICanvas_SetProjectionParameters Parms{};

	Parms.InProjectionType = InProjectionType;
	Parms.InFovAngle = InFovAngle;
	Parms.InNearClipPlane = InNearClipPlane;
	Parms.InFarClipPlane = InFarClipPlane;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRectClipFeather
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newFeather                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRectClipFeather(const struct FVector2D& newFeather)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRectClipFeather");

	Params::LGUICanvas_SetRectClipFeather Parms{};

	Parms.newFeather = std::move(newFeather);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRectClipOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   newOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRectClipOffset(const struct FMargin& newOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRectClipOffset");

	Params::LGUICanvas_SetRectClipOffset Parms{};

	Parms.newOffset = std::move(newOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIRenderMode                         Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderMode(ELGUIRenderMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderMode");

	Params::LGUICanvas_SetRenderMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTextureRenderTarget2D*           Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderTarget(class UTextureRenderTarget2D* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderTarget");

	Params::LGUICanvas_SetRenderTarget Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderTargetResolutionScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderTargetResolutionScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderTargetResolutionScale");

	Params::LGUICanvas_SetRenderTargetResolutionScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderTargetSizeMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasRenderTargetSizeMode         Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderTargetSizeMode(ELGUICanvasRenderTargetSizeMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderTargetSizeMode");

	Params::LGUICanvas_SetRenderTargetSizeMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetRenderTargetUpdateMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasRenderTargetUpdateMode       Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetRenderTargetUpdateMode(ELGUICanvasRenderTargetUpdateMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetRenderTargetUpdateMode");

	Params::LGUICanvas_SetRenderTargetUpdateMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetSortOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    propagateToChildrenCanvas                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetSortOrder(int32 NewValue, bool propagateToChildrenCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetSortOrder");

	Params::LGUICanvas_SetSortOrder Parms{};

	Parms.NewValue = NewValue;
	Parms.propagateToChildrenCanvas = propagateToChildrenCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetSortOrderToHighestOfHierarchy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    propagateToChildrenCanvas                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetSortOrderToHighestOfHierarchy(bool propagateToChildrenCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetSortOrderToHighestOfHierarchy");

	Params::LGUICanvas_SetSortOrderToHighestOfHierarchy Parms{};

	Parms.propagateToChildrenCanvas = propagateToChildrenCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.SetSortOrderToLowestOfHierarchy
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    propagateToChildrenCanvas                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvas::SetSortOrderToLowestOfHierarchy(bool propagateToChildrenCanvas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "SetSortOrderToLowestOfHierarchy");

	Params::LGUICanvas_SetSortOrderToLowestOfHierarchy Parms{};

	Parms.propagateToChildrenCanvas = propagateToChildrenCanvas;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvas.GetActualBlendDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetActualBlendDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualBlendDepth");

	Params::LGUICanvas_GetActualBlendDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualClipType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasClipType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasClipType ULGUICanvas::GetActualClipType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualClipType");

	Params::LGUICanvas_GetActualClipType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualCustomClip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvasCustomClip*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvasCustomClip* ULGUICanvas::GetActualCustomClip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualCustomClip");

	Params::LGUICanvas_GetActualCustomClip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualDepthFade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUICanvas::GetActualDepthFade() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualDepthFade");

	Params::LGUICanvas_GetActualDepthFade Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualDynamicPixelsPerUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetActualDynamicPixelsPerUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualDynamicPixelsPerUnit");

	Params::LGUICanvas_GetActualDynamicPixelsPerUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualPixelPerfect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetActualPixelPerfect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualPixelPerfect");

	Params::LGUICanvas_GetActualPixelPerfect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIRenderMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIRenderMode ULGUICanvas::GetActualRenderMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderMode");

	Params::LGUICanvas_GetActualRenderMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULGUICanvas::GetActualRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderTarget");

	Params::LGUICanvas_GetActualRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderTargetResolutionScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetActualRenderTargetResolutionScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderTargetResolutionScale");

	Params::LGUICanvas_GetActualRenderTargetResolutionScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderTargetSizeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasRenderTargetSizeMode         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasRenderTargetSizeMode ULGUICanvas::GetActualRenderTargetSizeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderTargetSizeMode");

	Params::LGUICanvas_GetActualRenderTargetSizeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualRenderTargetUpdateMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasRenderTargetUpdateMode       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasRenderTargetUpdateMode ULGUICanvas::GetActualRenderTargetUpdateMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualRenderTargetUpdateMode");

	Params::LGUICanvas_GetActualRenderTargetUpdateMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetActualSortOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUICanvas::GetActualSortOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetActualSortOrder");

	Params::LGUICanvas_GetActualSortOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetBlendDepth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetBlendDepth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetBlendDepth");

	Params::LGUICanvas_GetBlendDepth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipFeather
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvas::GetClipFeather() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipFeather");

	Params::LGUICanvas_GetClipFeather Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUICanvas::GetClipTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipTexture");

	Params::LGUICanvas_GetClipTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetClipType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasClipType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasClipType ULGUICanvas::GetClipType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetClipType");

	Params::LGUICanvas_GetClipType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetCustomClip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvasCustomClip*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvasCustomClip* ULGUICanvas::GetCustomClip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetCustomClip");

	Params::LGUICanvas_GetCustomClip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetDefaultMaterials
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class UMaterialInterface*>       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class UMaterialInterface*> ULGUICanvas::GetDefaultMaterials() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetDefaultMaterials");

	Params::LGUICanvas_GetDefaultMaterials Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetDefaultMeshType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class ULGUIMeshComponent>   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class ULGUIMeshComponent> ULGUICanvas::GetDefaultMeshType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetDefaultMeshType");

	Params::LGUICanvas_GetDefaultMeshType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetDepthFade
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUICanvas::GetDepthFade() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetDepthFade");

	Params::LGUICanvas_GetDepthFade Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetDynamicPixelsPerUnit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetDynamicPixelsPerUnit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetDynamicPixelsPerUnit");

	Params::LGUICanvas_GetDynamicPixelsPerUnit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetEnableDepthTest
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetEnableDepthTest() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetEnableDepthTest");

	Params::LGUICanvas_GetEnableDepthTest Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetInheritRectClip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetInheritRectClip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetInheritRectClip");

	Params::LGUICanvas_GetInheritRectClip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetOverrideSorting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetOverrideSorting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetOverrideSorting");

	Params::LGUICanvas_GetOverrideSorting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetPixelPerfect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetPixelPerfect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetPixelPerfect");

	Params::LGUICanvas_GetPixelPerfect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIRenderMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIRenderMode ULGUICanvas::GetRenderMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderMode");

	Params::LGUICanvas_GetRenderMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULGUICanvas::GetRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderTarget");

	Params::LGUICanvas_GetRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderTargetResolutionScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvas::GetRenderTargetResolutionScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderTargetResolutionScale");

	Params::LGUICanvas_GetRenderTargetResolutionScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderTargetSizeMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasRenderTargetSizeMode         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasRenderTargetSizeMode ULGUICanvas::GetRenderTargetSizeMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderTargetSizeMode");

	Params::LGUICanvas_GetRenderTargetSizeMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRenderTargetUpdateMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasRenderTargetUpdateMode       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasRenderTargetUpdateMode ULGUICanvas::GetRenderTargetUpdateMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRenderTargetUpdateMode");

	Params::LGUICanvas_GetRenderTargetUpdateMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireNormal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireNormal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireNormal");

	Params::LGUICanvas_GetRequireNormal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireTangent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireTangent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireTangent");

	Params::LGUICanvas_GetRequireTangent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV1
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV1() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV1");

	Params::LGUICanvas_GetRequireUV1 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV2
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV2() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV2");

	Params::LGUICanvas_GetRequireUV2 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRequireUV3
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvas::GetRequireUV3() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRequireUV3");

	Params::LGUICanvas_GetRequireUV3 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetRootCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* ULGUICanvas::GetRootCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetRootCanvas");

	Params::LGUICanvas_GetRootCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetSortOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUICanvas::GetSortOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetSortOrder");

	Params::LGUICanvas_GetSortOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvas.GetUIItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUICanvas::GetUIItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvas", "GetUIItem");

	Params::LGUICanvas_GetUIItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasCustomClip.ReceiveApplyMaterialParameter
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMaterialInstanceDynamic*         InMaterial                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUICanvas*                      InCanvas                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          InUIItem                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasCustomClip::ReceiveApplyMaterialParameter(class UMaterialInstanceDynamic* InMaterial, class ULGUICanvas* InCanvas, class UUIItem* InUIItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip", "ReceiveApplyMaterialParameter");

	Params::LGUICanvasCustomClip_ReceiveApplyMaterialParameter Parms{};

	Parms.InMaterial = InMaterial;
	Parms.InCanvas = InCanvas;
	Parms.InUIItem = InUIItem;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUICanvasCustomClip.ReceiveCheckPointVisible
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector&                   InWorldPoint                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUICanvas*                      InCanvas                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          InUIItem                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvasCustomClip::ReceiveCheckPointVisible(const struct FVector& InWorldPoint, class ULGUICanvas* InCanvas, class UUIItem* InUIItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip", "ReceiveCheckPointVisible");

	Params::LGUICanvasCustomClip_ReceiveCheckPointVisible Parms{};

	Parms.InWorldPoint = std::move(InWorldPoint);
	Parms.InCanvas = InCanvas;
	Parms.InUIItem = InUIItem;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasCustomClip.ReceiveInit
// (Event, Protected, BlueprintEvent)

void ULGUICanvasCustomClip::ReceiveInit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip", "ReceiveInit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUICanvasCustomClip.ReceiveMaterialContainsClipParameter
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               InMaterial                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvasCustomClip::ReceiveMaterialContainsClipParameter(class UMaterialInterface* InMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip", "ReceiveMaterialContainsClipParameter");

	Params::LGUICanvasCustomClip_ReceiveMaterialContainsClipParameter Parms{};

	Parms.InMaterial = InMaterial;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithWave.SetFrequency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PropertyWithWave::SetFrequency(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithWave", "SetFrequency");

	Params::UIEffectTextAnimation_PropertyWithWave_SetFrequency Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PropertyWithWave.GetFrequency
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_PropertyWithWave::GetFrequency() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PropertyWithWave", "GetFrequency");

	Params::UIEffectTextAnimation_PropertyWithWave_GetFrequency Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.SetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionWaveProperty::SetPosition(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionWaveProperty", "SetPosition");

	Params::UIEffectTextAnimation_PositionWaveProperty_SetPosition Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionWaveProperty.GetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionWaveProperty::GetPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionWaveProperty", "GetPosition");

	Params::UIEffectTextAnimation_PositionWaveProperty_GetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasCustomClip_Circle.SetSizeMultiply
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasCustomClip_Circle::SetSizeMultiply(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip_Circle", "SetSizeMultiply");

	Params::LGUICanvasCustomClip_Circle_SetSizeMultiply Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasCustomClip_Circle.GetSizeMultiply
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasCustomClip_Circle::GetSizeMultiply() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip_Circle", "GetSizeMultiply");

	Params::LGUICanvasCustomClip_Circle_GetSizeMultiply Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasCustomClip_RoundedRect.SetCornerRadius
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4f&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasCustomClip_RoundedRect::SetCornerRadius(const struct FVector4f& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip_RoundedRect", "SetCornerRadius");

	Params::LGUICanvasCustomClip_RoundedRect_SetCornerRadius Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasCustomClip_RoundedRect.SetCornerRadiusUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasCustomClip_RoundedRect_UnitModeValue                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasCustomClip_RoundedRect::SetCornerRadiusUnitMode(ELGUICanvasCustomClip_RoundedRect_UnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip_RoundedRect", "SetCornerRadiusUnitMode");

	Params::LGUICanvasCustomClip_RoundedRect_SetCornerRadiusUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasCustomClip_RoundedRect.GetCornerRadius
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector4f                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4f ULGUICanvasCustomClip_RoundedRect::GetCornerRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip_RoundedRect", "GetCornerRadius");

	Params::LGUICanvasCustomClip_RoundedRect_GetCornerRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasCustomClip_RoundedRect.GetCornerRadiusUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUICanvasCustomClip_RoundedRect_UnitModeReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasCustomClip_RoundedRect_UnitMode ULGUICanvasCustomClip_RoundedRect::GetCornerRadiusUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasCustomClip_RoundedRect", "GetCornerRadiusUnitMode");

	Params::LGUICanvasCustomClip_RoundedRect_GetCornerRadiusUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleProperty.SetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleProperty::SetScale(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleProperty", "SetScale");

	Params::UIEffectTextAnimation_ScaleProperty_SetScale Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleProperty.GetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleProperty::GetScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleProperty", "GetScale");

	Params::UIEffectTextAnimation_ScaleProperty_GetScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScalerCustomScale.ReceiveCalculateSizeAndScale
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class ULGUICanvasScaler*                InCanvasScaler                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FIntPoint&                 InViewportSize                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint*                       OutLGUICanvasSize                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  OutScale                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScalerCustomScale::ReceiveCalculateSizeAndScale(class ULGUICanvasScaler* InCanvasScaler, const struct FIntPoint& InViewportSize, struct FIntPoint* OutLGUICanvasSize, float* OutScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScalerCustomScale", "ReceiveCalculateSizeAndScale");

	Params::LGUICanvasScalerCustomScale_ReceiveCalculateSizeAndScale Parms{};

	Parms.InCanvasScaler = InCanvasScaler;
	Parms.InViewportSize = std::move(InViewportSize);

	UObject::ProcessEvent(Func, &Parms);

	if (OutLGUICanvasSize != nullptr)
		*OutLGUICanvasSize = std::move(Parms.OutLGUICanvasSize);

	if (OutScale != nullptr)
		*OutScale = Parms.OutScale;
}


// Function LGUI.LGUICanvasScalerCustomScale.ReceiveInit
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUICanvasScaler*                InCanvasScaler                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScalerCustomScale::ReceiveInit(class ULGUICanvasScaler* InCanvasScaler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScalerCustomScale", "ReceiveInit");

	Params::LGUICanvasScalerCustomScale_ReceiveInit Parms{};

	Parms.InCanvasScaler = InCanvasScaler;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleBehaviour.InstantiateActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           OriginObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUILifeCycleBehaviour::InstantiateActor(class AActor* OriginObject, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "InstantiateActor");

	Params::LGUILifeCycleBehaviour_InstantiateActor Parms{};

	Parms.OriginObject = OriginObject;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleBehaviour.InstantiatePrefab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIPrefab*                      OriginObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUILifeCycleBehaviour::InstantiatePrefab(class ULGUIPrefab* OriginObject, class USceneComponent* Parent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "InstantiatePrefab");

	Params::LGUILifeCycleBehaviour_InstantiatePrefab Parms{};

	Parms.OriginObject = OriginObject;
	Parms.Parent = Parent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleBehaviour.InstantiatePrefabWithTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class ULGUIPrefab*                      OriginObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  Parent                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUILifeCycleBehaviour::InstantiatePrefabWithTransform(class ULGUIPrefab* OriginObject, class USceneComponent* Parent, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "InstantiatePrefabWithTransform");

	Params::LGUILifeCycleBehaviour_InstantiatePrefabWithTransform Parms{};

	Parms.OriginObject = OriginObject;
	Parms.Parent = Parent;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleBehaviour.ReceiveAwake
// (Event, Protected, BlueprintEvent)

void ULGUILifeCycleBehaviour::ReceiveAwake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "ReceiveAwake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUILifeCycleBehaviour.ReceiveOnDestroy
// (Event, Protected, BlueprintEvent)

void ULGUILifeCycleBehaviour::ReceiveOnDestroy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "ReceiveOnDestroy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUILifeCycleBehaviour.ReceiveOnDisable
// (Event, Protected, BlueprintEvent)

void ULGUILifeCycleBehaviour::ReceiveOnDisable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "ReceiveOnDisable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUILifeCycleBehaviour.ReceiveOnEnable
// (Event, Protected, BlueprintEvent)

void ULGUILifeCycleBehaviour::ReceiveOnEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "ReceiveOnEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUILifeCycleBehaviour.ReceiveStart
// (Event, Protected, BlueprintEvent)

void ULGUILifeCycleBehaviour::ReceiveStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "ReceiveStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUILifeCycleBehaviour.ReceiveUpdate
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleBehaviour::ReceiveUpdate(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "ReceiveUpdate");

	Params::LGUILifeCycleBehaviour_ReceiveUpdate Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleBehaviour.SetCanExecuteUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleBehaviour::SetCanExecuteUpdate(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "SetCanExecuteUpdate");

	Params::LGUILifeCycleBehaviour_SetCanExecuteUpdate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUILifeCycleBehaviour.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleBehaviour::SetEnable(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "SetEnable");

	Params::LGUILifeCycleBehaviour_SetEnable Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUILifeCycleBehaviour.GetEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUILifeCycleBehaviour::GetEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "GetEnable");

	Params::LGUILifeCycleBehaviour_GetEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleBehaviour.GetIsActiveAndEnable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUILifeCycleBehaviour::GetIsActiveAndEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "GetIsActiveAndEnable");

	Params::LGUILifeCycleBehaviour_GetIsActiveAndEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleBehaviour.GetRootSceneComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUILifeCycleBehaviour::GetRootSceneComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleBehaviour", "GetRootSceneComponent");

	Params::LGUILifeCycleBehaviour_GetRootSceneComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_Selector.SetOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_Selector::SetOffset(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_Selector", "SetOffset");

	Params::UIEffectTextAnimation_Selector_SetOffset Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_Selector.GetOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_Selector::GetOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_Selector", "GetOffset");

	Params::UIEffectTextAnimation_Selector_GetOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.SetEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RandomSelector::SetEnd(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "SetEnd");

	Params::UIEffectTextAnimation_RandomSelector_SetEnd Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RandomSelector::SetSeed(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "SetSeed");

	Params::UIEffectTextAnimation_RandomSelector_SetSeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.SetStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RandomSelector::SetStart(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "SetStart");

	Params::UIEffectTextAnimation_RandomSelector_SetStart Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.GetEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RandomSelector::GetEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "GetEnd");

	Params::UIEffectTextAnimation_RandomSelector_GetEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_RandomSelector::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "GetSeed");

	Params::UIEffectTextAnimation_RandomSelector_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RandomSelector.GetStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RandomSelector::GetStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RandomSelector", "GetStart");

	Params::UIEffectTextAnimation_RandomSelector_GetStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.ForceUpdate
// (Final, Native, Public, BlueprintCallable)

void ULGUICanvasScaler::ForceUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "ForceUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.GetMatchFromWidthToHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetMatchFromWidthToHeight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetMatchFromWidthToHeight");

	Params::LGUICanvasScaler_GetMatchFromWidthToHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetReferenceResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvasScaler::GetReferenceResolution()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetReferenceResolution");

	Params::LGUICanvasScaler_GetReferenceResolution Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetScreenMatchMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasScreenMatchMode              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasScreenMatchMode ULGUICanvasScaler::GetScreenMatchMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetScreenMatchMode");

	Params::LGUICanvasScaler_GetScreenMatchMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetUIScaleMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasScaleMode                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUICanvasScaleMode ULGUICanvasScaler::GetUIScaleMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetUIScaleMode");

	Params::LGUICanvasScaler_GetUIScaleMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.SetCustomScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICanvasScalerCustomScale*     Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetCustomScale(class ULGUICanvasScalerCustomScale* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetCustomScale");

	Params::LGUICanvasScaler_SetCustomScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetFarClipPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetFarClipPlane(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetFarClipPlane");

	Params::LGUICanvasScaler_SetFarClipPlane Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetFovAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetFovAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetFovAngle");

	Params::LGUICanvasScaler_SetFovAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetMatchFromWidthToHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetMatchFromWidthToHeight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetMatchFromWidthToHeight");

	Params::LGUICanvasScaler_SetMatchFromWidthToHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetNearClipPlane
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetNearClipPlane(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetNearClipPlane");

	Params::LGUICanvasScaler_SetNearClipPlane Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetProjectionType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ECameraProjectionMode                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetProjectionType(ECameraProjectionMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetProjectionType");

	Params::LGUICanvasScaler_SetProjectionType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetReferenceResolution
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetReferenceResolution(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetReferenceResolution");

	Params::LGUICanvasScaler_SetReferenceResolution Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetScreenMatchMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasScreenMatchMode              Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetScreenMatchMode(ELGUICanvasScreenMatchMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetScreenMatchMode");

	Params::LGUICanvasScaler_SetScreenMatchMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.SetUIScaleMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUICanvasScaleMode                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICanvasScaler::SetUIScaleMode(ELGUICanvasScaleMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "SetUIScaleMode");

	Params::LGUICanvasScaler_SetUIScaleMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUICanvasScaler.ConvertPositionFromLGUICanvasToViewport
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvasScaler::ConvertPositionFromLGUICanvasToViewport(const struct FVector2D& position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "ConvertPositionFromLGUICanvasToViewport");

	Params::LGUICanvasScaler_ConvertPositionFromLGUICanvasToViewport Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.ConvertPositionFromViewportToLGUICanvas
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUICanvasScaler::ConvertPositionFromViewportToLGUICanvas(const struct FVector2D& position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "ConvertPositionFromViewportToLGUICanvas");

	Params::LGUICanvasScaler_ConvertPositionFromViewportToLGUICanvas Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetCustomScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvasScalerCustomScale*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvasScalerCustomScale* ULGUICanvasScaler::GetCustomScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetCustomScale");

	Params::LGUICanvasScaler_GetCustomScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetFarClipPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetFarClipPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetFarClipPlane");

	Params::LGUICanvasScaler_GetFarClipPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetFOVAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetFOVAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetFOVAngle");

	Params::LGUICanvasScaler_GetFOVAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetNearClipPlane
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUICanvasScaler::GetNearClipPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetNearClipPlane");

	Params::LGUICanvasScaler_GetNearClipPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.GetProjectionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ECameraProjectionMode                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECameraProjectionMode ULGUICanvasScaler::GetProjectionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "GetProjectionType");

	Params::LGUICanvasScaler_GetProjectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.Project3DToScreen
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector&                   Position3D                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutPosition2D                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvasScaler::Project3DToScreen(const struct FVector& Position3D, struct FVector2D* OutPosition2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "Project3DToScreen");

	Params::LGUICanvasScaler_Project3DToScreen Parms{};

	Parms.Position3D = std::move(Position3D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition2D != nullptr)
		*OutPosition2D = std::move(Parms.OutPosition2D);

	return Parms.ReturnValue;
}


// Function LGUI.LGUICanvasScaler.ProjectWorldToScreen
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerController*                Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Position3D                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutPosition2D                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICanvasScaler::ProjectWorldToScreen(class APlayerController* Player, const struct FVector& Position3D, struct FVector2D* OutPosition2D) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICanvasScaler", "ProjectWorldToScreen");

	Params::LGUICanvasScaler_ProjectWorldToScreen Parms{};

	Parms.Player = Player;
	Parms.Position3D = std::move(Position3D);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition2D != nullptr)
		*OutPosition2D = std::move(Parms.OutPosition2D);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIGeometryHelper.CalculatePivotOffset
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   InWidth                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InHeight                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 InPivot                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUIGeometryHelper::CalculatePivotOffset(float InWidth, float InHeight, const struct FVector2D& InPivot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIGeometryHelper", "CalculatePivotOffset");

	Params::LGUIGeometryHelper_CalculatePivotOffset Parms{};

	Parms.InWidth = InWidth;
	Parms.InHeight = InHeight;
	Parms.InPivot = std::move(InPivot);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIGeometryHelper.AddTriangle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index1                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   index2                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::AddTriangle(int32 Index0, int32 index1, int32 index2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "AddTriangle");

	Params::LGUIGeometryHelper_AddTriangle Parms{};

	Parms.Index0 = Index0;
	Parms.index1 = index1;
	Parms.index2 = index2;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryHelper.AddVertexFull
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV0                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV1                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV2                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV3                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Normal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Tangent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::AddVertexFull(const struct FVector& position, const struct FColor& Color, const struct FVector2D& UV0, const struct FVector2D& UV1, const struct FVector2D& UV2, const struct FVector2D& UV3, const struct FVector& Normal, const struct FVector& Tangent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "AddVertexFull");

	Params::LGUIGeometryHelper_AddVertexFull Parms{};

	Parms.position = std::move(position);
	Parms.Color = std::move(Color);
	Parms.UV0 = std::move(UV0);
	Parms.UV1 = std::move(UV1);
	Parms.UV2 = std::move(UV2);
	Parms.UV3 = std::move(UV3);
	Parms.Normal = std::move(Normal);
	Parms.Tangent = std::move(Tangent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryHelper.AddVertexSimple
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 UV0                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::AddVertexSimple(const struct FVector& position, const struct FColor& Color, const struct FVector2D& UV0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "AddVertexSimple");

	Params::LGUIGeometryHelper_AddVertexSimple Parms{};

	Parms.position = std::move(position);
	Parms.Color = std::move(Color);
	Parms.UV0 = std::move(UV0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryHelper.AddVertexStruct
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUIGeometryVertex&       Vertex                                                 (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::AddVertexStruct(const struct FLGUIGeometryVertex& Vertex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "AddVertexStruct");

	Params::LGUIGeometryHelper_AddVertexStruct Parms{};

	Parms.Vertex = std::move(Vertex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryHelper.AddVertexTriangleStream
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLGUIGeometryVertex>&InVertexTriangleStream                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::AddVertexTriangleStream(const TArray<struct FLGUIGeometryVertex>& InVertexTriangleStream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "AddVertexTriangleStream");

	Params::LGUIGeometryHelper_AddVertexTriangleStream Parms{};

	Parms.InVertexTriangleStream = std::move(InVertexTriangleStream);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryHelper.Clear
// (Final, Native, Public, BlueprintCallable)

void ULGUIGeometryHelper::Clear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "Clear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryHelper.GetVertexTriangleStream
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FLGUIGeometryVertex>*     OutVertexTriangleStream                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::GetVertexTriangleStream(TArray<struct FLGUIGeometryVertex>* OutVertexTriangleStream)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "GetVertexTriangleStream");

	Params::LGUIGeometryHelper_GetVertexTriangleStream Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVertexTriangleStream != nullptr)
		*OutVertexTriangleStream = std::move(Parms.OutVertexTriangleStream);
}


// Function LGUI.LGUIGeometryHelper.SetMesh
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FLGUIGeometryVertex>&InVertices                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TArray<int32>&                    InIndices                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIGeometryHelper::SetMesh(const TArray<struct FLGUIGeometryVertex>& InVertices, const TArray<int32>& InIndices)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryHelper", "SetMesh");

	Params::LGUIGeometryHelper_SetMesh Parms{};

	Parms.InVertices = std::move(InVertices);
	Parms.InIndices = std::move(InIndices);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseActor.GetUIItem
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* AUIBaseActor::GetUIItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetUIItem");

	Params::UIBaseActor_GetUIItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.GetUIItem_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* AUIBaseActor::GetUIItem_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetUIItem_BP");

	Params::UIBaseActor_GetUIItem_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseActor.GetUIItem_Impl
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* AUIBaseActor::GetUIItem_Impl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseActor", "GetUIItem_Impl");

	Params::UIBaseActor_GetUIItem_Impl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderableActor.GetUIRenderable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIBaseRenderable*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBaseRenderable* AUIBaseRenderableActor::GetUIRenderable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderableActor", "GetUIRenderable");

	Params::UIBaseRenderableActor_GetUIRenderable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderableActor.GetUIRenderable_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIBaseRenderable*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBaseRenderable* AUIBaseRenderableActor::GetUIRenderable_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderableActor", "GetUIRenderable_BP");

	Params::UIBaseRenderableActor_GetUIRenderable_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderableActor.GetUIRenderable_Impl
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UUIBaseRenderable*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBaseRenderable* AUIBaseRenderableActor::GetUIRenderable_Impl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderableActor", "GetUIRenderable_Impl");

	Params::UIBaseRenderableActor_GetUIRenderable_Impl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBasePostProcessActor.GetUIPostProcessRenderable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIPostProcessRenderable*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIPostProcessRenderable* AUIBasePostProcessActor::GetUIPostProcessRenderable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBasePostProcessActor", "GetUIPostProcessRenderable");

	Params::UIBasePostProcessActor_GetUIPostProcessRenderable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBasePostProcessActor.GetUIPostProcessRenderable_BP
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIPostProcessRenderable*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIPostProcessRenderable* AUIBasePostProcessActor::GetUIPostProcessRenderable_BP() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBasePostProcessActor", "GetUIPostProcessRenderable_BP");

	Params::UIBasePostProcessActor_GetUIPostProcessRenderable_BP Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBasePostProcessActor.GetUIPostProcessRenderable_Impl
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// class UUIPostProcessRenderable*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIPostProcessRenderable* AUIBasePostProcessActor::GetUIPostProcessRenderable_Impl() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBasePostProcessActor", "GetUIPostProcessRenderable_Impl");

	Params::UIBasePostProcessActor_GetUIPostProcessRenderable_Impl Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFrameCaptureActor.GetUIFrameCapture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIFrameCapture*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIFrameCapture* AUIFrameCaptureActor::GetUIFrameCapture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameCaptureActor", "GetUIFrameCapture");

	Params::UIFrameCaptureActor_GetUIFrameCapture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUICustomMesh.ReceiveOnFillMesh
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIBatchMeshRenderable*           InRenderable                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InTriangleChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexUVChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexColorChanged                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUICustomMesh::ReceiveOnFillMesh(class UUIBatchMeshRenderable* InRenderable, bool InTriangleChanged, bool InVertexPositionChanged, bool InVertexUVChanged, bool InVertexColorChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICustomMesh", "ReceiveOnFillMesh");

	Params::LGUICustomMesh_ReceiveOnFillMesh Parms{};

	Parms.InRenderable = InRenderable;
	Parms.InTriangleChanged = InTriangleChanged;
	Parms.InVertexPositionChanged = InVertexPositionChanged;
	Parms.InVertexUVChanged = InVertexUVChanged;
	Parms.InVertexColorChanged = InVertexColorChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUICustomMesh.GetHitUVbyFaceIndex
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UUIBatchMeshRenderable*     InRenderable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            InHitFaceIndex                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InHitPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutHitUV                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICustomMesh::GetHitUVbyFaceIndex(const class UUIBatchMeshRenderable* InRenderable, const int32& InHitFaceIndex, const struct FVector& InHitPoint, struct FVector2D* OutHitUV) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICustomMesh", "GetHitUVbyFaceIndex");

	Params::LGUICustomMesh_GetHitUVbyFaceIndex Parms{};

	Parms.InRenderable = InRenderable;
	Parms.InHitFaceIndex = InHitFaceIndex;
	Parms.InHitPoint = std::move(InHitPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitUV != nullptr)
		*OutHitUV = std::move(Parms.OutHitUV);

	return Parms.ReturnValue;
}


// Function LGUI.LGUICustomMesh.ReceiveGetHitUV
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent, Const)
// Parameters:
// const class UUIBatchMeshRenderable*     InRenderable                                           (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32&                            InHitFaceIndex                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InHitPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLineStart                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLineEnd                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutHitUV                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICustomMesh::ReceiveGetHitUV(const class UUIBatchMeshRenderable* InRenderable, const int32& InHitFaceIndex, const struct FVector& InHitPoint, const struct FVector& InLineStart, const struct FVector& InLineEnd, struct FVector2D* OutHitUV) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICustomMesh", "ReceiveGetHitUV");

	Params::LGUICustomMesh_ReceiveGetHitUV Parms{};

	Parms.InRenderable = InRenderable;
	Parms.InHitFaceIndex = InHitFaceIndex;
	Parms.InHitPoint = std::move(InHitPoint);
	Parms.InLineStart = std::move(InLineStart);
	Parms.InLineEnd = std::move(InLineEnd);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHitUV != nullptr)
		*OutHitUV = std::move(Parms.OutHitUV);

	return Parms.ReturnValue;
}


// Function LGUI.LGUICustomMesh.ReceiveSupportDrawcallBatching
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUICustomMesh::ReceiveSupportDrawcallBatching() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUICustomMesh", "ReceiveSupportDrawcallBatching");

	Params::LGUICustomMesh_ReceiveSupportDrawcallBatching Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIActiveInHierarchy
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    activeOrInactive                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIActiveInHierarchy(bool activeOrInactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIActiveInHierarchy");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIActiveInHierarchy Parms{};

	Parms.activeOrInactive = activeOrInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIAttachmentChanged
// (Event, Protected, BlueprintEvent)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIAttachmentChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIAttachmentChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildAcitveInHierarchy
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          Child                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ativeOrInactive                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIChildAcitveInHierarchy(class UUIItem* Child, bool ativeOrInactive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIChildAcitveInHierarchy");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIChildAcitveInHierarchy Parms{};

	Parms.Child = Child;
	Parms.ativeOrInactive = ativeOrInactive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildAttachmentChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          Child                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    attachOrDetach                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIChildAttachmentChanged(class UUIItem* Child, bool attachOrDetach)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIChildAttachmentChanged");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIChildAttachmentChanged Parms{};

	Parms.Child = Child;
	Parms.attachOrDetach = attachOrDetach;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildDimensionsChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          Child                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    horizontalPositionChanged                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    verticalPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    widthChanged                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    heightChanged                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIChildDimensionsChanged(class UUIItem* Child, bool horizontalPositionChanged, bool verticalPositionChanged, bool widthChanged, bool heightChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIChildDimensionsChanged");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIChildDimensionsChanged Parms{};

	Parms.Child = Child;
	Parms.horizontalPositionChanged = horizontalPositionChanged;
	Parms.verticalPositionChanged = verticalPositionChanged;
	Parms.widthChanged = widthChanged;
	Parms.heightChanged = heightChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIChildHierarchyIndexChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUIItem*                          Child                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIChildHierarchyIndexChanged(class UUIItem* Child)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIChildHierarchyIndexChanged");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIChildHierarchyIndexChanged Parms{};

	Parms.Child = Child;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIDimensionsChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    horizontalPositionChanged                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    verticalPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    widthChanged                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    heightChanged                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIDimensionsChanged(bool horizontalPositionChanged, bool verticalPositionChanged, bool widthChanged, bool heightChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIDimensionsChanged");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIDimensionsChanged Parms{};

	Parms.horizontalPositionChanged = horizontalPositionChanged;
	Parms.verticalPositionChanged = verticalPositionChanged;
	Parms.widthChanged = widthChanged;
	Parms.heightChanged = heightChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.ReceiveOnUIInteractionStateChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    interactableOrNot                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUILifeCycleUIBehaviour::ReceiveOnUIInteractionStateChanged(bool interactableOrNot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "ReceiveOnUIInteractionStateChanged");

	Params::LGUILifeCycleUIBehaviour_ReceiveOnUIInteractionStateChanged Parms{};

	Parms.interactableOrNot = interactableOrNot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUILifeCycleUIBehaviour.CheckRootUIComponent
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUILifeCycleUIBehaviour::CheckRootUIComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "CheckRootUIComponent");

	Params::LGUILifeCycleUIBehaviour_CheckRootUIComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleUIBehaviour.GetRootComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUILifeCycleUIBehaviour::GetRootComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "GetRootComponent");

	Params::LGUILifeCycleUIBehaviour_GetRootComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUILifeCycleUIBehaviour.GetRootUIComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* ULGUILifeCycleUIBehaviour::GetRootUIComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUILifeCycleUIBehaviour", "GetRootUIComponent");

	Params::LGUILifeCycleUIBehaviour_GetRootUIComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutBase.MarkNeedRebuildLayout
// (Final, Native, Public, BlueprintCallable)

void UUILayoutBase::MarkNeedRebuildLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "MarkNeedRebuildLayout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutBase.OnRebuildLayout
// (Native, Public, BlueprintCallable)

void UUILayoutBase::OnRebuildLayout()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutBase", "OnRebuildLayout");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIDynamicSpriteAtlasManager.DisposeAtlasByPackingTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             inPackingTag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIDynamicSpriteAtlasManager::DisposeAtlasByPackingTag(class FName inPackingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIDynamicSpriteAtlasManager", "DisposeAtlasByPackingTag");

	Params::LGUIDynamicSpriteAtlasManager_DisposeAtlasByPackingTag Parms{};

	Parms.inPackingTag = inPackingTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.SetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleWaveProperty::SetScale(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleWaveProperty", "SetScale");

	Params::UIEffectTextAnimation_ScaleWaveProperty_SetScale Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleWaveProperty.GetScale
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleWaveProperty::GetScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleWaveProperty", "GetScale");

	Params::UIEffectTextAnimation_ScaleWaveProperty_GetScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerBeginDrag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerBeginDrag(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerBeginDrag");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerBeginDrag Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerClick
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerClick(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerClick");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerClick Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDeselect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIBaseEventData*               EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerDeselect(class USceneComponent* TargetRootComponent, class ULGUIBaseEventData* EventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerDeselect");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerDeselect Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.EventData = EventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDown
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerDown(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerDown");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerDown Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDrag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerDrag(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerDrag");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerDrag Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerDragDrop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerDragDrop(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerDragDrop");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerDragDrop Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerEndDrag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerEndDrag(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerEndDrag");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerEndDrag Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerEnter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerEnter(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerEnter");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerEnter Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerExit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerExit(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerExit");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerExit Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerScroll
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerScroll(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerScroll");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerScroll Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerSelect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIBaseEventData*               EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerSelect(class USceneComponent* TargetRootComponent, class ULGUIBaseEventData* EventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerSelect");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerSelect Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.EventData = EventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ExecuteEvent_OnPointerUp
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  TargetRootComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            pointerEventData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AllowEventBubbleUp                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ExecuteEvent_OnPointerUp(class USceneComponent* TargetRootComponent, class ULGUIPointerEventData* pointerEventData, ELGUIEventFireType eventFireType, bool AllowEventBubbleUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "ExecuteEvent_OnPointerUp");

	Params::LGUIEventSystem_ExecuteEvent_OnPointerUp Parms{};

	Parms.TargetRootComponent = TargetRootComponent;
	Parms.pointerEventData = pointerEventData;
	Parms.eventFireType = eventFireType;
	Parms.AllowEventBubbleUp = AllowEventBubbleUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.GetLGUIEventSystemInstance
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIEventSystem*                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIEventSystem* ULGUIEventSystem::GetLGUIEventSystemInstance(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIEventSystem", "GetLGUIEventSystemInstance");

	Params::LGUIEventSystem_GetLGUIEventSystemInstance Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.ActivateNavigationInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPointerID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InDefaultHighlightedComponent                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::ActivateNavigationInput(int32 InPointerID, class USceneComponent* InDefaultHighlightedComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "ActivateNavigationInput");

	Params::LGUIEventSystem_ActivateNavigationInput Parms{};

	Parms.InPointerID = InPointerID;
	Parms.InDefaultHighlightedComponent = InDefaultHighlightedComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.ClearEvent
// (Final, Native, Public, BlueprintCallable)

void ULGUIEventSystem::ClearEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "ClearEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.GetCurrentInputModule
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIBaseInputModule*             ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIBaseInputModule* ULGUIEventSystem::GetCurrentInputModule()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "GetCurrentInputModule");

	Params::LGUIEventSystem_GetCurrentInputModule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.IsPointerOverUIByPointerID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIEventSystem::IsPointerOverUIByPointerID(int32 pointerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "IsPointerOverUIByPointerID");

	Params::LGUIEventSystem_IsPointerOverUIByPointerID Parms{};

	Parms.pointerID = pointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RegisterGlobalListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIBaseEventData* EventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIEventSystem::RegisterGlobalListener(const TDelegate<void(class ULGUIBaseEventData* EventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RegisterGlobalListener");

	Params::LGUIEventSystem_RegisterGlobalListener Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RegisterHitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool isHit, const struct FHitResult& HitResult, class USceneComponent* HitComponent)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIEventSystem::RegisterHitEvent(const TDelegate<void(bool isHit, const struct FHitResult& HitResult, class USceneComponent* HitComponent)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RegisterHitEvent");

	Params::LGUIEventSystem_RegisterHitEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RegisterInputChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 pointerID, ELGUIPointerInputType Type)>&pointerInputChange                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIEventSystem::RegisterInputChangeEvent(const TDelegate<void(int32 pointerID, ELGUIPointerInputType Type)>& pointerInputChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RegisterInputChangeEvent");

	Params::LGUIEventSystem_RegisterInputChangeEvent Parms{};

	Parms.pointerInputChange = pointerInputChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.RemovePointerEventData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::RemovePointerEventData(int32 pointerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "RemovePointerEventData");

	Params::LGUIEventSystem_RemovePointerEventData Parms{};

	Parms.pointerID = pointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetHighlightedComponentForNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InPointerID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetHighlightedComponentForNavigation(class USceneComponent* InComp, int32 InPointerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetHighlightedComponentForNavigation");

	Params::LGUIEventSystem_SetHighlightedComponentForNavigation Parms{};

	Parms.InComp = InComp;
	Parms.InPointerID = InPointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetPointerInputTypeByPointerID
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPointerID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIPointerInputType                   InInputType                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIEventSystem::SetPointerInputTypeByPointerID(int32 InPointerID, ELGUIPointerInputType InInputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetPointerInputTypeByPointerID");

	Params::LGUIEventSystem_SetPointerInputTypeByPointerID Parms{};

	Parms.InPointerID = InPointerID;
	Parms.InInputType = InInputType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.SetRaycastEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enable                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ClearEvent                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetRaycastEnable(bool Enable, bool ClearEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetRaycastEnable");

	Params::LGUIEventSystem_SetRaycastEnable Parms{};

	Parms.Enable = Enable;
	Parms.ClearEvent = ClearEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetSelectComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSelectComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIBaseEventData*               EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIEventFireType                      eventFireType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetSelectComponent(class USceneComponent* InSelectComp, class ULGUIBaseEventData* EventData, ELGUIEventFireType eventFireType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetSelectComponent");

	Params::LGUIEventSystem_SetSelectComponent Parms{};

	Parms.InSelectComp = InSelectComp;
	Parms.EventData = EventData;
	Parms.eventFireType = eventFireType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.SetSelectComponentWithDefault
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InSelectComp                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIEventSystem::SetSelectComponentWithDefault(class USceneComponent* InSelectComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "SetSelectComponentWithDefault");

	Params::LGUIEventSystem_SetSelectComponentWithDefault Parms{};

	Parms.InSelectComp = InSelectComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.UnregisterGlobalListener
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InHandle                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIEventSystem::UnregisterGlobalListener(const struct FLGUIDelegateHandleWrapper& InHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "UnregisterGlobalListener");

	Params::LGUIEventSystem_UnregisterGlobalListener Parms{};

	Parms.InHandle = std::move(InHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.UnregisterHitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InHandle                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIEventSystem::UnregisterHitEvent(const struct FLGUIDelegateHandleWrapper& InHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "UnregisterHitEvent");

	Params::LGUIEventSystem_UnregisterHitEvent Parms{};

	Parms.InHandle = std::move(InHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.UnregisterInputChangeEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&delegateHandle                                         (Parm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIEventSystem::UnregisterInputChangeEvent(const struct FLGUIDelegateHandleWrapper& delegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "UnregisterInputChangeEvent");

	Params::LGUIEventSystem_UnregisterInputChangeEvent Parms{};

	Parms.delegateHandle = std::move(delegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIEventSystem.GetCurrentSelectedComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InPointerID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUIEventSystem::GetCurrentSelectedComponent(int32 InPointerID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "GetCurrentSelectedComponent");

	Params::LGUIEventSystem_GetCurrentSelectedComponent Parms{};

	Parms.InPointerID = InPointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.GetHighlightedComponentForNavigation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InPointerID                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUIEventSystem::GetHighlightedComponentForNavigation(int32 InPointerID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "GetHighlightedComponentForNavigation");

	Params::LGUIEventSystem_GetHighlightedComponentForNavigation Parms{};

	Parms.InPointerID = InPointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIEventSystem.GetPointerEventData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    createIfNotExist                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPointerEventData*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPointerEventData* ULGUIEventSystem::GetPointerEventData(int32 pointerID, bool createIfNotExist) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIEventSystem", "GetPointerEventData");

	Params::LGUIEventSystem_GetPointerEventData Parms{};

	Parms.pointerID = pointerID;
	Parms.createIfNotExist = createIfNotExist;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTween.RegisterOnComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIPlayTween::RegisterOnComplete(const TDelegate<void()>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "RegisterOnComplete");

	Params::LGUIPlayTween_RegisterOnComplete Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTween.RegisterOnCycleComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 InCycleCompleteCount)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIPlayTween::RegisterOnCycleComplete(const TDelegate<void(int32 InCycleCompleteCount)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "RegisterOnCycleComplete");

	Params::LGUIPlayTween_RegisterOnCycleComplete Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTween.Start
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTween::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTween::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.UnregisterOnComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIPlayTween::UnregisterOnComplete(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "UnregisterOnComplete");

	Params::LGUIPlayTween_UnregisterOnComplete Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.UnregisterOnCycleComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIPlayTween::UnregisterOnCycleComplete(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "UnregisterOnCycleComplete");

	Params::LGUIPlayTween_UnregisterOnCycleComplete Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTween.GetTweener
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* ULGUIPlayTween::GetTweener() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTween", "GetTweener");

	Params::LGUIPlayTween_GetTweener Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayoutElement.SetColumnCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayoutElement::SetColumnCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "SetColumnCount");

	Params::UIFlexibleGridLayoutElement_SetColumnCount Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayoutElement.SetColumnIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayoutElement::SetColumnIndex(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "SetColumnIndex");

	Params::UIFlexibleGridLayoutElement_SetColumnIndex Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayoutElement.SetIgnoreLayout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayoutElement::SetIgnoreLayout(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "SetIgnoreLayout");

	Params::UIFlexibleGridLayoutElement_SetIgnoreLayout Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayoutElement.SetRowCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayoutElement::SetRowCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "SetRowCount");

	Params::UIFlexibleGridLayoutElement_SetRowCount Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayoutElement.SetRowIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayoutElement::SetRowIndex(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "SetRowIndex");

	Params::UIFlexibleGridLayoutElement_SetRowIndex Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayoutElement.GetColumnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIFlexibleGridLayoutElement::GetColumnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "GetColumnCount");

	Params::UIFlexibleGridLayoutElement_GetColumnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayoutElement.GetColumnIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIFlexibleGridLayoutElement::GetColumnIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "GetColumnIndex");

	Params::UIFlexibleGridLayoutElement_GetColumnIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayoutElement.GetIgnoreLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIFlexibleGridLayoutElement::GetIgnoreLayout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "GetIgnoreLayout");

	Params::UIFlexibleGridLayoutElement_GetIgnoreLayout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayoutElement.GetRowCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIFlexibleGridLayoutElement::GetRowCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "GetRowCount");

	Params::UIFlexibleGridLayoutElement_GetRowCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayoutElement.GetRowIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIFlexibleGridLayoutElement::GetRowIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayoutElement", "GetRowIndex");

	Params::UIFlexibleGridLayoutElement_GetRowIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUINavigationInterface.OnNavigate
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELGUINavigationDirection                Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ILGUINavigationInterface>*Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUINavigationInterface::OnNavigate(ELGUINavigationDirection Direction, TScriptInterface<class ILGUINavigationInterface>* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUINavigationInterface", "OnNavigate");

	Params::LGUINavigationInterface_OnNavigate Parms{};

	Parms.Direction = Direction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayoutSlotBase.SetDesiredSize
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayoutSlotBase::SetDesiredSize(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayoutSlotBase", "SetDesiredSize");

	Params::UIPanelLayoutSlotBase_SetDesiredSize Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayoutSlotBase.SetIgnoreLayout
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayoutSlotBase::SetIgnoreLayout(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayoutSlotBase", "SetIgnoreLayout");

	Params::UIPanelLayoutSlotBase_SetIgnoreLayout Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayoutSlotBase.GetDesiredSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIPanelLayoutSlotBase::GetDesiredSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayoutSlotBase", "GetDesiredSize");

	Params::UIPanelLayoutSlotBase_GetDesiredSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayoutSlotBase.GetIgnoreLayout
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayoutSlotBase::GetIgnoreLayout() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayoutSlotBase", "GetIgnoreLayout");

	Params::UIPanelLayoutSlotBase_GetIgnoreLayout Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.Pause
// (Final, Native, Public, BlueprintCallable)

void ULGUIImageSequencePlayer::Pause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "Pause");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.Play
// (Final, Native, Public, BlueprintCallable)

void ULGUIImageSequencePlayer::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SeekFrame
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FrameNumber                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SeekFrame(int32 FrameNumber)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SeekFrame");

	Params::LGUIImageSequencePlayer_SeekFrame Parms{};

	Parms.FrameNumber = FrameNumber;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SeekTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SeekTime(float Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SeekTime");

	Params::LGUIImageSequencePlayer_SeekTime Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SetFps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SetFps(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SetFps");

	Params::LGUIImageSequencePlayer_SetFps Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.SetLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIImageSequencePlayer::SetLoop(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "SetLoop");

	Params::LGUIImageSequencePlayer_SetLoop Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIImageSequencePlayer::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIImageSequencePlayer.GetDuration
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIImageSequencePlayer::GetDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetDuration");

	Params::LGUIImageSequencePlayer_GetDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.GetFps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIImageSequencePlayer::GetFps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetFps");

	Params::LGUIImageSequencePlayer_GetFps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.GetIsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIImageSequencePlayer::GetIsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetIsPlaying");

	Params::LGUIImageSequencePlayer_GetIsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIImageSequencePlayer.GetLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIImageSequencePlayer::GetLoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIImageSequencePlayer", "GetLoop");

	Params::LGUIImageSequencePlayer_GetLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutWithAnimation.CancelAllAnimations
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    callComplete                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::CancelAllAnimations(bool callComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "CancelAllAnimations");

	Params::UILayoutWithAnimation_CancelAllAnimations Parms{};

	Parms.callComplete = callComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.SetAnimationDuration
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::SetAnimationDuration(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "SetAnimationDuration");

	Params::UILayoutWithAnimation_SetAnimationDuration Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.SetAnimationType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUILayoutAnimationType                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::SetAnimationType(EUILayoutAnimationType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "SetAnimationType");

	Params::UILayoutWithAnimation_SetAnimationType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.SetCustomAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUILayoutWithAnimation_CustomAnimation*Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation::SetCustomAnimation(class UUILayoutWithAnimation_CustomAnimation* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "SetCustomAnimation");

	Params::UILayoutWithAnimation_SetCustomAnimation Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutWithAnimation.GetAnimationDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUILayoutWithAnimation::GetAnimationDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "GetAnimationDuration");

	Params::UILayoutWithAnimation_GetAnimationDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutWithAnimation.GetAnimationType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUILayoutAnimationType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUILayoutAnimationType UUILayoutWithAnimation::GetAnimationType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "GetAnimationType");

	Params::UILayoutWithAnimation_GetAnimationType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutWithAnimation.GetCustomAnimation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUILayoutWithAnimation_CustomAnimation*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUILayoutWithAnimation_CustomAnimation* UUILayoutWithAnimation::GetCustomAnimation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation", "GetCustomAnimation");

	Params::UILayoutWithAnimation_GetCustomAnimation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.SetAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutAlignmentType                Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetAlign(ELGUILayoutAlignmentType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetAlign");

	Params::UIGridLayout_SetAlign Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetCellSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetCellSize(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetCellSize");

	Params::UIGridLayout_SetCellSize Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetDependOnSizeOrCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetDependOnSizeOrCount(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetDependOnSizeOrCount");

	Params::UIGridLayout_SetDependOnSizeOrCount Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetExpendChildSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetExpendChildSize(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetExpendChildSize");

	Params::UIGridLayout_SetExpendChildSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetHeightFitToChildren");

	Params::UIGridLayout_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetHorizontalOrVertical
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetHorizontalOrVertical(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetHorizontalOrVertical");

	Params::UIGridLayout_SetHorizontalOrVertical Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetLastLineCanAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetLastLineCanAlign(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetLastLineCanAlign");

	Params::UIGridLayout_SetLastLineCanAlign Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetMaxItemCountInOneLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetMaxItemCountInOneLine(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetMaxItemCountInOneLine");

	Params::UIGridLayout_SetMaxItemCountInOneLine Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIGridLayout::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetPadding");

	Params::UIGridLayout_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetSpacing(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetSpacing");

	Params::UIGridLayout_SetSpacing Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGridLayout::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "SetWidthFitToChildren");

	Params::UIGridLayout_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGridLayout.GetActuralRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIGridLayout::GetActuralRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetActuralRange");

	Params::UIGridLayout_GetActuralRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutAlignmentType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutAlignmentType UUIGridLayout::GetAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetAlign");

	Params::UIGridLayout_GetAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetCellSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIGridLayout::GetCellSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetCellSize");

	Params::UIGridLayout_GetCellSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetDependOnSizeOrCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetDependOnSizeOrCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetDependOnSizeOrCount");

	Params::UIGridLayout_GetDependOnSizeOrCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetExpendChildSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetExpendChildSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetExpendChildSize");

	Params::UIGridLayout_GetExpendChildSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetHeightFitToChildren");

	Params::UIGridLayout_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetHorizontalOrVertical
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetHorizontalOrVertical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetHorizontalOrVertical");

	Params::UIGridLayout_GetHorizontalOrVertical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetLastLineCanAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetLastLineCanAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetLastLineCanAlign");

	Params::UIGridLayout_GetLastLineCanAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetMaxItemCountInOneLine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIGridLayout::GetMaxItemCountInOneLine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetMaxItemCountInOneLine");

	Params::UIGridLayout_GetMaxItemCountInOneLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIGridLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetPadding");

	Params::UIGridLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIGridLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetSpacing");

	Params::UIGridLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGridLayout.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGridLayout::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGridLayout", "GetWidthFitToChildren");

	Params::UIGridLayout_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIManagerWorldSubsystem.ForceUpdateLayout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIManagerWorldSubsystem::ForceUpdateLayout(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerWorldSubsystem", "ForceUpdateLayout");

	Params::LGUIManagerWorldSubsystem_ForceUpdateLayout Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIManagerWorldSubsystem.RebuildLayout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          InItem                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIManagerWorldSubsystem::RebuildLayout(class UUIItem* InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerWorldSubsystem", "RebuildLayout");

	Params::LGUIManagerWorldSubsystem_RebuildLayout Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIManagerWorldSubsystem.RegisterLGUICultureChangedEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ILGUICultureChangedInterface>InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIManagerWorldSubsystem::RegisterLGUICultureChangedEvent(TScriptInterface<class ILGUICultureChangedInterface> InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerWorldSubsystem", "RegisterLGUICultureChangedEvent");

	Params::LGUIManagerWorldSubsystem_RegisterLGUICultureChangedEvent Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIManagerWorldSubsystem.RegisterLGUILayout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ILGUILayoutInterface>InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIManagerWorldSubsystem::RegisterLGUILayout(TScriptInterface<class ILGUILayoutInterface> InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerWorldSubsystem", "RegisterLGUILayout");

	Params::LGUIManagerWorldSubsystem_RegisterLGUILayout Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIManagerWorldSubsystem.UnregisterLGUICultureChangedEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ILGUICultureChangedInterface>InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIManagerWorldSubsystem::UnregisterLGUICultureChangedEvent(TScriptInterface<class ILGUICultureChangedInterface> InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerWorldSubsystem", "UnregisterLGUICultureChangedEvent");

	Params::LGUIManagerWorldSubsystem_UnregisterLGUICultureChangedEvent Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIManagerWorldSubsystem.UnregisterLGUILayout
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class ILGUILayoutInterface>InItem                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIManagerWorldSubsystem::UnregisterLGUILayout(TScriptInterface<class ILGUILayoutInterface> InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIManagerWorldSubsystem", "UnregisterLGUILayout");

	Params::LGUIManagerWorldSubsystem_UnregisterLGUILayout Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenComponent.Play
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenComponent::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenComponent", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenComponent.GetPlayTween
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIPlayTween*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPlayTween* ULGUIPlayTweenComponent::GetPlayTween() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenComponent", "GetPlayTween");

	Params::LGUIPlayTweenComponent_GetPlayTween Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTweenSequenceComponent.Play
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenSequenceComponent::Play()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenSequenceComponent", "Play");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenSequenceComponent.RegisterOnComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper ULGUIPlayTweenSequenceComponent::RegisterOnComplete(const TDelegate<void()>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenSequenceComponent", "RegisterOnComplete");

	Params::LGUIPlayTweenSequenceComponent_RegisterOnComplete Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPlayTweenSequenceComponent.Stop
// (Final, Native, Public, BlueprintCallable)

void ULGUIPlayTweenSequenceComponent::Stop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenSequenceComponent", "Stop");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPlayTweenSequenceComponent.UnregisterOnComplete
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIPlayTweenSequenceComponent::UnregisterOnComplete(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPlayTweenSequenceComponent", "UnregisterOnComplete");

	Params::LGUIPlayTweenSequenceComponent_UnregisterOnComplete Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPointerClickInterface.OnPointerClick
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerClickInterface::OnPointerClick(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerClickInterface", "OnPointerClick");

	Params::LGUIPointerClickInterface_OnPointerClick Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDownUpInterface.OnPointerDown
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDownUpInterface::OnPointerDown(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDownUpInterface", "OnPointerDown");

	Params::LGUIPointerDownUpInterface_OnPointerDown Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDownUpInterface.OnPointerUp
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDownUpInterface::OnPointerUp(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDownUpInterface", "OnPointerUp");

	Params::LGUIPointerDownUpInterface_OnPointerUp Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragDropInterface.OnPointerDragDrop
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragDropInterface::OnPointerDragDrop(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragDropInterface", "OnPointerDragDrop");

	Params::LGUIPointerDragDropInterface_OnPointerDragDrop Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragInterface.OnPointerBeginDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragInterface::OnPointerBeginDrag(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragInterface", "OnPointerBeginDrag");

	Params::LGUIPointerDragInterface_OnPointerBeginDrag Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragInterface.OnPointerDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragInterface::OnPointerDrag(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragInterface", "OnPointerDrag");

	Params::LGUIPointerDragInterface_OnPointerDrag Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerDragInterface.OnPointerEndDrag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerDragInterface::OnPointerEndDrag(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerDragInterface", "OnPointerEndDrag");

	Params::LGUIPointerDragInterface_OnPointerEndDrag Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEnterExitInterface.OnPointerEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerEnterExitInterface::OnPointerEnter(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerEnterExitInterface", "OnPointerEnter");

	Params::LGUIPointerEnterExitInterface_OnPointerEnter Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEnterExitInterface.OnPointerExit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerEnterExitInterface::OnPointerExit(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerEnterExitInterface", "OnPointerExit");

	Params::LGUIPointerEnterExitInterface_OnPointerExit Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.IsPointerOverUI
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIPointerEventData::IsPointerOverUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "IsPointerOverUI");

	Params::LGUIPointerEventData_IsPointerOverUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.SetHighlightedComponentForNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComp                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIPointerEventData::SetHighlightedComponentForNavigation(class USceneComponent* InComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "SetHighlightedComponentForNavigation");

	Params::LGUIPointerEventData_SetHighlightedComponentForNavigation Parms{};

	Parms.InComp = InComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPointerEventData.GetCumulativeMoveDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetCumulativeMoveDelta() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetCumulativeMoveDelta");

	Params::LGUIPointerEventData_GetCumulativeMoveDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetDragRayDirection
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetDragRayDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetDragRayDirection");

	Params::LGUIPointerEventData_GetDragRayDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetDragRayOrigin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetDragRayOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetDragRayOrigin");

	Params::LGUIPointerEventData_GetDragRayOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetHighlightedComponentForNavigation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* ULGUIPointerEventData::GetHighlightedComponentForNavigation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetHighlightedComponentForNavigation");

	Params::LGUIPointerEventData_GetHighlightedComponentForNavigation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetLocalPointInPlane
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetLocalPointInPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetLocalPointInPlane");

	Params::LGUIPointerEventData_GetLocalPointInPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetWorldPointInPlane
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetWorldPointInPlane() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetWorldPointInPlane");

	Params::LGUIPointerEventData_GetWorldPointInPlane Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerEventData.GetWorldPointSpherical
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ULGUIPointerEventData::GetWorldPointSpherical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPointerEventData", "GetWorldPointSpherical");

	Params::LGUIPointerEventData_GetWorldPointSpherical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerScrollInterface.OnPointerScroll
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerScrollInterface::OnPointerScroll(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerScrollInterface", "OnPointerScroll");

	Params::LGUIPointerScrollInterface_OnPointerScroll Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerDeselect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIBaseEventData*               EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerSelectDeselectInterface::OnPointerDeselect(class ULGUIBaseEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerSelectDeselectInterface", "OnPointerDeselect");

	Params::LGUIPointerSelectDeselectInterface_OnPointerDeselect Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPointerSelectDeselectInterface.OnPointerSelect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULGUIBaseEventData*               EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIPointerSelectDeselectInterface::OnPointerSelect(class ULGUIBaseEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIPointerSelectDeselectInterface", "OnPointerSelect");

	Params::LGUIPointerSelectDeselectInterface_OnPointerSelect Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefab.LoadPrefab
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class AActor* LoadedRootActor)>&InCallbackBeforeAwake                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SetRelativeTransformToIdentity                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIPrefab::LoadPrefab(class UObject* WorldContextObject, class USceneComponent* InParent, const TDelegate<void(class AActor* LoadedRootActor)>& InCallbackBeforeAwake, bool SetRelativeTransformToIdentity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefab", "LoadPrefab");

	Params::LGUIPrefab_LoadPrefab Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InParent = InParent;
	Parms.InCallbackBeforeAwake = InCallbackBeforeAwake;
	Parms.SetRelativeTransformToIdentity = SetRelativeTransformToIdentity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefab.LoadPrefabWithReplacement
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TMap<class UObject*, class UObject*>&InReplaceAssetMap                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TMap<class UClass*, class UClass*>&InReplaceClassMap                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(class AActor* LoadedRootActor)>&InCallbackBeforeAwake                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIPrefab::LoadPrefabWithReplacement(class UObject* WorldContextObject, class USceneComponent* InParent, const TMap<class UObject*, class UObject*>& InReplaceAssetMap, const TMap<class UClass*, class UClass*>& InReplaceClassMap, const TDelegate<void(class AActor* LoadedRootActor)>& InCallbackBeforeAwake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefab", "LoadPrefabWithReplacement");

	Params::LGUIPrefab_LoadPrefabWithReplacement Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InParent = InParent;
	Parms.InReplaceAssetMap = std::move(InReplaceAssetMap);
	Parms.InReplaceClassMap = std::move(InReplaceClassMap);
	Parms.InCallbackBeforeAwake = InCallbackBeforeAwake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefab.LoadPrefabWithTransform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  InParent                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Rotation                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(class AActor* LoadedRootActor)>&InCallbackBeforeAwake                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* ULGUIPrefab::LoadPrefabWithTransform(class UObject* WorldContextObject, class USceneComponent* InParent, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, const TDelegate<void(class AActor* LoadedRootActor)>& InCallbackBeforeAwake)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefab", "LoadPrefabWithTransform");

	Params::LGUIPrefab_LoadPrefabWithTransform Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InParent = InParent;
	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);
	Parms.Scale = std::move(Scale);
	Parms.InCallbackBeforeAwake = InCallbackBeforeAwake;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabWorldSubsystem.IsLGUIPrefabSystemProcessingActor
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIPrefabWorldSubsystem::IsLGUIPrefabSystemProcessingActor(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUIPrefabWorldSubsystem", "IsLGUIPrefabSystemProcessingActor");

	Params::LGUIPrefabWorldSubsystem_IsLGUIPrefabSystemProcessingActor Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.InitSequencePlayer
// (Final, Native, Public, BlueprintCallable)

void ULGUIPrefabSequenceComponent::InitSequencePlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "InitSequencePlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPrefabSequenceComponent.SetSequenceByDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIPrefabSequenceComponent::SetSequenceByDisplayName(const class FString& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "SetSequenceByDisplayName");

	Params::LGUIPrefabSequenceComponent_SetSequenceByDisplayName Parms{};

	Parms.InName = std::move(InName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPrefabSequenceComponent.SetSequenceByIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIPrefabSequenceComponent::SetSequenceByIndex(int32 InIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "SetSequenceByIndex");

	Params::LGUIPrefabSequenceComponent_SetSequenceByIndex Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPrefabSequenceComponent.SetSequenceByName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIPrefabSequenceComponent::SetSequenceByName(class FName InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "SetSequenceByName");

	Params::LGUIPrefabSequenceComponent_SetSequenceByName Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetCurrentSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIPrefabSequence*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPrefabSequence* ULGUIPrefabSequenceComponent::GetCurrentSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetCurrentSequence");

	Params::LGUIPrefabSequenceComponent_GetCurrentSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetCurrentSequenceIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ULGUIPrefabSequenceComponent::GetCurrentSequenceIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetCurrentSequenceIndex");

	Params::LGUIPrefabSequenceComponent_GetCurrentSequenceIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ULGUIPrefabSequence*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class ULGUIPrefabSequence*> ULGUIPrefabSequenceComponent::GetSequenceArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetSequenceArray");

	Params::LGUIPrefabSequenceComponent_GetSequenceArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceByDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPrefabSequence*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPrefabSequence* ULGUIPrefabSequenceComponent::GetSequenceByDisplayName(const class FString& InName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetSequenceByDisplayName");

	Params::LGUIPrefabSequenceComponent_GetSequenceByDisplayName Parms{};

	Parms.InName = std::move(InName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPrefabSequence*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPrefabSequence* ULGUIPrefabSequenceComponent::GetSequenceByIndex(int32 InIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetSequenceByIndex");

	Params::LGUIPrefabSequenceComponent_GetSequenceByIndex Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetSequenceByName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             InName                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUIPrefabSequence*              ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPrefabSequence* ULGUIPrefabSequenceComponent::GetSequenceByName(class FName InName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetSequenceByName");

	Params::LGUIPrefabSequenceComponent_GetSequenceByName Parms{};

	Parms.InName = InName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIPrefabSequenceComponent.GetSequencePlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIPrefabSequencePlayer*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPrefabSequencePlayer* ULGUIPrefabSequenceComponent::GetSequencePlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIPrefabSequenceComponent", "GetSequencePlayer");

	Params::LGUIPrefabSequenceComponent_GetSequencePlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.SetCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICanvas*                      Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRenderTargetGeometrySource::SetCanvas(class ULGUICanvas* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "SetCanvas");

	Params::LGUIRenderTargetGeometrySource_SetCanvas Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRenderTargetGeometrySource.SetCylinderArcAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRenderTargetGeometrySource::SetCylinderArcAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "SetCylinderArcAngle");

	Params::LGUIRenderTargetGeometrySource_SetCylinderArcAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRenderTargetGeometrySource.SetEnableInteractOnBackside
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRenderTargetGeometrySource::SetEnableInteractOnBackside(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "SetEnableInteractOnBackside");

	Params::LGUIRenderTargetGeometrySource_SetEnableInteractOnBackside Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRenderTargetGeometrySource.SetFlipVerticalOnGLES
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRenderTargetGeometrySource::SetFlipVerticalOnGLES(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "SetFlipVerticalOnGLES");

	Params::LGUIRenderTargetGeometrySource_SetFlipVerticalOnGLES Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRenderTargetGeometrySource.SetGeometryMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUIRenderTargetGeometryMode           Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRenderTargetGeometrySource::SetGeometryMode(ELGUIRenderTargetGeometryMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "SetGeometryMode");

	Params::LGUIRenderTargetGeometrySource_SetGeometryMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRenderTargetGeometrySource.SetPivot
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRenderTargetGeometrySource::SetPivot(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "SetPivot");

	Params::LGUIRenderTargetGeometrySource_SetPivot Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* ULGUIRenderTargetGeometrySource::GetCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetCanvas");

	Params::LGUIRenderTargetGeometrySource_GetCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetCylinderArcAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIRenderTargetGeometrySource::GetCylinderArcAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetCylinderArcAngle");

	Params::LGUIRenderTargetGeometrySource_GetCylinderArcAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetEnableInteractOnBackside
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIRenderTargetGeometrySource::GetEnableInteractOnBackside() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetEnableInteractOnBackside");

	Params::LGUIRenderTargetGeometrySource_GetEnableInteractOnBackside Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetFlipVerticalOnGLES
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIRenderTargetGeometrySource::GetFlipVerticalOnGLES() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetFlipVerticalOnGLES");

	Params::LGUIRenderTargetGeometrySource_GetFlipVerticalOnGLES Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetGeometryMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUIRenderTargetGeometryMode           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUIRenderTargetGeometryMode ULGUIRenderTargetGeometrySource::GetGeometryMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetGeometryMode");

	Params::LGUIRenderTargetGeometrySource_GetGeometryMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetMaterialInstance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* ULGUIRenderTargetGeometrySource::GetMaterialInstance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetMaterialInstance");

	Params::LGUIRenderTargetGeometrySource_GetMaterialInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetOverrideStaticMeshMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIRenderTargetGeometrySource::GetOverrideStaticMeshMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetOverrideStaticMeshMaterial");

	Params::LGUIRenderTargetGeometrySource_GetOverrideStaticMeshMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetPivot
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D ULGUIRenderTargetGeometrySource::GetPivot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetPivot");

	Params::LGUIRenderTargetGeometrySource_GetPivot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* ULGUIRenderTargetGeometrySource::GetRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetRenderTarget");

	Params::LGUIRenderTargetGeometrySource_GetRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetGeometrySource.GetRenderTargetSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint ULGUIRenderTargetGeometrySource::GetRenderTargetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRenderTargetGeometrySource", "GetRenderTargetSize");

	Params::LGUIRenderTargetGeometrySource_GetRenderTargetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetInteractionSourceInterface.PerformLineTrace
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32&                            InHitFaceIndex                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InHitPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLineStart                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLineEnd                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutHitUV                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILGUIRenderTargetInteractionSourceInterface::PerformLineTrace(const int32& InHitFaceIndex, const struct FVector& InHitPoint, const struct FVector& InLineStart, const struct FVector& InLineEnd, struct FVector2D* OutHitUV)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIRenderTargetInteractionSourceInterface", "PerformLineTrace");

	Params::LGUIRenderTargetInteractionSourceInterface_PerformLineTrace Parms{};

	Parms.InHitFaceIndex = InHitFaceIndex;
	Parms.InHitPoint = std::move(InHitPoint);
	Parms.InLineStart = std::move(InLineStart);
	Parms.InLineEnd = std::move(InLineEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHitUV != nullptr)
		*OutHitUV = std::move(Parms.OutHitUV);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRenderTargetInteractionSourceInterface.GetTargetCanvas
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* ILGUIRenderTargetInteractionSourceInterface::GetTargetCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("LGUIRenderTargetInteractionSourceInterface", "GetTargetCanvas");

	Params::LGUIRenderTargetInteractionSourceInterface_GetTargetCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRichTextCustomStyleData.GetDataMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FLGUIRichTextCustomStyleItemData>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FLGUIRichTextCustomStyleItemData> ULGUIRichTextCustomStyleData::GetDataMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextCustomStyleData", "GetDataMap");

	Params::LGUIRichTextCustomStyleData_GetDataMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRichTextImageData.BroadcastOnDataChange
// (Final, Native, Public, BlueprintCallable)

void ULGUIRichTextImageData::BroadcastOnDataChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextImageData", "BroadcastOnDataChange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRichTextImageData.GetMutableImageMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TMap<class FName, struct FLGUIRichTextImageItemData>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FLGUIRichTextImageItemData> ULGUIRichTextImageData::GetMutableImageMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextImageData", "GetMutableImageMap");

	Params::LGUIRichTextImageData_GetMutableImageMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRichTextImageData.SetAnimationFps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIRichTextImageData::SetAnimationFps(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextImageData", "SetAnimationFps");

	Params::LGUIRichTextImageData_SetAnimationFps Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRichTextImageData.SetImageMap
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TMap<class FName, struct FLGUIRichTextImageItemData>&Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ULGUIRichTextImageData::SetImageMap(const TMap<class FName, struct FLGUIRichTextImageItemData>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextImageData", "SetImageMap");

	Params::LGUIRichTextImageData_SetImageMap Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIRichTextImageData.GetAnimationFps
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIRichTextImageData::GetAnimationFps() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextImageData", "GetAnimationFps");

	Params::LGUIRichTextImageData_GetAnimationFps Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIRichTextImageData.GetImageMap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TMap<class FName, struct FLGUIRichTextImageItemData>ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TMap<class FName, struct FLGUIRichTextImageItemData> ULGUIRichTextImageData::GetImageMap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIRichTextImageData", "GetImageMap");

	Params::LGUIRichTextImageData_GetImageMap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.GetAtlasTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUISpriteData_BaseObject::GetAtlasTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "GetAtlasTexture");

	Params::LGUISpriteData_BaseObject_GetAtlasTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.GetSpriteInfo
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUISpriteInfo            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLGUISpriteInfo ULGUISpriteData_BaseObject::GetSpriteInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "GetSpriteInfo");

	Params::LGUISpriteData_BaseObject_GetSpriteInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.IsIndividual
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUISpriteData_BaseObject::IsIndividual() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "IsIndividual");

	Params::LGUISpriteData_BaseObject_IsIndividual Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData_BaseObject.ReadPixel
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D&                 InUV                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor*                          OutPixel                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUISpriteData_BaseObject::ReadPixel(const struct FVector2D& InUV, struct FColor* OutPixel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData_BaseObject", "ReadPixel");

	Params::LGUISpriteData_BaseObject_ReadPixel Parms{};

	Parms.InUV = std::move(InUV);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPixel != nullptr)
		*OutPixel = std::move(Parms.OutPixel);

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.CreateLGUISpriteData
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       inSpriteTexture                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 inHorizontalBorder                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 inVerticalBorder                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             inPackingTag                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULGUISpriteData*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData* ULGUISpriteData::CreateLGUISpriteData(class UObject* Outer_0, class UTexture2D* inSpriteTexture, const struct FVector2D& inHorizontalBorder, const struct FVector2D& inVerticalBorder, class FName inPackingTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LGUISpriteData", "CreateLGUISpriteData");

	Params::LGUISpriteData_CreateLGUISpriteData Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.inSpriteTexture = inSpriteTexture;
	Parms.inHorizontalBorder = std::move(inHorizontalBorder);
	Parms.inVerticalBorder = std::move(inVerticalBorder);
	Parms.inPackingTag = inPackingTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.GetPackingTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName ULGUISpriteData::GetPackingTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData", "GetPackingTag");

	Params::LGUISpriteData_GetPackingTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.GetSpriteTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUISpriteData::GetSpriteTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData", "GetSpriteTexture");

	Params::LGUISpriteData_GetSpriteTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUISpriteData.HavePackingTag
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUISpriteData::HavePackingTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUISpriteData", "HavePackingTag");

	Params::LGUISpriteData_HavePackingTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIStaticSpriteAtlasData.GetAtlasTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* ULGUIStaticSpriteAtlasData::GetAtlasTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIStaticSpriteAtlasData", "GetAtlasTexture");

	Params::LGUIStaticSpriteAtlasData_GetAtlasTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIStaticSpriteAtlasData.ReadPixel
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 InUV                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor*                          OutPixel                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIStaticSpriteAtlasData::ReadPixel(const struct FVector2D& InUV, struct FColor* OutPixel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIStaticSpriteAtlasData", "ReadPixel");

	Params::LGUIStaticSpriteAtlasData_ReadPixel Parms{};

	Parms.InUV = std::move(InUV);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPixel != nullptr)
		*OutPixel = std::move(Parms.OutPixel);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceRaycasterSource.ReceiveGenerateRay
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            InPointerEventData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutRayOrigin                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutRayDirection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIWorldSpaceRaycasterSource::ReceiveGenerateRay(class ULGUIPointerEventData* InPointerEventData, struct FVector* OutRayOrigin, struct FVector* OutRayDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceRaycasterSource", "ReceiveGenerateRay");

	Params::LGUIWorldSpaceRaycasterSource_ReceiveGenerateRay Parms{};

	Parms.InPointerEventData = InPointerEventData;

	UObject::ProcessEvent(Func, &Parms);

	if (OutRayOrigin != nullptr)
		*OutRayOrigin = std::move(Parms.OutRayOrigin);

	if (OutRayDirection != nullptr)
		*OutRayDirection = std::move(Parms.OutRayDirection);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceRaycasterSource.ReceiveInit
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIBaseRaycaster*               InRaycaster                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceRaycasterSource::ReceiveInit(class ULGUIBaseRaycaster* InRaycaster)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceRaycasterSource", "ReceiveInit");

	Params::LGUIWorldSpaceRaycasterSource_ReceiveInit Parms{};

	Parms.InRaycaster = InRaycaster;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.LGUIWorldSpaceRaycasterSource.ReceiveShouldStartDrag
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIPointerEventData*            InPointerEventData                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ULGUIWorldSpaceRaycasterSource::ReceiveShouldStartDrag(class ULGUIPointerEventData* InPointerEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceRaycasterSource", "ReceiveShouldStartDrag");

	Params::LGUIWorldSpaceRaycasterSource_ReceiveShouldStartDrag Parms{};

	Parms.InPointerEventData = InPointerEventData;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceRaycasterSource.GetRaycasterObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIBaseRaycaster*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIBaseRaycaster* ULGUIWorldSpaceRaycasterSource::GetRaycasterObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceRaycasterSource", "GetRaycasterObject");

	Params::LGUIWorldSpaceRaycasterSource_GetRaycasterObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIWorldSpaceRaycaster.SetRaycasterSourceObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIWorldSpaceRaycasterSource*   NewSource                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIWorldSpaceRaycaster::SetRaycasterSourceObject(class ULGUIWorldSpaceRaycasterSource* NewSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceRaycaster", "SetRaycasterSourceObject");

	Params::LGUIWorldSpaceRaycaster_SetRaycasterSourceObject Parms{};

	Parms.NewSource = NewSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIWorldSpaceRaycaster.GetRaycasterSourceObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIWorldSpaceRaycasterSource*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIWorldSpaceRaycasterSource* ULGUIWorldSpaceRaycaster::GetRaycasterSourceObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIWorldSpaceRaycaster", "GetRaycasterSourceObject");

	Params::LGUIWorldSpaceRaycaster_GetRaycasterSourceObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUI_PointerInputModule.InputNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUINavigationDirection                Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    pressOrRelease                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::InputNavigation(ELGUINavigationDirection Direction, bool pressOrRelease, int32 pointerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "InputNavigation");

	Params::LGUI_PointerInputModule_InputNavigation Parms{};

	Parms.Direction = Direction;
	Parms.pressOrRelease = pressOrRelease;
	Parms.pointerID = pointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_PointerInputModule.InputTriggerForNavigation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    triggerPress                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   pointerID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_PointerInputModule::InputTriggerForNavigation(bool triggerPress, int32 pointerID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_PointerInputModule", "InputTriggerForNavigation");

	Params::LGUI_PointerInputModule_InputTriggerForNavigation Parms{};

	Parms.triggerPress = triggerPress;
	Parms.pointerID = pointerID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.InputOverrideMousePosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 inMousePosition                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::InputOverrideMousePosition(const struct FVector2D& inMousePosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "InputOverrideMousePosition");

	Params::LGUI_StandaloneInputModule_InputOverrideMousePosition Parms{};

	Parms.inMousePosition = std::move(inMousePosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.InputScroll
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 inAxisValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::InputScroll(const struct FVector2D& inAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "InputScroll");

	Params::LGUI_StandaloneInputModule_InputScroll Parms{};

	Parms.inAxisValue = std::move(inAxisValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_StandaloneInputModule.InputTrigger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    inTriggerPress                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMouseButtonType                        inMouseButtonType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_StandaloneInputModule::InputTrigger(bool inTriggerPress, EMouseButtonType inMouseButtonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_StandaloneInputModule", "InputTrigger");

	Params::LGUI_StandaloneInputModule_InputTrigger Parms{};

	Parms.inTriggerPress = inTriggerPress;
	Parms.inMouseButtonType = inMouseButtonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.InputScroll
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 inAxisValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_TouchInputModule::InputScroll(const struct FVector2D& inAxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "InputScroll");

	Params::LGUI_TouchInputModule_InputScroll Parms{};

	Parms.inAxisValue = std::move(inAxisValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.InputTouchMoved
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// int32                                   inTouchID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   inTouchPointPosition                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_TouchInputModule::InputTouchMoved(int32 inTouchID, const struct FVector& inTouchPointPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "InputTouchMoved");

	Params::LGUI_TouchInputModule_InputTouchMoved Parms{};

	Parms.inTouchID = inTouchID;
	Parms.inTouchPointPosition = std::move(inTouchPointPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUI_TouchInputModule.InputTouchTrigger
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// bool                                    inTouchPress                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   inTouchID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   inTouchPointPosition                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUI_TouchInputModule::InputTouchTrigger(bool inTouchPress, int32 inTouchID, const struct FVector& inTouchPointPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUI_TouchInputModule", "InputTouchTrigger");

	Params::LGUI_TouchInputModule_InputTouchTrigger Parms{};

	Parms.inTouchPress = inTouchPress;
	Parms.inTouchID = inTouchID;
	Parms.inTouchPointPosition = std::move(inTouchPointPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.AnchorBottomTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::AnchorBottomTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "AnchorBottomTo");

	Params::UIItem_AnchorBottomTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.AnchoredPositionTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::AnchoredPositionTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "AnchoredPositionTo");

	Params::UIItem_AnchoredPositionTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.AnchorLeftTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::AnchorLeftTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "AnchorLeftTo");

	Params::UIItem_AnchorLeftTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.AnchorRightTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::AnchorRightTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "AnchorRightTo");

	Params::UIItem_AnchorRightTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.AnchorTopTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::AnchorTopTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "AnchorTopTo");

	Params::UIItem_AnchorTopTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.HeightTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::HeightTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "HeightTo");

	Params::UIItem_HeightTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.HorizontalAnchoredPositionTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::HorizontalAnchoredPositionTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "HorizontalAnchoredPositionTo");

	Params::UIItem_HorizontalAnchoredPositionTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.PivotTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::PivotTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "PivotTo");

	Params::UIItem_PivotTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.SetAnchorBottom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorBottom(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorBottom");

	Params::UIItem_SetAnchorBottom Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorData
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUIAnchorData&             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorData(const struct FUIAnchorData& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorData");

	Params::UIItem_SetAnchorData Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchoredPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchoredPosition(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchoredPosition");

	Params::UIItem_SetAnchoredPosition Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorLeft(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorLeft");

	Params::UIItem_SetAnchorLeft Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorMax(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorMax");

	Params::UIItem_SetAnchorMax Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorMin(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorMin");

	Params::UIItem_SetAnchorMin Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorRight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorRight");

	Params::UIItem_SetAnchorRight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAnchorTop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetAnchorTop(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAnchorTop");

	Params::UIItem_SetAnchorTop Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAsFirstHierarchy
// (Final, Native, Public, BlueprintCallable)

void UUIItem::SetAsFirstHierarchy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAsFirstHierarchy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetAsLastHierarchy
// (Final, Native, Public, BlueprintCallable)

void UUIItem::SetAsLastHierarchy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetAsLastHierarchy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetDisplayName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetDisplayName(const class FString& InName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetDisplayName");

	Params::UIItem_SetDisplayName Parms{};

	Parms.InName = std::move(InName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHeight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHeight");

	Params::UIItem_SetHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHierarchyIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   inInt                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHierarchyIndex(int32 inInt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHierarchyIndex");

	Params::UIItem_SetHierarchyIndex Parms{};

	Parms.inInt = inInt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHorizontalAnchoredPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHorizontalAnchoredPosition(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHorizontalAnchoredPosition");

	Params::UIItem_SetHorizontalAnchoredPosition Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHorizontalAnchorMinMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepRelativeLocation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHorizontalAnchorMinMax(const struct FVector2D& Value, bool bKeepSize, bool bKeepRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHorizontalAnchorMinMax");

	Params::UIItem_SetHorizontalAnchorMinMax Parms{};

	Parms.Value = std::move(Value);
	Parms.bKeepSize = bKeepSize;
	Parms.bKeepRelativeLocation = bKeepRelativeLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetHorizontalAndVerticalAnchorMinMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 MinValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector2D&                 MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepRelativeLocation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetHorizontalAndVerticalAnchorMinMax(const struct FVector2D& MinValue, const struct FVector2D& MaxValue, bool bKeepSize, bool bKeepRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetHorizontalAndVerticalAnchorMinMax");

	Params::UIItem_SetHorizontalAndVerticalAnchorMinMax Parms{};

	Parms.MinValue = std::move(MinValue);
	Parms.MaxValue = std::move(MaxValue);
	Parms.bKeepSize = bKeepSize;
	Parms.bKeepRelativeLocation = bKeepRelativeLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetIsUIActive
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetIsUIActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetIsUIActive");

	Params::UIItem_SetIsUIActive Parms{};

	Parms.Active = Active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetPivot
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetPivot(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetPivot");

	Params::UIItem_SetPivot Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetRaycastTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetRaycastTarget(bool newBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetRaycastTarget");

	Params::UIItem_SetRaycastTarget Parms{};

	Parms.newBool = newBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetSizeDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetSizeDelta(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetSizeDelta");

	Params::UIItem_SetSizeDelta Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetTraceChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETraceTypeQuery                         InTraceChannel                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetTraceChannel(ETraceTypeQuery InTraceChannel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetTraceChannel");

	Params::UIItem_SetTraceChannel Parms{};

	Parms.InTraceChannel = InTraceChannel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetVerticalAnchoredPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetVerticalAnchoredPosition(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetVerticalAnchoredPosition");

	Params::UIItem_SetVerticalAnchoredPosition Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetVerticalAnchorMinMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepSize                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bKeepRelativeLocation                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetVerticalAnchorMinMax(const struct FVector2D& Value, bool bKeepSize, bool bKeepRelativeLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetVerticalAnchorMinMax");

	Params::UIItem_SetVerticalAnchorMinMax Parms{};

	Parms.Value = std::move(Value);
	Parms.bKeepSize = bKeepSize;
	Parms.bKeepRelativeLocation = bKeepRelativeLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.SetWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIItem::SetWidth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "SetWidth");

	Params::UIItem_SetWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIItem.VerticalAnchoredPositionTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::VerticalAnchoredPositionTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "VerticalAnchoredPositionTo");

	Params::UIItem_VerticalAnchoredPositionTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.WidthTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIItem::WidthTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "WidthTo");

	Params::UIItem_WidthTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.FindChildArrayByDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeChildren                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UUIItem*>                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UUIItem*> UUIItem::FindChildArrayByDisplayName(const class FString& InName, bool IncludeChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "FindChildArrayByDisplayName");

	Params::UIItem_FindChildArrayByDisplayName Parms{};

	Parms.InName = std::move(InName);
	Parms.IncludeChildren = IncludeChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.FindChildByDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FString&                    InName                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IncludeChildren                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* UUIItem::FindChildByDisplayName(const class FString& InName, bool IncludeChildren) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "FindChildByDisplayName");

	Params::UIItem_FindChildByDisplayName Parms{};

	Parms.InName = std::move(InName);
	Parms.IncludeChildren = IncludeChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorBottom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAnchorBottom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorBottom");

	Params::UIItem_GetAnchorBottom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FUIAnchorData              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FUIAnchorData UUIItem::GetAnchorData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorData");

	Params::UIItem_GetAnchorData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchoredPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetAnchoredPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchoredPosition");

	Params::UIItem_GetAnchoredPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAnchorLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorLeft");

	Params::UIItem_GetAnchorLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetAnchorMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorMax");

	Params::UIItem_GetAnchorMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetAnchorMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorMin");

	Params::UIItem_GetAnchorMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAnchorRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorRight");

	Params::UIItem_GetAnchorRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAnchorTop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetAnchorTop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAnchorTop");

	Params::UIItem_GetAnchorTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAttachUIChild
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* UUIItem::GetAttachUIChild(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAttachUIChild");

	Params::UIItem_GetAttachUIChild Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetAttachUIChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UUIItem*>            ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UUIItem*> UUIItem::GetAttachUIChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetAttachUIChildren");

	Params::UIItem_GetAttachUIChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetCanvasGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUICanvasGroup*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUICanvasGroup* UUIItem::GetCanvasGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetCanvasGroup");

	Params::UIItem_GetCanvasGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetCanvasScaler
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvasScaler*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvasScaler* UUIItem::GetCanvasScaler() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetCanvasScaler");

	Params::UIItem_GetCanvasScaler Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetDisplayName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUIItem::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetDisplayName");

	Params::UIItem_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetFlattenHierarchyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIItem::GetFlattenHierarchyIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetFlattenHierarchyIndex");

	Params::UIItem_GetFlattenHierarchyIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetHeight");

	Params::UIItem_GetHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetHierarchyIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIItem::GetHierarchyIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetHierarchyIndex");

	Params::UIItem_GetHierarchyIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetHorizontalAnchoredPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetHorizontalAnchoredPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetHorizontalAnchoredPosition");

	Params::UIItem_GetHorizontalAnchoredPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetIsUIActiveInHierarchy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::GetIsUIActiveInHierarchy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetIsUIActiveInHierarchy");

	Params::UIItem_GetIsUIActiveInHierarchy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetIsUIActiveSelf
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::GetIsUIActiveSelf() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetIsUIActiveSelf");

	Params::UIItem_GetIsUIActiveSelf Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceBottom
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceBottom() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceBottom");

	Params::UIItem_GetLocalSpaceBottom Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetLocalSpaceCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceCenter");

	Params::UIItem_GetLocalSpaceCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceLeft");

	Params::UIItem_GetLocalSpaceLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceLeftBottomPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetLocalSpaceLeftBottomPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceLeftBottomPoint");

	Params::UIItem_GetLocalSpaceLeftBottomPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceRight");

	Params::UIItem_GetLocalSpaceRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceRightTopPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetLocalSpaceRightTopPoint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceRightTopPoint");

	Params::UIItem_GetLocalSpaceRightTopPoint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetLocalSpaceTop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetLocalSpaceTop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetLocalSpaceTop");

	Params::UIItem_GetLocalSpaceTop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetParentUIItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* UUIItem::GetParentUIItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetParentUIItem");

	Params::UIItem_GetParentUIItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetPivot
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetPivot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetPivot");

	Params::UIItem_GetPivot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetRenderCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* UUIItem::GetRenderCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetRenderCanvas");

	Params::UIItem_GetRenderCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetRootCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* UUIItem::GetRootCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetRootCanvas");

	Params::UIItem_GetRootCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetRootUIItemInHierarchy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIItem*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIItem* UUIItem::GetRootUIItemInHierarchy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetRootUIItemInHierarchy");

	Params::UIItem_GetRootUIItemInHierarchy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetSizeDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIItem::GetSizeDelta() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetSizeDelta");

	Params::UIItem_GetSizeDelta Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetTraceChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ETraceTypeQuery                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ETraceTypeQuery UUIItem::GetTraceChannel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetTraceChannel");

	Params::UIItem_GetTraceChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetVerticalAnchoredPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetVerticalAnchoredPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetVerticalAnchoredPosition");

	Params::UIItem_GetVerticalAnchoredPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.GetWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIItem::GetWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "GetWidth");

	Params::UIItem_GetWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsRaycastTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsRaycastTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsRaycastTarget");

	Params::UIItem_IsRaycastTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsRenderTargetUI
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsRenderTargetUI() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsRenderTargetUI");

	Params::UIItem_IsRenderTargetUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsScreenSpaceOverlayUI
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsScreenSpaceOverlayUI() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsScreenSpaceOverlayUI");

	Params::UIItem_IsScreenSpaceOverlayUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIItem.IsWorldSpaceUI
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIItem::IsWorldSpaceUI() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIItem", "IsWorldSpaceUI");

	Params::UIItem_IsWorldSpaceUI Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.AlphaFrom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIBaseRenderable::AlphaFrom(float StartValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "AlphaFrom");

	Params::UIBaseRenderable_AlphaFrom Parms{};

	Parms.StartValue = StartValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.AlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIBaseRenderable::AlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "AlphaTo");

	Params::UIBaseRenderable_AlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.ColorFrom
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIBaseRenderable::ColorFrom(const struct FColor& StartValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "ColorFrom");

	Params::UIBaseRenderable_ColorFrom Parms{};

	Parms.StartValue = std::move(StartValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.ColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIBaseRenderable::ColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "ColorTo");

	Params::UIBaseRenderable_ColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.SetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBaseRenderable::SetAlpha(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "SetAlpha");

	Params::UIBaseRenderable_SetAlpha Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseRenderable.SetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBaseRenderable::SetColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "SetColor");

	Params::UIBaseRenderable_SetColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseRenderable.SetCustomRaycastObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIRenderableCustomRaycast*       Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBaseRenderable::SetCustomRaycastObject(class UUIRenderableCustomRaycast* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "SetCustomRaycastObject");

	Params::UIBaseRenderable_SetCustomRaycastObject Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseRenderable.SetRaycastType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIRenderableRaycastType                Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBaseRenderable::SetRaycastType(EUIRenderableRaycastType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "SetRaycastType");

	Params::UIBaseRenderable_SetRaycastType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBaseRenderable.GetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIBaseRenderable::GetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetAlpha");

	Params::UIBaseRenderable_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIBaseRenderable::GetColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetColor");

	Params::UIBaseRenderable_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.GetCustomRaycastObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIRenderableCustomRaycast*       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIRenderableCustomRaycast* UUIBaseRenderable::GetCustomRaycastObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetCustomRaycastObject");

	Params::UIBaseRenderable_GetCustomRaycastObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.GetFinalAlpha01
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIBaseRenderable::GetFinalAlpha01() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetFinalAlpha01");

	Params::UIBaseRenderable_GetFinalAlpha01 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.GetFinalColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIBaseRenderable::GetFinalColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetFinalColor");

	Params::UIBaseRenderable_GetFinalColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.GetRaycastType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIRenderableRaycastType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIRenderableRaycastType UUIBaseRenderable::GetRaycastType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetRaycastType");

	Params::UIBaseRenderable_GetRaycastType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBaseRenderable.GetUIRenderableType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIRenderableType                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIRenderableType UUIBaseRenderable::GetUIRenderableType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBaseRenderable", "GetUIRenderableType");

	Params::UIBaseRenderable_GetUIRenderableType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchMeshRenderable.MarkVerticesDirty
// (Final, Native, Public, BlueprintCallable)

void UUIBatchMeshRenderable::MarkVerticesDirty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "MarkVerticesDirty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchMeshRenderable.ReceiveGetMaterialToCreateGeometry
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUIBatchMeshRenderable::ReceiveGetMaterialToCreateGeometry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "ReceiveGetMaterialToCreateGeometry");

	Params::UIBatchMeshRenderable_ReceiveGetMaterialToCreateGeometry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchMeshRenderable.ReceiveGetTextureToCreateGeometry
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UUIBatchMeshRenderable::ReceiveGetTextureToCreateGeometry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "ReceiveGetTextureToCreateGeometry");

	Params::UIBatchMeshRenderable_ReceiveGetTextureToCreateGeometry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchMeshRenderable.ReceiveOnBeforeCreateOrUpdateGeometry
// (Event, Protected, BlueprintEvent)

void UUIBatchMeshRenderable::ReceiveOnBeforeCreateOrUpdateGeometry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "ReceiveOnBeforeCreateOrUpdateGeometry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UIBatchMeshRenderable.ReceiveOnUpdateGeometry
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIGeometryHelper*              InGeometryHelper                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InTriangleChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexPositionChanged                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexUVChanged                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InVertexColorChanged                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchMeshRenderable::ReceiveOnUpdateGeometry(class ULGUIGeometryHelper* InGeometryHelper, bool InTriangleChanged, bool InVertexPositionChanged, bool InVertexUVChanged, bool InVertexColorChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "ReceiveOnUpdateGeometry");

	Params::UIBatchMeshRenderable_ReceiveOnUpdateGeometry Parms{};

	Parms.InGeometryHelper = InGeometryHelper;
	Parms.InTriangleChanged = InTriangleChanged;
	Parms.InVertexPositionChanged = InVertexPositionChanged;
	Parms.InVertexUVChanged = InVertexUVChanged;
	Parms.InVertexColorChanged = InVertexColorChanged;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UIBatchMeshRenderable.SetCustomUIMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               InMat                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBatchMeshRenderable::SetCustomUIMaterial(class UMaterialInterface* InMat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "SetCustomUIMaterial");

	Params::UIBatchMeshRenderable_SetCustomUIMaterial Parms{};

	Parms.InMat = InMat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBatchMeshRenderable.GetCustomUIMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUIBatchMeshRenderable::GetCustomUIMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "GetCustomUIMaterial");

	Params::UIBatchMeshRenderable_GetCustomUIMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBatchMeshRenderable.GetMaterialInstanceDynamic
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UUIBatchMeshRenderable::GetMaterialInstanceDynamic() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBatchMeshRenderable", "GetMaterialInstanceDynamic");

	Params::UIBatchMeshRenderable_GetMaterialInstanceDynamic Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteBase.SetSizeFromSpriteData
// (Final, Native, Public, BlueprintCallable)

void UUISpriteBase::SetSizeFromSpriteData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase", "SetSizeFromSpriteData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase.SetSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    SetSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteBase::SetSprite(class ULGUISpriteData_BaseObject* NewSprite, bool SetSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase", "SetSprite");

	Params::UISpriteBase_SetSprite Parms{};

	Parms.NewSprite = NewSprite;
	Parms.SetSize = SetSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteBase.GetSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISpriteBase::GetSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteBase", "GetSprite");

	Params::UISpriteBase_GetSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.LineWidthTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUI2DLineRendererBase::LineWidthTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "LineWidthTo");

	Params::UI2DLineRendererBase_LineWidthTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.SetEndType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUI2DLineRenderer_EndType               NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRendererBase::SetEndType(EUI2DLineRenderer_EndType NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "SetEndType");

	Params::UI2DLineRendererBase_SetEndType Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRendererBase.SetLineWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRendererBase::SetLineWidth(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "SetLineWidth");

	Params::UI2DLineRendererBase_SetLineWidth Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRendererBase.SetLineWidthOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUI2DLineRendererBase::SetLineWidthOffset(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "SetLineWidthOffset");

	Params::UI2DLineRendererBase_SetLineWidthOffset Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineRendererBase.GetEndType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUI2DLineRenderer_EndType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUI2DLineRenderer_EndType UUI2DLineRendererBase::GetEndType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "GetEndType");

	Params::UI2DLineRendererBase_GetEndType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.GetLineWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUI2DLineRendererBase::GetLineWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "GetLineWidth");

	Params::UI2DLineRendererBase_GetLineWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRendererBase.GetLineWidthOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUI2DLineRendererBase::GetLineWidthOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRendererBase", "GetLineWidthOffset");

	Params::UI2DLineRendererBase_GetLineWidthOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineChildrenAsPointsActor.Get2DLineChildrenAsPoints
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUI2DLineChildrenAsPoints*        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUI2DLineChildrenAsPoints* AUI2DLineChildrenAsPointsActor::Get2DLineChildrenAsPoints() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineChildrenAsPointsActor", "Get2DLineChildrenAsPoints");

	Params::UI2DLineChildrenAsPointsActor_Get2DLineChildrenAsPoints Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UI2DLineRaw.SetPoints
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FVector2D>&         InPoints                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUI2DLineRaw::SetPoints(const TArray<struct FVector2D>& InPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineRaw", "SetPoints");

	Params::UI2DLineRaw_SetPoints Parms{};

	Parms.InPoints = std::move(InPoints);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UI2DLineActor.Get2DLineRaw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUI2DLineRaw*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUI2DLineRaw* AUI2DLineActor::Get2DLineRaw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UI2DLineActor", "Get2DLineRaw");

	Params::UI2DLineActor_Get2DLineRaw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPostProcessRenderable.SetMaskTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewValue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPostProcessRenderable::SetMaskTexture(class UTexture2D* NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "SetMaskTexture");

	Params::UIPostProcessRenderable_SetMaskTexture Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPostProcessRenderable.SetMaskTextureSpriteInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUISpriteInfo&           Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIPostProcessRenderable::SetMaskTextureSpriteInfo(const struct FLGUISpriteInfo& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "SetMaskTextureSpriteInfo");

	Params::UIPostProcessRenderable_SetMaskTextureSpriteInfo Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPostProcessRenderable.SetMaskTextureType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIPostProcessMaskTextureType           Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPostProcessRenderable::SetMaskTextureType(EUIPostProcessMaskTextureType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "SetMaskTextureType");

	Params::UIPostProcessRenderable_SetMaskTextureType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPostProcessRenderable.SetMaskTextureUVRect
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPostProcessRenderable::SetMaskTextureUVRect(const struct FVector4& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "SetMaskTextureUVRect");

	Params::UIPostProcessRenderable_SetMaskTextureUVRect Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPostProcessRenderable.GetMaskTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UUIPostProcessRenderable::GetMaskTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "GetMaskTexture");

	Params::UIPostProcessRenderable_GetMaskTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPostProcessRenderable.GetMaskTextureSpriteInfo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FLGUISpriteInfo            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FLGUISpriteInfo UUIPostProcessRenderable::GetMaskTextureSpriteInfo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "GetMaskTextureSpriteInfo");

	Params::UIPostProcessRenderable_GetMaskTextureSpriteInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPostProcessRenderable.GetMaskTextureType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIPostProcessMaskTextureType           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIPostProcessMaskTextureType UUIPostProcessRenderable::GetMaskTextureType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "GetMaskTextureType");

	Params::UIPostProcessRenderable_GetMaskTextureType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPostProcessRenderable.GetMaskTextureUVRect
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector4                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector4 UUIPostProcessRenderable::GetMaskTextureUVRect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPostProcessRenderable", "GetMaskTextureUVRect");

	Params::UIPostProcessRenderable_GetMaskTextureUVRect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.SetApplyAlphaToBlur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetApplyAlphaToBlur(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetApplyAlphaToBlur");

	Params::UIBackgroundBlur_SetApplyAlphaToBlur Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.SetBlurStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetBlurStrength(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetBlurStrength");

	Params::UIBackgroundBlur_SetBlurStrength Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.SetMaxDownSampleLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetMaxDownSampleLevel(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetMaxDownSampleLevel");

	Params::UIBackgroundBlur_SetMaxDownSampleLevel Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.SetStrengthTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture2D*                       NewValue                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundBlur::SetStrengthTexture(class UTexture2D* NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "SetStrengthTexture");

	Params::UIBackgroundBlur_SetStrengthTexture Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundBlur.GetApplyAlphaToBlur
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIBackgroundBlur::GetApplyAlphaToBlur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetApplyAlphaToBlur");

	Params::UIBackgroundBlur_GetApplyAlphaToBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.GetBlurStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIBackgroundBlur::GetBlurStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetBlurStrength");

	Params::UIBackgroundBlur_GetBlurStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.GetMaxDownSampleLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIBackgroundBlur::GetMaxDownSampleLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetMaxDownSampleLevel");

	Params::UIBackgroundBlur_GetMaxDownSampleLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlur.GetStrengthTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UUIBackgroundBlur::GetStrengthTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlur", "GetStrengthTexture");

	Params::UIBackgroundBlur_GetStrengthTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundBlurActor.GetUIBackgroundBlur
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIBackgroundBlur*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBackgroundBlur* AUIBackgroundBlurActor::GetUIBackgroundBlur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundBlurActor", "GetUIBackgroundBlur");

	Params::UIBackgroundBlurActor_GetUIBackgroundBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundPixelate.SetApplyAlphaToStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundPixelate::SetApplyAlphaToStrength(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "SetApplyAlphaToStrength");

	Params::UIBackgroundPixelate_SetApplyAlphaToStrength Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundPixelate.SetPixelateStrength
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIBackgroundPixelate::SetPixelateStrength(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "SetPixelateStrength");

	Params::UIBackgroundPixelate_SetPixelateStrength Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIBackgroundPixelate.GetApplyAlphaToStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIBackgroundPixelate::GetApplyAlphaToStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "GetApplyAlphaToStrength");

	Params::UIBackgroundPixelate_GetApplyAlphaToStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundPixelate.GetPixelateStrength
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIBackgroundPixelate::GetPixelateStrength() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelate", "GetPixelateStrength");

	Params::UIBackgroundPixelate_GetPixelateStrength Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIBackgroundPixelateActor.GetUIBackgroundPixelate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIBackgroundPixelate*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBackgroundPixelate* AUIBackgroundPixelateActor::GetUIBackgroundPixelate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIBackgroundPixelateActor", "GetUIBackgroundPixelate");

	Params::UIBackgroundPixelateActor_GetUIBackgroundPixelate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRenderableCustomRaycast.GetRaycastPixelFromUIBatchMeshRenderable
// (Final, Native, Static, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIBatchMeshRenderable*           InUIRenderable                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocalSpaceRayStart                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocalSpaceRayEnd                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D*                       OutUV                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColor*                          OutPixel                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitNormal                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIRenderableCustomRaycast::GetRaycastPixelFromUIBatchMeshRenderable(class UUIBatchMeshRenderable* InUIRenderable, const struct FVector& InLocalSpaceRayStart, const struct FVector& InLocalSpaceRayEnd, struct FVector2D* OutUV, struct FColor* OutPixel, struct FVector* OutHitPoint, struct FVector* OutHitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIRenderableCustomRaycast", "GetRaycastPixelFromUIBatchMeshRenderable");

	Params::UIRenderableCustomRaycast_GetRaycastPixelFromUIBatchMeshRenderable Parms{};

	Parms.InUIRenderable = InUIRenderable;
	Parms.InLocalSpaceRayStart = std::move(InLocalSpaceRayStart);
	Parms.InLocalSpaceRayEnd = std::move(InLocalSpaceRayEnd);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUV != nullptr)
		*OutUV = std::move(Parms.OutUV);

	if (OutPixel != nullptr)
		*OutPixel = std::move(Parms.OutPixel);

	if (OutHitPoint != nullptr)
		*OutHitPoint = std::move(Parms.OutHitPoint);

	if (OutHitNormal != nullptr)
		*OutHitNormal = std::move(Parms.OutHitNormal);

	return Parms.ReturnValue;
}


// Function LGUI.UIRenderableCustomRaycast.ReceiveRaycast
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// class UUIBaseRenderable*                InUIRenderable                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocalSpaceRayStart                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InLocalSpaceRayEnd                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitPoint                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutHitNormal                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIRenderableCustomRaycast::ReceiveRaycast(class UUIBaseRenderable* InUIRenderable, const struct FVector& InLocalSpaceRayStart, const struct FVector& InLocalSpaceRayEnd, struct FVector* OutHitPoint, struct FVector* OutHitNormal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderableCustomRaycast", "ReceiveRaycast");

	Params::UIRenderableCustomRaycast_ReceiveRaycast Parms{};

	Parms.InUIRenderable = InUIRenderable;
	Parms.InLocalSpaceRayStart = std::move(InLocalSpaceRayStart);
	Parms.InLocalSpaceRayEnd = std::move(InLocalSpaceRayEnd);

	UObject::ProcessEvent(Func, &Parms);

	if (OutHitPoint != nullptr)
		*OutHitPoint = std::move(Parms.OutHitPoint);

	if (OutHitNormal != nullptr)
		*OutHitNormal = std::move(Parms.OutHitNormal);

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.SetCanNavigateHere
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetCanNavigateHere(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetCanNavigateHere");

	Params::UISelectableComponent_SetCanNavigateHere Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetDisabledColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetDisabledColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetDisabledColor");

	Params::UISelectableComponent_SetDisabledColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetDisabledSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetDisabledSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetDisabledSprite");

	Params::UISelectableComponent_SetDisabledSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetHighlightedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetHighlightedColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetHighlightedColor");

	Params::UISelectableComponent_SetHighlightedColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetHighlightedSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetHighlightedSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetHighlightedSprite");

	Params::UISelectableComponent_SetHighlightedSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationDown
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationDown(EUISelectableNavigationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationDown");

	Params::UISelectableComponent_SetNavigationDown Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationDownExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationDownExplicit(class UUISelectableComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationDownExplicit");

	Params::UISelectableComponent_SetNavigationDownExplicit Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationLeft
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationLeft(EUISelectableNavigationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationLeft");

	Params::UISelectableComponent_SetNavigationLeft Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationLeftExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationLeftExplicit(class UUISelectableComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationLeftExplicit");

	Params::UISelectableComponent_SetNavigationLeftExplicit Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationNext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationNext(EUISelectableNavigationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationNext");

	Params::UISelectableComponent_SetNavigationNext Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationNextExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationNextExplicit(class UUISelectableComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationNextExplicit");

	Params::UISelectableComponent_SetNavigationNextExplicit Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationPrev
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationPrev(EUISelectableNavigationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationPrev");

	Params::UISelectableComponent_SetNavigationPrev Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationPrevExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationPrevExplicit(class UUISelectableComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationPrevExplicit");

	Params::UISelectableComponent_SetNavigationPrevExplicit Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationRight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationRight(EUISelectableNavigationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationRight");

	Params::UISelectableComponent_SetNavigationRight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationRightExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationRightExplicit(class UUISelectableComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationRightExplicit");

	Params::UISelectableComponent_SetNavigationRightExplicit Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationUp
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableNavigationMode             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationUp(EUISelectableNavigationMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationUp");

	Params::UISelectableComponent_SetNavigationUp Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNavigationUpExplicit
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUISelectableComponent*           Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNavigationUpExplicit(class UUISelectableComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNavigationUpExplicit");

	Params::UISelectableComponent_SetNavigationUpExplicit Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNormalColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNormalColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNormalColor");

	Params::UISelectableComponent_SetNormalColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetNormalSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetNormalSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetNormalSprite");

	Params::UISelectableComponent_SetNormalSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetPressedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetPressedColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetPressedColor");

	Params::UISelectableComponent_SetPressedColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetPressedSprite
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       NewSprite                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetPressedSprite(class ULGUISpriteData_BaseObject* NewSprite)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetPressedSprite");

	Params::UISelectableComponent_SetPressedSprite Parms{};

	Parms.NewSprite = NewSprite;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetSelectionState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISelectableSelectionState             NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetSelectionState(EUISelectableSelectionState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetSelectionState");

	Params::UISelectableComponent_SetSelectionState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.SetTransitionTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseRenderableActor*           Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableComponent::SetTransitionTarget(class AUIBaseRenderableActor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "SetTransitionTarget");

	Params::UISelectableComponent_SetTransitionTarget Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableComponent.GetCanNavigateHere
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISelectableComponent::GetCanNavigateHere() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetCanNavigateHere");

	Params::UISelectableComponent_GetCanNavigateHere Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetDisabledColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetDisabledColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetDisabledColor");

	Params::UISelectableComponent_GetDisabledColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetDisabledSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetDisabledSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetDisabledSprite");

	Params::UISelectableComponent_GetDisabledSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetHighlightedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetHighlightedColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetHighlightedColor");

	Params::UISelectableComponent_GetHighlightedColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetHighlightedSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetHighlightedSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetHighlightedSprite");

	Params::UISelectableComponent_GetHighlightedSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationDown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationDown");

	Params::UISelectableComponent_GetNavigationDown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationDownExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationDownExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationDownExplicit");

	Params::UISelectableComponent_GetNavigationDownExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationLeft
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationLeft() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationLeft");

	Params::UISelectableComponent_GetNavigationLeft Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationLeftExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationLeftExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationLeftExplicit");

	Params::UISelectableComponent_GetNavigationLeftExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationNext
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationNext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationNext");

	Params::UISelectableComponent_GetNavigationNext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationNextExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationNextExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationNextExplicit");

	Params::UISelectableComponent_GetNavigationNextExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationPrev
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationPrev() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationPrev");

	Params::UISelectableComponent_GetNavigationPrev Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationPrevExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationPrevExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationPrevExplicit");

	Params::UISelectableComponent_GetNavigationPrevExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationRight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationRight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationRight");

	Params::UISelectableComponent_GetNavigationRight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationRightExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationRightExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationRightExplicit");

	Params::UISelectableComponent_GetNavigationRightExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationUp
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableNavigationMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableNavigationMode UUISelectableComponent::GetNavigationUp() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationUp");

	Params::UISelectableComponent_GetNavigationUp Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNavigationUpExplicit
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISelectableComponent*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISelectableComponent* UUISelectableComponent::GetNavigationUpExplicit() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNavigationUpExplicit");

	Params::UISelectableComponent_GetNavigationUpExplicit Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNormalColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetNormalColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNormalColor");

	Params::UISelectableComponent_GetNormalColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetNormalSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetNormalSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetNormalSprite");

	Params::UISelectableComponent_GetNormalSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetPressedColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUISelectableComponent::GetPressedColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetPressedColor");

	Params::UISelectableComponent_GetPressedColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetPressedSprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUISelectableComponent::GetPressedSprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetPressedSprite");

	Params::UISelectableComponent_GetPressedSprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetSelectionState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISelectableSelectionState             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISelectableSelectionState UUISelectableComponent::GetSelectionState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetSelectionState");

	Params::UISelectableComponent_GetSelectionState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.GetTransitionTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseRenderableActor*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseRenderableActor* UUISelectableComponent::GetTransitionTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "GetTransitionTarget");

	Params::UISelectableComponent_GetTransitionTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableComponent.IsInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISelectableComponent::IsInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableComponent", "IsInteractable");

	Params::UISelectableComponent_IsInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIButtonComponent.RegisterClickEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void()>&                InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIButtonComponent::RegisterClickEvent(const TDelegate<void()>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIButtonComponent", "RegisterClickEvent");

	Params::UIButtonComponent_RegisterClickEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIButtonComponent.UnregisterClickEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIButtonComponent::UnregisterClickEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIButtonComponent", "UnregisterClickEvent");

	Params::UIButtonComponent_UnregisterClickEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICanvasGroup.AlphaFrom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   StartValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUICanvasGroup::AlphaFrom(float StartValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "AlphaFrom");

	Params::UICanvasGroup_AlphaFrom Parms{};

	Parms.StartValue = StartValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.AlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUICanvasGroup::AlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "AlphaTo");

	Params::UICanvasGroup_AlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.SetAlpha
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICanvasGroup::SetAlpha(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "SetAlpha");

	Params::UICanvasGroup_SetAlpha Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICanvasGroup.SetIgnoreParentGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICanvasGroup::SetIgnoreParentGroup(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "SetIgnoreParentGroup");

	Params::UICanvasGroup_SetIgnoreParentGroup Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICanvasGroup.SetInteractable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICanvasGroup::SetInteractable(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "SetInteractable");

	Params::UICanvasGroup_SetInteractable Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICanvasGroup.GetAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUICanvasGroup::GetAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetAlpha");

	Params::UICanvasGroup_GetAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.GetFinalAlpha
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUICanvasGroup::GetFinalAlpha() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetFinalAlpha");

	Params::UICanvasGroup_GetFinalAlpha Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.GetFinalInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUICanvasGroup::GetFinalInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetFinalInteractable");

	Params::UICanvasGroup_GetFinalInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.GetIgnoreParentGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUICanvasGroup::GetIgnoreParentGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetIgnoreParentGroup");

	Params::UICanvasGroup_GetIgnoreParentGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.GetInteractable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUICanvasGroup::GetInteractable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetInteractable");

	Params::UICanvasGroup_GetInteractable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.GetRestrictNavigationArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUICanvasGroup::GetRestrictNavigationArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetRestrictNavigationArea");

	Params::UICanvasGroup_GetRestrictNavigationArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICanvasGroup.GetRestrictNavigationAreaCanvasGroup
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UUICanvasGroup*             ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UUICanvasGroup* UUICanvasGroup::GetRestrictNavigationAreaCanvasGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICanvasGroup", "GetRestrictNavigationAreaCanvasGroup");

	Params::UICanvasGroup_GetRestrictNavigationAreaCanvasGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICustomMesh.SetCustomMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICustomMesh*                  Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUICustomMesh::SetCustomMesh(class ULGUICustomMesh* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomMesh", "SetCustomMesh");

	Params::UICustomMesh_SetCustomMesh Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UICustomMesh.GetCustomMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICustomMesh*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICustomMesh* UUICustomMesh::GetCustomMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomMesh", "GetCustomMesh");

	Params::UICustomMesh_GetCustomMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UICustomMeshActor.GetUICustomMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUICustomMesh*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUICustomMesh* AUICustomMeshActor::GetUICustomMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UICustomMeshActor", "GetUICustomMesh");

	Params::UICustomMeshActor_GetUICustomMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.AddOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIDropdownOptionData>&InOptions                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIDropdownComponent::AddOptions(const TArray<struct FUIDropdownOptionData>& InOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "AddOptions");

	Params::UIDropdownComponent_AddOptions Parms{};

	Parms.InOptions = std::move(InOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.ClearItemCustomDataFunction
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::ClearItemCustomDataFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "ClearItemCustomDataFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.Hide
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.MarkRecreateList
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::MarkRecreateList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "MarkRecreateList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.RegisterSelectionChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 InSelectIndex)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIDropdownComponent::RegisterSelectionChangeEvent(const TDelegate<void(int32 InSelectIndex)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "RegisterSelectionChangeEvent");

	Params::UIDropdownComponent_RegisterSelectionChangeEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.SetHorizontalPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIDropdownHorizontalPosition           InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetHorizontalPosition(EUIDropdownHorizontalPosition InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetHorizontalPosition");

	Params::UIDropdownComponent_SetHorizontalPosition Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetItemCustomDataFunction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 InItemIndex, class UUIDropdownItemComponent* InItemScript, class AActor* InItemActor)>&InFunction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetItemCustomDataFunction(const TDelegate<void(int32 InItemIndex, class UUIDropdownItemComponent* InItemScript, class AActor* InItemActor)>& InFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetItemCustomDataFunction");

	Params::UIDropdownComponent_SetItemCustomDataFunction Parms{};

	Parms.InFunction = InFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetMaxHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetMaxHeight(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetMaxHeight");

	Params::UIDropdownComponent_SetMaxHeight Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetOptions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIDropdownOptionData>&InOptions                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetOptions(const TArray<struct FUIDropdownOptionData>& InOptions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetOptions");

	Params::UIDropdownComponent_SetOptions Parms{};

	Parms.InOptions = std::move(InOptions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetUseInteractionBlock
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetUseInteractionBlock(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetUseInteractionBlock");

	Params::UIDropdownComponent_SetUseInteractionBlock Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetValue(int32 NewValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetValue");

	Params::UIDropdownComponent_SetValue Parms{};

	Parms.NewValue = NewValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetVerticalOverlap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetVerticalOverlap(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetVerticalOverlap");

	Params::UIDropdownComponent_SetVerticalOverlap Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.SetVerticalPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIDropdownVerticalPosition             InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownComponent::SetVerticalPosition(EUIDropdownVerticalPosition InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "SetVerticalPosition");

	Params::UIDropdownComponent_SetVerticalPosition Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.Show
// (Final, Native, Public, BlueprintCallable)

void UUIDropdownComponent::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.UnregisterSelectionChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIDropdownComponent::UnregisterSelectionChangeEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "UnregisterSelectionChangeEvent");

	Params::UIDropdownComponent_UnregisterSelectionChangeEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownComponent.GetCurrentOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FUIDropdownOptionData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FUIDropdownOptionData UUIDropdownComponent::GetCurrentOption() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetCurrentOption");

	Params::UIDropdownComponent_GetCurrentOption Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetHorizontalPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIDropdownHorizontalPosition           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIDropdownHorizontalPosition UUIDropdownComponent::GetHorizontalPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetHorizontalPosition");

	Params::UIDropdownComponent_GetHorizontalPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetListRoot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIDropdownComponent::GetListRoot() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetListRoot");

	Params::UIDropdownComponent_GetListRoot Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetMaxHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIDropdownComponent::GetMaxHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetMaxHeight");

	Params::UIDropdownComponent_GetMaxHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetOption
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIDropdownOptionData            ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FUIDropdownOptionData UUIDropdownComponent::GetOption(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetOption");

	Params::UIDropdownComponent_GetOption Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetOptions
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIDropdownOptionData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIDropdownOptionData> UUIDropdownComponent::GetOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetOptions");

	Params::UIDropdownComponent_GetOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetUseInteractionBlock
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIDropdownComponent::GetUseInteractionBlock() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetUseInteractionBlock");

	Params::UIDropdownComponent_GetUseInteractionBlock Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIDropdownComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetValue");

	Params::UIDropdownComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetVerticalOverlap
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIDropdownComponent::GetVerticalOverlap() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetVerticalOverlap");

	Params::UIDropdownComponent_GetVerticalOverlap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownComponent.GetVerticalPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIDropdownVerticalPosition             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIDropdownVerticalPosition UUIDropdownComponent::GetVerticalPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownComponent", "GetVerticalPosition");

	Params::UIDropdownComponent_GetVerticalPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownItemComponent.DynamicDelegate_OnSelect
// (Final, Native, Private)

void UUIDropdownItemComponent::DynamicDelegate_OnSelect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownItemComponent", "DynamicDelegate_OnSelect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIDropdownItemComponent.ReceiveInit
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FUIDropdownOptionData&     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void()>&                OnSelectCallback                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownItemComponent::ReceiveInit(int32 Index_0, const struct FUIDropdownOptionData& Data, const TDelegate<void()>& OnSelectCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownItemComponent", "ReceiveInit");

	Params::UIDropdownItemComponent_ReceiveInit Parms{};

	Parms.Index_0 = Index_0;
	Parms.Data = std::move(Data);
	Parms.OnSelectCallback = OnSelectCallback;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UIDropdownItemComponent.ReceiveSetSelectionState
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InSelect                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIDropdownItemComponent::ReceiveSetSelectionState(bool InSelect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownItemComponent", "ReceiveSetSelectionState");

	Params::UIDropdownItemComponent_ReceiveSetSelectionState Parms{};

	Parms.InSelect = InSelect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UIDropdownItemComponent.GetSpriteActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUISpriteActor*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUISpriteActor* UUIDropdownItemComponent::GetSpriteActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownItemComponent", "GetSpriteActor");

	Params::UIDropdownItemComponent_GetSpriteActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownItemComponent.GetTextActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUITextActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUITextActor* UUIDropdownItemComponent::GetTextActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownItemComponent", "GetTextActor");

	Params::UIDropdownItemComponent_GetTextActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIDropdownItemComponent.GetToggle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIToggleComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIToggleComponent* UUIDropdownItemComponent::GetToggle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIDropdownItemComponent", "GetToggle");

	Params::UIDropdownItemComponent_GetToggle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGeometryModifierBase.ReceiveModifyUIGeometry
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ULGUIGeometryModifierHelper*      InGeometryModifierHelper                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGeometryModifierBase::ReceiveModifyUIGeometry(class ULGUIGeometryModifierHelper* InGeometryModifierHelper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "ReceiveModifyUIGeometry");

	Params::UIGeometryModifierBase_ReceiveModifyUIGeometry Parms{};

	Parms.InGeometryModifierHelper = InGeometryModifierHelper;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UIGeometryModifierBase.SetEnable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIGeometryModifierBase::SetEnable(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "SetEnable");

	Params::UIGeometryModifierBase_SetEnable Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGeometryModifierBase.SetExecuteOrder
// (Final, Native, Public, BlueprintCallable)

void UUIGeometryModifierBase::SetExecuteOrder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "SetExecuteOrder");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIGeometryModifierBase.GetEnable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIGeometryModifierBase::GetEnable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "GetEnable");

	Params::UIGeometryModifierBase_GetEnable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGeometryModifierBase.GetExecuteOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIGeometryModifierBase::GetExecuteOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "GetExecuteOrder");

	Params::UIGeometryModifierBase_GetExecuteOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGeometryModifierBase.GetRenderableUIItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIBatchMeshRenderable*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBatchMeshRenderable* UUIGeometryModifierBase::GetRenderableUIItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "GetRenderableUIItem");

	Params::UIGeometryModifierBase_GetRenderableUIItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIGeometryModifierBase.GetUIRenderable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIBatchMeshRenderable*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIBatchMeshRenderable* UUIGeometryModifierBase::GetUIRenderable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIGeometryModifierBase", "GetUIRenderable");

	Params::UIGeometryModifierBase_GetUIRenderable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.SetGradientColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetGradientColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetGradientColor");

	Params::UIEffectLongShadow_SetGradientColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetShadowColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetShadowColor");

	Params::UIEffectLongShadow_SetShadowColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetShadowSegment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   newSegment                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetShadowSegment(uint8 newSegment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetShadowSegment");

	Params::UIEffectLongShadow_SetShadowSegment Parms{};

	Parms.newSegment = newSegment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetShadowSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetShadowSize(const struct FVector& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetShadowSize");

	Params::UIEffectLongShadow_SetShadowSize Parms{};

	Parms.NewSize = std::move(NewSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.SetUseGradientColor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newBool                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectLongShadow::SetUseGradientColor(bool newBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "SetUseGradientColor");

	Params::UIEffectLongShadow_SetUseGradientColor Parms{};

	Parms.newBool = newBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectLongShadow.GetGradientColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectLongShadow::GetGradientColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetGradientColor");

	Params::UIEffectLongShadow_GetGradientColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectLongShadow::GetShadowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetShadowColor");

	Params::UIEffectLongShadow_GetShadowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetShadowSegments
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUIEffectLongShadow::GetShadowSegments() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetShadowSegments");

	Params::UIEffectLongShadow_GetShadowSegments Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetShadowSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectLongShadow::GetShadowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetShadowSize");

	Params::UIEffectLongShadow_GetShadowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectLongShadow.GetUseGradientColor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectLongShadow::GetUseGradientColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectLongShadow", "GetUseGradientColor");

	Params::UIEffectLongShadow_GetUseGradientColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectOutline.SetOutlineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectOutline::SetOutlineColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "SetOutlineColor");

	Params::UIEffectOutline_SetOutlineColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectOutline.SetOutlineSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectOutline::SetOutlineSize(const struct FVector2D& NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "SetOutlineSize");

	Params::UIEffectOutline_SetOutlineSize Parms{};

	Parms.NewSize = std::move(NewSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectOutline.SetUse8Direction
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectOutline::SetUse8Direction(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "SetUse8Direction");

	Params::UIEffectOutline_SetUse8Direction Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectOutline.GetOutlineColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectOutline::GetOutlineColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "GetOutlineColor");

	Params::UIEffectOutline_GetOutlineColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectOutline.GetOutlineSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIEffectOutline::GetOutlineSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "GetOutlineSize");

	Params::UIEffectOutline_GetOutlineSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectOutline.GetUse8Direction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectOutline::GetUse8Direction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectOutline", "GetUse8Direction");

	Params::UIEffectOutline_GetUse8Direction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectShadow.SetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    NewColor                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectShadow::SetShadowColor(const struct FColor& NewColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "SetShadowColor");

	Params::UIEffectShadow_SetShadowColor Parms{};

	Parms.NewColor = std::move(NewColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectShadow.SetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 newOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectShadow::SetShadowOffset(const struct FVector2D& newOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "SetShadowOffset");

	Params::UIEffectShadow_SetShadowOffset Parms{};

	Parms.newOffset = std::move(newOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectShadow.GetShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectShadow::GetShadowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "GetShadowColor");

	Params::UIEffectShadow_GetShadowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectShadow.GetShadowOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIEffectShadow::GetShadowOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectShadow", "GetShadowOffset");

	Params::UIEffectShadow_GetShadowOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.SetProperties
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class UUIEffectTextAnimation_Property*>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetProperties(const TArray<class UUIEffectTextAnimation_Property*>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetProperties");

	Params::UIEffectTextAnimation_SetProperties Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.SetProperty
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIEffectTextAnimation_Property*  Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetProperty(int32 Index_0, class UUIEffectTextAnimation_Property* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetProperty");

	Params::UIEffectTextAnimation_SetProperty Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.SetSelector
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIEffectTextAnimation_Selector*  Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetSelector(class UUIEffectTextAnimation_Selector* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetSelector");

	Params::UIEffectTextAnimation_SetSelector Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.SetSelectorOffset
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation::SetSelectorOffset(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "SetSelectorOffset");

	Params::UIEffectTextAnimation_SetSelectorOffset Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation.GetProperties
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class UUIEffectTextAnimation_Property*>ReturnValue                                            (ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<class UUIEffectTextAnimation_Property*> UUIEffectTextAnimation::GetProperties() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetProperties");

	Params::UIEffectTextAnimation_GetProperties Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.GetProperty
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIEffectTextAnimation_Property*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIEffectTextAnimation_Property* UUIEffectTextAnimation::GetProperty(int32 Index_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetProperty");

	Params::UIEffectTextAnimation_GetProperty Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.GetSelector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIEffectTextAnimation_Selector*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIEffectTextAnimation_Selector* UUIEffectTextAnimation::GetSelector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetSelector");

	Params::UIEffectTextAnimation_GetSelector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation.GetSelectorOffset
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation::GetSelectorOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation", "GetSelectorOffset");

	Params::UIEffectTextAnimation_GetSelectorOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionProperty.SetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionProperty::SetPosition(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionProperty", "SetPosition");

	Params::UIEffectTextAnimation_PositionProperty_SetPosition Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionProperty.GetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionProperty::GetPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionProperty", "GetPosition");

	Params::UIEffectTextAnimation_PositionProperty_GetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionRandomProperty::SetMax(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_PositionRandomProperty_SetMax Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionRandomProperty::SetMin(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_PositionRandomProperty_SetMin Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_PositionRandomProperty::SetSeed(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_PositionRandomProperty_SetSeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_PositionRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_PositionRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_PositionRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_PositionRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_PositionRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_PositionRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_PositionRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationProperty.SetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationProperty::SetRotator(const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationProperty", "SetRotator");

	Params::UIEffectTextAnimation_RotationProperty_SetRotator Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationProperty.GetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationProperty::GetRotator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationProperty", "GetRotator");

	Params::UIEffectTextAnimation_RotationProperty_GetRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationRandomProperty::SetMax(const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_RotationRandomProperty_SetMax Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationRandomProperty::SetMin(const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_RotationRandomProperty_SetMin Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationRandomProperty::SetSeed(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_RotationRandomProperty_SetSeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_RotationRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_RotationRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_RotationRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_RotationRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleRandomProperty::SetMax(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "SetMax");

	Params::UIEffectTextAnimation_ScaleRandomProperty_SetMax Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleRandomProperty::SetMin(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "SetMin");

	Params::UIEffectTextAnimation_ScaleRandomProperty_SetMin Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.SetSeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ScaleRandomProperty::SetSeed(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "SetSeed");

	Params::UIEffectTextAnimation_ScaleRandomProperty_SetSeed Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMax
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleRandomProperty::GetMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "GetMax");

	Params::UIEffectTextAnimation_ScaleRandomProperty_GetMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetMin
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UUIEffectTextAnimation_ScaleRandomProperty::GetMin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "GetMin");

	Params::UIEffectTextAnimation_ScaleRandomProperty_GetMin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ScaleRandomProperty.GetSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIEffectTextAnimation_ScaleRandomProperty::GetSeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ScaleRandomProperty", "GetSeed");

	Params::UIEffectTextAnimation_ScaleRandomProperty_GetSeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.SetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorProperty::SetColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "SetColor");

	Params::UIEffectTextAnimation_ColorProperty_SetColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.SetUseHSV
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_ColorProperty::SetUseHSV(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "SetUseHSV");

	Params::UIEffectTextAnimation_ColorProperty_SetUseHSV Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.GetColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUIEffectTextAnimation_ColorProperty::GetColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "GetColor");

	Params::UIEffectTextAnimation_ColorProperty_GetColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_ColorProperty.GetUseHSV
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_ColorProperty::GetUseHSV() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_ColorProperty", "GetUseHSV");

	Params::UIEffectTextAnimation_ColorProperty_GetUseHSV Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.SetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RotationWaveProperty::SetRotator(const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationWaveProperty", "SetRotator");

	Params::UIEffectTextAnimation_RotationWaveProperty_SetRotator Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RotationWaveProperty.GetRotator
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UUIEffectTextAnimation_RotationWaveProperty::GetRotator() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RotationWaveProperty", "GetRotator");

	Params::UIEffectTextAnimation_RotationWaveProperty_GetRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetEnd
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetEnd(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetEnd");

	Params::UIEffectTextAnimation_RangeSelector_SetEnd Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetFlipDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetFlipDirection(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetFlipDirection");

	Params::UIEffectTextAnimation_RangeSelector_SetFlipDirection Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetRange(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetRange");

	Params::UIEffectTextAnimation_RangeSelector_SetRange Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.SetStart
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RangeSelector::SetStart(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "SetStart");

	Params::UIEffectTextAnimation_RangeSelector_SetStart Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetEnd
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RangeSelector::GetEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetEnd");

	Params::UIEffectTextAnimation_RangeSelector_GetEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetFlipDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_RangeSelector::GetFlipDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetFlipDirection");

	Params::UIEffectTextAnimation_RangeSelector_GetFlipDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RangeSelector::GetRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetRange");

	Params::UIEffectTextAnimation_RangeSelector_GetRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RangeSelector.GetStart
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RangeSelector::GetStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RangeSelector", "GetStart");

	Params::UIEffectTextAnimation_RangeSelector_GetStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetFlipDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RichTextTagSelector::SetFlipDirection(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "SetFlipDirection");

	Params::UIEffectTextAnimation_RichTextTagSelector_SetFlipDirection Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetRange
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RichTextTagSelector::SetRange(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "SetRange");

	Params::UIEffectTextAnimation_RichTextTagSelector_SetRange Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.SetTagName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIEffectTextAnimation_RichTextTagSelector::SetTagName(const class FName& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "SetTagName");

	Params::UIEffectTextAnimation_RichTextTagSelector_SetTagName Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetFlipDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIEffectTextAnimation_RichTextTagSelector::GetFlipDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "GetFlipDirection");

	Params::UIEffectTextAnimation_RichTextTagSelector_GetFlipDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIEffectTextAnimation_RichTextTagSelector::GetRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "GetRange");

	Params::UIEffectTextAnimation_RichTextTagSelector_GetRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEffectTextAnimation_RichTextTagSelector.GetTagName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class FName UUIEffectTextAnimation_RichTextTagSelector::GetTagName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEffectTextAnimation_RichTextTagSelector", "GetTagName");

	Params::UIEffectTextAnimation_RichTextTagSelector_GetTagName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerBeginDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerBeginDrag(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerBeginDrag");

	Params::UIEventTriggerComponent_RegisterOnPointerBeginDrag Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerClick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerClick(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerClick");

	Params::UIEventTriggerComponent_RegisterOnPointerClick Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDeselect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIBaseEventData* EventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDeselect(const TDelegate<void(class ULGUIBaseEventData* EventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDeselect");

	Params::UIEventTriggerComponent_RegisterOnPointerDeselect Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDown
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDown(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDown");

	Params::UIEventTriggerComponent_RegisterOnPointerDown Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDrag(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDrag");

	Params::UIEventTriggerComponent_RegisterOnPointerDrag Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerDragDrop
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerDragDrop(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerDragDrop");

	Params::UIEventTriggerComponent_RegisterOnPointerDragDrop Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEndDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerEndDrag(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerEndDrag");

	Params::UIEventTriggerComponent_RegisterOnPointerEndDrag Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerEnter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerEnter(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerEnter");

	Params::UIEventTriggerComponent_RegisterOnPointerEnter Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerExit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerExit(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerExit");

	Params::UIEventTriggerComponent_RegisterOnPointerExit Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerScroll(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerScroll");

	Params::UIEventTriggerComponent_RegisterOnPointerScroll Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerSelect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIBaseEventData* EventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerSelect(const TDelegate<void(class ULGUIBaseEventData* EventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerSelect");

	Params::UIEventTriggerComponent_RegisterOnPointerSelect Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.RegisterOnPointerUp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIEventTriggerComponent::RegisterOnPointerUp(const TDelegate<void(class ULGUIPointerEventData* pointerEventData)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "RegisterOnPointerUp");

	Params::UIEventTriggerComponent_RegisterOnPointerUp Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerBeginDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerBeginDrag(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerBeginDrag");

	Params::UIEventTriggerComponent_UnregisterOnPointerBeginDrag Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerClick
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerClick(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerClick");

	Params::UIEventTriggerComponent_UnregisterOnPointerClick Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDeselect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDeselect(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDeselect");

	Params::UIEventTriggerComponent_UnregisterOnPointerDeselect Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDown
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDown(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDown");

	Params::UIEventTriggerComponent_UnregisterOnPointerDown Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDrag(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDrag");

	Params::UIEventTriggerComponent_UnregisterOnPointerDrag Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerDragDrop
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerDragDrop(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerDragDrop");

	Params::UIEventTriggerComponent_UnregisterOnPointerDragDrop Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEndDrag
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerEndDrag(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerEndDrag");

	Params::UIEventTriggerComponent_UnregisterOnPointerEndDrag Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerEnter
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerEnter(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerEnter");

	Params::UIEventTriggerComponent_UnregisterOnPointerEnter Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerExit
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerExit(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerExit");

	Params::UIEventTriggerComponent_UnregisterOnPointerExit Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerScroll
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerScroll(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerScroll");

	Params::UIEventTriggerComponent_UnregisterOnPointerScroll Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerSelect
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerSelect(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerSelect");

	Params::UIEventTriggerComponent_UnregisterOnPointerSelect Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIEventTriggerComponent.UnregisterOnPointerUp
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIEventTriggerComponent::UnregisterOnPointerUp(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIEventTriggerComponent", "UnregisterOnPointerUp");

	Params::UIEventTriggerComponent_UnregisterOnPointerUp Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayout.SetColumns
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIFlexibleGridLayoutCellData>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayout::SetColumns(const TArray<struct FUIFlexibleGridLayoutCellData>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "SetColumns");

	Params::UIFlexibleGridLayout_SetColumns Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayout::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "SetPadding");

	Params::UIFlexibleGridLayout_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayout.SetRows
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIFlexibleGridLayoutCellData>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayout::SetRows(const TArray<struct FUIFlexibleGridLayoutCellData>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "SetRows");

	Params::UIFlexibleGridLayout_SetRows Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayout.SetSpacing
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFlexibleGridLayout::SetSpacing(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "SetSpacing");

	Params::UIFlexibleGridLayout_SetSpacing Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFlexibleGridLayout.GetColumnCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIFlexibleGridLayout::GetColumnCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "GetColumnCount");

	Params::UIFlexibleGridLayout_GetColumnCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayout.GetColumns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIFlexibleGridLayoutCellData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIFlexibleGridLayoutCellData> UUIFlexibleGridLayout::GetColumns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "GetColumns");

	Params::UIFlexibleGridLayout_GetColumns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIFlexibleGridLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "GetPadding");

	Params::UIFlexibleGridLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayout.GetRowCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIFlexibleGridLayout::GetRowCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "GetRowCount");

	Params::UIFlexibleGridLayout_GetRowCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayout.GetRows
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIFlexibleGridLayoutCellData>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIFlexibleGridLayoutCellData> UUIFlexibleGridLayout::GetRows() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "GetRows");

	Params::UIFlexibleGridLayout_GetRows Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFlexibleGridLayout.GetSpacing
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIFlexibleGridLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFlexibleGridLayout", "GetSpacing");

	Params::UIFlexibleGridLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIFrameCapture.DoCapture
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(class UTextureRenderTarget2D* CapturedFrame)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIFrameCapture::DoCapture(const TDelegate<void(class UTextureRenderTarget2D* CapturedFrame)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameCapture", "DoCapture");

	Params::UIFrameCapture_DoCapture Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIFrameCapture.GetCapturedFrame
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UUIFrameCapture::GetCapturedFrame() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIFrameCapture", "GetCapturedFrame");

	Params::UIFrameCapture_GetCapturedFrame Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Alpha
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float&                            InAlpha                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_ModifyCharGeometry_Alpha(class UUIText* InUIText, int32 InCharIndex, const float& InAlpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_ModifyCharGeometry_Alpha");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Alpha Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;
	Parms.InAlpha = InAlpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Color
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FColor&                    InColor                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_ModifyCharGeometry_Color(class UUIText* InUIText, int32 InCharIndex, const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_ModifyCharGeometry_Color");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Color Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;
	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Position
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIGeometryModifierHelper_UITextModifyPositionTypeInPositionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_ModifyCharGeometry_Position(class UUIText* InUIText, int32 InCharIndex, const struct FVector& InPosition, ELGUIGeometryModifierHelper_UITextModifyPositionType InPositionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_ModifyCharGeometry_Position");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Position Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;
	Parms.InPosition = std::move(InPosition);
	Parms.InPositionType = InPositionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Rotate
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_ModifyCharGeometry_Rotate(class UUIText* InUIText, int32 InCharIndex, const struct FRotator& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_ModifyCharGeometry_Rotate");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Rotate Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;
	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Scale
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InScale                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_ModifyCharGeometry_Scale(class UUIText* InUIText, int32 InCharIndex, const struct FVector& InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_ModifyCharGeometry_Scale");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Scale Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;
	Parms.InScale = std::move(InScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_ModifyCharGeometry_Transform
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELGUIGeometryModifierHelper_UITextModifyPositionTypeInPositionType                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   InPosition                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   InScale                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_ModifyCharGeometry_Transform(class UUIText* InUIText, int32 InCharIndex, ELGUIGeometryModifierHelper_UITextModifyPositionType InPositionType, const struct FVector& InPosition, const struct FRotator& InRotator, const struct FVector& InScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_ModifyCharGeometry_Transform");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_ModifyCharGeometry_Transform Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;
	Parms.InPositionType = InPositionType;
	Parms.InPosition = std::move(InPosition);
	Parms.InRotator = std::move(InRotator);
	Parms.InScale = std::move(InScale);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_GetCharGeometry_AbsolutePosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         OutPosition                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULGUIGeometryModifierHelper::UITextHelperFunction_GetCharGeometry_AbsolutePosition(class UUIText* InUIText, int32 InCharIndex, struct FVector* OutPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_GetCharGeometry_AbsolutePosition");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_GetCharGeometry_AbsolutePosition Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPosition != nullptr)
		*OutPosition = std::move(Parms.OutPosition);
}


// Function LGUI.LGUIGeometryModifierHelper.UITextHelperFunction_GetCharHorizontalPositionRatio01
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIText*                          InUIText                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InCharIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULGUIGeometryModifierHelper::UITextHelperFunction_GetCharHorizontalPositionRatio01(class UUIText* InUIText, int32 InCharIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LGUIGeometryModifierHelper", "UITextHelperFunction_GetCharHorizontalPositionRatio01");

	Params::LGUIGeometryModifierHelper_UITextHelperFunction_GetCharHorizontalPositionRatio01 Parms{};

	Parms.InUIText = InUIText;
	Parms.InCharIndex = InCharIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.SetAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutAlignmentType                Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetAlign(ELGUILayoutAlignmentType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetAlign");

	Params::UIHorizontalLayout_SetAlign Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetControlChildHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetControlChildHeight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetControlChildHeight");

	Params::UIHorizontalLayout_SetControlChildHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetControlChildWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetControlChildWidth(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetControlChildWidth");

	Params::UIHorizontalLayout_SetControlChildWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetExpandChildHeightArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetExpandChildHeightArea(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetExpandChildHeightArea");

	Params::UIHorizontalLayout_SetExpandChildHeightArea Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetExpandChildWidthArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetExpandChildWidthArea(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetExpandChildWidthArea");

	Params::UIHorizontalLayout_SetExpandChildWidthArea Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetExpendChildrenHeight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetExpendChildrenHeight");

	Params::UIHorizontalLayout_SetExpendChildrenHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetExpendChildrenWidth(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetExpendChildrenWidth");

	Params::UIHorizontalLayout_SetExpendChildrenWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetHeightFitToChildren");

	Params::UIHorizontalLayout_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetHeightFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetHeightFitToChildrenFromMinToMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetHeightFitToChildrenFromMinToMax");

	Params::UIHorizontalLayout_SetHeightFitToChildrenFromMinToMax Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetPadding");

	Params::UIHorizontalLayout_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetSpacing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetSpacing(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetSpacing");

	Params::UIHorizontalLayout_SetSpacing Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetUseChildScaleOnWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetUseChildScaleOnWidth(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetUseChildScaleOnWidth");

	Params::UIHorizontalLayout_SetUseChildScaleOnWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIHorizontalLayout::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "SetWidthFitToChildren");

	Params::UIHorizontalLayout_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIHorizontalLayout.GetActuralRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIHorizontalLayout::GetActuralRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetActuralRange");

	Params::UIHorizontalLayout_GetActuralRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutAlignmentType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutAlignmentType UUIHorizontalLayout::GetAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetAlign");

	Params::UIHorizontalLayout_GetAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetControlChildHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetControlChildHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetControlChildHeight");

	Params::UIHorizontalLayout_GetControlChildHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetControlChildWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetControlChildWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetControlChildWidth");

	Params::UIHorizontalLayout_GetControlChildWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetExpandChildHeightArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetExpandChildHeightArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetExpandChildHeightArea");

	Params::UIHorizontalLayout_GetExpandChildHeightArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetExpandChildWidthArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetExpandChildWidthArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetExpandChildWidthArea");

	Params::UIHorizontalLayout_GetExpandChildWidthArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetExpendChildrenHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetExpendChildrenHeight");

	Params::UIHorizontalLayout_GetExpendChildrenHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetExpendChildrenWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetExpendChildrenWidth");

	Params::UIHorizontalLayout_GetExpendChildrenWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetHeightFitToChildren");

	Params::UIHorizontalLayout_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetHeightFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIHorizontalLayout::GetHeightFitToChildrenFromMinToMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetHeightFitToChildrenFromMinToMax");

	Params::UIHorizontalLayout_GetHeightFitToChildrenFromMinToMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIHorizontalLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetPadding");

	Params::UIHorizontalLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetSpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIHorizontalLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetSpacing");

	Params::UIHorizontalLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetUseChildScaleOnWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetUseChildScaleOnWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetUseChildScaleOnWidth");

	Params::UIHorizontalLayout_GetUseChildScaleOnWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIHorizontalLayout.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIHorizontalLayout::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIHorizontalLayout", "GetWidthFitToChildren");

	Params::UIHorizontalLayout_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutElement.SetConstantSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetConstantSize(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetConstantSize");

	Params::UILayoutElement_SetConstantSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.SetConstantSizeType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUILayoutElement_ConstantSizeType       Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetConstantSizeType(EUILayoutElement_ConstantSizeType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetConstantSizeType");

	Params::UILayoutElement_SetConstantSizeType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.SetLayoutType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELayoutElementType                      InType                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetLayoutType(ELayoutElementType InType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetLayoutType");

	Params::UILayoutElement_SetLayoutType Parms{};

	Parms.InType = InType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.SetRatioSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutElement::SetRatioSize(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "SetRatioSize");

	Params::UILayoutElement_SetRatioSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UILayoutElement.GetConstantSizeType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUILayoutElement_ConstantSizeType       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUILayoutElement_ConstantSizeType UUILayoutElement::GetConstantSizeType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutElement", "GetConstantSizeType");

	Params::UILayoutElement_GetConstantSizeType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyAnchoredPositionAnimation
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation_CustomAnimation::ReceiveApplyAnchoredPositionAnimation(const struct FVector2D& Value, class UUIItem* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveApplyAnchoredPositionAnimation");

	Params::UILayoutWithAnimation_CustomAnimation_ReceiveApplyAnchoredPositionAnimation Parms{};

	Parms.Value = std::move(Value);
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyHeightAnimation
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation_CustomAnimation::ReceiveApplyHeightAnimation(float Value, class UUIItem* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveApplyHeightAnimation");

	Params::UILayoutWithAnimation_CustomAnimation_ReceiveApplyHeightAnimation Parms{};

	Parms.Value = Value;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyRotatorAnimation
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FRotator&                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation_CustomAnimation::ReceiveApplyRotatorAnimation(const struct FRotator& Value, class UUIItem* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveApplyRotatorAnimation");

	Params::UILayoutWithAnimation_CustomAnimation_ReceiveApplyRotatorAnimation Parms{};

	Parms.Value = std::move(Value);
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplySizeDeltaAnimation
// (Event, Protected, HasOutParams, HasDefaults, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation_CustomAnimation::ReceiveApplySizeDeltaAnimation(const struct FVector2D& Value, class UUIItem* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveApplySizeDeltaAnimation");

	Params::UILayoutWithAnimation_CustomAnimation_ReceiveApplySizeDeltaAnimation Parms{};

	Parms.Value = std::move(Value);
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveApplyWidthAnimation
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIItem*                          Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUILayoutWithAnimation_CustomAnimation::ReceiveApplyWidthAnimation(float Value, class UUIItem* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveApplyWidthAnimation");

	Params::UILayoutWithAnimation_CustomAnimation_ReceiveApplyWidthAnimation Parms{};

	Parms.Value = Value;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveBeginSetupAnimations
// (Event, Protected, BlueprintEvent)

void UUILayoutWithAnimation_CustomAnimation::ReceiveBeginSetupAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveBeginSetupAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UILayoutWithAnimation_CustomAnimation.ReceiveEndSetupAnimations
// (Event, Protected, BlueprintEvent)

void UUILayoutWithAnimation_CustomAnimation::ReceiveEndSetupAnimations()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UILayoutWithAnimation_CustomAnimation", "ReceiveEndSetupAnimations");

	UObject::ProcessEvent(Func, nullptr);
}


// Function LGUI.UIPanelLayoutSlotWithOverrideOrder.SetOverrideLayoutOrder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayoutSlotWithOverrideOrder::SetOverrideLayoutOrder(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayoutSlotWithOverrideOrder", "SetOverrideLayoutOrder");

	Params::UIPanelLayoutSlotWithOverrideOrder_SetOverrideLayoutOrder Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayoutSlotWithOverrideOrder.GetOverrideLayoutOrder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayoutSlotWithOverrideOrder::GetOverrideLayoutOrder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayoutSlotWithOverrideOrder", "GetOverrideLayoutOrder");

	Params::UIPanelLayoutSlotWithOverrideOrder_GetOverrideLayoutOrder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid.SetColumns
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIPanelLayout_FlexibleGridSize>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid::SetColumns(const TArray<struct FUIPanelLayout_FlexibleGridSize>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid", "SetColumns");

	Params::UIPanelLayout_FlexibleGrid_SetColumns Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid.SetRows
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FUIPanelLayout_FlexibleGridSize>&Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid::SetRows(const TArray<struct FUIPanelLayout_FlexibleGridSize>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid", "SetRows");

	Params::UIPanelLayout_FlexibleGrid_SetRows Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid.GetColumns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIPanelLayout_FlexibleGridSize>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIPanelLayout_FlexibleGridSize> UUIPanelLayout_FlexibleGrid::GetColumns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid", "GetColumns");

	Params::UIPanelLayout_FlexibleGrid_GetColumns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid.GetRows
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIPanelLayout_FlexibleGridSize>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIPanelLayout_FlexibleGridSize> UUIPanelLayout_FlexibleGrid::GetRows() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid", "GetRows");

	Params::UIPanelLayout_FlexibleGrid_GetRows Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetColumn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetColumn(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetColumn");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetColumn Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetColumnSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetColumnSpan(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetColumnSpan");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetColumnSpan Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetHorizontalAlignment(EHorizontalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetHorizontalAlignment");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetHorizontalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetPadding");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetRow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetRow(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetRow");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetRow Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetRowSpan
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetRowSpan(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetRowSpan");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetRowSpan Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_FlexibleGrid_Slot::SetVerticalAlignment(EVerticalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "SetVerticalAlignment");

	Params::UIPanelLayout_FlexibleGrid_Slot_SetVerticalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetColumn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayout_FlexibleGrid_Slot::GetColumn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetColumn");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetColumn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetColumnSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayout_FlexibleGrid_Slot::GetColumnSpan() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetColumnSpan");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetColumnSpan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHorizontalAlignment                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHorizontalAlignment UUIPanelLayout_FlexibleGrid_Slot::GetHorizontalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetHorizontalAlignment");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetHorizontalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMargin                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMargin UUIPanelLayout_FlexibleGrid_Slot::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetPadding");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetRow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayout_FlexibleGrid_Slot::GetRow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetRow");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetRowSpan
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayout_FlexibleGrid_Slot::GetRowSpan() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetRowSpan");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetRowSpan Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_FlexibleGrid_Slot.GetVerticalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVerticalAlignment                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVerticalAlignment UUIPanelLayout_FlexibleGrid_Slot::GetVerticalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_FlexibleGrid_Slot", "GetVerticalAlignment");

	Params::UIPanelLayout_FlexibleGrid_Slot_GetVerticalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox", "SetHeightFitToChildren");

	Params::UIPanelLayout_HorizontalBox_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox.SetHeightFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox::SetHeightFitToChildrenFromMinToMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox", "SetHeightFitToChildrenFromMinToMax");

	Params::UIPanelLayout_HorizontalBox_SetHeightFitToChildrenFromMinToMax Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox", "SetWidthFitToChildren");

	Params::UIPanelLayout_HorizontalBox_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayout_HorizontalBox::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox", "GetHeightFitToChildren");

	Params::UIPanelLayout_HorizontalBox_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox.GetHeightFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPanelLayout_HorizontalBox::GetHeightFitToChildrenFromMinToMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox", "GetHeightFitToChildrenFromMinToMax");

	Params::UIPanelLayout_HorizontalBox_GetHeightFitToChildrenFromMinToMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayout_HorizontalBox::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox", "GetWidthFitToChildren");

	Params::UIPanelLayout_HorizontalBox_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox_Slot::SetHorizontalAlignment(EHorizontalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "SetHorizontalAlignment");

	Params::UIPanelLayout_HorizontalBox_Slot_SetHorizontalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox_Slot::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "SetPadding");

	Params::UIPanelLayout_HorizontalBox_Slot_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetSizeRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateChildSize&           Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox_Slot::SetSizeRule(const struct FSlateChildSize& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "SetSizeRule");

	Params::UIPanelLayout_HorizontalBox_Slot_SetSizeRule Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_HorizontalBox_Slot::SetVerticalAlignment(EVerticalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "SetVerticalAlignment");

	Params::UIPanelLayout_HorizontalBox_Slot_SetVerticalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHorizontalAlignment                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHorizontalAlignment UUIPanelLayout_HorizontalBox_Slot::GetHorizontalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "GetHorizontalAlignment");

	Params::UIPanelLayout_HorizontalBox_Slot_GetHorizontalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMargin                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMargin UUIPanelLayout_HorizontalBox_Slot::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "GetPadding");

	Params::UIPanelLayout_HorizontalBox_Slot_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetSizeRule
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateChildSize            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSlateChildSize UUIPanelLayout_HorizontalBox_Slot::GetSizeRule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "GetSizeRule");

	Params::UIPanelLayout_HorizontalBox_Slot_GetSizeRule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_HorizontalBox_Slot.GetVerticalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVerticalAlignment                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVerticalAlignment UUIPanelLayout_HorizontalBox_Slot::GetVerticalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_HorizontalBox_Slot", "GetVerticalAlignment");

	Params::UIPanelLayout_HorizontalBox_Slot_GetVerticalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "SetHeightFitToChildren");

	Params::UIPanelLayout_UniformGrid_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid.SetHeightFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid::SetHeightFitToChildrenFromMinToMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "SetHeightFitToChildrenFromMinToMax");

	Params::UIPanelLayout_UniformGrid_SetHeightFitToChildrenFromMinToMax Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "SetWidthFitToChildren");

	Params::UIPanelLayout_UniformGrid_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid.SetWidthFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid::SetWidthFitToChildrenFromMinToMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "SetWidthFitToChildrenFromMinToMax");

	Params::UIPanelLayout_UniformGrid_SetWidthFitToChildrenFromMinToMax Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayout_UniformGrid::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "GetHeightFitToChildren");

	Params::UIPanelLayout_UniformGrid_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid.GetHeightFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPanelLayout_UniformGrid::GetHeightFitToChildrenFromMinToMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "GetHeightFitToChildrenFromMinToMax");

	Params::UIPanelLayout_UniformGrid_GetHeightFitToChildrenFromMinToMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayout_UniformGrid::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "GetWidthFitToChildren");

	Params::UIPanelLayout_UniformGrid_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid.GetWidthFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPanelLayout_UniformGrid::GetWidthFitToChildrenFromMinToMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid", "GetWidthFitToChildrenFromMinToMax");

	Params::UIPanelLayout_UniformGrid_GetWidthFitToChildrenFromMinToMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetColumn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid_Slot::SetColumn(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "SetColumn");

	Params::UIPanelLayout_UniformGrid_Slot_SetColumn Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid_Slot::SetHorizontalAlignment(EHorizontalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "SetHorizontalAlignment");

	Params::UIPanelLayout_UniformGrid_Slot_SetHorizontalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid_Slot::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "SetPadding");

	Params::UIPanelLayout_UniformGrid_Slot_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetRow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid_Slot::SetRow(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "SetRow");

	Params::UIPanelLayout_UniformGrid_Slot_SetRow Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_UniformGrid_Slot::SetVerticalAlignment(EVerticalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "SetVerticalAlignment");

	Params::UIPanelLayout_UniformGrid_Slot_SetVerticalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetColumn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayout_UniformGrid_Slot::GetColumn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "GetColumn");

	Params::UIPanelLayout_UniformGrid_Slot_GetColumn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHorizontalAlignment                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHorizontalAlignment UUIPanelLayout_UniformGrid_Slot::GetHorizontalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "GetHorizontalAlignment");

	Params::UIPanelLayout_UniformGrid_Slot_GetHorizontalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMargin                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMargin UUIPanelLayout_UniformGrid_Slot::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "GetPadding");

	Params::UIPanelLayout_UniformGrid_Slot_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetRow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPanelLayout_UniformGrid_Slot::GetRow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "GetRow");

	Params::UIPanelLayout_UniformGrid_Slot_GetRow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_UniformGrid_Slot.GetVerticalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVerticalAlignment                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVerticalAlignment UUIPanelLayout_UniformGrid_Slot::GetVerticalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_UniformGrid_Slot", "GetVerticalAlignment");

	Params::UIPanelLayout_UniformGrid_Slot_GetVerticalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox", "SetHeightFitToChildren");

	Params::UIPanelLayout_VerticalBox_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox", "SetWidthFitToChildren");

	Params::UIPanelLayout_VerticalBox_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox.SetWidthFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox::SetWidthFitToChildrenFromMinToMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox", "SetWidthFitToChildrenFromMinToMax");

	Params::UIPanelLayout_VerticalBox_SetWidthFitToChildrenFromMinToMax Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayout_VerticalBox::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox", "GetHeightFitToChildren");

	Params::UIPanelLayout_VerticalBox_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPanelLayout_VerticalBox::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox", "GetWidthFitToChildren");

	Params::UIPanelLayout_VerticalBox_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox.GetWidthFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPanelLayout_VerticalBox::GetWidthFitToChildrenFromMinToMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox", "GetWidthFitToChildrenFromMinToMax");

	Params::UIPanelLayout_VerticalBox_GetWidthFitToChildrenFromMinToMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox_Slot::SetHorizontalAlignment(EHorizontalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "SetHorizontalAlignment");

	Params::UIPanelLayout_VerticalBox_Slot_SetHorizontalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox_Slot::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "SetPadding");

	Params::UIPanelLayout_VerticalBox_Slot_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetSizeRule
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateChildSize&           Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox_Slot::SetSizeRule(const struct FSlateChildSize& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "SetSizeRule");

	Params::UIPanelLayout_VerticalBox_Slot_SetSizeRule Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.SetVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPanelLayout_VerticalBox_Slot::SetVerticalAlignment(EVerticalAlignment Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "SetVerticalAlignment");

	Params::UIPanelLayout_VerticalBox_Slot_SetVerticalAlignment Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetHorizontalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHorizontalAlignment                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHorizontalAlignment UUIPanelLayout_VerticalBox_Slot::GetHorizontalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "GetHorizontalAlignment");

	Params::UIPanelLayout_VerticalBox_Slot_GetHorizontalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMargin                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMargin UUIPanelLayout_VerticalBox_Slot::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "GetPadding");

	Params::UIPanelLayout_VerticalBox_Slot_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetSizeRule
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FSlateChildSize            ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FSlateChildSize UUIPanelLayout_VerticalBox_Slot::GetSizeRule() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "GetSizeRule");

	Params::UIPanelLayout_VerticalBox_Slot_GetSizeRule Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPanelLayout_VerticalBox_Slot.GetVerticalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVerticalAlignment                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVerticalAlignment UUIPanelLayout_VerticalBox_Slot::GetVerticalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPanelLayout_VerticalBox_Slot", "GetVerticalAlignment");

	Params::UIPanelLayout_VerticalBox_Slot_GetVerticalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.EndAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygon::EndAngleTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "EndAngleTo");

	Params::UIPolygon_EndAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.SetEndAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetEndAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetEndAngle");

	Params::UIPolygon_SetEndAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetFullCycle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetFullCycle(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetFullCycle");

	Params::UIPolygon_SetFullCycle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetSides
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetSides(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetSides");

	Params::UIPolygon_SetSides Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetStartAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetStartAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetStartAngle");

	Params::UIPolygon_SetStartAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetUVType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIPolygonUVType                        Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygon::SetUVType(EUIPolygonUVType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetUVType");

	Params::UIPolygon_SetUVType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.SetVertexOffsetArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIPolygon::SetVertexOffsetArray(const TArray<float>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "SetVertexOffsetArray");

	Params::UIPolygon_SetVertexOffsetArray Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygon.StartAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygon::StartAngleTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "StartAngleTo");

	Params::UIPolygon_StartAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetEndAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygon::GetEndAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetEndAngle");

	Params::UIPolygon_GetEndAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetFullCycle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPolygon::GetFullCycle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetFullCycle");

	Params::UIPolygon_GetFullCycle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetSides
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPolygon::GetSides() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetSides");

	Params::UIPolygon_GetSides Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetStartAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygon::GetStartAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetStartAngle");

	Params::UIPolygon_GetStartAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetUVType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIPolygonUVType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIPolygonUVType UUIPolygon::GetUVType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetUVType");

	Params::UIPolygon_GetUVType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygon.GetVertexOffsetArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<float>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<float> UUIPolygon::GetVertexOffsetArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygon", "GetVertexOffsetArray");

	Params::UIPolygon_GetVertexOffsetArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonActor.GetUIPolygon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIPolygon*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIPolygon* AUIPolygonActor::GetUIPolygon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonActor", "GetUIPolygon");

	Params::UIPolygonActor_GetUIPolygon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.EndAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygonLine::EndAngleTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "EndAngleTo");

	Params::UIPolygonLine_EndAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.SetEndAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetEndAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetEndAngle");

	Params::UIPolygonLine_SetEndAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetFullCycle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetFullCycle(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetFullCycle");

	Params::UIPolygonLine_SetFullCycle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetSides
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetSides(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetSides");

	Params::UIPolygonLine_SetSides Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetStartAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetStartAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetStartAngle");

	Params::UIPolygonLine_SetStartAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.SetVertexOffsetArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<float>&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUIPolygonLine::SetVertexOffsetArray(const TArray<float>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "SetVertexOffsetArray");

	Params::UIPolygonLine_SetVertexOffsetArray Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIPolygonLine.StartAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIPolygonLine::StartAngleTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "StartAngleTo");

	Params::UIPolygonLine_StartAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetEndAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygonLine::GetEndAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetEndAngle");

	Params::UIPolygonLine_GetEndAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetFullCycle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIPolygonLine::GetFullCycle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetFullCycle");

	Params::UIPolygonLine_GetFullCycle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetSides
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIPolygonLine::GetSides() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetSides");

	Params::UIPolygonLine_GetSides Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetStartAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIPolygonLine::GetStartAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetStartAngle");

	Params::UIPolygonLine_GetStartAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLine.GetVertexOffsetArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<float>                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<float> UUIPolygonLine::GetVertexOffsetArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLine", "GetVertexOffsetArray");

	Params::UIPolygonLine_GetVertexOffsetArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIPolygonLineActor.GetUIPolygonLine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIPolygonLine*                   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIPolygonLine* AUIPolygonLineActor::GetUIPolygonLine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIPolygonLineActor", "GetUIPolygonLine");

	Params::UIPolygonLineActor_GetUIPolygonLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyAlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyAlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyAlphaTo");

	Params::UIProceduralRect_BodyAlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyColorTo");

	Params::UIProceduralRect_BodyColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyGradientAlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyGradientAlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyGradientAlphaTo");

	Params::UIProceduralRect_BodyGradientAlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyGradientCenterTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyGradientCenterTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyGradientCenterTo");

	Params::UIProceduralRect_BodyGradientCenterTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyGradientColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyGradientColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyGradientColorTo");

	Params::UIProceduralRect_BodyGradientColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyGradientRadiusTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyGradientRadiusTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyGradientRadiusTo");

	Params::UIProceduralRect_BodyGradientRadiusTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BodyGradientRotationTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BodyGradientRotationTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BodyGradientRotationTo");

	Params::UIProceduralRect_BodyGradientRotationTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderAlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderAlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderAlphaTo");

	Params::UIProceduralRect_BorderAlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderColorTo");

	Params::UIProceduralRect_BorderColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderGradientAlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderGradientAlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderGradientAlphaTo");

	Params::UIProceduralRect_BorderGradientAlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderGradientCenterTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderGradientCenterTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderGradientCenterTo");

	Params::UIProceduralRect_BorderGradientCenterTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderGradientColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderGradientColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderGradientColorTo");

	Params::UIProceduralRect_BorderGradientColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderGradientRadiusTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderGradientRadiusTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderGradientRadiusTo");

	Params::UIProceduralRect_BorderGradientRadiusTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderGradientRotationTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderGradientRotationTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderGradientRotationTo");

	Params::UIProceduralRect_BorderGradientRotationTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.BorderWidthTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::BorderWidthTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "BorderWidthTo");

	Params::UIProceduralRect_BorderWidthTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.CornerRadiusTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::CornerRadiusTo(const struct FVector4& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "CornerRadiusTo");

	Params::UIProceduralRect_CornerRadiusTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.InnerShadowAlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::InnerShadowAlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "InnerShadowAlphaTo");

	Params::UIProceduralRect_InnerShadowAlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.InnerShadowAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::InnerShadowAngleTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "InnerShadowAngleTo");

	Params::UIProceduralRect_InnerShadowAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.InnerShadowBlurTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::InnerShadowBlurTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "InnerShadowBlurTo");

	Params::UIProceduralRect_InnerShadowBlurTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.InnerShadowColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::InnerShadowColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "InnerShadowColorTo");

	Params::UIProceduralRect_InnerShadowColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.InnerShadowDistanceTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::InnerShadowDistanceTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "InnerShadowDistanceTo");

	Params::UIProceduralRect_InnerShadowDistanceTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.InnerShadowSizeTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::InnerShadowSizeTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "InnerShadowSizeTo");

	Params::UIProceduralRect_InnerShadowSizeTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.OuterShadowAlphaTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::OuterShadowAlphaTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "OuterShadowAlphaTo");

	Params::UIProceduralRect_OuterShadowAlphaTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.OuterShadowAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::OuterShadowAngleTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "OuterShadowAngleTo");

	Params::UIProceduralRect_OuterShadowAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.OuterShadowBlurTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::OuterShadowBlurTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "OuterShadowBlurTo");

	Params::UIProceduralRect_OuterShadowBlurTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.OuterShadowColorTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::OuterShadowColorTo(const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "OuterShadowColorTo");

	Params::UIProceduralRect_OuterShadowColorTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.OuterShadowDistanceTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::OuterShadowDistanceTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "OuterShadowDistanceTo");

	Params::UIProceduralRect_OuterShadowDistanceTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.OuterShadowSizeTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::OuterShadowSizeTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "OuterShadowSizeTo");

	Params::UIProceduralRect_OuterShadowSizeTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.RadialFillAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::RadialFillAngleTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "RadialFillAngleTo");

	Params::UIProceduralRect_RadialFillAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.RadialFillCenterTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::RadialFillCenterTo(const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "RadialFillCenterTo");

	Params::UIProceduralRect_RadialFillCenterTo Parms{};

	Parms.endValue = std::move(endValue);
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.RadialFillRotationTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             Ease                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIProceduralRect::RadialFillRotationTo(float endValue, float Duration, float Delay, ELTweenEase Ease)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "RadialFillRotationTo");

	Params::UIProceduralRect_RadialFillRotationTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.Ease = Ease;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.SetBodyColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyColor");

	Params::UIProceduralRect_SetBodyColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyGradientCenter
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyGradientCenter(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyGradientCenter");

	Params::UIProceduralRect_SetBodyGradientCenter Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyGradientCenterUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyGradientCenterUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyGradientCenterUnitMode");

	Params::UIProceduralRect_SetBodyGradientCenterUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyGradientColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyGradientColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyGradientColor");

	Params::UIProceduralRect_SetBodyGradientColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyGradientRadius
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyGradientRadius(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyGradientRadius");

	Params::UIProceduralRect_SetBodyGradientRadius Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyGradientRadiusUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyGradientRadiusUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyGradientRadiusUnitMode");

	Params::UIProceduralRect_SetBodyGradientRadiusUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyGradientRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyGradientRotation(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyGradientRotation");

	Params::UIProceduralRect_SetBodyGradientRotation Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodySpriteTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUISpriteData_BaseObject*       Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodySpriteTexture(class ULGUISpriteData_BaseObject* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodySpriteTexture");

	Params::UIProceduralRect_SetBodySpriteTexture Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyTexture
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyTexture(class UTexture* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyTexture");

	Params::UIProceduralRect_SetBodyTexture Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyTextureMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralBodyTextureMode            Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyTextureMode(EUIProceduralBodyTextureMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyTextureMode");

	Params::UIProceduralRect_SetBodyTextureMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBodyTextureScaleMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectTextureScaleMode       Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBodyTextureScaleMode(EUIProceduralRectTextureScaleMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBodyTextureScaleMode");

	Params::UIProceduralRect_SetBodyTextureScaleMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderColor");

	Params::UIProceduralRect_SetBorderColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderGradientCenter
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderGradientCenter(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderGradientCenter");

	Params::UIProceduralRect_SetBorderGradientCenter Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderGradientCenterUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderGradientCenterUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderGradientCenterUnitMode");

	Params::UIProceduralRect_SetBorderGradientCenterUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderGradientColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderGradientColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderGradientColor");

	Params::UIProceduralRect_SetBorderGradientColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderGradientRadius
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderGradientRadius(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderGradientRadius");

	Params::UIProceduralRect_SetBorderGradientRadius Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderGradientRadiusUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderGradientRadiusUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderGradientRadiusUnitMode");

	Params::UIProceduralRect_SetBorderGradientRadiusUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderGradientRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderGradientRotation(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderGradientRotation");

	Params::UIProceduralRect_SetBorderGradientRotation Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderWidth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderWidth");

	Params::UIProceduralRect_SetBorderWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetBorderWidthUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetBorderWidthUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetBorderWidthUnitMode");

	Params::UIProceduralRect_SetBorderWidthUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetCornerRadius
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetCornerRadius(const struct FVector4& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetCornerRadius");

	Params::UIProceduralRect_SetCornerRadius Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetCornerRadiusUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetCornerRadiusUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetCornerRadiusUnitMode");

	Params::UIProceduralRect_SetCornerRadiusUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableBody
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableBody(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableBody");

	Params::UIProceduralRect_SetEnableBody Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableBodyGradient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableBodyGradient(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableBodyGradient");

	Params::UIProceduralRect_SetEnableBodyGradient Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableBorder
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableBorder(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableBorder");

	Params::UIProceduralRect_SetEnableBorder Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableBorderGradient
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableBorderGradient(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableBorderGradient");

	Params::UIProceduralRect_SetEnableBorderGradient Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableInnerShadow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableInnerShadow(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableInnerShadow");

	Params::UIProceduralRect_SetEnableInnerShadow Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableOuterShadow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableOuterShadow(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableOuterShadow");

	Params::UIProceduralRect_SetEnableOuterShadow Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetEnableRadialFill
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetEnableRadialFill(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetEnableRadialFill");

	Params::UIProceduralRect_SetEnableRadialFill Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowAngle");

	Params::UIProceduralRect_SetInnerShadowAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowBlur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowBlur(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowBlur");

	Params::UIProceduralRect_SetInnerShadowBlur Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowBlurUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowBlurUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowBlurUnitMode");

	Params::UIProceduralRect_SetInnerShadowBlurUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowColor");

	Params::UIProceduralRect_SetInnerShadowColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowDistance(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowDistance");

	Params::UIProceduralRect_SetInnerShadowDistance Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowDistanceUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowDistanceUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowDistanceUnitMode");

	Params::UIProceduralRect_SetInnerShadowDistanceUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowSize(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowSize");

	Params::UIProceduralRect_SetInnerShadowSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetInnerShadowSizeUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetInnerShadowSizeUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetInnerShadowSizeUnitMode");

	Params::UIProceduralRect_SetInnerShadowSizeUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowAngle");

	Params::UIProceduralRect_SetOuterShadowAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowBlur
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowBlur(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowBlur");

	Params::UIProceduralRect_SetOuterShadowBlur Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowBlurUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowBlurUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowBlurUnitMode");

	Params::UIProceduralRect_SetOuterShadowBlurUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowColor");

	Params::UIProceduralRect_SetOuterShadowColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowDistance(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowDistance");

	Params::UIProceduralRect_SetOuterShadowDistance Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowDistanceUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowDistanceUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowDistanceUnitMode");

	Params::UIProceduralRect_SetOuterShadowDistanceUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowSize(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowSize");

	Params::UIProceduralRect_SetOuterShadowSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetOuterShadowSizeUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetOuterShadowSizeUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetOuterShadowSizeUnitMode");

	Params::UIProceduralRect_SetOuterShadowSizeUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetRadialFillAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetRadialFillAngle(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetRadialFillAngle");

	Params::UIProceduralRect_SetRadialFillAngle Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetRadialFillCenter
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetRadialFillCenter(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetRadialFillCenter");

	Params::UIProceduralRect_SetRadialFillCenter Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetRadialFillCenterUnitMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIProceduralRectUnitMode               Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetRadialFillCenterUnitMode(EUIProceduralRectUnitMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetRadialFillCenterUnitMode");

	Params::UIProceduralRect_SetRadialFillCenterUnitMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetRadialFillRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetRadialFillRotation(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetRadialFillRotation");

	Params::UIProceduralRect_SetRadialFillRotation Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetRaycastSupportCornerRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetRaycastSupportCornerRadius(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetRaycastSupportCornerRadius");

	Params::UIProceduralRect_SetRaycastSupportCornerRadius Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetSizeFromBodyTexture
// (Final, Native, Public, BlueprintCallable)

void UUIProceduralRect::SetSizeFromBodyTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetSizeFromBodyTexture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.SetSoftEdge
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIProceduralRect::SetSoftEdge(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "SetSoftEdge");

	Params::UIProceduralRect_SetSoftEdge Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIProceduralRect.GetBodyColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UUIProceduralRect::GetBodyColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyColor");

	Params::UIProceduralRect_GetBodyColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyGradientCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2f                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2f UUIProceduralRect::GetBodyGradientCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyGradientCenter");

	Params::UIProceduralRect_GetBodyGradientCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyGradientCenterUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetBodyGradientCenterUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyGradientCenterUnitMode");

	Params::UIProceduralRect_GetBodyGradientCenterUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyGradientColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UUIProceduralRect::GetBodyGradientColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyGradientColor");

	Params::UIProceduralRect_GetBodyGradientColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyGradientRadius
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2f                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2f UUIProceduralRect::GetBodyGradientRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyGradientRadius");

	Params::UIProceduralRect_GetBodyGradientRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyGradientRadiusUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetBodyGradientRadiusUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyGradientRadiusUnitMode");

	Params::UIProceduralRect_GetBodyGradientRadiusUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyGradientRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetBodyGradientRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyGradientRotation");

	Params::UIProceduralRect_GetBodyGradientRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodySpriteTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUISpriteData_BaseObject*       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUISpriteData_BaseObject* UUIProceduralRect::GetBodySpriteTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodySpriteTexture");

	Params::UIProceduralRect_GetBodySpriteTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UUIProceduralRect::GetBodyTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyTexture");

	Params::UIProceduralRect_GetBodyTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyTextureMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralBodyTextureMode            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralBodyTextureMode UUIProceduralRect::GetBodyTextureMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyTextureMode");

	Params::UIProceduralRect_GetBodyTextureMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBodyTextureScaleMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectTextureScaleMode       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectTextureScaleMode UUIProceduralRect::GetBodyTextureScaleMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBodyTextureScaleMode");

	Params::UIProceduralRect_GetBodyTextureScaleMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UUIProceduralRect::GetBorderColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderColor");

	Params::UIProceduralRect_GetBorderColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderGradientCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2f                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2f UUIProceduralRect::GetBorderGradientCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderGradientCenter");

	Params::UIProceduralRect_GetBorderGradientCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderGradientCenterUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetBorderGradientCenterUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderGradientCenterUnitMode");

	Params::UIProceduralRect_GetBorderGradientCenterUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderGradientColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UUIProceduralRect::GetBorderGradientColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderGradientColor");

	Params::UIProceduralRect_GetBorderGradientColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderGradientRadius
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2f                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2f UUIProceduralRect::GetBorderGradientRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderGradientRadius");

	Params::UIProceduralRect_GetBorderGradientRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderGradientRadiusUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetBorderGradientRadiusUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderGradientRadiusUnitMode");

	Params::UIProceduralRect_GetBorderGradientRadiusUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderGradientRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetBorderGradientRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderGradientRotation");

	Params::UIProceduralRect_GetBorderGradientRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetBorderWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderWidth");

	Params::UIProceduralRect_GetBorderWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetBorderWidthUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetBorderWidthUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetBorderWidthUnitMode");

	Params::UIProceduralRect_GetBorderWidthUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetCornerRadius
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector4f                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector4f UUIProceduralRect::GetCornerRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetCornerRadius");

	Params::UIProceduralRect_GetCornerRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetCornerRadiusUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetCornerRadiusUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetCornerRadiusUnitMode");

	Params::UIProceduralRect_GetCornerRadiusUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableBody
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableBody() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableBody");

	Params::UIProceduralRect_GetEnableBody Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableBodyGradient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableBodyGradient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableBodyGradient");

	Params::UIProceduralRect_GetEnableBodyGradient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableBorder
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableBorder() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableBorder");

	Params::UIProceduralRect_GetEnableBorder Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableBorderGradient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableBorderGradient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableBorderGradient");

	Params::UIProceduralRect_GetEnableBorderGradient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableInnerShadow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableInnerShadow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableInnerShadow");

	Params::UIProceduralRect_GetEnableInnerShadow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableOuterShadow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableOuterShadow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableOuterShadow");

	Params::UIProceduralRect_GetEnableOuterShadow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetEnableRadialFill
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetEnableRadialFill() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetEnableRadialFill");

	Params::UIProceduralRect_GetEnableRadialFill Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetInnerShadowAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowAngle");

	Params::UIProceduralRect_GetInnerShadowAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowBlur
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetInnerShadowBlur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowBlur");

	Params::UIProceduralRect_GetInnerShadowBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowBlurUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetInnerShadowBlurUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowBlurUnitMode");

	Params::UIProceduralRect_GetInnerShadowBlurUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UUIProceduralRect::GetInnerShadowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowColor");

	Params::UIProceduralRect_GetInnerShadowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetInnerShadowDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowDistance");

	Params::UIProceduralRect_GetInnerShadowDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowDistanceUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetInnerShadowDistanceUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowDistanceUnitMode");

	Params::UIProceduralRect_GetInnerShadowDistanceUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetInnerShadowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowSize");

	Params::UIProceduralRect_GetInnerShadowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetInnerShadowSizeUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetInnerShadowSizeUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetInnerShadowSizeUnitMode");

	Params::UIProceduralRect_GetInnerShadowSizeUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetOuterShadowAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowAngle");

	Params::UIProceduralRect_GetOuterShadowAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowBlur
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetOuterShadowBlur() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowBlur");

	Params::UIProceduralRect_GetOuterShadowBlur Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowBlurUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetOuterShadowBlurUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowBlurUnitMode");

	Params::UIProceduralRect_GetOuterShadowBlurUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FColor                     ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FColor UUIProceduralRect::GetOuterShadowColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowColor");

	Params::UIProceduralRect_GetOuterShadowColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetOuterShadowDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowDistance");

	Params::UIProceduralRect_GetOuterShadowDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowDistanceUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetOuterShadowDistanceUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowDistanceUnitMode");

	Params::UIProceduralRect_GetOuterShadowDistanceUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetOuterShadowSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowSize");

	Params::UIProceduralRect_GetOuterShadowSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetOuterShadowSizeUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetOuterShadowSizeUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetOuterShadowSizeUnitMode");

	Params::UIProceduralRect_GetOuterShadowSizeUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetRadialFillAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetRadialFillAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetRadialFillAngle");

	Params::UIProceduralRect_GetRadialFillAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetRadialFillCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2f                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2f UUIProceduralRect::GetRadialFillCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetRadialFillCenter");

	Params::UIProceduralRect_GetRadialFillCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetRadialFillCenterUnitMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIProceduralRectUnitMode               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIProceduralRectUnitMode UUIProceduralRect::GetRadialFillCenterUnitMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetRadialFillCenterUnitMode");

	Params::UIProceduralRect_GetRadialFillCenterUnitMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetRadialFillRotation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIProceduralRect::GetRadialFillRotation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetRadialFillRotation");

	Params::UIProceduralRect_GetRadialFillRotation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetRaycastSupportCornerRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetRaycastSupportCornerRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetRaycastSupportCornerRadius");

	Params::UIProceduralRect_GetRaycastSupportCornerRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRect.GetSoftEdge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIProceduralRect::GetSoftEdge() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRect", "GetSoftEdge");

	Params::UIProceduralRect_GetSoftEdge Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIProceduralRectActor.GetUIProceduralRect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIProceduralRect*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIProceduralRect* AUIProceduralRectActor::GetUIProceduralRect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIProceduralRectActor", "GetUIProceduralRect");

	Params::UIProceduralRectActor_GetUIProceduralRect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewDataSource.AfterSetCell
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IUIRecyclableScrollViewDataSource::AfterSetCell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UIRecyclableScrollViewDataSource", "AfterSetCell");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewDataSource.BeforeSetCell
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IUIRecyclableScrollViewDataSource::BeforeSetCell()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UIRecyclableScrollViewDataSource", "BeforeSetCell");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewDataSource.GetItemCount
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IUIRecyclableScrollViewDataSource::GetItemCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UIRecyclableScrollViewDataSource", "GetItemCount");

	Params::UIRecyclableScrollViewDataSource_GetItemCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewDataSource.InitOnCreate
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IUIRecyclableScrollViewDataSource::InitOnCreate(class UActorComponent* Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UIRecyclableScrollViewDataSource", "InitOnCreate");

	Params::UIRecyclableScrollViewDataSource_InitOnCreate Parms{};

	Parms.Component = Component;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewDataSource.SetCell
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UActorComponent*                  Component                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IUIRecyclableScrollViewDataSource::SetCell(class UActorComponent* Component, int32 Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("UIRecyclableScrollViewDataSource", "SetCell");

	Params::UIRecyclableScrollViewDataSource_SetCell Parms{};

	Parms.Component = Component;
	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.RectRangeChanged
// (Final, Native, Public, BlueprintCallable)

void UUIScrollViewComponent::RectRangeChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "RectRangeChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.RegisterScrollEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const struct FVector2D& InVector2)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIScrollViewComponent::RegisterScrollEvent(const TDelegate<void(const struct FVector2D& InVector2)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "RegisterScrollEvent");

	Params::UIScrollViewComponent_RegisterScrollEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.ScrollTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIItem*                          InChild                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InEaseAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimationDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::ScrollTo(class UUIItem* InChild, bool InEaseAnimation, float InAnimationDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "ScrollTo");

	Params::UIScrollViewComponent_ScrollTo Parms{};

	Parms.InChild = InChild;
	Parms.InEaseAnimation = InEaseAnimation;
	Parms.InAnimationDuration = InAnimationDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetCanScrollInSmallSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetCanScrollInSmallSize(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetCanScrollInSmallSize");

	Params::UIScrollViewComponent_SetCanScrollInSmallSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetDecelerateRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetDecelerateRate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetDecelerateRate");

	Params::UIScrollViewComponent_SetDecelerateRate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetHorizontal
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetHorizontal(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetHorizontal");

	Params::UIScrollViewComponent_SetHorizontal Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetOnlyOneDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetOnlyOneDirection(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetOnlyOneDirection");

	Params::UIScrollViewComponent_SetOnlyOneDirection Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetOutOfRangeDamper
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetOutOfRangeDamper(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetOutOfRangeDamper");

	Params::UIScrollViewComponent_SetOutOfRangeDamper Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetRestrictRectArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetRestrictRectArea(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetRestrictRectArea");

	Params::UIScrollViewComponent_SetRestrictRectArea Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollDelta
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollDelta(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollDelta");

	Params::UIScrollViewComponent_SetScrollDelta Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollProgress
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollProgress(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollProgress");

	Params::UIScrollViewComponent_SetScrollProgress Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollSensitivity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollSensitivity(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollSensitivity");

	Params::UIScrollViewComponent_SetScrollSensitivity Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetScrollValue
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetScrollValue(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetScrollValue");

	Params::UIScrollViewComponent_SetScrollValue Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetVelocity
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetVelocity(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetVelocity");

	Params::UIScrollViewComponent_SetVelocity Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.SetVertical
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::SetVertical(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "SetVertical");

	Params::UIScrollViewComponent_SetVertical Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.UnregisterScrollEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIScrollViewComponent::UnregisterScrollEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "UnregisterScrollEvent");

	Params::UIScrollViewComponent_UnregisterScrollEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewComponent.GetCanScrollInSmallSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetCanScrollInSmallSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetCanScrollInSmallSize");

	Params::UIScrollViewComponent_GetCanScrollInSmallSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetContent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewComponent::GetContent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetContent");

	Params::UIScrollViewComponent_GetContent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetDecelerateRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetDecelerateRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetDecelerateRate");

	Params::UIScrollViewComponent_GetDecelerateRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetHorizontal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetHorizontal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetHorizontal");

	Params::UIScrollViewComponent_GetHorizontal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetHorizontalRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIScrollViewComponent::GetHorizontalRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetHorizontalRange");

	Params::UIScrollViewComponent_GetHorizontalRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetOnlyOneDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetOnlyOneDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetOnlyOneDirection");

	Params::UIScrollViewComponent_GetOnlyOneDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetOutOfRangeDamper
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetOutOfRangeDamper() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetOutOfRangeDamper");

	Params::UIScrollViewComponent_GetOutOfRangeDamper Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetRestrictRectArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetRestrictRectArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetRestrictRectArea");

	Params::UIScrollViewComponent_GetRestrictRectArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetScrollProgress
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIScrollViewComponent::GetScrollProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetScrollProgress");

	Params::UIScrollViewComponent_GetScrollProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetScrollSensitivity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollViewComponent::GetScrollSensitivity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetScrollSensitivity");

	Params::UIScrollViewComponent_GetScrollSensitivity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIScrollViewComponent::GetVelocity() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetVelocity");

	Params::UIScrollViewComponent_GetVelocity Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetVertical
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIScrollViewComponent::GetVertical() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetVertical");

	Params::UIScrollViewComponent_GetVertical Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewComponent.GetVerticalRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIScrollViewComponent::GetVerticalRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewComponent", "GetVerticalRange");

	Params::UIScrollViewComponent_GetVerticalRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.SetHorizontalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EScrollViewScrollbarVisibility          Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::SetHorizontalScrollbarVisibility(EScrollViewScrollbarVisibility Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "SetHorizontalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_SetHorizontalScrollbarVisibility Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.SetVerticalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EScrollViewScrollbarVisibility          Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollViewWithScrollbarComponent::SetVerticalScrollbarVisibility(EScrollViewScrollbarVisibility Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "SetVerticalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_SetVerticalScrollbarVisibility Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewWithScrollbarComponent::GetHorizontalScrollbar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetHorizontalScrollbar");

	Params::UIScrollViewWithScrollbarComponent_GetHorizontalScrollbar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetHorizontalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EScrollViewScrollbarVisibility          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EScrollViewScrollbarVisibility UUIScrollViewWithScrollbarComponent::GetHorizontalScrollbarVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetHorizontalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_GetHorizontalScrollbarVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewWithScrollbarComponent::GetVerticalScrollbar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetVerticalScrollbar");

	Params::UIScrollViewWithScrollbarComponent_GetVerticalScrollbar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetVerticalScrollbarVisibility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EScrollViewScrollbarVisibility          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EScrollViewScrollbarVisibility UUIScrollViewWithScrollbarComponent::GetVerticalScrollbarVisibility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetVerticalScrollbarVisibility");

	Params::UIScrollViewWithScrollbarComponent_GetVerticalScrollbarVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollViewWithScrollbarComponent.GetViewport
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollViewWithScrollbarComponent::GetViewport() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollViewWithScrollbarComponent", "GetViewport");

	Params::UIScrollViewWithScrollbarComponent_GetViewport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.ClearAllCells
// (Final, Native, Public, BlueprintCallable)

void UUIRecyclableScrollViewComponent::ClearAllCells()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "ClearAllCells");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.RecreateList
// (Final, Native, Public, BlueprintCallable)

void UUIRecyclableScrollViewComponent::RecreateList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "RecreateList");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.ScrollToByDataIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InDataIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InEaseAnimation                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InAnimationDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::ScrollToByDataIndex(int32 InDataIndex, bool InEaseAnimation, float InAnimationDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "ScrollToByDataIndex");

	Params::UIRecyclableScrollViewComponent_ScrollToByDataIndex Parms{};

	Parms.InDataIndex = InDataIndex;
	Parms.InEaseAnimation = InEaseAnimation;
	Parms.InAnimationDuration = InAnimationDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetCellTemplate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetCellTemplate(class AUIBaseActor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetCellTemplate");

	Params::UIRecyclableScrollViewComponent_SetCellTemplate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetCellTemplatePrefab
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIPrefab*                      Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetCellTemplatePrefab(class ULGUIPrefab* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetCellTemplatePrefab");

	Params::UIRecyclableScrollViewComponent_SetCellTemplatePrefab Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetColumns
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetColumns(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetColumns");

	Params::UIRecyclableScrollViewComponent_SetColumns Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetDataSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IUIRecyclableScrollViewDataSource>InDataSource                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetDataSource(TScriptInterface<class IUIRecyclableScrollViewDataSource> InDataSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetDataSource");

	Params::UIRecyclableScrollViewComponent_SetDataSource Parms{};

	Parms.InDataSource = InDataSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetInfiniteLoop
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetInfiniteLoop(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetInfiniteLoop");

	Params::UIRecyclableScrollViewComponent_SetInfiniteLoop Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetPadding
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetPadding");

	Params::UIRecyclableScrollViewComponent_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetRows
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetRows(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetRows");

	Params::UIRecyclableScrollViewComponent_SetRows Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.SetSpace
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::SetSpace(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "SetSpace");

	Params::UIRecyclableScrollViewComponent_SetSpace Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.UpdateCellData
// (Final, Native, Public, BlueprintCallable)

void UUIRecyclableScrollViewComponent::UpdateCellData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "UpdateCellData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.UpdateWithDataSource
// (Final, Native, Public, BlueprintCallable)

void UUIRecyclableScrollViewComponent::UpdateWithDataSource()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "UpdateWithDataSource");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetCacheCellList
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIRecyclableScrollViewCellContainer>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

const TArray<struct FUIRecyclableScrollViewCellContainer> UUIRecyclableScrollViewComponent::GetCacheCellList() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetCacheCellList");

	Params::UIRecyclableScrollViewComponent_GetCacheCellList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetCellItemByDataIndex
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIRecyclableScrollViewCellContainer*OutResult                                              (Parm, OutParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIRecyclableScrollViewComponent::GetCellItemByDataIndex(int32 Index_0, struct FUIRecyclableScrollViewCellContainer* OutResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetCellItemByDataIndex");

	Params::UIRecyclableScrollViewComponent_GetCellItemByDataIndex Parms{};

	Parms.Index_0 = Index_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetCellTemplate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIRecyclableScrollViewComponent::GetCellTemplate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetCellTemplate");

	Params::UIRecyclableScrollViewComponent_GetCellTemplate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetCellTemplatePrefab
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIPrefab*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIPrefab* UUIRecyclableScrollViewComponent::GetCellTemplatePrefab() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetCellTemplatePrefab");

	Params::UIRecyclableScrollViewComponent_GetCellTemplatePrefab Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetCellTemplateType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIRecyclableScrollViewCellTemplateType ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIRecyclableScrollViewCellTemplateType UUIRecyclableScrollViewComponent::GetCellTemplateType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetCellTemplateType");

	Params::UIRecyclableScrollViewComponent_GetCellTemplateType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetColumns
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIRecyclableScrollViewComponent::GetColumns() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetColumns");

	Params::UIRecyclableScrollViewComponent_GetColumns Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetDataSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IUIRecyclableScrollViewDataSource>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IUIRecyclableScrollViewDataSource> UUIRecyclableScrollViewComponent::GetDataSource() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetDataSource");

	Params::UIRecyclableScrollViewComponent_GetDataSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetInfiniteLoop
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIRecyclableScrollViewComponent::GetInfiniteLoop() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetInfiniteLoop");

	Params::UIRecyclableScrollViewComponent_GetInfiniteLoop Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FMargin                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FMargin UUIRecyclableScrollViewComponent::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetPadding");

	Params::UIRecyclableScrollViewComponent_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetRows
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIRecyclableScrollViewComponent::GetRows() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetRows");

	Params::UIRecyclableScrollViewComponent_GetRows Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FVector2D                  ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FVector2D UUIRecyclableScrollViewComponent::GetSpace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetSpace");

	Params::UIRecyclableScrollViewComponent_GetSpace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRecyclableScrollViewComponent.GetUserFriendlyCacheCellList
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FUIRecyclableScrollViewCellContainer>*OutResult                                              (Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UUIRecyclableScrollViewComponent::GetUserFriendlyCacheCellList(TArray<struct FUIRecyclableScrollViewCellContainer>* OutResult) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRecyclableScrollViewComponent", "GetUserFriendlyCacheCellList");

	Params::UIRecyclableScrollViewComponent_GetUserFriendlyCacheCellList Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResult != nullptr)
		*OutResult = std::move(Parms.OutResult);
}


// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.SetPixelChannel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRenderableCustomRaycast_VisiblePixel::SetPixelChannel(uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderableCustomRaycast_VisiblePixel", "SetPixelChannel");

	Params::UIRenderableCustomRaycast_VisiblePixel_SetPixelChannel Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.SetVisibilityThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRenderableCustomRaycast_VisiblePixel::SetVisibilityThreshold(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderableCustomRaycast_VisiblePixel", "SetVisibilityThreshold");

	Params::UIRenderableCustomRaycast_VisiblePixel_SetVisibilityThreshold Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.GetPixelChannel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUIRenderableCustomRaycast_VisiblePixel::GetPixelChannel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderableCustomRaycast_VisiblePixel", "GetPixelChannel");

	Params::UIRenderableCustomRaycast_VisiblePixel_GetPixelChannel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRenderableCustomRaycast_VisiblePixel.GetVisibilityThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIRenderableCustomRaycast_VisiblePixel::GetVisibilityThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderableCustomRaycast_VisiblePixel", "GetVisibilityThreshold");

	Params::UIRenderableCustomRaycast_VisiblePixel_GetVisibilityThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRenderTarget.SetCanvas
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUICanvas*                      Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRenderTarget::SetCanvas(class ULGUICanvas* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderTarget", "SetCanvas");

	Params::UIRenderTarget_SetCanvas Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRenderTarget.GetCanvas
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUICanvas*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUICanvas* UUIRenderTarget::GetCanvas() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderTarget", "GetCanvas");

	Params::UIRenderTarget_GetCanvas Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRenderTargetActor.Get2DLineRing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIRenderTarget*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIRenderTarget* AUIRenderTargetActor::Get2DLineRing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRenderTargetActor", "Get2DLineRing");

	Params::UIRenderTargetActor_Get2DLineRing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.EndAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIRing::EndAngleTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "EndAngleTo");

	Params::UIRing_EndAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.SetEndAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRing::SetEndAngle(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "SetEndAngle");

	Params::UIRing_SetEndAngle Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRing.SetSegment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRing::SetSegment(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "SetSegment");

	Params::UIRing_SetSegment Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRing.SetStartAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIRing::SetStartAngle(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "SetStartAngle");

	Params::UIRing_SetStartAngle Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIRing.StartAngleTo
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   endValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Duration                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ELTweenEase                             easetype                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULTweener*                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULTweener* UUIRing::StartAngleTo(float endValue, float Duration, float Delay, ELTweenEase easetype)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "StartAngleTo");

	Params::UIRing_StartAngleTo Parms{};

	Parms.endValue = endValue;
	Parms.Duration = Duration;
	Parms.Delay = Delay;
	Parms.easetype = easetype;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.GetEndAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIRing::GetEndAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "GetEndAngle");

	Params::UIRing_GetEndAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.GetSegment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIRing::GetSegment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "GetSegment");

	Params::UIRing_GetSegment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRing.GetStartAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIRing::GetStartAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRing", "GetStartAngle");

	Params::UIRing_GetStartAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRingActor.Get2DLineRing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIRing*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIRing* AUIRingActor::Get2DLineRing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRingActor", "Get2DLineRing");

	Params::UIRingActor_Get2DLineRing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIRingActor.GetUIRing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIRing*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIRing* AUIRingActor::GetUIRing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIRingActor", "GetUIRing");

	Params::UIRingActor_GetUIRing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.RegisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(float InFloat)>&   InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIScrollbarComponent::RegisterSlideEvent(const TDelegate<void(float InFloat)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "RegisterSlideEvent");

	Params::UIScrollbarComponent_RegisterSlideEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.SetNavigationChangeInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetNavigationChangeInterval(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetNavigationChangeInterval");

	Params::UIScrollbarComponent_SetNavigationChangeInterval Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.SetSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetSize(float InSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetSize");

	Params::UIScrollbarComponent_SetSize Parms{};

	Parms.InSize = InSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetValue(float InValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetValue");

	Params::UIScrollbarComponent_SetValue Parms{};

	Parms.InValue = InValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.SetValueAndSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InSize                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::SetValueAndSize(float InValue, float InSize, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "SetValueAndSize");

	Params::UIScrollbarComponent_SetValueAndSize Parms{};

	Parms.InValue = InValue;
	Parms.InSize = InSize;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.UnregisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIScrollbarComponent::UnregisterSlideEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "UnregisterSlideEvent");

	Params::UIScrollbarComponent_UnregisterSlideEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIScrollbarComponent.GetDirectionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIScrollbarDirectionType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIScrollbarDirectionType UUIScrollbarComponent::GetDirectionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetDirectionType");

	Params::UIScrollbarComponent_GetDirectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.GetHandleActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUIScrollbarComponent::GetHandleActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetHandleActor");

	Params::UIScrollbarComponent_GetHandleActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.GetNavigationChangeInterval
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollbarComponent::GetNavigationChangeInterval() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetNavigationChangeInterval");

	Params::UIScrollbarComponent_GetNavigationChangeInterval Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.GetSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollbarComponent::GetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetSize");

	Params::UIScrollbarComponent_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIScrollbarComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIScrollbarComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIScrollbarComponent", "GetValue");

	Params::UIScrollbarComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISelectableTransitionComponent.CollectTweener
// (Native, Public, BlueprintCallable)
// Parameters:
// class ULTweener*                        InItem                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::CollectTweener(class ULTweener* InItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "CollectTweener");

	Params::UISelectableTransitionComponent_CollectTweener Parms{};

	Parms.InItem = InItem;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableTransitionComponent.CollectTweeners
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TSet<class ULTweener*>&           InItems                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::CollectTweeners(const TSet<class ULTweener*>& InItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "CollectTweeners");

	Params::UISelectableTransitionComponent_CollectTweeners Parms{};

	Parms.InItems = std::move(InItems);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISelectableTransitionComponent.ReceiveOnDisabled
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::ReceiveOnDisabled(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "ReceiveOnDisabled");

	Params::UISelectableTransitionComponent_ReceiveOnDisabled Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.ReceiveOnHighlighted
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::ReceiveOnHighlighted(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "ReceiveOnHighlighted");

	Params::UISelectableTransitionComponent_ReceiveOnHighlighted Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.ReceiveOnNormal
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::ReceiveOnNormal(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "ReceiveOnNormal");

	Params::UISelectableTransitionComponent_ReceiveOnNormal Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.ReceiveOnPressed
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::ReceiveOnPressed(bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "ReceiveOnPressed");

	Params::UISelectableTransitionComponent_ReceiveOnPressed Parms{};

	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.ReceiveOnStartCustomTransition
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             InTransitionName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InImmediateSet                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISelectableTransitionComponent::ReceiveOnStartCustomTransition(class FName InTransitionName, bool InImmediateSet)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "ReceiveOnStartCustomTransition");

	Params::UISelectableTransitionComponent_ReceiveOnStartCustomTransition Parms{};

	Parms.InTransitionName = InTransitionName;
	Parms.InImmediateSet = InImmediateSet;

	UObject::ProcessEvent(Func, &Parms);
}


// Function LGUI.UISelectableTransitionComponent.StopTransition
// (Native, Public, BlueprintCallable)

void UUISelectableTransitionComponent::StopTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISelectableTransitionComponent", "StopTransition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByAspectRatio.SetAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByAspectRatio::SetAspectRatio(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "SetAspectRatio");

	Params::UISizeControlByAspectRatio_SetAspectRatio Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByAspectRatio.SetControlMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISizeControlByAspectRatioMode         Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByAspectRatio::SetControlMode(EUISizeControlByAspectRatioMode Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "SetControlMode");

	Params::UISizeControlByAspectRatio_SetControlMode Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByAspectRatio.GetAspectRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByAspectRatio::GetAspectRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "GetAspectRatio");

	Params::UISizeControlByAspectRatio_GetAspectRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByAspectRatio.GetControlMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISizeControlByAspectRatioMode         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISizeControlByAspectRatioMode UUISizeControlByAspectRatio::GetControlMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByAspectRatio", "GetControlMode");

	Params::UISizeControlByAspectRatio_GetControlMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByChildren.SetAdditionalHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByChildren::SetAdditionalHeight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "SetAdditionalHeight");

	Params::UISizeControlByChildren_SetAdditionalHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByChildren.SetAdditionalWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByChildren::SetAdditionalWidth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "SetAdditionalWidth");

	Params::UISizeControlByChildren_SetAdditionalWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByChildren.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByChildren::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "SetHeightFitToChildren");

	Params::UISizeControlByChildren_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByChildren.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByChildren::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "SetWidthFitToChildren");

	Params::UISizeControlByChildren_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByChildren.GetAdditionalHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByChildren::GetAdditionalHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "GetAdditionalHeight");

	Params::UISizeControlByChildren_GetAdditionalHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByChildren.GetAdditionalWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByChildren::GetAdditionalWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "GetAdditionalWidth");

	Params::UISizeControlByChildren_GetAdditionalWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByChildren.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByChildren::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "GetHeightFitToChildren");

	Params::UISizeControlByChildren_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByChildren.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISizeControlByChildren::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByChildren", "GetWidthFitToChildren");

	Params::UISizeControlByChildren_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.SetAdditionalHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetAdditionalHeight(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetAdditionalHeight");

	Params::UISizeControlByOther_SetAdditionalHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetAdditionalWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetAdditionalWidth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetAdditionalWidth");

	Params::UISizeControlByOther_SetAdditionalWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetControlHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetControlHeight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetControlHeight");

	Params::UISizeControlByOther_SetControlHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetControlWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetControlWidth(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetControlWidth");

	Params::UISizeControlByOther_SetControlWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.SetTargetActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISizeControlByOther::SetTargetActor(class AUIBaseActor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "SetTargetActor");

	Params::UISizeControlByOther_SetTargetActor Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISizeControlByOther.GetAdditionalHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByOther::GetAdditionalHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetAdditionalHeight");

	Params::UISizeControlByOther_GetAdditionalHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetAdditionalWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISizeControlByOther::GetAdditionalWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetAdditionalWidth");

	Params::UISizeControlByOther_GetAdditionalWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetControlHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISizeControlByOther::GetControlHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetControlHeight");

	Params::UISizeControlByOther_GetControlHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetControlWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISizeControlByOther::GetControlWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetControlWidth");

	Params::UISizeControlByOther_GetControlWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISizeControlByOther.GetTargetActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUISizeControlByOther::GetTargetActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISizeControlByOther", "GetTargetActor");

	Params::UISizeControlByOther_GetTargetActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.RegisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(float InFloat)>&   InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUISliderComponent::RegisterSlideEvent(const TDelegate<void(float InFloat)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "RegisterSlideEvent");

	Params::UISliderComponent_RegisterSlideEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.SetMaxValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepRelativeValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetMaxValue(float InMaxValue, bool KeepRelativeValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetMaxValue");

	Params::UISliderComponent_SetMaxValue Parms{};

	Parms.InMaxValue = InMaxValue;
	Parms.KeepRelativeValue = KeepRelativeValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.SetMinValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    KeepRelativeValue                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetMinValue(float InMinValue, bool KeepRelativeValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetMinValue");

	Params::UISliderComponent_SetMinValue Parms{};

	Parms.InMinValue = InMinValue;
	Parms.KeepRelativeValue = KeepRelativeValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.SetNavigationChangeInterval
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetNavigationChangeInterval(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetNavigationChangeInterval");

	Params::UISliderComponent_SetNavigationChangeInterval Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.SetValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISliderComponent::SetValue(float InValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "SetValue");

	Params::UISliderComponent_SetValue Parms{};

	Parms.InValue = InValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.UnregisterSlideEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUISliderComponent::UnregisterSlideEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "UnregisterSlideEvent");

	Params::UISliderComponent_UnregisterSlideEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISliderComponent.GetDirectionType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISliderDirectionType                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISliderDirectionType UUISliderComponent::GetDirectionType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetDirectionType");

	Params::UISliderComponent_GetDirectionType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetFillActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUISliderComponent::GetFillActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetFillActor");

	Params::UISliderComponent_GetFillActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetHandleActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUISliderComponent::GetHandleActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetHandleActor");

	Params::UISliderComponent_GetHandleActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetMaxValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetMaxValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetMaxValue");

	Params::UISliderComponent_GetMaxValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetMinValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetMinValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetMinValue");

	Params::UISliderComponent_GetMinValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetNavigationChangeInterval
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetNavigationChangeInterval() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetNavigationChangeInterval");

	Params::UISliderComponent_GetNavigationChangeInterval Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISliderComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetValue");

	Params::UISliderComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISliderComponent.GetWholeNumber
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISliderComponent::GetWholeNumber() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISliderComponent", "GetWholeNumber");

	Params::UISliderComponent_GetWholeNumber Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.SetFillAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillAmount(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillAmount");

	Params::UISprite_SetFillAmount Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillDirectionFlip(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillDirectionFlip");

	Params::UISprite_SetFillDirectionFlip Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetFillMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISpriteFillMethod                     NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillMethod(EUISpriteFillMethod NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillMethod");

	Params::UISprite_SetFillMethod Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetFillOrigin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetFillOrigin(uint8 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetFillOrigin");

	Params::UISprite_SetFillOrigin Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.SetSpriteType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISpriteType                           NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISprite::SetSpriteType(EUISpriteType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "SetSpriteType");

	Params::UISprite_SetSpriteType Parms{};

	Parms.NewType = NewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISprite.GetFillAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUISprite::GetFillAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillAmount");

	Params::UISprite_GetFillAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISprite::GetFillDirectionFlip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillDirectionFlip");

	Params::UISprite_GetFillDirectionFlip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetFillMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISpriteFillMethod                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISpriteFillMethod UUISprite::GetFillMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillMethod");

	Params::UISprite_GetFillMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetFillOrigin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUISprite::GetFillOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetFillOrigin");

	Params::UISprite_GetFillOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISprite.GetSpriteType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISpriteType                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISpriteType UUISprite::GetSpriteType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISprite", "GetSpriteType");

	Params::UISprite_GetSpriteType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteActor.GetUISprite
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUISprite*                        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUISprite* AUISpriteActor::GetUISprite() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteActor", "GetUISprite");

	Params::UISpriteActor_GetUISprite Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSequencePlayer.SetSnapSpriteSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteSequencePlayer::SetSnapSpriteSize(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSequencePlayer", "SetSnapSpriteSize");

	Params::UISpriteSequencePlayer_SetSnapSpriteSize Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSequencePlayer.SetSpriteSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const TArray<class ULGUISpriteData_BaseObject*>&Value                                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UUISpriteSequencePlayer::SetSpriteSequence(const TArray<class ULGUISpriteData_BaseObject*>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSequencePlayer", "SetSpriteSequence");

	Params::UISpriteSequencePlayer_SetSpriteSequence Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSequencePlayer.GetSnapSpriteSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUISpriteSequencePlayer::GetSnapSpriteSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSequencePlayer", "GetSnapSpriteSize");

	Params::UISpriteSequencePlayer_GetSnapSpriteSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSequencePlayer.GetSpriteSequence
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class ULGUISpriteData_BaseObject*>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

const TArray<class ULGUISpriteData_BaseObject*> UUISpriteSequencePlayer::GetSpriteSequence() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSequencePlayer", "GetSpriteSequence");

	Params::UISpriteSequencePlayer_GetSpriteSequence Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSheetTexturePlayer.SetHeightCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteSheetTexturePlayer::SetHeightCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "SetHeightCount");

	Params::UISpriteSheetTexturePlayer_SetHeightCount Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSheetTexturePlayer.SetWidthCount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUISpriteSheetTexturePlayer::SetWidthCount(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "SetWidthCount");

	Params::UISpriteSheetTexturePlayer_SetWidthCount Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UISpriteSheetTexturePlayer.GetHeightCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpriteSheetTexturePlayer::GetHeightCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "GetHeightCount");

	Params::UISpriteSheetTexturePlayer_GetHeightCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UISpriteSheetTexturePlayer.GetWidthCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUISpriteSheetTexturePlayer::GetWidthCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISpriteSheetTexturePlayer", "GetWidthCount");

	Params::UISpriteSheetTexturePlayer_GetWidthCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMesh.GetOrCreateDynamicMaterialInstance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInstanceDynamic*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInstanceDynamic* UUIStaticMesh::GetOrCreateDynamicMaterialInstance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetOrCreateDynamicMaterialInstance");

	Params::UIStaticMesh_GetOrCreateDynamicMaterialInstance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMesh.SetMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIStaticMeshCacheData*         Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIStaticMesh::SetMesh(class ULGUIStaticMeshCacheData* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "SetMesh");

	Params::UIStaticMesh_SetMesh Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIStaticMesh.SetReplaceMaterial
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMaterialInterface*               Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIStaticMesh::SetReplaceMaterial(class UMaterialInterface* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "SetReplaceMaterial");

	Params::UIStaticMesh_SetReplaceMaterial Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIStaticMesh.SetVertexColorType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUIStaticMeshVertexColorType            Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIStaticMesh::SetVertexColorType(EUIStaticMeshVertexColorType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "SetVertexColorType");

	Params::UIStaticMesh_SetVertexColorType Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIStaticMesh.GetMeshCache
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIStaticMeshCacheData*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIStaticMeshCacheData* UUIStaticMesh::GetMeshCache() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetMeshCache");

	Params::UIStaticMesh_GetMeshCache Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMesh.GetRenderMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUIStaticMesh::GetRenderMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetRenderMaterial");

	Params::UIStaticMesh_GetRenderMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMesh.GetReplaceMaterial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UUIStaticMesh::GetReplaceMaterial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetReplaceMaterial");

	Params::UIStaticMesh_GetReplaceMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMesh.GetVertexColorType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUIStaticMeshVertexColorType            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUIStaticMeshVertexColorType UUIStaticMesh::GetVertexColorType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMesh", "GetVertexColorType");

	Params::UIStaticMesh_GetVertexColorType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIStaticMeshActor.GetUIStaticMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIStaticMesh*                    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIStaticMesh* AUIStaticMeshActor::GetUIStaticMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIStaticMeshActor", "GetUIStaticMesh");

	Params::UIStaticMeshActor_GetUIStaticMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRealSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetRealSize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRealSize");

	Params::UIText_GetRealSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.SetAdjustHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newAdjustHeight                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetAdjustHeight(bool newAdjustHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetAdjustHeight");

	Params::UIText_SetAdjustHeight Parms{};

	Parms.newAdjustHeight = newAdjustHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetAdjustWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newAdjustWidth                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetAdjustWidth(bool newAdjustWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetAdjustWidth");

	Params::UIText_SetAdjustWidth Parms{};

	Parms.newAdjustWidth = newAdjustWidth;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFont
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIFontData_BaseObject*         newFont                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFont(class ULGUIFontData_BaseObject* newFont)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFont");

	Params::UIText_SetFont Parms{};

	Parms.newFont = newFont;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontSize(float NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontSize");

	Params::UIText_SetFontSize Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 NewSpace                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontSpace(const struct FVector2D& NewSpace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontSpace");

	Params::UIText_SetFontSpace Parms{};

	Parms.NewSpace = std::move(NewSpace);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetFontStyle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextFontStyle                        newFontStyle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetFontStyle(EUITextFontStyle newFontStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetFontStyle");

	Params::UIText_SetFontStyle Parms{};

	Parms.newFontStyle = newFontStyle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetMaxHorizontalWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetMaxHorizontalWidth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetMaxHorizontalWidth");

	Params::UIText_SetMaxHorizontalWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetOverflowType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextOverflowType                     newOverflowType                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetOverflowType(EUITextOverflowType newOverflowType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetOverflowType");

	Params::UIText_SetOverflowType Parms{};

	Parms.newOverflowType = newOverflowType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetParagraphHorizontalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextParagraphHorizontalAlign         newHAlign                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetParagraphHorizontalAlignment(EUITextParagraphHorizontalAlign newHAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetParagraphHorizontalAlignment");

	Params::UIText_SetParagraphHorizontalAlignment Parms{};

	Parms.newHAlign = newHAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetParagraphVerticalAlignment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextParagraphVerticalAlign           newVAlign                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetParagraphVerticalAlignment(EUITextParagraphVerticalAlign newVAlign)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetParagraphVerticalAlignment");

	Params::UIText_SetParagraphVerticalAlignment Parms{};

	Parms.newVAlign = newVAlign;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetRichText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    newRichText                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetRichText(bool newRichText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetRichText");

	Params::UIText_SetRichText Parms{};

	Parms.newRichText = newRichText;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetRichTextCustomStyleData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIRichTextCustomStyleData*     Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetRichTextCustomStyleData(class ULGUIRichTextCustomStyleData* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetRichTextCustomStyleData");

	Params::UIText_SetRichTextCustomStyleData Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetRichTextImageData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIRichTextImageData_BaseObject*Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetRichTextImageData(class ULGUIRichTextImageData_BaseObject* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetRichTextImageData");

	Params::UIText_SetRichTextImageData Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetRichTextTagFilterFlags
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetRichTextTagFilterFlags(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetRichTextTagFilterFlags");

	Params::UIText_SetRichTextTagFilterFlags Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      newText                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UUIText::SetText(const class FText& newText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetText");

	Params::UIText_SetText Parms{};

	Parms.newText = std::move(newText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.SetUseKerning
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIText::SetUseKerning(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "SetUseKerning");

	Params::UIText_SetUseKerning Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIText.GetAdjustHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAdjustHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAdjustHeight");

	Params::UIText_GetAdjustHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAdjustHeightRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetAdjustHeightRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAdjustHeightRange");

	Params::UIText_GetAdjustHeightRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAdjustWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetAdjustWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAdjustWidth");

	Params::UIText_GetAdjustWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetAdjustWidthRange
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetAdjustWidthRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetAdjustWidthRange");

	Params::UIText_GetAdjustWidthRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetCharPropertyArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUITextCharProperty>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUITextCharProperty> UUIText::GetCharPropertyArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetCharPropertyArray");

	Params::UIText_GetCharPropertyArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFont
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIFontData_BaseObject*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIFontData_BaseObject* UUIText::GetFont() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFont");

	Params::UIText_GetFont Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIText::GetFontSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontSize");

	Params::UIText_GetFontSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontSpace
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetFontSpace() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontSpace");

	Params::UIText_GetFontSpace Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetFontStyle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextFontStyle                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextFontStyle UUIText::GetFontStyle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetFontStyle");

	Params::UIText_GetFontStyle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetMaxHorizontalWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIText::GetMaxHorizontalWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetMaxHorizontalWidth");

	Params::UIText_GetMaxHorizontalWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetOverflowType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextOverflowType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextOverflowType UUIText::GetOverflowType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetOverflowType");

	Params::UIText_GetOverflowType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetParagraphHorizontalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextParagraphHorizontalAlign         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextParagraphHorizontalAlign UUIText::GetParagraphHorizontalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetParagraphHorizontalAlignment");

	Params::UIText_GetParagraphHorizontalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetParagraphVerticalAlignment
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextParagraphVerticalAlign           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextParagraphVerticalAlign UUIText::GetParagraphVerticalAlignment() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetParagraphVerticalAlignment");

	Params::UIText_GetParagraphVerticalAlignment Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetRichText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichText");

	Params::UIText_GetRichText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichTextCustomStyleData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIRichTextCustomStyleData*     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIRichTextCustomStyleData* UUIText::GetRichTextCustomStyleData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichTextCustomStyleData");

	Params::UIText_GetRichTextCustomStyleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichTextCustomTagArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIText_RichTextCustomTag>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIText_RichTextCustomTag> UUIText::GetRichTextCustomTagArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichTextCustomTagArray");

	Params::UIText_GetRichTextCustomTagArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichTextImageData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULGUIRichTextImageData_BaseObject*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULGUIRichTextImageData_BaseObject* UUIText::GetRichTextImageData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichTextImageData");

	Params::UIText_GetRichTextImageData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichTextImageTagArray
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FUIText_RichTextImageTag>ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FUIText_RichTextImageTag> UUIText::GetRichTextImageTagArray() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichTextImageTagArray");

	Params::UIText_GetRichTextImageTagArray Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetRichTextTagFilterFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetRichTextTagFilterFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetRichTextTagFilterFlags");

	Params::UIText_GetRichTextTagFilterFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetSize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIText::GetSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetSize");

	Params::UIText_GetSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UUIText::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetText");

	Params::UIText_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetTextRealSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIText::GetTextRealSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetTextRealSize");

	Params::UIText_GetTextRealSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetUseKerning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIText::GetUseKerning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetUseKerning");

	Params::UIText_GetUseKerning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIText.GetVisibleCharCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIText::GetVisibleCharCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIText", "GetVisibleCharCount");

	Params::UIText_GetVisibleCharCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextActor.GetUIText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIText*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIText* AUITextActor::GetUIText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextActor", "GetUIText");

	Params::UITextActor_GetUIText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputCustomValidation.ReceiveOnValidateInput
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UUITextInputComponent*            InTextInput                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    InString                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InIndexOfInsertedChar                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputCustomValidation::ReceiveOnValidateInput(class UUITextInputComponent* InTextInput, const class FString& InString, int32 InIndexOfInsertedChar)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputCustomValidation", "ReceiveOnValidateInput");

	Params::UITextInputCustomValidation_ReceiveOnValidateInput Parms{};

	Parms.InTextInput = InTextInput;
	Parms.InString = std::move(InString);
	Parms.InIndexOfInsertedChar = InIndexOfInsertedChar;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.ActivateInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULGUIPointerEventData*            EventData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::ActivateInput(class ULGUIPointerEventData* EventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "ActivateInput");

	Params::UITextInputComponent_ActivateInput Parms{};

	Parms.EventData = EventData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.ClearCustomInputTypeFunction
// (Final, Native, Public, BlueprintCallable)

void UUITextInputComponent::ClearCustomInputTypeFunction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "ClearCustomInputTypeFunction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.DeactivateInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InFireEvent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::DeactivateInput(bool InFireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "DeactivateInput");

	Params::UITextInputComponent_DeactivateInput Parms{};

	Parms.InFireEvent = InFireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.RegisterInputActivateEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool InActivate)>& InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUITextInputComponent::RegisterInputActivateEvent(const TDelegate<void(bool InActivate)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "RegisterInputActivateEvent");

	Params::UITextInputComponent_RegisterInputActivateEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.RegisterSubmitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& InString)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUITextInputComponent::RegisterSubmitEvent(const TDelegate<void(const class FString& InString)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "RegisterSubmitEvent");

	Params::UITextInputComponent_RegisterSubmitEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.RegisterValueChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& InString)>&InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUITextInputComponent::RegisterValueChangeEvent(const TDelegate<void(const class FString& InString)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "RegisterValueChangeEvent");

	Params::UITextInputComponent_RegisterValueChangeEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.SetAllowMultiLine
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetAllowMultiLine(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetAllowMultiLine");

	Params::UITextInputComponent_SetAllowMultiLine Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetAutoActivateInputWhenNavigateIn
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetAutoActivateInputWhenNavigateIn(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetAutoActivateInputWhenNavigateIn");

	Params::UITextInputComponent_SetAutoActivateInputWhenNavigateIn Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetCaretBlinkRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetCaretBlinkRate(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetCaretBlinkRate");

	Params::UITextInputComponent_SetCaretBlinkRate Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetCaretColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetCaretColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetCaretColor");

	Params::UITextInputComponent_SetCaretColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetCaretWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetCaretWidth(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetCaretWidth");

	Params::UITextInputComponent_SetCaretWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetCustomInputTypeFunction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(const class FString& InString, int32 InStartIndex)>&InFunction                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetCustomInputTypeFunction(const TDelegate<void(const class FString& InString, int32 InStartIndex)>& InFunction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetCustomInputTypeFunction");

	Params::UITextInputComponent_SetCustomInputTypeFunction Parms{};

	Parms.InFunction = InFunction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetCustomValidation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUITextInputCustomValidation*     Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetCustomValidation(class UUITextInputCustomValidation* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetCustomValidation");

	Params::UITextInputComponent_SetCustomValidation Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetDisplayType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUITextInputDisplayType               NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetDisplayType(ELGUITextInputDisplayType NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetDisplayType");

	Params::UITextInputComponent_SetDisplayType Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetIgnoreKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FKey>&              Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetIgnoreKeys(const TArray<struct FKey>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetIgnoreKeys");

	Params::UITextInputComponent_SetIgnoreKeys Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetInputType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUITextInputType                      NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetInputType(ELGUITextInputType NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetInputType");

	Params::UITextInputComponent_SetInputType Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetMultiLineSubmitFunctionKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FKey>&              Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetMultiLineSubmitFunctionKeys(const TArray<struct FKey>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetMultiLineSubmitFunctionKeys");

	Params::UITextInputComponent_SetMultiLineSubmitFunctionKeys Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetPasswordChar
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetPasswordChar(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetPasswordChar");

	Params::UITextInputComponent_SetPasswordChar Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetPlaceHolderActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AUIBaseActor*                     Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetPlaceHolderActor(class AUIBaseActor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetPlaceHolderActor");

	Params::UITextInputComponent_SetPlaceHolderActor Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetReadOnly
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetReadOnly(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetReadOnly");

	Params::UITextInputComponent_SetReadOnly Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetSelectionColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FColor&                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetSelectionColor(const struct FColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetSelectionColor");

	Params::UITextInputComponent_SetSelectionColor Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.SetText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    InText                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    InFireEvent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputComponent::SetText(const class FString& InText, bool InFireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetText");

	Params::UITextInputComponent_SetText Parms{};

	Parms.InText = std::move(InText);
	Parms.InFireEvent = InFireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.SetVirtualKeyboradOptions
// (Final, Native, Public)
// Parameters:
// const struct FVirtualKeyboardOptions&   Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::SetVirtualKeyboradOptions(const struct FVirtualKeyboardOptions& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "SetVirtualKeyboradOptions");

	Params::UITextInputComponent_SetVirtualKeyboradOptions Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.UnregisterInputActivateEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::UnregisterInputActivateEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "UnregisterInputActivateEvent");

	Params::UITextInputComponent_UnregisterInputActivateEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.UnregisterSubmitEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::UnregisterSubmitEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "UnregisterSubmitEvent");

	Params::UITextInputComponent_UnregisterSubmitEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.UnregisterValueChangeEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUITextInputComponent::UnregisterValueChangeEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "UnregisterValueChangeEvent");

	Params::UITextInputComponent_UnregisterValueChangeEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextInputComponent.VerifyAndInsertStringAtCaretPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputComponent::VerifyAndInsertStringAtCaretPosition(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "VerifyAndInsertStringAtCaretPosition");

	Params::UITextInputComponent_VerifyAndInsertStringAtCaretPosition Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetAllowMultiLine
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputComponent::GetAllowMultiLine() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetAllowMultiLine");

	Params::UITextInputComponent_GetAllowMultiLine Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetAutoActivateInputWhenNavigateIn
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputComponent::GetAutoActivateInputWhenNavigateIn() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetAutoActivateInputWhenNavigateIn");

	Params::UITextInputComponent_GetAutoActivateInputWhenNavigateIn Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetCaretBlinkRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUITextInputComponent::GetCaretBlinkRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetCaretBlinkRate");

	Params::UITextInputComponent_GetCaretBlinkRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetCaretColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUITextInputComponent::GetCaretColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetCaretColor");

	Params::UITextInputComponent_GetCaretColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetCaretWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUITextInputComponent::GetCaretWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetCaretWidth");

	Params::UITextInputComponent_GetCaretWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetCustomValidation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUITextInputCustomValidation*     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUITextInputCustomValidation* UUITextInputComponent::GetCustomValidation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetCustomValidation");

	Params::UITextInputComponent_GetCustomValidation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetDisplayType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUITextInputDisplayType               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUITextInputDisplayType UUITextInputComponent::GetDisplayType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetDisplayType");

	Params::UITextInputComponent_GetDisplayType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetIgnoreKeys
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FKey>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FKey> UUITextInputComponent::GetIgnoreKeys() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetIgnoreKeys");

	Params::UITextInputComponent_GetIgnoreKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetInputType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUITextInputType                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUITextInputType UUITextInputComponent::GetInputType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetInputType");

	Params::UITextInputComponent_GetInputType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetMultiLineSubmitFunctionKeys
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<struct FKey>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FKey> UUITextInputComponent::GetMultiLineSubmitFunctionKeys() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetMultiLineSubmitFunctionKeys");

	Params::UITextInputComponent_GetMultiLineSubmitFunctionKeys Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetPasswordChar
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUITextInputComponent::GetPasswordChar() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetPasswordChar");

	Params::UITextInputComponent_GetPasswordChar Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetPlaceHolderActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AUIBaseActor*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AUIBaseActor* UUITextInputComponent::GetPlaceHolderActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetPlaceHolderActor");

	Params::UITextInputComponent_GetPlaceHolderActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetReadOnly
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITextInputComponent::GetReadOnly() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetReadOnly");

	Params::UITextInputComponent_GetReadOnly Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetSelectionColor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FColor UUITextInputComponent::GetSelectionColor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetSelectionColor");

	Params::UITextInputComponent_GetSelectionColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UUITextInputComponent::GetText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetText");

	Params::UITextInputComponent_GetText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetTextComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIText*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIText* UUITextInputComponent::GetTextComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetTextComponent");

	Params::UITextInputComponent_GetTextComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextInputComponent.GetVirtualKeyboradOptions
// (Final, Native, Public, Const)
// Parameters:
// struct FVirtualKeyboardOptions          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FVirtualKeyboardOptions UUITextInputComponent::GetVirtualKeyboradOptions() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextInputComponent", "GetVirtualKeyboradOptions");

	Params::UITextInputComponent_GetVirtualKeyboradOptions Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextureBase.GetDefaultWhiteTexture
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UUITextureBase::GetDefaultWhiteTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UITextureBase", "GetDefaultWhiteTexture");

	Params::UITextureBase_GetDefaultWhiteTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextureBase.SetSizeFromTexture
// (Final, Native, Public, BlueprintCallable)

void UUITextureBase::SetSizeFromTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "SetSizeFromTexture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase.SetTexture
// (Native, Public, BlueprintCallable)
// Parameters:
// class UTexture*                         newTexture                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITextureBase::SetTexture(class UTexture* newTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "SetTexture");

	Params::UITextureBase_SetTexture Parms{};

	Parms.newTexture = newTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITextureBase.GetTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UUITextureBase::GetTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureBase", "GetTexture");

	Params::UITextureBase_GetTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.SetFillAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillAmount(float NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillAmount");

	Params::UITexture_SetFillAmount Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillDirectionFlip(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillDirectionFlip");

	Params::UITexture_SetFillDirectionFlip Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUISpriteFillMethod                     NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillMethod(EUISpriteFillMethod NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillMethod");

	Params::UITexture_SetFillMethod Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetFillOrigin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetFillOrigin(uint8 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetFillOrigin");

	Params::UITexture_SetFillOrigin Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetSpriteData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FLGUISpriteInfo&           newSpriteData                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UUITexture::SetSpriteData(const struct FLGUISpriteInfo& newSpriteData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetSpriteData");

	Params::UITexture_SetSpriteData Parms{};

	Parms.newSpriteData = std::move(newSpriteData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetTextureType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextureType                          NewType                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetTextureType(EUITextureType NewType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetTextureType");

	Params::UITexture_SetTextureType Parms{};

	Parms.NewType = NewType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetUVRect
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector4&                  newUVRect                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetUVRect(const struct FVector4& newUVRect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetUVRect");

	Params::UITexture_SetUVRect Parms{};

	Parms.newUVRect = std::move(newUVRect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.SetUVRectControlMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EUITextureUVRectControlMode             NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUITexture::SetUVRectControlMode(EUITextureUVRectControlMode NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "SetUVRectControlMode");

	Params::UITexture_SetUVRectControlMode Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UITexture.GetFillAmount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUITexture::GetFillAmount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillAmount");

	Params::UITexture_GetFillAmount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetFillDirectionFlip
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUITexture::GetFillDirectionFlip() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillDirectionFlip");

	Params::UITexture_GetFillDirectionFlip Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetFillMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUISpriteFillMethod                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUISpriteFillMethod UUITexture::GetFillMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillMethod");

	Params::UITexture_GetFillMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetFillOrigin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 UUITexture::GetFillOrigin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetFillOrigin");

	Params::UITexture_GetFillOrigin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetSpriteData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLGUISpriteInfo                  ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUISpriteInfo UUITexture::GetSpriteData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetSpriteData");

	Params::UITexture_GetSpriteData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetTextureType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextureType                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextureType UUITexture::GetTextureType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetTextureType");

	Params::UITexture_GetTextureType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetUVRect
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector4                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector4 UUITexture::GetUVRect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetUVRect");

	Params::UITexture_GetUVRect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITexture.GetUVRectControlMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EUITextureUVRectControlMode             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EUITextureUVRectControlMode UUITexture::GetUVRectControlMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITexture", "GetUVRectControlMode");

	Params::UITexture_GetUVRectControlMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UITextureActor.GetUITexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUITexture*                       ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUITexture* AUITextureActor::GetUITexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UITextureActor", "GetUITexture");

	Params::UITextureActor_GetUITexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.RegisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(bool InBool)>&     InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIToggleComponent::RegisterToggleEvent(const TDelegate<void(bool InBool)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "RegisterToggleEvent");

	Params::UIToggleComponent_RegisterToggleEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.SetToggleGroup
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIToggleGroupComponent*          InGroupComp                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleComponent::SetToggleGroup(class UUIToggleGroupComponent* InGroupComp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "SetToggleGroup");

	Params::UIToggleComponent_SetToggleGroup Parms{};

	Parms.InGroupComp = InGroupComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.SetValue
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    fireEvent                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleComponent::SetValue(bool NewValue, bool fireEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "SetValue");

	Params::UIToggleComponent_SetValue Parms{};

	Parms.NewValue = NewValue;
	Parms.fireEvent = fireEvent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.UnregisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIToggleComponent::UnregisterToggleEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "UnregisterToggleEvent");

	Params::UIToggleComponent_UnregisterToggleEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleComponent.GetIndexInGroup
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIToggleComponent::GetIndexInGroup() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetIndexInGroup");

	Params::UIToggleComponent_GetIndexInGroup Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.GetToggleGroupActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UUIToggleComponent::GetToggleGroupActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetToggleGroupActor");

	Params::UIToggleComponent_GetToggleGroupActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleComponent.GetValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIToggleComponent::GetValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleComponent", "GetValue");

	Params::UIToggleComponent_GetValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.ClearSelection
// (Final, Native, Public, BlueprintCallable)

void UUIToggleGroupComponent::ClearSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "ClearSelection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.RegisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TDelegate<void(int32 Index)>&     InDelegate                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLGUIDelegateHandleWrapper       ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FLGUIDelegateHandleWrapper UUIToggleGroupComponent::RegisterToggleEvent(const TDelegate<void(int32 Index)>& InDelegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "RegisterToggleEvent");

	Params::UIToggleGroupComponent_RegisterToggleEvent Parms{};

	Parms.InDelegate = InDelegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.SetAllowNoneSelected
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::SetAllowNoneSelected(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "SetAllowNoneSelected");

	Params::UIToggleGroupComponent_SetAllowNoneSelected Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.SetSelection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UUIToggleComponent*               Target                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::SetSelection(class UUIToggleComponent* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "SetSelection");

	Params::UIToggleGroupComponent_SetSelection Parms{};

	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.UnregisterToggleEvent
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FLGUIDelegateHandleWrapper&InDelegateHandle                                       (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UUIToggleGroupComponent::UnregisterToggleEvent(const struct FLGUIDelegateHandleWrapper& InDelegateHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "UnregisterToggleEvent");

	Params::UIToggleGroupComponent_UnregisterToggleEvent Parms{};

	Parms.InDelegateHandle = std::move(InDelegateHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIToggleGroupComponent.GetAllowNoneSelected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIToggleGroupComponent::GetAllowNoneSelected() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetAllowNoneSelected");

	Params::UIToggleGroupComponent_GetAllowNoneSelected Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.GetSelectedItem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIToggleComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIToggleComponent* UUIToggleGroupComponent::GetSelectedItem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetSelectedItem");

	Params::UIToggleGroupComponent_GetSelectedItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.GetToggleByIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   InIndex                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUIToggleComponent*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIToggleComponent* UUIToggleGroupComponent::GetToggleByIndex(int32 InIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetToggleByIndex");

	Params::UIToggleGroupComponent_GetToggleByIndex Parms{};

	Parms.InIndex = InIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIToggleGroupComponent.GetToggleIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UUIToggleComponent*         InComp                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UUIToggleGroupComponent::GetToggleIndex(const class UUIToggleComponent* InComp) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIToggleGroupComponent", "GetToggleIndex");

	Params::UIToggleGroupComponent_GetToggleIndex Parms{};

	Parms.InComp = InComp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.SetAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ELGUILayoutAlignmentType                Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetAlign(ELGUILayoutAlignmentType Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetAlign");

	Params::UIVerticalLayout_SetAlign Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetControlChildHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetControlChildHeight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetControlChildHeight");

	Params::UIVerticalLayout_SetControlChildHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetControlChildWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetControlChildWidth(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetControlChildWidth");

	Params::UIVerticalLayout_SetControlChildWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetExpandChildHeightArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetExpandChildHeightArea(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetExpandChildHeightArea");

	Params::UIVerticalLayout_SetExpandChildHeightArea Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetExpandChildWidthArea
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetExpandChildWidthArea(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetExpandChildWidthArea");

	Params::UIVerticalLayout_SetExpandChildWidthArea Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetExpendChildrenHeight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetExpendChildrenHeight");

	Params::UIVerticalLayout_SetExpendChildrenHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetExpendChildrenWidth(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetExpendChildrenWidth");

	Params::UIVerticalLayout_SetExpendChildrenWidth Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetHeightFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetHeightFitToChildren");

	Params::UIVerticalLayout_SetHeightFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetPadding
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FMargin&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetPadding(const struct FMargin& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetPadding");

	Params::UIVerticalLayout_SetPadding Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetSpacing
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetSpacing(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetSpacing");

	Params::UIVerticalLayout_SetSpacing Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetUseChildScaleOnHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetUseChildScaleOnHeight(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetUseChildScaleOnHeight");

	Params::UIVerticalLayout_SetUseChildScaleOnHeight Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetWidthFitToChildren(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetWidthFitToChildren");

	Params::UIVerticalLayout_SetWidthFitToChildren Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.SetWidthFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIVerticalLayout::SetWidthFitToChildrenFromMinToMax(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "SetWidthFitToChildrenFromMinToMax");

	Params::UIVerticalLayout_SetWidthFitToChildrenFromMinToMax Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIVerticalLayout.GetActuralRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIVerticalLayout::GetActuralRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetActuralRange");

	Params::UIVerticalLayout_GetActuralRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ELGUILayoutAlignmentType                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ELGUILayoutAlignmentType UUIVerticalLayout::GetAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetAlign");

	Params::UIVerticalLayout_GetAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetControlChildHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetControlChildHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetControlChildHeight");

	Params::UIVerticalLayout_GetControlChildHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetControlChildWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetControlChildWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetControlChildWidth");

	Params::UIVerticalLayout_GetControlChildWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetExpandChildHeightArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetExpandChildHeightArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetExpandChildHeightArea");

	Params::UIVerticalLayout_GetExpandChildHeightArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetExpandChildWidthArea
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetExpandChildWidthArea() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetExpandChildWidthArea");

	Params::UIVerticalLayout_GetExpandChildWidthArea Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetExpendChildrenHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetExpendChildrenHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetExpendChildrenHeight");

	Params::UIVerticalLayout_GetExpendChildrenHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetExpendChildrenWidth
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetExpendChildrenWidth() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetExpendChildrenWidth");

	Params::UIVerticalLayout_GetExpendChildrenWidth Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetHeightFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetHeightFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetHeightFitToChildren");

	Params::UIVerticalLayout_GetHeightFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetPadding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FMargin                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FMargin UUIVerticalLayout::GetPadding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetPadding");

	Params::UIVerticalLayout_GetPadding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetSpacing
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIVerticalLayout::GetSpacing() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetSpacing");

	Params::UIVerticalLayout_GetSpacing Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetUseChildScaleOnHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetUseChildScaleOnHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetUseChildScaleOnHeight");

	Params::UIVerticalLayout_GetUseChildScaleOnHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetWidthFitToChildren
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIVerticalLayout::GetWidthFitToChildren() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetWidthFitToChildren");

	Params::UIVerticalLayout_GetWidthFitToChildren Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIVerticalLayout.GetWidthFitToChildrenFromMinToMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIVerticalLayout::GetWidthFitToChildrenFromMinToMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIVerticalLayout", "GetWidthFitToChildrenFromMinToMax");

	Params::UIVerticalLayout_GetWidthFitToChildrenFromMinToMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.RequestRenderUpdate
// (Native, Public, BlueprintCallable)

void UUIWidget::RequestRenderUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "RequestRenderUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetBackgroundColor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FLinearColor&              NewBackgroundColor                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetBackgroundColor(const struct FLinearColor& NewBackgroundColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetBackgroundColor");

	Params::UIWidget_SetBackgroundColor Parms{};

	Parms.NewBackgroundColor = std::move(NewBackgroundColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetManuallyRedraw
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bUseManualRedraw                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetManuallyRedraw(bool bUseManualRedraw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetManuallyRedraw");

	Params::UIWidget_SetManuallyRedraw Parms{};

	Parms.bUseManualRedraw = bUseManualRedraw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetRedrawTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InRedrawTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetRedrawTime(float InRedrawTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetRedrawTime");

	Params::UIWidget_SetRedrawTime Parms{};

	Parms.InRedrawTime = InRedrawTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetResolutionScale
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetResolutionScale(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetResolutionScale");

	Params::UIWidget_SetResolutionScale Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetTickMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ETickMode                               InTickMode                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetTickMode(ETickMode InTickMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetTickMode");

	Params::UIWidget_SetTickMode Parms{};

	Parms.InTickMode = InTickMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetTickWhenOffscreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const bool                              bWantTickWhenOffscreen                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetTickWhenOffscreen(const bool bWantTickWhenOffscreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetTickWhenOffscreen");

	Params::UIWidget_SetTickWhenOffscreen Parms{};

	Parms.bWantTickWhenOffscreen = bWantTickWhenOffscreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetWidget
// (Native, Public, BlueprintCallable)
// Parameters:
// class UUserWidget*                      Widget_0                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetWidget(class UUserWidget* Widget_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetWidget");

	Params::UIWidget_SetWidget Parms{};

	Parms.Widget_0 = Widget_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetWindowFocusable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInWindowFocusable                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetWindowFocusable(bool bInWindowFocusable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetWindowFocusable");

	Params::UIWidget_SetWindowFocusable Parms{};

	Parms.bInWindowFocusable = bInWindowFocusable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.SetWindowVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EWindowVisibility                       InVisibility                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidget::SetWindowVisibility(EWindowVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "SetWindowVisibility");

	Params::UIWidget_SetWindowVisibility Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidget.GetCurrentDrawSize
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIWidget::GetCurrentDrawSize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetCurrentDrawSize");

	Params::UIWidget_GetCurrentDrawSize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetManuallyRedraw
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidget::GetManuallyRedraw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetManuallyRedraw");

	Params::UIWidget_GetManuallyRedraw Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetRedrawTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIWidget::GetRedrawTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetRedrawTime");

	Params::UIWidget_GetRedrawTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetRenderTarget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTextureRenderTarget2D*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTextureRenderTarget2D* UUIWidget::GetRenderTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetRenderTarget");

	Params::UIWidget_GetRenderTarget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetResolutionScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UUIWidget::GetResolutionScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetResolutionScale");

	Params::UIWidget_GetResolutionScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetTickWhenOffscreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidget::GetTickWhenOffscreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetTickWhenOffscreen");

	Params::UIWidget_GetTickWhenOffscreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetUserWidgetObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUIWidget::GetUserWidgetObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetUserWidgetObject");

	Params::UIWidget_GetUserWidgetObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetWidget
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UUIWidget::GetWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetWidget");

	Params::UIWidget_GetWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetWindowFocusable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidget::GetWindowFocusable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetWindowFocusable");

	Params::UIWidget_GetWindowFocusable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.GetWindowVisiblility
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EWindowVisibility                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EWindowVisibility UUIWidget::GetWindowVisiblility() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "GetWindowVisiblility");

	Params::UIWidget_GetWindowVisiblility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidget.IsWidgetVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidget::IsWidgetVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget", "IsWidgetVisible");

	Params::UIWidget_IsWidgetVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetActor.GetUIWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UUIWidget*                        ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUIWidget* AUIWidgetActor::GetUIWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetActor", "GetUIWidget");

	Params::UIWidgetActor_GetUIWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.PressAndReleaseKey
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::PressAndReleaseKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "PressAndReleaseKey");

	Params::UIWidgetInteraction_PressAndReleaseKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.PressKey
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRepeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::PressKey(const struct FKey& Key, bool bRepeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "PressKey");

	Params::UIWidgetInteraction_PressKey Parms{};

	Parms.Key = std::move(Key);
	Parms.bRepeat = bRepeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.PressPointerKey
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidgetInteraction::PressPointerKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "PressPointerKey");

	Params::UIWidgetInteraction_PressPointerKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidgetInteraction.ReleaseKey
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::ReleaseKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "ReleaseKey");

	Params::UIWidgetInteraction_ReleaseKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.ReleasePointerKey
// (Native, Public, BlueprintCallable)
// Parameters:
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidgetInteraction::ReleasePointerKey(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "ReleasePointerKey");

	Params::UIWidgetInteraction_ReleasePointerKey Parms{};

	Parms.Key = std::move(Key);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidgetInteraction.ScrollWheel
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   ScrollDelta                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidgetInteraction::ScrollWheel(float ScrollDelta)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "ScrollWheel");

	Params::UIWidgetInteraction_ScrollWheel Parms{};

	Parms.ScrollDelta = ScrollDelta;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidgetInteraction.SendKeyChar
// (Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Characters                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bRepeat                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::SendKeyChar(const class FString& Characters, bool bRepeat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "SendKeyChar");

	Params::UIWidgetInteraction_SendKeyChar Parms{};

	Parms.Characters = std::move(Characters);
	Parms.bRepeat = bRepeat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.SetCustomHitResult
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FHitResult&                HitResult                                              (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UUIWidgetInteraction::SetCustomHitResult(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "SetCustomHitResult");

	Params::UIWidgetInteraction_SetCustomHitResult Parms{};

	Parms.HitResult = std::move(HitResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidgetInteraction.SetFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          FocusWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIWidgetInteraction::SetFocus(class UWidget* FocusWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "SetFocus");

	Params::UIWidgetInteraction_SetFocus Parms{};

	Parms.FocusWidget = FocusWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function LGUI.UIWidgetInteraction.Get2DHitLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UUIWidgetInteraction::Get2DHitLocation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "Get2DHitLocation");

	Params::UIWidgetInteraction_Get2DHitLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.IsOverFocusableWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::IsOverFocusableWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "IsOverFocusableWidget");

	Params::UIWidgetInteraction_IsOverFocusableWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.IsOverHitTestVisibleWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::IsOverHitTestVisibleWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "IsOverHitTestVisibleWidget");

	Params::UIWidgetInteraction_IsOverHitTestVisibleWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function LGUI.UIWidgetInteraction.IsOverInteractableWidget
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIWidgetInteraction::IsOverInteractableWidget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidgetInteraction", "IsOverInteractableWidget");

	Params::UIWidgetInteraction_IsOverInteractableWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

