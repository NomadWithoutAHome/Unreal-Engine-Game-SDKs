#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleBuffComponent

#include "Basic.hpp"

#include "BP_BattleBuffComponent_classes.hpp"
#include "BP_BattleBuffComponent_parameters.hpp"


namespace SDK
{

// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ActivateBuff
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleBuffInstance_C*&        BuffInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*& SourceCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleBuffInstanceWrapper_C** BuffInstanceWrapper                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ActivateBuff(class UBP_BattleBuffInstance_C*& BuffInstance, class UAC_jRPG_CharacterBattleStats_C*& SourceCharacter, class UBP_BattleBuffInstanceWrapper_C** BuffInstanceWrapper, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ActivateBuff");

	Params::BP_BattleBuffComponent_C_ActivateBuff Parms{};

	Parms.BuffInstance = BuffInstance;
	Parms.SourceCharacter = SourceCharacter;

	UObject::ProcessEvent(Func, &Parms);

	BuffInstance = Parms.BuffInstance;
	SourceCharacter = Parms.SourceCharacter;

	if (BuffInstanceWrapper != nullptr)
		*BuffInstanceWrapper = Parms.BuffInstanceWrapper;

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.AddBuff
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleBuffInstanceWrapper_C*& BuffInstanceWrapper                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool*                                   Added                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::AddBuff(class UBP_BattleBuffInstanceWrapper_C*& BuffInstanceWrapper, bool* Added)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "AddBuff");

	Params::BP_BattleBuffComponent_C_AddBuff Parms{};

	Parms.BuffInstanceWrapper = BuffInstanceWrapper;

	UObject::ProcessEvent(Func, &Parms);

	BuffInstanceWrapper = Parms.BuffInstanceWrapper;

	if (Added != nullptr)
		*Added = Parms.Added;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.CreateBuffStack
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Count                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TurnDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*  SourceCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleBuffInstance_C*>*CreatedInstances                                       (Parm, OutParm)

void UBP_BattleBuffComponent_C::CreateBuffStack(class UClass* BuffClass, int32 Count, int32 TurnDuration, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, TArray<class UBP_BattleBuffInstance_C*>* CreatedInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "CreateBuffStack");

	Params::BP_BattleBuffComponent_C_CreateBuffStack Parms{};

	Parms.BuffClass = BuffClass;
	Parms.Count = Count;
	Parms.TurnDuration = TurnDuration;
	Parms.SourceCharacter = SourceCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (CreatedInstances != nullptr)
		*CreatedInstances = std::move(Parms.CreatedInstances);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.DeactivateOnOwnerKilled
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::DeactivateOnOwnerKilled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "DeactivateOnOwnerKilled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ExecuteUbergraph_BP_BattleBuffComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ExecuteUbergraph_BP_BattleBuffComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ExecuteUbergraph_BP_BattleBuffComponent");

	Params::BP_BattleBuffComponent_C_ExecuteUbergraph_BP_BattleBuffComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.FindActiveBuffsByInstigator
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Instigator                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleBuffInstance_C*>*BuffInstances                                          (Parm, OutParm)

void UBP_BattleBuffComponent_C::FindActiveBuffsByInstigator(class UObject* Instigator, class UClass* BuffClass, TArray<class UBP_BattleBuffInstance_C*>* BuffInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "FindActiveBuffsByInstigator");

	Params::BP_BattleBuffComponent_C_FindActiveBuffsByInstigator Parms{};

	Parms.Instigator = Instigator;
	Parms.BuffClass = BuffClass;

	UObject::ProcessEvent(Func, &Parms);

	if (BuffInstances != nullptr)
		*BuffInstances = std::move(Parms.BuffInstances);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.FindExistingSameBuffs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleBuffInstance_C*         Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleBuffInstanceWrapper_C*>*ActiveBuffInstanceWrappers                             (Parm, OutParm)

void UBP_BattleBuffComponent_C::FindExistingSameBuffs(class UBP_BattleBuffInstance_C* Buff, TArray<class UBP_BattleBuffInstanceWrapper_C*>* ActiveBuffInstanceWrappers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "FindExistingSameBuffs");

	Params::BP_BattleBuffComponent_C_FindExistingSameBuffs Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	if (ActiveBuffInstanceWrappers != nullptr)
		*ActiveBuffInstanceWrappers = std::move(Parms.ActiveBuffInstanceWrappers);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.FindWrapper
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleBuffInstance_C*&        Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleBuffInstanceWrapper_C** BuffInstanceWrappers                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::FindWrapper(class UBP_BattleBuffInstance_C*& Buff, class UBP_BattleBuffInstanceWrapper_C** BuffInstanceWrappers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "FindWrapper");

	Params::BP_BattleBuffComponent_C_FindWrapper Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	Buff = Parms.Buff;

	if (BuffInstanceWrappers != nullptr)
		*BuffInstanceWrappers = Parms.BuffInstanceWrappers;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetActiveBuffCounts
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_BattleBuffComponent_C::GetActiveBuffCounts(class UClass* Buff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetActiveBuffCounts");

	Params::BP_BattleBuffComponent_C_GetActiveBuffCounts Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetActiveBuffsByClass
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleBuffInstanceWrapper_C*>*ActiveBuffInstanceWrappers                             (Parm, OutParm)

void UBP_BattleBuffComponent_C::GetActiveBuffsByClass(class UClass* BuffClass, TArray<class UBP_BattleBuffInstanceWrapper_C*>* ActiveBuffInstanceWrappers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetActiveBuffsByClass");

	Params::BP_BattleBuffComponent_C_GetActiveBuffsByClass Parms{};

	Parms.BuffClass = BuffClass;

	UObject::ProcessEvent(Func, &Parms);

	if (ActiveBuffInstanceWrappers != nullptr)
		*ActiveBuffInstanceWrappers = std::move(Parms.ActiveBuffInstanceWrappers);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetBuffInstancesByType
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BuffAndStatusEffectTypes              Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleBuffInstance_C*>*Array                                                  (Parm, OutParm)

void UBP_BattleBuffComponent_C::GetBuffInstancesByType(E_BuffAndStatusEffectTypes Type, TArray<class UBP_BattleBuffInstance_C*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetBuffInstancesByType");

	Params::BP_BattleBuffComponent_C_GetBuffInstancesByType Parms{};

	Parms.Type = Type;

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetBuffInstancesByTypes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_BuffAndStatusEffectTypes>&     Type                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class UBP_BattleBuffInstance_C*>*Array                                                  (Parm, OutParm)

void UBP_BattleBuffComponent_C::GetBuffInstancesByTypes(TArray<E_BuffAndStatusEffectTypes>& Type, TArray<class UBP_BattleBuffInstance_C*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetBuffInstancesByTypes");

	Params::BP_BattleBuffComponent_C_GetBuffInstancesByTypes Parms{};

	Parms.Type = std::move(Type);

	UObject::ProcessEvent(Func, &Parms);

	Type = std::move(Parms.Type);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetOrCreateAggregatorBuff
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           AggregatorBuffClass                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleBuffInstance_AggregatorBase_C**AggregatorInstance                                     (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::GetOrCreateAggregatorBuff(class UClass* AggregatorBuffClass, class UBP_BattleBuffInstance_AggregatorBase_C** AggregatorInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetOrCreateAggregatorBuff");

	Params::BP_BattleBuffComponent_C_GetOrCreateAggregatorBuff Parms{};

	Parms.AggregatorBuffClass = AggregatorBuffClass;

	UObject::ProcessEvent(Func, &Parms);

	if (AggregatorInstance != nullptr)
		*AggregatorInstance = Parms.AggregatorInstance;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetStandbyBuffsByClass
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleBuffInstanceWrapper_C*>*StandbyBuffInstanceWrappers                            (Parm, OutParm)

void UBP_BattleBuffComponent_C::GetStandbyBuffsByClass(class UClass* BuffClass, TArray<class UBP_BattleBuffInstanceWrapper_C*>* StandbyBuffInstanceWrappers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetStandbyBuffsByClass");

	Params::BP_BattleBuffComponent_C_GetStandbyBuffsByClass Parms{};

	Parms.BuffClass = BuffClass;

	UObject::ProcessEvent(Func, &Parms);

	if (StandbyBuffInstanceWrappers != nullptr)
		*StandbyBuffInstanceWrappers = std::move(Parms.StandbyBuffInstanceWrappers);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.GetStatusEffectBuffInstance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBP_BattleBuffInstance_C*>*Array                                                  (Parm, OutParm)

void UBP_BattleBuffComponent_C::GetStatusEffectBuffInstance(TArray<class UBP_BattleBuffInstance_C*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "GetStatusEffectBuffInstance");

	Params::BP_BattleBuffComponent_C_GetStatusEffectBuffInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.HasBuffOfClass
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_BattleBuffComponent_C::HasBuffOfClass(class UClass* Buff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "HasBuffOfClass");

	Params::BP_BattleBuffComponent_C_HasBuffOfClass Parms{};

	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.Init
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.IsReadyToAddBuffs
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_BattleBuffComponent_C::IsReadyToAddBuffs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "IsReadyToAddBuffs");

	Params::BP_BattleBuffComponent_C_IsReadyToAddBuffs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.On Perfection Changed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentPerfection                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousPerfection                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_PerfectionUpdateType                  PerfectionChangeType                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPerfectionReason                       PerfectionChangeReason                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  FinalPerfection                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::On_Perfection_Changed(int32 CurrentPerfection, int32 PreviousPerfection, E_PerfectionUpdateType PerfectionChangeType, EPerfectionReason PerfectionChangeReason, int32* FinalPerfection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "On Perfection Changed");

	Params::BP_BattleBuffComponent_C_On_Perfection_Changed Parms{};

	Parms.CurrentPerfection = CurrentPerfection;
	Parms.PreviousPerfection = PreviousPerfection;
	Parms.PerfectionChangeType = PerfectionChangeType;
	Parms.PerfectionChangeReason = PerfectionChangeReason;

	UObject::ProcessEvent(Func, &Parms);

	if (FinalPerfection != nullptr)
		*FinalPerfection = Parms.FinalPerfection;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.On Stance Change
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StanceType                            NewStance                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_StanceType                            previousStance                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_StanceType*                           NewStance1                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_StanceType*                           PreviousStance1                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::On_Stance_Change(E_StanceType NewStance, E_StanceType previousStance, E_StanceType* NewStance1, E_StanceType* PreviousStance1)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "On Stance Change");

	Params::BP_BattleBuffComponent_C_On_Stance_Change Parms{};

	Parms.NewStance = NewStance;
	Parms.previousStance = previousStance;

	UObject::ProcessEvent(Func, &Parms);

	if (NewStance1 != nullptr)
		*NewStance1 = Parms.NewStance1;

	if (PreviousStance1 != nullptr)
		*PreviousStance1 = Parms.PreviousStance1;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnBattleEnded
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::OnBattleEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnBattleEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnCharacterHealed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleHeal_C*                 Heal                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::OnCharacterHealed(class UBP_BattleHeal_C* Heal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnCharacterHealed");

	Params::BP_BattleBuffComponent_C_OnCharacterHealed Parms{};

	Parms.Heal = Heal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnCharacterTurnEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::OnCharacterTurnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnCharacterTurnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnCharacterTurnStart
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::OnCharacterTurnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnCharacterTurnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnDeathDamagePrevented
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::OnDeathDamagePrevented()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnDeathDamagePrevented");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnGradientGaugeChange
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_GradientGaugeChangeEvent_C*   GradientChangeEvent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::OnGradientGaugeChange(class UBP_GradientGaugeChangeEvent_C* GradientChangeEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnGradientGaugeChange");

	Params::BP_BattleBuffComponent_C_OnGradientGaugeChange Parms{};

	Parms.GradientChangeEvent = GradientChangeEvent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnOwnerRevived
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::OnOwnerRevived()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnOwnerRevived");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.OnReintegratedToBattle
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::OnReintegratedToBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "OnReintegratedToBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessAPChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewAP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousAP                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAPChangeReason                         ChangeReason                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ProcessedNewAP                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessAPChange(int32 NewAP, int32 PreviousAP, EAPChangeReason ChangeReason, int32* ProcessedNewAP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessAPChange");

	Params::BP_BattleBuffComponent_C_ProcessAPChange Parms{};

	Parms.NewAP = NewAP;
	Parms.PreviousAP = PreviousAP;
	Parms.ChangeReason = ChangeReason;

	UObject::ProcessEvent(Func, &Parms);

	if (ProcessedNewAP != nullptr)
		*ProcessedNewAP = Parms.ProcessedNewAP;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessAPChangeEvent
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleEvent_APChange_C*       APChange                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessAPChangeEvent(class UBP_BattleEvent_APChange_C* APChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessAPChangeEvent");

	Params::BP_BattleBuffComponent_C_ProcessAPChangeEvent Parms{};

	Parms.APChange = APChange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessAttackElement
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*              BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessAttackElement(class UBP_BattleDamages_C* BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessAttackElement");

	Params::BP_BattleBuffComponent_C_ProcessAttackElement Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessBattleStartEvents
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DependencyRefCounter_C*       DepsRefCount                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessBattleStartEvents(class UBP_DependencyRefCounter_C* DepsRefCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessBattleStartEvents");

	Params::BP_BattleBuffComponent_C_ProcessBattleStartEvents Parms{};

	Parms.DepsRefCount = DepsRefCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessDealtDamageCriticalHitChance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*              BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessDealtDamageCriticalHitChance(class UBP_BattleDamages_C* BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessDealtDamageCriticalHitChance");

	Params::BP_BattleBuffComponent_C_ProcessDealtDamageCriticalHitChance Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessDealtRawDamages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*&             BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessDealtRawDamages(class UBP_BattleDamages_C*& BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessDealtRawDamages");

	Params::BP_BattleBuffComponent_C_ProcessDealtRawDamages Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);

	BattleDamages = Parms.BattleDamages;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessFinalDamages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*&             BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessFinalDamages(class UBP_BattleDamages_C*& BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessFinalDamages");

	Params::BP_BattleBuffComponent_C_ProcessFinalDamages Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);

	BattleDamages = Parms.BattleDamages;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessPermeate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*              BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessPermeate(class UBP_BattleDamages_C* BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessPermeate");

	Params::BP_BattleBuffComponent_C_ProcessPermeate Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessReceivedRawDamages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*&             BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::ProcessReceivedRawDamages(class UBP_BattleDamages_C*& BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessReceivedRawDamages");

	Params::BP_BattleBuffComponent_C_ProcessReceivedRawDamages Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);

	BattleDamages = Parms.BattleDamages;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.ProcessRemovedBuffs
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleBuffComponent_C::ProcessRemovedBuffs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "ProcessRemovedBuffs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.RemoveAllBuffsFromFamily
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BuffFamily                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::RemoveAllBuffsFromFamily(class UClass* BuffFamily)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "RemoveAllBuffsFromFamily");

	Params::BP_BattleBuffComponent_C_RemoveAllBuffsFromFamily Parms{};

	Parms.BuffFamily = BuffFamily;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.RemoveAllBuffsOfType
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_BuffAndStatusEffectTypes              BuffType                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::RemoveAllBuffsOfType(E_BuffAndStatusEffectTypes BuffType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "RemoveAllBuffsOfType");

	Params::BP_BattleBuffComponent_C_RemoveAllBuffsOfType Parms{};

	Parms.BuffType = BuffType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.RemoveBuffInstance
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleBuffInstance_C*         BuffInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::RemoveBuffInstance(class UBP_BattleBuffInstance_C* BuffInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "RemoveBuffInstance");

	Params::BP_BattleBuffComponent_C_RemoveBuffInstance Parms{};

	Parms.BuffInstance = BuffInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.RemoveBuffStacks
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_stacks_to_remove                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::RemoveBuffStacks(class UClass* Buff, int32 Number_of_stacks_to_remove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "RemoveBuffStacks");

	Params::BP_BattleBuffComponent_C_RemoveBuffStacks Parms{};

	Parms.Buff = Buff;
	Parms.Number_of_stacks_to_remove = Number_of_stacks_to_remove;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.RemoveBuffWrapper
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleBuffInstanceWrapper_C*  BuffInstanceWrapper                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::RemoveBuffWrapper(class UBP_BattleBuffInstanceWrapper_C* BuffInstanceWrapper, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "RemoveBuffWrapper");

	Params::BP_BattleBuffComponent_C_RemoveBuffWrapper Parms{};

	Parms.BuffInstanceWrapper = BuffInstanceWrapper;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.TryConsumeBuffs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           BuffClass                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   MinCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxCount                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IgnoreMaxCount                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ConsumedBuffs                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::TryConsumeBuffs(class UClass* BuffClass, int32 MinCount, int32 MaxCount, bool IgnoreMaxCount, bool* Success, int32* ConsumedBuffs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "TryConsumeBuffs");

	Params::BP_BattleBuffComponent_C_TryConsumeBuffs Parms{};

	Parms.BuffClass = BuffClass;
	Parms.MinCount = MinCount;
	Parms.MaxCount = MaxCount;
	Parms.IgnoreMaxCount = IgnoreMaxCount;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;

	if (ConsumedBuffs != nullptr)
		*ConsumedBuffs = Parms.ConsumedBuffs;
}


// Function BP_BattleBuffComponent.BP_BattleBuffComponent_C.TryRemoveBuffStacks
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   Number_of_stacks_to_remove                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  ConsumedStacks                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleBuffComponent_C::TryRemoveBuffStacks(class UClass* Buff, int32 Number_of_stacks_to_remove, int32* ConsumedStacks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleBuffComponent_C", "TryRemoveBuffStacks");

	Params::BP_BattleBuffComponent_C_TryRemoveBuffStacks Parms{};

	Parms.Buff = Buff;
	Parms.Number_of_stacks_to_remove = Number_of_stacks_to_remove;

	UObject::ProcessEvent(Func, &Parms);

	if (ConsumedStacks != nullptr)
		*ConsumedStacks = Parms.ConsumedStacks;
}

}

