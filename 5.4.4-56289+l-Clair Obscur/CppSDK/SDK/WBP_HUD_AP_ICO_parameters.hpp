#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HUD_AP_ICO

#include "Basic.hpp"

#include "ESkillType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_HUD_AP_ICO.WBP_HUD_AP_ICO_C.ExecuteUbergraph_WBP_HUD_AP_ICO
// 0x0008 (0x0008 - 0x0000)
struct WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsExpand;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO) == 0x000004, "Wrong alignment on WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO");
static_assert(sizeof(WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO) == 0x000008, "Wrong size on WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO");
static_assert(offsetof(WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO, EntryPoint) == 0x000000, "Member 'WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO, K2Node_CustomEvent_IsExpand) == 0x000005, "Member 'WBP_HUD_AP_ICO_C_ExecuteUbergraph_WBP_HUD_AP_ICO::K2Node_CustomEvent_IsExpand' has a wrong offset!");

// Function WBP_HUD_AP_ICO.WBP_HUD_AP_ICO_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_HUD_AP_ICO_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUD_AP_ICO_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_HUD_AP_ICO_C_PreConstruct");
static_assert(sizeof(WBP_HUD_AP_ICO_C_PreConstruct) == 0x000001, "Wrong size on WBP_HUD_AP_ICO_C_PreConstruct");
static_assert(offsetof(WBP_HUD_AP_ICO_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_HUD_AP_ICO_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_HUD_AP_ICO.WBP_HUD_AP_ICO_C.SetAPValue
// 0x0090 (0x0090 - 0x0000)
struct WBP_HUD_AP_ICO_C_SetAPValue final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0010)()
	float                                         Temp_real_Variable;                                // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_4;                              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_5;                              // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_6;                              // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_7;                              // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_8;                              // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_9;                              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_10;                             // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_11;                             // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_12;                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_13;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_14;                             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_15;                             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_16;                             // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_17;                             // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_18;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_19;                             // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_HUD_AP_ICO_C_SetAPValue) == 0x000008, "Wrong alignment on WBP_HUD_AP_ICO_C_SetAPValue");
static_assert(sizeof(WBP_HUD_AP_ICO_C_SetAPValue) == 0x000090, "Wrong size on WBP_HUD_AP_ICO_C_SetAPValue");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Value) == 0x000000, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Value' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_int_Variable) == 0x000004, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable) == 0x000018, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_1) == 0x00001C, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_2) == 0x000020, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_3) == 0x000024, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_4) == 0x000028, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_5) == 0x00002C, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_6) == 0x000030, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_7) == 0x000034, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_8) == 0x000038, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_9) == 0x00003C, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_int_Variable_1) == 0x000040, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_10) == 0x000044, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_11) == 0x000048, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_12) == 0x00004C, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_13) == 0x000050, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_14) == 0x000054, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_14' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_15) == 0x000058, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_15' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_16) == 0x00005C, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_16' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_17) == 0x000060, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_17' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_18) == 0x000064, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_18' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, Temp_real_Variable_19) == 0x000068, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::Temp_real_Variable_19' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000070, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, K2Node_Select_Default) == 0x000078, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, K2Node_Select_Default_1) == 0x00007C, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetAPValue, K2Node_MakeStruct_Margin) == 0x000080, "Member 'WBP_HUD_AP_ICO_C_SetAPValue::K2Node_MakeStruct_Margin' has a wrong offset!");

// Function WBP_HUD_AP_ICO.WBP_HUD_AP_ICO_C.SetCanAfford
// 0x00C0 (0x00C0 - 0x0000)
struct WBP_HUD_AP_ICO_C_SetCanAfford final
{
public:
	bool                                          CanAfford;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillType                                    Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0048(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x007C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x008C(0x0014)()
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUD_AP_ICO_C_SetCanAfford) == 0x000004, "Wrong alignment on WBP_HUD_AP_ICO_C_SetCanAfford");
static_assert(sizeof(WBP_HUD_AP_ICO_C_SetCanAfford) == 0x0000C0, "Wrong size on WBP_HUD_AP_ICO_C_SetCanAfford");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, CanAfford) == 0x000000, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::CanAfford' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_byte_Variable) == 0x000001, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable) == 0x000004, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable_1) == 0x000014, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable_2) == 0x000024, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable_3) == 0x000034, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_bool_Variable) == 0x000044, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable_4) == 0x000048, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable_5) == 0x000058, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_bool_Variable_1) == 0x000068, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, K2Node_Select_Default) == 0x00006C, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, Temp_struct_Variable_6) == 0x00007C, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, K2Node_MakeStruct_SlateColor) == 0x00008C, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, K2Node_Select_Default_1) == 0x0000A0, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetCanAfford, K2Node_Select_Default_2) == 0x0000B0, "Member 'WBP_HUD_AP_ICO_C_SetCanAfford::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_HUD_AP_ICO.WBP_HUD_AP_ICO_C.SetExpand
// 0x0001 (0x0001 - 0x0000)
struct WBP_HUD_AP_ICO_C_SetExpand final
{
public:
	bool                                          IsExpand;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUD_AP_ICO_C_SetExpand) == 0x000001, "Wrong alignment on WBP_HUD_AP_ICO_C_SetExpand");
static_assert(sizeof(WBP_HUD_AP_ICO_C_SetExpand) == 0x000001, "Wrong size on WBP_HUD_AP_ICO_C_SetExpand");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetExpand, IsExpand) == 0x000000, "Member 'WBP_HUD_AP_ICO_C_SetExpand::IsExpand' has a wrong offset!");

// Function WBP_HUD_AP_ICO.WBP_HUD_AP_ICO_C.SetSkillCostType
// 0x0001 (0x0001 - 0x0000)
struct WBP_HUD_AP_ICO_C_SetSkillCostType final
{
public:
	ESkillType                                    SkillCostType_0;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_HUD_AP_ICO_C_SetSkillCostType) == 0x000001, "Wrong alignment on WBP_HUD_AP_ICO_C_SetSkillCostType");
static_assert(sizeof(WBP_HUD_AP_ICO_C_SetSkillCostType) == 0x000001, "Wrong size on WBP_HUD_AP_ICO_C_SetSkillCostType");
static_assert(offsetof(WBP_HUD_AP_ICO_C_SetSkillCostType, SkillCostType_0) == 0x000000, "Member 'WBP_HUD_AP_ICO_C_SetSkillCostType::SkillCostType_0' has a wrong offset!");

}

