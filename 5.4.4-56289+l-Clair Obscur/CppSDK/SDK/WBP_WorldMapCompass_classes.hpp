#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WorldMapCompass

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_WorldMapCompass.WBP_WorldMapCompass_C
// 0x0028 (0x0330 - 0x0308)
class UWBP_WorldMapCompass_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UScaleBox*                              CompassBorderBox;                                  // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              CompassNeedleBox;                                  // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               CompassOverlay;                                    // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        LevelCompassYawOffset;                             // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_WorldMapCompass(int32 EntryPoint);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_WorldMapCompass_C">();
	}
	static class UWBP_WorldMapCompass_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_WorldMapCompass_C>();
	}
};
static_assert(alignof(UWBP_WorldMapCompass_C) == 0x000008, "Wrong alignment on UWBP_WorldMapCompass_C");
static_assert(sizeof(UWBP_WorldMapCompass_C) == 0x000330, "Wrong size on UWBP_WorldMapCompass_C");
static_assert(offsetof(UWBP_WorldMapCompass_C, UberGraphFrame) == 0x000308, "Member 'UWBP_WorldMapCompass_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_WorldMapCompass_C, CompassBorderBox) == 0x000310, "Member 'UWBP_WorldMapCompass_C::CompassBorderBox' has a wrong offset!");
static_assert(offsetof(UWBP_WorldMapCompass_C, CompassNeedleBox) == 0x000318, "Member 'UWBP_WorldMapCompass_C::CompassNeedleBox' has a wrong offset!");
static_assert(offsetof(UWBP_WorldMapCompass_C, CompassOverlay) == 0x000320, "Member 'UWBP_WorldMapCompass_C::CompassOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_WorldMapCompass_C, LevelCompassYawOffset) == 0x000328, "Member 'UWBP_WorldMapCompass_C::LevelCompassYawOffset' has a wrong offset!");

}

