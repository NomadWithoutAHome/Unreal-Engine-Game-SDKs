#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputKeyState

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InputKeyState.BP_InputKeyState_C
// 0x0078 (0x00A0 - 0x0028)
class UBP_InputKeyState_C final : public UObject
{
public:
	bool                                          IsPressed;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPressed;                                         // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnReleased;                                        // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPressedAlreadyBound;                             // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsReleasedAlreadyBound;                            // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Pressed_BoundObject;                               // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UObject*                                Released_BoundObject;                              // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   KeyName;                                           // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         LayerIndex;                                        // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AxisValue;                                         // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double Value)>  OnAxisValue;                                       // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UBP_InputKeyState_C* KeyState)> OnPressedKey;                // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void BindAxis(const TDelegate<void(double Value)>& Event, class UObject* Pressed_BoundObject_0);
	void BindPressed(const TDelegate<void()>& Event, class UObject* Pressed_BoundObject_0);
	void BindPressedKey(const TDelegate<void(class UBP_InputKeyState_C* KeyState)>& Event, class UObject* Pressed_BoundObject_0);
	void BindReleased(const TDelegate<void()>& Event, class UObject* BoundObject);
	void Init(class FName KeyName_0, int32 LayerIndex_0, bool IsPressed_0);
	void UnbindPressedByEvent(const TDelegate<void()>& Event);
	void UnbindPressedByObject(class UObject* Object);
	void UnbindReleasedByObject(class UObject* Object);
	void UpdateState(bool IsKeyDown, bool DisableEvents, double AxisValue_0, bool* WasConsumed);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InputKeyState_C">();
	}
	static class UBP_InputKeyState_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InputKeyState_C>();
	}
};
static_assert(alignof(UBP_InputKeyState_C) == 0x000008, "Wrong alignment on UBP_InputKeyState_C");
static_assert(sizeof(UBP_InputKeyState_C) == 0x0000A0, "Wrong size on UBP_InputKeyState_C");
static_assert(offsetof(UBP_InputKeyState_C, IsPressed) == 0x000028, "Member 'UBP_InputKeyState_C::IsPressed' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, OnPressed) == 0x000030, "Member 'UBP_InputKeyState_C::OnPressed' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, OnReleased) == 0x000040, "Member 'UBP_InputKeyState_C::OnReleased' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, IsPressedAlreadyBound) == 0x000050, "Member 'UBP_InputKeyState_C::IsPressedAlreadyBound' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, IsReleasedAlreadyBound) == 0x000051, "Member 'UBP_InputKeyState_C::IsReleasedAlreadyBound' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, Pressed_BoundObject) == 0x000058, "Member 'UBP_InputKeyState_C::Pressed_BoundObject' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, Released_BoundObject) == 0x000060, "Member 'UBP_InputKeyState_C::Released_BoundObject' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, KeyName) == 0x000068, "Member 'UBP_InputKeyState_C::KeyName' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, LayerIndex) == 0x000070, "Member 'UBP_InputKeyState_C::LayerIndex' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, AxisValue) == 0x000078, "Member 'UBP_InputKeyState_C::AxisValue' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, OnAxisValue) == 0x000080, "Member 'UBP_InputKeyState_C::OnAxisValue' has a wrong offset!");
static_assert(offsetof(UBP_InputKeyState_C, OnPressedKey) == 0x000090, "Member 'UBP_InputKeyState_C::OnPressedKey' has a wrong offset!");

}

