#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementManager

#include "Basic.hpp"

#include "BP_AchievementManager_classes.hpp"
#include "BP_AchievementManager_parameters.hpp"


namespace SDK
{

// Function BP_AchievementManager.BP_AchievementManager_C.ExecuteUbergraph_BP_AchievementManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementManager_C::ExecuteUbergraph_BP_AchievementManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "ExecuteUbergraph_BP_AchievementManager");

	Params::BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementManager.BP_AchievementManager_C.GetAchievementRuntimeData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AchievementID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_AchievementRuntimeData*       Data                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBP_AchievementManager_C::GetAchievementRuntimeData(class FName AchievementID, struct FS_AchievementRuntimeData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "GetAchievementRuntimeData");

	Params::BP_AchievementManager_C_GetAchievementRuntimeData Parms{};

	Parms.AchievementID = AchievementID;

	UObject::ProcessEvent(Func, &Parms);

	if (Data != nullptr)
		*Data = std::move(Parms.Data);
}


// Function BP_AchievementManager.BP_AchievementManager_C.GetAchievementSpecificPlatformID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            PlatformId                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementManager_C::GetAchievementSpecificPlatformID(class FName AchievementID, class FName* PlatformId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "GetAchievementSpecificPlatformID");

	Params::BP_AchievementManager_C_GetAchievementSpecificPlatformID Parms{};

	Parms.AchievementID = AchievementID;

	UObject::ProcessEvent(Func, &Parms);

	if (PlatformId != nullptr)
		*PlatformId = Parms.PlatformId;
}


// Function BP_AchievementManager.BP_AchievementManager_C.GetAllAchievementsIDs
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class FName>*                    AchievementIDs                                         (Parm, OutParm)

void UBP_AchievementManager_C::GetAllAchievementsIDs(TArray<class FName>* AchievementIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "GetAllAchievementsIDs");

	Params::BP_AchievementManager_C_GetAllAchievementsIDs Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AchievementIDs != nullptr)
		*AchievementIDs = std::move(Parms.AchievementIDs);
}


// Function BP_AchievementManager.BP_AchievementManager_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_AchievementManager_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementManager.BP_AchievementManager_C.InitializeOnSaveLoaded
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementManager_C::InitializeOnSaveLoaded(bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "InitializeOnSaveLoaded");

	Params::BP_AchievementManager_C_InitializeOnSaveLoaded Parms{};

	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementManager.BP_AchievementManager_C.IsAchievementUnlocked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             AchievementID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_AchievementManager_C::IsAchievementUnlocked(class FName AchievementID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "IsAchievementUnlocked");

	Params::BP_AchievementManager_C_IsAchievementUnlocked Parms{};

	Parms.AchievementID = AchievementID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_AchievementManager.BP_AchievementManager_C.OnAchievementTriggered
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FAchievementsMap&          AchievementsMap                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
// const bool                              bSuccess                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementManager_C::OnAchievementTriggered(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "OnAchievementTriggered");

	Params::BP_AchievementManager_C_OnAchievementTriggered Parms{};

	Parms.AchievementsMap = std::move(AchievementsMap);
	Parms.bSuccess = bSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementManager.BP_AchievementManager_C.OnAchievementValidatorPassed
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementManager_C::OnAchievementValidatorPassed(class FName AchievementID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "OnAchievementValidatorPassed");

	Params::BP_AchievementManager_C_OnAchievementValidatorPassed Parms{};

	Parms.AchievementID = AchievementID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_AchievementManager.BP_AchievementManager_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_AchievementManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_AchievementManager.BP_AchievementManager_C.UnlockAchievement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AchievementID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_AchievementManager_C::UnlockAchievement(class FName AchievementID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_AchievementManager_C", "UnlockAchievement");

	Params::BP_AchievementManager_C_UnlockAchievement Parms{};

	Parms.AchievementID = AchievementID;

	UObject::ProcessEvent(Func, &Parms);
}

}

