#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DataAsset_Item_Shard

#include "Basic.hpp"

#include "BP_DataAsset_Item_Shard_classes.hpp"
#include "BP_DataAsset_Item_Shard_parameters.hpp"


namespace SDK
{

// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.GetShardUpgradeCost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FS_ItemQuantity>*         RequiredItems                                          (Parm, OutParm)

void UBP_DataAsset_Item_Shard_C::GetShardUpgradeCost(TArray<struct FS_ItemQuantity>* RequiredItems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DataAsset_Item_Shard_C", "GetShardUpgradeCost");

	Params::BP_DataAsset_Item_Shard_C_GetShardUpgradeCost Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RequiredItems != nullptr)
		*RequiredItems = std::move(Parms.RequiredItems);
}


// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.GetConsumablesList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<struct FDataTableRowHandle>*     ConsumableItemPerLevel_0                               (Parm, OutParm)

void UBP_DataAsset_Item_Shard_C::GetConsumablesList(TArray<struct FDataTableRowHandle>* ConsumableItemPerLevel_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DataAsset_Item_Shard_C", "GetConsumablesList");

	Params::BP_DataAsset_Item_Shard_C_GetConsumablesList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ConsumableItemPerLevel_0 != nullptr)
		*ConsumableItemPerLevel_0 = std::move(Parms.ConsumableItemPerLevel_0);
}


// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.GetUpgradeLevelConsumableRow
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UpgradeLevel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor)

struct FDataTableRowHandle UBP_DataAsset_Item_Shard_C::GetUpgradeLevelConsumableRow(int32 UpgradeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DataAsset_Item_Shard_C", "GetUpgradeLevelConsumableRow");

	Params::BP_DataAsset_Item_Shard_C_GetUpgradeLevelConsumableRow Parms{};

	Parms.UpgradeLevel = UpgradeLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DataAsset_Item_Shard.BP_DataAsset_Item_Shard_C.OnAddedToInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_InventoryManager_C*      InventoryManager                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_LootContext&                  LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GeneratedItemInfo_Base_C**    GeneratedItem                                          (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_DataAsset_Item_Shard_C::OnAddedToInventory(class UAC_jRPG_InventoryManager_C* InventoryManager, class FName ItemId, struct FS_LootContext& LootContext, class UBP_GeneratedItemInfo_Base_C** GeneratedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DataAsset_Item_Shard_C", "OnAddedToInventory");

	Params::BP_DataAsset_Item_Shard_C_OnAddedToInventory Parms{};

	Parms.InventoryManager = InventoryManager;
	Parms.ItemId = ItemId;
	Parms.LootContext = std::move(LootContext);

	UObject::ProcessEvent(Func, &Parms);

	LootContext = std::move(Parms.LootContext);

	if (GeneratedItem != nullptr)
		*GeneratedItem = Parms.GeneratedItem;
}

}

