#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassNavigation

#include "Basic.hpp"

#include "MassEntity_classes.hpp"
#include "MassSpawner_classes.hpp"
#include "MassNavigation_structs.hpp"


namespace SDK
{

// Class MassNavigation.MassMovingAvoidanceProcessor
// 0x02B0 (0x0370 - 0x00C0)
class UMassMovingAvoidanceProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2B0];                                     // 0x00C0(0x02B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassMovingAvoidanceProcessor">();
	}
	static class UMassMovingAvoidanceProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassMovingAvoidanceProcessor>();
	}
};
static_assert(alignof(UMassMovingAvoidanceProcessor) == 0x000008, "Wrong alignment on UMassMovingAvoidanceProcessor");
static_assert(sizeof(UMassMovingAvoidanceProcessor) == 0x000370, "Wrong size on UMassMovingAvoidanceProcessor");

// Class MassNavigation.MassStandingAvoidanceProcessor
// 0x02B0 (0x0370 - 0x00C0)
class UMassStandingAvoidanceProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2B0];                                     // 0x00C0(0x02B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassStandingAvoidanceProcessor">();
	}
	static class UMassStandingAvoidanceProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassStandingAvoidanceProcessor>();
	}
};
static_assert(alignof(UMassStandingAvoidanceProcessor) == 0x000008, "Wrong alignment on UMassStandingAvoidanceProcessor");
static_assert(sizeof(UMassStandingAvoidanceProcessor) == 0x000370, "Wrong size on UMassStandingAvoidanceProcessor");

// Class MassNavigation.MassObstacleAvoidanceTrait
// 0x0078 (0x00A0 - 0x0028)
class UMassObstacleAvoidanceTrait final : public UMassEntityTraitBase
{
public:
	struct FMassMovingAvoidanceParameters         MovingParameters;                                  // 0x0028(0x0044)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMassStandingAvoidanceParameters       StandingParameters;                                // 0x006C(0x0034)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassObstacleAvoidanceTrait">();
	}
	static class UMassObstacleAvoidanceTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassObstacleAvoidanceTrait>();
	}
};
static_assert(alignof(UMassObstacleAvoidanceTrait) == 0x000008, "Wrong alignment on UMassObstacleAvoidanceTrait");
static_assert(sizeof(UMassObstacleAvoidanceTrait) == 0x0000A0, "Wrong size on UMassObstacleAvoidanceTrait");
static_assert(offsetof(UMassObstacleAvoidanceTrait, MovingParameters) == 0x000028, "Member 'UMassObstacleAvoidanceTrait::MovingParameters' has a wrong offset!");
static_assert(offsetof(UMassObstacleAvoidanceTrait, StandingParameters) == 0x00006C, "Member 'UMassObstacleAvoidanceTrait::StandingParameters' has a wrong offset!");

// Class MassNavigation.MassNavigationObstacleTrait
// 0x0000 (0x0028 - 0x0028)
class UMassNavigationObstacleTrait final : public UMassEntityTraitBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassNavigationObstacleTrait">();
	}
	static class UMassNavigationObstacleTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassNavigationObstacleTrait>();
	}
};
static_assert(alignof(UMassNavigationObstacleTrait) == 0x000008, "Wrong alignment on UMassNavigationObstacleTrait");
static_assert(sizeof(UMassNavigationObstacleTrait) == 0x000028, "Wrong size on UMassNavigationObstacleTrait");

// Class MassNavigation.MassOffLODNavigationProcessor
// 0x02A0 (0x0360 - 0x00C0)
class UMassOffLODNavigationProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassOffLODNavigationProcessor">();
	}
	static class UMassOffLODNavigationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassOffLODNavigationProcessor>();
	}
};
static_assert(alignof(UMassOffLODNavigationProcessor) == 0x000008, "Wrong alignment on UMassOffLODNavigationProcessor");
static_assert(sizeof(UMassOffLODNavigationProcessor) == 0x000360, "Wrong size on UMassOffLODNavigationProcessor");

// Class MassNavigation.MassNavigationSmoothHeightProcessor
// 0x02A0 (0x0360 - 0x00C0)
class UMassNavigationSmoothHeightProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassNavigationSmoothHeightProcessor">();
	}
	static class UMassNavigationSmoothHeightProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassNavigationSmoothHeightProcessor>();
	}
};
static_assert(alignof(UMassNavigationSmoothHeightProcessor) == 0x000008, "Wrong alignment on UMassNavigationSmoothHeightProcessor");
static_assert(sizeof(UMassNavigationSmoothHeightProcessor) == 0x000360, "Wrong size on UMassNavigationSmoothHeightProcessor");

// Class MassNavigation.MassMoveTargetFragmentInitializer
// 0x02A8 (0x0380 - 0x00D8)
class UMassMoveTargetFragmentInitializer final : public UMassObserverProcessor
{
public:
	uint8                                         Pad_D8[0x2A8];                                     // 0x00D8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassMoveTargetFragmentInitializer">();
	}
	static class UMassMoveTargetFragmentInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassMoveTargetFragmentInitializer>();
	}
};
static_assert(alignof(UMassMoveTargetFragmentInitializer) == 0x000008, "Wrong alignment on UMassMoveTargetFragmentInitializer");
static_assert(sizeof(UMassMoveTargetFragmentInitializer) == 0x000380, "Wrong size on UMassMoveTargetFragmentInitializer");

// Class MassNavigation.MassNavigationObstacleGridProcessor
// 0x07E0 (0x08A0 - 0x00C0)
class UMassNavigationObstacleGridProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x7E0];                                     // 0x00C0(0x07E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassNavigationObstacleGridProcessor">();
	}
	static class UMassNavigationObstacleGridProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassNavigationObstacleGridProcessor>();
	}
};
static_assert(alignof(UMassNavigationObstacleGridProcessor) == 0x000008, "Wrong alignment on UMassNavigationObstacleGridProcessor");
static_assert(sizeof(UMassNavigationObstacleGridProcessor) == 0x0008A0, "Wrong size on UMassNavigationObstacleGridProcessor");

// Class MassNavigation.MassNavigationObstacleRemoverProcessor
// 0x02A8 (0x0380 - 0x00D8)
class UMassNavigationObstacleRemoverProcessor final : public UMassObserverProcessor
{
public:
	uint8                                         Pad_D8[0x2A8];                                     // 0x00D8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassNavigationObstacleRemoverProcessor">();
	}
	static class UMassNavigationObstacleRemoverProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassNavigationObstacleRemoverProcessor>();
	}
};
static_assert(alignof(UMassNavigationObstacleRemoverProcessor) == 0x000008, "Wrong alignment on UMassNavigationObstacleRemoverProcessor");
static_assert(sizeof(UMassNavigationObstacleRemoverProcessor) == 0x000380, "Wrong size on UMassNavigationObstacleRemoverProcessor");

// Class MassNavigation.MassNavigationSubsystem
// 0x00A8 (0x00E0 - 0x0038)
class UMassNavigationSubsystem final : public UMassSubsystemBase
{
public:
	uint8                                         Pad_38[0xA8];                                      // 0x0038(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassNavigationSubsystem">();
	}
	static class UMassNavigationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassNavigationSubsystem>();
	}
};
static_assert(alignof(UMassNavigationSubsystem) == 0x000008, "Wrong alignment on UMassNavigationSubsystem");
static_assert(sizeof(UMassNavigationSubsystem) == 0x0000E0, "Wrong size on UMassNavigationSubsystem");

// Class MassNavigation.MassSmoothOrientationProcessor
// 0x0540 (0x0600 - 0x00C0)
class UMassSmoothOrientationProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x540];                                     // 0x00C0(0x0540)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassSmoothOrientationProcessor">();
	}
	static class UMassSmoothOrientationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassSmoothOrientationProcessor>();
	}
};
static_assert(alignof(UMassSmoothOrientationProcessor) == 0x000008, "Wrong alignment on UMassSmoothOrientationProcessor");
static_assert(sizeof(UMassSmoothOrientationProcessor) == 0x000600, "Wrong size on UMassSmoothOrientationProcessor");

// Class MassNavigation.MassSmoothOrientationTrait
// 0x0018 (0x0040 - 0x0028)
class UMassSmoothOrientationTrait final : public UMassEntityTraitBase
{
public:
	struct FMassSmoothOrientationParameters       Orientation;                                       // 0x0028(0x0018)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassSmoothOrientationTrait">();
	}
	static class UMassSmoothOrientationTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassSmoothOrientationTrait>();
	}
};
static_assert(alignof(UMassSmoothOrientationTrait) == 0x000008, "Wrong alignment on UMassSmoothOrientationTrait");
static_assert(sizeof(UMassSmoothOrientationTrait) == 0x000040, "Wrong size on UMassSmoothOrientationTrait");
static_assert(offsetof(UMassSmoothOrientationTrait, Orientation) == 0x000028, "Member 'UMassSmoothOrientationTrait::Orientation' has a wrong offset!");

// Class MassNavigation.MassSteerToMoveTargetProcessor
// 0x02A0 (0x0360 - 0x00C0)
class UMassSteerToMoveTargetProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassSteerToMoveTargetProcessor">();
	}
	static class UMassSteerToMoveTargetProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassSteerToMoveTargetProcessor>();
	}
};
static_assert(alignof(UMassSteerToMoveTargetProcessor) == 0x000008, "Wrong alignment on UMassSteerToMoveTargetProcessor");
static_assert(sizeof(UMassSteerToMoveTargetProcessor) == 0x000360, "Wrong size on UMassSteerToMoveTargetProcessor");

// Class MassNavigation.MassSteeringTrait
// 0x0028 (0x0050 - 0x0028)
class UMassSteeringTrait final : public UMassEntityTraitBase
{
public:
	struct FMassMovingSteeringParameters          MovingSteering;                                    // 0x0028(0x0008)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMassStandingSteeringParameters        StandingSteering;                                  // 0x0030(0x0020)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassSteeringTrait">();
	}
	static class UMassSteeringTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassSteeringTrait>();
	}
};
static_assert(alignof(UMassSteeringTrait) == 0x000008, "Wrong alignment on UMassSteeringTrait");
static_assert(sizeof(UMassSteeringTrait) == 0x000050, "Wrong size on UMassSteeringTrait");
static_assert(offsetof(UMassSteeringTrait, MovingSteering) == 0x000028, "Member 'UMassSteeringTrait::MovingSteering' has a wrong offset!");
static_assert(offsetof(UMassSteeringTrait, StandingSteering) == 0x000030, "Member 'UMassSteeringTrait::StandingSteering' has a wrong offset!");

}

