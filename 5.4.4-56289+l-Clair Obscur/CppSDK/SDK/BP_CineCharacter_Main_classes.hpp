#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CineCharacter_Main

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_Expressions_Metahuman_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CineCharacter_Main.BP_CineCharacter_Main_C
// 0x0388 (0x06A0 - 0x0318)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_CineCharacter_Main_C : public APawn
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0318(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        FocusPoint;                                        // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EyeEffectsControllerComponent_C*    BP_EyeEffectsControllerComponent;                  // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvironmentInteractorComponent_C*   BP_EnvironmentInteractorComponent_foot_right;      // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvironmentInteractorComponent_C*   BP_EnvironmentInteractorComponent_foot_left;       // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_Hat;                                            // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_NPC_DustingSphere;                              // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_Dusting;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULiveLinkComponentController*           LiveLinkComponentController;                       // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CinematicCharacterSkinComponent_C*  BP_CinematicCharacterSkinComponent;                // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArmFront;                                    // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArmFace;                                     // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_UsedForVelocity;                            // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LookAtPosition;                                    // 0x0380(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Hand_L;                                 // 0x0388(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Hand_R;                                 // 0x0390(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Weapons_Base;                                      // 0x0398(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TargetLookAtSphere;                                // 0x03A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSync;                                           // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroomComponent*                        Hair;                                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Haircut_SkeletalMesh;                              // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroomComponent*                        Eyebrows;                                          // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroomComponent*                        Eyelashes;                                         // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Haircut_StaticMesh;                                // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroomComponent*                        Mustache;                                          // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Light_Pelvis_Attachment;                           // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGroomComponent*                        Beard;                                             // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Face;                                              // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_ArmRing2;                                       // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_ArmRing1;                                       // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_ArmRing3;                                       // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Body;                                              // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SGXAlphaUp_Alpha_28DC9226460AA6CA41118B86734D803B; // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SGXAlphaUp__Direction_28DC9226460AA6CA41118B86734D803B; // 0x0424(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_425[0x3];                                      // 0x0425(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SGXAlphaUp;                                        // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SGXAlpha_Alpha_DD9523544B77DF0FEED64A9C66272505;   // 0x0430(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SGXAlpha__Direction_DD9523544B77DF0FEED64A9C66272505; // 0x0434(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SGXAlpha;                                          // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          UseLookAtSphereSystem;                             // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_441[0xF];                                      // 0x0441(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FaceWorldTransform;                                // 0x0450(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             DialogSoundWave_Cache;                             // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 ActorToLookAt;                                     // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Interp, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             Dialog_SoundWave;                                  // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Interp, NoDestructor, HasGetValueTypeHash)
	class FName                                   HeadCenterBoneName;                                // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FacialAnimationScale;                              // 0x04D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Expressions_Metahuman                       Expression_1;                                      // 0x04D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Expression_1_Strength;                             // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	E_Expressions_Metahuman                       Expression_2;                                      // 0x04E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E1[0x7];                                      // 0x04E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Expression_2_Strength;                             // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        ManualFacialAnimAlpha;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMocapHands;                                     // 0x04F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponSkin_C*                       Weapons;                                           // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, Interp, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weapon_R_Socket_Name;                              // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weapon_L_Socket_Name;                              // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeaponClass;                                       // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Deprecated_Sequence_ShowWeapon;                    // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_521[0x3];                                      // 0x0521(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EyeOcclusionOpacity;                               // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        BreathingAlpha;                                    // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	int32                                         TurningDirection;                                  // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAutomaticTurnInPlaceAnimations;                 // 0x0534(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_535[0x3];                                      // 0x0535(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Speed;                                             // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAutomaticMovementSystem;                        // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            MovementBlendSpace;                                // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAt_OnlyMoveHead;                               // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LookAtInterpolationSpeed;                          // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EAttachmentRule                               Location_Rule;                                     // 0x0560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_561[0xF];                                      // 0x0561(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Weapon_R_Offset;                                   // 0x0570(0x0060)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             Weapon_L_Offset;                                   // 0x05D0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          UseHandAdditive;                                   // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          SequencerShowWeapons_New;                          // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          CinematicWeaponsAreSummoned;                       // 0x0632(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_633[0x5];                                      // 0x0633(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WeaponAppearTime;                                  // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        WeaponDisappearTime;                               // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        DustingLevel;                                      // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        DirtLevel;                                         // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        SweatLevel;                                        // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TearsLevel;                                        // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        BloodLevel;                                        // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        ActivateFXThreshold;                               // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class FName                                   BoneToAttachHaircutTo;                             // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeDilation;                                      // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<class UMeshComponent*>                 MeshesToAlter;                                     // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void ActivateFX();
	void AttachWeaponToHands(class ABP_WeaponSkin_C* Weapons_0);
	void BndEvt__BP_CineCharacter_Main_BP_CinematicCharacterSkinComponent_K2Node_ComponentBoundEvent_1_OnCharacterCustomizationChanged__DelegateSignature(class UBP_CharacterSkinComponent_C* SkinComponent);
	void BndEvt__BP_CineCharacter_Main_LiveLinkComponentController_K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature(float DeltaTime);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ExecuteUbergraph_BP_CineCharacter_Main(int32 EntryPoint);
	void GetAllElementsToDust(TArray<class UMeshComponent*>* ElementsToDust);
	void GetGroomComponents(TArray<class UGroomComponent*>* Array);
	void MakeGroomAppear();
	void MakeGroomDisappear();
	void PlayDialogWave();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void ResetFX();
	void ResetWeaponsPosition(class ABP_WeaponSkin_C* weapon);
	void SetBloodLevel(double NewValue);
	void SetDirtLevel(double NewValue);
	void SetDustingLevel(double NewParam);
	void SetSequence_ShowWeapon(bool NewValue);
	void SetSweatLevel(double NewValue);
	void SetTearsLevel(double NewValue);
	void SetTimeDilation(double NewValue);
	void SGXAlpha__FinishedFunc();
	void SGXAlpha__UpdateFunc();
	void SGXAlphaUp__FinishedFunc();
	void SGXAlphaUp__UpdateFunc();
	void SpawnWeaponAndSetSkin(bool IsVerso);
	void UpdateCharactersLODs(class UConfigurableGameUserSettings* NewParam);
	void UpdateCharacterVisualAlterationElements();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CineCharacter_Main_C">();
	}
	static class ABP_CineCharacter_Main_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_CineCharacter_Main_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_CineCharacter_Main_C) == 0x000010, "Wrong alignment on ABP_CineCharacter_Main_C");
static_assert(sizeof(ABP_CineCharacter_Main_C) == 0x0006A0, "Wrong size on ABP_CineCharacter_Main_C");
static_assert(offsetof(ABP_CineCharacter_Main_C, UberGraphFrame) == 0x000318, "Member 'ABP_CineCharacter_Main_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FocusPoint) == 0x000320, "Member 'ABP_CineCharacter_Main_C::FocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BP_EyeEffectsControllerComponent) == 0x000328, "Member 'ABP_CineCharacter_Main_C::BP_EyeEffectsControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BP_EnvironmentInteractorComponent_foot_right) == 0x000330, "Member 'ABP_CineCharacter_Main_C::BP_EnvironmentInteractorComponent_foot_right' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BP_EnvironmentInteractorComponent_foot_left) == 0x000338, "Member 'ABP_CineCharacter_Main_C::BP_EnvironmentInteractorComponent_foot_left' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SM_Hat) == 0x000340, "Member 'ABP_CineCharacter_Main_C::SM_Hat' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FX_NPC_DustingSphere) == 0x000348, "Member 'ABP_CineCharacter_Main_C::FX_NPC_DustingSphere' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FX_Dusting) == 0x000350, "Member 'ABP_CineCharacter_Main_C::FX_Dusting' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, LiveLinkComponentController) == 0x000358, "Member 'ABP_CineCharacter_Main_C::LiveLinkComponentController' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BP_CinematicCharacterSkinComponent) == 0x000360, "Member 'ABP_CineCharacter_Main_C::BP_CinematicCharacterSkinComponent' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SpringArmFront) == 0x000368, "Member 'ABP_CineCharacter_Main_C::SpringArmFront' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SpringArmFace) == 0x000370, "Member 'ABP_CineCharacter_Main_C::SpringArmFace' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Sphere_UsedForVelocity) == 0x000378, "Member 'ABP_CineCharacter_Main_C::Sphere_UsedForVelocity' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, LookAtPosition) == 0x000380, "Member 'ABP_CineCharacter_Main_C::LookAtPosition' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Attachment_Hand_L) == 0x000388, "Member 'ABP_CineCharacter_Main_C::Attachment_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Attachment_Hand_R) == 0x000390, "Member 'ABP_CineCharacter_Main_C::Attachment_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Weapons_Base) == 0x000398, "Member 'ABP_CineCharacter_Main_C::Weapons_Base' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, TargetLookAtSphere) == 0x0003A0, "Member 'ABP_CineCharacter_Main_C::TargetLookAtSphere' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, LODSync) == 0x0003A8, "Member 'ABP_CineCharacter_Main_C::LODSync' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Hair) == 0x0003B0, "Member 'ABP_CineCharacter_Main_C::Hair' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Haircut_SkeletalMesh) == 0x0003B8, "Member 'ABP_CineCharacter_Main_C::Haircut_SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Eyebrows) == 0x0003C0, "Member 'ABP_CineCharacter_Main_C::Eyebrows' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Eyelashes) == 0x0003C8, "Member 'ABP_CineCharacter_Main_C::Eyelashes' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Haircut_StaticMesh) == 0x0003D0, "Member 'ABP_CineCharacter_Main_C::Haircut_StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Mustache) == 0x0003D8, "Member 'ABP_CineCharacter_Main_C::Mustache' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Light_Pelvis_Attachment) == 0x0003E0, "Member 'ABP_CineCharacter_Main_C::Light_Pelvis_Attachment' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Beard) == 0x0003E8, "Member 'ABP_CineCharacter_Main_C::Beard' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Face) == 0x0003F0, "Member 'ABP_CineCharacter_Main_C::Face' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FX_ArmRing2) == 0x0003F8, "Member 'ABP_CineCharacter_Main_C::FX_ArmRing2' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FX_ArmRing1) == 0x000400, "Member 'ABP_CineCharacter_Main_C::FX_ArmRing1' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FX_ArmRing3) == 0x000408, "Member 'ABP_CineCharacter_Main_C::FX_ArmRing3' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Body) == 0x000410, "Member 'ABP_CineCharacter_Main_C::Body' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, DefaultSceneRoot) == 0x000418, "Member 'ABP_CineCharacter_Main_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SGXAlphaUp_Alpha_28DC9226460AA6CA41118B86734D803B) == 0x000420, "Member 'ABP_CineCharacter_Main_C::SGXAlphaUp_Alpha_28DC9226460AA6CA41118B86734D803B' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SGXAlphaUp__Direction_28DC9226460AA6CA41118B86734D803B) == 0x000424, "Member 'ABP_CineCharacter_Main_C::SGXAlphaUp__Direction_28DC9226460AA6CA41118B86734D803B' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SGXAlphaUp) == 0x000428, "Member 'ABP_CineCharacter_Main_C::SGXAlphaUp' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SGXAlpha_Alpha_DD9523544B77DF0FEED64A9C66272505) == 0x000430, "Member 'ABP_CineCharacter_Main_C::SGXAlpha_Alpha_DD9523544B77DF0FEED64A9C66272505' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SGXAlpha__Direction_DD9523544B77DF0FEED64A9C66272505) == 0x000434, "Member 'ABP_CineCharacter_Main_C::SGXAlpha__Direction_DD9523544B77DF0FEED64A9C66272505' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SGXAlpha) == 0x000438, "Member 'ABP_CineCharacter_Main_C::SGXAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, UseLookAtSphereSystem) == 0x000440, "Member 'ABP_CineCharacter_Main_C::UseLookAtSphereSystem' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FaceWorldTransform) == 0x000450, "Member 'ABP_CineCharacter_Main_C::FaceWorldTransform' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, DialogSoundWave_Cache) == 0x0004B0, "Member 'ABP_CineCharacter_Main_C::DialogSoundWave_Cache' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, ActorToLookAt) == 0x0004B8, "Member 'ABP_CineCharacter_Main_C::ActorToLookAt' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Dialog_SoundWave) == 0x0004C0, "Member 'ABP_CineCharacter_Main_C::Dialog_SoundWave' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, HeadCenterBoneName) == 0x0004C8, "Member 'ABP_CineCharacter_Main_C::HeadCenterBoneName' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, FacialAnimationScale) == 0x0004D0, "Member 'ABP_CineCharacter_Main_C::FacialAnimationScale' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Expression_1) == 0x0004D4, "Member 'ABP_CineCharacter_Main_C::Expression_1' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Expression_1_Strength) == 0x0004D8, "Member 'ABP_CineCharacter_Main_C::Expression_1_Strength' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Expression_2) == 0x0004E0, "Member 'ABP_CineCharacter_Main_C::Expression_2' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Expression_2_Strength) == 0x0004E8, "Member 'ABP_CineCharacter_Main_C::Expression_2_Strength' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, ManualFacialAnimAlpha) == 0x0004F0, "Member 'ABP_CineCharacter_Main_C::ManualFacialAnimAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, UseMocapHands) == 0x0004F8, "Member 'ABP_CineCharacter_Main_C::UseMocapHands' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Weapons) == 0x000500, "Member 'ABP_CineCharacter_Main_C::Weapons' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Weapon_R_Socket_Name) == 0x000508, "Member 'ABP_CineCharacter_Main_C::Weapon_R_Socket_Name' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Weapon_L_Socket_Name) == 0x000510, "Member 'ABP_CineCharacter_Main_C::Weapon_L_Socket_Name' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, WeaponClass) == 0x000518, "Member 'ABP_CineCharacter_Main_C::WeaponClass' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Deprecated_Sequence_ShowWeapon) == 0x000520, "Member 'ABP_CineCharacter_Main_C::Deprecated_Sequence_ShowWeapon' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, EyeOcclusionOpacity) == 0x000524, "Member 'ABP_CineCharacter_Main_C::EyeOcclusionOpacity' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BreathingAlpha) == 0x000528, "Member 'ABP_CineCharacter_Main_C::BreathingAlpha' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, TurningDirection) == 0x000530, "Member 'ABP_CineCharacter_Main_C::TurningDirection' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, UseAutomaticTurnInPlaceAnimations) == 0x000534, "Member 'ABP_CineCharacter_Main_C::UseAutomaticTurnInPlaceAnimations' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Speed) == 0x000538, "Member 'ABP_CineCharacter_Main_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, UseAutomaticMovementSystem) == 0x000540, "Member 'ABP_CineCharacter_Main_C::UseAutomaticMovementSystem' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, MovementBlendSpace) == 0x000548, "Member 'ABP_CineCharacter_Main_C::MovementBlendSpace' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, LookAt_OnlyMoveHead) == 0x000550, "Member 'ABP_CineCharacter_Main_C::LookAt_OnlyMoveHead' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, LookAtInterpolationSpeed) == 0x000558, "Member 'ABP_CineCharacter_Main_C::LookAtInterpolationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Location_Rule) == 0x000560, "Member 'ABP_CineCharacter_Main_C::Location_Rule' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Weapon_R_Offset) == 0x000570, "Member 'ABP_CineCharacter_Main_C::Weapon_R_Offset' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, Weapon_L_Offset) == 0x0005D0, "Member 'ABP_CineCharacter_Main_C::Weapon_L_Offset' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, UseHandAdditive) == 0x000630, "Member 'ABP_CineCharacter_Main_C::UseHandAdditive' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SequencerShowWeapons_New) == 0x000631, "Member 'ABP_CineCharacter_Main_C::SequencerShowWeapons_New' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, CinematicWeaponsAreSummoned) == 0x000632, "Member 'ABP_CineCharacter_Main_C::CinematicWeaponsAreSummoned' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, WeaponAppearTime) == 0x000638, "Member 'ABP_CineCharacter_Main_C::WeaponAppearTime' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, WeaponDisappearTime) == 0x000640, "Member 'ABP_CineCharacter_Main_C::WeaponDisappearTime' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, DustingLevel) == 0x000648, "Member 'ABP_CineCharacter_Main_C::DustingLevel' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, DirtLevel) == 0x000650, "Member 'ABP_CineCharacter_Main_C::DirtLevel' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, SweatLevel) == 0x000658, "Member 'ABP_CineCharacter_Main_C::SweatLevel' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, TearsLevel) == 0x000660, "Member 'ABP_CineCharacter_Main_C::TearsLevel' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BloodLevel) == 0x000668, "Member 'ABP_CineCharacter_Main_C::BloodLevel' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, ActivateFXThreshold) == 0x000670, "Member 'ABP_CineCharacter_Main_C::ActivateFXThreshold' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, BoneToAttachHaircutTo) == 0x000678, "Member 'ABP_CineCharacter_Main_C::BoneToAttachHaircutTo' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, TimeDilation) == 0x000680, "Member 'ABP_CineCharacter_Main_C::TimeDilation' has a wrong offset!");
static_assert(offsetof(ABP_CineCharacter_Main_C, MeshesToAlter) == 0x000688, "Member 'ABP_CineCharacter_Main_C::MeshesToAlter' has a wrong offset!");

}

