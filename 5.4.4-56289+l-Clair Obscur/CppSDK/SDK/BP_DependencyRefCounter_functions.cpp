#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DependencyRefCounter

#include "Basic.hpp"

#include "BP_DependencyRefCounter_classes.hpp"
#include "BP_DependencyRefCounter_parameters.hpp"


namespace SDK
{

// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.AreAllDependenciesSolved
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   AllSolved                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_DependencyRefCounter_C::AreAllDependenciesSolved(bool* AllSolved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "AreAllDependenciesSolved");

	Params::BP_DependencyRefCounter_C_AreAllDependenciesSolved Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AllSolved != nullptr)
		*AllSolved = Parms.AllSolved;
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.CheckDependencies
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DependencyRefCounter_C::CheckDependencies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "CheckDependencies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.GetDebugText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText*                            Result                                                 (Parm, OutParm)

void UBP_DependencyRefCounter_C::GetDebugText(class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "GetDebugText");

	Params::BP_DependencyRefCounter_C_GetDebugText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.HasNoPendingDependency
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_DependencyRefCounter_C::HasNoPendingDependency()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "HasNoPendingDependency");

	Params::BP_DependencyRefCounter_C_HasNoPendingDependency Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.HasObjectAsDependency
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class UObject*&                   Object                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_DependencyRefCounter_C::HasObjectAsDependency(const class UObject*& Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "HasObjectAsDependency");

	Params::BP_DependencyRefCounter_C_HasObjectAsDependency Parms{};

	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.Register Dependency
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Dependency                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_DependencyRefCounter_C::Register_Dependency(class UObject* Dependency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "Register Dependency");

	Params::BP_DependencyRefCounter_C_Register_Dependency Parms{};

	Parms.Dependency = Dependency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.Reset
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DependencyRefCounter_C::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "Reset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.ResetAllDependencies
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DependencyRefCounter_C::ResetAllDependencies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "ResetAllDependencies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.SolveDependency
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Dependency                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_DependencyRefCounter_C::SolveDependency(class UObject* Dependency)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "SolveDependency");

	Params::BP_DependencyRefCounter_C_SolveDependency Parms{};

	Parms.Dependency = Dependency;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DependencyRefCounter.BP_DependencyRefCounter_C.StartListenToDependencies
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_DependencyRefCounter_C::StartListenToDependencies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DependencyRefCounter_C", "StartListenToDependencies");

	UObject::ProcessEvent(Func, nullptr);
}

}

