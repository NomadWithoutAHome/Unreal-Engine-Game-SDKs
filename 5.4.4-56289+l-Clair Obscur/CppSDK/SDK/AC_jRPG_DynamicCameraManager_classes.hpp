#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_DynamicCameraManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_jRPG_DynamicCameraManager.AC_jRPG_DynamicCameraManager_C
// 0x07C0 (0x0860 - 0x00A0)
class UAC_jRPG_DynamicCameraManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   DefaultPathID;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACineCameraActor*                       CameraActor;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, class ABP_jRPG_DynamicCameraPath_C*> DynamicCameraPaths;                       // 0x00B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_jRPG_DynamicCameraPath_C*           ActiveCameraPath;                                  // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        PathDistance;                                      // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Speed;                                             // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LoopEnabled;                                       // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseAutoCameraManagement;                           // 0x0121(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_122[0xE];                                      // 0x0122(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPostProcessSettings                   CameraPostProcess;                                 // 0x0130(0x06F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UObject*                                Battlemap_Prefab;                                  // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   LastPathID;                                        // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                LastLocation;                                      // 0x0830(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LastUpdatePathLocation;                            // 0x0848(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_849[0x7];                                      // 0x0849(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BattleMap_C*                        BattleMapBP;                                       // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargeting;                                       // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_AC_jRPG_DynamicCameraManager(int32 EntryPoint);
	void LoadBattleMap(class ABP_BattleMap_C* BattleMapBP_0);
	void ReapplyDynamicPath();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetAsViewTargetInstant();
	void SetNewDynamicPath(class FName PathID, bool RandomStartDistance, bool Loop, bool UpdatePathLocation, const struct FVector& NewLocation);
	void StoreDynamicPathActors();
	void UpdateCameraLocAndRot(double PathTime, bool IsTargeting_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_jRPG_DynamicCameraManager_C">();
	}
	static class UAC_jRPG_DynamicCameraManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_jRPG_DynamicCameraManager_C>();
	}
};
static_assert(alignof(UAC_jRPG_DynamicCameraManager_C) == 0x000010, "Wrong alignment on UAC_jRPG_DynamicCameraManager_C");
static_assert(sizeof(UAC_jRPG_DynamicCameraManager_C) == 0x000860, "Wrong size on UAC_jRPG_DynamicCameraManager_C");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, UberGraphFrame) == 0x0000A0, "Member 'UAC_jRPG_DynamicCameraManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, DefaultPathID) == 0x0000A8, "Member 'UAC_jRPG_DynamicCameraManager_C::DefaultPathID' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, CameraActor) == 0x0000B0, "Member 'UAC_jRPG_DynamicCameraManager_C::CameraActor' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, DynamicCameraPaths) == 0x0000B8, "Member 'UAC_jRPG_DynamicCameraManager_C::DynamicCameraPaths' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, ActiveCameraPath) == 0x000108, "Member 'UAC_jRPG_DynamicCameraManager_C::ActiveCameraPath' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, PathDistance) == 0x000110, "Member 'UAC_jRPG_DynamicCameraManager_C::PathDistance' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, Speed) == 0x000118, "Member 'UAC_jRPG_DynamicCameraManager_C::Speed' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, LoopEnabled) == 0x000120, "Member 'UAC_jRPG_DynamicCameraManager_C::LoopEnabled' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, UseAutoCameraManagement) == 0x000121, "Member 'UAC_jRPG_DynamicCameraManager_C::UseAutoCameraManagement' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, CameraPostProcess) == 0x000130, "Member 'UAC_jRPG_DynamicCameraManager_C::CameraPostProcess' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, Battlemap_Prefab) == 0x000820, "Member 'UAC_jRPG_DynamicCameraManager_C::Battlemap_Prefab' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, LastPathID) == 0x000828, "Member 'UAC_jRPG_DynamicCameraManager_C::LastPathID' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, LastLocation) == 0x000830, "Member 'UAC_jRPG_DynamicCameraManager_C::LastLocation' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, LastUpdatePathLocation) == 0x000848, "Member 'UAC_jRPG_DynamicCameraManager_C::LastUpdatePathLocation' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, BattleMapBP) == 0x000850, "Member 'UAC_jRPG_DynamicCameraManager_C::BattleMapBP' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_DynamicCameraManager_C, IsTargeting) == 0x000858, "Member 'UAC_jRPG_DynamicCameraManager_C::IsTargeting' has a wrong offset!");

}

