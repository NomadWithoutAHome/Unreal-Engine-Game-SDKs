#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassNavigation

#include "Basic.hpp"

#include "MassEntity_structs.hpp"


namespace SDK
{

// Enum MassNavigation.EMassNavigationObstacleFlags
// NumValues: 0x0003
enum class EMassNavigationObstacleFlags : uint8
{
	None                                     = 0,
	HasColliderData                          = 1,
	EMassNavigationObstacleFlags_MAX         = 2,
};

// Enum MassNavigation.EMassMovementAction
// NumValues: 0x0004
enum class EMassMovementAction : uint8
{
	Stand                                    = 0,
	Move                                     = 1,
	Animate                                  = 2,
	EMassMovementAction_MAX                  = 3,
};

// ScriptStruct MassNavigation.MassMovingAvoidanceParameters
// 0x0044 (0x0044 - 0x0000)
struct FMassMovingAvoidanceParameters final : public FMassSharedFragment
{
public:
	float                                         ObstacleDetectionDistance;                         // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOfPathDuration;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOfPathDuration;                                 // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOfPathAvoidanceScale;                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndOfPathAvoidanceScale;                           // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandingObstacleAvoidanceScale;                    // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StaticObstacleClearanceScale;                      // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationRadiusScale;                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstacleSeparationStiffness;                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstacleSeparationDistance;                        // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvironmentSeparationStiffness;                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvironmentSeparationDistance;                     // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictiveAvoidanceTime;                           // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictiveAvoidanceRadiusScale;                    // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictiveAvoidanceDistance;                       // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstaclePredictiveAvoidanceStiffness;              // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnvironmentPredictiveAvoidanceStiffness;           // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassMovingAvoidanceParameters) == 0x000004, "Wrong alignment on FMassMovingAvoidanceParameters");
static_assert(sizeof(FMassMovingAvoidanceParameters) == 0x000044, "Wrong size on FMassMovingAvoidanceParameters");
static_assert(offsetof(FMassMovingAvoidanceParameters, ObstacleDetectionDistance) == 0x000000, "Member 'FMassMovingAvoidanceParameters::ObstacleDetectionDistance' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, StartOfPathDuration) == 0x000004, "Member 'FMassMovingAvoidanceParameters::StartOfPathDuration' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, EndOfPathDuration) == 0x000008, "Member 'FMassMovingAvoidanceParameters::EndOfPathDuration' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, StartOfPathAvoidanceScale) == 0x00000C, "Member 'FMassMovingAvoidanceParameters::StartOfPathAvoidanceScale' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, EndOfPathAvoidanceScale) == 0x000010, "Member 'FMassMovingAvoidanceParameters::EndOfPathAvoidanceScale' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, StandingObstacleAvoidanceScale) == 0x000014, "Member 'FMassMovingAvoidanceParameters::StandingObstacleAvoidanceScale' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, StaticObstacleClearanceScale) == 0x000018, "Member 'FMassMovingAvoidanceParameters::StaticObstacleClearanceScale' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, SeparationRadiusScale) == 0x00001C, "Member 'FMassMovingAvoidanceParameters::SeparationRadiusScale' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, ObstacleSeparationStiffness) == 0x000020, "Member 'FMassMovingAvoidanceParameters::ObstacleSeparationStiffness' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, ObstacleSeparationDistance) == 0x000024, "Member 'FMassMovingAvoidanceParameters::ObstacleSeparationDistance' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, EnvironmentSeparationStiffness) == 0x000028, "Member 'FMassMovingAvoidanceParameters::EnvironmentSeparationStiffness' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, EnvironmentSeparationDistance) == 0x00002C, "Member 'FMassMovingAvoidanceParameters::EnvironmentSeparationDistance' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, PredictiveAvoidanceTime) == 0x000030, "Member 'FMassMovingAvoidanceParameters::PredictiveAvoidanceTime' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, PredictiveAvoidanceRadiusScale) == 0x000034, "Member 'FMassMovingAvoidanceParameters::PredictiveAvoidanceRadiusScale' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, PredictiveAvoidanceDistance) == 0x000038, "Member 'FMassMovingAvoidanceParameters::PredictiveAvoidanceDistance' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, ObstaclePredictiveAvoidanceStiffness) == 0x00003C, "Member 'FMassMovingAvoidanceParameters::ObstaclePredictiveAvoidanceStiffness' has a wrong offset!");
static_assert(offsetof(FMassMovingAvoidanceParameters, EnvironmentPredictiveAvoidanceStiffness) == 0x000040, "Member 'FMassMovingAvoidanceParameters::EnvironmentPredictiveAvoidanceStiffness' has a wrong offset!");

// ScriptStruct MassNavigation.MassStandingAvoidanceParameters
// 0x0034 (0x0034 - 0x0000)
struct FMassStandingAvoidanceParameters final : public FMassSharedFragment
{
public:
	float                                         GhostObstacleDetectionDistance;                    // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostToTargetMaxDeviation;                         // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostSteeringReactionTime;                         // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostStandSlowdownRadius;                          // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostMaxSpeed;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostMaxAcceleration;                              // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostVelocityDampingTime;                          // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostSeparationRadiusScale;                        // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostSeparationDistance;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GhostSeparationStiffness;                          // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingObstacleAvoidanceScale;                      // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingObstacleDirectionalScale;                    // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovingObstaclePersonalSpaceScale;                  // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassStandingAvoidanceParameters) == 0x000004, "Wrong alignment on FMassStandingAvoidanceParameters");
static_assert(sizeof(FMassStandingAvoidanceParameters) == 0x000034, "Wrong size on FMassStandingAvoidanceParameters");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostObstacleDetectionDistance) == 0x000000, "Member 'FMassStandingAvoidanceParameters::GhostObstacleDetectionDistance' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostToTargetMaxDeviation) == 0x000004, "Member 'FMassStandingAvoidanceParameters::GhostToTargetMaxDeviation' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostSteeringReactionTime) == 0x000008, "Member 'FMassStandingAvoidanceParameters::GhostSteeringReactionTime' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostStandSlowdownRadius) == 0x00000C, "Member 'FMassStandingAvoidanceParameters::GhostStandSlowdownRadius' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostMaxSpeed) == 0x000010, "Member 'FMassStandingAvoidanceParameters::GhostMaxSpeed' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostMaxAcceleration) == 0x000014, "Member 'FMassStandingAvoidanceParameters::GhostMaxAcceleration' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostVelocityDampingTime) == 0x000018, "Member 'FMassStandingAvoidanceParameters::GhostVelocityDampingTime' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostSeparationRadiusScale) == 0x00001C, "Member 'FMassStandingAvoidanceParameters::GhostSeparationRadiusScale' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostSeparationDistance) == 0x000020, "Member 'FMassStandingAvoidanceParameters::GhostSeparationDistance' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, GhostSeparationStiffness) == 0x000024, "Member 'FMassStandingAvoidanceParameters::GhostSeparationStiffness' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, MovingObstacleAvoidanceScale) == 0x000028, "Member 'FMassStandingAvoidanceParameters::MovingObstacleAvoidanceScale' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, MovingObstacleDirectionalScale) == 0x00002C, "Member 'FMassStandingAvoidanceParameters::MovingObstacleDirectionalScale' has a wrong offset!");
static_assert(offsetof(FMassStandingAvoidanceParameters, MovingObstaclePersonalSpaceScale) == 0x000030, "Member 'FMassStandingAvoidanceParameters::MovingObstaclePersonalSpaceScale' has a wrong offset!");

// ScriptStruct MassNavigation.MassNavigationEdgesFragment
// 0x0248 (0x0248 - 0x0000)
struct alignas(0x08) FMassNavigationEdgesFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x248];                                      // 0x0000(0x0248)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassNavigationEdgesFragment) == 0x000008, "Wrong alignment on FMassNavigationEdgesFragment");
static_assert(sizeof(FMassNavigationEdgesFragment) == 0x000248, "Wrong size on FMassNavigationEdgesFragment");

// ScriptStruct MassNavigation.MassMoveTargetFragment
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FMassMoveTargetFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassMoveTargetFragment) == 0x000008, "Wrong alignment on FMassMoveTargetFragment");
static_assert(sizeof(FMassMoveTargetFragment) == 0x000050, "Wrong size on FMassMoveTargetFragment");

// ScriptStruct MassNavigation.MassGhostLocationFragment
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FMassGhostLocationFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassGhostLocationFragment) == 0x000008, "Wrong alignment on FMassGhostLocationFragment");
static_assert(sizeof(FMassGhostLocationFragment) == 0x000038, "Wrong size on FMassGhostLocationFragment");

// ScriptStruct MassNavigation.MassNavigationObstacleGridCellLocationFragment
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FMassNavigationObstacleGridCellLocationFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassNavigationObstacleGridCellLocationFragment) == 0x000004, "Wrong alignment on FMassNavigationObstacleGridCellLocationFragment");
static_assert(sizeof(FMassNavigationObstacleGridCellLocationFragment) == 0x00000C, "Wrong size on FMassNavigationObstacleGridCellLocationFragment");

// ScriptStruct MassNavigation.MassAvoidanceColliderFragment
// 0x000C (0x000C - 0x0000)
struct alignas(0x04) FMassAvoidanceColliderFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0xC];                                        // 0x0000(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassAvoidanceColliderFragment) == 0x000004, "Wrong alignment on FMassAvoidanceColliderFragment");
static_assert(sizeof(FMassAvoidanceColliderFragment) == 0x00000C, "Wrong size on FMassAvoidanceColliderFragment");

// ScriptStruct MassNavigation.MassInNavigationObstacleGridTag
// 0x0000 (0x0001 - 0x0001)
struct FMassInNavigationObstacleGridTag final : public FMassTag
{
};
static_assert(alignof(FMassInNavigationObstacleGridTag) == 0x000001, "Wrong alignment on FMassInNavigationObstacleGridTag");
static_assert(sizeof(FMassInNavigationObstacleGridTag) == 0x000001, "Wrong size on FMassInNavigationObstacleGridTag");

// ScriptStruct MassNavigation.MassSmoothOrientationWeights
// 0x0008 (0x0008 - 0x0000)
struct FMassSmoothOrientationWeights final : public FMassSharedFragment
{
public:
	float                                         MoveTargetWeight;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityWeight;                                    // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassSmoothOrientationWeights) == 0x000004, "Wrong alignment on FMassSmoothOrientationWeights");
static_assert(sizeof(FMassSmoothOrientationWeights) == 0x000008, "Wrong size on FMassSmoothOrientationWeights");
static_assert(offsetof(FMassSmoothOrientationWeights, MoveTargetWeight) == 0x000000, "Member 'FMassSmoothOrientationWeights::MoveTargetWeight' has a wrong offset!");
static_assert(offsetof(FMassSmoothOrientationWeights, VelocityWeight) == 0x000004, "Member 'FMassSmoothOrientationWeights::VelocityWeight' has a wrong offset!");

// ScriptStruct MassNavigation.MassSmoothOrientationParameters
// 0x0018 (0x0018 - 0x0000)
struct FMassSmoothOrientationParameters final : public FMassSharedFragment
{
public:
	float                                         EndOfPathDuration;                                 // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OrientationSmoothingTime;                          // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMassSmoothOrientationWeights          Moving;                                            // 0x0008(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FMassSmoothOrientationWeights          Standing;                                          // 0x0010(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassSmoothOrientationParameters) == 0x000004, "Wrong alignment on FMassSmoothOrientationParameters");
static_assert(sizeof(FMassSmoothOrientationParameters) == 0x000018, "Wrong size on FMassSmoothOrientationParameters");
static_assert(offsetof(FMassSmoothOrientationParameters, EndOfPathDuration) == 0x000000, "Member 'FMassSmoothOrientationParameters::EndOfPathDuration' has a wrong offset!");
static_assert(offsetof(FMassSmoothOrientationParameters, OrientationSmoothingTime) == 0x000004, "Member 'FMassSmoothOrientationParameters::OrientationSmoothingTime' has a wrong offset!");
static_assert(offsetof(FMassSmoothOrientationParameters, Moving) == 0x000008, "Member 'FMassSmoothOrientationParameters::Moving' has a wrong offset!");
static_assert(offsetof(FMassSmoothOrientationParameters, Standing) == 0x000010, "Member 'FMassSmoothOrientationParameters::Standing' has a wrong offset!");

// ScriptStruct MassNavigation.MassSteeringFragment
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMassSteeringFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassSteeringFragment) == 0x000008, "Wrong alignment on FMassSteeringFragment");
static_assert(sizeof(FMassSteeringFragment) == 0x000018, "Wrong size on FMassSteeringFragment");

// ScriptStruct MassNavigation.MassStandingSteeringFragment
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMassStandingSteeringFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassStandingSteeringFragment) == 0x000008, "Wrong alignment on FMassStandingSteeringFragment");
static_assert(sizeof(FMassStandingSteeringFragment) == 0x000028, "Wrong size on FMassStandingSteeringFragment");

// ScriptStruct MassNavigation.MassMovingSteeringParameters
// 0x0008 (0x0008 - 0x0000)
struct FMassMovingSteeringParameters final : public FMassSharedFragment
{
public:
	float                                         ReactionTime;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookAheadTime;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassMovingSteeringParameters) == 0x000004, "Wrong alignment on FMassMovingSteeringParameters");
static_assert(sizeof(FMassMovingSteeringParameters) == 0x000008, "Wrong size on FMassMovingSteeringParameters");
static_assert(offsetof(FMassMovingSteeringParameters, ReactionTime) == 0x000000, "Member 'FMassMovingSteeringParameters::ReactionTime' has a wrong offset!");
static_assert(offsetof(FMassMovingSteeringParameters, LookAheadTime) == 0x000004, "Member 'FMassMovingSteeringParameters::LookAheadTime' has a wrong offset!");

// ScriptStruct MassNavigation.MassStandingSteeringParameters
// 0x0020 (0x0020 - 0x0000)
struct FMassStandingSteeringParameters final : public FMassSharedFragment
{
public:
	float                                         ReactionTime;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMoveThreshold;                               // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetMoveThresholdVariance;                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LowSpeedThreshold;                                 // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSpeedHysteresisScale;                        // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSelectionCooldown;                           // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetSelectionCooldownVariance;                   // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZoneRadius;                                    // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassStandingSteeringParameters) == 0x000004, "Wrong alignment on FMassStandingSteeringParameters");
static_assert(sizeof(FMassStandingSteeringParameters) == 0x000020, "Wrong size on FMassStandingSteeringParameters");
static_assert(offsetof(FMassStandingSteeringParameters, ReactionTime) == 0x000000, "Member 'FMassStandingSteeringParameters::ReactionTime' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, TargetMoveThreshold) == 0x000004, "Member 'FMassStandingSteeringParameters::TargetMoveThreshold' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, TargetMoveThresholdVariance) == 0x000008, "Member 'FMassStandingSteeringParameters::TargetMoveThresholdVariance' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, LowSpeedThreshold) == 0x00000C, "Member 'FMassStandingSteeringParameters::LowSpeedThreshold' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, TargetSpeedHysteresisScale) == 0x000010, "Member 'FMassStandingSteeringParameters::TargetSpeedHysteresisScale' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, TargetSelectionCooldown) == 0x000014, "Member 'FMassStandingSteeringParameters::TargetSelectionCooldown' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, TargetSelectionCooldownVariance) == 0x000018, "Member 'FMassStandingSteeringParameters::TargetSelectionCooldownVariance' has a wrong offset!");
static_assert(offsetof(FMassStandingSteeringParameters, DeadZoneRadius) == 0x00001C, "Member 'FMassStandingSteeringParameters::DeadZoneRadius' has a wrong offset!");

}

