#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Enemy_Battle_Base

#include "Basic.hpp"

#include "E_EnemyIdleState_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_jRPG_Character_Battle_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_Enemy_Battle_Base.BP_jRPG_Enemy_Battle_Base_C
// 0x00B0 (0x1610 - 0x1560)
class ABP_jRPG_Enemy_Battle_Base_C final : public ABP_jRPG_Character_Battle_Base_C
{
public:
	uint8                                         Pad_1551[0x7];                                     // 0x1551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_jRPG_Enemy_Battle_Base_C;        // 0x1558(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_RandomVariation_C*                  BP_RandomColor;                                    // 0x1560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Summon_0_To_1_D651999F4D3D7B2A531AA4AE6BC1DCEB;    // 0x1568(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Summon__Direction_D651999F4D3D7B2A531AA4AE6BC1DCEB; // 0x156C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_156D[0x3];                                     // 0x156D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Summon;                                            // 0x1570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Die_Timeline_0to1_EE63331D49F0B879DD242BAAAEDBB88C; // 0x1578(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Die_Timeline__Direction_EE63331D49F0B879DD242BAAAEDBB88C; // 0x157C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_157D[0x3];                                     // 0x157D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Die_Timeline;                                      // 0x1580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Stack1;                                            // 0x1588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_EnemyIdleState                              CurrentIdleState_0;                                // 0x1590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1591[0x7];                                     // 0x1591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       DEBUG_RandomHeroAcquireOverride;                   // 0x1598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   DEPRECATED_HitAnim_Normal_0;                       // 0x15A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   DEPRECATED_HitAnim_Weakness_0;                     // 0x15B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAnimMontage*>                   DEPRECATED_HitAnim_Resistant_0;                    // 0x15C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UPostProcessComponent*                  TurnStartPostProcessing;                           // 0x15D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          DesaturateWhenLosingLife;                          // 0x15D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D9[0x7];                                     // 0x15D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        HighestApAmount;                                   // 0x15E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDesintegrateOnDeath;                         // 0x15E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkillSummon;                                     // 0x15E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15EA[0x6];                                     // 0x15EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Delay_Before_Inversion;                            // 0x15F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseDesaturation;                                  // 0x15F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ElementIndexForBaseDesaturation;                   // 0x1600(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AcquireSpecificTarget(int32 DesiredTargetIndex, bool AcquireRandomTargetIfWantedTargetDead, class ABP_jRPG_Character_Battle_Base_C** TargetRef, bool* IsTargetDead);
	void AcquireSpecificTargetFromActorRef(class ABP_jRPG_Character_Battle_Base_C* ActorRefTarget, class ABP_jRPG_Character_Battle_Base_C** TargetRef);
	void AcquireTargetAllEnemies(TArray<class ABP_jRPG_Character_Battle_Base_C*>* Target_Enemies);
	void AcquireTargetAllHeroes(bool OnlyAlive, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Target_Heroes);
	void AcquireTargetMiddleHero(bool RandomIfDead, class ABP_jRPG_Character_Battle_Base_C** Output);
	void AcquireTargetRandomHero(class ABP_jRPG_Character_Battle_Base_C** Output);
	void AcquireTargetWithHigherHealth(class ABP_jRPG_Character_Battle_Base_C** Output);
	void AcquireTargetWithLowerHealth(class ABP_jRPG_Character_Battle_Base_C** Output);
	void AfterTutoEvent();
	void BndEvt__BP_jRPG_Enemy_Battle_Base_AC_jRPG_CharacterStats_K2Node_ComponentBoundEvent_0_OnHPChanged__DelegateSignature(double NewHP, double PreviousHP);
	void Clear_Hero_Targeting();
	void ClearAcquiredTargets();
	void DEBUG_CheckDisintegrationComponents(TArray<class UMeshComponent*>& MeshComponents, bool* Success);
	void DebugSkipTurn();
	void Desaturation();
	void DesintegrateOnDeath();
	void Die_Timeline__FinishedFunc();
	void Die_Timeline__UpdateFunc();
	void DONTUSEAcquireTargetWithHighestApAmount(class ABP_jRPG_Character_Battle_Base_C** Output);
	void EndLastStandMove();
	void ExecuteUbergraph_BP_jRPG_Enemy_Battle_Base(int32 EntryPoint);
	void GetAllEnemies_0(TArray<class ABP_jRPG_Character_Battle_Base_C*>* Enemies);
	void GetCharacterAtBattleSpotIndex(int32 BattleSpotIndex_0, bool IncludedKickedCharacters, class ABP_jRPG_Character_Battle_Base_C** Character);
	void GetExtraDisintegrationComponents(TArray<class UMeshComponent*>* MeshComponent);
	void GetMiddleHeroForFeedback(class ABP_jRPG_Character_Battle_Base_C** MiddleHero);
	void GetRandomEnemy(class ABP_jRPG_Character_Battle_Base_C** Output);
	void InvertDesintegrateOnDeath();
	void JumpStandardSlowmo();
	void OnDeath(bool DeathByCounter);
	void OnTurnEnded();
	void OnTurnStart();
	void ReceiveBeginPlay();
	void SetCurrentIdleState_0(E_EnemyIdleState CurrentIdleState_0);
	void SetIsSkillSummon(bool Enabled);
	void SkillSummon(double DelayBeforeInversion);
	void Summon__FinishedFunc();
	void Summon__UpdateFunc();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_Enemy_Battle_Base_C">();
	}
	static class ABP_jRPG_Enemy_Battle_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_Enemy_Battle_Base_C>();
	}
};
static_assert(alignof(ABP_jRPG_Enemy_Battle_Base_C) == 0x000010, "Wrong alignment on ABP_jRPG_Enemy_Battle_Base_C");
static_assert(sizeof(ABP_jRPG_Enemy_Battle_Base_C) == 0x001610, "Wrong size on ABP_jRPG_Enemy_Battle_Base_C");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, UberGraphFrame_BP_jRPG_Enemy_Battle_Base_C) == 0x001558, "Member 'ABP_jRPG_Enemy_Battle_Base_C::UberGraphFrame_BP_jRPG_Enemy_Battle_Base_C' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, BP_RandomColor) == 0x001560, "Member 'ABP_jRPG_Enemy_Battle_Base_C::BP_RandomColor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Summon_0_To_1_D651999F4D3D7B2A531AA4AE6BC1DCEB) == 0x001568, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Summon_0_To_1_D651999F4D3D7B2A531AA4AE6BC1DCEB' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Summon__Direction_D651999F4D3D7B2A531AA4AE6BC1DCEB) == 0x00156C, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Summon__Direction_D651999F4D3D7B2A531AA4AE6BC1DCEB' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Summon) == 0x001570, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Summon' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Die_Timeline_0to1_EE63331D49F0B879DD242BAAAEDBB88C) == 0x001578, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Die_Timeline_0to1_EE63331D49F0B879DD242BAAAEDBB88C' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Die_Timeline__Direction_EE63331D49F0B879DD242BAAAEDBB88C) == 0x00157C, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Die_Timeline__Direction_EE63331D49F0B879DD242BAAAEDBB88C' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Die_Timeline) == 0x001580, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Die_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Stack1) == 0x001588, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Stack1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, CurrentIdleState_0) == 0x001590, "Member 'ABP_jRPG_Enemy_Battle_Base_C::CurrentIdleState_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, DEBUG_RandomHeroAcquireOverride) == 0x001598, "Member 'ABP_jRPG_Enemy_Battle_Base_C::DEBUG_RandomHeroAcquireOverride' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, DEPRECATED_HitAnim_Normal_0) == 0x0015A0, "Member 'ABP_jRPG_Enemy_Battle_Base_C::DEPRECATED_HitAnim_Normal_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, DEPRECATED_HitAnim_Weakness_0) == 0x0015B0, "Member 'ABP_jRPG_Enemy_Battle_Base_C::DEPRECATED_HitAnim_Weakness_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, DEPRECATED_HitAnim_Resistant_0) == 0x0015C0, "Member 'ABP_jRPG_Enemy_Battle_Base_C::DEPRECATED_HitAnim_Resistant_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, TurnStartPostProcessing) == 0x0015D0, "Member 'ABP_jRPG_Enemy_Battle_Base_C::TurnStartPostProcessing' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, DesaturateWhenLosingLife) == 0x0015D8, "Member 'ABP_jRPG_Enemy_Battle_Base_C::DesaturateWhenLosingLife' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, HighestApAmount) == 0x0015E0, "Member 'ABP_jRPG_Enemy_Battle_Base_C::HighestApAmount' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, ShouldDesintegrateOnDeath) == 0x0015E8, "Member 'ABP_jRPG_Enemy_Battle_Base_C::ShouldDesintegrateOnDeath' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, IsSkillSummon) == 0x0015E9, "Member 'ABP_jRPG_Enemy_Battle_Base_C::IsSkillSummon' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, Delay_Before_Inversion) == 0x0015F0, "Member 'ABP_jRPG_Enemy_Battle_Base_C::Delay_Before_Inversion' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, BaseDesaturation) == 0x0015F8, "Member 'ABP_jRPG_Enemy_Battle_Base_C::BaseDesaturation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_Battle_Base_C, ElementIndexForBaseDesaturation) == 0x001600, "Member 'ABP_jRPG_Enemy_Battle_Base_C::ElementIndexForBaseDesaturation' has a wrong offset!");

}

