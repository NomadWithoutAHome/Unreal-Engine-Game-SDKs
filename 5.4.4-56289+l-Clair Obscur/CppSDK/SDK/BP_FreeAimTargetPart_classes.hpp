#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeAimTargetPart

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EFreeAimBodyPartType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FreeAimTargetPart.BP_FreeAimTargetPart_C
// 0x0070 (0x02A0 - 0x0230)
class UBP_FreeAimTargetPart_C final : public USceneComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0230(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void(EFreeAimBodyPartType BodyPart, class ABP_FreeAimProjectile_Base_C* Projectile)> OnFreeAimHit; // 0x0238(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EFreeAimBodyPartType                          BodyPartType;                                      // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_Enabled;                                     // 0x0249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewVar_0;                                          // 0x024A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24B[0x1];                                      // 0x024B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugColor;                                        // 0x024C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25C[0x4];                                      // 0x025C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    LastHitComponentRef;                               // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DebugColorHighlight;                               // 0x0268(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UShapeComponent*>                ValidChildren;                                     // 0x0278(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ABP_jRPG_Character_Battle_Base_C*       CharacterOwnerOverride;                            // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BaseDamage;                                        // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DamageMultiplier;                                  // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DEBUG_GetColor(class UShapeComponent* ShapeComponent, struct FLinearColor* Color);
	void DisablePartsCollisions();
	void DrawDebug();
	void ExecuteUbergraph_BP_FreeAimTargetPart(int32 EntryPoint);
	void GetCharacterOwner(class ABP_jRPG_Character_Battle_Base_C** CharacterBattleBase);
	double GetFinalDamageMultiplier();
	void OnComponentBeginOverlap_Event_0(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnPartHit(class UPrimitiveComponent* LastHitComponentRef_0, class ABP_FreeAimProjectile_Base_C* Projectile);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void SetDebugVisible(bool DebugEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FreeAimTargetPart_C">();
	}
	static class UBP_FreeAimTargetPart_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FreeAimTargetPart_C>();
	}
};
static_assert(alignof(UBP_FreeAimTargetPart_C) == 0x000010, "Wrong alignment on UBP_FreeAimTargetPart_C");
static_assert(sizeof(UBP_FreeAimTargetPart_C) == 0x0002A0, "Wrong size on UBP_FreeAimTargetPart_C");
static_assert(offsetof(UBP_FreeAimTargetPart_C, UberGraphFrame) == 0x000230, "Member 'UBP_FreeAimTargetPart_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, OnFreeAimHit) == 0x000238, "Member 'UBP_FreeAimTargetPart_C::OnFreeAimHit' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, BodyPartType) == 0x000248, "Member 'UBP_FreeAimTargetPart_C::BodyPartType' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, Debug_Enabled) == 0x000249, "Member 'UBP_FreeAimTargetPart_C::Debug_Enabled' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, NewVar_0) == 0x00024A, "Member 'UBP_FreeAimTargetPart_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, DebugColor) == 0x00024C, "Member 'UBP_FreeAimTargetPart_C::DebugColor' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, LastHitComponentRef) == 0x000260, "Member 'UBP_FreeAimTargetPart_C::LastHitComponentRef' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, DebugColorHighlight) == 0x000268, "Member 'UBP_FreeAimTargetPart_C::DebugColorHighlight' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, ValidChildren) == 0x000278, "Member 'UBP_FreeAimTargetPart_C::ValidChildren' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, CharacterOwnerOverride) == 0x000288, "Member 'UBP_FreeAimTargetPart_C::CharacterOwnerOverride' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, BaseDamage) == 0x000290, "Member 'UBP_FreeAimTargetPart_C::BaseDamage' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimTargetPart_C, DamageMultiplier) == 0x000298, "Member 'UBP_FreeAimTargetPart_C::DamageMultiplier' has a wrong offset!");

}

