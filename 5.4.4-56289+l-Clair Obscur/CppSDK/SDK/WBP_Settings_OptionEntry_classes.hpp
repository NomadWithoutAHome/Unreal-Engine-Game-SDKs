#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Settings_OptionEntry

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Settings_OptionEntry.WBP_Settings_OptionEntry_C
// 0x00D8 (0x03E0 - 0x0308)
class UWBP_Settings_OptionEntry_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWBP_BaseButton_C*                      BaseButton;                                        // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNamedSlot*                             NamedSlot_WidgetSelector;                          // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_WrappingText_C*                    TextBlock_OptionName;                              // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          ForceLocked;                                       // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OptionName;                                        // 0x0330(0x0010)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(class UWBP_Settings_OptionEntry_C* Widget)> OnOptionEntryFocused;  // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnOptionEntryUnfocused;                            // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   OptionDescription;                                 // 0x0360(0x0010)(Edit, BlueprintVisible)
	class FText                                   OptionDescriptionLocked;                           // 0x0370(0x0010)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  AvailableOnPlatform;                               // 0x0380(0x0020)(Edit, BlueprintVisible)
	struct FSoundEventDataTableRowHandle          SD_OnFocused;                                      // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FGameplayTagContainer                  LockedContext;                                     // 0x03B0(0x0020)(Edit, BlueprintVisible)
	struct FGameplayTag                           CurrentContext;                                    // 0x03D0(0x0008)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          NotAvailableForLockheart;                          // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NotAvailableForSteamDeck;                          // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateWidgetLockState();
	bool GetIsLocked();
	void SetForceLocked(bool Locked);
	void SetCurrentContext(const struct FGameplayTag& CurrentContext_0);
	void SetOptionName(const class FText& OptionName_0);
	void GetOptionDescription(class FText* DescriptionText);
	void SetOptionDescription(const class FText& OptionDescription_0);
	void OnFocusBackToBaseButton();
	class UWidget* OnBaseButtonNav(EUINavigation Navigation_0);
	void IsAvailableOnCurrentPlatform(const struct FGameplayTag& CurrentPlatformTag, bool* IsAvailable);
	void PreConstruct(bool IsDesignTime);
	void BndEvt__WBP_Settings_OptionEntry_WBP_BaseButton_K2Node_ComponentBoundEvent_0_OnButtonBaseFocused__DelegateSignature(class UCommonButtonBase* Button);
	void BndEvt__WBP_Settings_OptionEntry_WBP_BaseButton_K2Node_ComponentBoundEvent_1_OnButtonBaseUnfocused__DelegateSignature(class UCommonButtonBase* Button);
	void ExecuteUbergraph_WBP_Settings_OptionEntry(int32 EntryPoint);

	class UWidget* BP_GetDesiredFocusTarget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Settings_OptionEntry_C">();
	}
	static class UWBP_Settings_OptionEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Settings_OptionEntry_C>();
	}
};
static_assert(alignof(UWBP_Settings_OptionEntry_C) == 0x000008, "Wrong alignment on UWBP_Settings_OptionEntry_C");
static_assert(sizeof(UWBP_Settings_OptionEntry_C) == 0x0003E0, "Wrong size on UWBP_Settings_OptionEntry_C");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, UberGraphFrame) == 0x000308, "Member 'UWBP_Settings_OptionEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, BaseButton) == 0x000310, "Member 'UWBP_Settings_OptionEntry_C::BaseButton' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, NamedSlot_WidgetSelector) == 0x000318, "Member 'UWBP_Settings_OptionEntry_C::NamedSlot_WidgetSelector' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, TextBlock_OptionName) == 0x000320, "Member 'UWBP_Settings_OptionEntry_C::TextBlock_OptionName' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, ForceLocked) == 0x000328, "Member 'UWBP_Settings_OptionEntry_C::ForceLocked' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, OptionName) == 0x000330, "Member 'UWBP_Settings_OptionEntry_C::OptionName' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, OnOptionEntryFocused) == 0x000340, "Member 'UWBP_Settings_OptionEntry_C::OnOptionEntryFocused' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, OnOptionEntryUnfocused) == 0x000350, "Member 'UWBP_Settings_OptionEntry_C::OnOptionEntryUnfocused' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, OptionDescription) == 0x000360, "Member 'UWBP_Settings_OptionEntry_C::OptionDescription' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, OptionDescriptionLocked) == 0x000370, "Member 'UWBP_Settings_OptionEntry_C::OptionDescriptionLocked' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, AvailableOnPlatform) == 0x000380, "Member 'UWBP_Settings_OptionEntry_C::AvailableOnPlatform' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, SD_OnFocused) == 0x0003A0, "Member 'UWBP_Settings_OptionEntry_C::SD_OnFocused' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, LockedContext) == 0x0003B0, "Member 'UWBP_Settings_OptionEntry_C::LockedContext' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, CurrentContext) == 0x0003D0, "Member 'UWBP_Settings_OptionEntry_C::CurrentContext' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, NotAvailableForLockheart) == 0x0003D8, "Member 'UWBP_Settings_OptionEntry_C::NotAvailableForLockheart' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_OptionEntry_C, NotAvailableForSteamDeck) == 0x0003D9, "Member 'UWBP_Settings_OptionEntry_C::NotAvailableForSteamDeck' has a wrong offset!");

}

