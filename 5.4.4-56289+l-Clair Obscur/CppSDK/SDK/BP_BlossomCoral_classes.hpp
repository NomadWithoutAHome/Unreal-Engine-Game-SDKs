#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BlossomCoral

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BlossomCoral.BP_BlossomCoral_C
// 0x00A8 (0x0338 - 0x0290)
class ABP_BlossomCoral_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_BlossomCoral;                                   // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TimelineBlossom_Blossom_Curve_80552B754F57C2DD1391E4AF485EAFAC; // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimelineBlossom__Direction_80552B754F57C2DD1391E4AF485EAFAC; // 0x02A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimelineBlossom;                                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        TimeMultiplier;                                    // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         OpenningTime;                                      // 0x02C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        OpenningDistance;                                  // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x02D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        Rand;                                              // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OpenningVariable;                                  // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentVelocity;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityMultiplicator;                             // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxVelocity;                                       // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Blossom;                                           // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Curve;                                             // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TargetVelocity;                                    // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NewVar_0;                                          // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FrameNumber;                                       // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void TimelineBlossom__UpdateFunc();
	void TimelineBlossom__FinishedFunc();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_BlossomCoral(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BlossomCoral_C">();
	}
	static class ABP_BlossomCoral_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BlossomCoral_C>();
	}
};
static_assert(alignof(ABP_BlossomCoral_C) == 0x000008, "Wrong alignment on ABP_BlossomCoral_C");
static_assert(sizeof(ABP_BlossomCoral_C) == 0x000338, "Wrong size on ABP_BlossomCoral_C");
static_assert(offsetof(ABP_BlossomCoral_C, UberGraphFrame) == 0x000290, "Member 'ABP_BlossomCoral_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, SM_BlossomCoral) == 0x000298, "Member 'ABP_BlossomCoral_C::SM_BlossomCoral' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, TimelineBlossom_Blossom_Curve_80552B754F57C2DD1391E4AF485EAFAC) == 0x0002A0, "Member 'ABP_BlossomCoral_C::TimelineBlossom_Blossom_Curve_80552B754F57C2DD1391E4AF485EAFAC' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, TimelineBlossom__Direction_80552B754F57C2DD1391E4AF485EAFAC) == 0x0002A4, "Member 'ABP_BlossomCoral_C::TimelineBlossom__Direction_80552B754F57C2DD1391E4AF485EAFAC' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, TimelineBlossom) == 0x0002A8, "Member 'ABP_BlossomCoral_C::TimelineBlossom' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, TimeMultiplier) == 0x0002B0, "Member 'ABP_BlossomCoral_C::TimeMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, DynamicMaterial) == 0x0002B8, "Member 'ABP_BlossomCoral_C::DynamicMaterial' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, OpenningTime) == 0x0002C0, "Member 'ABP_BlossomCoral_C::OpenningTime' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, OpenningDistance) == 0x0002C8, "Member 'ABP_BlossomCoral_C::OpenningDistance' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, Rotation) == 0x0002D0, "Member 'ABP_BlossomCoral_C::Rotation' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, Rand) == 0x0002E8, "Member 'ABP_BlossomCoral_C::Rand' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, OpenningVariable) == 0x0002F0, "Member 'ABP_BlossomCoral_C::OpenningVariable' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, CurrentVelocity) == 0x0002F8, "Member 'ABP_BlossomCoral_C::CurrentVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, VelocityMultiplicator) == 0x000300, "Member 'ABP_BlossomCoral_C::VelocityMultiplicator' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, MaxVelocity) == 0x000308, "Member 'ABP_BlossomCoral_C::MaxVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, Blossom) == 0x000310, "Member 'ABP_BlossomCoral_C::Blossom' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, Curve) == 0x000318, "Member 'ABP_BlossomCoral_C::Curve' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, TargetVelocity) == 0x000320, "Member 'ABP_BlossomCoral_C::TargetVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, NewVar_0) == 0x000328, "Member 'ABP_BlossomCoral_C::NewVar_0' has a wrong offset!");
static_assert(offsetof(ABP_BlossomCoral_C, FrameNumber) == 0x000330, "Member 'ABP_BlossomCoral_C::FrameNumber' has a wrong offset!");

}

