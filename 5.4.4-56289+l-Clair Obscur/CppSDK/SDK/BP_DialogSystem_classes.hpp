#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DialogSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FSoundEvent_structs.hpp"
#include "Dialog_Struct_structs.hpp"
#include "DialogCondition_Struct_structs.hpp"
#include "E_jRPG_EngageTypes_structs.hpp"
#include "E_NpcDialogEvent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DialogSystem.BP_DialogSystem_C
// 0x0208 (0x02A8 - 0x00A0)
class UBP_DialogSystem_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDataTable*                             DataTable;                                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FName                                   DataTableRowID;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FDialog_Struct>                 DialogStructs;                                     // 0x00B8(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FName                                   BattleName;                                        // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   BattleMap;                                         // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NPCReference;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_DialogBox_C*                         DialogBox;                                         // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UW_DialogEntry_C*                       DialogEntry;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 SceneCamera;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OldSceneCamera;                                    // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          MouseVisibility_;                                  // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowDebug_;                                        // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraSetting;                                     // 0x0108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0120(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioDialogue;                                     // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioResponse;                                     // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlayedDialogID;                                    // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<class FName>                             AvailableItems;                                    // 0x0140(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FText                                   Greeting;                                          // 0x0190(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class FName                                   QuestName;                                         // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDialogCondition_Struct>        AddConditionDialog;                                // 0x01A8(0x0010)(Edit, BlueprintVisible)
	struct FDataTableRowHandle                    CharacterToAddRow;                                 // 0x01B8(0x0010)(Edit, BlueprintVisible, NoDestructor)
	class UAC_jRPG_BattleManager_C*               BattleManagerRef;                                  // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          AdaptBattlemapLocation_;                           // 0x01D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Flee_Impossible;                                   // 0x01D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSoundEvent                           Battle_Music;                                      // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FVector                                Enemy_Original_Location;                           // 0x01E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Enemy_Global_ID;                                   // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_jRPG_EngageTypes                            Engage_Type;                                       // 0x0200(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x3];                                      // 0x0201(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Encounter_Name;                                    // 0x0204(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Battle_Map_Name;                                   // 0x020C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             AvailableItemsExtended;                            // 0x0218(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	bool                                          AlreadyBeat;                                       // 0x0268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NpcDefeated;                                       // 0x0269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TriggerDialogWhenDefeated;                         // 0x026A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26B[0x1];                                      // 0x026B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DataTableRowIdDefeat;                              // 0x026C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_274[0x4];                                      // 0x0274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_BattleMap_C>         BattleMapBP;                                       // 0x0278(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_NpcDialogEvent                              EventType;                                         // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimDialog(const class FText& Response, double* AnimDuration);
	void QuitDialog(class APlayerController* self2, class APlayerController* PlayerController, class AController* self3, bool DontRegisterDialog);
	void AddStructDialog(TArray<struct FDialog_Struct>& TargetArray, class FName EventId, int32 SwitchID);
	void AddDataTable(class UDataTable* DataTable_0, class FName RowName, int32 SwitchID);
	void Add_Response(const class FText& Name_0, const class FText& Response, class FName EventId, int32 SwitchID, const struct FLinearColor& NameColor, class UFont* ResponseFont, class USoundBase* ResponseVoice, const struct FLinearColor& TextColorHovered, const struct FLinearColor& TextColorNormal, class UTexture2D* BtnHoveredImage, class UTexture2D* BtnNormalImage, double EnableEventDelay, class UAnimMontage* ResponseAnim, class UBP_DialogSystem_C** DialogSystem);
	void AddCameraAngle(class AActor* CameraActorTarget, double CameraBlendTime, double CameraDistence, double CameraHight, double CameraAngle, bool CameraAttach_, class UBP_DialogSystem_C** DialogSystem);
	void GlobalDialogEvent(class FName EventId, bool* Success);
	void AddDialog(class UTexture2D* Image, const class FText& Name_0, const class FText& Dialog, class FName DialogID, const struct FLinearColor& NameColor, const struct FLinearColor& DialogHoveredColor, const struct FLinearColor& DialogNormalColor, class UFont* DialogFont, class UAnimMontage* DialogAnim, class USoundBase* DialogSound, double DialogEventDelay, double DialogTypingDelay, class USoundBase* DialogTypingSound, bool IsDialogClickable_, bool ClearDialogResponses_, class UBP_DialogSystem_C** DialogSystem, double* DelayValue);
	void CreateDialogUI(class UTexture2D* GUITexture, const struct FVector2D& MainSize, const struct FVector2D& MainTranslation, const struct FLinearColor& MainBorderColor, const struct FLinearColor& TextBorderColor, const struct FVector2D& DialogIconSize, bool bShowMouseCursor, bool bCenterMouse_, bool bShowDebug_, class UBP_DialogSystem_C** DialogSystem);
	void Dialog(class FName EventId, int32 SwitchID, const class FText& DialogText);
	void Talk();
	void StopAnim(class USkeletalMeshComponent* Mesh, class UAnimInstance* Target_0, class UAnimMontage* Montage);
	void ExecuteUbergraph_BP_DialogSystem(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DialogSystem_C">();
	}
	static class UBP_DialogSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DialogSystem_C>();
	}
};
static_assert(alignof(UBP_DialogSystem_C) == 0x000008, "Wrong alignment on UBP_DialogSystem_C");
static_assert(sizeof(UBP_DialogSystem_C) == 0x0002A8, "Wrong size on UBP_DialogSystem_C");
static_assert(offsetof(UBP_DialogSystem_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_DialogSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, DataTable) == 0x0000A8, "Member 'UBP_DialogSystem_C::DataTable' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, DataTableRowID) == 0x0000B0, "Member 'UBP_DialogSystem_C::DataTableRowID' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, DialogStructs) == 0x0000B8, "Member 'UBP_DialogSystem_C::DialogStructs' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, BattleName) == 0x0000C8, "Member 'UBP_DialogSystem_C::BattleName' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, BattleMap) == 0x0000D0, "Member 'UBP_DialogSystem_C::BattleMap' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, NPCReference) == 0x0000D8, "Member 'UBP_DialogSystem_C::NPCReference' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, DialogBox) == 0x0000E0, "Member 'UBP_DialogSystem_C::DialogBox' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, DialogEntry) == 0x0000E8, "Member 'UBP_DialogSystem_C::DialogEntry' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, SceneCamera) == 0x0000F0, "Member 'UBP_DialogSystem_C::SceneCamera' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, OldSceneCamera) == 0x0000F8, "Member 'UBP_DialogSystem_C::OldSceneCamera' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, MouseVisibility_) == 0x000100, "Member 'UBP_DialogSystem_C::MouseVisibility_' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, ShowDebug_) == 0x000101, "Member 'UBP_DialogSystem_C::ShowDebug_' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, CameraSetting) == 0x000108, "Member 'UBP_DialogSystem_C::CameraSetting' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Target) == 0x000120, "Member 'UBP_DialogSystem_C::Target' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AudioDialogue) == 0x000128, "Member 'UBP_DialogSystem_C::AudioDialogue' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AudioResponse) == 0x000130, "Member 'UBP_DialogSystem_C::AudioResponse' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, PlayedDialogID) == 0x000138, "Member 'UBP_DialogSystem_C::PlayedDialogID' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AvailableItems) == 0x000140, "Member 'UBP_DialogSystem_C::AvailableItems' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Greeting) == 0x000190, "Member 'UBP_DialogSystem_C::Greeting' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, QuestName) == 0x0001A0, "Member 'UBP_DialogSystem_C::QuestName' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AddConditionDialog) == 0x0001A8, "Member 'UBP_DialogSystem_C::AddConditionDialog' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, CharacterToAddRow) == 0x0001B8, "Member 'UBP_DialogSystem_C::CharacterToAddRow' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, BattleManagerRef) == 0x0001C8, "Member 'UBP_DialogSystem_C::BattleManagerRef' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AdaptBattlemapLocation_) == 0x0001D0, "Member 'UBP_DialogSystem_C::AdaptBattlemapLocation_' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Flee_Impossible) == 0x0001D1, "Member 'UBP_DialogSystem_C::Flee_Impossible' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Battle_Music) == 0x0001D8, "Member 'UBP_DialogSystem_C::Battle_Music' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Enemy_Original_Location) == 0x0001E0, "Member 'UBP_DialogSystem_C::Enemy_Original_Location' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Enemy_Global_ID) == 0x0001F8, "Member 'UBP_DialogSystem_C::Enemy_Global_ID' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Engage_Type) == 0x000200, "Member 'UBP_DialogSystem_C::Engage_Type' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Encounter_Name) == 0x000204, "Member 'UBP_DialogSystem_C::Encounter_Name' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, Battle_Map_Name) == 0x00020C, "Member 'UBP_DialogSystem_C::Battle_Map_Name' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AvailableItemsExtended) == 0x000218, "Member 'UBP_DialogSystem_C::AvailableItemsExtended' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, AlreadyBeat) == 0x000268, "Member 'UBP_DialogSystem_C::AlreadyBeat' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, NpcDefeated) == 0x000269, "Member 'UBP_DialogSystem_C::NpcDefeated' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, TriggerDialogWhenDefeated) == 0x00026A, "Member 'UBP_DialogSystem_C::TriggerDialogWhenDefeated' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, DataTableRowIdDefeat) == 0x00026C, "Member 'UBP_DialogSystem_C::DataTableRowIdDefeat' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, BattleMapBP) == 0x000278, "Member 'UBP_DialogSystem_C::BattleMapBP' has a wrong offset!");
static_assert(offsetof(UBP_DialogSystem_C, EventType) == 0x0002A0, "Member 'UBP_DialogSystem_C::EventType' has a wrong offset!");

}

