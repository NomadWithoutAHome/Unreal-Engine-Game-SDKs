#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraConfigBlender

#include "Basic.hpp"

#include "S_CameraConfig_structs.hpp"
#include "SandFall_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraConfigBlender.BP_CameraConfigBlender_C
// 0x00C8 (0x00F0 - 0x0028)
class UBP_CameraConfigBlender_C final : public UExtendedObject
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArmComponent;                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UBP_DataAsset_CameraConfig_C*>   CameraConfigs;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_CameraConfig                        PreviousCameraConfig;                              // 0x0048(0x0088)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AccumulatedDeltaTime;                              // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FViewTargetTransitionParams            CurrentBlendParameters;                            // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsTransitionFinished;                              // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddCameraConfig(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void ApplyCameraConfigInstant(const struct FS_CameraConfig& CameraConfig);
	void ComputeLerpCameraComponentConfig(double LerpValue, struct FS_CameraComponentConfig* CameraComponentConfig);
	struct FS_CameraConfig ComputeLerpCameraConfig();
	struct FS_SpringArmComponentConfig ComputeLerpSpringArmComponentConfig(double LerpValue);
	float ComputeLerpValue();
	void DebugDrawCameraComponent();
	void DebugDrawCameraConfigBlender();
	void DebugDrawSpringArmComponentConfig();
	void GetCurrentCameraConfigFromComponents(struct FS_CameraConfig* CameraConfig);
	class FString GetDebugString();
	void GetLastCameraConfig(class UBP_DataAsset_CameraConfig_C** Output);
	void IsAppliedOnComponents(class UCameraComponent* CameraComponent_0, class USpringArmComponent* SpringArmComponent_0, bool* IsApplied);
	void IsTransitionDone(bool* Done);
	void OnCameraConfigStackChanged(const struct FViewTargetTransitionParams& TransitionParameters);
	void RemoveCameraConfig(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void SetupCameraConfig(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void UpdateCameraConfigBlender(double DeltaSeconds);
	void UpdateCameraConfigBlenderInternal(double DeltaSeconds);
	void ValidateCameraConfigBlender();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraConfigBlender_C">();
	}
	static class UBP_CameraConfigBlender_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CameraConfigBlender_C>();
	}
};
static_assert(alignof(UBP_CameraConfigBlender_C) == 0x000008, "Wrong alignment on UBP_CameraConfigBlender_C");
static_assert(sizeof(UBP_CameraConfigBlender_C) == 0x0000F0, "Wrong size on UBP_CameraConfigBlender_C");
static_assert(offsetof(UBP_CameraConfigBlender_C, CameraComponent) == 0x000028, "Member 'UBP_CameraConfigBlender_C::CameraComponent' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfigBlender_C, SpringArmComponent) == 0x000030, "Member 'UBP_CameraConfigBlender_C::SpringArmComponent' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfigBlender_C, CameraConfigs) == 0x000038, "Member 'UBP_CameraConfigBlender_C::CameraConfigs' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfigBlender_C, PreviousCameraConfig) == 0x000048, "Member 'UBP_CameraConfigBlender_C::PreviousCameraConfig' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfigBlender_C, AccumulatedDeltaTime) == 0x0000D0, "Member 'UBP_CameraConfigBlender_C::AccumulatedDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfigBlender_C, CurrentBlendParameters) == 0x0000D8, "Member 'UBP_CameraConfigBlender_C::CurrentBlendParameters' has a wrong offset!");
static_assert(offsetof(UBP_CameraConfigBlender_C, IsTransitionFinished) == 0x0000E8, "Member 'UBP_CameraConfigBlender_C::IsTransitionFinished' has a wrong offset!");

}

