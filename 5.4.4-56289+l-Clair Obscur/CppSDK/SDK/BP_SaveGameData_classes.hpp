#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SaveGameData

#include "Basic.hpp"

#include "E_CharacterList_structs.hpp"
#include "S_jRPG_PartySlot_structs.hpp"
#include "S_jRPG_CharacterSaveState_structs.hpp"
#include "E_GPE_MovingAlongSplineDestination_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "S_EntitlementSaveData_structs.hpp"
#include "S_ManorDoors_structs.hpp"
#include "S_QuestStatusData_structs.hpp"
#include "S_MerchantSaveData_structs.hpp"
#include "S_LevelSpawnPointsData_structs.hpp"
#include "S_BattleTowerSaveData_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_AreaAudioParameters_structs.hpp"
#include "S_LevelSpawnPointData_structs.hpp"
#include "S_UINotificationPool_structs.hpp"
#include "FExplorationProgression_SaveState_structs.hpp"
#include "S_WeaponInstanceHandle_structs.hpp"
#include "FPassiveEffectProgression_structs.hpp"
#include "S_GameDifficultySaveData_structs.hpp"
#include "S_UIFavoritePool_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SaveGameData.BP_SaveGameData_C
// 0x0A38 (0x0A60 - 0x0028)
class UBP_SaveGameData_C final : public UObject
{
public:
	TArray<struct FS_jRPG_PartySlot>              CurrentParty;                                      // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FS_jRPG_CharacterSaveState> CharactersCollection;                       // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ExternalCompanions;                                // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      InventoryItems;                                    // 0x0098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Gold;                                              // 0x00E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   AreaName;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        TimePlayed;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         FinishedGameCount;                                 // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              SaveDateTime;                                      // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class FName, bool>                       GPE_States;                                        // 0x0118(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       TransientBattledEnemies;                           // 0x0168(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FTransform>          TransientEnemyTransforms;                          // 0x01B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      TransientEnemyRoamingPointIndexes;                 // 0x0208(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, TSoftObjectPtr<class ABP_FleePoint_C>> TransientEnemyLastFleePoints;           // 0x0258(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       BattledEnemies;                                    // 0x02A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, E_GPE_MovingAlongSplineDestination> MovingPlatformsStates;                     // 0x02F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       TransientInteractedObjects;                        // 0x0348(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedObjects;                                 // 0x0398(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedCinematics;                              // 0x03E8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedTutorials;                               // 0x0438(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       SoundNotif;                                        // 0x0488(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, bool>                       InteractedDialogs;                                 // 0x04D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   CurrentCharacterWorld;                             // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGuid, bool>                      NamedIDsStates;                                    // 0x0530(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      LiftsFloor;                                        // 0x0580(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_ManorDoors                          PreviousManorDoorInfo;                             // 0x05D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGuid, int32>                     InteractedDialogues;                               // 0x05E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_CharacterList, int32>                  Relationship_Level;                                // 0x0630(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, struct FS_MerchantSaveData> MerchantStates;                                    // 0x0680(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<uint8>                                 UnlockedMapSections;                               // 0x06D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           VisitedLevelRowNames;                              // 0x06E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsMountInUse;                                      // 0x06F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F1[0x7];                                      // 0x06F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FS_QuestStatusData>  QuestStatuses;                                     // 0x06F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_BattleTowerSaveData                 BattleTowerSaveData;                               // 0x0748(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   MapToLoad;                                         // 0x07A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           SpawnPointTagToLoadAt;                             // 0x07A8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           ReturnSpawnPointTag;                               // 0x07B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_LevelSpawnPointsData>        UnlockedSpawnPoints;                               // 0x07B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   MapToLoadAfterCamp;                                // 0x07C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LastWorldMapTransform;                             // 0x07D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             LastTransform;                                     // 0x0830(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LightingScenarioReference_C> LastLightingScenario;                      // 0x0890(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_AreaAudioParameters                 LastAudioParameters;                               // 0x08B8(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_EntitlementSaveData                 EntitlementData;                                   // 0x08F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FFExplorationProgression_SaveState     ExplorationProgression;                            // 0x0900(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class FName>                           EquippedConsumableShards;                          // 0x0928(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_WeaponInstanceHandle>        WeaponProgressions;                                // 0x0938(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FFPassiveEffectProgression>     PassiveEffectsProgressions;                        // 0x0948(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_GameDifficultySaveData              GameDifficultyData;                                // 0x0958(0x0002)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95A[0x6];                                      // 0x095A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       EncounteredEnemies;                                // 0x0960(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FS_UINotificationPool> NotificationPools;                       // 0x09B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGameplayTag, struct FS_UIFavoritePool> FavoritePools;                               // 0x0A00(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_LevelSpawnPointData                 LastUsedSavePoint;                                 // 0x0A50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SaveGameData_C">();
	}
	static class UBP_SaveGameData_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SaveGameData_C>();
	}
};
static_assert(alignof(UBP_SaveGameData_C) == 0x000010, "Wrong alignment on UBP_SaveGameData_C");
static_assert(sizeof(UBP_SaveGameData_C) == 0x000A60, "Wrong size on UBP_SaveGameData_C");
static_assert(offsetof(UBP_SaveGameData_C, CurrentParty) == 0x000028, "Member 'UBP_SaveGameData_C::CurrentParty' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, CharactersCollection) == 0x000038, "Member 'UBP_SaveGameData_C::CharactersCollection' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, ExternalCompanions) == 0x000088, "Member 'UBP_SaveGameData_C::ExternalCompanions' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, InventoryItems) == 0x000098, "Member 'UBP_SaveGameData_C::InventoryItems' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, Gold) == 0x0000E8, "Member 'UBP_SaveGameData_C::Gold' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, AreaName) == 0x0000F0, "Member 'UBP_SaveGameData_C::AreaName' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, TimePlayed) == 0x000100, "Member 'UBP_SaveGameData_C::TimePlayed' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, FinishedGameCount) == 0x000108, "Member 'UBP_SaveGameData_C::FinishedGameCount' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, SaveDateTime) == 0x000110, "Member 'UBP_SaveGameData_C::SaveDateTime' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, GPE_States) == 0x000118, "Member 'UBP_SaveGameData_C::GPE_States' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, TransientBattledEnemies) == 0x000168, "Member 'UBP_SaveGameData_C::TransientBattledEnemies' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, TransientEnemyTransforms) == 0x0001B8, "Member 'UBP_SaveGameData_C::TransientEnemyTransforms' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, TransientEnemyRoamingPointIndexes) == 0x000208, "Member 'UBP_SaveGameData_C::TransientEnemyRoamingPointIndexes' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, TransientEnemyLastFleePoints) == 0x000258, "Member 'UBP_SaveGameData_C::TransientEnemyLastFleePoints' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, BattledEnemies) == 0x0002A8, "Member 'UBP_SaveGameData_C::BattledEnemies' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, MovingPlatformsStates) == 0x0002F8, "Member 'UBP_SaveGameData_C::MovingPlatformsStates' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, TransientInteractedObjects) == 0x000348, "Member 'UBP_SaveGameData_C::TransientInteractedObjects' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, InteractedObjects) == 0x000398, "Member 'UBP_SaveGameData_C::InteractedObjects' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, InteractedCinematics) == 0x0003E8, "Member 'UBP_SaveGameData_C::InteractedCinematics' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, InteractedTutorials) == 0x000438, "Member 'UBP_SaveGameData_C::InteractedTutorials' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, SoundNotif) == 0x000488, "Member 'UBP_SaveGameData_C::SoundNotif' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, InteractedDialogs) == 0x0004D8, "Member 'UBP_SaveGameData_C::InteractedDialogs' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, CurrentCharacterWorld) == 0x000528, "Member 'UBP_SaveGameData_C::CurrentCharacterWorld' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, NamedIDsStates) == 0x000530, "Member 'UBP_SaveGameData_C::NamedIDsStates' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, LiftsFloor) == 0x000580, "Member 'UBP_SaveGameData_C::LiftsFloor' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, PreviousManorDoorInfo) == 0x0005D0, "Member 'UBP_SaveGameData_C::PreviousManorDoorInfo' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, InteractedDialogues) == 0x0005E0, "Member 'UBP_SaveGameData_C::InteractedDialogues' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, Relationship_Level) == 0x000630, "Member 'UBP_SaveGameData_C::Relationship_Level' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, MerchantStates) == 0x000680, "Member 'UBP_SaveGameData_C::MerchantStates' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, UnlockedMapSections) == 0x0006D0, "Member 'UBP_SaveGameData_C::UnlockedMapSections' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, VisitedLevelRowNames) == 0x0006E0, "Member 'UBP_SaveGameData_C::VisitedLevelRowNames' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, IsMountInUse) == 0x0006F0, "Member 'UBP_SaveGameData_C::IsMountInUse' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, QuestStatuses) == 0x0006F8, "Member 'UBP_SaveGameData_C::QuestStatuses' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, BattleTowerSaveData) == 0x000748, "Member 'UBP_SaveGameData_C::BattleTowerSaveData' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, MapToLoad) == 0x0007A0, "Member 'UBP_SaveGameData_C::MapToLoad' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, SpawnPointTagToLoadAt) == 0x0007A8, "Member 'UBP_SaveGameData_C::SpawnPointTagToLoadAt' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, ReturnSpawnPointTag) == 0x0007B0, "Member 'UBP_SaveGameData_C::ReturnSpawnPointTag' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, UnlockedSpawnPoints) == 0x0007B8, "Member 'UBP_SaveGameData_C::UnlockedSpawnPoints' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, MapToLoadAfterCamp) == 0x0007C8, "Member 'UBP_SaveGameData_C::MapToLoadAfterCamp' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, LastWorldMapTransform) == 0x0007D0, "Member 'UBP_SaveGameData_C::LastWorldMapTransform' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, LastTransform) == 0x000830, "Member 'UBP_SaveGameData_C::LastTransform' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, LastLightingScenario) == 0x000890, "Member 'UBP_SaveGameData_C::LastLightingScenario' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, LastAudioParameters) == 0x0008B8, "Member 'UBP_SaveGameData_C::LastAudioParameters' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, EntitlementData) == 0x0008F0, "Member 'UBP_SaveGameData_C::EntitlementData' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, ExplorationProgression) == 0x000900, "Member 'UBP_SaveGameData_C::ExplorationProgression' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, EquippedConsumableShards) == 0x000928, "Member 'UBP_SaveGameData_C::EquippedConsumableShards' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, WeaponProgressions) == 0x000938, "Member 'UBP_SaveGameData_C::WeaponProgressions' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, PassiveEffectsProgressions) == 0x000948, "Member 'UBP_SaveGameData_C::PassiveEffectsProgressions' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, GameDifficultyData) == 0x000958, "Member 'UBP_SaveGameData_C::GameDifficultyData' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, EncounteredEnemies) == 0x000960, "Member 'UBP_SaveGameData_C::EncounteredEnemies' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, NotificationPools) == 0x0009B0, "Member 'UBP_SaveGameData_C::NotificationPools' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, FavoritePools) == 0x000A00, "Member 'UBP_SaveGameData_C::FavoritePools' has a wrong offset!");
static_assert(offsetof(UBP_SaveGameData_C, LastUsedSavePoint) == 0x000A50, "Member 'UBP_SaveGameData_C::LastUsedSavePoint' has a wrong offset!");

}

