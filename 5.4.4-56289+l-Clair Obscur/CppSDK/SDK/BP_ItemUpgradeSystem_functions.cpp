#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemUpgradeSystem

#include "Basic.hpp"

#include "BP_ItemUpgradeSystem_classes.hpp"
#include "BP_ItemUpgradeSystem_parameters.hpp"


namespace SDK
{

// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.AddWeaponToInventory
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_WeaponInstanceHandle&   WeaponInstanceHandle                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  PreviousLevel                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::AddWeaponToInventory(const struct FS_WeaponInstanceHandle& WeaponInstanceHandle, int32* PreviousLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "AddWeaponToInventory");

	Params::BP_ItemUpgradeSystem_C_AddWeaponToInventory Parms{};

	Parms.WeaponInstanceHandle = std::move(WeaponInstanceHandle);

	UObject::ProcessEvent(Func, &Parms);

	if (PreviousLevel != nullptr)
		*PreviousLevel = Parms.PreviousLevel;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.ComputeWeaponInstanceData
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_WeaponInstanceHandle&   WeaponHandle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_WeaponInstanceData*           WeaponInstanceData                                     (Parm, OutParm, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::ComputeWeaponInstanceData(const struct FS_WeaponInstanceHandle& WeaponHandle, struct FS_WeaponInstanceData* WeaponInstanceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "ComputeWeaponInstanceData");

	Params::BP_ItemUpgradeSystem_C_ComputeWeaponInstanceData Parms{};

	Parms.WeaponHandle = std::move(WeaponHandle);

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponInstanceData != nullptr)
		*WeaponInstanceData = std::move(Parms.WeaponInstanceData);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.ComputeWeaponUnlockedPassivesFromID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FName>*                    ActivePassiveEffectIDs                                 (Parm, OutParm)

void UBP_ItemUpgradeSystem_C::ComputeWeaponUnlockedPassivesFromID(class FName WeaponID, TArray<class FName>* ActivePassiveEffectIDs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "ComputeWeaponUnlockedPassivesFromID");

	Params::BP_ItemUpgradeSystem_C_ComputeWeaponUnlockedPassivesFromID Parms{};

	Parms.WeaponID = WeaponID;

	UObject::ProcessEvent(Func, &Parms);

	if (ActivePassiveEffectIDs != nullptr)
		*ActivePassiveEffectIDs = std::move(Parms.ActivePassiveEffectIDs);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.CreateInventorySaveState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_WeaponInstanceHandle>* WeaponHandles                                          (Parm, OutParm)

void UBP_ItemUpgradeSystem_C::CreateInventorySaveState(TArray<struct FS_WeaponInstanceHandle>* WeaponHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "CreateInventorySaveState");

	Params::BP_ItemUpgradeSystem_C_CreateInventorySaveState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WeaponHandles != nullptr)
		*WeaponHandles = std::move(Parms.WeaponHandles);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.CreateItemInstanceInternal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ItemStaticData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_ItemInstance_Base_C**         ItemInstance                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::CreateItemInstanceInternal(const struct FS_jRPG_Item_StaticData& ItemStaticData, int32 Quantity, class UBP_ItemInstance_Base_C** ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "CreateItemInstanceInternal");

	Params::BP_ItemUpgradeSystem_C_CreateItemInstanceInternal Parms{};

	Parms.ItemStaticData = std::move(ItemStaticData);
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemInstance != nullptr)
		*ItemInstance = Parms.ItemInstance;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.CreateItemInstanceTransient
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ItemStaticData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_ItemInstance_Base_C**         ItemInstance                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::CreateItemInstanceTransient(const struct FS_jRPG_Item_StaticData& ItemStaticData, int32 Quantity, class UBP_ItemInstance_Base_C** ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "CreateItemInstanceTransient");

	Params::BP_ItemUpgradeSystem_C_CreateItemInstanceTransient Parms{};

	Parms.ItemStaticData = std::move(ItemStaticData);
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemInstance != nullptr)
		*ItemInstance = Parms.ItemInstance;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.ExecuteUbergraph_BP_ItemUpgradeSystem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::ExecuteUbergraph_BP_ItemUpgradeSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "ExecuteUbergraph_BP_ItemUpgradeSystem");

	Params::BP_ItemUpgradeSystem_C_ExecuteUbergraph_BP_ItemUpgradeSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.FindItemInstanceByID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemDefinitionID                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_ItemInstance_Base_C**         ItemInstance                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::FindItemInstanceByID(class FName ItemDefinitionID, class UBP_ItemInstance_Base_C** ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "FindItemInstanceByID");

	Params::BP_ItemUpgradeSystem_C_FindItemInstanceByID Parms{};

	Parms.ItemDefinitionID = ItemDefinitionID;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemInstance != nullptr)
		*ItemInstance = Parms.ItemInstance;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.FindWeaponInstanceByWeaponID
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponDefinitionID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  WeaponIndex                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_WeaponInstanceData*           WeaponInstanceData                                     (Parm, OutParm, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::FindWeaponInstanceByWeaponID(class FName WeaponDefinitionID, bool* Found, int32* WeaponIndex, struct FS_WeaponInstanceData* WeaponInstanceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "FindWeaponInstanceByWeaponID");

	Params::BP_ItemUpgradeSystem_C_FindWeaponInstanceByWeaponID Parms{};

	Parms.WeaponDefinitionID = WeaponDefinitionID;

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (WeaponIndex != nullptr)
		*WeaponIndex = Parms.WeaponIndex;

	if (WeaponInstanceData != nullptr)
		*WeaponInstanceData = std::move(Parms.WeaponInstanceData);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetAllItemInstances
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBP_ItemInstance_Base_C*>  ReturnValue                                            (Parm, OutParm, ReturnParm)

TArray<class UBP_ItemInstance_Base_C*> UBP_ItemUpgradeSystem_C::GetAllItemInstances()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetAllItemInstances");

	Params::BP_ItemUpgradeSystem_C_GetAllItemInstances Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetItemInstanceClassFromData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ItemStaticData                                         (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UClass* UBP_ItemUpgradeSystem_C::GetItemInstanceClassFromData(const struct FS_jRPG_Item_StaticData& ItemStaticData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetItemInstanceClassFromData");

	Params::BP_ItemUpgradeSystem_C_GetItemInstanceClassFromData Parms{};

	Parms.ItemStaticData = std::move(ItemStaticData);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetItemInstanceUpgradeCost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ItemInstance_Gear_C*          GearItemInstance                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_ItemQuantity>*         ItemQuantities                                         (Parm, OutParm)

void UBP_ItemUpgradeSystem_C::GetItemInstanceUpgradeCost(class UBP_ItemInstance_Gear_C* GearItemInstance, TArray<struct FS_ItemQuantity>* ItemQuantities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetItemInstanceUpgradeCost");

	Params::BP_ItemUpgradeSystem_C_GetItemInstanceUpgradeCost Parms{};

	Parms.GearItemInstance = GearItemInstance;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemQuantities != nullptr)
		*ItemQuantities = std::move(Parms.ItemQuantities);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetItemUpgradeCost
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponDefinitionID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_ItemQuantity>*         ItemQuantities                                         (Parm, OutParm)

void UBP_ItemUpgradeSystem_C::GetItemUpgradeCost(class FName WeaponDefinitionID, TArray<struct FS_ItemQuantity>* ItemQuantities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetItemUpgradeCost");

	Params::BP_ItemUpgradeSystem_C_GetItemUpgradeCost Parms{};

	Parms.WeaponDefinitionID = WeaponDefinitionID;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemQuantities != nullptr)
		*ItemQuantities = std::move(Parms.ItemQuantities);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetOrCreateItemInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ItemStaticData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_ItemInstance_Base_C**         ItemInstance                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::GetOrCreateItemInstance(const struct FS_jRPG_Item_StaticData& ItemStaticData, int32 Quantity, class UBP_ItemInstance_Base_C** ItemInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetOrCreateItemInstance");

	Params::BP_ItemUpgradeSystem_C_GetOrCreateItemInstance Parms{};

	Parms.ItemStaticData = std::move(ItemStaticData);
	Parms.Quantity = Quantity;

	UObject::ProcessEvent(Func, &Parms);

	if (ItemInstance != nullptr)
		*ItemInstance = Parms.ItemInstance;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetShardForConsumable
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FName&                      ConsumableID                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            ShardID                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::GetShardForConsumable(const class FName& ConsumableID, class FName* ShardID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetShardForConsumable");

	Params::BP_ItemUpgradeSystem_C_GetShardForConsumable Parms{};

	Parms.ConsumableID = ConsumableID;

	UObject::ProcessEvent(Func, &Parms);

	if (ShardID != nullptr)
		*ShardID = Parms.ShardID;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetShardItemUpgradeItemRow
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_DataAsset_Item_Shard_C*       ShardItem                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FDataTableRowHandle*             UpgradeItemRow                                         (Parm, OutParm, NoDestructor)

void UBP_ItemUpgradeSystem_C::GetShardItemUpgradeItemRow(class UBP_DataAsset_Item_Shard_C* ShardItem, struct FDataTableRowHandle* UpgradeItemRow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetShardItemUpgradeItemRow");

	Params::BP_ItemUpgradeSystem_C_GetShardItemUpgradeItemRow Parms{};

	Parms.ShardItem = ShardItem;

	UObject::ProcessEvent(Func, &Parms);

	if (UpgradeItemRow != nullptr)
		*UpgradeItemRow = std::move(Parms.UpgradeItemRow);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetUpgradedConsumableItemFromShard
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ShardStaticDataID                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FDataTableRowHandle              ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor)

struct FDataTableRowHandle UBP_ItemUpgradeSystem_C::GetUpgradedConsumableItemFromShard(class FName ShardStaticDataID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetUpgradedConsumableItemFromShard");

	Params::BP_ItemUpgradeSystem_C_GetUpgradedConsumableItemFromShard Parms{};

	Parms.ShardStaticDataID = ShardStaticDataID;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetUpgradeResourceList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FDataTableRowHandle>*     UpgradeResourcesList                                   (Parm, OutParm)

void UBP_ItemUpgradeSystem_C::GetUpgradeResourceList(TArray<struct FDataTableRowHandle>* UpgradeResourcesList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetUpgradeResourceList");

	Params::BP_ItemUpgradeSystem_C_GetUpgradeResourceList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (UpgradeResourcesList != nullptr)
		*UpgradeResourcesList = std::move(Parms.UpgradeResourcesList);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetWeaponQualityForUpgradeLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UpgradeLevel                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponQuality*                         Quality                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::GetWeaponQualityForUpgradeLevel(int32 UpgradeLevel, EWeaponQuality* Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetWeaponQualityForUpgradeLevel");

	Params::BP_ItemUpgradeSystem_C_GetWeaponQualityForUpgradeLevel Parms{};

	Parms.UpgradeLevel = UpgradeLevel;

	UObject::ProcessEvent(Func, &Parms);

	if (Quality != nullptr)
		*Quality = Parms.Quality;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.GetWeaponQualityLevel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             WeaponDefinitionID                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EWeaponQuality*                         Quality                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::GetWeaponQualityLevel(class FName WeaponDefinitionID, EWeaponQuality* Quality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "GetWeaponQualityLevel");

	Params::BP_ItemUpgradeSystem_C_GetWeaponQualityLevel Parms{};

	Parms.WeaponDefinitionID = WeaponDefinitionID;

	UObject::ProcessEvent(Func, &Parms);

	if (Quality != nullptr)
		*Quality = Parms.Quality;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ItemUpgradeSystem_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.IsItemConsumableUpgrade
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ItemId                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_ItemUpgradeSystem_C::IsItemConsumableUpgrade(class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "IsItemConsumableUpgrade");

	Params::BP_ItemUpgradeSystem_C_IsItemConsumableUpgrade Parms{};

	Parms.ItemId = ItemId;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.IsShardUpgradable
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ShardName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsShardUpgradable_0                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::IsShardUpgradable(class FName ShardName, bool* IsShardUpgradable_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "IsShardUpgradable");

	Params::BP_ItemUpgradeSystem_C_IsShardUpgradable Parms{};

	Parms.ShardName = ShardName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsShardUpgradable_0 != nullptr)
		*IsShardUpgradable_0 = Parms.IsShardUpgradable_0;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.LoadInventoryState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_WeaponInstanceHandle>& WeaponHandles                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_ItemUpgradeSystem_C::LoadInventoryState(TArray<struct FS_WeaponInstanceHandle>& WeaponHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "LoadInventoryState");

	Params::BP_ItemUpgradeSystem_C_LoadInventoryState Parms{};

	Parms.WeaponHandles = std::move(WeaponHandles);

	UObject::ProcessEvent(Func, &Parms);

	WeaponHandles = std::move(Parms.WeaponHandles);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.LoadShardDefinition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ShardItemDefinition                                    (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::LoadShardDefinition(const struct FS_jRPG_Item_StaticData& ShardItemDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "LoadShardDefinition");

	Params::BP_ItemUpgradeSystem_C_LoadShardDefinition Parms{};

	Parms.ShardItemDefinition = std::move(ShardItemDefinition);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.OnItemAddedToInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ItemStaticData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Quantity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FS_LootContext&            LootContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_GeneratedItemInfo_Base_C**    GeneratedItemInfo                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::OnItemAddedToInventory(const struct FS_jRPG_Item_StaticData& ItemStaticData, int32 Quantity, const struct FS_LootContext& LootContext, class UBP_GeneratedItemInfo_Base_C** GeneratedItemInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "OnItemAddedToInventory");

	Params::BP_ItemUpgradeSystem_C_OnItemAddedToInventory Parms{};

	Parms.ItemStaticData = std::move(ItemStaticData);
	Parms.Quantity = Quantity;
	Parms.LootContext = std::move(LootContext);

	UObject::ProcessEvent(Func, &Parms);

	if (GeneratedItemInfo != nullptr)
		*GeneratedItemInfo = Parms.GeneratedItemInfo;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.OnItemRemovedFromInventory
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_jRPG_Item_StaticData&   ItemStaticData                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  RemainingQuantity                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::OnItemRemovedFromInventory(const struct FS_jRPG_Item_StaticData& ItemStaticData, int32 Amount, int32* RemainingQuantity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "OnItemRemovedFromInventory");

	Params::BP_ItemUpgradeSystem_C_OnItemRemovedFromInventory Parms{};

	Parms.ItemStaticData = std::move(ItemStaticData);
	Parms.Amount = Amount;

	UObject::ProcessEvent(Func, &Parms);

	if (RemainingQuantity != nullptr)
		*RemainingQuantity = Parms.RemainingQuantity;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.ResetState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ItemUpgradeSystem_C::ResetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "ResetState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.Sandfall_Debug_SetGearLevel
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   NewLevel                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::Sandfall_Debug_SetGearLevel(class FName WeaponID, int32 NewLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "Sandfall_Debug_SetGearLevel");

	Params::BP_ItemUpgradeSystem_C_Sandfall_Debug_SetGearLevel Parms{};

	Parms.WeaponID = WeaponID;
	Parms.NewLevel = NewLevel;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.Sandfall_Debug_UpgradeWeapon
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WeaponID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::Sandfall_Debug_UpgradeWeapon(class FName WeaponID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "Sandfall_Debug_UpgradeWeapon");

	Params::BP_ItemUpgradeSystem_C_Sandfall_Debug_UpgradeWeapon Parms{};

	Parms.WeaponID = WeaponID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.UpdateWeaponInstance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_WeaponInstanceData&     WeaponInstanceData                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::UpdateWeaponInstance(const struct FS_WeaponInstanceData& WeaponInstanceData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "UpdateWeaponInstance");

	Params::BP_ItemUpgradeSystem_C_UpdateWeaponInstance Parms{};

	Parms.WeaponInstanceData = std::move(WeaponInstanceData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.UpgradeShardToNextLevel
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ShardName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   bIsUpgradeSuccessful                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::UpgradeShardToNextLevel(class FName ShardName, bool* bIsUpgradeSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "UpgradeShardToNextLevel");

	Params::BP_ItemUpgradeSystem_C_UpgradeShardToNextLevel Parms{};

	Parms.ShardName = ShardName;

	UObject::ProcessEvent(Func, &Parms);

	if (bIsUpgradeSuccessful != nullptr)
		*bIsUpgradeSuccessful = Parms.bIsUpgradeSuccessful;
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.UpgradeWeaponFromHandle
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_WeaponInstanceHandle&   WeaponHandle                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_WeaponInstanceData*           UpgradedWeaponData                                     (Parm, OutParm, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::UpgradeWeaponFromHandle(const struct FS_WeaponInstanceHandle& WeaponHandle, struct FS_WeaponInstanceData* UpgradedWeaponData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "UpgradeWeaponFromHandle");

	Params::BP_ItemUpgradeSystem_C_UpgradeWeaponFromHandle Parms{};

	Parms.WeaponHandle = std::move(WeaponHandle);

	UObject::ProcessEvent(Func, &Parms);

	if (UpgradedWeaponData != nullptr)
		*UpgradedWeaponData = std::move(Parms.UpgradedWeaponData);
}


// Function BP_ItemUpgradeSystem.BP_ItemUpgradeSystem_C.UpgradeWeaponFromInstance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ItemInstance_Gear_C*          ItemInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_ItemUpgradeSystem_C::UpgradeWeaponFromInstance(class UBP_ItemInstance_Gear_C* ItemInstance, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ItemUpgradeSystem_C", "UpgradeWeaponFromInstance");

	Params::BP_ItemUpgradeSystem_C_UpgradeWeaponFromInstance Parms{};

	Parms.ItemInstance = ItemInstance;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);
}

}

