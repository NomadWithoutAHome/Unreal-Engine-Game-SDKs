#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_ActionsManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SandFall_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "EAttackType_structs.hpp"
#include "E_jRPG_ActionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C
// 0x0088 (0x0128 - 0x00A0)
class UAC_jRPG_ActionsManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_jRPG_GI_Custom_C*                   GameInstanceReference;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> UNUSED_TargetHeroes;                             // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PureWhiteLearnt;                                   // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FleeImpossible;                                    // 0x00C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DamageCount;                                       // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSecondTrigger;                                   // 0x00D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       AllyDualTarget;                                    // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDamagesDealt;                               // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> Target_List;                                     // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        StanceDamageMultiply;                              // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BurningPraiseConditionFilled;                      // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    SoundEventFleeSelect;                              // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SoundEventTurnPass;                                // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void ActivateActionEffect();
	void AreAllAlive(TArray<class ABP_jRPG_Character_Battle_Base_C*>& NewParam, bool* SomeAreAlive);
	void Attack();
	void AttackStatCalculation(double* Power, double* CritRate, double* CriticalPower, double* Sharpness, double* Defense, double* Speed, double* Luck, double* HP, double* AP);
	void AttackStatCalculation_WithPerfection(double* Power, double* CritRate, double* CriticalPower, double* Sharpness);
	void CallFunctionByName(const class FString& FunctionName);
	void CheckTargetBuff(class UAC_jRPG_CharacterBattleStats_C*& Target, class UClass* Buff, bool* HasBuff);
	void Defend();
	void ExecuteUbergraph_AC_jRPG_ActionsManager(int32 EntryPoint);
	void Flee();
	void FleeActivation();
	void FleeStart();
	void FreezeFrame(double TimeDilation, double Duration);
	void GetActionCost(class FName ActionName, double* CostHP, double* CostMP);
	void GetActionData(class FName ActionName, struct FS_jRPG_Action* Out_Row, bool* Found);
	void ReceiveBeginPlay();
	void Select_Attack();
	void Select_Defend();
	void Select_Flee();
	void Select_Magic_AllAllies();
	void Select_Magic_AllAlliesDead();
	void Select_Magic_AllEnemies();
	void Select_Magic_Fireball();
	void Select_Magic_Heal();
	void Select_Magic_OnlySelf();
	void Select_Magic_SingleAlly();
	void Select_Magic_SingleAllyAndEnemy();
	void Select_Magic_SingleAllyDead();
	void Select_Magic_SingleEnemy();
	void Select_Magic_SingleEnemyAny();
	void Select_Magic_SinglleAllyAny();
	void Select_Magic_Thunder();
	void Select_Test();
	void SelectAction(E_jRPG_ActionType ActionType, class FName SecondaryActionName);
	void SkipTurn();
	void StanceDamageMultiplier();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_jRPG_ActionsManager_C">();
	}
	static class UAC_jRPG_ActionsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_jRPG_ActionsManager_C>();
	}
};
static_assert(alignof(UAC_jRPG_ActionsManager_C) == 0x000008, "Wrong alignment on UAC_jRPG_ActionsManager_C");
static_assert(sizeof(UAC_jRPG_ActionsManager_C) == 0x000128, "Wrong size on UAC_jRPG_ActionsManager_C");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, UberGraphFrame) == 0x0000A0, "Member 'UAC_jRPG_ActionsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, GameInstanceReference) == 0x0000A8, "Member 'UAC_jRPG_ActionsManager_C::GameInstanceReference' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, UNUSED_TargetHeroes) == 0x0000B0, "Member 'UAC_jRPG_ActionsManager_C::UNUSED_TargetHeroes' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, PureWhiteLearnt) == 0x0000C0, "Member 'UAC_jRPG_ActionsManager_C::PureWhiteLearnt' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, FleeImpossible) == 0x0000C1, "Member 'UAC_jRPG_ActionsManager_C::FleeImpossible' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, DamageCount) == 0x0000C8, "Member 'UAC_jRPG_ActionsManager_C::DamageCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, IsSecondTrigger) == 0x0000D0, "Member 'UAC_jRPG_ActionsManager_C::IsSecondTrigger' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, AllyDualTarget) == 0x0000D8, "Member 'UAC_jRPG_ActionsManager_C::AllyDualTarget' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, CurrentDamagesDealt) == 0x0000E0, "Member 'UAC_jRPG_ActionsManager_C::CurrentDamagesDealt' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, Target_List) == 0x0000E8, "Member 'UAC_jRPG_ActionsManager_C::Target_List' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, StanceDamageMultiply) == 0x0000F8, "Member 'UAC_jRPG_ActionsManager_C::StanceDamageMultiply' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, BurningPraiseConditionFilled) == 0x000100, "Member 'UAC_jRPG_ActionsManager_C::BurningPraiseConditionFilled' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, SoundEventFleeSelect) == 0x000108, "Member 'UAC_jRPG_ActionsManager_C::SoundEventFleeSelect' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_ActionsManager_C, SoundEventTurnPass) == 0x000118, "Member 'UAC_jRPG_ActionsManager_C::SoundEventTurnPass' has a wrong offset!");

}

