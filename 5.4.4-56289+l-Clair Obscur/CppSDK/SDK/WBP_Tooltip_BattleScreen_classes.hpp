#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Tooltip_BattleScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Tooltip_BattleScreen.WBP_Tooltip_BattleScreen_C
// 0x0030 (0x0310 - 0x02E0)
class UWBP_Tooltip_BattleScreen_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ToolTip_Appear;                               // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_MainContainer_ToolTip;                      // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_SF_RichTextBlock_C*                TooltipDescription;                                // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_WrappingText_C*                    TooltipName;                                       // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       underline;                                         // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void Appear();
	void Disappear();
	void ExecuteUbergraph_WBP_Tooltip_BattleScreen(int32 EntryPoint);
	bool IsDisappearAnimPlaying();
	void IsTooltipVisible(bool* IsVisible_0);
	void ShowTooltip(const class FText& TooltipName_0, const class FText& TooltipDesc);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Tooltip_BattleScreen_C">();
	}
	static class UWBP_Tooltip_BattleScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Tooltip_BattleScreen_C>();
	}
};
static_assert(alignof(UWBP_Tooltip_BattleScreen_C) == 0x000008, "Wrong alignment on UWBP_Tooltip_BattleScreen_C");
static_assert(sizeof(UWBP_Tooltip_BattleScreen_C) == 0x000310, "Wrong size on UWBP_Tooltip_BattleScreen_C");
static_assert(offsetof(UWBP_Tooltip_BattleScreen_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_Tooltip_BattleScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_BattleScreen_C, Anim_ToolTip_Appear) == 0x0002E8, "Member 'UWBP_Tooltip_BattleScreen_C::Anim_ToolTip_Appear' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_BattleScreen_C, Canvas_MainContainer_ToolTip) == 0x0002F0, "Member 'UWBP_Tooltip_BattleScreen_C::Canvas_MainContainer_ToolTip' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_BattleScreen_C, TooltipDescription) == 0x0002F8, "Member 'UWBP_Tooltip_BattleScreen_C::TooltipDescription' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_BattleScreen_C, TooltipName) == 0x000300, "Member 'UWBP_Tooltip_BattleScreen_C::TooltipName' has a wrong offset!");
static_assert(offsetof(UWBP_Tooltip_BattleScreen_C, underline) == 0x000308, "Member 'UWBP_Tooltip_BattleScreen_C::underline' has a wrong offset!");

}

