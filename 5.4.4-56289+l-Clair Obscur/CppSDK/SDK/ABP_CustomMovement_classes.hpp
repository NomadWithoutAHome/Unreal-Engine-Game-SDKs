#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_CustomMovement

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ABP_CustomMovement_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ECustomMovementMode_structs.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_CustomMovement.ABP_CustomMovement_C
// 0x06D0 (0x0A40 - 0x0370)
class UABP_CustomMovement_C final : public UAnimInstance
{
public:
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_CustomMovement::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;           // 0x0378(0x0048)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Tag;                        // 0x03C0(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03C8(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03D0(0x0008)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_2;                   // 0x03D8(0x0048)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool_1;                   // 0x0420(0x0048)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0468(0x0020)()
	struct FAnimNode_LinkedInputPose              AnimGraphNode_SubInput;                            // 0x0488(0x00B8)()
	struct FAnimNode_LinkedAnimGraph              AnimGraphNode_LinkedAnimGraph_1;                   // 0x0540(0x00B8)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x05F8(0x0020)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0618(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0740(0x0020)()
	struct FAnimNode_SequenceEvaluator            AnimGraphNode_SequenceEvaluator;                   // 0x0760(0x0040)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x07A0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x07C0(0x00C8)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0888(0x0048)()
	struct FAnimNode_LinkedAnimGraph              AnimGraphNode_LinkedAnimGraph;                     // 0x08D0(0x00B8)()
	bool                                          IsLadder;                                          // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LadderPos;                                         // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LadderBlendTime;                                   // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             Owner;                                             // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsClimbing;                                        // 0x09A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovingNextHold;                                  // 0x09A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9AA[0x6];                                      // 0x09AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MovingNextHoldTransitionAlpha;                     // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovingNextHoldTransitionDelta;                     // 0x09B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ClimbingReadyDirection;                            // 0x09D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ClimbingBlendTIme;                                 // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_CustomMovementComponent_C*          CustomMovement;                                    // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_EnteringLadderTop;                              // 0x09F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_EnteringLadderBottom;                           // 0x0A00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ExitingLadderTop;                               // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ExitingLadderBottom;                            // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_EnteringClimbingTop;                            // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ExitingClimbingTop;                             // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          AS_Ladder_Up_Loop;                                 // 0x0A28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingRope;                                       // 0x0A30(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECustomMovementMode                           CurrentCustomMovementMode;                         // 0x0A31(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(const struct FPoseLink& InPose, struct FPoseLink* AnimGraph_0);
	void BlueprintInitializeAnimation();
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_CustomMovement_AnimGraphNode_SequenceEvaluator_5A9EED8A4B8A3A3293F9AA8EAC63B9CA();
	void ExecuteUbergraph_ABP_CustomMovement(int32 EntryPoint);
	void ResetState();
	void UpdateAnimationAssets();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_CustomMovement_C">();
	}
	static class UABP_CustomMovement_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_CustomMovement_C>();
	}
};
static_assert(alignof(UABP_CustomMovement_C) == 0x000010, "Wrong alignment on UABP_CustomMovement_C");
static_assert(sizeof(UABP_CustomMovement_C) == 0x000A40, "Wrong size on UABP_CustomMovement_C");
static_assert(offsetof(UABP_CustomMovement_C, UberGraphFrame) == 0x000370, "Member 'UABP_CustomMovement_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, __AnimBlueprintMutables) == 0x000378, "Member 'UABP_CustomMovement_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimBlueprintExtension_Tag) == 0x0003C0, "Member 'UABP_CustomMovement_C::AnimBlueprintExtension_Tag' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimBlueprintExtension_PropertyAccess) == 0x0003C8, "Member 'UABP_CustomMovement_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimBlueprintExtension_Base) == 0x0003D0, "Member 'UABP_CustomMovement_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_BlendListByBool_2) == 0x0003D8, "Member 'UABP_CustomMovement_C::AnimGraphNode_BlendListByBool_2' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_BlendListByBool_1) == 0x000420, "Member 'UABP_CustomMovement_C::AnimGraphNode_BlendListByBool_1' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_Root) == 0x000468, "Member 'UABP_CustomMovement_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_SubInput) == 0x000488, "Member 'UABP_CustomMovement_C::AnimGraphNode_SubInput' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_LinkedAnimGraph_1) == 0x000540, "Member 'UABP_CustomMovement_C::AnimGraphNode_LinkedAnimGraph_1' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_ComponentToLocalSpace) == 0x0005F8, "Member 'UABP_CustomMovement_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_ModifyBone) == 0x000618, "Member 'UABP_CustomMovement_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_LocalToComponentSpace) == 0x000740, "Member 'UABP_CustomMovement_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_SequenceEvaluator) == 0x000760, "Member 'UABP_CustomMovement_C::AnimGraphNode_SequenceEvaluator' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_StateResult) == 0x0007A0, "Member 'UABP_CustomMovement_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_StateMachine) == 0x0007C0, "Member 'UABP_CustomMovement_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_BlendListByBool) == 0x000888, "Member 'UABP_CustomMovement_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AnimGraphNode_LinkedAnimGraph) == 0x0008D0, "Member 'UABP_CustomMovement_C::AnimGraphNode_LinkedAnimGraph' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, IsLadder) == 0x000988, "Member 'UABP_CustomMovement_C::IsLadder' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, LadderPos) == 0x000990, "Member 'UABP_CustomMovement_C::LadderPos' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, LadderBlendTime) == 0x000998, "Member 'UABP_CustomMovement_C::LadderBlendTime' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, Owner) == 0x0009A0, "Member 'UABP_CustomMovement_C::Owner' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, IsClimbing) == 0x0009A8, "Member 'UABP_CustomMovement_C::IsClimbing' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, IsMovingNextHold) == 0x0009A9, "Member 'UABP_CustomMovement_C::IsMovingNextHold' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, MovingNextHoldTransitionAlpha) == 0x0009B0, "Member 'UABP_CustomMovement_C::MovingNextHoldTransitionAlpha' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, MovingNextHoldTransitionDelta) == 0x0009B8, "Member 'UABP_CustomMovement_C::MovingNextHoldTransitionDelta' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, ClimbingReadyDirection) == 0x0009D0, "Member 'UABP_CustomMovement_C::ClimbingReadyDirection' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, ClimbingBlendTIme) == 0x0009E8, "Member 'UABP_CustomMovement_C::ClimbingBlendTIme' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, CustomMovement) == 0x0009F0, "Member 'UABP_CustomMovement_C::CustomMovement' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AM_EnteringLadderTop) == 0x0009F8, "Member 'UABP_CustomMovement_C::AM_EnteringLadderTop' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AM_EnteringLadderBottom) == 0x000A00, "Member 'UABP_CustomMovement_C::AM_EnteringLadderBottom' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AM_ExitingLadderTop) == 0x000A08, "Member 'UABP_CustomMovement_C::AM_ExitingLadderTop' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AM_ExitingLadderBottom) == 0x000A10, "Member 'UABP_CustomMovement_C::AM_ExitingLadderBottom' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AM_EnteringClimbingTop) == 0x000A18, "Member 'UABP_CustomMovement_C::AM_EnteringClimbingTop' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AM_ExitingClimbingTop) == 0x000A20, "Member 'UABP_CustomMovement_C::AM_ExitingClimbingTop' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, AS_Ladder_Up_Loop) == 0x000A28, "Member 'UABP_CustomMovement_C::AS_Ladder_Up_Loop' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, IsUsingRope) == 0x000A30, "Member 'UABP_CustomMovement_C::IsUsingRope' has a wrong offset!");
static_assert(offsetof(UABP_CustomMovement_C, CurrentCustomMovementMode) == 0x000A31, "Member 'UABP_CustomMovement_C::CurrentCustomMovementMode' has a wrong offset!");

}

