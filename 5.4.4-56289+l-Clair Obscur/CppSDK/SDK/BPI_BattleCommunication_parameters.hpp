#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_BattleCommunication

#include "Basic.hpp"

#include "EAttackType_structs.hpp"
#include "EHealReason_structs.hpp"
#include "EDamageReason_structs.hpp"


namespace SDK::Params
{

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnAPRecovered
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCommunication_C_OnAPRecovered final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFromTurnStart;                                   // 0x0004(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnAPRecovered) == 0x000004, "Wrong alignment on BPI_BattleCommunication_C_OnAPRecovered");
static_assert(sizeof(BPI_BattleCommunication_C_OnAPRecovered) == 0x000008, "Wrong size on BPI_BattleCommunication_C_OnAPRecovered");
static_assert(offsetof(BPI_BattleCommunication_C_OnAPRecovered, Amount) == 0x000000, "Member 'BPI_BattleCommunication_C_OnAPRecovered::Amount' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnAPRecovered, IsFromTurnStart) == 0x000004, "Member 'BPI_BattleCommunication_C_OnAPRecovered::IsFromTurnStart' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnCharacterTurnEnd
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCommunication_C_OnCharacterTurnEnd final
{
public:
	class ABP_jRPG_Character_Battle_Base_C*       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnCharacterTurnEnd) == 0x000008, "Wrong alignment on BPI_BattleCommunication_C_OnCharacterTurnEnd");
static_assert(sizeof(BPI_BattleCommunication_C_OnCharacterTurnEnd) == 0x000008, "Wrong size on BPI_BattleCommunication_C_OnCharacterTurnEnd");
static_assert(offsetof(BPI_BattleCommunication_C_OnCharacterTurnEnd, Character) == 0x000000, "Member 'BPI_BattleCommunication_C_OnCharacterTurnEnd::Character' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnDamageReceived
// 0x0018 (0x0018 - 0x0000)
struct BPI_BattleCommunication_C_OnDamageReceived final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Critical_;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Weakness_;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resistant_;                                        // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   Element;                                           // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageReason                                 Reason;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       DamageCharacterSource;                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnDamageReceived) == 0x000008, "Wrong alignment on BPI_BattleCommunication_C_OnDamageReceived");
static_assert(sizeof(BPI_BattleCommunication_C_OnDamageReceived) == 0x000018, "Wrong size on BPI_BattleCommunication_C_OnDamageReceived");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, Damage) == 0x000000, "Member 'BPI_BattleCommunication_C_OnDamageReceived::Damage' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, Critical_) == 0x000008, "Member 'BPI_BattleCommunication_C_OnDamageReceived::Critical_' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, Weakness_) == 0x000009, "Member 'BPI_BattleCommunication_C_OnDamageReceived::Weakness_' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, Resistant_) == 0x00000A, "Member 'BPI_BattleCommunication_C_OnDamageReceived::Resistant_' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, Element) == 0x00000B, "Member 'BPI_BattleCommunication_C_OnDamageReceived::Element' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, Reason) == 0x00000C, "Member 'BPI_BattleCommunication_C_OnDamageReceived::Reason' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnDamageReceived, DamageCharacterSource) == 0x000010, "Member 'BPI_BattleCommunication_C_OnDamageReceived::DamageCharacterSource' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnDeath
// 0x0001 (0x0001 - 0x0000)
struct BPI_BattleCommunication_C_OnDeath final
{
public:
	bool                                          DeathByCounter;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnDeath) == 0x000001, "Wrong alignment on BPI_BattleCommunication_C_OnDeath");
static_assert(sizeof(BPI_BattleCommunication_C_OnDeath) == 0x000001, "Wrong size on BPI_BattleCommunication_C_OnDeath");
static_assert(offsetof(BPI_BattleCommunication_C_OnDeath, DeathByCounter) == 0x000000, "Member 'BPI_BattleCommunication_C_OnDeath::DeathByCounter' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnHealed
// 0x0020 (0x0020 - 0x0000)
struct BPI_BattleCommunication_C_OnHealed final
{
public:
	double                                        HealAmount;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestoredMP_;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_CharacterBattleStats_C*        SourceCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHealReason                                   Reason;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnHealed) == 0x000008, "Wrong alignment on BPI_BattleCommunication_C_OnHealed");
static_assert(sizeof(BPI_BattleCommunication_C_OnHealed) == 0x000020, "Wrong size on BPI_BattleCommunication_C_OnHealed");
static_assert(offsetof(BPI_BattleCommunication_C_OnHealed, HealAmount) == 0x000000, "Member 'BPI_BattleCommunication_C_OnHealed::HealAmount' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnHealed, RestoredMP_) == 0x000008, "Member 'BPI_BattleCommunication_C_OnHealed::RestoredMP_' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnHealed, SourceCharacter) == 0x000010, "Member 'BPI_BattleCommunication_C_OnHealed::SourceCharacter' has a wrong offset!");
static_assert(offsetof(BPI_BattleCommunication_C_OnHealed, Reason) == 0x000018, "Member 'BPI_BattleCommunication_C_OnHealed::Reason' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnInitiativeReduced
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCommunication_C_OnInitiativeReduced final
{
public:
	double                                        ReductionAmount;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnInitiativeReduced) == 0x000008, "Wrong alignment on BPI_BattleCommunication_C_OnInitiativeReduced");
static_assert(sizeof(BPI_BattleCommunication_C_OnInitiativeReduced) == 0x000008, "Wrong size on BPI_BattleCommunication_C_OnInitiativeReduced");
static_assert(offsetof(BPI_BattleCommunication_C_OnInitiativeReduced, ReductionAmount) == 0x000000, "Member 'BPI_BattleCommunication_C_OnInitiativeReduced::ReductionAmount' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnPowerDebuff
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCommunication_C_OnPowerDebuff final
{
public:
	double                                        Debuff_Power;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnPowerDebuff) == 0x000008, "Wrong alignment on BPI_BattleCommunication_C_OnPowerDebuff");
static_assert(sizeof(BPI_BattleCommunication_C_OnPowerDebuff) == 0x000008, "Wrong size on BPI_BattleCommunication_C_OnPowerDebuff");
static_assert(offsetof(BPI_BattleCommunication_C_OnPowerDebuff, Debuff_Power) == 0x000000, "Member 'BPI_BattleCommunication_C_OnPowerDebuff::Debuff_Power' has a wrong offset!");

// Function BPI_BattleCommunication.BPI_BattleCommunication_C.OnResurrected
// 0x0008 (0x0008 - 0x0000)
struct BPI_BattleCommunication_C_OnResurrected final
{
public:
	double                                        HealAmount;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_BattleCommunication_C_OnResurrected) == 0x000008, "Wrong alignment on BPI_BattleCommunication_C_OnResurrected");
static_assert(sizeof(BPI_BattleCommunication_C_OnResurrected) == 0x000008, "Wrong size on BPI_BattleCommunication_C_OnResurrected");
static_assert(offsetof(BPI_BattleCommunication_C_OnResurrected, HealAmount) == 0x000000, "Member 'BPI_BattleCommunication_C_OnResurrected::HealAmount' has a wrong offset!");

}

