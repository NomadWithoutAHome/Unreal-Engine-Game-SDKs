#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MiniMap_Main

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "S_MinimapLevelIdentifier_structs.hpp"
#include "Engine_structs.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MiniMap_Main.WBP_MiniMap_Main_C
// 0x01E8 (0x0618 - 0x0430)
class UWBP_MiniMap_Main_C final : public UCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_PanLerp;                                      // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWBP_CommonActionBarContainer_C*        CommonActionBarContainer;                          // 0x0440(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       MiniMapImage;                                      // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       PlayerCursor;                                      // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CommonBoundActionButton_C*         WBP_CommonBoundActionButton_Back;                  // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TextualInputActionBinding_C*       WBP_TextualInputActionBinding_CenterOnObjective;   // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TextualInputActionBinding_C*       WBP_TextualInputActionBinding_CenterOnPlayer;      // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TextualInputActionBinding_C*       WBP_TextualInputActionBinding_ZoomIn;              // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TextualInputActionBinding_C*       WBP_TextualInputActionBinding_ZoomOut;             // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           WidgetCanvas;                                      // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	double                                        ZoomMultiplier;                                    // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ZoomScale;                                         // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PanMultiplier;                                     // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MiniMapHeight;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MiniMapWidth;                                      // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MiniMapMID;                                        // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_MiniMapCapture_C*                   MiniMapCaptureActorRef;                            // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PanOffset;                                         // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnBackAction;                                      // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FVector2D                              PlayerWidgetPosition;                              // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MiniMapTextureRatio;                               // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<struct FS_MinimapLevelIdentifier, class UWBP_LevelEntrancePOI_C*> LevelPOIWidgets;          // 0x04F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TSoftObjectPtr<class UMaterialInstance>       SectionsMaskMaterial;                              // 0x0548(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UCanvasRenderTarget2D*                  SectionsRenderTarget;                              // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class UMaterialInstance>       MiniMapMI;                                         // 0x0578(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	double                                        PanLerp;                                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              PanTarget;                                         // 0x05A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InitialZoomScale;                                  // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SD_OnCenterOnPlayer;                               // 0x05C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_OnCenterOnObjective;                            // 0x05D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_OnActivated;                                    // 0x05E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_OnDeactivated;                                  // 0x05F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UAudioComponent*                        ZoomSound;                                         // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsZoomIn;                                          // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x7];                                      // 0x0609(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SectionMaskMID;                                    // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void BP_OnActivated();
	void BP_OnDeactivated();
	bool BP_OnHandleBackAction();
	void Construct();
	void ConvertMapLocationToWidgetLocation(const struct FVector2D& InMapLocation, struct FVector2D* OutWidgetLocation);
	void Destruct();
	void DrawUnlockedSections(TArray<double>& UnlockedSections);
	void ExecuteUbergraph_WBP_MiniMap_Main(int32 EntryPoint);
	void GenerateLevelPOI(const struct FS_MinimapLevelIdentifier& InLevelIdentifier, const struct FVector& InMapLocation);
	void GenerateLevels();
	void GetDisplayedRanged(struct FVector2D* min_0, struct FVector2D* max_0);
	void InpActEvt_IA_UI_MiniMap_CenterOnObjective_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_MiniMap_CenterOnPlayer_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_MiniMap_Pan_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_MiniMap_Zoom_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_MiniMap_Zoom_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_MiniMap_Zoom_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void OnLoaded_2FE305B645036488FFDBA899E61DB293(class UObject* Loaded);
	void OnLoaded_D0B648A44D6C7E78FA99529F0E5C2A00(class UObject* Loaded);
	void OnPanTrigger(const struct FVector2D& InTriggerValue);
	void OnZoomTrigger(double InTriggerValue);
	void PreConstruct(bool IsDesignTime);
	void RefreshQuestObjectives();
	void SetPanLerp(double PanLerp_0);
	void SetPanOffset(const struct FVector2D& InOffset);
	void SetZoomScale(double InZoom, bool IsPanLerp);
	void StartPanLerp(const struct FVector2D& PanTarget_0);
	void UpdatePlayerPosition();
	void UpdatePOIPositions();
	void UpdateWidgetPosition(const struct FVector2D& InWidgetPosition, class UWidget* InWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MiniMap_Main_C">();
	}
	static class UWBP_MiniMap_Main_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MiniMap_Main_C>();
	}
};
static_assert(alignof(UWBP_MiniMap_Main_C) == 0x000008, "Wrong alignment on UWBP_MiniMap_Main_C");
static_assert(sizeof(UWBP_MiniMap_Main_C) == 0x000618, "Wrong size on UWBP_MiniMap_Main_C");
static_assert(offsetof(UWBP_MiniMap_Main_C, UberGraphFrame) == 0x000430, "Member 'UWBP_MiniMap_Main_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, Anim_PanLerp) == 0x000438, "Member 'UWBP_MiniMap_Main_C::Anim_PanLerp' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, CommonActionBarContainer) == 0x000440, "Member 'UWBP_MiniMap_Main_C::CommonActionBarContainer' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapImage) == 0x000448, "Member 'UWBP_MiniMap_Main_C::MiniMapImage' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, PlayerCursor) == 0x000450, "Member 'UWBP_MiniMap_Main_C::PlayerCursor' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, WBP_CommonBoundActionButton_Back) == 0x000458, "Member 'UWBP_MiniMap_Main_C::WBP_CommonBoundActionButton_Back' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, WBP_TextualInputActionBinding_CenterOnObjective) == 0x000460, "Member 'UWBP_MiniMap_Main_C::WBP_TextualInputActionBinding_CenterOnObjective' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, WBP_TextualInputActionBinding_CenterOnPlayer) == 0x000468, "Member 'UWBP_MiniMap_Main_C::WBP_TextualInputActionBinding_CenterOnPlayer' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, WBP_TextualInputActionBinding_ZoomIn) == 0x000470, "Member 'UWBP_MiniMap_Main_C::WBP_TextualInputActionBinding_ZoomIn' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, WBP_TextualInputActionBinding_ZoomOut) == 0x000478, "Member 'UWBP_MiniMap_Main_C::WBP_TextualInputActionBinding_ZoomOut' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, WidgetCanvas) == 0x000480, "Member 'UWBP_MiniMap_Main_C::WidgetCanvas' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, ZoomMultiplier) == 0x000488, "Member 'UWBP_MiniMap_Main_C::ZoomMultiplier' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, ZoomScale) == 0x000490, "Member 'UWBP_MiniMap_Main_C::ZoomScale' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, PanMultiplier) == 0x000498, "Member 'UWBP_MiniMap_Main_C::PanMultiplier' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapHeight) == 0x0004A0, "Member 'UWBP_MiniMap_Main_C::MiniMapHeight' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapWidth) == 0x0004A8, "Member 'UWBP_MiniMap_Main_C::MiniMapWidth' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapMID) == 0x0004B0, "Member 'UWBP_MiniMap_Main_C::MiniMapMID' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapCaptureActorRef) == 0x0004B8, "Member 'UWBP_MiniMap_Main_C::MiniMapCaptureActorRef' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, PanOffset) == 0x0004C0, "Member 'UWBP_MiniMap_Main_C::PanOffset' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, OnBackAction) == 0x0004D0, "Member 'UWBP_MiniMap_Main_C::OnBackAction' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, PlayerWidgetPosition) == 0x0004E0, "Member 'UWBP_MiniMap_Main_C::PlayerWidgetPosition' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapTextureRatio) == 0x0004F0, "Member 'UWBP_MiniMap_Main_C::MiniMapTextureRatio' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, LevelPOIWidgets) == 0x0004F8, "Member 'UWBP_MiniMap_Main_C::LevelPOIWidgets' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SectionsMaskMaterial) == 0x000548, "Member 'UWBP_MiniMap_Main_C::SectionsMaskMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SectionsRenderTarget) == 0x000570, "Member 'UWBP_MiniMap_Main_C::SectionsRenderTarget' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, MiniMapMI) == 0x000578, "Member 'UWBP_MiniMap_Main_C::MiniMapMI' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, PanLerp) == 0x0005A0, "Member 'UWBP_MiniMap_Main_C::PanLerp' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, PanTarget) == 0x0005A8, "Member 'UWBP_MiniMap_Main_C::PanTarget' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, InitialZoomScale) == 0x0005B8, "Member 'UWBP_MiniMap_Main_C::InitialZoomScale' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SD_OnCenterOnPlayer) == 0x0005C0, "Member 'UWBP_MiniMap_Main_C::SD_OnCenterOnPlayer' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SD_OnCenterOnObjective) == 0x0005D0, "Member 'UWBP_MiniMap_Main_C::SD_OnCenterOnObjective' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SD_OnActivated) == 0x0005E0, "Member 'UWBP_MiniMap_Main_C::SD_OnActivated' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SD_OnDeactivated) == 0x0005F0, "Member 'UWBP_MiniMap_Main_C::SD_OnDeactivated' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, ZoomSound) == 0x000600, "Member 'UWBP_MiniMap_Main_C::ZoomSound' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, IsZoomIn) == 0x000608, "Member 'UWBP_MiniMap_Main_C::IsZoomIn' has a wrong offset!");
static_assert(offsetof(UWBP_MiniMap_Main_C, SectionMaskMID) == 0x000610, "Member 'UWBP_MiniMap_Main_C::SectionMaskMID' has a wrong offset!");

}

