#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GroupingPolicy_Base

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C.GetGroupInstances
// 0x0010 (0x0010 - 0x0000)
struct BP_GroupingPolicy_Base_C_GetGroupInstances final
{
public:
	TArray<class UBP_GroupInstance_Base_C*>       ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
};
static_assert(alignof(BP_GroupingPolicy_Base_C_GetGroupInstances) == 0x000008, "Wrong alignment on BP_GroupingPolicy_Base_C_GetGroupInstances");
static_assert(sizeof(BP_GroupingPolicy_Base_C_GetGroupInstances) == 0x000010, "Wrong size on BP_GroupingPolicy_Base_C_GetGroupInstances");
static_assert(offsetof(BP_GroupingPolicy_Base_C_GetGroupInstances, ReturnValue) == 0x000000, "Member 'BP_GroupingPolicy_Base_C_GetGroupInstances::ReturnValue' has a wrong offset!");

// Function BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C.GetPolicyDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BP_GroupingPolicy_Base_C_GetPolicyDisplayName final
{
public:
	class FText                                   PolicyDisplayName_0;                               // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_GroupingPolicy_Base_C_GetPolicyDisplayName) == 0x000008, "Wrong alignment on BP_GroupingPolicy_Base_C_GetPolicyDisplayName");
static_assert(sizeof(BP_GroupingPolicy_Base_C_GetPolicyDisplayName) == 0x000010, "Wrong size on BP_GroupingPolicy_Base_C_GetPolicyDisplayName");
static_assert(offsetof(BP_GroupingPolicy_Base_C_GetPolicyDisplayName, PolicyDisplayName_0) == 0x000000, "Member 'BP_GroupingPolicy_Base_C_GetPolicyDisplayName::PolicyDisplayName_0' has a wrong offset!");

// Function BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C.PopulateGroupsWithObjects
// 0x00B0 (0x00B0 - 0x0000)
struct BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects final
{
public:
	TArray<class UObject*>                        Objects;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GroupInstance_Base_C*               CallFunc_Array_Get_Item_1;                         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CallFunc_Conv_ClassToSoftClassReference_ReturnValue; // 0x0058(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	bool                                          CallFunc_IsChildOfClass_ReturnValue;               // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidClass_ReturnValue;                 // 0x0082(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x0083(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GroupInstance_Base_C*               CallFunc_Array_Get_Item_2;                         // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesObjectMatch_MatchesGroup;             // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects) == 0x000008, "Wrong alignment on BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects");
static_assert(sizeof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects) == 0x0000B0, "Wrong size on BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Objects) == 0x000000, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Objects' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_bool_True_if_break_was_hit_Variable) == 0x000010, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000020, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Not_PreBool_ReturnValue_1) == 0x000021, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_int_Array_Index_Variable_1) == 0x000024, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_int_Array_Index_Variable_2) == 0x000034, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Array_Get_Item) == 0x000038, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Not_PreBool_ReturnValue_2) == 0x000040, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Array_Get_Item_1) == 0x000048, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Array_Length_ReturnValue_1) == 0x000050, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Conv_ClassToSoftClassReference_ReturnValue) == 0x000058, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Conv_ClassToSoftClassReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_IsChildOfClass_ReturnValue) == 0x000080, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_IsChildOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Not_PreBool_ReturnValue_3) == 0x000081, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_IsValidClass_ReturnValue) == 0x000082, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_IsValidClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Not_PreBool_ReturnValue_4) == 0x000083, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_int_Loop_Counter_Variable_1) == 0x000084, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, Temp_int_Loop_Counter_Variable_2) == 0x000088, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Less_IntInt_ReturnValue_1) == 0x00008C, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Add_IntInt_ReturnValue_1) == 0x000090, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Add_IntInt_ReturnValue_2) == 0x000094, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Array_Length_ReturnValue_2) == 0x000098, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Array_Get_Item_2) == 0x0000A0, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000A8, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_BooleanAND_ReturnValue) == 0x0000A9, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects, CallFunc_DoesObjectMatch_MatchesGroup) == 0x0000AA, "Member 'BP_GroupingPolicy_Base_C_PopulateGroupsWithObjects::CallFunc_DoesObjectMatch_MatchesGroup' has a wrong offset!");

// Function BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C.RegisterGroupInstance
// 0x0010 (0x0010 - 0x0000)
struct BP_GroupingPolicy_Base_C_RegisterGroupInstance final
{
public:
	const class UBP_GroupInstance_Base_C*         GroupInstance;                                     // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GroupingPolicy_Base_C_RegisterGroupInstance) == 0x000008, "Wrong alignment on BP_GroupingPolicy_Base_C_RegisterGroupInstance");
static_assert(sizeof(BP_GroupingPolicy_Base_C_RegisterGroupInstance) == 0x000010, "Wrong size on BP_GroupingPolicy_Base_C_RegisterGroupInstance");
static_assert(offsetof(BP_GroupingPolicy_Base_C_RegisterGroupInstance, GroupInstance) == 0x000000, "Member 'BP_GroupingPolicy_Base_C_RegisterGroupInstance::GroupInstance' has a wrong offset!");
static_assert(offsetof(BP_GroupingPolicy_Base_C_RegisterGroupInstance, CallFunc_Array_AddUnique_ReturnValue) == 0x000008, "Member 'BP_GroupingPolicy_Base_C_RegisterGroupInstance::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");

// Function BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C.SetMultiMatchAllowed
// 0x0001 (0x0001 - 0x0000)
struct BP_GroupingPolicy_Base_C_SetMultiMatchAllowed final
{
public:
	bool                                          Allowed;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GroupingPolicy_Base_C_SetMultiMatchAllowed) == 0x000001, "Wrong alignment on BP_GroupingPolicy_Base_C_SetMultiMatchAllowed");
static_assert(sizeof(BP_GroupingPolicy_Base_C_SetMultiMatchAllowed) == 0x000001, "Wrong size on BP_GroupingPolicy_Base_C_SetMultiMatchAllowed");
static_assert(offsetof(BP_GroupingPolicy_Base_C_SetMultiMatchAllowed, Allowed) == 0x000000, "Member 'BP_GroupingPolicy_Base_C_SetMultiMatchAllowed::Allowed' has a wrong offset!");

// Function BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C.SetPolicyDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BP_GroupingPolicy_Base_C_SetPolicyDisplayName final
{
public:
	class FText                                   Value;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(BP_GroupingPolicy_Base_C_SetPolicyDisplayName) == 0x000008, "Wrong alignment on BP_GroupingPolicy_Base_C_SetPolicyDisplayName");
static_assert(sizeof(BP_GroupingPolicy_Base_C_SetPolicyDisplayName) == 0x000010, "Wrong size on BP_GroupingPolicy_Base_C_SetPolicyDisplayName");
static_assert(offsetof(BP_GroupingPolicy_Base_C_SetPolicyDisplayName, Value) == 0x000000, "Member 'BP_GroupingPolicy_Base_C_SetPolicyDisplayName::Value' has a wrong offset!");

}

