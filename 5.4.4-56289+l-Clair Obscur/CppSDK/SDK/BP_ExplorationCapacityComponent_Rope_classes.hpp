#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ExplorationCapacityComponent_Rope

#include "Basic.hpp"

#include "E_RopeMovementStep_structs.hpp"
#include "E_RopeMovementDirection_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ExplorationCapacityComponent_Rope.BP_ExplorationCapacityComponent_Rope_C
// 0x0108 (0x01A8 - 0x00A0)
class UBP_ExplorationCapacityComponent_Rope_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_GPE_Rope_C*                         CurrentRope;                                       // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_RopeMovementDirection                       CurrentDirection;                                  // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_GPE_Rope_C* Rope, E_RopeMovementDirection Direction)> OnRopeMovementBegin; // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_GPE_Rope_C* Rope, E_RopeMovementDirection Direction)> OnRopeMovementEnd; // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        MoveSpeedMax;                                      // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoveAcceleration;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MoveCurve;                                         // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            TransitionMoveCurve;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceToStartExitTransitionTopToBottom;          // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AccumulatedDeltaTime;                              // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ComputedTimeRatio;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetLocation;                                    // 0x0110(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               TargetRotation;                                    // 0x0128(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_RopeMovementStep                            CurrentStep;                                       // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCameraShakeBase>           CameraShakeWhileMoving;                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TSubclassOf<class UCameraShakeBase>           CameraShakeOnStart;                                // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_LinkToRope;                                     // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_InteractionWhileUsingRope;                      // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_PP_DistortionParameterControl_C*    DistortionController;                              // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AudioWhileUsingRope;                               // 0x0170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounterHandle             RopeInputLockBlockerReference;                     // 0x0178(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   AggroLockName;                                     // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentMoveSpeed;                                  // 0x01A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AccumulateDeltaTime(float DeltaSeconds);
	void ComputeCurrentMoveSpeed(double DeltaSeconds);
	void ComputeTimeRatio();
	void ExecuteUbergraph_BP_ExplorationCapacityComponent_Rope(int32 EntryPoint);
	double GetAlphaForEnterTransition();
	void GetCurrentRopeDirection(E_RopeMovementDirection* CurrentDirection_0);
	void GetCurrentRopeStep(E_RopeMovementStep* CurrentStep_0);
	bool IsPerformingMovement();
	void OnEnterTransitionAnimationDone();
	void OnExitTransitionAnimationDone();
	void PlayCameraEffects();
	void PlayForceFeedback();
	void PlayLinkToRopeFX();
	void ReceiveTick(float DeltaSeconds);
	void ResetRuntimeVariables();
	void SetRopeMovementCurrentStep(E_RopeMovementStep step);
	bool ShouldExitMovingAlongRope();
	void StartMovementWithRope(class ABP_GPE_Rope_C* Rope, E_RopeMovementDirection Direction);
	void StartRopeMovement();
	void StopAllEffects();
	void StopRopeMovement();
	void UpdateActorLocation();
	void UpdateActorRotation();
	void UpdateEnterTransition(double DeltaSeconds);
	void UpdateExitTransition(double DeltaSeconds);
	void UpdateMovement(double DeltaSeconds);
	void UpdateMovingAlongRope(double DeltaSeconds);
	void UpdateRopeMovement(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ExplorationCapacityComponent_Rope_C">();
	}
	static class UBP_ExplorationCapacityComponent_Rope_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ExplorationCapacityComponent_Rope_C>();
	}
};
static_assert(alignof(UBP_ExplorationCapacityComponent_Rope_C) == 0x000008, "Wrong alignment on UBP_ExplorationCapacityComponent_Rope_C");
static_assert(sizeof(UBP_ExplorationCapacityComponent_Rope_C) == 0x0001A8, "Wrong size on UBP_ExplorationCapacityComponent_Rope_C");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_ExplorationCapacityComponent_Rope_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, CurrentRope) == 0x0000A8, "Member 'UBP_ExplorationCapacityComponent_Rope_C::CurrentRope' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, CurrentDirection) == 0x0000B0, "Member 'UBP_ExplorationCapacityComponent_Rope_C::CurrentDirection' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, OnRopeMovementBegin) == 0x0000B8, "Member 'UBP_ExplorationCapacityComponent_Rope_C::OnRopeMovementBegin' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, OnRopeMovementEnd) == 0x0000C8, "Member 'UBP_ExplorationCapacityComponent_Rope_C::OnRopeMovementEnd' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, MoveSpeedMax) == 0x0000D8, "Member 'UBP_ExplorationCapacityComponent_Rope_C::MoveSpeedMax' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, MoveAcceleration) == 0x0000E0, "Member 'UBP_ExplorationCapacityComponent_Rope_C::MoveAcceleration' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, MoveCurve) == 0x0000E8, "Member 'UBP_ExplorationCapacityComponent_Rope_C::MoveCurve' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, TransitionMoveCurve) == 0x0000F0, "Member 'UBP_ExplorationCapacityComponent_Rope_C::TransitionMoveCurve' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, DistanceToStartExitTransitionTopToBottom) == 0x0000F8, "Member 'UBP_ExplorationCapacityComponent_Rope_C::DistanceToStartExitTransitionTopToBottom' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, AccumulatedDeltaTime) == 0x000100, "Member 'UBP_ExplorationCapacityComponent_Rope_C::AccumulatedDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, ComputedTimeRatio) == 0x000108, "Member 'UBP_ExplorationCapacityComponent_Rope_C::ComputedTimeRatio' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, TargetLocation) == 0x000110, "Member 'UBP_ExplorationCapacityComponent_Rope_C::TargetLocation' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, TargetRotation) == 0x000128, "Member 'UBP_ExplorationCapacityComponent_Rope_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, CurrentStep) == 0x000140, "Member 'UBP_ExplorationCapacityComponent_Rope_C::CurrentStep' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, CameraShakeWhileMoving) == 0x000148, "Member 'UBP_ExplorationCapacityComponent_Rope_C::CameraShakeWhileMoving' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, CameraShakeOnStart) == 0x000150, "Member 'UBP_ExplorationCapacityComponent_Rope_C::CameraShakeOnStart' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, FX_LinkToRope) == 0x000158, "Member 'UBP_ExplorationCapacityComponent_Rope_C::FX_LinkToRope' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, FX_InteractionWhileUsingRope) == 0x000160, "Member 'UBP_ExplorationCapacityComponent_Rope_C::FX_InteractionWhileUsingRope' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, DistortionController) == 0x000168, "Member 'UBP_ExplorationCapacityComponent_Rope_C::DistortionController' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, AudioWhileUsingRope) == 0x000170, "Member 'UBP_ExplorationCapacityComponent_Rope_C::AudioWhileUsingRope' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, RopeInputLockBlockerReference) == 0x000178, "Member 'UBP_ExplorationCapacityComponent_Rope_C::RopeInputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, AggroLockName) == 0x000198, "Member 'UBP_ExplorationCapacityComponent_Rope_C::AggroLockName' has a wrong offset!");
static_assert(offsetof(UBP_ExplorationCapacityComponent_Rope_C, CurrentMoveSpeed) == 0x0001A0, "Member 'UBP_ExplorationCapacityComponent_Rope_C::CurrentMoveSpeed' has a wrong offset!");

}

