#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayStateTreeModule

#include "Basic.hpp"

#include "StateTreeModule_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// ScriptStruct GameplayStateTreeModule.StateTreeAITaskBase
// 0x0000 (0x0028 - 0x0028)
struct FStateTreeAITaskBase : public FStateTreeTaskBase
{
};
static_assert(alignof(FStateTreeAITaskBase) == 0x000008, "Wrong alignment on FStateTreeAITaskBase");
static_assert(sizeof(FStateTreeAITaskBase) == 0x000028, "Wrong size on FStateTreeAITaskBase");

// ScriptStruct GameplayStateTreeModule.StateTreeAIActionTaskBase
// 0x0000 (0x0028 - 0x0028)
struct FStateTreeAIActionTaskBase : public FStateTreeAITaskBase
{
};
static_assert(alignof(FStateTreeAIActionTaskBase) == 0x000008, "Wrong alignment on FStateTreeAIActionTaskBase");
static_assert(sizeof(FStateTreeAIActionTaskBase) == 0x000028, "Wrong size on FStateTreeAIActionTaskBase");

// ScriptStruct GameplayStateTreeModule.StateTreeMoveToTaskInstanceData
// 0x0058 (0x0058 - 0x0000)
struct FStateTreeMoveToTaskInstanceData final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Destination;                                       // 0x0008(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0020(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptableRadius;                                  // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestinationMoveTolerance;                          // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowStrafe;                                      // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowPartialPath;                                 // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrackMovingGoal;                                  // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireNavigableEndLocation;                      // 0x003B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectGoalLocation;                              // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReachTestIncludesAgentRadius;                     // 0x003D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReachTestIncludesGoalRadius;                      // 0x003E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3F[0x1];                                       // 0x003F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UAITask_MoveTo*                         MoveToTask;                                        // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner;                                   // 0x0048(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStateTreeMoveToTaskInstanceData) == 0x000008, "Wrong alignment on FStateTreeMoveToTaskInstanceData");
static_assert(sizeof(FStateTreeMoveToTaskInstanceData) == 0x000058, "Wrong size on FStateTreeMoveToTaskInstanceData");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, AIController) == 0x000000, "Member 'FStateTreeMoveToTaskInstanceData::AIController' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, Destination) == 0x000008, "Member 'FStateTreeMoveToTaskInstanceData::Destination' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, TargetActor) == 0x000020, "Member 'FStateTreeMoveToTaskInstanceData::TargetActor' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, AcceptableRadius) == 0x000028, "Member 'FStateTreeMoveToTaskInstanceData::AcceptableRadius' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, DestinationMoveTolerance) == 0x00002C, "Member 'FStateTreeMoveToTaskInstanceData::DestinationMoveTolerance' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, FilterClass) == 0x000030, "Member 'FStateTreeMoveToTaskInstanceData::FilterClass' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bAllowStrafe) == 0x000038, "Member 'FStateTreeMoveToTaskInstanceData::bAllowStrafe' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bAllowPartialPath) == 0x000039, "Member 'FStateTreeMoveToTaskInstanceData::bAllowPartialPath' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bTrackMovingGoal) == 0x00003A, "Member 'FStateTreeMoveToTaskInstanceData::bTrackMovingGoal' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bRequireNavigableEndLocation) == 0x00003B, "Member 'FStateTreeMoveToTaskInstanceData::bRequireNavigableEndLocation' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bProjectGoalLocation) == 0x00003C, "Member 'FStateTreeMoveToTaskInstanceData::bProjectGoalLocation' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bReachTestIncludesAgentRadius) == 0x00003D, "Member 'FStateTreeMoveToTaskInstanceData::bReachTestIncludesAgentRadius' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, bReachTestIncludesGoalRadius) == 0x00003E, "Member 'FStateTreeMoveToTaskInstanceData::bReachTestIncludesGoalRadius' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, MoveToTask) == 0x000040, "Member 'FStateTreeMoveToTaskInstanceData::MoveToTask' has a wrong offset!");
static_assert(offsetof(FStateTreeMoveToTaskInstanceData, TaskOwner) == 0x000048, "Member 'FStateTreeMoveToTaskInstanceData::TaskOwner' has a wrong offset!");

// ScriptStruct GameplayStateTreeModule.StateTreeMoveToTask
// 0x0000 (0x0028 - 0x0028)
struct FStateTreeMoveToTask final : public FStateTreeAIActionTaskBase
{
};
static_assert(alignof(FStateTreeMoveToTask) == 0x000008, "Wrong alignment on FStateTreeMoveToTask");
static_assert(sizeof(FStateTreeMoveToTask) == 0x000028, "Wrong size on FStateTreeMoveToTask");

}

