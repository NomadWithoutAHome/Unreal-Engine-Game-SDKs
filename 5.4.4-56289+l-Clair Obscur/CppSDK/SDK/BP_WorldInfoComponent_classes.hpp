#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldInfoComponent

#include "Basic.hpp"

#include "S_EnemyWorldInfoData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_EnemyWorldState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WorldInfoComponent.BP_WorldInfoComponent_C
// 0x0078 (0x0118 - 0x00A0)
class UBP_WorldInfoComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class ABP_jRPG_Enemy_World_Base_Seamless_C*, struct FS_EnemyWorldInfoData> WorldEnemies;    // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        DistanceToClosestEnemy;                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaximumLevelGapToChasePlayer;                      // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_MapTeleportPoint_C*>    WorldTeleportPoints;                               // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void AddAggroLockOnAllEnemies(const class FName& LockName);
	void ComputeDistanceToClosestEnemy();
	void ExecuteUbergraph_BP_WorldInfoComponent(int32 EntryPoint);
	void GetAllAliveEnemies(TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*>* Enemies);
	void GetAllTeleportPoints(TArray<class ABP_jRPG_MapTeleportPoint_C*>* TeleportPoints);
	void GetDistanceToClosestEnemy(double* DistanceToClosestEnemy_0);
	void GetEnemiesWithGlobalObjectID(class FName GlobalObjectID, TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*>* Enemies);
	void GetMaximumLevelGapToChasePlayer(int32* MaximumLevelGapToChasePlayer_0);
	void ReceiveTick(float DeltaSeconds);
	void RegisterTeleportPoint(const class ABP_jRPG_MapTeleportPoint_C*& InTeleportPoint);
	void RegisterWorldEnemy(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy);
	void RemoveAggroLockOnAllEnemies(const class FName& LockName);
	void StopChasingForAllEnemies();
	void UnregisterTeleportPoint(const class ABP_jRPG_MapTeleportPoint_C*& InTeleportPoint);
	void UnregisterWorldEnemy(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy);
	void UpdateWorldEnemyState(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy, E_EnemyWorldState EnemyState);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WorldInfoComponent_C">();
	}
	static class UBP_WorldInfoComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_WorldInfoComponent_C>();
	}
};
static_assert(alignof(UBP_WorldInfoComponent_C) == 0x000008, "Wrong alignment on UBP_WorldInfoComponent_C");
static_assert(sizeof(UBP_WorldInfoComponent_C) == 0x000118, "Wrong size on UBP_WorldInfoComponent_C");
static_assert(offsetof(UBP_WorldInfoComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_WorldInfoComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_WorldInfoComponent_C, WorldEnemies) == 0x0000A8, "Member 'UBP_WorldInfoComponent_C::WorldEnemies' has a wrong offset!");
static_assert(offsetof(UBP_WorldInfoComponent_C, DistanceToClosestEnemy) == 0x0000F8, "Member 'UBP_WorldInfoComponent_C::DistanceToClosestEnemy' has a wrong offset!");
static_assert(offsetof(UBP_WorldInfoComponent_C, MaximumLevelGapToChasePlayer) == 0x000100, "Member 'UBP_WorldInfoComponent_C::MaximumLevelGapToChasePlayer' has a wrong offset!");
static_assert(offsetof(UBP_WorldInfoComponent_C, WorldTeleportPoints) == 0x000108, "Member 'UBP_WorldInfoComponent_C::WorldTeleportPoints' has a wrong offset!");

}

