#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AutoLinkerPlugin

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AutoLinkerPlugin_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// Class AutoLinkerPlugin.ALT_AutoLinker
// 0x00C0 (0x0350 - 0x0290)
class AALT_AutoLinker final : public AActor
{
public:
	bool                                          areLinkSpawned;                                    // 0x0290(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              onLinkSpawned;                                     // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class AALT_NavLink*                           linker;                                            // 0x02A8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AALT_NavLink*                           linkerUp;                                          // 0x02B0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           Timer;                                             // 0x02B8(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWorld*                                 World;                                             // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          isDone;                                            // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavigationSystemV1*                    navSystem;                                         // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         step;                                              // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         entityMaxHeight;                                   // 0x02DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         entityMaxRadius;                                   // 0x02E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         minFallHeight;                                     // 0x02E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         maxFallHeight;                                     // 0x02E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         minJumpHeight;                                     // 0x02EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         maxJumpHeight;                                     // 0x02F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         receptionPointDistFromLedge;                       // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         blockingWallMinHeight;                             // 0x02F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Extent;                                            // 0x0300(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AALT_NavLink>               _navLinkToSpawn;                                   // 0x0318(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      groundLayer;                                       // 0x0320(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          doBridges;                                         // 0x0330(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_331[0x3];                                      // 0x0331(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         bridgesDeltaHeight;                                // 0x0334(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         bridgesMaxLength;                                  // 0x0338(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          canDebug;                                          // 0x033C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        allPoints;                                         // 0x0340(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static struct FVector GetDirection2D(const struct FVector& _start, const struct FVector& _end);

	void ClearLink();
	void GenerateLink();
	void GenerateLinks();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALT_AutoLinker">();
	}
	static class AALT_AutoLinker* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALT_AutoLinker>();
	}
};
static_assert(alignof(AALT_AutoLinker) == 0x000008, "Wrong alignment on AALT_AutoLinker");
static_assert(sizeof(AALT_AutoLinker) == 0x000350, "Wrong size on AALT_AutoLinker");
static_assert(offsetof(AALT_AutoLinker, areLinkSpawned) == 0x000290, "Member 'AALT_AutoLinker::areLinkSpawned' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, onLinkSpawned) == 0x000298, "Member 'AALT_AutoLinker::onLinkSpawned' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, linker) == 0x0002A8, "Member 'AALT_AutoLinker::linker' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, linkerUp) == 0x0002B0, "Member 'AALT_AutoLinker::linkerUp' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, Timer) == 0x0002B8, "Member 'AALT_AutoLinker::Timer' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, World) == 0x0002C0, "Member 'AALT_AutoLinker::World' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, isDone) == 0x0002C8, "Member 'AALT_AutoLinker::isDone' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, navSystem) == 0x0002D0, "Member 'AALT_AutoLinker::navSystem' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, step) == 0x0002D8, "Member 'AALT_AutoLinker::step' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, entityMaxHeight) == 0x0002DC, "Member 'AALT_AutoLinker::entityMaxHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, entityMaxRadius) == 0x0002E0, "Member 'AALT_AutoLinker::entityMaxRadius' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, minFallHeight) == 0x0002E4, "Member 'AALT_AutoLinker::minFallHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, maxFallHeight) == 0x0002E8, "Member 'AALT_AutoLinker::maxFallHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, minJumpHeight) == 0x0002EC, "Member 'AALT_AutoLinker::minJumpHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, maxJumpHeight) == 0x0002F0, "Member 'AALT_AutoLinker::maxJumpHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, receptionPointDistFromLedge) == 0x0002F4, "Member 'AALT_AutoLinker::receptionPointDistFromLedge' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, blockingWallMinHeight) == 0x0002F8, "Member 'AALT_AutoLinker::blockingWallMinHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, Extent) == 0x000300, "Member 'AALT_AutoLinker::Extent' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, _navLinkToSpawn) == 0x000318, "Member 'AALT_AutoLinker::_navLinkToSpawn' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, groundLayer) == 0x000320, "Member 'AALT_AutoLinker::groundLayer' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, doBridges) == 0x000330, "Member 'AALT_AutoLinker::doBridges' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, bridgesDeltaHeight) == 0x000334, "Member 'AALT_AutoLinker::bridgesDeltaHeight' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, bridgesMaxLength) == 0x000338, "Member 'AALT_AutoLinker::bridgesMaxLength' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, canDebug) == 0x00033C, "Member 'AALT_AutoLinker::canDebug' has a wrong offset!");
static_assert(offsetof(AALT_AutoLinker, allPoints) == 0x000340, "Member 'AALT_AutoLinker::allPoints' has a wrong offset!");

// Class AutoLinkerPlugin.ALT_NavLink
// 0x0080 (0x0360 - 0x02E0)
class AALT_NavLink final : public ANavLinkProxy
{
public:
	int32                                         step;                                              // 0x02E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          canGenerateCollider;                               // 0x02E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E5[0x3];                                      // 0x02E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         radiusSphere;                                      // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         capsuleHeightDelta;                                // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         capsuleRefreshRate;                                // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         capsuleDistanceDelta;                              // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         capsuleNormalDelta;                                // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      enemyLayer;                                        // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<EObjectTypeQuery>                      groundLayer;                                       // 0x0310(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FALTColliderPath>               allCollider;                                       // 0x0320(0x0010)(Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FColor                                 DebugColor;                                        // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          canDebug;                                          // 0x0334(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_335[0x3];                                      // 0x0335(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 linkName;                                          // 0x0338(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           detectionTimer;                                    // 0x0348(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class APawn* _hitPawn, const struct FVector& _destination)> onEntityTriggerLink; // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)

public:
	void BuildNav();
	void CheckCollision();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ALT_NavLink">();
	}
	static class AALT_NavLink* GetDefaultObj()
	{
		return GetDefaultObjImpl<AALT_NavLink>();
	}
};
static_assert(alignof(AALT_NavLink) == 0x000008, "Wrong alignment on AALT_NavLink");
static_assert(sizeof(AALT_NavLink) == 0x000360, "Wrong size on AALT_NavLink");
static_assert(offsetof(AALT_NavLink, step) == 0x0002E0, "Member 'AALT_NavLink::step' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, canGenerateCollider) == 0x0002E4, "Member 'AALT_NavLink::canGenerateCollider' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, radiusSphere) == 0x0002E8, "Member 'AALT_NavLink::radiusSphere' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, capsuleHeightDelta) == 0x0002EC, "Member 'AALT_NavLink::capsuleHeightDelta' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, capsuleRefreshRate) == 0x0002F0, "Member 'AALT_NavLink::capsuleRefreshRate' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, capsuleDistanceDelta) == 0x0002F4, "Member 'AALT_NavLink::capsuleDistanceDelta' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, capsuleNormalDelta) == 0x0002F8, "Member 'AALT_NavLink::capsuleNormalDelta' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, enemyLayer) == 0x000300, "Member 'AALT_NavLink::enemyLayer' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, groundLayer) == 0x000310, "Member 'AALT_NavLink::groundLayer' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, allCollider) == 0x000320, "Member 'AALT_NavLink::allCollider' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, DebugColor) == 0x000330, "Member 'AALT_NavLink::DebugColor' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, canDebug) == 0x000334, "Member 'AALT_NavLink::canDebug' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, linkName) == 0x000338, "Member 'AALT_NavLink::linkName' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, detectionTimer) == 0x000348, "Member 'AALT_NavLink::detectionTimer' has a wrong offset!");
static_assert(offsetof(AALT_NavLink, onEntityTriggerLink) == 0x000350, "Member 'AALT_NavLink::onEntityTriggerLink' has a wrong offset!");

}

