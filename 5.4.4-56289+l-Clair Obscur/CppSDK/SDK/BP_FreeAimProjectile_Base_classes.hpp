#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeAimProjectile_Base

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EFreeAimBodyPartType_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FreeAimProjectile_Base.BP_FreeAimProjectile_Base_C
// 0x0068 (0x02F8 - 0x0290)
class ABP_FreeAimProjectile_Base_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UArrowComponent*                        Arrow;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       HitBox;                                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* Character, EFreeAimBodyPartType BodyPart, const struct FHitResult& HitResult, class UBP_FreeAimTargetPart_C* TargetBodyPartBP)> OnBattleCharacterHit; // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class AActor*                                 Caster;                                            // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsConsumed;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x02C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DEBUG_TraceDraw;                                   // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnProjectileShotFinished;                          // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void GetTargetPartFromCollidedComponent(class UPrimitiveComponent* PrimitiveComp, class UBP_FreeAimTargetPart_C** TargetPart);
	void UserConstructionScript();
	void Consume();
	void OnCollision(class UObject* OtherActor, class UPrimitiveComponent* OtherComp, const struct FHitResult& HitResult);
	void TriggerRaycast();
	void Shoot();
	void RequestDestroy();
	void ExecuteUbergraph_BP_FreeAimProjectile_Base(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FreeAimProjectile_Base_C">();
	}
	static class ABP_FreeAimProjectile_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FreeAimProjectile_Base_C>();
	}
};
static_assert(alignof(ABP_FreeAimProjectile_Base_C) == 0x000008, "Wrong alignment on ABP_FreeAimProjectile_Base_C");
static_assert(sizeof(ABP_FreeAimProjectile_Base_C) == 0x0002F8, "Wrong size on ABP_FreeAimProjectile_Base_C");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, UberGraphFrame) == 0x000290, "Member 'ABP_FreeAimProjectile_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, Arrow) == 0x000298, "Member 'ABP_FreeAimProjectile_Base_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, HitBox) == 0x0002A0, "Member 'ABP_FreeAimProjectile_Base_C::HitBox' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, OnBattleCharacterHit) == 0x0002A8, "Member 'ABP_FreeAimProjectile_Base_C::OnBattleCharacterHit' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, Caster) == 0x0002B8, "Member 'ABP_FreeAimProjectile_Base_C::Caster' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, IsConsumed) == 0x0002C0, "Member 'ABP_FreeAimProjectile_Base_C::IsConsumed' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, LastLocation) == 0x0002C8, "Member 'ABP_FreeAimProjectile_Base_C::LastLocation' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, DEBUG_TraceDraw) == 0x0002E0, "Member 'ABP_FreeAimProjectile_Base_C::DEBUG_TraceDraw' has a wrong offset!");
static_assert(offsetof(ABP_FreeAimProjectile_Base_C, OnProjectileShotFinished) == 0x0002E8, "Member 'ABP_FreeAimProjectile_Base_C::OnProjectileShotFinished' has a wrong offset!");

}

