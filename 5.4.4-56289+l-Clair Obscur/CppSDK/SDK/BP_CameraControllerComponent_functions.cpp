#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraControllerComponent

#include "Basic.hpp"

#include "BP_CameraControllerComponent_classes.hpp"
#include "BP_CameraControllerComponent_parameters.hpp"


namespace SDK
{

// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.AddCameraConfigOnFreeAimCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::AddCameraConfigOnFreeAimCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "AddCameraConfigOnFreeAimCamera");

	Params::BP_CameraControllerComponent_C_AddCameraConfigOnFreeAimCamera Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.AddCameraConfigOnMainCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::AddCameraConfigOnMainCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "AddCameraConfigOnMainCamera");

	Params::BP_CameraControllerComponent_C_AddCameraConfigOnMainCamera Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.AddNewCameraConfigOnComponents
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 CameraComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USpringArmComponent*              SpringArmComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const class UBP_DataAsset_CameraConfig_C*&CameraConfig                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::AddNewCameraConfigOnComponents(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, const class UBP_DataAsset_CameraConfig_C*& CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "AddNewCameraConfigOnComponents");

	Params::BP_CameraControllerComponent_C_AddNewCameraConfigOnComponents Parms{};

	Parms.CameraComponent = CameraComponent;
	Parms.SpringArmComponent = SpringArmComponent;
	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.CancelCameraRecenter
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CameraControllerComponent_C::CancelCameraRecenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "CancelCameraRecenter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.CanPerformCameraRecenter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CameraControllerComponent_C::CanPerformCameraRecenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "CanPerformCameraRecenter");

	Params::BP_CameraControllerComponent_C_CanPerformCameraRecenter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.CheckForErrors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CameraControllerComponent_C::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "CheckForErrors");

	Params::BP_CameraControllerComponent_C_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.ComputeCameraShakeScale
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_CameraControllerComponent_C::ComputeCameraShakeScale()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "ComputeCameraShakeScale");

	Params::BP_CameraControllerComponent_C_ComputeCameraShakeScale Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.ComputeDistanceBetweenCameraAndCharacterMesh
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_CameraControllerComponent_C::ComputeDistanceBetweenCameraAndCharacterMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "ComputeDistanceBetweenCameraAndCharacterMesh");

	Params::BP_CameraControllerComponent_C_ComputeDistanceBetweenCameraAndCharacterMesh Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.DebugDrawCameraControllerComponent
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CameraControllerComponent_C::DebugDrawCameraControllerComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "DebugDrawCameraControllerComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.ExecuteUbergraph_BP_CameraControllerComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::ExecuteUbergraph_BP_CameraControllerComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "ExecuteUbergraph_BP_CameraControllerComponent");

	Params::BP_CameraControllerComponent_C_ExecuteUbergraph_BP_CameraControllerComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.FindOrCreateCameraConfigBlender
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 CameraComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USpringArmComponent*              SpringArmComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBP_CameraConfigBlender_C**       CameraConfigBlender                                    (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::FindOrCreateCameraConfigBlender(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, class UBP_CameraConfigBlender_C** CameraConfigBlender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "FindOrCreateCameraConfigBlender");

	Params::BP_CameraControllerComponent_C_FindOrCreateCameraConfigBlender Parms{};

	Parms.CameraComponent = CameraComponent;
	Parms.SpringArmComponent = SpringArmComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraConfigBlender != nullptr)
		*CameraConfigBlender = Parms.CameraConfigBlender;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.GetCameraConfig
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CameraConfig*                 CameraConfig                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::GetCameraConfig(int32 Index_0, struct FS_CameraConfig* CameraConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "GetCameraConfig");

	Params::BP_CameraControllerComponent_C_GetCameraConfig Parms{};

	Parms.Index_0 = Index_0;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraConfig != nullptr)
		*CameraConfig = std::move(Parms.CameraConfig);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.GetOwnerAsCharacterWorld
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_jRPG_Character_World_C**      CharacterWorld                                         (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::GetOwnerAsCharacterWorld(class ABP_jRPG_Character_World_C** CharacterWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "GetOwnerAsCharacterWorld");

	Params::BP_CameraControllerComponent_C_GetOwnerAsCharacterWorld Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CharacterWorld != nullptr)
		*CharacterWorld = Parms.CharacterWorld;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.IsPerformingCameraRecenter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CameraControllerComponent_C::IsPerformingCameraRecenter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "IsPerformingCameraRecenter");

	Params::BP_CameraControllerComponent_C_IsPerformingCameraRecenter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_CameraControllerComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "ReceiveTick");

	Params::BP_CameraControllerComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.RemoveCameraConfigOnComponents
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 CameraComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USpringArmComponent*              SpringArmComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const class UBP_DataAsset_CameraConfig_C*&CameraConfig                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::RemoveCameraConfigOnComponents(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, const class UBP_DataAsset_CameraConfig_C*& CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "RemoveCameraConfigOnComponents");

	Params::BP_CameraControllerComponent_C_RemoveCameraConfigOnComponents Parms{};

	Parms.CameraComponent = CameraComponent;
	Parms.SpringArmComponent = SpringArmComponent;
	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.RemoveCameraConfigOnFreeAimCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::RemoveCameraConfigOnFreeAimCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "RemoveCameraConfigOnFreeAimCamera");

	Params::BP_CameraControllerComponent_C_RemoveCameraConfigOnFreeAimCamera Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.RemoveCameraConfigOnMainCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::RemoveCameraConfigOnMainCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "RemoveCameraConfigOnMainCamera");

	Params::BP_CameraControllerComponent_C_RemoveCameraConfigOnMainCamera Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.RequestCameraRecenter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CameraRecenterRequest&        CameraRecenterRequest_0                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::RequestCameraRecenter(struct FS_CameraRecenterRequest& CameraRecenterRequest_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "RequestCameraRecenter");

	Params::BP_CameraControllerComponent_C_RequestCameraRecenter Parms{};

	Parms.CameraRecenterRequest_0 = std::move(CameraRecenterRequest_0);

	UObject::ProcessEvent(Func, &Parms);

	CameraRecenterRequest_0 = std::move(Parms.CameraRecenterRequest_0);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetFocusDistance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FocusDistance                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::SetFocusDistance(float FocusDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetFocusDistance");

	Params::BP_CameraControllerComponent_C_SetFocusDistance Parms{};

	Parms.FocusDistance = FocusDistance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetFocusDistanceWithComponent
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  ComponentToFocus                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::SetFocusDistanceWithComponent(class USceneComponent* ComponentToFocus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetFocusDistanceWithComponent");

	Params::BP_CameraControllerComponent_C_SetFocusDistanceWithComponent Parms{};

	Parms.ComponentToFocus = ComponentToFocus;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetGameplayPaused
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Paused                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::SetGameplayPaused(bool Paused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetGameplayPaused");

	Params::BP_CameraControllerComponent_C_SetGameplayPaused Parms{};

	Parms.Paused = Paused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetupCameraConfigOnComponents
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UCameraComponent*                 CameraComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USpringArmComponent*              SpringArmComponent                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const class UBP_DataAsset_CameraConfig_C*&CameraConfig                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::SetupCameraConfigOnComponents(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, const class UBP_DataAsset_CameraConfig_C*& CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetupCameraConfigOnComponents");

	Params::BP_CameraControllerComponent_C_SetupCameraConfigOnComponents Parms{};

	Parms.CameraComponent = CameraComponent;
	Parms.SpringArmComponent = SpringArmComponent;
	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetupCameraConfigOnFreeAimCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::SetupCameraConfigOnFreeAimCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetupCameraConfigOnFreeAimCamera");

	Params::BP_CameraControllerComponent_C_SetupCameraConfigOnFreeAimCamera Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetupCameraConfigOnMainCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::SetupCameraConfigOnMainCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetupCameraConfigOnMainCamera");

	Params::BP_CameraControllerComponent_C_SetupCameraConfigOnMainCamera Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.SetupCameraConfigs
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UBP_DataAsset_CameraConfig_C*     FreeAimCameraConfig                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraControllerComponent_C::SetupCameraConfigs(class UBP_DataAsset_CameraConfig_C* CameraConfig, class UBP_DataAsset_CameraConfig_C* FreeAimCameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "SetupCameraConfigs");

	Params::BP_CameraControllerComponent_C_SetupCameraConfigs Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.FreeAimCameraConfig = FreeAimCameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.ShouldEnableCameraShake
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CameraControllerComponent_C::ShouldEnableCameraShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "ShouldEnableCameraShake");

	Params::BP_CameraControllerComponent_C_ShouldEnableCameraShake Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.StopAllCameraShakes
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CameraControllerComponent_C::StopAllCameraShakes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "StopAllCameraShakes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.UpdateCameraConfigBlenders
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::UpdateCameraConfigBlenders(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "UpdateCameraConfigBlenders");

	Params::BP_CameraControllerComponent_C_UpdateCameraConfigBlenders Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.UpdateCameraRecenter
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::UpdateCameraRecenter(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "UpdateCameraRecenter");

	Params::BP_CameraControllerComponent_C_UpdateCameraRecenter Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.UpdateCameraShake
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::UpdateCameraShake(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "UpdateCameraShake");

	Params::BP_CameraControllerComponent_C_UpdateCameraShake Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraControllerComponent.BP_CameraControllerComponent_C.UpdateDynamicCameraFocusDistance
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraControllerComponent_C::UpdateDynamicCameraFocusDistance(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraControllerComponent_C", "UpdateDynamicCameraFocusDistance");

	Params::BP_CameraControllerComponent_C_UpdateDynamicCameraFocusDistance Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

