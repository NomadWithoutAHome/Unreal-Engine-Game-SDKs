#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleLinesModel_Base

#include "Basic.hpp"

#include "S_BattleLinePool_structs.hpp"
#include "S_BattleLineEventPerCharacter_structs.hpp"
#include "ECharacterTeamSelector_structs.hpp"
#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleLinesModel_Base.BP_BattleLinesModel_Base_C
// 0x0498 (0x04C0 - 0x0028)
class UBP_BattleLinesModel_Base_C final : public UExtendedObject
{
public:
	struct FS_BattleLinePool                      TurnStart_LowLife;                                 // 0x0028(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_BattleLinePool                      TurnStart_FullAP;                                  // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash)
	struct FS_BattleLinePool                      TurnStart_Normal;                                  // 0x0058(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_BattleLinePool                      TurnStart_FullOvercharge;                          // 0x0070(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      FreeAim_Active;                                    // 0x0088(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      FreeAim_HitWeakspot;                               // 0x00A0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      KillsEnemy;                                        // 0x00B8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      SelfTargetedByEnemy;                               // 0x00D0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLineEventPerCharacter         AllyTargetedByEnemy;                               // 0x00E8(0x0068)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FS_BattleLinePool                      EnemyPowerfullAttackIncoming;                      // 0x0150(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      EnemyBlocks;                                       // 0x0168(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      ReceiveBuff_Self;                                  // 0x0180(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      HealsSelf;                                         // 0x0198(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLineEventPerCharacter         Thanks_SpecificAlly;                               // 0x01B0(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      UseItem;                                           // 0x0218(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      InsufficientItems;                                 // 0x0230(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      InsufficientAP;                                    // 0x0248(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      FailQTE;                                           // 0x0260(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLineEventPerCharacter         HealsOtherAlly;                                    // 0x0278(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      RevivedByAlly;                                     // 0x02E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      RevivingOtherAlly;                                 // 0x02F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLineEventPerCharacter         OtherAllyHealedByOther;                            // 0x0310(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLineEventPerCharacter         Death_OtherAlly;                                   // 0x0378(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      Death_AnyAlly;                                     // 0x03E0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, HasGetValueTypeHash)
	struct FS_BattleLinePool                      Dodge;                                             // 0x03F8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      Counter;                                           // 0x0410(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      GradientCounter;                                   // 0x0428(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      BattleWon;                                         // 0x0440(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      CurseWords;                                        // 0x0458(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UAC_jRPG_CharacterBattleStats_C*        OwnerCharacterStats;                               // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<struct FS_BattleLinePool>              CurrentValidPools;                                 // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	bool                                          IsGathering;                                       // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_BattleLinePool                      CounterEnemy;                                      // 0x0490(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FS_BattleLinePool                      GradientCounterEnemy;                              // 0x04A8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void AddCharacterSpecificPoolToRool(const struct FS_BattleLineEventPerCharacter& BattleLinePool, class UAC_jRPG_CharacterBattleStats_C* CharacterStats);
	void AddPoolToRoll(const struct FS_BattleLinePool& BattleLinePool, double ProbabilityFactor);
	void AppendPools();
	void BeginGatherPools();
	void EndGatherPools(TArray<struct FS_BattleLinePoolCandidate>* PoolCandidates);
	TArray<struct FS_BattleLinePool> GetGatheredPoolCandidates();
	void GetOwnerCharacterStats(class UAC_jRPG_CharacterBattleStats_C** OwnerCharacterStats_0);
	void GetSettings(class UBP_BattleLineSettings_C** Settings);
	void Match_DeathOtherChar(class UBP_BattleLineGatherer_C* Gatherer, class UBP_BattleDamages_C* LethalDamages);
	void Match_HealEvent(class UBP_BattleLineGatherer_C* BattleLineGatherer, class UBP_BattleHeal_C* HealEvent);
	void Match_RevivedByAlly(class UBP_BattleLineGatherer_C* Gatherer, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter);
	void Match_RevivingAlly(class UBP_BattleLineGatherer_C* Gatherer, class UAC_jRPG_CharacterBattleStats_C* RevivedCharacter);
	void Match_TargetAcquired(class UBP_BattleLineGatherer_C* Gatherer, class UAC_jRPG_CharacterBattleStats_C* AcquiringCharacter, class UAC_jRPG_CharacterBattleStats_C* AcquiredCharacter);
	void Match_TurnStartSelf(class UBP_BattleLineGatherer_C* Gatherer);
	void Match_TurnStartSelf_OLD();
	void MatchDamageReceivedByAll(class UBP_BattleDamages_C* DamageObject, struct FS_BattleLinePool* MatchingBattleLinePool);
	void ModifyPoolProbability(const struct FS_BattleLinePool& InPool, double ProbabilityFactor, struct FS_BattleLinePool* OutPool);
	void TryRegisterEvent_OLD(const struct FS_BattleLinePool& Event, bool* Rolled);
	void TryRegisterPool(class UBP_BattleLineGatherer_C* Event, const struct FS_BattleLinePool& Pool, double ChancePercent, bool* Rolled);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleLinesModel_Base_C">();
	}
	static class UBP_BattleLinesModel_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattleLinesModel_Base_C>();
	}
};
static_assert(alignof(UBP_BattleLinesModel_Base_C) == 0x000008, "Wrong alignment on UBP_BattleLinesModel_Base_C");
static_assert(sizeof(UBP_BattleLinesModel_Base_C) == 0x0004C0, "Wrong size on UBP_BattleLinesModel_Base_C");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, TurnStart_LowLife) == 0x000028, "Member 'UBP_BattleLinesModel_Base_C::TurnStart_LowLife' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, TurnStart_FullAP) == 0x000040, "Member 'UBP_BattleLinesModel_Base_C::TurnStart_FullAP' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, TurnStart_Normal) == 0x000058, "Member 'UBP_BattleLinesModel_Base_C::TurnStart_Normal' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, TurnStart_FullOvercharge) == 0x000070, "Member 'UBP_BattleLinesModel_Base_C::TurnStart_FullOvercharge' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, FreeAim_Active) == 0x000088, "Member 'UBP_BattleLinesModel_Base_C::FreeAim_Active' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, FreeAim_HitWeakspot) == 0x0000A0, "Member 'UBP_BattleLinesModel_Base_C::FreeAim_HitWeakspot' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, KillsEnemy) == 0x0000B8, "Member 'UBP_BattleLinesModel_Base_C::KillsEnemy' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, SelfTargetedByEnemy) == 0x0000D0, "Member 'UBP_BattleLinesModel_Base_C::SelfTargetedByEnemy' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, AllyTargetedByEnemy) == 0x0000E8, "Member 'UBP_BattleLinesModel_Base_C::AllyTargetedByEnemy' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, EnemyPowerfullAttackIncoming) == 0x000150, "Member 'UBP_BattleLinesModel_Base_C::EnemyPowerfullAttackIncoming' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, EnemyBlocks) == 0x000168, "Member 'UBP_BattleLinesModel_Base_C::EnemyBlocks' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, ReceiveBuff_Self) == 0x000180, "Member 'UBP_BattleLinesModel_Base_C::ReceiveBuff_Self' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, HealsSelf) == 0x000198, "Member 'UBP_BattleLinesModel_Base_C::HealsSelf' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, Thanks_SpecificAlly) == 0x0001B0, "Member 'UBP_BattleLinesModel_Base_C::Thanks_SpecificAlly' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, UseItem) == 0x000218, "Member 'UBP_BattleLinesModel_Base_C::UseItem' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, InsufficientItems) == 0x000230, "Member 'UBP_BattleLinesModel_Base_C::InsufficientItems' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, InsufficientAP) == 0x000248, "Member 'UBP_BattleLinesModel_Base_C::InsufficientAP' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, FailQTE) == 0x000260, "Member 'UBP_BattleLinesModel_Base_C::FailQTE' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, HealsOtherAlly) == 0x000278, "Member 'UBP_BattleLinesModel_Base_C::HealsOtherAlly' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, RevivedByAlly) == 0x0002E0, "Member 'UBP_BattleLinesModel_Base_C::RevivedByAlly' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, RevivingOtherAlly) == 0x0002F8, "Member 'UBP_BattleLinesModel_Base_C::RevivingOtherAlly' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, OtherAllyHealedByOther) == 0x000310, "Member 'UBP_BattleLinesModel_Base_C::OtherAllyHealedByOther' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, Death_OtherAlly) == 0x000378, "Member 'UBP_BattleLinesModel_Base_C::Death_OtherAlly' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, Death_AnyAlly) == 0x0003E0, "Member 'UBP_BattleLinesModel_Base_C::Death_AnyAlly' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, Dodge) == 0x0003F8, "Member 'UBP_BattleLinesModel_Base_C::Dodge' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, Counter) == 0x000410, "Member 'UBP_BattleLinesModel_Base_C::Counter' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, GradientCounter) == 0x000428, "Member 'UBP_BattleLinesModel_Base_C::GradientCounter' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, BattleWon) == 0x000440, "Member 'UBP_BattleLinesModel_Base_C::BattleWon' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, CurseWords) == 0x000458, "Member 'UBP_BattleLinesModel_Base_C::CurseWords' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, OwnerCharacterStats) == 0x000470, "Member 'UBP_BattleLinesModel_Base_C::OwnerCharacterStats' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, CurrentValidPools) == 0x000478, "Member 'UBP_BattleLinesModel_Base_C::CurrentValidPools' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, IsGathering) == 0x000488, "Member 'UBP_BattleLinesModel_Base_C::IsGathering' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, CounterEnemy) == 0x000490, "Member 'UBP_BattleLinesModel_Base_C::CounterEnemy' has a wrong offset!");
static_assert(offsetof(UBP_BattleLinesModel_Base_C, GradientCounterEnemy) == 0x0004A8, "Member 'UBP_BattleLinesModel_Base_C::GradientCounterEnemy' has a wrong offset!");

}

