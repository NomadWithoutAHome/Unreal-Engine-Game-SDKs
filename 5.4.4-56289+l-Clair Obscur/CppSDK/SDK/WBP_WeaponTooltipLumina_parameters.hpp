#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WeaponTooltipLumina

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "FPassiveEffect_structs.hpp"
#include "EWeaponQuality_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_WeaponTooltipLumina.WBP_WeaponTooltipLumina_C.LoadPassiveEffectData
// 0x00F0 (0x00F0 - 0x0000)
struct WBP_WeaponTooltipLumina_C_LoadPassiveEffectData final
{
public:
	struct FFPassiveEffect                        PassiveEffectDefiniton;                            // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	EWeaponQuality                                QualityLevel;                                      // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocked;                                          // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x2];                                       // 0x004A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UnlockLevel;                                       // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetCurrentLanguage_ReturnValue;           // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue;            // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StrStr_ReturnValue_1;          // 0x006A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x006B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0080(0x0060)(HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData) == 0x000008, "Wrong alignment on WBP_WeaponTooltipLumina_C_LoadPassiveEffectData");
static_assert(sizeof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData) == 0x0000F0, "Wrong size on WBP_WeaponTooltipLumina_C_LoadPassiveEffectData");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, PassiveEffectDefiniton) == 0x000000, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::PassiveEffectDefiniton' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, QualityLevel) == 0x000048, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::QualityLevel' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, IsLocked) == 0x000049, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::IsLocked' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, UnlockLevel) == 0x00004C, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::UnlockLevel' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, Temp_byte_Variable) == 0x000050, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, CallFunc_GetCurrentLanguage_ReturnValue) == 0x000058, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::CallFunc_GetCurrentLanguage_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, Temp_byte_Variable_1) == 0x000068, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, CallFunc_EqualEqual_StrStr_ReturnValue) == 0x000069, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::CallFunc_EqualEqual_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, CallFunc_EqualEqual_StrStr_ReturnValue_1) == 0x00006A, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::CallFunc_EqualEqual_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, CallFunc_BooleanOR_ReturnValue) == 0x00006B, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, Temp_bool_Variable) == 0x00006C, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, Temp_bool_Variable_1) == 0x00006D, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, K2Node_Select_Default) == 0x00006E, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000070, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, K2Node_Select_Default_1) == 0x000078, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, K2Node_MakeStruct_SlateFontInfo) == 0x000080, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x0000E0, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_WeaponTooltipLumina_C_LoadPassiveEffectData, K2Node_Select_Option_1_ImplicitCast) == 0x0000E8, "Member 'WBP_WeaponTooltipLumina_C_LoadPassiveEffectData::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");

}

