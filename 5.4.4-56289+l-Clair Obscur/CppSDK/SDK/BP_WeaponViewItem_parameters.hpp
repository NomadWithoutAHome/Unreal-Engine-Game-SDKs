#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponViewItem

#include "Basic.hpp"

#include "S_ItemQuantity_structs.hpp"
#include "FEquipmentSlot_structs.hpp"
#include "S_jRPG_Item_DynamicData_structs.hpp"


namespace SDK::Params
{

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.Can be Upgraded
// 0x0030 (0x0030 - 0x0000)
struct BP_WeaponViewItem_C_Can_be_Upgraded final
{
public:
	class UAC_jRPG_InventoryManager_C*            InventoryManager;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxUpgradeLevel;                                   // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ItemInstance_Gear_Weapon_C*         CallFunc_GetGearWeaponInstance_Gear_Weapon_Instance_; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_ItemQuantity>                CallFunc_GetItemInstanceUpgradeCost_ItemQuantities; // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_GetCurrentLevel_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanAffordItemCosts_ReturnValue;           // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x002E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_Can_be_Upgraded) == 0x000008, "Wrong alignment on BP_WeaponViewItem_C_Can_be_Upgraded");
static_assert(sizeof(BP_WeaponViewItem_C_Can_be_Upgraded) == 0x000030, "Wrong size on BP_WeaponViewItem_C_Can_be_Upgraded");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, InventoryManager) == 0x000000, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::InventoryManager' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, MaxUpgradeLevel) == 0x000008, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::MaxUpgradeLevel' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, ReturnValue) == 0x00000C, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, CallFunc_GetGearWeaponInstance_Gear_Weapon_Instance_) == 0x000010, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::CallFunc_GetGearWeaponInstance_Gear_Weapon_Instance_' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, CallFunc_GetItemInstanceUpgradeCost_ItemQuantities) == 0x000018, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::CallFunc_GetItemInstanceUpgradeCost_ItemQuantities' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, CallFunc_GetCurrentLevel_ReturnValue) == 0x000028, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::CallFunc_GetCurrentLevel_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, CallFunc_CanAffordItemCosts_ReturnValue) == 0x00002C, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::CallFunc_CanAffordItemCosts_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, CallFunc_Less_IntInt_ReturnValue) == 0x00002D, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_Can_be_Upgraded, CallFunc_BooleanAND_ReturnValue) == 0x00002E, "Member 'BP_WeaponViewItem_C_Can_be_Upgraded::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.GetGearWeaponInstance
// 0x0020 (0x0020 - 0x0000)
struct BP_WeaponViewItem_C_GetGearWeaponInstance final
{
public:
	class UBP_ItemInstance_Gear_Weapon_C*         Gear_Weapon_Instance_;                             // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemInstance_Base_C*                CallFunc_FindItemInstanceByID_ItemInstance;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemInstance_Gear_Weapon_C*         K2Node_DynamicCast_AsBP_Item_Instance_Gear_Weapon; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_GetGearWeaponInstance) == 0x000008, "Wrong alignment on BP_WeaponViewItem_C_GetGearWeaponInstance");
static_assert(sizeof(BP_WeaponViewItem_C_GetGearWeaponInstance) == 0x000020, "Wrong size on BP_WeaponViewItem_C_GetGearWeaponInstance");
static_assert(offsetof(BP_WeaponViewItem_C_GetGearWeaponInstance, Gear_Weapon_Instance_) == 0x000000, "Member 'BP_WeaponViewItem_C_GetGearWeaponInstance::Gear_Weapon_Instance_' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_GetGearWeaponInstance, CallFunc_FindItemInstanceByID_ItemInstance) == 0x000008, "Member 'BP_WeaponViewItem_C_GetGearWeaponInstance::CallFunc_FindItemInstanceByID_ItemInstance' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_GetGearWeaponInstance, K2Node_DynamicCast_AsBP_Item_Instance_Gear_Weapon) == 0x000010, "Member 'BP_WeaponViewItem_C_GetGearWeaponInstance::K2Node_DynamicCast_AsBP_Item_Instance_Gear_Weapon' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_GetGearWeaponInstance, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_WeaponViewItem_C_GetGearWeaponInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.GetItemDynamicData
// 0x0138 (0x0138 - 0x0000)
struct BP_WeaponViewItem_C_GetItemDynamicData final
{
public:
	struct FS_jRPG_Item_DynamicData               ItemDynamicData_0;                                 // 0x0000(0x0138)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_GetItemDynamicData) == 0x000008, "Wrong alignment on BP_WeaponViewItem_C_GetItemDynamicData");
static_assert(sizeof(BP_WeaponViewItem_C_GetItemDynamicData) == 0x000138, "Wrong size on BP_WeaponViewItem_C_GetItemDynamicData");
static_assert(offsetof(BP_WeaponViewItem_C_GetItemDynamicData, ItemDynamicData_0) == 0x000000, "Member 'BP_WeaponViewItem_C_GetItemDynamicData::ItemDynamicData_0' has a wrong offset!");

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.GetOwnerData
// 0x0008 (0x0008 - 0x0000)
struct BP_WeaponViewItem_C_GetOwnerData final
{
public:
	class UBP_CharacterData_C*                    OwnerData;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_GetOwnerData) == 0x000008, "Wrong alignment on BP_WeaponViewItem_C_GetOwnerData");
static_assert(sizeof(BP_WeaponViewItem_C_GetOwnerData) == 0x000008, "Wrong size on BP_WeaponViewItem_C_GetOwnerData");
static_assert(offsetof(BP_WeaponViewItem_C_GetOwnerData, OwnerData) == 0x000000, "Member 'BP_WeaponViewItem_C_GetOwnerData::OwnerData' has a wrong offset!");

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.IsBeingUpgraded
// 0x0001 (0x0001 - 0x0000)
struct BP_WeaponViewItem_C_IsBeingUpgraded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_IsBeingUpgraded) == 0x000001, "Wrong alignment on BP_WeaponViewItem_C_IsBeingUpgraded");
static_assert(sizeof(BP_WeaponViewItem_C_IsBeingUpgraded) == 0x000001, "Wrong size on BP_WeaponViewItem_C_IsBeingUpgraded");
static_assert(offsetof(BP_WeaponViewItem_C_IsBeingUpgraded, ReturnValue) == 0x000000, "Member 'BP_WeaponViewItem_C_IsBeingUpgraded::ReturnValue' has a wrong offset!");

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.TriggerIsBeingUpgradedChanged
// 0x0001 (0x0001 - 0x0000)
struct BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged final
{
public:
	bool                                          bIsBeingUpgraded_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged) == 0x000001, "Wrong alignment on BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged");
static_assert(sizeof(BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged) == 0x000001, "Wrong size on BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged");
static_assert(offsetof(BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged, bIsBeingUpgraded_0) == 0x000000, "Member 'BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged::bIsBeingUpgraded_0' has a wrong offset!");

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.TriggerWeaponEquippedChanged
// 0x0018 (0x0018 - 0x0000)
struct BP_WeaponViewItem_C_TriggerWeaponEquippedChanged final
{
public:
	class UBP_CharacterData_C*                    CallFunc_GetOwnerData_OwnerData;                   // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasItemEquipped_IsEquipped;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEquipmentSlot                        CallFunc_HasItemEquipped_Slot;                     // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WeaponViewItem_C_TriggerWeaponEquippedChanged) == 0x000008, "Wrong alignment on BP_WeaponViewItem_C_TriggerWeaponEquippedChanged");
static_assert(sizeof(BP_WeaponViewItem_C_TriggerWeaponEquippedChanged) == 0x000018, "Wrong size on BP_WeaponViewItem_C_TriggerWeaponEquippedChanged");
static_assert(offsetof(BP_WeaponViewItem_C_TriggerWeaponEquippedChanged, CallFunc_GetOwnerData_OwnerData) == 0x000000, "Member 'BP_WeaponViewItem_C_TriggerWeaponEquippedChanged::CallFunc_GetOwnerData_OwnerData' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_TriggerWeaponEquippedChanged, CallFunc_HasItemEquipped_IsEquipped) == 0x000008, "Member 'BP_WeaponViewItem_C_TriggerWeaponEquippedChanged::CallFunc_HasItemEquipped_IsEquipped' has a wrong offset!");
static_assert(offsetof(BP_WeaponViewItem_C_TriggerWeaponEquippedChanged, CallFunc_HasItemEquipped_Slot) == 0x00000C, "Member 'BP_WeaponViewItem_C_TriggerWeaponEquippedChanged::CallFunc_HasItemEquipped_Slot' has a wrong offset!");

}

