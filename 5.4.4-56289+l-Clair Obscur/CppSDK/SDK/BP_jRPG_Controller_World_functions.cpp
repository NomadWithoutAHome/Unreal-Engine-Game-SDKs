#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Controller_World

#include "Basic.hpp"

#include "BP_jRPG_Controller_World_classes.hpp"
#include "BP_jRPG_Controller_World_parameters.hpp"


namespace SDK
{

// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.AddCameraOverrideRequest
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_CameraOverrideParameters&CameraOverrideParameters                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::AddCameraOverrideRequest(const struct FS_CameraOverrideParameters& CameraOverrideParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "AddCameraOverrideRequest");

	Params::BP_jRPG_Controller_World_C_AddCameraOverrideRequest Parms{};

	Parms.CameraOverrideParameters = std::move(CameraOverrideParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ApplyUserSettings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ApplyUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ApplyUserSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.AxisInputThreshold
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::AxisInputThreshold(double AxisValue, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "AxisInputThreshold");

	Params::BP_jRPG_Controller_World_C_AxisInputThreshold Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.BackToTitleMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::BackToTitleMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "BackToTitleMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.BndEvt__BP_jRPG_Controller_World_BP_DialogueSystemComponent_K2Node_ComponentBoundEvent_0_OnDialogueFinished__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ABP_Dialogue_C*                   Dialogue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::BndEvt__BP_jRPG_Controller_World_BP_DialogueSystemComponent_K2Node_ComponentBoundEvent_0_OnDialogueFinished__DelegateSignature(class ABP_Dialogue_C* Dialogue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "BndEvt__BP_jRPG_Controller_World_BP_DialogueSystemComponent_K2Node_ComponentBoundEvent_0_OnDialogueFinished__DelegateSignature");

	Params::BP_jRPG_Controller_World_C_BndEvt__BP_jRPG_Controller_World_BP_DialogueSystemComponent_K2Node_ComponentBoundEvent_0_OnDialogueFinished__DelegateSignature Parms{};

	Parms.Dialogue = Dialogue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CanOpenGameMenu
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::CanOpenGameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CanOpenGameMenu");

	Params::BP_jRPG_Controller_World_C_CanOpenGameMenu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CanOpenPauseMenu
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::CanOpenPauseMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CanOpenPauseMenu");

	Params::BP_jRPG_Controller_World_C_CanOpenPauseMenu Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CanOpenTeamOverlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::CanOpenTeamOverlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CanOpenTeamOverlay");

	Params::BP_jRPG_Controller_World_C_CanOpenTeamOverlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CanReceiveExplorationDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::CanReceiveExplorationDamage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CanReceiveExplorationDamage");

	Params::BP_jRPG_Controller_World_C_CanReceiveExplorationDamage Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CanStartBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::CanStartBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CanStartBattle");

	Params::BP_jRPG_Controller_World_C_CanStartBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CleanAndQuit
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::CleanAndQuit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CleanAndQuit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CleanBattleManagers
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::CleanBattleManagers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CleanBattleManagers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CloseDocumentActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::CloseDocumentActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CloseDocumentActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CloseSavePointMenu
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFromGameplay                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::CloseSavePointMenu(bool IsFromGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CloseSavePointMenu");

	Params::BP_jRPG_Controller_World_C_CloseSavePointMenu Parms{};

	Parms.IsFromGameplay = IsFromGameplay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CompareCameraOverrideParametersByPriority
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_CameraOverrideParameters&A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FS_CameraOverrideParameters&B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UOrderingResult*                  OrderingResult                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::CompareCameraOverrideParametersByPriority(const struct FS_CameraOverrideParameters& A, const struct FS_CameraOverrideParameters& B, class UOrderingResult* OrderingResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CompareCameraOverrideParametersByPriority");

	Params::BP_jRPG_Controller_World_C_CompareCameraOverrideParametersByPriority Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.OrderingResult = OrderingResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CreateDynamicCameraManager
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::CreateDynamicCameraManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CreateDynamicCameraManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.CreateWidgets
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::CreateWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "CreateWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_ApplyCharacterDebugSaveOverrides
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFDebugSaveGame&           InputPin                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// struct FFDebugSaveGame*                 OutputPin                                              (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_ApplyCharacterDebugSaveOverrides(const struct FFDebugSaveGame& InputPin, struct FFDebugSaveGame* OutputPin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_ApplyCharacterDebugSaveOverrides");

	Params::BP_jRPG_Controller_World_C_DEBUG_ApplyCharacterDebugSaveOverrides Parms{};

	Parms.InputPin = std::move(InputPin);

	UObject::ProcessEvent(Func, &Parms);

	if (OutputPin != nullptr)
		*OutputPin = std::move(Parms.OutputPin);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_DebugCustomPause
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_DebugCustomPause(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_DebugCustomPause");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_DebugCustomPause Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_DiegeticQTE
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_DiegeticQTE(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_DiegeticQTE");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_DiegeticQTE Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_EnableAutoSave
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_EnableAutoSave(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_EnableAutoSave");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_EnableAutoSave Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_GivePictosOnBoot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_GivePictosOnBoot(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_GivePictosOnBoot");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_GivePictosOnBoot Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_HideUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_HideUI(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_HideUI");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_HideUI Parms{};

	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_LearnAllLuminasOnBoot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_LearnAllLuminasOnBoot(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_LearnAllLuminasOnBoot");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_LearnAllLuminasOnBoot Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_ShowClimbableProps
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_ShowClimbableProps(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_ShowClimbableProps");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_ShowClimbableProps Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_ShowGameActionTree
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_ShowGameActionTree(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_ShowGameActionTree");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_ShowGameActionTree Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_CVarChange_SingleCharacterParty
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_CVarChange_SingleCharacterParty(const class FString& NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_CVarChange_SingleCharacterParty");

	Params::BP_jRPG_Controller_World_C_DEBUG_CVarChange_SingleCharacterParty Parms{};

	Parms.NewValue = std::move(NewValue);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_FindAsset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FSoftClassPath&            ClassSoft                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAssetData*                      Array_Element                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_FindAsset(class FName AssetName, const struct FSoftClassPath& ClassSoft, bool* Found, struct FAssetData* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_FindAsset");

	Params::BP_jRPG_Controller_World_C_DEBUG_FindAsset Parms{};

	Parms.AssetName = AssetName;
	Parms.ClassSoft = std::move(ClassSoft);

	UObject::ProcessEvent(Func, &Parms);

	if (Found != nullptr)
		*Found = Parms.Found;

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_FindDebugSaveAsset
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FAssetData*                      Array_Element                                          (Parm, OutParm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_FindDebugSaveAsset(class FName AssetName, struct FAssetData* Array_Element)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_FindDebugSaveAsset");

	Params::BP_jRPG_Controller_World_C_DEBUG_FindDebugSaveAsset Parms{};

	Parms.AssetName = AssetName;

	UObject::ProcessEvent(Func, &Parms);

	if (Array_Element != nullptr)
		*Array_Element = std::move(Parms.Array_Element);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_GetAllPreviousQuestObjectives
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             QuestName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             QuestObjectiveName                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_QuestStatus                           Status                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FName, E_QuestStatus>*       Objectives                                             (Parm, OutParm)

void ABP_jRPG_Controller_World_C::DEBUG_GetAllPreviousQuestObjectives(class FName QuestName, class FName QuestObjectiveName, E_QuestStatus Status, TMap<class FName, E_QuestStatus>* Objectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_GetAllPreviousQuestObjectives");

	Params::BP_jRPG_Controller_World_C_DEBUG_GetAllPreviousQuestObjectives Parms{};

	Parms.QuestName = QuestName;
	Parms.QuestObjectiveName = QuestObjectiveName;
	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);

	if (Objectives != nullptr)
		*Objectives = std::move(Parms.Objectives);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_GivePictos
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::DEBUG_GivePictos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_GivePictos");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_IsWeaponInHandleList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             WeaponID                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<struct FS_WeaponInstanceHandle>& WeaponInstanceHandle                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::DEBUG_IsWeaponInHandleList(class FName WeaponID, TArray<struct FS_WeaponInstanceHandle>& WeaponInstanceHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_IsWeaponInHandleList");

	Params::BP_jRPG_Controller_World_C_DEBUG_IsWeaponInHandleList Parms{};

	Parms.WeaponID = WeaponID;
	Parms.WeaponInstanceHandle = std::move(WeaponInstanceHandle);

	UObject::ProcessEvent(Func, &Parms);

	WeaponInstanceHandle = std::move(Parms.WeaponInstanceHandle);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_LoadDebugQuestData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SaveGameData_C*               SaveGameData                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const TMap<class FName, E_QuestStatus>& GoldenPathObjectives                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_jRPG_Controller_World_C::DEBUG_LoadDebugQuestData(class UBP_SaveGameData_C* SaveGameData, const TMap<class FName, E_QuestStatus>& GoldenPathObjectives)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_LoadDebugQuestData");

	Params::BP_jRPG_Controller_World_C_DEBUG_LoadDebugQuestData Parms{};

	Parms.SaveGameData = SaveGameData;
	Parms.GoldenPathObjectives = std::move(GoldenPathObjectives);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_LoadDebugSaveData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFDebugSaveGame&           SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_LoadDebugSaveData(const struct FFDebugSaveGame& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_LoadDebugSaveData");

	Params::BP_jRPG_Controller_World_C_DEBUG_LoadDebugSaveData Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_LoadDebugSaveGameAsset
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             AssetName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_LoadDebugSaveGameAsset(class FName AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_LoadDebugSaveGameAsset");

	Params::BP_jRPG_Controller_World_C_DEBUG_LoadDebugSaveGameAsset Parms{};

	Parms.AssetName = AssetName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_OnRaytraceMouseCVarChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_OnRaytraceMouseCVarChanged(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_OnRaytraceMouseCVarChanged");

	Params::BP_jRPG_Controller_World_C_DEBUG_OnRaytraceMouseCVarChanged Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_PatchDebugSaveDataBeforeLoading
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFDebugSaveGame&                 SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_PatchDebugSaveDataBeforeLoading(struct FFDebugSaveGame& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_PatchDebugSaveDataBeforeLoading");

	Params::BP_jRPG_Controller_World_C_DEBUG_PatchDebugSaveDataBeforeLoading Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);

	SaveData = std::move(Parms.SaveData);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_RegisterCVars
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::DEBUG_RegisterCVars()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_RegisterCVars");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_TriggerCVarOnGameStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::DEBUG_TriggerCVarOnGameStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_TriggerCVarOnGameStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_UnlockAllLuminaPassives
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::DEBUG_UnlockAllLuminaPassives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_UnlockAllLuminaPassives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DEBUG_UpdateDisplay
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::DEBUG_UpdateDisplay(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DEBUG_UpdateDisplay");

	Params::BP_jRPG_Controller_World_C_DEBUG_UpdateDisplay Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.DisableExplorationControlsForBattle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::DisableExplorationControlsForBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "DisableExplorationControlsForBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.EventDoSpawnActor
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::EventDoSpawnActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "EventDoSpawnActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ExecuteGameActionWrapperController
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameAction_Wrapper&       GameActionWrapper                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_jRPG_Controller_World_C::ExecuteGameActionWrapperController(const struct FGameAction_Wrapper& GameActionWrapper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ExecuteGameActionWrapperController");

	Params::BP_jRPG_Controller_World_C_ExecuteGameActionWrapperController Parms{};

	Parms.GameActionWrapper = std::move(GameActionWrapper);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ExecuteUbergraph_BP_jRPG_Controller_World
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ExecuteUbergraph_BP_jRPG_Controller_World(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ExecuteUbergraph_BP_jRPG_Controller_World");

	Params::BP_jRPG_Controller_World_C_ExecuteUbergraph_BP_jRPG_Controller_World Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ForceInputForTutorial
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                OnGameActionDone                                       (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ForceInputForTutorial(EInputAction InputAction, const TDelegate<void()>& OnGameActionDone)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ForceInputForTutorial");

	Params::BP_jRPG_Controller_World_C_ForceInputForTutorial Parms{};

	Parms.InputAction = InputAction;
	Parms.OnGameActionDone = OnGameActionDone;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ForcePreloadAssets
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ForcePreloadAssets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ForcePreloadAssets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetCameraOverrideActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor**                          CameraOverrideActor_0                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetCameraOverrideActor(class AActor** CameraOverrideActor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetCameraOverrideActor");

	Params::BP_jRPG_Controller_World_C_GetCameraOverrideActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraOverrideActor_0 != nullptr)
		*CameraOverrideActor_0 = Parms.CameraOverrideActor_0;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetClosestLightingScenario
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_LightingScenarioReference_C** LightingScenario                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetClosestLightingScenario(const struct FVector& Location, class ABP_LightingScenarioReference_C** LightingScenario)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetClosestLightingScenario");

	Params::BP_jRPG_Controller_World_C_GetClosestLightingScenario Parms{};

	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetCurrentLevelData
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FFLevelDataEntry*                LevelData                                              (Parm, OutParm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetCurrentLevelData(struct FFLevelDataEntry* LevelData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetCurrentLevelData");

	Params::BP_jRPG_Controller_World_C_GetCurrentLevelData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LevelData != nullptr)
		*LevelData = std::move(Parms.LevelData);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetCustomGameInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_jRPG_GI_Custom_C**            BP_J_RPG_GI_Custom                                     (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetCustomGameInstance(class UBP_jRPG_GI_Custom_C** BP_J_RPG_GI_Custom)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetCustomGameInstance");

	Params::BP_jRPG_Controller_World_C_GetCustomGameInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BP_J_RPG_GI_Custom != nullptr)
		*BP_J_RPG_GI_Custom = Parms.BP_J_RPG_GI_Custom;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetDebugLightingScenario
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_LightingScenarioReference_C** LightingScenario                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetDebugLightingScenario(class ABP_LightingScenarioReference_C** LightingScenario)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetDebugLightingScenario");

	Params::BP_jRPG_Controller_World_C_GetDebugLightingScenario Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetDialogueOverlay
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWBP_DialogueOverlay_C**          DialogueOverlay                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetDialogueOverlay(class UWBP_DialogueOverlay_C** DialogueOverlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetDialogueOverlay");

	Params::BP_jRPG_Controller_World_C_GetDialogueOverlay Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DialogueOverlay != nullptr)
		*DialogueOverlay = Parms.DialogueOverlay;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetPauseMenuWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWBP_PauseMenu_C**                PauseMenuWidget_0                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetPauseMenuWidget(class UWBP_PauseMenu_C** PauseMenuWidget_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetPauseMenuWidget");

	Params::BP_jRPG_Controller_World_C_GetPauseMenuWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PauseMenuWidget_0 != nullptr)
		*PauseMenuWidget_0 = Parms.PauseMenuWidget_0;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.GetPlayerCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_World_C**      AsBP_J_RPG_Character_World                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::GetPlayerCharacter(class ABP_jRPG_Character_World_C** AsBP_J_RPG_Character_World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "GetPlayerCharacter");

	Params::BP_jRPG_Controller_World_C_GetPlayerCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBP_J_RPG_Character_World != nullptr)
		*AsBP_J_RPG_Character_World = Parms.AsBP_J_RPG_Character_World;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.HasCameraOverride
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasOverride                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::HasCameraOverride(bool* HasOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "HasCameraOverride");

	Params::BP_jRPG_Controller_World_C_HasCameraOverride Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasOverride != nullptr)
		*HasOverride = Parms.HasOverride;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.HealParty
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::HealParty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "HealParty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.HideInteractionPopUp
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::HideInteractionPopUp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "HideInteractionPopUp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.HideWorldActorsAroundBattleMap
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::HideWorldActorsAroundBattleMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "HideWorldActorsAroundBattleMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_Battle_Defense_Dodge_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_Battle_Defense_Dodge_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_Battle_Defense_Dodge_K2Node_EnhancedInputActionEvent_0");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_Battle_Defense_Dodge_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_Battle_Defense_GradientCounter_K2Node_EnhancedInputActionEvent_2
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_Battle_Defense_GradientCounter_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_Battle_Defense_GradientCounter_K2Node_EnhancedInputActionEvent_2");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_Battle_Defense_GradientCounter_K2Node_EnhancedInputActionEvent_2 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_Battle_Defense_Jump_K2Node_EnhancedInputActionEvent_4
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_Battle_Defense_Jump_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_Battle_Defense_Jump_K2Node_EnhancedInputActionEvent_4");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_Battle_Defense_Jump_K2Node_EnhancedInputActionEvent_4 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_Battle_Defense_JumpCounter_K2Node_EnhancedInputActionEvent_3
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_Battle_Defense_JumpCounter_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_Battle_Defense_JumpCounter_K2Node_EnhancedInputActionEvent_3");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_Battle_Defense_JumpCounter_K2Node_EnhancedInputActionEvent_3 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_Battle_Defense_Parry_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_Battle_Defense_Parry_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_Battle_Defense_Parry_K2Node_EnhancedInputActionEvent_1");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_Battle_Defense_Parry_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_Battle_QTE_K2Node_EnhancedInputActionEvent_5
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_Battle_QTE_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_Battle_QTE_K2Node_EnhancedInputActionEvent_5");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_Battle_QTE_K2Node_EnhancedInputActionEvent_5 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_UI_Exploration_ShowTeamStatus_K2Node_EnhancedInputActionEvent_6
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_UI_Exploration_ShowTeamStatus_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_UI_Exploration_ShowTeamStatus_K2Node_EnhancedInputActionEvent_6");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_UI_Exploration_ShowTeamStatus_K2Node_EnhancedInputActionEvent_6 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_UI_Menu_Game_K2Node_EnhancedInputActionEvent_8
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_UI_Menu_Game_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_UI_Menu_Game_K2Node_EnhancedInputActionEvent_8");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_UI_Menu_Game_K2Node_EnhancedInputActionEvent_8 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_IA_UI_Menu_Pause_K2Node_EnhancedInputActionEvent_7
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_IA_UI_Menu_Pause_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_IA_UI_Menu_Pause_K2Node_EnhancedInputActionEvent_7");

	Params::BP_jRPG_Controller_World_C_InpActEvt_IA_UI_Menu_Pause_K2Node_EnhancedInputActionEvent_7 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InpActEvt_L_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::InpActEvt_L_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InpActEvt_L_K2Node_InputKeyEvent_0");

	Params::BP_jRPG_Controller_World_C_InpActEvt_L_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.InputAction_UI_OpenGameMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::InputAction_UI_OpenGameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "InputAction_UI_OpenGameMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.IsAnyMenuVisible
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::IsAnyMenuVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "IsAnyMenuVisible");

	Params::BP_jRPG_Controller_World_C_IsAnyMenuVisible Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.IsAreaChangeInProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   ReturnNode                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::IsAreaChangeInProgress(bool* ReturnNode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "IsAreaChangeInProgress");

	Params::BP_jRPG_Controller_World_C_IsAreaChangeInProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ReturnNode != nullptr)
		*ReturnNode = Parms.ReturnNode;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.IsGameplayPaused
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsPaused                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::IsGameplayPaused(bool* IsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "IsGameplayPaused");

	Params::BP_jRPG_Controller_World_C_IsGameplayPaused Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPaused != nullptr)
		*IsPaused = Parms.IsPaused;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.IsInBattleBeginTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::IsInBattleBeginTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "IsInBattleBeginTransition");

	Params::BP_jRPG_Controller_World_C_IsInBattleBeginTransition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.LoadCharacterStateFromGameInstance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ControlledCharacterWorld                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::LoadCharacterStateFromGameInstance(class AActor* ControlledCharacterWorld)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "LoadCharacterStateFromGameInstance");

	Params::BP_jRPG_Controller_World_C_LoadCharacterStateFromGameInstance Parms{};

	Parms.ControlledCharacterWorld = ControlledCharacterWorld;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.MakeGameMenuVisible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FS_GameMenuParameters&     GameMenuParameters                                     (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::MakeGameMenuVisible(bool Visible, const struct FS_GameMenuParameters& GameMenuParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "MakeGameMenuVisible");

	Params::BP_jRPG_Controller_World_C_MakeGameMenuVisible Parms{};

	Parms.Visible = Visible;
	Parms.GameMenuParameters = std::move(GameMenuParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.MakePauseMenuVisible
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InIsVisible                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::MakePauseMenuVisible(bool InIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "MakePauseMenuVisible");

	Params::BP_jRPG_Controller_World_C_MakePauseMenuVisible Parms{};

	Parms.InIsVisible = InIsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnAreaChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_World_C*       CharacterWorld                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class ABP_LightingScenarioReference_C*  LightingScenario                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FS_AreaAudioParameters&    AreaAudioParameters                                    (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// const struct FS_ChangeLevelParameters&  ChangeLevelParameters                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::OnAreaChanged(class ABP_jRPG_Character_World_C* CharacterWorld, class ABP_LightingScenarioReference_C* LightingScenario, const struct FS_AreaAudioParameters& AreaAudioParameters, const struct FS_ChangeLevelParameters& ChangeLevelParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnAreaChanged");

	Params::BP_jRPG_Controller_World_C_OnAreaChanged Parms{};

	Parms.CharacterWorld = CharacterWorld;
	Parms.LightingScenario = LightingScenario;
	Parms.AreaAudioParameters = std::move(AreaAudioParameters);
	Parms.ChangeLevelParameters = std::move(ChangeLevelParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBackToExplorationFromPause
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnBackToExplorationFromPause()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBackToExplorationFromPause");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleBeginTransitionRequested
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnBattleBeginTransitionRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleBeginTransitionRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleDependenciesLoaded
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnBattleDependenciesLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleDependenciesLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EnemyGlobalID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBattleEndResult                        BattleEndResult                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::OnBattleEnd(class FName EnemyGlobalID, EBattleEndResult BattleEndResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleEnd");

	Params::BP_jRPG_Controller_World_C_OnBattleEnd Parms{};

	Parms.EnemyGlobalID = EnemyGlobalID;
	Parms.BattleEndResult = BattleEndResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleFlee
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EnemyGlobalID                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::OnBattleFlee(class FName EnemyGlobalID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleFlee");

	Params::BP_jRPG_Controller_World_C_OnBattleFlee Parms{};

	Parms.EnemyGlobalID = EnemyGlobalID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleRequested
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnBattleRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleReset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnBattleReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnBattleStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnBattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnBattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnControllerConnectionChanged
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsConnected                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::OnControllerConnectionChanged(bool bIsConnected)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnControllerConnectionChanged");

	Params::BP_jRPG_Controller_World_C_OnControllerConnectionChanged Parms{};

	Parms.bIsConnected = bIsConnected;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnDefendAction
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnDefendAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnDefendAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnDefendReleased
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnDefendReleased()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnDefendReleased");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnDismountRequested
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnDismountRequested()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnDismountRequested");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnExplorationGroupDeath
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnExplorationGroupDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnExplorationGroupDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnPlatformPaused
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldPause                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::OnPlatformPaused(bool bShouldPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnPlatformPaused");

	Params::BP_jRPG_Controller_World_C_OnPlatformPaused Parms{};

	Parms.bShouldPause = bShouldPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OnQuitRequest
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OnQuitRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OnQuitRequest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OpenDocumentActor
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OpenDocumentActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OpenDocumentActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OpenMainMenu
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::OpenMainMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OpenMainMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.OpenSavePointMenu
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFromGameplay                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::OpenSavePointMenu(bool IsFromGameplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "OpenSavePointMenu");

	Params::BP_jRPG_Controller_World_C_OpenSavePointMenu Parms{};

	Parms.IsFromGameplay = IsFromGameplay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ParseCommandLine
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ParseCommandLine()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ParseCommandLine");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PauseGameplay
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_GameplayPauseParameters&Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::PauseGameplay(const struct FS_GameplayPauseParameters& Parameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PauseGameplay");

	Params::BP_jRPG_Controller_World_C_PauseGameplay Parms{};

	Parms.Parameters = std::move(Parameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PauseOnFullScreenNotification
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPaused                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::PauseOnFullScreenNotification(bool IsPaused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PauseOnFullScreenNotification");

	Params::BP_jRPG_Controller_World_C_PauseOnFullScreenNotification Parms{};

	Parms.IsPaused = IsPaused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PlaceholderTriggerTutorialInput
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::PlaceholderTriggerTutorialInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PlaceholderTriggerTutorialInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PlayGlobalFeedback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFGlobalFeedback&          Feedback                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::PlayGlobalFeedback(const struct FFGlobalFeedback& Feedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PlayGlobalFeedback");

	Params::BP_jRPG_Controller_World_C_PlayGlobalFeedback Parms{};

	Parms.Feedback = std::move(Feedback);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PrepareCharacterForBattle
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::PrepareCharacterForBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PrepareCharacterForBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PrepareLightingForBattle
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::PrepareLightingForBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PrepareLightingForBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PrepareSystemsForBattle
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::PrepareSystemsForBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PrepareSystemsForBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PrepareToChangeMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFLevelDataEntry&                LevelData                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::PrepareToChangeMap(struct FFLevelDataEntry& LevelData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PrepareToChangeMap");

	Params::BP_jRPG_Controller_World_C_PrepareToChangeMap Parms{};

	Parms.LevelData = std::move(LevelData);

	UObject::ProcessEvent(Func, &Parms);

	LevelData = std::move(Parms.LevelData);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PrepareWorldActorsForBattle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::PrepareWorldActorsForBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PrepareWorldActorsForBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.PrepareWorldForTransition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::PrepareWorldForTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "PrepareWorldForTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ProcessAreaChanged
// (Protected, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ProcessAreaChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ProcessAreaChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ProcessAreaChangedForAudio
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_AreaAudioParameters&    AreaAudioParameters                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ProcessAreaChangedForAudio(const struct FS_AreaAudioParameters& AreaAudioParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ProcessAreaChangedForAudio");

	Params::BP_jRPG_Controller_World_C_ProcessAreaChangedForAudio Parms{};

	Parms.AreaAudioParameters = std::move(AreaAudioParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReceiveEndPlay");

	Params::BP_jRPG_Controller_World_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReceivePossess
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APawn*                            PossessedPawn                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ReceivePossess(class APawn* PossessedPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReceivePossess");

	Params::BP_jRPG_Controller_World_C_ReceivePossess Parms{};

	Parms.PossessedPawn = PossessedPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReceiveTeamDamage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EExplorationHealthDamageType            DamageType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ReceiveTeamDamage(EExplorationHealthDamageType DamageType, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReceiveTeamDamage");

	Params::BP_jRPG_Controller_World_C_ReceiveTeamDamage Parms{};

	Parms.DamageType = DamageType;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReceiveTick");

	Params::BP_jRPG_Controller_World_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReloadLastCheckpoint
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ReloadLastCheckpoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReloadLastCheckpoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.RemoveCameraOverride
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ViewTarget                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::RemoveCameraOverride(class AActor* ViewTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "RemoveCameraOverride");

	Params::BP_jRPG_Controller_World_C_RemoveCameraOverride Parms{};

	Parms.ViewTarget = ViewTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ResumeWorldActorsAfterBattle
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ResumeWorldActorsAfterBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ResumeWorldActorsAfterBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ResumeWorldAfterTransition
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ResumeWorldAfterTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ResumeWorldAfterTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ReturnFromGameMenuWorld
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ReturnFromGameMenuWorld()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ReturnFromGameMenuWorld");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.RollEncounter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InputScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::RollEncounter(double InputScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "RollEncounter");

	Params::BP_jRPG_Controller_World_C_RollEncounter Parms{};

	Parms.InputScale = InputScale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetActorTickPaused
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AActor*&                    Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const TArray<class AActor*>&            AlreadyPausedActors                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class UActorComponent*>&   AlreadyPausedComponents                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
// struct FS_GameplayPauseParameters&      PauseParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetActorTickPaused(const class AActor*& Actor, const TArray<class AActor*>& AlreadyPausedActors, const TArray<class UActorComponent*>& AlreadyPausedComponents, struct FS_GameplayPauseParameters& PauseParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetActorTickPaused");

	Params::BP_jRPG_Controller_World_C_SetActorTickPaused Parms{};

	Parms.Actor = Actor;
	Parms.AlreadyPausedActors = std::move(AlreadyPausedActors);
	Parms.AlreadyPausedComponents = std::move(AlreadyPausedComponents);
	Parms.PauseParameters = std::move(PauseParameters);

	UObject::ProcessEvent(Func, &Parms);

	PauseParameters = std::move(Parms.PauseParameters);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetForceFeedbackEnabled
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSF_ReferenceCounterHandle&      ForceFeedbackBlocker                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    DebugName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetForceFeedbackEnabled(bool Enabled, struct FSF_ReferenceCounterHandle& ForceFeedbackBlocker, const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetForceFeedbackEnabled");

	Params::BP_jRPG_Controller_World_C_SetForceFeedbackEnabled Parms{};

	Parms.Enabled = Enabled;
	Parms.ForceFeedbackBlocker = std::move(ForceFeedbackBlocker);
	Parms.DebugName = std::move(DebugName);

	UObject::ProcessEvent(Func, &Parms);

	ForceFeedbackBlocker = std::move(Parms.ForceFeedbackBlocker);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetGameplayPaused
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_GameplayPauseParameters&Parameters                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FSF_ReferenceCounterHandle&      PauseBlocker                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    DebugName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetGameplayPaused(const struct FS_GameplayPauseParameters& Parameters, struct FSF_ReferenceCounterHandle& PauseBlocker, const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetGameplayPaused");

	Params::BP_jRPG_Controller_World_C_SetGameplayPaused Parms{};

	Parms.Parameters = std::move(Parameters);
	Parms.PauseBlocker = std::move(PauseBlocker);
	Parms.DebugName = std::move(DebugName);

	UObject::ProcessEvent(Func, &Parms);

	PauseBlocker = std::move(Parms.PauseBlocker);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetInputModeUI
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UIModeEnabled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ConfigureUI_Navigation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetInputModeUI(bool UIModeEnabled, bool ConfigureUI_Navigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetInputModeUI");

	Params::BP_jRPG_Controller_World_C_SetInputModeUI Parms{};

	Parms.UIModeEnabled = UIModeEnabled;
	Parms.ConfigureUI_Navigation = ConfigureUI_Navigation;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetLevelLightingHiddenForGameMenu
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetLevelLightingHiddenForGameMenu(bool Hidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetLevelLightingHiddenForGameMenu");

	Params::BP_jRPG_Controller_World_C_SetLevelLightingHiddenForGameMenu Parms{};

	Parms.Hidden = Hidden;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetMiniMapVisible
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetMiniMapVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetMiniMapVisible");

	Params::BP_jRPG_Controller_World_C_SetMiniMapVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.SetStreamingSourcesEnabled
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSF_ReferenceCounterHandle&      BlockerReferenceHandle                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    DebugName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::SetStreamingSourcesEnabled(bool Enabled, struct FSF_ReferenceCounterHandle& BlockerReferenceHandle, const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "SetStreamingSourcesEnabled");

	Params::BP_jRPG_Controller_World_C_SetStreamingSourcesEnabled Parms{};

	Parms.Enabled = Enabled;
	Parms.BlockerReferenceHandle = std::move(BlockerReferenceHandle);
	Parms.DebugName = std::move(DebugName);

	UObject::ProcessEvent(Func, &Parms);

	BlockerReferenceHandle = std::move(Parms.BlockerReferenceHandle);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ShouldPauseActor
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class AActor*&                    Actor                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// struct FS_GameplayPauseParameters&      PauseParameters                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool*                                   ShouldPause                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::ShouldPauseActor(const class AActor*& Actor, struct FS_GameplayPauseParameters& PauseParameters, bool* ShouldPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ShouldPauseActor");

	Params::BP_jRPG_Controller_World_C_ShouldPauseActor Parms{};

	Parms.Actor = Actor;
	Parms.PauseParameters = std::move(PauseParameters);

	UObject::ProcessEvent(Func, &Parms);

	PauseParameters = std::move(Parms.PauseParameters);

	if (ShouldPause != nullptr)
		*ShouldPause = Parms.ShouldPause;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ShowGameOverScreen
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::ShowGameOverScreen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ShowGameOverScreen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ShowInteractionPopUp
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      TextToDisplay                                          (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_jRPG_Controller_World_C::ShowInteractionPopUp(const class FText& TextToDisplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ShowInteractionPopUp");

	Params::BP_jRPG_Controller_World_C_ShowInteractionPopUp Parms{};

	Parms.TextToDisplay = std::move(TextToDisplay);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.StartNewGameIfNeeded
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::StartNewGameIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "StartNewGameIfNeeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.TeleportCharacterToSpawnPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::TeleportCharacterToSpawnPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "TeleportCharacterToSpawnPoint");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.TryBindDefendInput
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::TryBindDefendInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "TryBindDefendInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.UnbindDefendInput
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::UnbindDefendInput()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "UnbindDefendInput");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.UnpauseGameplay
// (Protected, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::UnpauseGameplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "UnpauseGameplay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.UpdateAudioListenerOverride
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::UpdateAudioListenerOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "UpdateAudioListenerOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.UpdateCameraViewTarget
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::UpdateCameraViewTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "UpdateCameraViewTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.UpdateControlRotationFromView
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::UpdateControlRotationFromView()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "UpdateControlRotationFromView");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Controller_World_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.AreStreamingSourcesEnabled
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::AreStreamingSourcesEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "AreStreamingSourcesEnabled");

	Params::BP_jRPG_Controller_World_C_AreStreamingSourcesEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.IsForceFeedbackEnabled
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   Enabled                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Controller_World_C::IsForceFeedbackEnabled(bool* Enabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "IsForceFeedbackEnabled");

	Params::BP_jRPG_Controller_World_C_IsForceFeedbackEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enabled != nullptr)
		*Enabled = Parms.Enabled;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.IsInBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::IsInBattle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "IsInBattle");

	Params::BP_jRPG_Controller_World_C_IsInBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Controller_World.BP_jRPG_Controller_World_C.ShouldProcessForceFeedbackAndHaptics
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Controller_World_C::ShouldProcessForceFeedbackAndHaptics() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Controller_World_C", "ShouldProcessForceFeedbackAndHaptics");

	Params::BP_jRPG_Controller_World_C_ShouldProcessForceFeedbackAndHaptics Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

