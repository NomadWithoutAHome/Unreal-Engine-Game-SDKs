#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleBuffInstance

#include "Basic.hpp"

#include "SandFall_classes.hpp"
#include "Engine_structs.hpp"
#include "FStatMultiplierData_structs.hpp"
#include "E_jRPG_BuffStackingType_structs.hpp"
#include "E_BuffAndStatusEffectTypes_structs.hpp"
#include "EDamageReason_structs.hpp"
#include "E_StanceType_structs.hpp"
#include "EAPChangeReason_structs.hpp"
#include "E_PerfectionUpdateType_structs.hpp"
#include "E_jRPG_CharacterAttachmentSlot_structs.hpp"
#include "EPerfectionReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleBuffInstance.BP_BattleBuffInstance_C
// 0x0130 (0x0158 - 0x0028)
class UBP_BattleBuffInstance_C : public UExtendedObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         TurnDuration;                                      // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_CharacterBattleStats_C*        TargetCharacterStats;                              // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPermanent;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFStatMultiplierData>           CharacterStatMultipliers;                          // 0x0048(0x0010)(Edit, BlueprintVisible)
	class FText                                   Name_0;                                            // 0x0058(0x0010)(Edit, BlueprintVisible)
	class FText                                   Description;                                       // 0x0068(0x0010)(Edit, BlueprintVisible)
	class UTexture2D*                             Icon;                                              // 0x0078(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_jRPG_BuffStackingType                       StackingType;                                      // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 BuffFamily;                                        // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       ActiveParticleSystemsCascade;                      // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsMarkedForRemoval;                                // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_BuffAndStatusEffectTypes                    Type;                                              // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_CharacterBattleStats_C*        SourceCharacterStats;                              // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UNiagaraComponent*>              ActiveNiagaraSystem;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FDataTableRowHandle                    BuffActivationSound;                               // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         StackCount;                                        // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWBP_jRPG_BuffSlot_C*>           BuffSlotWidgets;                                   // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FDataTableRowHandle                    SoundActivation;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SoundFeedback;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SoundDeactivate;                                   // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    DataTableRowSoundToPlay;                           // 0x0118(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class UBP_BattleBuffInstance_AggregatorBase_C* AggregatorBuffInstance;                           // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 AggregatorBuffClass;                               // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UBP_BattleBuffInstance_C* BuffInstance)> BuffStackCountChange; // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UObject*                                BuffInstigator;                                    // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DisableInNarrativeBattles;                         // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateBuff(const class UAC_jRPG_CharacterBattleStats_C*& CharacterStats);
	void DeactivateBuff();
	void OnCharacterTurnStart(class UAC_jRPG_CharacterBattleStats_C* CharacterStats, const class UBP_DependencyRefCounter_C*& TurnStartDependencies);
	void ProcessReceivedRawDamages(class UBP_BattleDamages_C*& BattleDamages, bool* Out);
	void ExecuteUbergraph_BP_BattleBuffInstance(int32 EntryPoint);
	void GetDamageSourceCharacter(class UAC_jRPG_CharacterBattleStats_C** CharacterStats);
	void GetDamageSourceType(EDamageReason* DamageSourceType);
	void IsTurnStartInProgress(bool* InProgress);
	void OnCharacterDealtDamages(class UAC_jRPG_CharacterBattleStats_C* CharacterStats, double Damages, double* ProcessedDamages);
	class UObject* GetInstigatorObject();
	void SetInstigatorObject(class UObject* Instigator);
	void ModifyOwnerSkillStates(const TMap<class UBP_DataAsset_Skill_C*, class UBP_SkillState_C*>& SkillStates);
	void ProcessBattleStartEvent(class UBP_DependencyRefCounter_C* DepsRefCount);
	void ProcessDealtDamageCriticalHitChance(class UBP_BattleDamages_C* Damages, bool* Out);
	void OnVisualEffectDimChange(bool IsDimmed);
	void SetTurnDuration(int32 TurnDuration_0);
	void OnBuffStackCountChanged(int32 NewValue);
	void ShouldKeepOnDeath(bool* Keep);
	void FeedbackBuffTriggeredOnTarget(const class FText& Text, const struct FLinearColor& Color);
	bool IsBuffPermanent();
	void SetPermanent();
	void OnGradientGaugeChange(class UBP_GradientGaugeChangeEvent_C* GradientChangeEvent);
	class FText GetBuffDisplayName();
	void OnDeathDamagePrevented();
	void GetStackCount(int32* StackCount_0);
	void ChangeStackCount(int32 StackCount_0);
	void UpdateCustomBuffWidget(class UWBP_jRPG_BuffSlot_C* BuffWidget, bool* DummyOut);
	void InitializeCustomBuffWidget(class UWBP_jRPG_BuffSlot_C* BuffWidget, bool* DummyOut);
	void RegisterBuffWidget(const class UWBP_jRPG_BuffSlot_C*& BuffSlotWidget);
	void ProcessPermeateDamage(class UBP_BattleDamages_C* Damages, bool* Out);
	void ProcessAttackElement(class UBP_BattleDamages_C* Damages, bool* Out);
	void OnStanceChange(E_StanceType NewStance, E_StanceType previousStance, E_StanceType* NewStance1, E_StanceType* PreviousStance1);
	void ProcessHeal(class UBP_BattleHeal_C* Heal, bool* DummyOut);
	void ProcessAPChange(int32 NewAPAmount, int32 PreviousAPAmount, EAPChangeReason ChangeReason, bool* HasChanged, int32* ChangedValue);
	void OnPerfectionChanged(int32 NewPerfection, int32 DeltaPerfection, E_PerfectionUpdateType PerfectionChangeType, EPerfectionReason PerfectionChangeReason, int32* FinalPerfection);
	void GetDebugText(class FText* DebugInfo);
	void MarkBuffForRemoval();
	void IsBuffTarget(class UAC_jRPG_CharacterBattleStats_C* CharacterStats, bool* IsTarget);
	void ProcessDealtRawDamages(class UBP_BattleDamages_C*& BattleDamages, bool* Out);
	void HideAllParticleSystems();
	void ShowAllParticleSystems();
	void RemoveAllParticleSystems();
	void AddCharacterParticleSystem(class UAC_jRPG_CharacterBattleStats_C* CharacterStats, E_jRPG_CharacterAttachmentSlot AttachmentSlot, class UParticleSystem* ParticleSystemCascade, const struct FRotator& PartySystemRotation, class UNiagaraSystem* SystemNiagara, const struct FVector& PositionOffset, class UParticleSystemComponent** ParticleSystemCompoCascade, class UNiagaraComponent** NiagaraSystem);
	void ProcessReceivedFinalDamages(class UBP_BattleDamages_C*& BattleDamages, int32 CurrentTurnHitCount, bool* Out);
	void OnLoaded_148FF7BA4C95776B122106A0489F695B(class UObject* Loaded);
	void OnBattleStop();
	void OnCharacterReceivedDamages(class UAC_jRPG_CharacterBattleStats_C* TargetCharacter, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, double ReceivedDamages, class UBP_BattleDamages_C* BattleDamages);
	void OnCharacterKilled(class UAC_jRPG_CharacterBattleStats_C* CharacterStats);
	void OnCharacterResurrected();
	void ProcessAddBuffAction(const class UAction_AddBuff_C*& BuffAddAction);
	void OnSuccessfulParry();
	void OnSuccessfulDodge();
	void BPI_OnAnyCharacterDamaged(class UBP_BattleDamages_C* BattleDamage);
	void BPI_OnAnyCharacterAP_Changed(class UBP_BattleEvent_APChange_C* AP_Change);
	void BPI_OnBattleStart();
	void BPI_OnReserveTeamSent();
	void ApplyOnTurnEnd();
	void Event_Play_Sound_Feedback();

	bool IsBuffFromFamily(TSubclassOf<class UBP_BattleBuffInstance_C> TestFamily) const;
	void IsSameBuffFamily(class UBP_BattleBuffInstance_C* BattleBuffInstance, bool* IsSame) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleBuffInstance_C">();
	}
	static class UBP_BattleBuffInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattleBuffInstance_C>();
	}
};
static_assert(alignof(UBP_BattleBuffInstance_C) == 0x000008, "Wrong alignment on UBP_BattleBuffInstance_C");
static_assert(sizeof(UBP_BattleBuffInstance_C) == 0x000158, "Wrong size on UBP_BattleBuffInstance_C");
static_assert(offsetof(UBP_BattleBuffInstance_C, UberGraphFrame) == 0x000028, "Member 'UBP_BattleBuffInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, TurnDuration) == 0x000030, "Member 'UBP_BattleBuffInstance_C::TurnDuration' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, TargetCharacterStats) == 0x000038, "Member 'UBP_BattleBuffInstance_C::TargetCharacterStats' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, IsPermanent) == 0x000040, "Member 'UBP_BattleBuffInstance_C::IsPermanent' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, CharacterStatMultipliers) == 0x000048, "Member 'UBP_BattleBuffInstance_C::CharacterStatMultipliers' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, Name_0) == 0x000058, "Member 'UBP_BattleBuffInstance_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, Description) == 0x000068, "Member 'UBP_BattleBuffInstance_C::Description' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, Icon) == 0x000078, "Member 'UBP_BattleBuffInstance_C::Icon' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, StackingType) == 0x000080, "Member 'UBP_BattleBuffInstance_C::StackingType' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, BuffFamily) == 0x000088, "Member 'UBP_BattleBuffInstance_C::BuffFamily' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, ActiveParticleSystemsCascade) == 0x000090, "Member 'UBP_BattleBuffInstance_C::ActiveParticleSystemsCascade' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, IsMarkedForRemoval) == 0x0000A0, "Member 'UBP_BattleBuffInstance_C::IsMarkedForRemoval' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, Type) == 0x0000A1, "Member 'UBP_BattleBuffInstance_C::Type' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, SourceCharacterStats) == 0x0000A8, "Member 'UBP_BattleBuffInstance_C::SourceCharacterStats' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, ActiveNiagaraSystem) == 0x0000B0, "Member 'UBP_BattleBuffInstance_C::ActiveNiagaraSystem' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, BuffActivationSound) == 0x0000C0, "Member 'UBP_BattleBuffInstance_C::BuffActivationSound' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, StackCount) == 0x0000D0, "Member 'UBP_BattleBuffInstance_C::StackCount' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, BuffSlotWidgets) == 0x0000D8, "Member 'UBP_BattleBuffInstance_C::BuffSlotWidgets' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, SoundActivation) == 0x0000E8, "Member 'UBP_BattleBuffInstance_C::SoundActivation' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, SoundFeedback) == 0x0000F8, "Member 'UBP_BattleBuffInstance_C::SoundFeedback' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, SoundDeactivate) == 0x000108, "Member 'UBP_BattleBuffInstance_C::SoundDeactivate' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, DataTableRowSoundToPlay) == 0x000118, "Member 'UBP_BattleBuffInstance_C::DataTableRowSoundToPlay' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, AggregatorBuffInstance) == 0x000128, "Member 'UBP_BattleBuffInstance_C::AggregatorBuffInstance' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, AggregatorBuffClass) == 0x000130, "Member 'UBP_BattleBuffInstance_C::AggregatorBuffClass' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, BuffStackCountChange) == 0x000138, "Member 'UBP_BattleBuffInstance_C::BuffStackCountChange' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, BuffInstigator) == 0x000148, "Member 'UBP_BattleBuffInstance_C::BuffInstigator' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffInstance_C, DisableInNarrativeBattles) == 0x000150, "Member 'UBP_BattleBuffInstance_C::DisableInNarrativeBattles' has a wrong offset!");

}

