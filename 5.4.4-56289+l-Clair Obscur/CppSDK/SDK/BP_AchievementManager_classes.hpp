#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AchievementManager.BP_AchievementManager_C
// 0x0028 (0x00C8 - 0x00A0)
class UBP_AchievementManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDataTable*                             AchievementsDataTable;                             // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInitialized;                                     // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName AchievementID)> OnAchievementUnlocked;                 // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ExecuteUbergraph_BP_AchievementManager(int32 EntryPoint);
	void GetAchievementRuntimeData(class FName AchievementID, struct FS_AchievementRuntimeData* Data);
	void GetAchievementSpecificPlatformID(class FName AchievementID, class FName* PlatformId);
	void GetAllAchievementsIDs(TArray<class FName>* AchievementIDs);
	void Initialize();
	void InitializeOnSaveLoaded(bool Success);
	bool IsAchievementUnlocked(class FName AchievementID);
	void OnAchievementTriggered(const struct FAchievementsMap& AchievementsMap, const bool bSuccess);
	void OnAchievementValidatorPassed(class FName AchievementID);
	void ReceiveBeginPlay();
	void UnlockAchievement(class FName AchievementID);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AchievementManager_C">();
	}
	static class UBP_AchievementManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AchievementManager_C>();
	}
};
static_assert(alignof(UBP_AchievementManager_C) == 0x000008, "Wrong alignment on UBP_AchievementManager_C");
static_assert(sizeof(UBP_AchievementManager_C) == 0x0000C8, "Wrong size on UBP_AchievementManager_C");
static_assert(offsetof(UBP_AchievementManager_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_AchievementManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AchievementManager_C, AchievementsDataTable) == 0x0000A8, "Member 'UBP_AchievementManager_C::AchievementsDataTable' has a wrong offset!");
static_assert(offsetof(UBP_AchievementManager_C, IsInitialized) == 0x0000B0, "Member 'UBP_AchievementManager_C::IsInitialized' has a wrong offset!");
static_assert(offsetof(UBP_AchievementManager_C, OnAchievementUnlocked) == 0x0000B8, "Member 'UBP_AchievementManager_C::OnAchievementUnlocked' has a wrong offset!");

}

