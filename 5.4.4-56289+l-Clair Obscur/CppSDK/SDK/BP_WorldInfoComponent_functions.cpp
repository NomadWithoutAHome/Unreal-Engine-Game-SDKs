#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldInfoComponent

#include "Basic.hpp"

#include "BP_WorldInfoComponent_classes.hpp"
#include "BP_WorldInfoComponent_parameters.hpp"


namespace SDK
{

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.AddAggroLockOnAllEnemies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      LockName                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::AddAggroLockOnAllEnemies(const class FName& LockName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "AddAggroLockOnAllEnemies");

	Params::BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies Parms{};

	Parms.LockName = LockName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.ComputeDistanceToClosestEnemy
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WorldInfoComponent_C::ComputeDistanceToClosestEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "ComputeDistanceToClosestEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.ExecuteUbergraph_BP_WorldInfoComponent
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::ExecuteUbergraph_BP_WorldInfoComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "ExecuteUbergraph_BP_WorldInfoComponent");

	Params::BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetAllAliveEnemies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*>*Enemies                                                (Parm, OutParm)

void UBP_WorldInfoComponent_C::GetAllAliveEnemies(TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*>* Enemies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "GetAllAliveEnemies");

	Params::BP_WorldInfoComponent_C_GetAllAliveEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Enemies != nullptr)
		*Enemies = std::move(Parms.Enemies);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetAllTeleportPoints
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABP_jRPG_MapTeleportPoint_C*>*TeleportPoints                                         (Parm, OutParm)

void UBP_WorldInfoComponent_C::GetAllTeleportPoints(TArray<class ABP_jRPG_MapTeleportPoint_C*>* TeleportPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "GetAllTeleportPoints");

	Params::BP_WorldInfoComponent_C_GetAllTeleportPoints Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TeleportPoints != nullptr)
		*TeleportPoints = std::move(Parms.TeleportPoints);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetDistanceToClosestEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 DistanceToClosestEnemy_0                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::GetDistanceToClosestEnemy(double* DistanceToClosestEnemy_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "GetDistanceToClosestEnemy");

	Params::BP_WorldInfoComponent_C_GetDistanceToClosestEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DistanceToClosestEnemy_0 != nullptr)
		*DistanceToClosestEnemy_0 = Parms.DistanceToClosestEnemy_0;
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetEnemiesWithGlobalObjectID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             GlobalObjectID                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*>*Enemies                                                (Parm, OutParm)

void UBP_WorldInfoComponent_C::GetEnemiesWithGlobalObjectID(class FName GlobalObjectID, TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*>* Enemies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "GetEnemiesWithGlobalObjectID");

	Params::BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID Parms{};

	Parms.GlobalObjectID = GlobalObjectID;

	UObject::ProcessEvent(Func, &Parms);

	if (Enemies != nullptr)
		*Enemies = std::move(Parms.Enemies);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetMaximumLevelGapToChasePlayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  MaximumLevelGapToChasePlayer_0                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::GetMaximumLevelGapToChasePlayer(int32* MaximumLevelGapToChasePlayer_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "GetMaximumLevelGapToChasePlayer");

	Params::BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaximumLevelGapToChasePlayer_0 != nullptr)
		*MaximumLevelGapToChasePlayer_0 = Parms.MaximumLevelGapToChasePlayer_0;
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "ReceiveTick");

	Params::BP_WorldInfoComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.RegisterTeleportPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_jRPG_MapTeleportPoint_C*&InTeleportPoint                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::RegisterTeleportPoint(const class ABP_jRPG_MapTeleportPoint_C*& InTeleportPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "RegisterTeleportPoint");

	Params::BP_WorldInfoComponent_C_RegisterTeleportPoint Parms{};

	Parms.InTeleportPoint = InTeleportPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.RegisterWorldEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Enemy_World_Base_Seamless_C*Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::RegisterWorldEnemy(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "RegisterWorldEnemy");

	Params::BP_WorldInfoComponent_C_RegisterWorldEnemy Parms{};

	Parms.Enemy = Enemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.RemoveAggroLockOnAllEnemies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      LockName                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::RemoveAggroLockOnAllEnemies(const class FName& LockName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "RemoveAggroLockOnAllEnemies");

	Params::BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies Parms{};

	Parms.LockName = LockName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.StopChasingForAllEnemies
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_WorldInfoComponent_C::StopChasingForAllEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "StopChasingForAllEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.UnregisterTeleportPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class ABP_jRPG_MapTeleportPoint_C*&InTeleportPoint                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::UnregisterTeleportPoint(const class ABP_jRPG_MapTeleportPoint_C*& InTeleportPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "UnregisterTeleportPoint");

	Params::BP_WorldInfoComponent_C_UnregisterTeleportPoint Parms{};

	Parms.InTeleportPoint = InTeleportPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.UnregisterWorldEnemy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Enemy_World_Base_Seamless_C*Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::UnregisterWorldEnemy(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "UnregisterWorldEnemy");

	Params::BP_WorldInfoComponent_C_UnregisterWorldEnemy Parms{};

	Parms.Enemy = Enemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.UpdateWorldEnemyState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Enemy_World_Base_Seamless_C*Enemy                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// E_EnemyWorldState                       EnemyState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WorldInfoComponent_C::UpdateWorldEnemyState(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy, E_EnemyWorldState EnemyState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WorldInfoComponent_C", "UpdateWorldEnemyState");

	Params::BP_WorldInfoComponent_C_UpdateWorldEnemyState Parms{};

	Parms.Enemy = Enemy;
	Parms.EnemyState = EnemyState;

	UObject::ProcessEvent(Func, &Parms);
}

}

