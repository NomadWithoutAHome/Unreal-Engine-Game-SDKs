#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassCrowd

#include "Basic.hpp"

#include "MassReplication_structs.hpp"
#include "MassAIReplication_structs.hpp"
#include "MassAIBehavior_structs.hpp"
#include "ZoneGraphAnnotations_structs.hpp"
#include "ZoneGraph_structs.hpp"
#include "MassEntity_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MassCrowd.ECrowdLaneState
// NumValues: 0x0003
enum class ECrowdLaneState : uint8
{
	Opened                                   = 0,
	Closed                                   = 1,
	ECrowdLaneState_MAX                      = 2,
};

// ScriptStruct MassCrowd.ReplicatedCrowdAgent
// 0x0088 (0x00B0 - 0x0028)
struct FReplicatedCrowdAgent final : public FReplicatedAgentBase
{
public:
	struct FReplicatedAgentPathData               Path;                                              // 0x0028(0x0068)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	struct FReplicatedAgentPositionYawData        PositionYaw;                                       // 0x0090(0x0020)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FReplicatedCrowdAgent) == 0x000008, "Wrong alignment on FReplicatedCrowdAgent");
static_assert(sizeof(FReplicatedCrowdAgent) == 0x0000B0, "Wrong size on FReplicatedCrowdAgent");
static_assert(offsetof(FReplicatedCrowdAgent, Path) == 0x000028, "Member 'FReplicatedCrowdAgent::Path' has a wrong offset!");
static_assert(offsetof(FReplicatedCrowdAgent, PositionYaw) == 0x000090, "Member 'FReplicatedCrowdAgent::PositionYaw' has a wrong offset!");

// ScriptStruct MassCrowd.CrowdFastArrayItem
// 0x00B0 (0x00C0 - 0x0010)
struct FCrowdFastArrayItem final : public FMassFastArrayItemBase
{
public:
	struct FReplicatedCrowdAgent                  Agent;                                             // 0x0010(0x00B0)(NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrowdFastArrayItem) == 0x000008, "Wrong alignment on FCrowdFastArrayItem");
static_assert(sizeof(FCrowdFastArrayItem) == 0x0000C0, "Wrong size on FCrowdFastArrayItem");
static_assert(offsetof(FCrowdFastArrayItem, Agent) == 0x000010, "Member 'FCrowdFastArrayItem::Agent' has a wrong offset!");

// ScriptStruct MassCrowd.MassCrowdClientBubbleSerializer
// 0x0150 (0x0288 - 0x0138)
struct FMassCrowdClientBubbleSerializer final : public FMassClientBubbleSerializerBase
{
public:
	uint8                                         Pad_138[0x140];                                    // 0x0138(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCrowdFastArrayItem>            Crowd;                                             // 0x0278(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMassCrowdClientBubbleSerializer) == 0x000008, "Wrong alignment on FMassCrowdClientBubbleSerializer");
static_assert(sizeof(FMassCrowdClientBubbleSerializer) == 0x000288, "Wrong size on FMassCrowdClientBubbleSerializer");
static_assert(offsetof(FMassCrowdClientBubbleSerializer, Crowd) == 0x000278, "Member 'FMassCrowdClientBubbleSerializer::Crowd' has a wrong offset!");

// ScriptStruct MassCrowd.MassCrowdClaimWaitSlotTaskInstanceData
// 0x0070 (0x0070 - 0x0000)
struct FMassCrowdClaimWaitSlotTaskInstanceData final
{
public:
	struct FMassZoneGraphTargetLocation           WaitSlotLocation;                                  // 0x0000(0x0060)(Edit, NativeAccessSpecifierPublic)
	int32                                         WaitingSlotIndex;                                  // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneGraphLaneHandle                   AcquiredLane;                                      // 0x0064(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassCrowdClaimWaitSlotTaskInstanceData) == 0x000008, "Wrong alignment on FMassCrowdClaimWaitSlotTaskInstanceData");
static_assert(sizeof(FMassCrowdClaimWaitSlotTaskInstanceData) == 0x000070, "Wrong size on FMassCrowdClaimWaitSlotTaskInstanceData");
static_assert(offsetof(FMassCrowdClaimWaitSlotTaskInstanceData, WaitSlotLocation) == 0x000000, "Member 'FMassCrowdClaimWaitSlotTaskInstanceData::WaitSlotLocation' has a wrong offset!");
static_assert(offsetof(FMassCrowdClaimWaitSlotTaskInstanceData, WaitingSlotIndex) == 0x000060, "Member 'FMassCrowdClaimWaitSlotTaskInstanceData::WaitingSlotIndex' has a wrong offset!");
static_assert(offsetof(FMassCrowdClaimWaitSlotTaskInstanceData, AcquiredLane) == 0x000064, "Member 'FMassCrowdClaimWaitSlotTaskInstanceData::AcquiredLane' has a wrong offset!");

// ScriptStruct MassCrowd.MassCrowdClaimWaitSlotTask
// 0x0018 (0x0040 - 0x0028)
struct FMassCrowdClaimWaitSlotTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassCrowdClaimWaitSlotTask) == 0x000008, "Wrong alignment on FMassCrowdClaimWaitSlotTask");
static_assert(sizeof(FMassCrowdClaimWaitSlotTask) == 0x000040, "Wrong size on FMassCrowdClaimWaitSlotTask");

// ScriptStruct MassCrowd.MassCrowdTag
// 0x0000 (0x0001 - 0x0001)
struct FMassCrowdTag final : public FMassTag
{
};
static_assert(alignof(FMassCrowdTag) == 0x000001, "Wrong alignment on FMassCrowdTag");
static_assert(sizeof(FMassCrowdTag) == 0x000001, "Wrong size on FMassCrowdTag");

// ScriptStruct MassCrowd.MassCrowdLaneTrackingFragment
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FMassCrowdLaneTrackingFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassCrowdLaneTrackingFragment) == 0x000004, "Wrong alignment on FMassCrowdLaneTrackingFragment");
static_assert(sizeof(FMassCrowdLaneTrackingFragment) == 0x000008, "Wrong size on FMassCrowdLaneTrackingFragment");

// ScriptStruct MassCrowd.MassCrowdObstacleFragment
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FMassCrowdObstacleFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassCrowdObstacleFragment) == 0x000008, "Wrong alignment on FMassCrowdObstacleFragment");
static_assert(sizeof(FMassCrowdObstacleFragment) == 0x000028, "Wrong size on FMassCrowdObstacleFragment");

// ScriptStruct MassCrowd.MassCrowdLaneDensityDesc
// 0x000C (0x000C - 0x0000)
struct FMassCrowdLaneDensityDesc final
{
public:
	struct FZoneGraphTag                          Tag;                                               // 0x0000(0x0001)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Weight;                                            // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 RenderColor;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassCrowdLaneDensityDesc) == 0x000004, "Wrong alignment on FMassCrowdLaneDensityDesc");
static_assert(sizeof(FMassCrowdLaneDensityDesc) == 0x00000C, "Wrong size on FMassCrowdLaneDensityDesc");
static_assert(offsetof(FMassCrowdLaneDensityDesc, Tag) == 0x000000, "Member 'FMassCrowdLaneDensityDesc::Tag' has a wrong offset!");
static_assert(offsetof(FMassCrowdLaneDensityDesc, Weight) == 0x000004, "Member 'FMassCrowdLaneDensityDesc::Weight' has a wrong offset!");
static_assert(offsetof(FMassCrowdLaneDensityDesc, RenderColor) == 0x000008, "Member 'FMassCrowdLaneDensityDesc::RenderColor' has a wrong offset!");

// ScriptStruct MassCrowd.CrowdTrackingLaneData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FCrowdTrackingLaneData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrowdTrackingLaneData) == 0x000004, "Wrong alignment on FCrowdTrackingLaneData");
static_assert(sizeof(FCrowdTrackingLaneData) == 0x000008, "Wrong size on FCrowdTrackingLaneData");

// ScriptStruct MassCrowd.CrowdWaitSlot
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FCrowdWaitSlot final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrowdWaitSlot) == 0x000008, "Wrong alignment on FCrowdWaitSlot");
static_assert(sizeof(FCrowdWaitSlot) == 0x000038, "Wrong size on FCrowdWaitSlot");

// ScriptStruct MassCrowd.CrowdWaitAreaData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FCrowdWaitAreaData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrowdWaitAreaData) == 0x000008, "Wrong alignment on FCrowdWaitAreaData");
static_assert(sizeof(FCrowdWaitAreaData) == 0x000028, "Wrong size on FCrowdWaitAreaData");

// ScriptStruct MassCrowd.CrowdBranchingLaneData
// 0x0004 (0x0004 - 0x0000)
struct alignas(0x04) FCrowdBranchingLaneData final
{
public:
	uint8                                         Pad_0[0x4];                                        // 0x0000(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCrowdBranchingLaneData) == 0x000004, "Wrong alignment on FCrowdBranchingLaneData");
static_assert(sizeof(FCrowdBranchingLaneData) == 0x000004, "Wrong size on FCrowdBranchingLaneData");

// ScriptStruct MassCrowd.ZoneGraphCrowdLaneData
// 0x0001 (0x0001 - 0x0000)
struct FZoneGraphCrowdLaneData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoneGraphCrowdLaneData) == 0x000001, "Wrong alignment on FZoneGraphCrowdLaneData");
static_assert(sizeof(FZoneGraphCrowdLaneData) == 0x000001, "Wrong size on FZoneGraphCrowdLaneData");

// ScriptStruct MassCrowd.MassZoneGraphFindWanderTargetInstanceData
// 0x0060 (0x0060 - 0x0000)
struct FMassZoneGraphFindWanderTargetInstanceData final
{
public:
	struct FMassZoneGraphTargetLocation           WanderTargetLocation;                              // 0x0000(0x0060)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassZoneGraphFindWanderTargetInstanceData) == 0x000008, "Wrong alignment on FMassZoneGraphFindWanderTargetInstanceData");
static_assert(sizeof(FMassZoneGraphFindWanderTargetInstanceData) == 0x000060, "Wrong size on FMassZoneGraphFindWanderTargetInstanceData");
static_assert(offsetof(FMassZoneGraphFindWanderTargetInstanceData, WanderTargetLocation) == 0x000000, "Member 'FMassZoneGraphFindWanderTargetInstanceData::WanderTargetLocation' has a wrong offset!");

// ScriptStruct MassCrowd.MassZoneGraphFindWanderTarget
// 0x0028 (0x0050 - 0x0028)
struct FMassZoneGraphFindWanderTarget final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneGraphTagFilter                    AllowedAnnotationTags;                             // 0x0040(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphFindWanderTarget) == 0x000008, "Wrong alignment on FMassZoneGraphFindWanderTarget");
static_assert(sizeof(FMassZoneGraphFindWanderTarget) == 0x000050, "Wrong size on FMassZoneGraphFindWanderTarget");
static_assert(offsetof(FMassZoneGraphFindWanderTarget, AllowedAnnotationTags) == 0x000040, "Member 'FMassZoneGraphFindWanderTarget::AllowedAnnotationTags' has a wrong offset!");

// ScriptStruct MassCrowd.ZoneGraphCrowdLaneStateChangeEvent
// 0x000C (0x000C - 0x0000)
struct FZoneGraphCrowdLaneStateChangeEvent final : public FZoneGraphAnnotationEventBase
{
public:
	struct FZoneGraphLaneHandle                   Lane;                                              // 0x0000(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECrowdLaneState                               State;                                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoneGraphCrowdLaneStateChangeEvent) == 0x000004, "Wrong alignment on FZoneGraphCrowdLaneStateChangeEvent");
static_assert(sizeof(FZoneGraphCrowdLaneStateChangeEvent) == 0x00000C, "Wrong size on FZoneGraphCrowdLaneStateChangeEvent");
static_assert(offsetof(FZoneGraphCrowdLaneStateChangeEvent, Lane) == 0x000000, "Member 'FZoneGraphCrowdLaneStateChangeEvent::Lane' has a wrong offset!");
static_assert(offsetof(FZoneGraphCrowdLaneStateChangeEvent, State) == 0x000008, "Member 'FZoneGraphCrowdLaneStateChangeEvent::State' has a wrong offset!");

}

