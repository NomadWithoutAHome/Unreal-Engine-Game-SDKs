#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_TargetingHelpers

#include "Basic.hpp"

#include "ECharacterTeamSelector_structs.hpp"
#include "Engine_classes.hpp"
#include "EAliveStatus_structs.hpp"
#include "ENumericValueQuery_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "E_jRPG_TargetingType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_TargetingHelpers.FL_TargetingHelpers_C
// 0x0000 (0x0028 - 0x0028)
class UFL_TargetingHelpers_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetRandomCharacterByBuffCritera(ECharacterTeamSelector Team, class UClass* Buff, EAliveStatus AliveStatus, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Character);
	static void GetCharacterByAP(ECharacterTeamSelector Team, ENumericValueQuery ValueCriteria, EAliveStatus AliveStatus, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** BestCharacter);
	static void GetCharacterByHP(ECharacterTeamSelector Team, ENumericValueQuery ValueCriteria, EAliveStatus AliveStatus, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** BestCharacter);
	static void GetCharacterByFloatCriteria(TArray<class ABP_jRPG_Character_Battle_Base_C*>& Characters, TArray<double>& Values, ENumericValueQuery ValueQuery, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Character);
	static void GetAllCharactersFromTeam(ECharacterTeamSelector Team, EAliveStatus AliveStatus, class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Characters);
	static void GetCharacterByStatCriteria(ECharacterTeamSelector Team, E_jRPG_StatType StatType, ENumericValueQuery ValueCriteria, EAliveStatus AliveStatus, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** BestCharacter);
	static int32 GetBattleSpotCount(class UObject* __WorldContext);
	static void GetSpecificHero(int32 SpotIndex, bool RandomIfDead, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Character);
	static void GetAllEnemies(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Enemies);
	static bool IsTargetingTypeAlly(E_jRPG_TargetingType TargetingType, class UObject* __WorldContext);

	void GetAllHeroesAliveAndDead(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Target_Heroes);
	void GetAllAliveEnemies(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Target_Heroes);
	void GetAllAliveEnemiesInternal(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Output);
	void GetHeroWithHighestHealth(class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Output);
	void GetHeroWithLowestHealth(class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Output);
	void GetAllHeroes(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Target_Heroes);
	void GetAllAliveHeroes(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Target_Heroes);
	void GetAllAliveHeroesInternal(class UObject* __WorldContext, TArray<class ABP_jRPG_Character_Battle_Base_C*>* Output);
	void GetMiddleHero(bool RandomIfDead, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** MiddleHero);
	void GetAliveHero(class ABP_jRPG_Character_Battle_Base_C* Target, class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Output);
	void GetRandomAliveHero(class UObject* __WorldContext, class ABP_jRPG_Character_Battle_Base_C** Output);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_TargetingHelpers_C">();
	}
	static class UFL_TargetingHelpers_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_TargetingHelpers_C>();
	}
};
static_assert(alignof(UFL_TargetingHelpers_C) == 0x000008, "Wrong alignment on UFL_TargetingHelpers_C");
static_assert(sizeof(UFL_TargetingHelpers_C) == 0x000028, "Wrong size on UFL_TargetingHelpers_C");

}

