#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Battle_SkillScript

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EAttackType_structs.hpp"
#include "EBuffApplicationProbability_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Battle_SkillScript.BP_Battle_SkillScript_C
// 0x0070 (0x0300 - 0x0290)
class ABP_Battle_SkillScript_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_BattleManager_C*               BattleManagerReference;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       CurrentCharacter;                                  // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnSkillExecutionFinished;                          // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> TargetCharactersOverride;                        // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          WasFirstAcquireTargetsOverriden;                   // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SkillState_C*                       SkillState;                                        // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsCostCanceled;                                    // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCostCancelLocked;                                // 0x02E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E2[0x2];                                      // 0x02E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExecutionCount;                                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> ForcedSkillPreviousTargets;                      // 0x02E8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          AllowPlayerChoice;                                 // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AcquireTargets(TArray<class ABP_jRPG_Character_Battle_Base_C*>& DesiredTargetCharacters, TArray<class ABP_jRPG_Character_Battle_Base_C*>* AcquiredTargetCharacters);
	void ApplyBuff(class UClass* BuffClass, class UAC_jRPG_CharacterBattleStats_C* TargetCharacter, int32 TurnDuration, class UAC_jRPG_CharacterBattleStats_C* SourceCharacterIfNotSelf, EBuffApplicationProbability StatusEffectProbability, class UBP_BattleBuffInstance_C** CreatedBuffInstance);
	void AreAllAlive(TArray<class ABP_jRPG_Character_Battle_Base_C*>& CharacterList, bool* SomeAreAlive);
	void CameraShake(class UClass* CameraShake_0, double Scale);
	void CancelSkillCost();
	void Check_Target_Buff(class UAC_jRPG_CharacterBattleStats_C* Target, class UClass* BuffClass, bool* HasBuff);
	bool DoesForcedSkillAllowPlayerChoice();
	void ExecuteSkill_Internal();
	void ExecuteUbergraph_BP_Battle_SkillScript(int32 EntryPoint);
	void ForceSkillOnNextTurn(bool AllowPlayerChoice_0);
	void GetCurrentCharacter(class ABP_jRPG_Character_Battle_Base_C** CurrentCharacter_0);
	int32 GetForcedSkillExecutionCount();
	TArray<class ABP_jRPG_Character_Battle_Base_C*> GetForcedSkillPreviousTargets();
	void GetSkillCostOverride(bool* Override, int32* NewValue);
	class UBP_DataAsset_Skill_C* GetSkillDefinition();
	EAttackType GetSkillElement();
	void GetTargetedCharacters(TArray<class ABP_jRPG_Character_Battle_Base_C*>* TargetedCharacters);
	void LockSkillCostCancelInternal();
	void OnActionEffect();
	void OnExecuteSkill();
	void ResetSkillScriptState();
	bool ShouldBlockForcedOverchargeFeedback();
	void ShowPlayerChoice();
	void UserConstructionScript();
	void ValidateSkillAvailability(bool* Available, struct FS_BlockedActionFeedback* BlockedReason);
	void ValidateSkillTargets(TArray<class UAC_jRPG_CharacterBattleStats_C*>& TargetCharacterStats, bool* ValidTargets, struct FS_BlockedActionFeedback* BlockedReason);
	bool WasSkillCostCanceled();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Battle_SkillScript_C">();
	}
	static class ABP_Battle_SkillScript_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Battle_SkillScript_C>();
	}
};
static_assert(alignof(ABP_Battle_SkillScript_C) == 0x000008, "Wrong alignment on ABP_Battle_SkillScript_C");
static_assert(sizeof(ABP_Battle_SkillScript_C) == 0x000300, "Wrong size on ABP_Battle_SkillScript_C");
static_assert(offsetof(ABP_Battle_SkillScript_C, UberGraphFrame) == 0x000290, "Member 'ABP_Battle_SkillScript_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_Battle_SkillScript_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, BattleManagerReference) == 0x0002A0, "Member 'ABP_Battle_SkillScript_C::BattleManagerReference' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, CurrentCharacter) == 0x0002A8, "Member 'ABP_Battle_SkillScript_C::CurrentCharacter' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, OnSkillExecutionFinished) == 0x0002B0, "Member 'ABP_Battle_SkillScript_C::OnSkillExecutionFinished' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, TargetCharactersOverride) == 0x0002C0, "Member 'ABP_Battle_SkillScript_C::TargetCharactersOverride' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, WasFirstAcquireTargetsOverriden) == 0x0002D0, "Member 'ABP_Battle_SkillScript_C::WasFirstAcquireTargetsOverriden' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, SkillState) == 0x0002D8, "Member 'ABP_Battle_SkillScript_C::SkillState' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, IsCostCanceled) == 0x0002E0, "Member 'ABP_Battle_SkillScript_C::IsCostCanceled' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, IsCostCancelLocked) == 0x0002E1, "Member 'ABP_Battle_SkillScript_C::IsCostCancelLocked' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, ExecutionCount) == 0x0002E4, "Member 'ABP_Battle_SkillScript_C::ExecutionCount' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, ForcedSkillPreviousTargets) == 0x0002E8, "Member 'ABP_Battle_SkillScript_C::ForcedSkillPreviousTargets' has a wrong offset!");
static_assert(offsetof(ABP_Battle_SkillScript_C, AllowPlayerChoice) == 0x0002F8, "Member 'ABP_Battle_SkillScript_C::AllowPlayerChoice' has a wrong offset!");

}

