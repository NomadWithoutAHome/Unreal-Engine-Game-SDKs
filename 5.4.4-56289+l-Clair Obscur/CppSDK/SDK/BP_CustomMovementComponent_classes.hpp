#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CustomMovementComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "SCustomMoveZone_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CustomMovementComponent.BP_CustomMovementComponent_C
// 0x0260 (0x0300 - 0x00A0)
class UBP_CustomMovementComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        LadderStepPos;                                     // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLadderForNextAnimation;                          // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LadderBlendTimeForAnimation;                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LadderMoveSpeed;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NextHold;                                          // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_CustomMoveZone_Climbing_C> NextHoldInterface;                        // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsMovingNextHoldForAnimation;                      // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MovingNextHoldTransitionAlphaForAnimation;         // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MovingNextHoldTransitionDeltaForAnimation;         // 0x00F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         OverlappedClimbingHolds;                           // 0x0108(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                ClimbingLocation;                                  // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               ClimbingRotation;                                  // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClimbingForNextAnimation;                        // 0x0148(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        ClimbingBlendTimeForAnimation;                     // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NextHoldIsFarHold;                                 // 0x0158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxClimbingDistance;                               // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSCustomMoveZone                       OverlappedCustomMoveZone;                          // 0x0168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSCustomMoveZone                       CurrentCustomMoveZone;                             // 0x0178(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTransitioningCustomMoveZone;                     // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                EnteringTransitionBeginLocation;                   // 0x0190(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EnteringTransitionEndLocation;                     // 0x01A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EnteringTransitionBeginRotation;                   // 0x01C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               EnteringTransitionEndRotation;                     // 0x01D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        MovementDeltaTime;                                 // 0x01F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrevUseControllerRotationYaw;                      // 0x01F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrevOrientRotationToMovement;                      // 0x01F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FA[0x6];                                      // 0x01FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Character;                                         // 0x0200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCharacterMovementComponent*            CharacterMovement;                                 // 0x0208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        EnteringLadderTopTimeline_Time;                    // 0x0210(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnteringLadderTopTimeline_Transition;              // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_EnteringLadderTop;                              // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnteringLadderMiddleTimeline_Time;                 // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnteringLadderMiddleTimeline_Transition;           // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnteringLadderBottomTimeline_Time;                 // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnteringLadderBottomTimeline_Transition;           // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnteringClimbingTopTimeline_Time;                  // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnteringClimbingTopTimeline_Transition;            // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        EnteringClimbingTimeline_Time;                     // 0x0258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            EnteringClimbingTimeline_Transition;               // 0x0260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MovingNextHoldTimeline_Time;                       // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovingNextHoldTimeline_PlayRate;                   // 0x0270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MovingNextHoldTimeline_TransitionLocation;         // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            MovingNextHoldTimeline_TransitionRotation;         // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_EnteringLadderBottom;                           // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ExitingLadderTop;                               // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ExitingLadderBottom;                            // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_EnteringClimbingTop;                            // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ExitingClimbingTop;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(double DeltaTime)> Timeline;                                       // 0x02B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnStartCustomMovement;                             // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnEndCustomMovement;                               // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          PrevUseControllerDesiredRotation;                  // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CooldDownBetweenMovingClimbing;                    // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmDistance_Climbing;                        // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmDistance_CustomHold;                      // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceWithNextHold;                              // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmDistance_Ladder;                          // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BeginOverlappedCustomMoveZone(const struct FSCustomMoveZone& CustomMoveZone);
	void BroadcastEnteringClimbing(const struct FSCustomMoveZone& CustomMoveZone);
	void BroadcastEnteringClimbingTop(const struct FSCustomMoveZone& CustomMoveZone);
	void BroadcastEnteringClimbingTopRootMotion();
	void BroadcastEnteringLadderBottom(const struct FSCustomMoveZone& CustomMoveZone);
	void BroadcastEnteringLadderBottomRootMotion();
	void BroadcastEnteringLadderMiddle(const struct FSCustomMoveZone& CustomMoveZone);
	void BroadcastEnteringLadderTop(const struct FSCustomMoveZone& CustomMoveZone);
	void BroadcastEnteringLadderTopRootMotion();
	void BroadcastExitingClimbing();
	void BroadcastExitingClimbingTop();
	void BroadcastExitingClimbingTopRootMotion();
	void BroadcastExitingLadderBottom();
	void BroadcastExitingLadderBottomRootMotion();
	void BroadcastExitingLadderMiddle();
	void BroadcastExitingLadderTop();
	void BroadcastExitingLadderTopRootMotion();
	void BroadcastMovingNextHold(class AActor* NextHold_0, bool IsFarHold);
	void CheckClimbingNextHold();
	void CheckEnteringCustomMoveZone();
	void CheckExitingClimbing(TScriptInterface<class IBPI_CustomMoveZone_Climbing_C> ClimbingInterface, double InputScale);
	void CheckExitingCustomMoveZone_Ladder(TScriptInterface<class IBPI_CustomMoveZone_Ladder_C> LadderInterface, double InputScale);
	void EndOverlappedCustomMoveZone(class AActor* CustomMoveZoneActor);
	void EnteringClimbing();
	void EnteringClimbingTop();
	void EnteringLadderBottom();
	void EnteringLadderMiddle();
	void EnteringLadderTop();
	void ExecuteUbergraph_BP_CustomMovementComponent(int32 EntryPoint);
	void ExitCustomMovement();
	void ExitingClimbing();
	void ExitingClimbingBottom();
	void ExitingClimbingTop();
	void ExitingLadderBottom();
	void ExitingLadderMiddle();
	void ExitingLadderTop();
	void FindClosestClimbingHold();
	void ForceExitCustomMovement();
	void GetCharacterNetSmoothLocation(struct FVector* CharacterLocation);
	void GetLadderStepPos(double* LadderStepPos_0);
	void GetMovingNextHoldTransitionAlpha(double* Alpha);
	bool HasAuthority();
	void Initialize(class ACharacter* Character_0);
	void InputAxis_ClimbingRight(double AxisValue);
	void InputAxis_ClimbingUp(double AxisValue);
	void InputAxis_LadderUp(double AxisValue);
	bool IsCustomMovement();
	bool IsLocallyControlled();
	void MovingNextHold(class AActor* NextHold_0, bool IsFarHold);
	void OnBlendOut_0B6052B147BA631DEB594C87771CD3C0(class FName NotifyName);
	void OnBlendOut_10C99DFB4BD067287B623280FDDB977B(class FName NotifyName);
	void OnBlendOut_1E7B60B146BC1DBEED18AD8A88F50900(class FName NotifyName);
	void OnBlendOut_7815B4404043DE25B6C892B2CE924B63(class FName NotifyName);
	void OnBlendOut_B8BEF53646A61DA7D191C7A89841AD91(class FName NotifyName);
	void OnCompleted_0B6052B147BA631DEB594C87771CD3C0(class FName NotifyName);
	void OnCompleted_10C99DFB4BD067287B623280FDDB977B(class FName NotifyName);
	void OnCompleted_1E7B60B146BC1DBEED18AD8A88F50900(class FName NotifyName);
	void OnCompleted_7815B4404043DE25B6C892B2CE924B63(class FName NotifyName);
	void OnCompleted_B8BEF53646A61DA7D191C7A89841AD91(class FName NotifyName);
	void OnEndCustomMovementInternal();
	void OnInterrupted_0B6052B147BA631DEB594C87771CD3C0(class FName NotifyName);
	void OnInterrupted_10C99DFB4BD067287B623280FDDB977B(class FName NotifyName);
	void OnInterrupted_1E7B60B146BC1DBEED18AD8A88F50900(class FName NotifyName);
	void OnInterrupted_7815B4404043DE25B6C892B2CE924B63(class FName NotifyName);
	void OnInterrupted_B8BEF53646A61DA7D191C7A89841AD91(class FName NotifyName);
	void OnNotifyBegin_0B6052B147BA631DEB594C87771CD3C0(class FName NotifyName);
	void OnNotifyBegin_10C99DFB4BD067287B623280FDDB977B(class FName NotifyName);
	void OnNotifyBegin_1E7B60B146BC1DBEED18AD8A88F50900(class FName NotifyName);
	void OnNotifyBegin_7815B4404043DE25B6C892B2CE924B63(class FName NotifyName);
	void OnNotifyBegin_B8BEF53646A61DA7D191C7A89841AD91(class FName NotifyName);
	void OnNotifyEnd_0B6052B147BA631DEB594C87771CD3C0(class FName NotifyName);
	void OnNotifyEnd_10C99DFB4BD067287B623280FDDB977B(class FName NotifyName);
	void OnNotifyEnd_1E7B60B146BC1DBEED18AD8A88F50900(class FName NotifyName);
	void OnNotifyEnd_7815B4404043DE25B6C892B2CE924B63(class FName NotifyName);
	void OnNotifyEnd_B8BEF53646A61DA7D191C7A89841AD91(class FName NotifyName);
	void OnStartCustomMovementInternal();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ServerEnteringClimbing(const struct FSCustomMoveZone& CustomMoveZone);
	void ServerEnteringClimbingTop(const struct FSCustomMoveZone& CustomMoveZone);
	void ServerEnteringClimbingTopRootMotion();
	void ServerEnteringLadderBottom(const struct FSCustomMoveZone& CustomMoveZone);
	void ServerEnteringLadderBottomRootMotion();
	void ServerEnteringLadderMiddle(const struct FSCustomMoveZone& CustomMoveZone);
	void ServerEnteringLadderTop(const struct FSCustomMoveZone& CustomMoveZone);
	void ServerEnteringLadderTopRootMotion();
	void ServerExitingClimbing();
	void ServerExitingClimbingTop();
	void ServerExitingClimbingTopRootMotion();
	void ServerExitingLadderBottom();
	void ServerExitingLadderBottomRootMotion();
	void ServerExitingLadderMiddle();
	void ServerExitingLadderTop();
	void ServerExitingLadderTopRootMotion();
	void ServerMovingNextHold(class AActor* NextHold_0, bool IsFarHold);
	void UpdateClimbingMovement();
	void UpdateCustomMovement(double DeltaTime);
	void UpdateEnteringClimbingTimeline(double DeltaTime);
	void UpdateEnteringClimbingTopTimeline(double DeltaTime);
	void UpdateEnteringLadderBottomTimeline(double DeltaTime);
	void UpdateEnteringLadderMiddleTimeline(double DeltaTime);
	void UpdateEnteringLadderTopTimeline(double DeltaTime);
	void UpdateEnteringTransition(double Transition);
	void UpdateLadderMovement();
	void UpdateMovingNextHoldTimeline(double DeltaTime);
	void UpdateRootMotion();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CustomMovementComponent_C">();
	}
	static class UBP_CustomMovementComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CustomMovementComponent_C>();
	}
};
static_assert(alignof(UBP_CustomMovementComponent_C) == 0x000008, "Wrong alignment on UBP_CustomMovementComponent_C");
static_assert(sizeof(UBP_CustomMovementComponent_C) == 0x000300, "Wrong size on UBP_CustomMovementComponent_C");
static_assert(offsetof(UBP_CustomMovementComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CustomMovementComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, LadderStepPos) == 0x0000A8, "Member 'UBP_CustomMovementComponent_C::LadderStepPos' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, IsLadderForNextAnimation) == 0x0000B0, "Member 'UBP_CustomMovementComponent_C::IsLadderForNextAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, LadderBlendTimeForAnimation) == 0x0000B8, "Member 'UBP_CustomMovementComponent_C::LadderBlendTimeForAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, LadderMoveSpeed) == 0x0000C0, "Member 'UBP_CustomMovementComponent_C::LadderMoveSpeed' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, NextHold) == 0x0000C8, "Member 'UBP_CustomMovementComponent_C::NextHold' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, NextHoldInterface) == 0x0000D0, "Member 'UBP_CustomMovementComponent_C::NextHoldInterface' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, IsMovingNextHoldForAnimation) == 0x0000E0, "Member 'UBP_CustomMovementComponent_C::IsMovingNextHoldForAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovingNextHoldTransitionAlphaForAnimation) == 0x0000E8, "Member 'UBP_CustomMovementComponent_C::MovingNextHoldTransitionAlphaForAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovingNextHoldTransitionDeltaForAnimation) == 0x0000F0, "Member 'UBP_CustomMovementComponent_C::MovingNextHoldTransitionDeltaForAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, OverlappedClimbingHolds) == 0x000108, "Member 'UBP_CustomMovementComponent_C::OverlappedClimbingHolds' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, ClimbingLocation) == 0x000118, "Member 'UBP_CustomMovementComponent_C::ClimbingLocation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, ClimbingRotation) == 0x000130, "Member 'UBP_CustomMovementComponent_C::ClimbingRotation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, IsClimbingForNextAnimation) == 0x000148, "Member 'UBP_CustomMovementComponent_C::IsClimbingForNextAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, ClimbingBlendTimeForAnimation) == 0x000150, "Member 'UBP_CustomMovementComponent_C::ClimbingBlendTimeForAnimation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, NextHoldIsFarHold) == 0x000158, "Member 'UBP_CustomMovementComponent_C::NextHoldIsFarHold' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MaxClimbingDistance) == 0x000160, "Member 'UBP_CustomMovementComponent_C::MaxClimbingDistance' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, OverlappedCustomMoveZone) == 0x000168, "Member 'UBP_CustomMovementComponent_C::OverlappedCustomMoveZone' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, CurrentCustomMoveZone) == 0x000178, "Member 'UBP_CustomMovementComponent_C::CurrentCustomMoveZone' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, IsTransitioningCustomMoveZone) == 0x000188, "Member 'UBP_CustomMovementComponent_C::IsTransitioningCustomMoveZone' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringTransitionBeginLocation) == 0x000190, "Member 'UBP_CustomMovementComponent_C::EnteringTransitionBeginLocation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringTransitionEndLocation) == 0x0001A8, "Member 'UBP_CustomMovementComponent_C::EnteringTransitionEndLocation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringTransitionBeginRotation) == 0x0001C0, "Member 'UBP_CustomMovementComponent_C::EnteringTransitionBeginRotation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringTransitionEndRotation) == 0x0001D8, "Member 'UBP_CustomMovementComponent_C::EnteringTransitionEndRotation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovementDeltaTime) == 0x0001F0, "Member 'UBP_CustomMovementComponent_C::MovementDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, PrevUseControllerRotationYaw) == 0x0001F8, "Member 'UBP_CustomMovementComponent_C::PrevUseControllerRotationYaw' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, PrevOrientRotationToMovement) == 0x0001F9, "Member 'UBP_CustomMovementComponent_C::PrevOrientRotationToMovement' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, Character) == 0x000200, "Member 'UBP_CustomMovementComponent_C::Character' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, CharacterMovement) == 0x000208, "Member 'UBP_CustomMovementComponent_C::CharacterMovement' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringLadderTopTimeline_Time) == 0x000210, "Member 'UBP_CustomMovementComponent_C::EnteringLadderTopTimeline_Time' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringLadderTopTimeline_Transition) == 0x000218, "Member 'UBP_CustomMovementComponent_C::EnteringLadderTopTimeline_Transition' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, AM_EnteringLadderTop) == 0x000220, "Member 'UBP_CustomMovementComponent_C::AM_EnteringLadderTop' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringLadderMiddleTimeline_Time) == 0x000228, "Member 'UBP_CustomMovementComponent_C::EnteringLadderMiddleTimeline_Time' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringLadderMiddleTimeline_Transition) == 0x000230, "Member 'UBP_CustomMovementComponent_C::EnteringLadderMiddleTimeline_Transition' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringLadderBottomTimeline_Time) == 0x000238, "Member 'UBP_CustomMovementComponent_C::EnteringLadderBottomTimeline_Time' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringLadderBottomTimeline_Transition) == 0x000240, "Member 'UBP_CustomMovementComponent_C::EnteringLadderBottomTimeline_Transition' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringClimbingTopTimeline_Time) == 0x000248, "Member 'UBP_CustomMovementComponent_C::EnteringClimbingTopTimeline_Time' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringClimbingTopTimeline_Transition) == 0x000250, "Member 'UBP_CustomMovementComponent_C::EnteringClimbingTopTimeline_Transition' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringClimbingTimeline_Time) == 0x000258, "Member 'UBP_CustomMovementComponent_C::EnteringClimbingTimeline_Time' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, EnteringClimbingTimeline_Transition) == 0x000260, "Member 'UBP_CustomMovementComponent_C::EnteringClimbingTimeline_Transition' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovingNextHoldTimeline_Time) == 0x000268, "Member 'UBP_CustomMovementComponent_C::MovingNextHoldTimeline_Time' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovingNextHoldTimeline_PlayRate) == 0x000270, "Member 'UBP_CustomMovementComponent_C::MovingNextHoldTimeline_PlayRate' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovingNextHoldTimeline_TransitionLocation) == 0x000278, "Member 'UBP_CustomMovementComponent_C::MovingNextHoldTimeline_TransitionLocation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, MovingNextHoldTimeline_TransitionRotation) == 0x000280, "Member 'UBP_CustomMovementComponent_C::MovingNextHoldTimeline_TransitionRotation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, AM_EnteringLadderBottom) == 0x000288, "Member 'UBP_CustomMovementComponent_C::AM_EnteringLadderBottom' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, AM_ExitingLadderTop) == 0x000290, "Member 'UBP_CustomMovementComponent_C::AM_ExitingLadderTop' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, AM_ExitingLadderBottom) == 0x000298, "Member 'UBP_CustomMovementComponent_C::AM_ExitingLadderBottom' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, AM_EnteringClimbingTop) == 0x0002A0, "Member 'UBP_CustomMovementComponent_C::AM_EnteringClimbingTop' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, AM_ExitingClimbingTop) == 0x0002A8, "Member 'UBP_CustomMovementComponent_C::AM_ExitingClimbingTop' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, Timeline) == 0x0002B0, "Member 'UBP_CustomMovementComponent_C::Timeline' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, OnStartCustomMovement) == 0x0002C0, "Member 'UBP_CustomMovementComponent_C::OnStartCustomMovement' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, OnEndCustomMovement) == 0x0002D0, "Member 'UBP_CustomMovementComponent_C::OnEndCustomMovement' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, PrevUseControllerDesiredRotation) == 0x0002E0, "Member 'UBP_CustomMovementComponent_C::PrevUseControllerDesiredRotation' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, CooldDownBetweenMovingClimbing) == 0x0002E4, "Member 'UBP_CustomMovementComponent_C::CooldDownBetweenMovingClimbing' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, SpringArmDistance_Climbing) == 0x0002E8, "Member 'UBP_CustomMovementComponent_C::SpringArmDistance_Climbing' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, SpringArmDistance_CustomHold) == 0x0002EC, "Member 'UBP_CustomMovementComponent_C::SpringArmDistance_CustomHold' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, DistanceWithNextHold) == 0x0002F0, "Member 'UBP_CustomMovementComponent_C::DistanceWithNextHold' has a wrong offset!");
static_assert(offsetof(UBP_CustomMovementComponent_C, SpringArmDistance_Ladder) == 0x0002F8, "Member 'UBP_CustomMovementComponent_C::SpringArmDistance_Ladder' has a wrong offset!");

}

