#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_jRPG_GameOverScreen

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "FSoundEvent_structs.hpp"
#include "EModalUIResponse_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_jRPG_GameOverScreen.WBP_jRPG_GameOverScreen_C
// 0x00E8 (0x0518 - 0x0430)
class UWBP_jRPG_GameOverScreen_C final : public UCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ReserveFadeOutCalled;                         // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FadeIn_ReserveTeamAvailable;                  // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_ReserveFadeOutGameOver;                       // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_ReserveFadeIn;                                // 0x0450(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Disappear;                                    // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_FadeIn_NoReserveTeam;                         // 0x0460(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBackgroundBlur*                        BackgroundBlur;                                    // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       BottomPattern;                                     // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       FailText;                                          // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNiagaraSystemWidget*                   FX_PetalExplosion;                                 // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       PaintOutline;                                      // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       TopPattern;                                        // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnClosed;                                          // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          SoftGameOverMessage;                               // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSoundEvent                           SD_GameOverMusic;                                  // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(bool ShouldSendReserve)> OnReserveTeamResponse;                    // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsReserveTeamAvailable;                            // 0x04C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    SD_SendReserveTeamWindow;                          // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_ExpeditionFailed;                               // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class USoundControlBusMix*                    ControlBusMix;                                     // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSoundEventDataTableRowHandle          SD_CanSendReserveTeam;                             // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SD_SendReserveTeam;                                // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)

public:
	void BP_OnActivated();
	void BP_OnDeactivated();
	void Construct();
	void Disappear(bool AutoDisappear);
	void ExecuteUbergraph_WBP_jRPG_GameOverScreen(int32 EntryPoint);
	void FadeInGameOverScreen();
	void FX_PetalExplosion_Event(class UNiagaraSystemWidget* FX_PetalExplosion_0);
	void GetTiedObject(class UObject** Object);
	void OnConstructTimerEnded();
	void OnDisappearEnd();
	void OnFadeInFinished();
	void OnFadeOutFinished();
	void OnModalResponse(EModalUIResponse InUserResponse);
	void OnReserveFadeInFinished();
	void OnUIAction();
	void OnUINavigationFocus(const class UBP_UINavigationFocusEvent_C* FocusEventBP);
	void OnUINavigationFocusLost();
	void PreConstruct(bool IsDesignTime);
	void SequenceEvent__ENTRYPOINTWBP_jRPG_GameOverScreen(class UNiagaraSystemWidget* FX_PetalExplosion_0);
	void ShowGameOverInstant();
	void StopMusic();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_jRPG_GameOverScreen_C">();
	}
	static class UWBP_jRPG_GameOverScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_jRPG_GameOverScreen_C>();
	}
};
static_assert(alignof(UWBP_jRPG_GameOverScreen_C) == 0x000008, "Wrong alignment on UWBP_jRPG_GameOverScreen_C");
static_assert(sizeof(UWBP_jRPG_GameOverScreen_C) == 0x000518, "Wrong size on UWBP_jRPG_GameOverScreen_C");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, UberGraphFrame) == 0x000430, "Member 'UWBP_jRPG_GameOverScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, Anim_ReserveFadeOutCalled) == 0x000438, "Member 'UWBP_jRPG_GameOverScreen_C::Anim_ReserveFadeOutCalled' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, Anim_FadeIn_ReserveTeamAvailable) == 0x000440, "Member 'UWBP_jRPG_GameOverScreen_C::Anim_FadeIn_ReserveTeamAvailable' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, Anim_ReserveFadeOutGameOver) == 0x000448, "Member 'UWBP_jRPG_GameOverScreen_C::Anim_ReserveFadeOutGameOver' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, Anim_ReserveFadeIn) == 0x000450, "Member 'UWBP_jRPG_GameOverScreen_C::Anim_ReserveFadeIn' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, Anim_Disappear) == 0x000458, "Member 'UWBP_jRPG_GameOverScreen_C::Anim_Disappear' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, Anim_FadeIn_NoReserveTeam) == 0x000460, "Member 'UWBP_jRPG_GameOverScreen_C::Anim_FadeIn_NoReserveTeam' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, BackgroundBlur) == 0x000468, "Member 'UWBP_jRPG_GameOverScreen_C::BackgroundBlur' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, BottomPattern) == 0x000470, "Member 'UWBP_jRPG_GameOverScreen_C::BottomPattern' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, FailText) == 0x000478, "Member 'UWBP_jRPG_GameOverScreen_C::FailText' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, FX_PetalExplosion) == 0x000480, "Member 'UWBP_jRPG_GameOverScreen_C::FX_PetalExplosion' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, PaintOutline) == 0x000488, "Member 'UWBP_jRPG_GameOverScreen_C::PaintOutline' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, TopPattern) == 0x000490, "Member 'UWBP_jRPG_GameOverScreen_C::TopPattern' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, OnClosed) == 0x000498, "Member 'UWBP_jRPG_GameOverScreen_C::OnClosed' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, SoftGameOverMessage) == 0x0004A8, "Member 'UWBP_jRPG_GameOverScreen_C::SoftGameOverMessage' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, SD_GameOverMusic) == 0x0004B0, "Member 'UWBP_jRPG_GameOverScreen_C::SD_GameOverMusic' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, OnReserveTeamResponse) == 0x0004B8, "Member 'UWBP_jRPG_GameOverScreen_C::OnReserveTeamResponse' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, IsReserveTeamAvailable) == 0x0004C8, "Member 'UWBP_jRPG_GameOverScreen_C::IsReserveTeamAvailable' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, SD_SendReserveTeamWindow) == 0x0004D0, "Member 'UWBP_jRPG_GameOverScreen_C::SD_SendReserveTeamWindow' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, SD_ExpeditionFailed) == 0x0004E0, "Member 'UWBP_jRPG_GameOverScreen_C::SD_ExpeditionFailed' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, ControlBusMix) == 0x0004F0, "Member 'UWBP_jRPG_GameOverScreen_C::ControlBusMix' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, SD_CanSendReserveTeam) == 0x0004F8, "Member 'UWBP_jRPG_GameOverScreen_C::SD_CanSendReserveTeam' has a wrong offset!");
static_assert(offsetof(UWBP_jRPG_GameOverScreen_C, SD_SendReserveTeam) == 0x000508, "Member 'UWBP_jRPG_GameOverScreen_C::SD_SendReserveTeam' has a wrong offset!");

}

