#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InteractiveMusicSystem

#include "Basic.hpp"

#include "S_InteractiveMusic_structs.hpp"
#include "SandFall_classes.hpp"
#include "Engine_structs.hpp"
#include "E_InteractiveMusicContext_structs.hpp"
#include "S_InteractiveMusicParameters_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InteractiveMusicSystem.BP_InteractiveMusicSystem_C
// 0x00A8 (0x00D0 - 0x0028)
class UBP_InteractiveMusicSystem_C final : public UExtendedObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<E_InteractiveMusicContext, struct FS_InteractiveMusic> InteractiveMusicByContext;           // 0x0030(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	E_InteractiveMusicContext                     CurrentContext;                                    // 0x0080(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAudioComponent*>                AudioComponentsToUnspawn;                          // 0x0088(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsStopped;                                         // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_InteractiveMusicContext>             InteractiveContextsToPause;                        // 0x00A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_InteractiveMusicParameters          PreviousInteractiveMusicParameters;                // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_InteractiveMusicContext                     PreviousExplorationInteractiveMusicContext;        // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AdjustVolumeByContext(float AdjustVolumeDuration, float AdjustVolumeLevel, E_InteractiveMusicContext Context);
	void AdjustVolumeCurrentContext(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void AdjustVolumeInteractiveMusicByContext(const E_InteractiveMusicContext& Context, float AdjustVolumeDuration, float AdjustVolumeLevel);
	void ApplyInteractiveMusicParameters(const struct FS_InteractiveMusicParameters& Parameters);
	void ComputeCurrentInteractiveMusicParameters(struct FS_InteractiveMusicParameters* InteractiveMusicParameters);
	void Create_New_Audio_Component(class USoundBase* Sound, class UAudioComponent** SpawnedComponent);
	void CreateInteractiveMusicWithContextIfNeeded(E_InteractiveMusicContext Context, class USoundBase* Sound, struct FS_InteractiveMusic* InteractiveMusic);
	void DestroyAllInteractiveMusicContexts();
	void ExecuteAudioTriggerByContext(const E_InteractiveMusicContext& Context, class FName AudioTrigger, bool IsInterruption);
	void ExecuteUbergraph_BP_InteractiveMusicSystem(int32 EntryPoint);
	void FadeOutInteractiveMusicByContext(const E_InteractiveMusicContext& Context, float AdjustVolumeDuration);
	class FString GetAudioComponentDebugString(class UAudioComponent* AudioComponent);
	void GetAudioTriggerNameForContextAndTable(class UDataTable* DataTable, E_InteractiveMusicContext Context, class FName* AudioTriggerName);
	void GetAudioTriggerNameWhenInterrupted(E_InteractiveMusicContext NewContext, class FName* AudioTriggerName);
	void GetAudioTriggerNameWhenInterrupting(E_InteractiveMusicContext CurrentContext_0, class FName* AudioTriggerName);
	void GetCurrentContext(E_InteractiveMusicContext* Context);
	void GetCurrentInteractiveMusic(struct FS_InteractiveMusic* InteractiveMusic);
	void GetCurrentSoundData(E_InteractiveMusicContext* Context, class USoundBase** Sound, class FName* LastAudioTrigger);
	void GetDebugString(class FString* String);
	void GetInteractiveMusicByContext(const E_InteractiveMusicContext& Context, struct FS_InteractiveMusic* InteractiveMusic);
	class FString GetInteractiveMusicDebugString(E_InteractiveMusicContext InteractiveMusicContext, const struct FS_InteractiveMusic& InteractiveMusic);
	class FString GetInteractiveMusicParametersDebugString(const struct FS_InteractiveMusicParameters& InteractiveMusicParameters);
	void GetSoundByContext(const E_InteractiveMusicContext& Context, class USoundBase** Sound, class FName* LastAudioTrigger);
	void Initialize();
	void InterruptInteractiveMusic(const E_InteractiveMusicContext& NewContext);
	void MarkAudioComponentForUnspawn(class UAudioComponent* AudioComponent);
	void OnAudioPlayStateChanged(EAudioComponentPlayState PlayState);
	void PauseInteractiveMusicCurrentContext();
	void PlayInteractiveMusicContext(E_InteractiveMusicContext Context);
	void PrintAudioTriggerName(E_InteractiveMusicContext Context, class FName AudioTriggerName);
	void PrintInteractiveMusicParameters(const struct FS_InteractiveMusicParameters& Parameters);
	void PrintInteractiveMusicStringInLog(const class FString& String);
	void ProcessMusicInterruption(E_InteractiveMusicContext NewContext);
	void PushInteractiveMusicContext(const struct FS_InteractiveMusicParameters& InteractiveMusicParameters);
	void ReplaceInteractiveMusicContext(const struct FS_InteractiveMusicParameters& Parameters);
	void RestoreExplorationCurrentInteractiveMusicContext();
	void RestorePreviousInteractiveMusicParameters();
	void ResumeInteractiveMusicSystemWithContext(E_InteractiveMusicContext Context);
	void SaveCurrentInteractiveMusicParameters();
	void SaveExplorationCurrentInteractiveMusicContext();
	void SetDebugDrawEnabled(bool Enable);
	void SetFloatParameterByContext(const E_InteractiveMusicContext Context, class FName ParameterName, float Value);
	void SetInteractiveMusicPaused(E_InteractiveMusicContext Context, bool bPause);
	bool ShouldPauseMusic(const E_InteractiveMusicContext& NewContext);
	void StopInteractiveMusicSystem(float FadeOutDuration);
	void SwitchInteractiveMusicContext(const struct FS_InteractiveMusicParameters& Parameters);
	void UnpauseInteractiveMusicCurrentContext();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InteractiveMusicSystem_C">();
	}
	static class UBP_InteractiveMusicSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InteractiveMusicSystem_C>();
	}
};
static_assert(alignof(UBP_InteractiveMusicSystem_C) == 0x000008, "Wrong alignment on UBP_InteractiveMusicSystem_C");
static_assert(sizeof(UBP_InteractiveMusicSystem_C) == 0x0000D0, "Wrong size on UBP_InteractiveMusicSystem_C");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, UberGraphFrame) == 0x000028, "Member 'UBP_InteractiveMusicSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, InteractiveMusicByContext) == 0x000030, "Member 'UBP_InteractiveMusicSystem_C::InteractiveMusicByContext' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, CurrentContext) == 0x000080, "Member 'UBP_InteractiveMusicSystem_C::CurrentContext' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, AudioComponentsToUnspawn) == 0x000088, "Member 'UBP_InteractiveMusicSystem_C::AudioComponentsToUnspawn' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, IsStopped) == 0x000098, "Member 'UBP_InteractiveMusicSystem_C::IsStopped' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, InteractiveContextsToPause) == 0x0000A0, "Member 'UBP_InteractiveMusicSystem_C::InteractiveContextsToPause' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, PreviousInteractiveMusicParameters) == 0x0000B0, "Member 'UBP_InteractiveMusicSystem_C::PreviousInteractiveMusicParameters' has a wrong offset!");
static_assert(offsetof(UBP_InteractiveMusicSystem_C, PreviousExplorationInteractiveMusicContext) == 0x0000C8, "Member 'UBP_InteractiveMusicSystem_C::PreviousExplorationInteractiveMusicContext' has a wrong offset!");

}

