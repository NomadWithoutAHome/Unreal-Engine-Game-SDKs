#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_IndexSelectorComponent

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_GPE_IndexSelectorComponent.BP_GPE_IndexSelectorComponent_C.GetNextIndex
// 0x002C (0x002C - 0x0000)
struct BP_GPE_IndexSelectorComponent_C_GetNextIndex final
{
public:
	int32                                         ArrayLength;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Get_Item;                           // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_2;            // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_IndexSelectorComponent_C_GetNextIndex) == 0x000004, "Wrong alignment on BP_GPE_IndexSelectorComponent_C_GetNextIndex");
static_assert(sizeof(BP_GPE_IndexSelectorComponent_C_GetNextIndex) == 0x00002C, "Wrong size on BP_GPE_IndexSelectorComponent_C_GetNextIndex");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, ArrayLength) == 0x000000, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::ArrayLength' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, Index_0) == 0x000004, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::Index_0' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_RandomInteger_ReturnValue) == 0x00000C, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Array_AddUnique_ReturnValue) == 0x000010, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000014, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Array_Get_Item) == 0x00001C, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Array_AddUnique_ReturnValue_2) == 0x000024, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Array_AddUnique_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetNextIndex, CallFunc_Percent_IntInt_ReturnValue) == 0x000028, "Member 'BP_GPE_IndexSelectorComponent_C_GetNextIndex::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GPE_IndexSelectorComponent.BP_GPE_IndexSelectorComponent_C.GetUsedIndexes
// 0x0010 (0x0010 - 0x0000)
struct BP_GPE_IndexSelectorComponent_C_GetUsedIndexes final
{
public:
	TArray<int32>                                 Indexes;                                           // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_GPE_IndexSelectorComponent_C_GetUsedIndexes) == 0x000008, "Wrong alignment on BP_GPE_IndexSelectorComponent_C_GetUsedIndexes");
static_assert(sizeof(BP_GPE_IndexSelectorComponent_C_GetUsedIndexes) == 0x000010, "Wrong size on BP_GPE_IndexSelectorComponent_C_GetUsedIndexes");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_GetUsedIndexes, Indexes) == 0x000000, "Member 'BP_GPE_IndexSelectorComponent_C_GetUsedIndexes::Indexes' has a wrong offset!");

// Function BP_GPE_IndexSelectorComponent.BP_GPE_IndexSelectorComponent_C.InitShuffeIndexesIfNeeded
// 0x0020 (0x0020 - 0x0000)
struct BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded final
{
public:
	int32                                         ArrayLength;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded) == 0x000004, "Wrong alignment on BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded");
static_assert(sizeof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded) == 0x000020, "Wrong size on BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, ArrayLength) == 0x000000, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::ArrayLength' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, Temp_int_Variable) == 0x000008, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_NotEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000D, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000014, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00001C, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_BooleanAND_ReturnValue) == 0x00001D, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded, CallFunc_BooleanOR_ReturnValue) == 0x00001E, "Member 'BP_GPE_IndexSelectorComponent_C_InitShuffeIndexesIfNeeded::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_GPE_IndexSelectorComponent.BP_GPE_IndexSelectorComponent_C.ResetIndexes
// 0x0001 (0x0001 - 0x0000)
struct BP_GPE_IndexSelectorComponent_C_ResetIndexes final
{
public:
	bool                                          ResetCurrentIndex;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_IndexSelectorComponent_C_ResetIndexes) == 0x000001, "Wrong alignment on BP_GPE_IndexSelectorComponent_C_ResetIndexes");
static_assert(sizeof(BP_GPE_IndexSelectorComponent_C_ResetIndexes) == 0x000001, "Wrong size on BP_GPE_IndexSelectorComponent_C_ResetIndexes");
static_assert(offsetof(BP_GPE_IndexSelectorComponent_C_ResetIndexes, ResetCurrentIndex) == 0x000000, "Member 'BP_GPE_IndexSelectorComponent_C_ResetIndexes::ResetCurrentIndex' has a wrong offset!");

}

