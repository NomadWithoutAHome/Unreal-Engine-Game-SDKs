#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BT_FleeAiComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BT_FleeAiComponent.BT_FleeAiComponent_C
// 0x0058 (0x00F8 - 0x00A0)
class UBT_FleeAiComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TSoftObjectPtr<class ABP_FleePoint_C>         InitialFleePoint;                                  // 0x00A8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AAIController*                          AIController;                                      // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_FleePoint_C*                        CurrentFleePoint;                                  // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SpeedByDistanceCurve;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_FleePoint_C* Previous, class ABP_FleePoint_C* Current)> OnCurrentFleePointChanged; // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ExecuteUbergraph_BT_FleeAiComponent(int32 EntryPoint);
	void FindNextFleePoint(class AActor* PursuerActor, class ABP_FleePoint_C** FleePoint);
	void GetCurrentFleePoint(class ABP_FleePoint_C** FleePoint);
	void Initialize();
	void LoadState();
	void ReceiveBeginPlay();
	void ResetState();
	void ResetToInitialFleePoint();
	void SaveCurentFleePoint();
	void SetCurrentFleePoint(class ABP_FleePoint_C* FleePoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BT_FleeAiComponent_C">();
	}
	static class UBT_FleeAiComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBT_FleeAiComponent_C>();
	}
};
static_assert(alignof(UBT_FleeAiComponent_C) == 0x000008, "Wrong alignment on UBT_FleeAiComponent_C");
static_assert(sizeof(UBT_FleeAiComponent_C) == 0x0000F8, "Wrong size on UBT_FleeAiComponent_C");
static_assert(offsetof(UBT_FleeAiComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBT_FleeAiComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBT_FleeAiComponent_C, InitialFleePoint) == 0x0000A8, "Member 'UBT_FleeAiComponent_C::InitialFleePoint' has a wrong offset!");
static_assert(offsetof(UBT_FleeAiComponent_C, AIController) == 0x0000D0, "Member 'UBT_FleeAiComponent_C::AIController' has a wrong offset!");
static_assert(offsetof(UBT_FleeAiComponent_C, CurrentFleePoint) == 0x0000D8, "Member 'UBT_FleeAiComponent_C::CurrentFleePoint' has a wrong offset!");
static_assert(offsetof(UBT_FleeAiComponent_C, SpeedByDistanceCurve) == 0x0000E0, "Member 'UBT_FleeAiComponent_C::SpeedByDistanceCurve' has a wrong offset!");
static_assert(offsetof(UBT_FleeAiComponent_C, OnCurrentFleePointChanged) == 0x0000E8, "Member 'UBT_FleeAiComponent_C::OnCurrentFleePointChanged' has a wrong offset!");

}

