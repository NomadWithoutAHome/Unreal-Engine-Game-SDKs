#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ACTIVATELightingScenario

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ACTIVATELightingScenario.BP_ACTIVATELightingScenario_C
// 0x00A8 (0x0338 - 0x0290)
class ABP_ACTIVATELightingScenario_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   TextRender2;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   TextRender1;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          LightingScenario2_Trigger_Green;                   // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          LightingScenario1_Trigger_Purple;                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LightingScenarioReference_C> LightingScenario_1;                        // 0x02C0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_LightingScenarioReference_C> LightingScenario_2;                        // 0x02E8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class ULightComponent*                        DirectionalLightComponentReference;                // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class ULightComponent*                        DirectionalLightComponentMain;                     // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExpoFogComponentMain;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExpoFogComponentReference;                         // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         ChangeSpeedMultiplierSc1;                          // 0x0330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeSpeedMultiplierSc2;                          // 0x0334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnLightingScenarioChanged();
	void ExecuteUbergraph_BP_ACTIVATELightingScenario(int32 EntryPoint);
	void DEBUG_ActivateScenario2();
	void DEBUG_ActivateScenario1();
	void BndEvt__BP_LightingScenarioActivator_LightingScenario2_Trigger_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_LightingScenarioActivator_LightingScenario1_Trigger_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ACTIVATELightingScenario_C">();
	}
	static class ABP_ACTIVATELightingScenario_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ACTIVATELightingScenario_C>();
	}
};
static_assert(alignof(ABP_ACTIVATELightingScenario_C) == 0x000008, "Wrong alignment on ABP_ACTIVATELightingScenario_C");
static_assert(sizeof(ABP_ACTIVATELightingScenario_C) == 0x000338, "Wrong size on ABP_ACTIVATELightingScenario_C");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, UberGraphFrame) == 0x000290, "Member 'ABP_ACTIVATELightingScenario_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, TextRender2) == 0x000298, "Member 'ABP_ACTIVATELightingScenario_C::TextRender2' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, TextRender1) == 0x0002A0, "Member 'ABP_ACTIVATELightingScenario_C::TextRender1' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, LightingScenario2_Trigger_Green) == 0x0002A8, "Member 'ABP_ACTIVATELightingScenario_C::LightingScenario2_Trigger_Green' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, LightingScenario1_Trigger_Purple) == 0x0002B0, "Member 'ABP_ACTIVATELightingScenario_C::LightingScenario1_Trigger_Purple' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_ACTIVATELightingScenario_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, LightingScenario_1) == 0x0002C0, "Member 'ABP_ACTIVATELightingScenario_C::LightingScenario_1' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, LightingScenario_2) == 0x0002E8, "Member 'ABP_ACTIVATELightingScenario_C::LightingScenario_2' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, DirectionalLightComponentReference) == 0x000310, "Member 'ABP_ACTIVATELightingScenario_C::DirectionalLightComponentReference' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, DirectionalLightComponentMain) == 0x000318, "Member 'ABP_ACTIVATELightingScenario_C::DirectionalLightComponentMain' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, ExpoFogComponentMain) == 0x000320, "Member 'ABP_ACTIVATELightingScenario_C::ExpoFogComponentMain' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, ExpoFogComponentReference) == 0x000328, "Member 'ABP_ACTIVATELightingScenario_C::ExpoFogComponentReference' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, ChangeSpeedMultiplierSc1) == 0x000330, "Member 'ABP_ACTIVATELightingScenario_C::ChangeSpeedMultiplierSc1' has a wrong offset!");
static_assert(offsetof(ABP_ACTIVATELightingScenario_C, ChangeSpeedMultiplierSc2) == 0x000334, "Member 'ABP_ACTIVATELightingScenario_C::ChangeSpeedMultiplierSc2' has a wrong offset!");

}

