#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponViewItem

#include "Basic.hpp"

#include "BP_WeaponViewItem_classes.hpp"
#include "BP_WeaponViewItem_parameters.hpp"


namespace SDK
{

// Function BP_WeaponViewItem.BP_WeaponViewItem_C.Can be Upgraded
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_InventoryManager_C*      InventoryManager                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32                                   MaxUpgradeLevel                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_WeaponViewItem_C::Can_be_Upgraded(class UAC_jRPG_InventoryManager_C* InventoryManager, int32 MaxUpgradeLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "Can be Upgraded");

	Params::BP_WeaponViewItem_C_Can_be_Upgraded Parms{};

	Parms.InventoryManager = InventoryManager;
	Parms.MaxUpgradeLevel = MaxUpgradeLevel;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeaponViewItem.BP_WeaponViewItem_C.GetGearWeaponInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_ItemInstance_Gear_Weapon_C**  Gear_Weapon_Instance_                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponViewItem_C::GetGearWeaponInstance(class UBP_ItemInstance_Gear_Weapon_C** Gear_Weapon_Instance_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "GetGearWeaponInstance");

	Params::BP_WeaponViewItem_C_GetGearWeaponInstance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Gear_Weapon_Instance_ != nullptr)
		*Gear_Weapon_Instance_ = Parms.Gear_Weapon_Instance_;
}


// Function BP_WeaponViewItem.BP_WeaponViewItem_C.GetItemDynamicData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_jRPG_Item_DynamicData*        ItemDynamicData_0                                      (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_WeaponViewItem_C::GetItemDynamicData(struct FS_jRPG_Item_DynamicData* ItemDynamicData_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "GetItemDynamicData");

	Params::BP_WeaponViewItem_C_GetItemDynamicData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ItemDynamicData_0 != nullptr)
		*ItemDynamicData_0 = std::move(Parms.ItemDynamicData_0);
}


// Function BP_WeaponViewItem.BP_WeaponViewItem_C.GetOwnerData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_CharacterData_C**             OwnerData                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponViewItem_C::GetOwnerData(class UBP_CharacterData_C** OwnerData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "GetOwnerData");

	Params::BP_WeaponViewItem_C_GetOwnerData Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OwnerData != nullptr)
		*OwnerData = Parms.OwnerData;
}


// Function BP_WeaponViewItem.BP_WeaponViewItem_C.IsBeingUpgraded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_WeaponViewItem_C::IsBeingUpgraded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "IsBeingUpgraded");

	Params::BP_WeaponViewItem_C_IsBeingUpgraded Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_WeaponViewItem.BP_WeaponViewItem_C.TriggerIsBeingUpgradedChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsBeingUpgraded_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_WeaponViewItem_C::TriggerIsBeingUpgradedChanged(bool bIsBeingUpgraded_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "TriggerIsBeingUpgradedChanged");

	Params::BP_WeaponViewItem_C_TriggerIsBeingUpgradedChanged Parms{};

	Parms.bIsBeingUpgraded_0 = bIsBeingUpgraded_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponViewItem.BP_WeaponViewItem_C.TriggerWeaponEquippedChanged
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_WeaponViewItem_C::TriggerWeaponEquippedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponViewItem_C", "TriggerWeaponEquippedChanged");

	UObject::ProcessEvent(Func, nullptr);
}

}

