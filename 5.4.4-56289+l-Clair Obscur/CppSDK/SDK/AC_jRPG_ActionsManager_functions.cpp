#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_ActionsManager

#include "Basic.hpp"

#include "AC_jRPG_ActionsManager_classes.hpp"
#include "AC_jRPG_ActionsManager_parameters.hpp"


namespace SDK
{

// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.ActivateActionEffect
// (BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::ActivateActionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "ActivateActionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.AreAllAlive
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>&NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   SomeAreAlive                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::AreAllAlive(TArray<class ABP_jRPG_Character_Battle_Base_C*>& NewParam, bool* SomeAreAlive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "AreAllAlive");

	Params::AC_jRPG_ActionsManager_C_AreAllAlive Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);

	NewParam = std::move(Parms.NewParam);

	if (SomeAreAlive != nullptr)
		*SomeAreAlive = Parms.SomeAreAlive;
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Attack
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Attack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Attack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.AttackStatCalculation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Power                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CritRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CriticalPower                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Sharpness                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Defense                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Luck                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 HP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AP                                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::AttackStatCalculation(double* Power, double* CritRate, double* CriticalPower, double* Sharpness, double* Defense, double* Speed, double* Luck, double* HP, double* AP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "AttackStatCalculation");

	Params::AC_jRPG_ActionsManager_C_AttackStatCalculation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Power != nullptr)
		*Power = Parms.Power;

	if (CritRate != nullptr)
		*CritRate = Parms.CritRate;

	if (CriticalPower != nullptr)
		*CriticalPower = Parms.CriticalPower;

	if (Sharpness != nullptr)
		*Sharpness = Parms.Sharpness;

	if (Defense != nullptr)
		*Defense = Parms.Defense;

	if (Speed != nullptr)
		*Speed = Parms.Speed;

	if (Luck != nullptr)
		*Luck = Parms.Luck;

	if (HP != nullptr)
		*HP = Parms.HP;

	if (AP != nullptr)
		*AP = Parms.AP;
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.AttackStatCalculation_WithPerfection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Power                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CritRate                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CriticalPower                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Sharpness                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::AttackStatCalculation_WithPerfection(double* Power, double* CritRate, double* CriticalPower, double* Sharpness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "AttackStatCalculation_WithPerfection");

	Params::AC_jRPG_ActionsManager_C_AttackStatCalculation_WithPerfection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Power != nullptr)
		*Power = Parms.Power;

	if (CritRate != nullptr)
		*CritRate = Parms.CritRate;

	if (CriticalPower != nullptr)
		*CriticalPower = Parms.CriticalPower;

	if (Sharpness != nullptr)
		*Sharpness = Parms.Sharpness;
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.CallFunctionByName
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    FunctionName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::CallFunctionByName(const class FString& FunctionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "CallFunctionByName");

	Params::AC_jRPG_ActionsManager_C_CallFunctionByName Parms{};

	Parms.FunctionName = std::move(FunctionName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.CheckTargetBuff
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*& Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UClass*                           Buff                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasBuff                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::CheckTargetBuff(class UAC_jRPG_CharacterBattleStats_C*& Target, class UClass* Buff, bool* HasBuff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "CheckTargetBuff");

	Params::AC_jRPG_ActionsManager_C_CheckTargetBuff Parms{};

	Parms.Target = Target;
	Parms.Buff = Buff;

	UObject::ProcessEvent(Func, &Parms);

	Target = Parms.Target;

	if (HasBuff != nullptr)
		*HasBuff = Parms.HasBuff;
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Defend
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Defend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Defend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.ExecuteUbergraph_AC_jRPG_ActionsManager
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::ExecuteUbergraph_AC_jRPG_ActionsManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "ExecuteUbergraph_AC_jRPG_ActionsManager");

	Params::AC_jRPG_ActionsManager_C_ExecuteUbergraph_AC_jRPG_ActionsManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Flee
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Flee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Flee");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.FleeActivation
// (BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::FleeActivation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "FleeActivation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.FleeStart
// (BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::FleeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "FleeStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.FreezeFrame
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TimeDilation                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::FreezeFrame(double TimeDilation, double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "FreezeFrame");

	Params::AC_jRPG_ActionsManager_C_FreezeFrame Parms{};

	Parms.TimeDilation = TimeDilation;
	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.GetActionCost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CostHP                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 CostMP                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::GetActionCost(class FName ActionName, double* CostHP, double* CostMP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "GetActionCost");

	Params::AC_jRPG_ActionsManager_C_GetActionCost Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	if (CostHP != nullptr)
		*CostHP = Parms.CostHP;

	if (CostMP != nullptr)
		*CostMP = Parms.CostMP;
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.GetActionData
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_jRPG_Action*                  Out_Row                                                (Parm, OutParm, HasGetValueTypeHash)
// bool*                                   Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::GetActionData(class FName ActionName, struct FS_jRPG_Action* Out_Row, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "GetActionData");

	Params::AC_jRPG_ActionsManager_C_GetActionData Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	if (Out_Row != nullptr)
		*Out_Row = std::move(Parms.Out_Row);

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Attack
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Attack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Attack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Defend
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Defend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Defend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Flee
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Flee()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Flee");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_AllAllies
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_AllAllies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_AllAllies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_AllAlliesDead
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_AllAlliesDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_AllAlliesDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_AllEnemies
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_AllEnemies()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_AllEnemies");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_Fireball
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_Fireball()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_Fireball");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_Heal
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_Heal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_Heal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_OnlySelf
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_OnlySelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_OnlySelf");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_SingleAlly
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_SingleAlly()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_SingleAlly");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_SingleAllyAndEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_SingleAllyAndEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_SingleAllyAndEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_SingleAllyDead
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_SingleAllyDead()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_SingleAllyDead");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_SingleEnemy
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_SingleEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_SingleEnemy");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_SingleEnemyAny
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_SingleEnemyAny()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_SingleEnemyAny");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_SinglleAllyAny
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_SinglleAllyAny()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_SinglleAllyAny");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Magic_Thunder
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Magic_Thunder()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Magic_Thunder");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.Select_Test
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::Select_Test()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "Select_Test");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.SelectAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_jRPG_ActionType                       ActionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SecondaryActionName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UAC_jRPG_ActionsManager_C::SelectAction(E_jRPG_ActionType ActionType, class FName SecondaryActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "SelectAction");

	Params::AC_jRPG_ActionsManager_C_SelectAction Parms{};

	Parms.ActionType = ActionType;
	Parms.SecondaryActionName = SecondaryActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.SkipTurn
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::SkipTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "SkipTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function AC_jRPG_ActionsManager.AC_jRPG_ActionsManager_C.StanceDamageMultiplier
// (Public, BlueprintCallable, BlueprintEvent)

void UAC_jRPG_ActionsManager_C::StanceDamageMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AC_jRPG_ActionsManager_C", "StanceDamageMultiplier");

	UObject::ProcessEvent(Func, nullptr);
}

}

