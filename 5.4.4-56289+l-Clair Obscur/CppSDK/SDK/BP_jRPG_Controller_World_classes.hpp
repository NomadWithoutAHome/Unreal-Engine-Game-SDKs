#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Controller_World

#include "Basic.hpp"

#include "ALS_Player_Controller_classes.hpp"
#include "S_CameraOverrideParameters_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "E_BattleFlowState_structs.hpp"
#include "E_QuestStatus_structs.hpp"
#include "CommonInput_structs.hpp"
#include "EBattleEndResult_structs.hpp"
#include "E_Characters_structs.hpp"
#include "EInputAction_structs.hpp"
#include "EExplorationHealthDamageType_structs.hpp"
#include "E_WorldMapExplorationCapacity_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_Controller_World.BP_jRPG_Controller_World_C
// 0x0580 (0x0DF8 - 0x0878)
class ABP_jRPG_Controller_World_C final : public AALS_Player_Controller_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0878(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_InputContextComponent_C*            BP_InputContextComponent;                          // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InputLockComponent_C*               BP_InputLockComponent;                             // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AchievementManager_C*               BP_AchievementManager;                             // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LevelAmbienceAreaManager_C*         BP_LevelAmbienceAreaManager;                       // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractiveEnvironmentManagerComponent_C* BP_InteractiveEnvironmentManagerComponent;   // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CinematicSystem_C*                  BP_CinematicSystem;                                // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LootSystemComponent_C*              BP_LootSystemComponent;                            // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GameActionExecutorComponent_C*      BP_GameActionExecutorComponent;                    // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_LoadingSystemComponent_C*           BP_LoadingSystemComponent_Battle;                  // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_World_Audio_Component_C*            BP_World_Audio_Component;                          // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_UINavigationComponent_C*            BP_UINavigationComponent;                          // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterReactionSystem_C*          BP_CharacterReactionSystem;                        // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractionSystem_C*                BP_InteractionSystem;                              // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TutorialSystemComponent_C*          BP_TutorialSystemComponent;                        // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_InputManager_C*                     BP_InputManager;                                   // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DialogueSystemComponent_C*          BP_DialogueSystemComponent;                        // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GameDirectorComponent_C*            BP_GameDirectorComponent;                          // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_TargetingManager_C*            AC_jRPG_TargetingManager;                          // 0x0908(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_QTEManager_C*                       AC_jRPG_QTEManager;                                // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_ActionsManager_C*              AC_jRPG_ActionsManager;                            // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_BattleManager_C*               AC_jRPG_BattleManager;                             // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_CharactersManager_C*           AC_jRPG_CharactersManager;                         // 0x0928(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_InventoryManager_C*            AC_jRPG_InventoryManager;                          // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             LastControlledCharacterReference;                  // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_jRPG_InteractionPopUp_C*           InteractionPopUp;                                  // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UTimelineComponent*                     Timeline_0;                                        // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_DynamicCameraManager_C*        DynamicCameraManagerReference;                     // 0x0950(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_ShowControlRotation;                         // 0x0958(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Debug_LogMouseRaycast;                             // 0x0959(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95A[0x6];                                      // 0x095A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              TriggerLeftPressed;                                // 0x0960(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              VendorWindowClosed;                                // 0x0970(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_Exploration_HUD_C*                 ExplorationHUDWidget;                              // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              PlaceholderTutorialInput;                          // 0x0988(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsGameMenuVisible;                                 // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_999[0x7];                                      // 0x0999(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 GameActionActorLocation;                           // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_GameAction_TriggerBattle_C*         CurrentTriggerBattleGameAction;                    // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_BattleFlowState                             BattleFlowState;                                   // 0x09B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDefenseInputBound;                               // 0x09B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9B2[0x6];                                      // 0x09B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         DEBUG_PreviouslyHiddenBlockoutActors;              // 0x09B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             InteractionSystemPayload;                          // 0x09C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_GameMenuScene_C*                    GameMenuSceneActor;                                // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounter                   GameplayIsPausedReferenceCounter;                  // 0x09F0(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         PausedActors;                                      // 0x0A10(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> WorldEnemiesAutomaticallyHiddenForBattle;    // 0x0A20(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             InteractBlocker_GameMenu;                          // 0x0A30(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UActorComponent*>                PausedComponents;                                  // 0x0A50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWorldPartitionStreamingSourceComponent* GameMenuTemporaryStreamingSourceCharacter;        // 0x0A60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<TScriptInterface<class IBPI_GameplayPausable_C>> PausedInterfaces;                        // 0x0A68(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class AActor*>                         ActorsHiddenByMenu;                                // 0x0A78(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UDataTable*                             Data_Table;                                        // 0x0A88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CameraOverrideActor;                               // 0x0A90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnMainMenuClosed;                                  // 0x0A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSF_ReferenceCounterHandle             PauseBlocker_GameMenu;                             // 0x0AA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             PauseBlocker_Debug;                                // 0x0AC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnMainMenuOpened;                                  // 0x0AE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FS_CameraOverrideParameters>    CameraOverrideParametersStack;                     // 0x0AF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnPauseMenuOpened;                                 // 0x0B08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnPauseMenuClosed;                                 // 0x0B18(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class AActor* PreviousViewTarget, class AActor* CurrentViewTarget)> OnTargetViewAboutToChanged; // 0x0B28(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(const struct FS_CameraOverrideParameters& A, const struct FS_CameraOverrideParameters& B, class UOrderingResult* OrderingResult)> Dummy_SortCameraOverrideParameters; // 0x0B38(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSavePointMenuOpened;                             // 0x0B48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSavePointMenuClosed;                             // 0x0B58(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDocumentActorOpened;                             // 0x0B68(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDocumentActorClosed;                             // 0x0B78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSF_ReferenceCounterHandle             InteractBlocker_PauseMenu;                         // 0x0B88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             PauseBlocker_PauseMenu;                            // 0x0BA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsPauseMenuVisible;                                // 0x0BC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC9[0x7];                                      // 0x0BC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PauseMenu_C*                       PauseMenuWidget;                                   // 0x0BD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AExponentialHeightFog*                  SpawnedFogForGameMenu;                             // 0x0BD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSavePointMenuVisible;                            // 0x0BE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BE1[0x7];                                      // 0x0BE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounter                   ForceFeedbackEnabledReferenceCounter;              // 0x0BE8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             ForceFeedbackBlocker_PauseMenu;                    // 0x0C08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             ForceFeedbackBlocker_GameMenu;                     // 0x0C28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             SaveBlocker_Debug;                                 // 0x0C48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             InteractBlocker_SavePoint;                         // 0x0C68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             ForceFeedbackBlocker_SavePoint;                    // 0x0C88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             PauseBlock_SavePoint;                              // 0x0CA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             UIInputLockBlockerReference;                       // 0x0CC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             BattleInputLockBlockerReference;                   // 0x0CE8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             TransitionInputLockBlockerReference;               // 0x0D08(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             SavePointInputLockBlockerReference;                // 0x0D28(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             ChangingMapInputLockBlockerReference;              // 0x0D48(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounter                   EnabledStreamingSourcesReferenceCounte;            // 0x0D68(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             PauseBlocker_FullscreenNotification;               // 0x0D88(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             ForceFeedbackBlocker_FullscreenNotification;       // 0x0DA8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             InteractBlocker_FullscreenNotification;            // 0x0DC8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsChangingArea;                                    // 0x0DE8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DE9[0x7];                                      // 0x0DE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_PlatformPauseModal_C*              PlatformPauseWidget;                               // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AddCameraOverrideRequest(const struct FS_CameraOverrideParameters& CameraOverrideParameters);
	void ApplyUserSettings();
	void AxisInputThreshold(double AxisValue, int32* Value);
	void BackToTitleMenu();
	void BndEvt__BP_jRPG_Controller_World_BP_DialogueSystemComponent_K2Node_ComponentBoundEvent_0_OnDialogueFinished__DelegateSignature(class ABP_Dialogue_C* Dialogue);
	bool CanOpenGameMenu();
	bool CanOpenPauseMenu();
	bool CanOpenTeamOverlay();
	bool CanReceiveExplorationDamage();
	bool CanStartBattle();
	void CleanAndQuit();
	void CleanBattleManagers();
	void CloseDocumentActor();
	void CloseSavePointMenu(bool IsFromGameplay);
	void CompareCameraOverrideParametersByPriority(const struct FS_CameraOverrideParameters& A, const struct FS_CameraOverrideParameters& B, class UOrderingResult* OrderingResult);
	void CreateDynamicCameraManager();
	void CreateWidgets();
	void DEBUG_ApplyCharacterDebugSaveOverrides(const struct FFDebugSaveGame& InputPin, struct FFDebugSaveGame* OutputPin);
	void DEBUG_CVarChange_DebugCustomPause(bool NewValue);
	void DEBUG_CVarChange_DiegeticQTE(bool NewValue);
	void DEBUG_CVarChange_EnableAutoSave(bool NewValue);
	void DEBUG_CVarChange_GivePictosOnBoot(bool NewValue);
	void DEBUG_CVarChange_HideUI(bool Value);
	void DEBUG_CVarChange_LearnAllLuminasOnBoot(bool NewValue);
	void DEBUG_CVarChange_ShowClimbableProps(bool Enabled);
	void DEBUG_CVarChange_ShowGameActionTree(bool NewValue);
	void DEBUG_CVarChange_SingleCharacterParty(const class FString& NewValue);
	void DEBUG_FindAsset(class FName AssetName, const struct FSoftClassPath& ClassSoft, bool* Found, struct FAssetData* Array_Element);
	void DEBUG_FindDebugSaveAsset(class FName AssetName, struct FAssetData* Array_Element);
	void DEBUG_GetAllPreviousQuestObjectives(class FName QuestName, class FName QuestObjectiveName, E_QuestStatus Status, TMap<class FName, E_QuestStatus>* Objectives);
	void DEBUG_GivePictos();
	bool DEBUG_IsWeaponInHandleList(class FName WeaponID, TArray<struct FS_WeaponInstanceHandle>& WeaponInstanceHandle);
	void DEBUG_LoadDebugQuestData(class UBP_SaveGameData_C* SaveGameData, const TMap<class FName, E_QuestStatus>& GoldenPathObjectives);
	void DEBUG_LoadDebugSaveData(const struct FFDebugSaveGame& SaveData);
	void DEBUG_LoadDebugSaveGameAsset(class FName AssetName);
	void DEBUG_OnRaytraceMouseCVarChanged(bool NewValue);
	void DEBUG_PatchDebugSaveDataBeforeLoading(struct FFDebugSaveGame& SaveData);
	void DEBUG_RegisterCVars();
	void DEBUG_TriggerCVarOnGameStart();
	void DEBUG_UnlockAllLuminaPassives();
	void DEBUG_UpdateDisplay(double DeltaSeconds);
	void DisableExplorationControlsForBattle();
	void EventDoSpawnActor();
	void ExecuteGameActionWrapperController(const struct FGameAction_Wrapper& GameActionWrapper);
	void ExecuteUbergraph_BP_jRPG_Controller_World(int32 EntryPoint);
	void ForceInputForTutorial(EInputAction InputAction, const TDelegate<void()>& OnGameActionDone);
	void ForcePreloadAssets();
	void GetCameraOverrideActor(class AActor** CameraOverrideActor_0);
	void GetClosestLightingScenario(const struct FVector& Location, class ABP_LightingScenarioReference_C** LightingScenario);
	void GetCurrentLevelData(struct FFLevelDataEntry* LevelData);
	void GetCustomGameInstance(class UBP_jRPG_GI_Custom_C** BP_J_RPG_GI_Custom);
	void GetDebugLightingScenario(class ABP_LightingScenarioReference_C** LightingScenario);
	void GetDialogueOverlay(class UWBP_DialogueOverlay_C** DialogueOverlay);
	void GetPauseMenuWidget(class UWBP_PauseMenu_C** PauseMenuWidget_0);
	void GetPlayerCharacter(class ABP_jRPG_Character_World_C** AsBP_J_RPG_Character_World);
	void HasCameraOverride(bool* HasOverride);
	void HealParty();
	void HideInteractionPopUp();
	void HideWorldActorsAroundBattleMap();
	void InpActEvt_IA_Battle_Defense_Dodge_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Battle_Defense_GradientCounter_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Battle_Defense_Jump_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Battle_Defense_JumpCounter_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Battle_Defense_Parry_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Battle_QTE_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_Exploration_ShowTeamStatus_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_Menu_Game_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_UI_Menu_Pause_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_L_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InputAction_UI_OpenGameMenu();
	bool IsAnyMenuVisible();
	void IsAreaChangeInProgress(bool* ReturnNode);
	void IsGameplayPaused(bool* IsPaused);
	bool IsInBattleBeginTransition();
	void LoadCharacterStateFromGameInstance(class AActor* ControlledCharacterWorld);
	void MakeGameMenuVisible(bool Visible, const struct FS_GameMenuParameters& GameMenuParameters);
	void MakePauseMenuVisible(bool InIsVisible);
	void OnAreaChanged(class ABP_jRPG_Character_World_C* CharacterWorld, class ABP_LightingScenarioReference_C* LightingScenario, const struct FS_AreaAudioParameters& AreaAudioParameters, const struct FS_ChangeLevelParameters& ChangeLevelParameters);
	void OnBackToExplorationFromPause();
	void OnBattleBeginTransitionRequested();
	void OnBattleDependenciesLoaded();
	void OnBattleEnd(class FName EnemyGlobalID, EBattleEndResult BattleEndResult);
	void OnBattleFlee(class FName EnemyGlobalID);
	void OnBattleRequested();
	void OnBattleReset();
	void OnBattleStart();
	void OnControllerConnectionChanged(bool bIsConnected);
	void OnDefendAction();
	void OnDefendReleased();
	void OnDismountRequested();
	void OnExplorationGroupDeath();
	void OnPlatformPaused(bool bShouldPause);
	void OnQuitRequest();
	void OpenDocumentActor();
	void OpenMainMenu();
	void OpenSavePointMenu(bool IsFromGameplay);
	void ParseCommandLine();
	void PauseGameplay(const struct FS_GameplayPauseParameters& Parameters);
	void PauseOnFullScreenNotification(bool IsPaused);
	void PlaceholderTriggerTutorialInput();
	void PlayGlobalFeedback(const struct FFGlobalFeedback& Feedback);
	void PrepareCharacterForBattle();
	void PrepareLightingForBattle();
	void PrepareSystemsForBattle();
	void PrepareToChangeMap(struct FFLevelDataEntry& LevelData);
	void PrepareWorldActorsForBattle();
	void PrepareWorldForTransition();
	void ProcessAreaChanged();
	void ProcessAreaChangedForAudio(const struct FS_AreaAudioParameters& AreaAudioParameters);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossess(class APawn* PossessedPawn);
	void ReceiveTeamDamage(EExplorationHealthDamageType DamageType, int32 Value);
	void ReceiveTick(float DeltaSeconds);
	void ReloadLastCheckpoint();
	void RemoveCameraOverride(class AActor* ViewTarget);
	void ResumeWorldActorsAfterBattle();
	void ResumeWorldAfterTransition();
	void ReturnFromGameMenuWorld();
	void RollEncounter(double InputScale);
	void SetActorTickPaused(const class AActor*& Actor, const TArray<class AActor*>& AlreadyPausedActors, const TArray<class UActorComponent*>& AlreadyPausedComponents, struct FS_GameplayPauseParameters& PauseParameters);
	void SetForceFeedbackEnabled(bool Enabled, struct FSF_ReferenceCounterHandle& ForceFeedbackBlocker, const class FString& DebugName);
	void SetGameplayPaused(const struct FS_GameplayPauseParameters& Parameters, struct FSF_ReferenceCounterHandle& PauseBlocker, const class FString& DebugName);
	void SetInputModeUI(bool UIModeEnabled, bool ConfigureUI_Navigation);
	void SetLevelLightingHiddenForGameMenu(bool Hidden);
	void SetMiniMapVisible(bool Visible);
	void SetStreamingSourcesEnabled(bool Enabled, struct FSF_ReferenceCounterHandle& BlockerReferenceHandle, const class FString& DebugName);
	void ShouldPauseActor(const class AActor*& Actor, struct FS_GameplayPauseParameters& PauseParameters, bool* ShouldPause);
	void ShowGameOverScreen();
	void ShowInteractionPopUp(const class FText& TextToDisplay);
	void StartNewGameIfNeeded();
	void TeleportCharacterToSpawnPoint();
	void TryBindDefendInput();
	void UnbindDefendInput();
	void UnpauseGameplay();
	void UpdateAudioListenerOverride();
	void UpdateCameraViewTarget();
	void UpdateControlRotationFromView();
	void UserConstructionScript();

	bool AreStreamingSourcesEnabled() const;
	void IsForceFeedbackEnabled(bool* Enabled) const;
	bool IsInBattle() const;
	bool ShouldProcessForceFeedbackAndHaptics() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_Controller_World_C">();
	}
	static class ABP_jRPG_Controller_World_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_Controller_World_C>();
	}
};
static_assert(alignof(ABP_jRPG_Controller_World_C) == 0x000008, "Wrong alignment on ABP_jRPG_Controller_World_C");
static_assert(sizeof(ABP_jRPG_Controller_World_C) == 0x000DF8, "Wrong size on ABP_jRPG_Controller_World_C");
static_assert(offsetof(ABP_jRPG_Controller_World_C, UberGraphFrame) == 0x000878, "Member 'ABP_jRPG_Controller_World_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_InputContextComponent) == 0x000880, "Member 'ABP_jRPG_Controller_World_C::BP_InputContextComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_InputLockComponent) == 0x000888, "Member 'ABP_jRPG_Controller_World_C::BP_InputLockComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_AchievementManager) == 0x000890, "Member 'ABP_jRPG_Controller_World_C::BP_AchievementManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_LevelAmbienceAreaManager) == 0x000898, "Member 'ABP_jRPG_Controller_World_C::BP_LevelAmbienceAreaManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_InteractiveEnvironmentManagerComponent) == 0x0008A0, "Member 'ABP_jRPG_Controller_World_C::BP_InteractiveEnvironmentManagerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_CinematicSystem) == 0x0008A8, "Member 'ABP_jRPG_Controller_World_C::BP_CinematicSystem' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_LootSystemComponent) == 0x0008B0, "Member 'ABP_jRPG_Controller_World_C::BP_LootSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_GameActionExecutorComponent) == 0x0008B8, "Member 'ABP_jRPG_Controller_World_C::BP_GameActionExecutorComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_LoadingSystemComponent_Battle) == 0x0008C0, "Member 'ABP_jRPG_Controller_World_C::BP_LoadingSystemComponent_Battle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_World_Audio_Component) == 0x0008C8, "Member 'ABP_jRPG_Controller_World_C::BP_World_Audio_Component' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_UINavigationComponent) == 0x0008D0, "Member 'ABP_jRPG_Controller_World_C::BP_UINavigationComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_CharacterReactionSystem) == 0x0008D8, "Member 'ABP_jRPG_Controller_World_C::BP_CharacterReactionSystem' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_InteractionSystem) == 0x0008E0, "Member 'ABP_jRPG_Controller_World_C::BP_InteractionSystem' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_TutorialSystemComponent) == 0x0008E8, "Member 'ABP_jRPG_Controller_World_C::BP_TutorialSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_InputManager) == 0x0008F0, "Member 'ABP_jRPG_Controller_World_C::BP_InputManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_DialogueSystemComponent) == 0x0008F8, "Member 'ABP_jRPG_Controller_World_C::BP_DialogueSystemComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BP_GameDirectorComponent) == 0x000900, "Member 'ABP_jRPG_Controller_World_C::BP_GameDirectorComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, AC_jRPG_TargetingManager) == 0x000908, "Member 'ABP_jRPG_Controller_World_C::AC_jRPG_TargetingManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, AC_jRPG_QTEManager) == 0x000910, "Member 'ABP_jRPG_Controller_World_C::AC_jRPG_QTEManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, AC_jRPG_ActionsManager) == 0x000918, "Member 'ABP_jRPG_Controller_World_C::AC_jRPG_ActionsManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, AC_jRPG_BattleManager) == 0x000920, "Member 'ABP_jRPG_Controller_World_C::AC_jRPG_BattleManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, AC_jRPG_CharactersManager) == 0x000928, "Member 'ABP_jRPG_Controller_World_C::AC_jRPG_CharactersManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, AC_jRPG_InventoryManager) == 0x000930, "Member 'ABP_jRPG_Controller_World_C::AC_jRPG_InventoryManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, LastControlledCharacterReference) == 0x000938, "Member 'ABP_jRPG_Controller_World_C::LastControlledCharacterReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, InteractionPopUp) == 0x000940, "Member 'ABP_jRPG_Controller_World_C::InteractionPopUp' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, Timeline_0) == 0x000948, "Member 'ABP_jRPG_Controller_World_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, DynamicCameraManagerReference) == 0x000950, "Member 'ABP_jRPG_Controller_World_C::DynamicCameraManagerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, Debug_ShowControlRotation) == 0x000958, "Member 'ABP_jRPG_Controller_World_C::Debug_ShowControlRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, Debug_LogMouseRaycast) == 0x000959, "Member 'ABP_jRPG_Controller_World_C::Debug_LogMouseRaycast' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, TriggerLeftPressed) == 0x000960, "Member 'ABP_jRPG_Controller_World_C::TriggerLeftPressed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, VendorWindowClosed) == 0x000970, "Member 'ABP_jRPG_Controller_World_C::VendorWindowClosed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ExplorationHUDWidget) == 0x000980, "Member 'ABP_jRPG_Controller_World_C::ExplorationHUDWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PlaceholderTutorialInput) == 0x000988, "Member 'ABP_jRPG_Controller_World_C::PlaceholderTutorialInput' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, IsGameMenuVisible) == 0x000998, "Member 'ABP_jRPG_Controller_World_C::IsGameMenuVisible' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, GameActionActorLocation) == 0x0009A0, "Member 'ABP_jRPG_Controller_World_C::GameActionActorLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, CurrentTriggerBattleGameAction) == 0x0009A8, "Member 'ABP_jRPG_Controller_World_C::CurrentTriggerBattleGameAction' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BattleFlowState) == 0x0009B0, "Member 'ABP_jRPG_Controller_World_C::BattleFlowState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, IsDefenseInputBound) == 0x0009B1, "Member 'ABP_jRPG_Controller_World_C::IsDefenseInputBound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, DEBUG_PreviouslyHiddenBlockoutActors) == 0x0009B8, "Member 'ABP_jRPG_Controller_World_C::DEBUG_PreviouslyHiddenBlockoutActors' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, InteractionSystemPayload) == 0x0009C8, "Member 'ABP_jRPG_Controller_World_C::InteractionSystemPayload' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, GameMenuSceneActor) == 0x0009E8, "Member 'ABP_jRPG_Controller_World_C::GameMenuSceneActor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, GameplayIsPausedReferenceCounter) == 0x0009F0, "Member 'ABP_jRPG_Controller_World_C::GameplayIsPausedReferenceCounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PausedActors) == 0x000A10, "Member 'ABP_jRPG_Controller_World_C::PausedActors' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, WorldEnemiesAutomaticallyHiddenForBattle) == 0x000A20, "Member 'ABP_jRPG_Controller_World_C::WorldEnemiesAutomaticallyHiddenForBattle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, InteractBlocker_GameMenu) == 0x000A30, "Member 'ABP_jRPG_Controller_World_C::InteractBlocker_GameMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PausedComponents) == 0x000A50, "Member 'ABP_jRPG_Controller_World_C::PausedComponents' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, GameMenuTemporaryStreamingSourceCharacter) == 0x000A60, "Member 'ABP_jRPG_Controller_World_C::GameMenuTemporaryStreamingSourceCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PausedInterfaces) == 0x000A68, "Member 'ABP_jRPG_Controller_World_C::PausedInterfaces' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ActorsHiddenByMenu) == 0x000A78, "Member 'ABP_jRPG_Controller_World_C::ActorsHiddenByMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, Data_Table) == 0x000A88, "Member 'ABP_jRPG_Controller_World_C::Data_Table' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, CameraOverrideActor) == 0x000A90, "Member 'ABP_jRPG_Controller_World_C::CameraOverrideActor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnMainMenuClosed) == 0x000A98, "Member 'ABP_jRPG_Controller_World_C::OnMainMenuClosed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PauseBlocker_GameMenu) == 0x000AA8, "Member 'ABP_jRPG_Controller_World_C::PauseBlocker_GameMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PauseBlocker_Debug) == 0x000AC8, "Member 'ABP_jRPG_Controller_World_C::PauseBlocker_Debug' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnMainMenuOpened) == 0x000AE8, "Member 'ABP_jRPG_Controller_World_C::OnMainMenuOpened' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, CameraOverrideParametersStack) == 0x000AF8, "Member 'ABP_jRPG_Controller_World_C::CameraOverrideParametersStack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnPauseMenuOpened) == 0x000B08, "Member 'ABP_jRPG_Controller_World_C::OnPauseMenuOpened' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnPauseMenuClosed) == 0x000B18, "Member 'ABP_jRPG_Controller_World_C::OnPauseMenuClosed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnTargetViewAboutToChanged) == 0x000B28, "Member 'ABP_jRPG_Controller_World_C::OnTargetViewAboutToChanged' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, Dummy_SortCameraOverrideParameters) == 0x000B38, "Member 'ABP_jRPG_Controller_World_C::Dummy_SortCameraOverrideParameters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnSavePointMenuOpened) == 0x000B48, "Member 'ABP_jRPG_Controller_World_C::OnSavePointMenuOpened' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnSavePointMenuClosed) == 0x000B58, "Member 'ABP_jRPG_Controller_World_C::OnSavePointMenuClosed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnDocumentActorOpened) == 0x000B68, "Member 'ABP_jRPG_Controller_World_C::OnDocumentActorOpened' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, OnDocumentActorClosed) == 0x000B78, "Member 'ABP_jRPG_Controller_World_C::OnDocumentActorClosed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, InteractBlocker_PauseMenu) == 0x000B88, "Member 'ABP_jRPG_Controller_World_C::InteractBlocker_PauseMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PauseBlocker_PauseMenu) == 0x000BA8, "Member 'ABP_jRPG_Controller_World_C::PauseBlocker_PauseMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, IsPauseMenuVisible) == 0x000BC8, "Member 'ABP_jRPG_Controller_World_C::IsPauseMenuVisible' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PauseMenuWidget) == 0x000BD0, "Member 'ABP_jRPG_Controller_World_C::PauseMenuWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, SpawnedFogForGameMenu) == 0x000BD8, "Member 'ABP_jRPG_Controller_World_C::SpawnedFogForGameMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, IsSavePointMenuVisible) == 0x000BE0, "Member 'ABP_jRPG_Controller_World_C::IsSavePointMenuVisible' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ForceFeedbackEnabledReferenceCounter) == 0x000BE8, "Member 'ABP_jRPG_Controller_World_C::ForceFeedbackEnabledReferenceCounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ForceFeedbackBlocker_PauseMenu) == 0x000C08, "Member 'ABP_jRPG_Controller_World_C::ForceFeedbackBlocker_PauseMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ForceFeedbackBlocker_GameMenu) == 0x000C28, "Member 'ABP_jRPG_Controller_World_C::ForceFeedbackBlocker_GameMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, SaveBlocker_Debug) == 0x000C48, "Member 'ABP_jRPG_Controller_World_C::SaveBlocker_Debug' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, InteractBlocker_SavePoint) == 0x000C68, "Member 'ABP_jRPG_Controller_World_C::InteractBlocker_SavePoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ForceFeedbackBlocker_SavePoint) == 0x000C88, "Member 'ABP_jRPG_Controller_World_C::ForceFeedbackBlocker_SavePoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PauseBlock_SavePoint) == 0x000CA8, "Member 'ABP_jRPG_Controller_World_C::PauseBlock_SavePoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, UIInputLockBlockerReference) == 0x000CC8, "Member 'ABP_jRPG_Controller_World_C::UIInputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, BattleInputLockBlockerReference) == 0x000CE8, "Member 'ABP_jRPG_Controller_World_C::BattleInputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, TransitionInputLockBlockerReference) == 0x000D08, "Member 'ABP_jRPG_Controller_World_C::TransitionInputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, SavePointInputLockBlockerReference) == 0x000D28, "Member 'ABP_jRPG_Controller_World_C::SavePointInputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ChangingMapInputLockBlockerReference) == 0x000D48, "Member 'ABP_jRPG_Controller_World_C::ChangingMapInputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, EnabledStreamingSourcesReferenceCounte) == 0x000D68, "Member 'ABP_jRPG_Controller_World_C::EnabledStreamingSourcesReferenceCounte' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PauseBlocker_FullscreenNotification) == 0x000D88, "Member 'ABP_jRPG_Controller_World_C::PauseBlocker_FullscreenNotification' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, ForceFeedbackBlocker_FullscreenNotification) == 0x000DA8, "Member 'ABP_jRPG_Controller_World_C::ForceFeedbackBlocker_FullscreenNotification' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, InteractBlocker_FullscreenNotification) == 0x000DC8, "Member 'ABP_jRPG_Controller_World_C::InteractBlocker_FullscreenNotification' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, IsChangingArea) == 0x000DE8, "Member 'ABP_jRPG_Controller_World_C::IsChangingArea' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Controller_World_C, PlatformPauseWidget) == 0x000DF0, "Member 'ABP_jRPG_Controller_World_C::PlatformPauseWidget' has a wrong offset!");

}

