#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BT_FleeAiComponent

#include "Basic.hpp"


namespace SDK::Params
{

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.CheckForErrors
// 0x0018 (0x0018 - 0x0000)
struct BT_FleeAiComponent_C_CheckForErrors final
{
public:
	TArray<class FText>                           ErrorMessages;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_CheckForErrors) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_CheckForErrors");
static_assert(sizeof(BT_FleeAiComponent_C_CheckForErrors) == 0x000018, "Wrong size on BT_FleeAiComponent_C_CheckForErrors");
static_assert(offsetof(BT_FleeAiComponent_C_CheckForErrors, ErrorMessages) == 0x000000, "Member 'BT_FleeAiComponent_C_CheckForErrors::ErrorMessages' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_CheckForErrors, ReturnValue) == 0x000010, "Member 'BT_FleeAiComponent_C_CheckForErrors::ReturnValue' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.ExecuteUbergraph_BT_FleeAiComponent
// 0x0004 (0x0004 - 0x0000)
struct BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent) == 0x000004, "Wrong alignment on BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent");
static_assert(sizeof(BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent) == 0x000004, "Wrong size on BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent");
static_assert(offsetof(BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent, EntryPoint) == 0x000000, "Member 'BT_FleeAiComponent_C_ExecuteUbergraph_BT_FleeAiComponent::EntryPoint' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.FindNextFleePoint
// 0x0020 (0x0020 - 0x0000)
struct BT_FleeAiComponent_C_FindNextFleePoint final
{
public:
	class AActor*                                 PursuerActor;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FleePoint_C*                        FleePoint;                                         // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FleePoint_C*                        CallFunc_FindNextFleePoint_FleePoint;              // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_FindNextFleePoint) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_FindNextFleePoint");
static_assert(sizeof(BT_FleeAiComponent_C_FindNextFleePoint) == 0x000020, "Wrong size on BT_FleeAiComponent_C_FindNextFleePoint");
static_assert(offsetof(BT_FleeAiComponent_C_FindNextFleePoint, PursuerActor) == 0x000000, "Member 'BT_FleeAiComponent_C_FindNextFleePoint::PursuerActor' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_FindNextFleePoint, FleePoint) == 0x000008, "Member 'BT_FleeAiComponent_C_FindNextFleePoint::FleePoint' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_FindNextFleePoint, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BT_FleeAiComponent_C_FindNextFleePoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_FindNextFleePoint, CallFunc_FindNextFleePoint_FleePoint) == 0x000018, "Member 'BT_FleeAiComponent_C_FindNextFleePoint::CallFunc_FindNextFleePoint_FleePoint' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.GetCurrentFleePoint
// 0x0008 (0x0008 - 0x0000)
struct BT_FleeAiComponent_C_GetCurrentFleePoint final
{
public:
	class ABP_FleePoint_C*                        FleePoint;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_GetCurrentFleePoint) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_GetCurrentFleePoint");
static_assert(sizeof(BT_FleeAiComponent_C_GetCurrentFleePoint) == 0x000008, "Wrong size on BT_FleeAiComponent_C_GetCurrentFleePoint");
static_assert(offsetof(BT_FleeAiComponent_C_GetCurrentFleePoint, FleePoint) == 0x000000, "Member 'BT_FleeAiComponent_C_GetCurrentFleePoint::FleePoint' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.Initialize
// 0x0028 (0x0028 - 0x0000)
struct BT_FleeAiComponent_C_Initialize final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AAIController*                          CallFunc_GetAIController_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FleePoint_C*                        K2Node_DynamicCast_AsBP_Flee_Point;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_Initialize) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_Initialize");
static_assert(sizeof(BT_FleeAiComponent_C_Initialize) == 0x000028, "Wrong size on BT_FleeAiComponent_C_Initialize");
static_assert(offsetof(BT_FleeAiComponent_C_Initialize, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BT_FleeAiComponent_C_Initialize::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_Initialize, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000008, "Member 'BT_FleeAiComponent_C_Initialize::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_Initialize, CallFunc_GetAIController_ReturnValue) == 0x000010, "Member 'BT_FleeAiComponent_C_Initialize::CallFunc_GetAIController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_Initialize, K2Node_DynamicCast_AsBP_Flee_Point) == 0x000018, "Member 'BT_FleeAiComponent_C_Initialize::K2Node_DynamicCast_AsBP_Flee_Point' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_Initialize, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BT_FleeAiComponent_C_Initialize::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000021, "Member 'BT_FleeAiComponent_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.LoadState
// 0x0060 (0x0060 - 0x0000)
struct BT_FleeAiComponent_C_LoadState final
{
public:
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   K2Node_DynamicCast_AsBP_J_RPG_Enemy_World_Base_Seamless; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_FleePoint_C>         CallFunc_GetSavedFleePointIndex_FleePoint;         // 0x0018(0x0028)(HasGetValueTypeHash)
	bool                                          CallFunc_GetSavedFleePointIndex_IsValid;           // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FleePoint_C*                        K2Node_DynamicCast_AsBP_Flee_Point;                // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_LoadState) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_LoadState");
static_assert(sizeof(BT_FleeAiComponent_C_LoadState) == 0x000060, "Wrong size on BT_FleeAiComponent_C_LoadState");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, CallFunc_GetOwner_ReturnValue) == 0x000000, "Member 'BT_FleeAiComponent_C_LoadState::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, K2Node_DynamicCast_AsBP_J_RPG_Enemy_World_Base_Seamless) == 0x000008, "Member 'BT_FleeAiComponent_C_LoadState::K2Node_DynamicCast_AsBP_J_RPG_Enemy_World_Base_Seamless' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BT_FleeAiComponent_C_LoadState::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, CallFunc_GetSavedFleePointIndex_FleePoint) == 0x000018, "Member 'BT_FleeAiComponent_C_LoadState::CallFunc_GetSavedFleePointIndex_FleePoint' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, CallFunc_GetSavedFleePointIndex_IsValid) == 0x000040, "Member 'BT_FleeAiComponent_C_LoadState::CallFunc_GetSavedFleePointIndex_IsValid' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000048, "Member 'BT_FleeAiComponent_C_LoadState::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, K2Node_DynamicCast_AsBP_Flee_Point) == 0x000050, "Member 'BT_FleeAiComponent_C_LoadState::K2Node_DynamicCast_AsBP_Flee_Point' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, K2Node_DynamicCast_bSuccess_1) == 0x000058, "Member 'BT_FleeAiComponent_C_LoadState::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_LoadState, CallFunc_IsValid_ReturnValue) == 0x000059, "Member 'BT_FleeAiComponent_C_LoadState::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.ResetToInitialFleePoint
// 0x0018 (0x0018 - 0x0000)
struct BT_FleeAiComponent_C_ResetToInitialFleePoint final
{
public:
	class UObject*                                CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FleePoint_C*                        K2Node_DynamicCast_AsBP_Flee_Point;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_ResetToInitialFleePoint) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_ResetToInitialFleePoint");
static_assert(sizeof(BT_FleeAiComponent_C_ResetToInitialFleePoint) == 0x000018, "Wrong size on BT_FleeAiComponent_C_ResetToInitialFleePoint");
static_assert(offsetof(BT_FleeAiComponent_C_ResetToInitialFleePoint, CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue) == 0x000000, "Member 'BT_FleeAiComponent_C_ResetToInitialFleePoint::CallFunc_Conv_SoftObjectReferenceToObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_ResetToInitialFleePoint, K2Node_DynamicCast_AsBP_Flee_Point) == 0x000008, "Member 'BT_FleeAiComponent_C_ResetToInitialFleePoint::K2Node_DynamicCast_AsBP_Flee_Point' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_ResetToInitialFleePoint, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BT_FleeAiComponent_C_ResetToInitialFleePoint::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_ResetToInitialFleePoint, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BT_FleeAiComponent_C_ResetToInitialFleePoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.SaveCurentFleePoint
// 0x0050 (0x0050 - 0x0000)
struct BT_FleeAiComponent_C_SaveCurentFleePoint final
{
public:
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ABP_FleePoint_C>         CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue; // 0x0008(0x0028)(UObjectWrapper, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_SerializableActorComponent_C*       CallFunc_GetComponentByClass_ReturnValue;          // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetGlobalObjectID_ObjectID;               // 0x0044(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_SaveCurentFleePoint) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_SaveCurentFleePoint");
static_assert(sizeof(BT_FleeAiComponent_C_SaveCurentFleePoint) == 0x000050, "Wrong size on BT_FleeAiComponent_C_SaveCurentFleePoint");
static_assert(offsetof(BT_FleeAiComponent_C_SaveCurentFleePoint, CallFunc_GetCustomGI_ReturnValue) == 0x000000, "Member 'BT_FleeAiComponent_C_SaveCurentFleePoint::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_SaveCurentFleePoint, CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue) == 0x000008, "Member 'BT_FleeAiComponent_C_SaveCurentFleePoint::CallFunc_Conv_ObjectToSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_SaveCurentFleePoint, CallFunc_GetOwner_ReturnValue) == 0x000030, "Member 'BT_FleeAiComponent_C_SaveCurentFleePoint::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_SaveCurentFleePoint, CallFunc_GetComponentByClass_ReturnValue) == 0x000038, "Member 'BT_FleeAiComponent_C_SaveCurentFleePoint::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_SaveCurentFleePoint, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'BT_FleeAiComponent_C_SaveCurentFleePoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_SaveCurentFleePoint, CallFunc_GetGlobalObjectID_ObjectID) == 0x000044, "Member 'BT_FleeAiComponent_C_SaveCurentFleePoint::CallFunc_GetGlobalObjectID_ObjectID' has a wrong offset!");

// Function BT_FleeAiComponent.BT_FleeAiComponent_C.SetCurrentFleePoint
// 0x0010 (0x0010 - 0x0000)
struct BT_FleeAiComponent_C_SetCurrentFleePoint final
{
public:
	class ABP_FleePoint_C*                        FleePoint;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FleePoint_C*                        local_PreviousFleePoint;                           // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BT_FleeAiComponent_C_SetCurrentFleePoint) == 0x000008, "Wrong alignment on BT_FleeAiComponent_C_SetCurrentFleePoint");
static_assert(sizeof(BT_FleeAiComponent_C_SetCurrentFleePoint) == 0x000010, "Wrong size on BT_FleeAiComponent_C_SetCurrentFleePoint");
static_assert(offsetof(BT_FleeAiComponent_C_SetCurrentFleePoint, FleePoint) == 0x000000, "Member 'BT_FleeAiComponent_C_SetCurrentFleePoint::FleePoint' has a wrong offset!");
static_assert(offsetof(BT_FleeAiComponent_C_SetCurrentFleePoint, local_PreviousFleePoint) == 0x000008, "Member 'BT_FleeAiComponent_C_SetCurrentFleePoint::local_PreviousFleePoint' has a wrong offset!");

}

