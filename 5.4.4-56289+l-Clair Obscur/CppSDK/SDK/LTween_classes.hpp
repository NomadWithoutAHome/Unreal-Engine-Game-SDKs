#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LTween

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "LTween_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class LTween.LTweenBPLibrary
// 0x0000 (0x0028 - 0x0028)
class ULTweenBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ArrayKillIfIsTweening(class UObject* WorldContextObject, const TArray<class ULTweener*>& inTweenerArray, bool callComplete);
	static class ULTweener* ColorTo(class UObject* WorldContextObject, const TDelegate<void(const struct FColor& Value)>& setter, const struct FColor& StartValue, const struct FColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweenerSequence* CreateSequence(class UObject* WorldContextObject);
	static class ULTweener* DelayCall(class UObject* WorldContextObject, float DelayTime, const TDelegate<void()>& delayComplete, bool affectByGamePause, bool affectByTimeDilation);
	static class ULTweener* DelayFrameCall(class UObject* WorldContextObject, int32 FrameCount, const TDelegate<void()>& delayComplete, bool affectByGamePause);
	static class ULTweener* DoubleTo(class UObject* WorldContextObject, const TDelegate<void(double Value)>& setter, double StartValue, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* FloatTo(class UObject* WorldContextObject, const TDelegate<void(float Value)>& setter, float StartValue, float endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* IntTo(class UObject* WorldContextObject, const TDelegate<void(int32 Value)>& setter, int32 StartValue, int32 endValue, float Duration, float Delay, ELTweenEase Ease);
	static bool IsTweening(class UObject* WorldContextObject, class ULTweener* inTweener);
	static void KillIfIsTweening(class UObject* WorldContextObject, class ULTweener* inTweener, bool callComplete);
	static class ULTweener* LinearColorTo(class UObject* WorldContextObject, const TDelegate<void(const struct FLinearColor& Value)>& setter, const struct FLinearColor& StartValue, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionTo(class USceneComponent* Target, const struct FVector& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionTo_Sweep(class USceneComponent* Target, const struct FVector& endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionXTo(class USceneComponent* Target, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionXTo_Sweep(class USceneComponent* Target, double endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionYTo(class USceneComponent* Target, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionYTo_Sweep(class USceneComponent* Target, double endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionZTo(class USceneComponent* Target, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalPositionZTo_Sweep(class USceneComponent* Target, double endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotateEulerAngleTo(class USceneComponent* Target, const struct FVector& eulerAngle, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotateEulerAngleTo_Sweep(class USceneComponent* Target, const struct FVector& eulerAngle, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotationQuaternionTo(class USceneComponent* Target, const struct FQuat& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotationQuaternionTo_Sweep(class USceneComponent* Target, const struct FQuat& endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotatorTo(class USceneComponent* Target, const struct FRotator& endValue, bool ShortestPath, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalRotatorTo_Sweep(class USceneComponent* Target, const struct FRotator& endValue, bool ShortestPath, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* LocalScaleTo(class USceneComponent* Target, const struct FVector& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MaterialScalarParameterTo(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Target, class FName ParameterName, float endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MaterialVectorParameterTo(class UObject* WorldContextObject, class UMaterialInstanceDynamic* Target, class FName ParameterName, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MeshMaterialScalarParameterTo(class UPrimitiveComponent* Target, int32 MaterialIndex, class FName ParameterName, float endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* MeshMaterialVectorParameterTo(class UPrimitiveComponent* Target, int32 MaterialIndex, class FName ParameterName, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* QuaternionTo(class UObject* WorldContextObject, const TDelegate<void(const struct FQuat& Value)>& setter, const struct FQuat& StartValue, const struct FQuat& endValue, float Duration, float Delay, ELTweenEase Ease);
	static struct FLTweenDelegateHandleWrapper RegisterUpdateEvent(class UObject* WorldContextObject, const TDelegate<void(float InProgress)>& Update);
	static class ULTweener* RepeatCall(class UObject* WorldContextObject, TDelegate<void()> callFunction, float DelayTime, float Interval, int32 RepeatCount);
	static class ULTweener* RotatorTo(class UObject* WorldContextObject, const TDelegate<void(const struct FRotator& Value)>& setter, const struct FRotator& StartValue, const struct FRotator& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_Border_ContentColorAndOpacityTo(class UObject* WorldContextObject, class UBorder* Target, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_BorderSlot_PaddingTo(class UObject* WorldContextObject, class UBorderSlot* Target, const struct FMargin& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_Button_ColorAndOpacityTo(class UObject* WorldContextObject, class UButton* Target, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_ButtonSlot_PaddingTo(class UObject* WorldContextObject, class UButtonSlot* Target, const struct FMargin& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_CanvasPanelSlot_PositionTo(class UObject* WorldContextObject, class UCanvasPanelSlot* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_CanvasPanelSlot_SizeTo(class UObject* WorldContextObject, class UCanvasPanelSlot* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_HorizontalBoxSlot_PaddingTo(class UObject* WorldContextObject, class UHorizontalBoxSlot* Target, const struct FMargin& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_Image_ColorAndOpacityTo(class UObject* WorldContextObject, class UImage* Target, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_OverlaySlot_PaddingTo(class UObject* WorldContextObject, class UOverlaySlot* Target, const struct FMargin& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_RenderOpacityTo(class UObject* WorldContextObject, class UWidget* Target, float endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_RenderTransform_AngleTo(class UObject* WorldContextObject, class UWidget* Target, float endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_RenderTransform_ScaleTo(class UObject* WorldContextObject, class UWidget* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_RenderTransform_ShearTo(class UObject* WorldContextObject, class UWidget* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_RenderTransform_TranslationTo(class UObject* WorldContextObject, class UWidget* Target, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_UserWidget_ColorAndOpacityTo(class UObject* WorldContextObject, class UUserWidget* Target, const struct FLinearColor& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* UMG_VerticalBoxSlot_PaddingTo(class UObject* WorldContextObject, class UVerticalBoxSlot* Target, const struct FMargin& endValue, float Duration, float Delay, ELTweenEase Ease);
	static void UnregisterUpdateEvent(class UObject* WorldContextObject, const struct FLTweenDelegateHandleWrapper& delegateHandle);
	static class ULTweener* UpdateCall(class UObject* WorldContextObject, const TDelegate<void(float InProgress)>& Update);
	static class ULTweener* Vector2To(class UObject* WorldContextObject, const TDelegate<void(const struct FVector2D& Value)>& setter, const struct FVector2D& StartValue, const struct FVector2D& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* Vector3To(class UObject* WorldContextObject, const TDelegate<void(const struct FVector& Value)>& setter, const struct FVector& StartValue, const struct FVector& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* Vector4To(class UObject* WorldContextObject, const TDelegate<void(const struct FVector4& Value)>& setter, const struct FVector4& StartValue, const struct FVector4& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* VirtualCall(class UObject* WorldContextObject, float Duration, float Delay, const TDelegate<void()>& Start, const TDelegate<void(float InProgress)>& Update, const TDelegate<void()>& complete);
	static class ULTweener* WorldPositionTo(class USceneComponent* Target, const struct FVector& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionTo_Sweep(class USceneComponent* Target, const struct FVector& endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionXTo(class USceneComponent* Target, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionXTo_Sweep(class USceneComponent* Target, double endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionYTo(class USceneComponent* Target, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionYTo_Sweep(class USceneComponent* Target, double endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionZTo(class USceneComponent* Target, double endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldPositionZTo_Sweep(class USceneComponent* Target, double endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotateEulerAngleTo(class USceneComponent* Target, const struct FVector& eulerAngle, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotateEulerAngleTo_Sweep(class USceneComponent* Target, const struct FVector& eulerAngle, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotationQuaternionTo(class USceneComponent* Target, const struct FQuat& endValue, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotationQuaternionTo_Sweep(class USceneComponent* Target, const struct FQuat& endValue, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotatorTo(class USceneComponent* Target, const struct FRotator& endValue, bool ShortestPath, float Duration, float Delay, ELTweenEase Ease);
	static class ULTweener* WorldRotatorTo_Sweep(class USceneComponent* Target, const struct FRotator& endValue, bool ShortestPath, struct FHitResult* SweepHitResult, bool sweep, bool Teleport, float Duration, float Delay, ELTweenEase Ease);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenBPLibrary">();
	}
	static class ULTweenBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenBPLibrary>();
	}
};
static_assert(alignof(ULTweenBPLibrary) == 0x000008, "Wrong alignment on ULTweenBPLibrary");
static_assert(sizeof(ULTweenBPLibrary) == 0x000028, "Wrong size on ULTweenBPLibrary");

// Class LTween.LTweener
// 0x0088 (0x00B0 - 0x0028)
class ULTweener : public UObject
{
public:
	uint8                                         Pad_28[0x88];                                      // 0x0028(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceComplete();
	int32 GetLoopCount();
	void Goto(float timePoint);
	void Kill(bool callComplete);
	class ULTweener* OnComplete(const TDelegate<void()>& newComplete);
	class ULTweener* OnCycleComplete(const TDelegate<void()>& newCycleComplete);
	class ULTweener* OnCycleStart(const TDelegate<void()>& newCycleStart);
	class ULTweener* OnStart(const TDelegate<void()>& newStart);
	class ULTweener* OnUpdate(const TDelegate<void(float InProgress)>& newUpdate);
	void Pause();
	void Restart();
	void Resume();
	class ULTweener* SetAffectByGamePause(bool Value);
	class ULTweener* SetAffectByTimeDilation(bool Value);
	class ULTweener* SetCurveFloat(class UCurveFloat* newCurveFloat);
	class ULTweener* SetDelay(float newDelay);
	class ULTweener* SetEase(ELTweenEase easetype);
	class ULTweener* SetEaseCurve(class UCurveFloat* newCurve);
	class ULTweener* SetLoop(ELTweenLoop newLoopType, int32 newLoopCount);
	class ULTweener* SetLoopType(ELTweenLoop newLoopType);
	class ULTweener* SetTickType(ELTweenTickType Value);

	bool GetAffectByGamePause() const;
	bool GetAffectByTimeDilation() const;
	float GetDuration() const;
	float GetElapsedTime() const;
	int32 GetLoopCycleCount() const;
	float GetProgress() const;
	ELTweenTickType GetTickType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweener">();
	}
	static class ULTweener* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweener>();
	}
};
static_assert(alignof(ULTweener) == 0x000008, "Wrong alignment on ULTweener");
static_assert(sizeof(ULTweener) == 0x0000B0, "Wrong size on ULTweener");

// Class LTween.LTweenerColor
// 0x0038 (0x00E8 - 0x00B0)
class ULTweenerColor final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerColor">();
	}
	static class ULTweenerColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerColor>();
	}
};
static_assert(alignof(ULTweenerColor) == 0x000008, "Wrong alignment on ULTweenerColor");
static_assert(sizeof(ULTweenerColor) == 0x0000E8, "Wrong size on ULTweenerColor");

// Class LTween.LTweenerDouble
// 0x0040 (0x00F0 - 0x00B0)
class ULTweenerDouble final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x40];                                      // 0x00B0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerDouble">();
	}
	static class ULTweenerDouble* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerDouble>();
	}
};
static_assert(alignof(ULTweenerDouble) == 0x000008, "Wrong alignment on ULTweenerDouble");
static_assert(sizeof(ULTweenerDouble) == 0x0000F0, "Wrong size on ULTweenerDouble");

// Class LTween.LTweenerFloat
// 0x0038 (0x00E8 - 0x00B0)
class ULTweenerFloat final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerFloat">();
	}
	static class ULTweenerFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerFloat>();
	}
};
static_assert(alignof(ULTweenerFloat) == 0x000008, "Wrong alignment on ULTweenerFloat");
static_assert(sizeof(ULTweenerFloat) == 0x0000E8, "Wrong size on ULTweenerFloat");

// Class LTween.LTweenerFrame
// 0x0008 (0x00B8 - 0x00B0)
class ULTweenerFrame final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerFrame">();
	}
	static class ULTweenerFrame* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerFrame>();
	}
};
static_assert(alignof(ULTweenerFrame) == 0x000008, "Wrong alignment on ULTweenerFrame");
static_assert(sizeof(ULTweenerFrame) == 0x0000B8, "Wrong size on ULTweenerFrame");

// Class LTween.LTweenerInteger
// 0x0038 (0x00E8 - 0x00B0)
class ULTweenerInteger final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerInteger">();
	}
	static class ULTweenerInteger* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerInteger>();
	}
};
static_assert(alignof(ULTweenerInteger) == 0x000008, "Wrong alignment on ULTweenerInteger");
static_assert(sizeof(ULTweenerInteger) == 0x0000E8, "Wrong size on ULTweenerInteger");

// Class LTween.LTweenerLinearColor
// 0x0058 (0x0108 - 0x00B0)
class ULTweenerLinearColor final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerLinearColor">();
	}
	static class ULTweenerLinearColor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerLinearColor>();
	}
};
static_assert(alignof(ULTweenerLinearColor) == 0x000008, "Wrong alignment on ULTweenerLinearColor");
static_assert(sizeof(ULTweenerLinearColor) == 0x000108, "Wrong size on ULTweenerLinearColor");

// Class LTween.LTweenerMaterialScalar
// 0x0038 (0x00E8 - 0x00B0)
class ULTweenerMaterialScalar final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerMaterialScalar">();
	}
	static class ULTweenerMaterialScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerMaterialScalar>();
	}
};
static_assert(alignof(ULTweenerMaterialScalar) == 0x000008, "Wrong alignment on ULTweenerMaterialScalar");
static_assert(sizeof(ULTweenerMaterialScalar) == 0x0000E8, "Wrong size on ULTweenerMaterialScalar");

// Class LTween.LTweenerMaterialVector
// 0x0060 (0x0110 - 0x00B0)
class ULTweenerMaterialVector final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x60];                                      // 0x00B0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerMaterialVector">();
	}
	static class ULTweenerMaterialVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerMaterialVector>();
	}
};
static_assert(alignof(ULTweenerMaterialVector) == 0x000008, "Wrong alignment on ULTweenerMaterialVector");
static_assert(sizeof(ULTweenerMaterialVector) == 0x000110, "Wrong size on ULTweenerMaterialVector");

// Class LTween.LTweenerPosition
// 0x0088 (0x0138 - 0x00B0)
class ULTweenerPosition final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x88];                                      // 0x00B0(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerPosition">();
	}
	static class ULTweenerPosition* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerPosition>();
	}
};
static_assert(alignof(ULTweenerPosition) == 0x000008, "Wrong alignment on ULTweenerPosition");
static_assert(sizeof(ULTweenerPosition) == 0x000138, "Wrong size on ULTweenerPosition");

// Class LTween.LTweenerQuaternion
// 0x0090 (0x0140 - 0x00B0)
class ULTweenerQuaternion final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x90];                                      // 0x00B0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerQuaternion">();
	}
	static class ULTweenerQuaternion* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerQuaternion>();
	}
};
static_assert(alignof(ULTweenerQuaternion) == 0x000008, "Wrong alignment on ULTweenerQuaternion");
static_assert(sizeof(ULTweenerQuaternion) == 0x000140, "Wrong size on ULTweenerQuaternion");

// Class LTween.LTweenerRotationEuler
// 0x00A0 (0x0150 - 0x00B0)
class ULTweenerRotationEuler final : public ULTweener
{
public:
	uint8                                         Pad_B0[0xA0];                                      // 0x00B0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotationEuler">();
	}
	static class ULTweenerRotationEuler* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotationEuler>();
	}
};
static_assert(alignof(ULTweenerRotationEuler) == 0x000008, "Wrong alignment on ULTweenerRotationEuler");
static_assert(sizeof(ULTweenerRotationEuler) == 0x000150, "Wrong size on ULTweenerRotationEuler");

// Class LTween.LTweenerRotationQuat
// 0x00B0 (0x0160 - 0x00B0)
class ULTweenerRotationQuat final : public ULTweener
{
public:
	uint8                                         Pad_B0[0xB0];                                      // 0x00B0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotationQuat">();
	}
	static class ULTweenerRotationQuat* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotationQuat>();
	}
};
static_assert(alignof(ULTweenerRotationQuat) == 0x000008, "Wrong alignment on ULTweenerRotationQuat");
static_assert(sizeof(ULTweenerRotationQuat) == 0x000160, "Wrong size on ULTweenerRotationQuat");

// Class LTween.LTweenerRotator
// 0x0070 (0x0120 - 0x00B0)
class ULTweenerRotator final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x70];                                      // 0x00B0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerRotator">();
	}
	static class ULTweenerRotator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerRotator>();
	}
};
static_assert(alignof(ULTweenerRotator) == 0x000008, "Wrong alignment on ULTweenerRotator");
static_assert(sizeof(ULTweenerRotator) == 0x000120, "Wrong size on ULTweenerRotator");

// Class LTween.LTweenerScale
// 0x0070 (0x0120 - 0x00B0)
class ULTweenerScale final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x70];                                      // 0x00B0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerScale">();
	}
	static class ULTweenerScale* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerScale>();
	}
};
static_assert(alignof(ULTweenerScale) == 0x000008, "Wrong alignment on ULTweenerScale");
static_assert(sizeof(ULTweenerScale) == 0x000120, "Wrong size on ULTweenerScale");

// Class LTween.LTweenerSequence
// 0x0028 (0x00D8 - 0x00B0)
class ULTweenerSequence final : public ULTweener
{
public:
	TArray<class ULTweener*>                      tweenerList;                                       // 0x00B0(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class ULTweener*>                      finishedTweenerList;                               // 0x00C0(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x8];                                       // 0x00D0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class ULTweenerSequence* Append(class UObject* WorldContextObject, class ULTweener* tweener);
	class ULTweenerSequence* AppendInterval(class UObject* WorldContextObject, float Interval);
	class ULTweenerSequence* Insert(class UObject* WorldContextObject, float timePosition, class ULTweener* tweener);
	class ULTweenerSequence* Join(class UObject* WorldContextObject, class ULTweener* tweener);
	class ULTweenerSequence* Prepend(class UObject* WorldContextObject, class ULTweener* tweener);
	class ULTweenerSequence* PrependInterval(class UObject* WorldContextObject, float Interval);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerSequence">();
	}
	static class ULTweenerSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerSequence>();
	}
};
static_assert(alignof(ULTweenerSequence) == 0x000008, "Wrong alignment on ULTweenerSequence");
static_assert(sizeof(ULTweenerSequence) == 0x0000D8, "Wrong size on ULTweenerSequence");
static_assert(offsetof(ULTweenerSequence, tweenerList) == 0x0000B0, "Member 'ULTweenerSequence::tweenerList' has a wrong offset!");
static_assert(offsetof(ULTweenerSequence, finishedTweenerList) == 0x0000C0, "Member 'ULTweenerSequence::finishedTweenerList' has a wrong offset!");

// Class LTween.LTweenerUpdate
// 0x0000 (0x00B0 - 0x00B0)
class ULTweenerUpdate final : public ULTweener
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerUpdate">();
	}
	static class ULTweenerUpdate* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerUpdate>();
	}
};
static_assert(alignof(ULTweenerUpdate) == 0x000008, "Wrong alignment on ULTweenerUpdate");
static_assert(sizeof(ULTweenerUpdate) == 0x0000B0, "Wrong size on ULTweenerUpdate");

// Class LTween.LTweenerVector
// 0x0070 (0x0120 - 0x00B0)
class ULTweenerVector final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x70];                                      // 0x00B0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector">();
	}
	static class ULTweenerVector* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector>();
	}
};
static_assert(alignof(ULTweenerVector) == 0x000008, "Wrong alignment on ULTweenerVector");
static_assert(sizeof(ULTweenerVector) == 0x000120, "Wrong size on ULTweenerVector");

// Class LTween.LTweenerVector2D
// 0x0058 (0x0108 - 0x00B0)
class ULTweenerVector2D final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x58];                                      // 0x00B0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector2D">();
	}
	static class ULTweenerVector2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector2D>();
	}
};
static_assert(alignof(ULTweenerVector2D) == 0x000008, "Wrong alignment on ULTweenerVector2D");
static_assert(sizeof(ULTweenerVector2D) == 0x000108, "Wrong size on ULTweenerVector2D");

// Class LTween.LTweenerVector4
// 0x0090 (0x0140 - 0x00B0)
class ULTweenerVector4 final : public ULTweener
{
public:
	uint8                                         Pad_B0[0x90];                                      // 0x00B0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVector4">();
	}
	static class ULTweenerVector4* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVector4>();
	}
};
static_assert(alignof(ULTweenerVector4) == 0x000008, "Wrong alignment on ULTweenerVector4");
static_assert(sizeof(ULTweenerVector4) == 0x000140, "Wrong size on ULTweenerVector4");

// Class LTween.LTweenerVirtual
// 0x0000 (0x00B0 - 0x00B0)
class ULTweenerVirtual final : public ULTweener
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenerVirtual">();
	}
	static class ULTweenerVirtual* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenerVirtual>();
	}
};
static_assert(alignof(ULTweenerVirtual) == 0x000008, "Wrong alignment on ULTweenerVirtual");
static_assert(sizeof(ULTweenerVirtual) == 0x0000B0, "Wrong size on ULTweenerVirtual");

// Class LTween.LTweenTickHelperComponent
// 0x0008 (0x00A8 - 0x00A0)
class ULTweenTickHelperComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class ULTweenManager>          Target;                                            // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenTickHelperComponent">();
	}
	static class ULTweenTickHelperComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenTickHelperComponent>();
	}
};
static_assert(alignof(ULTweenTickHelperComponent) == 0x000008, "Wrong alignment on ULTweenTickHelperComponent");
static_assert(sizeof(ULTweenTickHelperComponent) == 0x0000A8, "Wrong size on ULTweenTickHelperComponent");
static_assert(offsetof(ULTweenTickHelperComponent, Target) == 0x0000A0, "Member 'ULTweenTickHelperComponent::Target' has a wrong offset!");

// Class LTween.LTweenTickHelperActor
// 0x0010 (0x02A0 - 0x0290)
class ALTweenTickHelperActor final : public AActor
{
public:
	TWeakObjectPtr<class ULTweenManager>          Target;                                            // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenTickHelperActor">();
	}
	static class ALTweenTickHelperActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALTweenTickHelperActor>();
	}
};
static_assert(alignof(ALTweenTickHelperActor) == 0x000008, "Wrong alignment on ALTweenTickHelperActor");
static_assert(sizeof(ALTweenTickHelperActor) == 0x0002A0, "Wrong size on ALTweenTickHelperActor");
static_assert(offsetof(ALTweenTickHelperActor, Target) == 0x000290, "Member 'ALTweenTickHelperActor::Target' has a wrong offset!");

// Class LTween.LTweenTickHelperWorldSubsystem
// 0x0000 (0x0030 - 0x0030)
class ULTweenTickHelperWorldSubsystem final : public UWorldSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenTickHelperWorldSubsystem">();
	}
	static class ULTweenTickHelperWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenTickHelperWorldSubsystem>();
	}
};
static_assert(alignof(ULTweenTickHelperWorldSubsystem) == 0x000008, "Wrong alignment on ULTweenTickHelperWorldSubsystem");
static_assert(sizeof(ULTweenTickHelperWorldSubsystem) == 0x000030, "Wrong size on ULTweenTickHelperWorldSubsystem");

// Class LTween.LTweenManager
// 0x0030 (0x0060 - 0x0030)
class ULTweenManager final : public UGameInstanceSubsystem
{
public:
	TArray<class ULTweener*>                      tweenerList;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULTweenManager* GetLTweenInstance(class UObject* WorldContextObject);

	void CustomTick(float DeltaTime);
	void DisableTick();
	void EnableTick();
	void KillAllTweens(bool callComplete);
	void ManualTick(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LTweenManager">();
	}
	static class ULTweenManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULTweenManager>();
	}
};
static_assert(alignof(ULTweenManager) == 0x000008, "Wrong alignment on ULTweenManager");
static_assert(sizeof(ULTweenManager) == 0x000060, "Wrong size on ULTweenManager");
static_assert(offsetof(ULTweenManager, tweenerList) == 0x000030, "Member 'ULTweenManager::tweenerList' has a wrong offset!");

}

