#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BattleInput_EnemyTurn

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.ExecuteUbergraph_WBP_BattleInput_EnemyTurn
// 0x0088 (0x0088 - 0x0000)
struct WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x0024(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_3;            // 0x0034(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_4;            // 0x0044(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ABP_jRPG_Character_Battle_Base_C* Character)> K2Node_CreateDelegate_OutputDelegate_5; // 0x0054(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       K2Node_CustomEvent_CharacterBattleBaseReference;   // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       K2Node_CustomEvent_Character;                      // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn) == 0x000008, "Wrong alignment on WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn");
static_assert(sizeof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn) == 0x000088, "Wrong size on WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, EntryPoint) == 0x000000, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CreateDelegate_OutputDelegate_1) == 0x000014, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CreateDelegate_OutputDelegate_2) == 0x000024, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CreateDelegate_OutputDelegate_3) == 0x000034, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CreateDelegate_OutputDelegate_4) == 0x000044, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CreateDelegate_OutputDelegate_5) == 0x000054, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, CallFunc_PlayAnimation_ReturnValue) == 0x000068, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CustomEvent_CharacterBattleBaseReference) == 0x000070, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CustomEvent_CharacterBattleBaseReference' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, CallFunc_Not_PreBool_ReturnValue) == 0x000078, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, CallFunc_Not_PreBool_ReturnValue_1) == 0x000079, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, CallFunc_Not_PreBool_ReturnValue_2) == 0x00007A, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn, K2Node_CustomEvent_Character) == 0x000080, "Member 'WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn::K2Node_CustomEvent_Character' has a wrong offset!");

// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.OnJumpStart
// 0x0008 (0x0008 - 0x0000)
struct WBP_BattleInput_EnemyTurn_C_OnJumpStart final
{
public:
	class ABP_jRPG_Character_Battle_Base_C*       Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleInput_EnemyTurn_C_OnJumpStart) == 0x000008, "Wrong alignment on WBP_BattleInput_EnemyTurn_C_OnJumpStart");
static_assert(sizeof(WBP_BattleInput_EnemyTurn_C_OnJumpStart) == 0x000008, "Wrong size on WBP_BattleInput_EnemyTurn_C_OnJumpStart");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_OnJumpStart, Character) == 0x000000, "Member 'WBP_BattleInput_EnemyTurn_C_OnJumpStart::Character' has a wrong offset!");

// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.SetCurrentCharacter
// 0x0008 (0x0008 - 0x0000)
struct WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter final
{
public:
	class ABP_jRPG_Character_Battle_Base_C*       CharacterBattleBaseReference_0;                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter) == 0x000008, "Wrong alignment on WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter");
static_assert(sizeof(WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter) == 0x000008, "Wrong size on WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter, CharacterBattleBaseReference_0) == 0x000000, "Member 'WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter::CharacterBattleBaseReference_0' has a wrong offset!");

// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.UpdateUnlockedFeatures
// 0x000A (0x000A - 0x0000)
struct WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUnlockedGradientParry_ReturnValue;     // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasUnlockedJump_ReturnValue;              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures) == 0x000001, "Wrong alignment on WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures");
static_assert(sizeof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures) == 0x00000A, "Wrong size on WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, Temp_bool_Variable) == 0x000000, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, Temp_byte_Variable) == 0x000001, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, Temp_bool_Variable_1) == 0x000003, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, Temp_byte_Variable_2) == 0x000004, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, Temp_byte_Variable_3) == 0x000005, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, CallFunc_HasUnlockedGradientParry_ReturnValue) == 0x000006, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::CallFunc_HasUnlockedGradientParry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, CallFunc_HasUnlockedJump_ReturnValue) == 0x000007, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::CallFunc_HasUnlockedJump_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, K2Node_Select_Default) == 0x000008, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures, K2Node_Select_Default_1) == 0x000009, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateUnlockedFeatures::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.UpdateVisibilityAndBindingsFromTargets
// 0x0028 (0x0028 - 0x0000)
struct WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets final
{
public:
	TArray<class ABP_jRPG_Character_Battle_Base_C*> Targets;                                         // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          IsVisible_0;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0026(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0027(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets) == 0x000008, "Wrong alignment on WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets");
static_assert(sizeof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets) == 0x000028, "Wrong size on WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, Targets) == 0x000000, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::Targets' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, IsVisible_0) == 0x000010, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::IsVisible_0' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, Temp_bool_Variable) == 0x000011, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, CallFunc_Array_Get_Item) == 0x000018, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, CallFunc_Greater_IntInt_ReturnValue) == 0x000024, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, Temp_byte_Variable) == 0x000025, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, Temp_byte_Variable_1) == 0x000026, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets, K2Node_Select_Default) == 0x000027, "Member 'WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets::K2Node_Select_Default' has a wrong offset!");

}

