#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HUD_TurnOrder

#include "Basic.hpp"

#include "ECharacterTeamSelector_structs.hpp"
#include "Engine_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HUD_TurnOrder.WBP_HUD_TurnOrder_C
// 0x00A0 (0x0380 - 0x02E0)
class UWBP_HUD_TurnOrder_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Arrow;                                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox_0;                                     // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           VerticalBox_74;                                    // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_TurnOrder_Portrait_C*          WBP_HUD_TurnOrder_Portrait;                        // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_TurnOrder_Portrait_C*          WBP_HUD_TurnOrder_Portrait_1;                      // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_TurnOrder_Portrait_C*          WBP_HUD_TurnOrder_Portrait_2;                      // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_TurnOrder_Background_ActiveCharacter_C* WBP_TurnOrder_ActiveCharacterBackground;      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWBP_HUD_TurnOrder_Portrait_C*>  Portraits_List;                                    // 0x0320(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TMap<class UWBP_HUD_TurnOrder_Portrait_C*, class UAC_jRPG_CharacterBattleStats_C*> PortraitsToCharacters; // 0x0330(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void Active_Turn();
	void Appear_Anim();
	void Appear_Portraits(bool PlayAnim);
	void Construct();
	void ExecuteUbergraph_WBP_HUD_TurnOrder(int32 EntryPoint);
	void OnTargetedCharacterChanged(const TArray<class ABP_jRPG_Character_Battle_Base_C*>& Character);
	void PreConstruct(bool IsDesignTime);
	void SetCharacters(const TArray<class UAC_jRPG_CharacterBattleStats_C*>& Characters, const class UAC_jRPG_BattleManager_C* BattleManager);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HUD_TurnOrder_C">();
	}
	static class UWBP_HUD_TurnOrder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HUD_TurnOrder_C>();
	}
};
static_assert(alignof(UWBP_HUD_TurnOrder_C) == 0x000008, "Wrong alignment on UWBP_HUD_TurnOrder_C");
static_assert(sizeof(UWBP_HUD_TurnOrder_C) == 0x000380, "Wrong size on UWBP_HUD_TurnOrder_C");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_HUD_TurnOrder_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, Arrow) == 0x0002E8, "Member 'UWBP_HUD_TurnOrder_C::Arrow' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, RetainerBox_0) == 0x0002F0, "Member 'UWBP_HUD_TurnOrder_C::RetainerBox_0' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, VerticalBox_74) == 0x0002F8, "Member 'UWBP_HUD_TurnOrder_C::VerticalBox_74' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, WBP_HUD_TurnOrder_Portrait) == 0x000300, "Member 'UWBP_HUD_TurnOrder_C::WBP_HUD_TurnOrder_Portrait' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, WBP_HUD_TurnOrder_Portrait_1) == 0x000308, "Member 'UWBP_HUD_TurnOrder_C::WBP_HUD_TurnOrder_Portrait_1' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, WBP_HUD_TurnOrder_Portrait_2) == 0x000310, "Member 'UWBP_HUD_TurnOrder_C::WBP_HUD_TurnOrder_Portrait_2' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, WBP_TurnOrder_ActiveCharacterBackground) == 0x000318, "Member 'UWBP_HUD_TurnOrder_C::WBP_TurnOrder_ActiveCharacterBackground' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, Portraits_List) == 0x000320, "Member 'UWBP_HUD_TurnOrder_C::Portraits_List' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_TurnOrder_C, PortraitsToCharacters) == 0x000330, "Member 'UWBP_HUD_TurnOrder_C::PortraitsToCharacters' has a wrong offset!");

}

