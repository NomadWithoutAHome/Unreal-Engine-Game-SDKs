#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_StainHolderComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EAttackType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EStainChangeReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_StainHolderComponent.BP_StainHolderComponent_C
// 0x0290 (0x0330 - 0x00A0)
class UBP_StainHolderComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class ABP_StainBase_C*>                ActiveStainActors;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, Deprecated)
	TArray<class ABP_StainBase_C*>                DeleteInProgressStains;                            // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, Deprecated)
	TMap<EAttackType, class UClass*>              Stain_BP_By_Type;                                  // 0x00C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	class USplineComponent*                       TargetSpline;                                      // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<EAttackType, TSoftClassPtr<class UClass>> Stain_BP_By_Type_Soft;                            // 0x0120(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	int32                                         MaxStainsCount;                                    // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, double>                           AddSlotAlphaByIndex;                               // 0x0178(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<int32, double>                           RemoveSlotAlphaByIndex;                            // 0x01C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	double                                        AnimSpeed;                                         // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          colorRandomStream;                                 // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	int32                                         DEBUG_DemoStainsCount;                             // 0x0228(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DemoMode;                                    // 0x022C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_ShowSlots;                                   // 0x022D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_VerboseLog;                                  // 0x022E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_UseSimpleOrbs;                               // 0x022F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(EStainChangeReason Reason, const TMap<EAttackType, int32>& GainedStains, const TMap<EAttackType, int32>& LostStains)> OnStainChange; // 0x0230(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<EAttackType, TSoftClassPtr<class UClass>> DebugStain_BP_By_Type_Soft;                       // 0x0240(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         LoadRefCount;                                      // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAttackType>                           BattleActionValidatedStainTypes;                   // 0x0298(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DEBUG_IsPerformingDebugCommand;                    // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_StainsPanel_C*                     StainsUI;                                          // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	EAttackType                                   StainToCreateFromSkill;                            // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EAttackType StainType)> OnStainAddedFromSkill;                     // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          StainGenerationOverride;                           // 0x02D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAttackType>                           StainQueue;                                        // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(EAttackType StainType)> OnStainCycled;                             // 0x02E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 A, int32 B, class UOrderingResult* OrderingResult)> Dummy_CompareInts; // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          bCanOverchargeWithDarkStains;                      // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EStainChangeReason Reason, const TMap<EAttackType, int32>& ConsumedStains)> OnStainConsummed; // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         Achievement_ConsecutiveOverchargeAmount;           // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Achievement_HasConsumedStainsThisTurn;             // 0x0324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Achievement_LuneStains;                            // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Achievement_UnlockLuneStains();
	bool CanOverchargeWithDarkStains();
	void CanSkillOverpowerMechanic(class UBP_SkillDataComponent_StainsMechanic_C* SkillData, bool* CanOvercharge);
	void Construction();
	void ConsumeAllStains(EStainChangeReason Reason);
	void ConsumeStain(class ABP_StainBase_C* StainToConsume, EStainChangeReason Reason, class ABP_StainBase_C** StainConsumed);
	void ConsumeStainAtIndex(int32 StainIndex, EStainChangeReason Reason);
	void ConsumeStainByType(EAttackType StainToConsume, EStainChangeReason Reason);
	void ConsumeStains(TArray<class ABP_StainBase_C*>& StainActors, EStainChangeReason Reason);
	void ConsumeStainsAtIndexes(TArray<int32>& StainIndex, EStainChangeReason Reason);
	void CreatePortraitWidget(class UUserWidget** CreatedUserWidget, int32* SlotIndex);
	void CreateStainByClass(class UClass* StainBP, bool PlayAnim, EStainChangeReason Reason);
	void CreateStainByType(EAttackType StainType, bool PlayAnim, EStainChangeReason Reason);
	void DEBUG_AlphaMapToString(const TMap<int32, double>& TargetMap, class FText* Result);
	void DEPRECATED_Get_Spline_Slot_Base_Time(class USplineComponent* Spline, int32 SlotIndex, int32 SlotCount, class ABP_StainBase_C* DEBUG_StainInfo, double* Time);
	struct FTransform DEPRECATED_GetSplinePosition(class USplineComponent* Spline, int32 ElementIndex, int32 ElementCount, class ABP_StainBase_C* DEBUG_StainInfo);
	void ExecuteUbergraph_BP_StainHolderComponent(int32 EntryPoint);
	void Find_All_Active_Stains_Of_Type(EAttackType Type, TArray<class ABP_StainBase_C*>* StainsOfType, TArray<int32>* Indices);
	void FindStainsObjectsByQuantities(const TMap<EAttackType, int32>& TargetMap, TMap<EAttackType, int32>* AvailableCountByType, bool* CanAfford, TArray<int32>* StainIndexes);
	void FindStainsSkillComponent(class UBP_DataAsset_Skill_C* SkillDefinition, class UBP_SkillDataComponent_StainsMechanic_C** StainSkillComponent);
	void FinishDeleteSlot(int32 DeletionIndex);
	void FinishInsertSlot(int32 InsertedIndex);
	void FN_ApplyArrayRemap(TArray<int32>& NewParam, TArray<int32>& RemapTable);
	void FN_ApplyMapRemap(const TMap<int32, double>& InMap, const TMap<int32, int32>& RemapTable, TMap<int32, double>* OutMap);
	void GenerateStainsFromSkill(class ABP_Battle_SkillScript_C* SkillScript);
	void Get_Active_Stain_Count_By_Type(TMap<EAttackType, int32>* Result);
	TArray<class ABP_StainBase_C*> Get_N_Stains(int32 Number, bool NewestFirst, bool OldestFirst, bool Random);
	double Get_Slot_Width_Multiplier(int32 Index_0);
	void Get_Stain_Class_by_Type(EAttackType ElementType);
	void GetActiveStains(TArray<class ABP_StainBase_C*>* Stains);
	void GetActiveStainsByType(EAttackType Type, TArray<class ABP_StainBase_C*>* Stains);
	void GetAllSlotsStartTimesAndWidth(int32 Count, TArray<double>* StartTimes, TArray<double>* Widths);
	void GetCurrentStainQueue(TArray<EAttackType>* Stains);
	void GetFirstAvailableSlotIndex(int32* SlotIndex);
	void GetMaxElementType(const TMap<EAttackType, int32>& CountPerType, bool* IsEmpty, TArray<EAttackType>* Types, int32* Count);
	int32 GetMaxSlotsCount();
	void GetNextRandomStainToRemove(bool Random, class ABP_StainBase_C** OutItem);
	void GetSplineSlotBounds(class USplineComponent* Spline, int32 SlotCount, double* StartTime, double* EndTime);
	void GetStainCountOfType(EAttackType StainType, int32* StainCount);
	void GetValidStainsTypes(TArray<EAttackType>* StainsArray);
	void GetWeaponActor(class ABP_WeaponSkin_Lune_Base_C** WeaponActor);
	double GetWidthPerSlot();
	void Has_All_Types_for_Void(const TMap<EAttackType, int32>& CountPerType, bool* hasVoid);
	bool HasOverchargedSkill();
	bool HasStainQuantities(const TMap<EAttackType, int32>& StainQuantities);
	void InsertStain(EAttackType StainType, EStainChangeReason Reason);
	void Is_Valid_to_Create_Stain_Type(EAttackType StainType, bool* Valid);
	void OnBattleFinished(bool Victory);
	void OnOwnerKilled();
	void OnResetBattleActionValidation();
	void OnStainConsumed(EStainChangeReason Reason, const TMap<EAttackType, int32>& ConsumedStains);
	void OnStainsChanged(const TMap<EAttackType, int32>& GainedStains, const TMap<EAttackType, int32>& LostStains, EStainChangeReason Reason);
	void OnTurnEnd();
	void OnTurnStart();
	void OverrideStainCreatedFromSkill(EAttackType NewStainType, EAttackType* OverridenStainType);
	void PrintDebugText();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RefreshWeaponActor();
	void ResetStains();
	void Sandfall_AddStain(const class FString& Element, int32 Count);
	void SetIsOverchargedWithDarkStains();
	void Shift_Array_By_Array(TArray<int32>& IndexArray, int32 FirstIndex, int32 LastIndex, int32 ShiftAmount, TMap<int32, int32>* RemapTable);
	void Shift_Array_By_Indices(int32 FirstIndex, int32 LastIndex, int32 ShiftFirstIndex, int32 ShiftLastIndex, int32 ShiftAmount, TMap<int32, int32>* RemapTable);
	void SlotIndexToStainIndex(int32 SlotIndex, int32* StainIndex);
	void SortArrayOfInts(int32 A, int32 B, class UOrderingResult* OrderingResult);
	void StainIndexToSlotIndex(int32 StainIndex, int32* SlotIndex);
	void StartDeleteSlot(int32 DeleteAtSlotIndex);
	void StartInsertSlot(int32 InsertAtIndex);
	void Test();
	void TryConsumeOverchargeStainsFromSkill(class ABP_Battle_SkillScript_C* SkillScript);
	void UpdateOverpoweredMechanic();
	void UpdateSlotAnimations();
	void UpdateSlotLocations();
	void UpdateStainQueueInitialIndex(int32* StainQueueInitialIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_StainHolderComponent_C">();
	}
	static class UBP_StainHolderComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_StainHolderComponent_C>();
	}
};
static_assert(alignof(UBP_StainHolderComponent_C) == 0x000008, "Wrong alignment on UBP_StainHolderComponent_C");
static_assert(sizeof(UBP_StainHolderComponent_C) == 0x000330, "Wrong size on UBP_StainHolderComponent_C");
static_assert(offsetof(UBP_StainHolderComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_StainHolderComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, ActiveStainActors) == 0x0000A8, "Member 'UBP_StainHolderComponent_C::ActiveStainActors' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DeleteInProgressStains) == 0x0000B8, "Member 'UBP_StainHolderComponent_C::DeleteInProgressStains' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, Stain_BP_By_Type) == 0x0000C8, "Member 'UBP_StainHolderComponent_C::Stain_BP_By_Type' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, TargetSpline) == 0x000118, "Member 'UBP_StainHolderComponent_C::TargetSpline' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, Stain_BP_By_Type_Soft) == 0x000120, "Member 'UBP_StainHolderComponent_C::Stain_BP_By_Type_Soft' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, MaxStainsCount) == 0x000170, "Member 'UBP_StainHolderComponent_C::MaxStainsCount' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, AddSlotAlphaByIndex) == 0x000178, "Member 'UBP_StainHolderComponent_C::AddSlotAlphaByIndex' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, RemoveSlotAlphaByIndex) == 0x0001C8, "Member 'UBP_StainHolderComponent_C::RemoveSlotAlphaByIndex' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, AnimSpeed) == 0x000218, "Member 'UBP_StainHolderComponent_C::AnimSpeed' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, colorRandomStream) == 0x000220, "Member 'UBP_StainHolderComponent_C::colorRandomStream' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DEBUG_DemoStainsCount) == 0x000228, "Member 'UBP_StainHolderComponent_C::DEBUG_DemoStainsCount' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DEBUG_DemoMode) == 0x00022C, "Member 'UBP_StainHolderComponent_C::DEBUG_DemoMode' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DEBUG_ShowSlots) == 0x00022D, "Member 'UBP_StainHolderComponent_C::DEBUG_ShowSlots' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DEBUG_VerboseLog) == 0x00022E, "Member 'UBP_StainHolderComponent_C::DEBUG_VerboseLog' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DEBUG_UseSimpleOrbs) == 0x00022F, "Member 'UBP_StainHolderComponent_C::DEBUG_UseSimpleOrbs' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, OnStainChange) == 0x000230, "Member 'UBP_StainHolderComponent_C::OnStainChange' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DebugStain_BP_By_Type_Soft) == 0x000240, "Member 'UBP_StainHolderComponent_C::DebugStain_BP_By_Type_Soft' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, LoadRefCount) == 0x000290, "Member 'UBP_StainHolderComponent_C::LoadRefCount' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, BattleActionValidatedStainTypes) == 0x000298, "Member 'UBP_StainHolderComponent_C::BattleActionValidatedStainTypes' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, DEBUG_IsPerformingDebugCommand) == 0x0002A8, "Member 'UBP_StainHolderComponent_C::DEBUG_IsPerformingDebugCommand' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, StainsUI) == 0x0002B0, "Member 'UBP_StainHolderComponent_C::StainsUI' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, StainToCreateFromSkill) == 0x0002B8, "Member 'UBP_StainHolderComponent_C::StainToCreateFromSkill' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, OnStainAddedFromSkill) == 0x0002C0, "Member 'UBP_StainHolderComponent_C::OnStainAddedFromSkill' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, StainGenerationOverride) == 0x0002D0, "Member 'UBP_StainHolderComponent_C::StainGenerationOverride' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, StainQueue) == 0x0002D8, "Member 'UBP_StainHolderComponent_C::StainQueue' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, OnStainCycled) == 0x0002E8, "Member 'UBP_StainHolderComponent_C::OnStainCycled' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, Dummy_CompareInts) == 0x0002F8, "Member 'UBP_StainHolderComponent_C::Dummy_CompareInts' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, bCanOverchargeWithDarkStains) == 0x000308, "Member 'UBP_StainHolderComponent_C::bCanOverchargeWithDarkStains' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, OnStainConsummed) == 0x000310, "Member 'UBP_StainHolderComponent_C::OnStainConsummed' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, Achievement_ConsecutiveOverchargeAmount) == 0x000320, "Member 'UBP_StainHolderComponent_C::Achievement_ConsecutiveOverchargeAmount' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, Achievement_HasConsumedStainsThisTurn) == 0x000324, "Member 'UBP_StainHolderComponent_C::Achievement_HasConsumedStainsThisTurn' has a wrong offset!");
static_assert(offsetof(UBP_StainHolderComponent_C, Achievement_LuneStains) == 0x000328, "Member 'UBP_StainHolderComponent_C::Achievement_LuneStains' has a wrong offset!");

}

