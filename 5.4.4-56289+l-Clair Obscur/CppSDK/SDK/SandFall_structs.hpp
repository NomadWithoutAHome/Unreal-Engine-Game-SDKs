#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SandFall

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ControlRig_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "SlateCore_structs.hpp"
#include "MoviePlayer_structs.hpp"
#include "RigVM_structs.hpp"


namespace SDK
{

// Enum SandFall.EDialogueTextSceneType
// NumValues: 0x0009
enum class EDialogueTextSceneType : uint8
{
	undefined                                = 0,
	CS                                       = 1,
	DS                                       = 2,
	IWD                                      = 3,
	BK                                       = 4,
	BL                                       = 5,
	BD                                       = 6,
	JO                                       = 7,
	EDialogueTextSceneType_MAX               = 8,
};

// Enum SandFall.QTEKeyframeType
// NumValues: 0x0003
enum class EQTEKeyframeType : uint8
{
	INACTIVE                                 = 0,
	IMPACT                                   = 1,
	QTEKeyframeType_MAX                      = 2,
};

// Enum SandFall.BattleSequenceKeyframeType
// NumValues: 0x000E
enum class EBattleSequenceKeyframeType : uint8
{
	NONE                                     = 0,
	ACTIONEFFECT_AUTOCOMBO                   = 1,
	ACTIONEFFECT                             = 2,
	COMBOWINDOW_PRE                          = 5,
	COMBOWINDOW_START                        = 6,
	COMBOWINDOW_END                          = 7,
	COMBOWINDOW_END_AUTO_STARTPRE            = 3,
	COMBO_EXIT_POINT                         = 4,
	PRESET_FAST                              = 50,
	PRESET_MEDIUM                            = 51,
	PRESET_SLOW                              = 52,
	SNAP_TO_TARGET                           = 100,
	SNAP_TO_SOURCE                           = 101,
	BattleSequenceKeyframeType_MAX           = 102,
};

// Enum SandFall.BattleSequenceCameraType
// NumValues: 0x0009
enum class EBattleSequenceCameraType : uint8
{
	NONE                                     = 0,
	OVERVIEW                                 = 1,
	TARGETING_ALLY                           = 2,
	TARGETING_ENEMY                          = 3,
	ACTION                                   = 4,
	CLOSE                                    = 5,
	ALLY_GENERAL                             = 6,
	AOE                                      = 7,
	BattleSequenceCameraType_MAX             = 8,
};

// Enum SandFall.EActivityStatus
// NumValues: 0x0003
enum class EActivityStatus : uint8
{
	Activity_Started                         = 0,
	Activity_Ended                           = 1,
	Activity_MAX                             = 2,
};

// Enum SandFall.EAlgorithmMapActionIn
// NumValues: 0x0004
enum class EAlgorithmMapActionIn : uint8
{
	Start                                    = 0,
	ValueCallback                            = 1,
	Return                                   = 2,
	EAlgorithmMapActionIn_MAX                = 3,
};

// Enum SandFall.EAlgorithmMapActionOut
// NumValues: 0x0003
enum class EAlgorithmMapActionOut : uint8
{
	LoopBody                                 = 0,
	Completed                                = 1,
	EAlgorithmMapActionOut_MAX               = 2,
};

// Enum SandFall.ECustomNavModifierComponents
// NumValues: 0x0006
enum class ECustomNavModifierComponents : uint8
{
	BoxComponent                             = 1,
	CapsuleComponent                         = 2,
	StaticMeshComponent                      = 4,
	SkeletalMeshComponent                    = 8,
	DynamicMeshComponent                     = 16,
	ECustomNavModifierComponents_MAX         = 17,
};

// Enum SandFall.EModifierStackingType
// NumValues: 0x0006
enum class EModifierStackingType : uint8
{
	Invalid                                  = 0,
	Sum                                      = 1,
	Multiply                                 = 2,
	Min                                      = 3,
	Max                                      = 4,
	Average                                  = 5,
};

// Enum SandFall.ESF_SettingsCategory
// NumValues: 0x0008
enum class ESF_SettingsCategory : uint8
{
	Undefined                                = 0,
	General                                  = 1,
	Gameplay                                 = 2,
	Audio                                    = 3,
	Graphics                                 = 4,
	Accessibility                            = 5,
	All                                      = 6,
	ESF_MAX                                  = 7,
};

// ScriptStruct SandFall.BattleSequenceKeyframe
// 0x0008 (0x0008 - 0x0000)
struct FBattleSequenceKeyframe final
{
public:
	EBattleSequenceKeyframeType                   m_keyframeType;                                    // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         m_time;                                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBattleSequenceKeyframe) == 0x000004, "Wrong alignment on FBattleSequenceKeyframe");
static_assert(sizeof(FBattleSequenceKeyframe) == 0x000008, "Wrong size on FBattleSequenceKeyframe");
static_assert(offsetof(FBattleSequenceKeyframe, m_keyframeType) == 0x000000, "Member 'FBattleSequenceKeyframe::m_keyframeType' has a wrong offset!");
static_assert(offsetof(FBattleSequenceKeyframe, m_time) == 0x000004, "Member 'FBattleSequenceKeyframe::m_time' has a wrong offset!");

// ScriptStruct SandFall.AchievementsMap
// 0x0050 (0x0050 - 0x0000)
struct FAchievementsMap final
{
public:
	TMap<class FName, float>                      AchievementsMap;                                   // 0x0000(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAchievementsMap) == 0x000008, "Wrong alignment on FAchievementsMap");
static_assert(sizeof(FAchievementsMap) == 0x000050, "Wrong size on FAchievementsMap");
static_assert(offsetof(FAchievementsMap, AchievementsMap) == 0x000000, "Member 'FAchievementsMap::AchievementsMap' has a wrong offset!");

// ScriptStruct SandFall.AnimNode_CurveBlend
// 0x0028 (0x0038 - 0x0010)
struct FAnimNode_CurveBlend final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FPoseLink                              BlendPose;                                         // 0x0020(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveBlendingProfile*                  BlendingProfile;                                   // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CurveBlend) == 0x000008, "Wrong alignment on FAnimNode_CurveBlend");
static_assert(sizeof(FAnimNode_CurveBlend) == 0x000038, "Wrong size on FAnimNode_CurveBlend");
static_assert(offsetof(FAnimNode_CurveBlend, BasePose) == 0x000010, "Member 'FAnimNode_CurveBlend::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveBlend, BlendPose) == 0x000020, "Member 'FAnimNode_CurveBlend::BlendPose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveBlend, BlendingProfile) == 0x000030, "Member 'FAnimNode_CurveBlend::BlendingProfile' has a wrong offset!");

// ScriptStruct SandFall.AnimNode_CurveModifyIntensity
// 0x0018 (0x0028 - 0x0010)
struct FAnimNode_CurveModifyIntensity final : public FAnimNode_Base
{
public:
	struct FPoseLink                              BasePose;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class UCurveModifyIntensityProfile*           IntensityProfile;                                  // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimNode_CurveModifyIntensity) == 0x000008, "Wrong alignment on FAnimNode_CurveModifyIntensity");
static_assert(sizeof(FAnimNode_CurveModifyIntensity) == 0x000028, "Wrong size on FAnimNode_CurveModifyIntensity");
static_assert(offsetof(FAnimNode_CurveModifyIntensity, BasePose) == 0x000010, "Member 'FAnimNode_CurveModifyIntensity::BasePose' has a wrong offset!");
static_assert(offsetof(FAnimNode_CurveModifyIntensity, IntensityProfile) == 0x000020, "Member 'FAnimNode_CurveModifyIntensity::IntensityProfile' has a wrong offset!");

// ScriptStruct SandFall.CameraModifier_MetaWrapper
// 0x0008 (0x0008 - 0x0000)
struct FCameraModifier_MetaWrapper final
{
public:
	class UCameraModifier_Meta*                   Modifier;                                          // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCameraModifier_MetaWrapper) == 0x000008, "Wrong alignment on FCameraModifier_MetaWrapper");
static_assert(sizeof(FCameraModifier_MetaWrapper) == 0x000008, "Wrong size on FCameraModifier_MetaWrapper");
static_assert(offsetof(FCameraModifier_MetaWrapper, Modifier) == 0x000000, "Member 'FCameraModifier_MetaWrapper::Modifier' has a wrong offset!");

// ScriptStruct SandFall.ConsoleVariablesOverrideProfile
// 0x0140 (0x0140 - 0x0000)
struct FConsoleVariablesOverrideProfile final
{
public:
	TMap<class FString, bool>                     BoolVariables;                                     // 0x0000(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    IntVariables;                                      // 0x0050(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    FloatVariables;                                    // 0x00A0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            StringVariables;                                   // 0x00F0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConsoleVariablesOverrideProfile) == 0x000008, "Wrong alignment on FConsoleVariablesOverrideProfile");
static_assert(sizeof(FConsoleVariablesOverrideProfile) == 0x000140, "Wrong size on FConsoleVariablesOverrideProfile");
static_assert(offsetof(FConsoleVariablesOverrideProfile, BoolVariables) == 0x000000, "Member 'FConsoleVariablesOverrideProfile::BoolVariables' has a wrong offset!");
static_assert(offsetof(FConsoleVariablesOverrideProfile, IntVariables) == 0x000050, "Member 'FConsoleVariablesOverrideProfile::IntVariables' has a wrong offset!");
static_assert(offsetof(FConsoleVariablesOverrideProfile, FloatVariables) == 0x0000A0, "Member 'FConsoleVariablesOverrideProfile::FloatVariables' has a wrong offset!");
static_assert(offsetof(FConsoleVariablesOverrideProfile, StringVariables) == 0x0000F0, "Member 'FConsoleVariablesOverrideProfile::StringVariables' has a wrong offset!");

// ScriptStruct SandFall.ConsoleVariableOverrider
// 0x02D0 (0x02D0 - 0x0000)
struct alignas(0x08) FConsoleVariableOverrider final
{
public:
	uint8                                         Pad_0[0x2D0];                                      // 0x0000(0x02D0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConsoleVariableOverrider) == 0x000008, "Wrong alignment on FConsoleVariableOverrider");
static_assert(sizeof(FConsoleVariableOverrider) == 0x0002D0, "Wrong size on FConsoleVariableOverrider");

// ScriptStruct SandFall.CurveIntensityData
// 0x000C (0x000C - 0x0000)
struct FCurveIntensityData final
{
public:
	float                                         IntensityWeight;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloatInterval                         IntensityClamp;                                    // 0x0004(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurveIntensityData) == 0x000004, "Wrong alignment on FCurveIntensityData");
static_assert(sizeof(FCurveIntensityData) == 0x00000C, "Wrong size on FCurveIntensityData");
static_assert(offsetof(FCurveIntensityData, IntensityWeight) == 0x000000, "Member 'FCurveIntensityData::IntensityWeight' has a wrong offset!");
static_assert(offsetof(FCurveIntensityData, IntensityClamp) == 0x000004, "Member 'FCurveIntensityData::IntensityClamp' has a wrong offset!");

// ScriptStruct SandFall.SubtitlesSpeakerData
// 0x0018 (0x0020 - 0x0008)
struct FSubtitlesSpeakerData final : public FTableRowBase
{
public:
	class FString                                 SpeakerCharaEntry;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogueTextSceneType                        SpeakerEntrySceneType;                             // 0x0018(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubtitlesSpeakerData) == 0x000008, "Wrong alignment on FSubtitlesSpeakerData");
static_assert(sizeof(FSubtitlesSpeakerData) == 0x000020, "Wrong size on FSubtitlesSpeakerData");
static_assert(offsetof(FSubtitlesSpeakerData, SpeakerCharaEntry) == 0x000008, "Member 'FSubtitlesSpeakerData::SpeakerCharaEntry' has a wrong offset!");
static_assert(offsetof(FSubtitlesSpeakerData, SpeakerEntrySceneType) == 0x000018, "Member 'FSubtitlesSpeakerData::SpeakerEntrySceneType' has a wrong offset!");

// ScriptStruct SandFall.VariableWatcher_bool_Inline
// 0x0008 (0x0008 - 0x0000)
struct FVariableWatcher_bool_Inline final
{
public:
	class UVariableWatcher_bool*                  Value;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FVariableWatcher_bool_Inline) == 0x000008, "Wrong alignment on FVariableWatcher_bool_Inline");
static_assert(sizeof(FVariableWatcher_bool_Inline) == 0x000008, "Wrong size on FVariableWatcher_bool_Inline");
static_assert(offsetof(FVariableWatcher_bool_Inline, Value) == 0x000000, "Member 'FVariableWatcher_bool_Inline::Value' has a wrong offset!");

// ScriptStruct SandFall.ActivityTask
// 0x0060 (0x0060 - 0x0000)
struct FActivityTask final
{
public:
	class FString                                 TaskID;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class FString>              SubTasksID;                                        // 0x0010(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivityTask) == 0x000008, "Wrong alignment on FActivityTask");
static_assert(sizeof(FActivityTask) == 0x000060, "Wrong size on FActivityTask");
static_assert(offsetof(FActivityTask, TaskID) == 0x000000, "Member 'FActivityTask::TaskID' has a wrong offset!");
static_assert(offsetof(FActivityTask, SubTasksID) == 0x000010, "Member 'FActivityTask::SubTasksID' has a wrong offset!");

// ScriptStruct SandFall.ActivableGPEReferences
// 0x0010 (0x0010 - 0x0000)
struct FActivableGPEReferences final
{
public:
	TArray<struct FComponentReference>            refArray;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActivableGPEReferences) == 0x000008, "Wrong alignment on FActivableGPEReferences");
static_assert(sizeof(FActivableGPEReferences) == 0x000010, "Wrong size on FActivableGPEReferences");
static_assert(offsetof(FActivableGPEReferences, refArray) == 0x000000, "Member 'FActivableGPEReferences::refArray' has a wrong offset!");

// ScriptStruct SandFall.GPEInterfacesReferences
// 0x0010 (0x0010 - 0x0000)
struct FGPEInterfacesReferences final
{
public:
	TArray<class AActor*>                         actorArray;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGPEInterfacesReferences) == 0x000008, "Wrong alignment on FGPEInterfacesReferences");
static_assert(sizeof(FGPEInterfacesReferences) == 0x000010, "Wrong size on FGPEInterfacesReferences");
static_assert(offsetof(FGPEInterfacesReferences, actorArray) == 0x000000, "Member 'FGPEInterfacesReferences::actorArray' has a wrong offset!");

// ScriptStruct SandFall.GPEInterfacesSoftReferences
// 0x0010 (0x0010 - 0x0000)
struct FGPEInterfacesSoftReferences final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          actorArray;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGPEInterfacesSoftReferences) == 0x000008, "Wrong alignment on FGPEInterfacesSoftReferences");
static_assert(sizeof(FGPEInterfacesSoftReferences) == 0x000010, "Wrong size on FGPEInterfacesSoftReferences");
static_assert(offsetof(FGPEInterfacesSoftReferences, actorArray) == 0x000000, "Member 'FGPEInterfacesSoftReferences::actorArray' has a wrong offset!");

// ScriptStruct SandFall.AudioEvent
// 0x0018 (0x0018 - 0x0000)
struct FAudioEvent final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundBase*                             Sound;                                             // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAudioEvent) == 0x000008, "Wrong alignment on FAudioEvent");
static_assert(sizeof(FAudioEvent) == 0x000018, "Wrong size on FAudioEvent");
static_assert(offsetof(FAudioEvent, Guid) == 0x000000, "Member 'FAudioEvent::Guid' has a wrong offset!");
static_assert(offsetof(FAudioEvent, Sound) == 0x000010, "Member 'FAudioEvent::Sound' has a wrong offset!");

// ScriptStruct SandFall.TaggedGameplayEvent
// 0x0080 (0x0080 - 0x0000)
struct FTaggedGameplayEvent final
{
public:
	struct FGameplayTagContainer                  EventType;                                         // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalContextTags;                             // 0x0060(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTaggedGameplayEvent) == 0x000008, "Wrong alignment on FTaggedGameplayEvent");
static_assert(sizeof(FTaggedGameplayEvent) == 0x000080, "Wrong size on FTaggedGameplayEvent");
static_assert(offsetof(FTaggedGameplayEvent, EventType) == 0x000000, "Member 'FTaggedGameplayEvent::EventType' has a wrong offset!");
static_assert(offsetof(FTaggedGameplayEvent, SourceTags) == 0x000020, "Member 'FTaggedGameplayEvent::SourceTags' has a wrong offset!");
static_assert(offsetof(FTaggedGameplayEvent, TargetTags) == 0x000040, "Member 'FTaggedGameplayEvent::TargetTags' has a wrong offset!");
static_assert(offsetof(FTaggedGameplayEvent, AdditionalContextTags) == 0x000060, "Member 'FTaggedGameplayEvent::AdditionalContextTags' has a wrong offset!");

// ScriptStruct SandFall.GameplayEventMatchingRule
// 0x0060 (0x0060 - 0x0000)
struct FGameplayEventMatchingRule final
{
public:
	struct FGameplayTagContainer                  SourceTags;                                        // 0x0000(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTags;                                        // 0x0020(0x0020)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AdditionalContextTags;                             // 0x0040(0x0020)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventMatchingRule) == 0x000008, "Wrong alignment on FGameplayEventMatchingRule");
static_assert(sizeof(FGameplayEventMatchingRule) == 0x000060, "Wrong size on FGameplayEventMatchingRule");
static_assert(offsetof(FGameplayEventMatchingRule, SourceTags) == 0x000000, "Member 'FGameplayEventMatchingRule::SourceTags' has a wrong offset!");
static_assert(offsetof(FGameplayEventMatchingRule, TargetTags) == 0x000020, "Member 'FGameplayEventMatchingRule::TargetTags' has a wrong offset!");
static_assert(offsetof(FGameplayEventMatchingRule, AdditionalContextTags) == 0x000040, "Member 'FGameplayEventMatchingRule::AdditionalContextTags' has a wrong offset!");

// ScriptStruct SandFall.GameplayEventCooldown
// 0x0008 (0x0008 - 0x0000)
struct FGameplayEventCooldown final
{
public:
	float                                         SecondsCooldown;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DiscreteCooldown;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventCooldown) == 0x000004, "Wrong alignment on FGameplayEventCooldown");
static_assert(sizeof(FGameplayEventCooldown) == 0x000008, "Wrong size on FGameplayEventCooldown");
static_assert(offsetof(FGameplayEventCooldown, SecondsCooldown) == 0x000000, "Member 'FGameplayEventCooldown::SecondsCooldown' has a wrong offset!");
static_assert(offsetof(FGameplayEventCooldown, DiscreteCooldown) == 0x000004, "Member 'FGameplayEventCooldown::DiscreteCooldown' has a wrong offset!");

// ScriptStruct SandFall.GameplayEventMatchingRootRule
// 0x0008 (0x0008 - 0x0000)
struct FGameplayEventMatchingRootRule final
{
public:
	class UGameplayEventMatchingRuleNode*         RootRules;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplayEventMatchingRootRule) == 0x000008, "Wrong alignment on FGameplayEventMatchingRootRule");
static_assert(sizeof(FGameplayEventMatchingRootRule) == 0x000008, "Wrong size on FGameplayEventMatchingRootRule");
static_assert(offsetof(FGameplayEventMatchingRootRule, RootRules) == 0x000000, "Member 'FGameplayEventMatchingRootRule::RootRules' has a wrong offset!");

// ScriptStruct SandFall.ConditionChecker_Wrapper
// 0x0008 (0x0008 - 0x0000)
struct FConditionChecker_Wrapper final
{
public:
	class UConditionChecker*                      ConditionChecker;                                  // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FConditionChecker_Wrapper) == 0x000008, "Wrong alignment on FConditionChecker_Wrapper");
static_assert(sizeof(FConditionChecker_Wrapper) == 0x000008, "Wrong size on FConditionChecker_Wrapper");
static_assert(offsetof(FConditionChecker_Wrapper, ConditionChecker) == 0x000000, "Member 'FConditionChecker_Wrapper::ConditionChecker' has a wrong offset!");

// ScriptStruct SandFall.SpeakerProfile
// 0x0028 (0x0028 - 0x0000)
struct FSpeakerProfile final
{
public:
	class FText                                   SpeakerName;                                       // 0x0000(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSlateColor                            ColorProfile;                                      // 0x0010(0x0014)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          ForceDisplaySubForThisSpeaker;                     // 0x0024(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeakerProfile) == 0x000008, "Wrong alignment on FSpeakerProfile");
static_assert(sizeof(FSpeakerProfile) == 0x000028, "Wrong size on FSpeakerProfile");
static_assert(offsetof(FSpeakerProfile, SpeakerName) == 0x000000, "Member 'FSpeakerProfile::SpeakerName' has a wrong offset!");
static_assert(offsetof(FSpeakerProfile, ColorProfile) == 0x000010, "Member 'FSpeakerProfile::ColorProfile' has a wrong offset!");
static_assert(offsetof(FSpeakerProfile, ForceDisplaySubForThisSpeaker) == 0x000024, "Member 'FSpeakerProfile::ForceDisplaySubForThisSpeaker' has a wrong offset!");

// ScriptStruct SandFall.DialogueSpeakerSlotReferences
// 0x0010 (0x0010 - 0x0000)
struct FDialogueSpeakerSlotReferences final
{
public:
	TArray<TSoftObjectPtr<class AActor>>          actorArray;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogueSpeakerSlotReferences) == 0x000008, "Wrong alignment on FDialogueSpeakerSlotReferences");
static_assert(sizeof(FDialogueSpeakerSlotReferences) == 0x000010, "Wrong size on FDialogueSpeakerSlotReferences");
static_assert(offsetof(FDialogueSpeakerSlotReferences, actorArray) == 0x000000, "Member 'FDialogueSpeakerSlotReferences::actorArray' has a wrong offset!");

// ScriptStruct SandFall.DynamicSpeakerSlotDataTableRowHandle
// 0x0010 (0x0010 - 0x0000)
struct FDynamicSpeakerSlotDataTableRowHandle final
{
public:
	struct FDataTableRowHandle                    m_data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDynamicSpeakerSlotDataTableRowHandle) == 0x000008, "Wrong alignment on FDynamicSpeakerSlotDataTableRowHandle");
static_assert(sizeof(FDynamicSpeakerSlotDataTableRowHandle) == 0x000010, "Wrong size on FDynamicSpeakerSlotDataTableRowHandle");
static_assert(offsetof(FDynamicSpeakerSlotDataTableRowHandle, m_data) == 0x000000, "Member 'FDynamicSpeakerSlotDataTableRowHandle::m_data' has a wrong offset!");

// ScriptStruct SandFall.EditorDebugShape_Base
// 0x0014 (0x0014 - 0x0000)
struct FEditorDebugShape_Base
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Thickness;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditorDebugShape_Base) == 0x000004, "Wrong alignment on FEditorDebugShape_Base");
static_assert(sizeof(FEditorDebugShape_Base) == 0x000014, "Wrong size on FEditorDebugShape_Base");
static_assert(offsetof(FEditorDebugShape_Base, Color) == 0x000000, "Member 'FEditorDebugShape_Base::Color' has a wrong offset!");
static_assert(offsetof(FEditorDebugShape_Base, Thickness) == 0x000010, "Member 'FEditorDebugShape_Base::Thickness' has a wrong offset!");

// ScriptStruct SandFall.EditorDebugShape_Arrow
// 0x0034 (0x0048 - 0x0014)
struct FEditorDebugShape_Arrow final : public FEditorDebugShape_Base
{
public:
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Start;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditorDebugShape_Arrow) == 0x000008, "Wrong alignment on FEditorDebugShape_Arrow");
static_assert(sizeof(FEditorDebugShape_Arrow) == 0x000048, "Wrong size on FEditorDebugShape_Arrow");
static_assert(offsetof(FEditorDebugShape_Arrow, Start) == 0x000018, "Member 'FEditorDebugShape_Arrow::Start' has a wrong offset!");
static_assert(offsetof(FEditorDebugShape_Arrow, End) == 0x000030, "Member 'FEditorDebugShape_Arrow::End' has a wrong offset!");

// ScriptStruct SandFall.GameAction_Wrapper
// 0x0010 (0x0010 - 0x0000)
struct FGameAction_Wrapper final
{
public:
	class UGameAction*                            GameActionReference;                               // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameAction*                            GameActionInline;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameAction_Wrapper) == 0x000008, "Wrong alignment on FGameAction_Wrapper");
static_assert(sizeof(FGameAction_Wrapper) == 0x000010, "Wrong size on FGameAction_Wrapper");
static_assert(offsetof(FGameAction_Wrapper, GameActionReference) == 0x000000, "Member 'FGameAction_Wrapper::GameActionReference' has a wrong offset!");
static_assert(offsetof(FGameAction_Wrapper, GameActionInline) == 0x000008, "Member 'FGameAction_Wrapper::GameActionInline' has a wrong offset!");

// ScriptStruct SandFall.SkillDataComponent_Wrapper
// 0x0008 (0x0008 - 0x0000)
struct FSkillDataComponent_Wrapper final
{
public:
	class USkillDataComponent*                    SkillData;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillDataComponent_Wrapper) == 0x000008, "Wrong alignment on FSkillDataComponent_Wrapper");
static_assert(sizeof(FSkillDataComponent_Wrapper) == 0x000008, "Wrong size on FSkillDataComponent_Wrapper");
static_assert(offsetof(FSkillDataComponent_Wrapper, SkillData) == 0x000000, "Member 'FSkillDataComponent_Wrapper::SkillData' has a wrong offset!");

// ScriptStruct SandFall.SplineFloatingInstancesData
// 0x0058 (0x0058 - 0x0000)
struct FSplineFloatingInstancesData final
{
public:
	class UInstancedStaticMeshComponent*          ISM;                                               // 0x0000(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstanceId;                                        // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0010(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Speed;                                             // 0x0028(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSplineFloatingInstancesData) == 0x000008, "Wrong alignment on FSplineFloatingInstancesData");
static_assert(sizeof(FSplineFloatingInstancesData) == 0x000058, "Wrong size on FSplineFloatingInstancesData");
static_assert(offsetof(FSplineFloatingInstancesData, ISM) == 0x000000, "Member 'FSplineFloatingInstancesData::ISM' has a wrong offset!");
static_assert(offsetof(FSplineFloatingInstancesData, InstanceId) == 0x000008, "Member 'FSplineFloatingInstancesData::InstanceId' has a wrong offset!");
static_assert(offsetof(FSplineFloatingInstancesData, Location) == 0x000010, "Member 'FSplineFloatingInstancesData::Location' has a wrong offset!");
static_assert(offsetof(FSplineFloatingInstancesData, Speed) == 0x000028, "Member 'FSplineFloatingInstancesData::Speed' has a wrong offset!");
static_assert(offsetof(FSplineFloatingInstancesData, Rotation) == 0x000040, "Member 'FSplineFloatingInstancesData::Rotation' has a wrong offset!");

// ScriptStruct SandFall.ItemDataTableRowHandle
// 0x0010 (0x0010 - 0x0000)
struct FItemDataTableRowHandle final
{
public:
	struct FDataTableRowHandle                    m_data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemDataTableRowHandle) == 0x000008, "Wrong alignment on FItemDataTableRowHandle");
static_assert(sizeof(FItemDataTableRowHandle) == 0x000010, "Wrong size on FItemDataTableRowHandle");
static_assert(offsetof(FItemDataTableRowHandle, m_data) == 0x000000, "Member 'FItemDataTableRowHandle::m_data' has a wrong offset!");

// ScriptStruct SandFall.LevelSequenceExecutorInterfaceReference
// 0x0008 (0x0008 - 0x0000)
struct FLevelSequenceExecutorInterfaceReference final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSequenceExecutorInterfaceReference) == 0x000008, "Wrong alignment on FLevelSequenceExecutorInterfaceReference");
static_assert(sizeof(FLevelSequenceExecutorInterfaceReference) == 0x000008, "Wrong size on FLevelSequenceExecutorInterfaceReference");
static_assert(offsetof(FLevelSequenceExecutorInterfaceReference, Actor) == 0x000000, "Member 'FLevelSequenceExecutorInterfaceReference::Actor' has a wrong offset!");

// ScriptStruct SandFall.LevelSequenceExecutorInterfaceSoftReference
// 0x0028 (0x0028 - 0x0000)
struct FLevelSequenceExecutorInterfaceSoftReference final
{
public:
	TSoftObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelSequenceExecutorInterfaceSoftReference) == 0x000008, "Wrong alignment on FLevelSequenceExecutorInterfaceSoftReference");
static_assert(sizeof(FLevelSequenceExecutorInterfaceSoftReference) == 0x000028, "Wrong size on FLevelSequenceExecutorInterfaceSoftReference");
static_assert(offsetof(FLevelSequenceExecutorInterfaceSoftReference, Actor) == 0x000000, "Member 'FLevelSequenceExecutorInterfaceSoftReference::Actor' has a wrong offset!");

// ScriptStruct SandFall.LevelDataTableRowHandle
// 0x0010 (0x0010 - 0x0000)
struct FLevelDataTableRowHandle final
{
public:
	struct FDataTableRowHandle                    m_data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelDataTableRowHandle) == 0x000008, "Wrong alignment on FLevelDataTableRowHandle");
static_assert(sizeof(FLevelDataTableRowHandle) == 0x000010, "Wrong size on FLevelDataTableRowHandle");
static_assert(offsetof(FLevelDataTableRowHandle, m_data) == 0x000000, "Member 'FLevelDataTableRowHandle::m_data' has a wrong offset!");

// ScriptStruct SandFall.LoadingScreenData
// 0x0020 (0x0020 - 0x0000)
struct FLoadingScreenData final
{
public:
	float                                         MinimumLoadingScreenDisplayTime;                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCompleteWhenLoadingCompletes;                 // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         LoadingScreenMovies;                               // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EMoviePlaybackType                            MoviePlayingMode;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLoadingScreenData) == 0x000008, "Wrong alignment on FLoadingScreenData");
static_assert(sizeof(FLoadingScreenData) == 0x000020, "Wrong size on FLoadingScreenData");
static_assert(offsetof(FLoadingScreenData, MinimumLoadingScreenDisplayTime) == 0x000000, "Member 'FLoadingScreenData::MinimumLoadingScreenDisplayTime' has a wrong offset!");
static_assert(offsetof(FLoadingScreenData, bAutoCompleteWhenLoadingCompletes) == 0x000004, "Member 'FLoadingScreenData::bAutoCompleteWhenLoadingCompletes' has a wrong offset!");
static_assert(offsetof(FLoadingScreenData, LoadingScreenMovies) == 0x000008, "Member 'FLoadingScreenData::LoadingScreenMovies' has a wrong offset!");
static_assert(offsetof(FLoadingScreenData, MoviePlayingMode) == 0x000018, "Member 'FLoadingScreenData::MoviePlayingMode' has a wrong offset!");

// ScriptStruct SandFall.ProjectCultureData
// 0x0028 (0x0028 - 0x0000)
struct FProjectCultureData
{
public:
	TArray<class FString>                         Culture_IETF_Tag;                                  // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Culture_DisplayName;                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         SelectedCulture;                                   // 0x0020(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProjectCultureData) == 0x000008, "Wrong alignment on FProjectCultureData");
static_assert(sizeof(FProjectCultureData) == 0x000028, "Wrong size on FProjectCultureData");
static_assert(offsetof(FProjectCultureData, Culture_IETF_Tag) == 0x000000, "Member 'FProjectCultureData::Culture_IETF_Tag' has a wrong offset!");
static_assert(offsetof(FProjectCultureData, Culture_DisplayName) == 0x000010, "Member 'FProjectCultureData::Culture_DisplayName' has a wrong offset!");
static_assert(offsetof(FProjectCultureData, SelectedCulture) == 0x000020, "Member 'FProjectCultureData::SelectedCulture' has a wrong offset!");

// ScriptStruct SandFall.AssetGroupCultureData
// 0x0008 (0x0030 - 0x0028)
struct FAssetGroupCultureData final : public FProjectCultureData
{
public:
	class FName                                   AssetGroup;                                        // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetGroupCultureData) == 0x000008, "Wrong alignment on FAssetGroupCultureData");
static_assert(sizeof(FAssetGroupCultureData) == 0x000030, "Wrong size on FAssetGroupCultureData");
static_assert(offsetof(FAssetGroupCultureData, AssetGroup) == 0x000028, "Member 'FAssetGroupCultureData::AssetGroup' has a wrong offset!");

// ScriptStruct SandFall.AssetGroupSubLocaleWrapper
// 0x0018 (0x0018 - 0x0000)
struct FAssetGroupSubLocaleWrapper final
{
public:
	class FName                                   AssetGroup;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         AuthorizedCultures;                                // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetGroupSubLocaleWrapper) == 0x000008, "Wrong alignment on FAssetGroupSubLocaleWrapper");
static_assert(sizeof(FAssetGroupSubLocaleWrapper) == 0x000018, "Wrong size on FAssetGroupSubLocaleWrapper");
static_assert(offsetof(FAssetGroupSubLocaleWrapper, AssetGroup) == 0x000000, "Member 'FAssetGroupSubLocaleWrapper::AssetGroup' has a wrong offset!");
static_assert(offsetof(FAssetGroupSubLocaleWrapper, AuthorizedCultures) == 0x000008, "Member 'FAssetGroupSubLocaleWrapper::AuthorizedCultures' has a wrong offset!");

// ScriptStruct SandFall.LootTableReference
// 0x0010 (0x0010 - 0x0000)
struct FLootTableReference final
{
public:
	class UDataTable*                             LootTable;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RollCount;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLootTableReference) == 0x000008, "Wrong alignment on FLootTableReference");
static_assert(sizeof(FLootTableReference) == 0x000010, "Wrong size on FLootTableReference");
static_assert(offsetof(FLootTableReference, LootTable) == 0x000000, "Member 'FLootTableReference::LootTable' has a wrong offset!");
static_assert(offsetof(FLootTableReference, RollCount) == 0x000008, "Member 'FLootTableReference::RollCount' has a wrong offset!");

// ScriptStruct SandFall.SF_ModifierStackEntryHandle
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSF_ModifierStackEntryHandle final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSF_ModifierStackEntryHandle) == 0x000008, "Wrong alignment on FSF_ModifierStackEntryHandle");
static_assert(sizeof(FSF_ModifierStackEntryHandle) == 0x000030, "Wrong size on FSF_ModifierStackEntryHandle");

// ScriptStruct SandFall.SF_ModifierStackWrapper
// 0x0008 (0x0008 - 0x0000)
struct FSF_ModifierStackWrapper final
{
public:
	class UModifierStack_Float*                   Stack;                                             // 0x0000(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSF_ModifierStackWrapper) == 0x000008, "Wrong alignment on FSF_ModifierStackWrapper");
static_assert(sizeof(FSF_ModifierStackWrapper) == 0x000008, "Wrong size on FSF_ModifierStackWrapper");
static_assert(offsetof(FSF_ModifierStackWrapper, Stack) == 0x000000, "Member 'FSF_ModifierStackWrapper::Stack' has a wrong offset!");

// ScriptStruct SandFall.QuestObjectiveIdentifier
// 0x0010 (0x0010 - 0x0000)
struct FQuestObjectiveIdentifier final
{
public:
	class FName                                   QuestName;                                         // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ObjectiveName;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestObjectiveIdentifier) == 0x000004, "Wrong alignment on FQuestObjectiveIdentifier");
static_assert(sizeof(FQuestObjectiveIdentifier) == 0x000010, "Wrong size on FQuestObjectiveIdentifier");
static_assert(offsetof(FQuestObjectiveIdentifier, QuestName) == 0x000000, "Member 'FQuestObjectiveIdentifier::QuestName' has a wrong offset!");
static_assert(offsetof(FQuestObjectiveIdentifier, ObjectiveName) == 0x000008, "Member 'FQuestObjectiveIdentifier::ObjectiveName' has a wrong offset!");

// ScriptStruct SandFall.QuestDataTableRowHandle
// 0x0010 (0x0010 - 0x0000)
struct FQuestDataTableRowHandle final
{
public:
	struct FDataTableRowHandle                    m_data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQuestDataTableRowHandle) == 0x000008, "Wrong alignment on FQuestDataTableRowHandle");
static_assert(sizeof(FQuestDataTableRowHandle) == 0x000010, "Wrong size on FQuestDataTableRowHandle");
static_assert(offsetof(FQuestDataTableRowHandle, m_data) == 0x000000, "Member 'FQuestDataTableRowHandle::m_data' has a wrong offset!");

// ScriptStruct SandFall.SF_ReferenceCounterHandle
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSF_ReferenceCounterHandle final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSF_ReferenceCounterHandle) == 0x000008, "Wrong alignment on FSF_ReferenceCounterHandle");
static_assert(sizeof(FSF_ReferenceCounterHandle) == 0x000020, "Wrong size on FSF_ReferenceCounterHandle");

// ScriptStruct SandFall.SF_ReferenceCounter
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSF_ReferenceCounter final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSF_ReferenceCounter) == 0x000008, "Wrong alignment on FSF_ReferenceCounter");
static_assert(sizeof(FSF_ReferenceCounter) == 0x000020, "Wrong size on FSF_ReferenceCounter");

// ScriptStruct SandFall.FontInfoMinimal
// 0x0010 (0x0010 - 0x0000)
struct FFontInfoMinimal final
{
public:
	class UObject*                                FontObject;                                        // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TypefaceFontName;                                  // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFontInfoMinimal) == 0x000008, "Wrong alignment on FFontInfoMinimal");
static_assert(sizeof(FFontInfoMinimal) == 0x000010, "Wrong size on FFontInfoMinimal");
static_assert(offsetof(FFontInfoMinimal, FontObject) == 0x000000, "Member 'FFontInfoMinimal::FontObject' has a wrong offset!");
static_assert(offsetof(FFontInfoMinimal, TypefaceFontName) == 0x000008, "Member 'FFontInfoMinimal::TypefaceFontName' has a wrong offset!");

// ScriptStruct SandFall.SF_SettingsData
// 0x0054 (0x0054 - 0x0000)
struct FSF_SettingsData final
{
public:
	bool                                          bEnableSubtitles;                                  // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubtitlesSize;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSubtitlesSpeakerDisplay;                    // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSubtitlesSpeakerPersonalColor;              // 0x0009(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTutorials;                                  // 0x000A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCustomizationDuringCinematics;              // 0x000B(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableControllerForceFeedback;                    // 0x000C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertCameraPitch;                                // 0x000D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvertCameraYaw;                                  // 0x000E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraYawInputMultiplier;                          // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraPitchInputMultiplier;                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHoldInputToSprint;                          // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHoldInputToAim;                             // 0x0019(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MasterVolume;                                      // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MusicVolume;                                       // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceVolume;                                       // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UserInterfaceVolume;                               // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecialEffectsVolume;                              // 0x002C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMotionBlur;                                 // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFilmGrain;                                  // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableChromaticAberration;                        // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVignette;                                   // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GammaValue;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContrastValue;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrightnessValue;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraShakes;                               // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraMovement;                                   // 0x0041(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPersistentCenterDot;                              // 0x0042(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutomaticBattleQTE;                         // 0x0043(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EColorVisionDeficiency                        ColorVisionDeficiency;                             // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ColorVisionDeficiencyCorrectionSeverity;           // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApplicationScale;                                  // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsoleGraphicPreset;                              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSF_SettingsData) == 0x000004, "Wrong alignment on FSF_SettingsData");
static_assert(sizeof(FSF_SettingsData) == 0x000054, "Wrong size on FSF_SettingsData");
static_assert(offsetof(FSF_SettingsData, bEnableSubtitles) == 0x000000, "Member 'FSF_SettingsData::bEnableSubtitles' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, SubtitlesSize) == 0x000004, "Member 'FSF_SettingsData::SubtitlesSize' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableSubtitlesSpeakerDisplay) == 0x000008, "Member 'FSF_SettingsData::bEnableSubtitlesSpeakerDisplay' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableSubtitlesSpeakerPersonalColor) == 0x000009, "Member 'FSF_SettingsData::bEnableSubtitlesSpeakerPersonalColor' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableTutorials) == 0x00000A, "Member 'FSF_SettingsData::bEnableTutorials' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableCustomizationDuringCinematics) == 0x00000B, "Member 'FSF_SettingsData::bEnableCustomizationDuringCinematics' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableControllerForceFeedback) == 0x00000C, "Member 'FSF_SettingsData::bEnableControllerForceFeedback' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bInvertCameraPitch) == 0x00000D, "Member 'FSF_SettingsData::bInvertCameraPitch' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bInvertCameraYaw) == 0x00000E, "Member 'FSF_SettingsData::bInvertCameraYaw' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, CameraYawInputMultiplier) == 0x000010, "Member 'FSF_SettingsData::CameraYawInputMultiplier' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, CameraPitchInputMultiplier) == 0x000014, "Member 'FSF_SettingsData::CameraPitchInputMultiplier' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableHoldInputToSprint) == 0x000018, "Member 'FSF_SettingsData::bEnableHoldInputToSprint' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableHoldInputToAim) == 0x000019, "Member 'FSF_SettingsData::bEnableHoldInputToAim' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, MasterVolume) == 0x00001C, "Member 'FSF_SettingsData::MasterVolume' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, MusicVolume) == 0x000020, "Member 'FSF_SettingsData::MusicVolume' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, VoiceVolume) == 0x000024, "Member 'FSF_SettingsData::VoiceVolume' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, UserInterfaceVolume) == 0x000028, "Member 'FSF_SettingsData::UserInterfaceVolume' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, SpecialEffectsVolume) == 0x00002C, "Member 'FSF_SettingsData::SpecialEffectsVolume' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableMotionBlur) == 0x000030, "Member 'FSF_SettingsData::bEnableMotionBlur' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableFilmGrain) == 0x000031, "Member 'FSF_SettingsData::bEnableFilmGrain' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableChromaticAberration) == 0x000032, "Member 'FSF_SettingsData::bEnableChromaticAberration' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableVignette) == 0x000033, "Member 'FSF_SettingsData::bEnableVignette' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, GammaValue) == 0x000034, "Member 'FSF_SettingsData::GammaValue' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, ContrastValue) == 0x000038, "Member 'FSF_SettingsData::ContrastValue' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, BrightnessValue) == 0x00003C, "Member 'FSF_SettingsData::BrightnessValue' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableCameraShakes) == 0x000040, "Member 'FSF_SettingsData::bEnableCameraShakes' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bCameraMovement) == 0x000041, "Member 'FSF_SettingsData::bCameraMovement' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bPersistentCenterDot) == 0x000042, "Member 'FSF_SettingsData::bPersistentCenterDot' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, bEnableAutomaticBattleQTE) == 0x000043, "Member 'FSF_SettingsData::bEnableAutomaticBattleQTE' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, ColorVisionDeficiency) == 0x000044, "Member 'FSF_SettingsData::ColorVisionDeficiency' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, ColorVisionDeficiencyCorrectionSeverity) == 0x000048, "Member 'FSF_SettingsData::ColorVisionDeficiencyCorrectionSeverity' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, ApplicationScale) == 0x00004C, "Member 'FSF_SettingsData::ApplicationScale' has a wrong offset!");
static_assert(offsetof(FSF_SettingsData, ConsoleGraphicPreset) == 0x000050, "Member 'FSF_SettingsData::ConsoleGraphicPreset' has a wrong offset!");

// ScriptStruct SandFall.SF_EngineSettingsData
// 0x0058 (0x0058 - 0x0000)
struct FSF_EngineSettingsData final
{
public:
	class FString                                 GameCulture;                                       // 0x0000(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioGameCulture;                                  // 0x0010(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OverallScalabilityLevel;                           // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResolutionScaleNormalized;                         // 0x0024(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRateLimit;                                    // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVSync;                                         // 0x002C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ViewDistanceQuality;                               // 0x0030(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasingQuality;                               // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GlobalIlluminationQuality;                         // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReflectionQuality;                                 // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PostProcessQuality;                                // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureQuality;                                    // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectsQuality;                                    // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoliageQuality;                                    // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadingQuality;                                    // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSF_EngineSettingsData) == 0x000008, "Wrong alignment on FSF_EngineSettingsData");
static_assert(sizeof(FSF_EngineSettingsData) == 0x000058, "Wrong size on FSF_EngineSettingsData");
static_assert(offsetof(FSF_EngineSettingsData, GameCulture) == 0x000000, "Member 'FSF_EngineSettingsData::GameCulture' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, AudioGameCulture) == 0x000010, "Member 'FSF_EngineSettingsData::AudioGameCulture' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, OverallScalabilityLevel) == 0x000020, "Member 'FSF_EngineSettingsData::OverallScalabilityLevel' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, ResolutionScaleNormalized) == 0x000024, "Member 'FSF_EngineSettingsData::ResolutionScaleNormalized' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, FrameRateLimit) == 0x000028, "Member 'FSF_EngineSettingsData::FrameRateLimit' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, bUseVSync) == 0x00002C, "Member 'FSF_EngineSettingsData::bUseVSync' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, ViewDistanceQuality) == 0x000030, "Member 'FSF_EngineSettingsData::ViewDistanceQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, AntiAliasingQuality) == 0x000034, "Member 'FSF_EngineSettingsData::AntiAliasingQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, ShadowQuality) == 0x000038, "Member 'FSF_EngineSettingsData::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, GlobalIlluminationQuality) == 0x00003C, "Member 'FSF_EngineSettingsData::GlobalIlluminationQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, ReflectionQuality) == 0x000040, "Member 'FSF_EngineSettingsData::ReflectionQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, PostProcessQuality) == 0x000044, "Member 'FSF_EngineSettingsData::PostProcessQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, TextureQuality) == 0x000048, "Member 'FSF_EngineSettingsData::TextureQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, EffectsQuality) == 0x00004C, "Member 'FSF_EngineSettingsData::EffectsQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, FoliageQuality) == 0x000050, "Member 'FSF_EngineSettingsData::FoliageQuality' has a wrong offset!");
static_assert(offsetof(FSF_EngineSettingsData, ShadingQuality) == 0x000054, "Member 'FSF_EngineSettingsData::ShadingQuality' has a wrong offset!");

// ScriptStruct SandFall.SoundEventDataTableRowHandle
// 0x0010 (0x0010 - 0x0000)
struct FSoundEventDataTableRowHandle final
{
public:
	struct FDataTableRowHandle                    m_data;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSoundEventDataTableRowHandle) == 0x000008, "Wrong alignment on FSoundEventDataTableRowHandle");
static_assert(sizeof(FSoundEventDataTableRowHandle) == 0x000010, "Wrong size on FSoundEventDataTableRowHandle");
static_assert(offsetof(FSoundEventDataTableRowHandle, m_data) == 0x000000, "Member 'FSoundEventDataTableRowHandle::m_data' has a wrong offset!");

// ScriptStruct SandFall.SubLineProfile
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x08) FSubLineProfile final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSubLineProfile) == 0x000008, "Wrong alignment on FSubLineProfile");
static_assert(sizeof(FSubLineProfile) == 0x000050, "Wrong size on FSubLineProfile");

// ScriptStruct SandFall.DisplayedSubtitle
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FDisplayedSubtitle final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisplayedSubtitle) == 0x000008, "Wrong alignment on FDisplayedSubtitle");
static_assert(sizeof(FDisplayedSubtitle) == 0x000028, "Wrong size on FDisplayedSubtitle");

// ScriptStruct SandFall.DelayedRemovedSubtitle
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FDelayedRemovedSubtitle final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDelayedRemovedSubtitle) == 0x000008, "Wrong alignment on FDelayedRemovedSubtitle");
static_assert(sizeof(FDelayedRemovedSubtitle) == 0x000030, "Wrong size on FDelayedRemovedSubtitle");

// ScriptStruct SandFall.StatsArray
// 0x0010 (0x0010 - 0x0000)
struct FStatsArray final
{
public:
	TArray<int32>                                 Array;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsArray) == 0x000008, "Wrong alignment on FStatsArray");
static_assert(sizeof(FStatsArray) == 0x000010, "Wrong size on FStatsArray");
static_assert(offsetof(FStatsArray, Array) == 0x000000, "Member 'FStatsArray::Array' has a wrong offset!");

// ScriptStruct SandFall.RigUnit_MetahumanComputeHalfFingers
// 0x0030 (0x0200 - 0x01D0)
struct FRigUnit_MetahumanComputeHalfFingers final : public FRigUnitMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x01E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              CachedParent;                                      // 0x01F0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRigUnit_MetahumanComputeHalfFingers) == 0x000010, "Wrong alignment on FRigUnit_MetahumanComputeHalfFingers");
static_assert(sizeof(FRigUnit_MetahumanComputeHalfFingers) == 0x000200, "Wrong size on FRigUnit_MetahumanComputeHalfFingers");
static_assert(offsetof(FRigUnit_MetahumanComputeHalfFingers, Items) == 0x0001D0, "Member 'FRigUnit_MetahumanComputeHalfFingers::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeHalfFingers, CachedIndex) == 0x0001E0, "Member 'FRigUnit_MetahumanComputeHalfFingers::CachedIndex' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeHalfFingers, CachedParent) == 0x0001F0, "Member 'FRigUnit_MetahumanComputeHalfFingers::CachedParent' has a wrong offset!");

// ScriptStruct SandFall.RigUnit_MetahumanComputeTwist
// 0x00E0 (0x02B0 - 0x01D0)
struct FRigUnit_MetahumanComputeTwist final : public FRigUnitMutable
{
public:
	struct FRigElementKey                         StartBone;                                         // 0x01D0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         EndBone;                                           // 0x01DC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRigElementKey                         RootCorrective;                                    // 0x01E8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRigElementKey>                 TwistBones;                                        // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         SwingBlend;                                        // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 TwistBlend;                                        // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<float>                                 PositionBlend;                                     // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bTwistFromEnd;                                     // 0x0230(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCachedRigElement                      StartBoneCached;                                   // 0x0238(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      EndBoneCached;                                     // 0x0258(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCachedRigElement                      RootCorrectiveCached;                              // 0x0278(0x0020)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCachedRigElement>              TwistBonesCached;                                  // 0x0298(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A8[0x8];                                      // 0x02A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_MetahumanComputeTwist) == 0x000010, "Wrong alignment on FRigUnit_MetahumanComputeTwist");
static_assert(sizeof(FRigUnit_MetahumanComputeTwist) == 0x0002B0, "Wrong size on FRigUnit_MetahumanComputeTwist");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, StartBone) == 0x0001D0, "Member 'FRigUnit_MetahumanComputeTwist::StartBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, EndBone) == 0x0001DC, "Member 'FRigUnit_MetahumanComputeTwist::EndBone' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, RootCorrective) == 0x0001E8, "Member 'FRigUnit_MetahumanComputeTwist::RootCorrective' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, TwistBones) == 0x0001F8, "Member 'FRigUnit_MetahumanComputeTwist::TwistBones' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, SwingBlend) == 0x000208, "Member 'FRigUnit_MetahumanComputeTwist::SwingBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, TwistBlend) == 0x000210, "Member 'FRigUnit_MetahumanComputeTwist::TwistBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, PositionBlend) == 0x000220, "Member 'FRigUnit_MetahumanComputeTwist::PositionBlend' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, bTwistFromEnd) == 0x000230, "Member 'FRigUnit_MetahumanComputeTwist::bTwistFromEnd' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, StartBoneCached) == 0x000238, "Member 'FRigUnit_MetahumanComputeTwist::StartBoneCached' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, EndBoneCached) == 0x000258, "Member 'FRigUnit_MetahumanComputeTwist::EndBoneCached' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, RootCorrectiveCached) == 0x000278, "Member 'FRigUnit_MetahumanComputeTwist::RootCorrectiveCached' has a wrong offset!");
static_assert(offsetof(FRigUnit_MetahumanComputeTwist, TwistBonesCached) == 0x000298, "Member 'FRigUnit_MetahumanComputeTwist::TwistBonesCached' has a wrong offset!");

// ScriptStruct SandFall.RigUnit_ResetTransformToInitial
// 0x0030 (0x0200 - 0x01D0)
struct FRigUnit_ResetTransformToInitial final : public FRigUnitMutable
{
public:
	TArray<struct FRigElementKey>                 Items;                                             // 0x01D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	ERigVMTransformSpace                          Space;                                             // 0x01E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInitial;                                          // 0x01E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x01E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E3[0x5];                                      // 0x01E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCachedRigElement>              CachedIndex;                                       // 0x01E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRigUnit_ResetTransformToInitial) == 0x000010, "Wrong alignment on FRigUnit_ResetTransformToInitial");
static_assert(sizeof(FRigUnit_ResetTransformToInitial) == 0x000200, "Wrong size on FRigUnit_ResetTransformToInitial");
static_assert(offsetof(FRigUnit_ResetTransformToInitial, Items) == 0x0001D0, "Member 'FRigUnit_ResetTransformToInitial::Items' has a wrong offset!");
static_assert(offsetof(FRigUnit_ResetTransformToInitial, Space) == 0x0001E0, "Member 'FRigUnit_ResetTransformToInitial::Space' has a wrong offset!");
static_assert(offsetof(FRigUnit_ResetTransformToInitial, bInitial) == 0x0001E1, "Member 'FRigUnit_ResetTransformToInitial::bInitial' has a wrong offset!");
static_assert(offsetof(FRigUnit_ResetTransformToInitial, bPropagateToChildren) == 0x0001E2, "Member 'FRigUnit_ResetTransformToInitial::bPropagateToChildren' has a wrong offset!");
static_assert(offsetof(FRigUnit_ResetTransformToInitial, CachedIndex) == 0x0001E8, "Member 'FRigUnit_ResetTransformToInitial::CachedIndex' has a wrong offset!");

}

