#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_ItemUpgradeHelpers

#include "Basic.hpp"

#include "EWeaponQuality_structs.hpp"
#include "Engine_classes.hpp"
#include "E_jRPG_ItemType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_ItemUpgradeHelpers.FL_ItemUpgradeHelpers_C
// 0x0000 (0x0028 - 0x0028)
class UFL_ItemUpgradeHelpers_C final : public UBlueprintFunctionLibrary
{
public:
	static void GetItemType(class FName RowName, class UObject* __WorldContext, E_jRPG_ItemType* Item_Type);
	static void GetPictosDefinition(class FName RowName, class UObject* __WorldContext, bool* Found, struct FS_PictosDefinition* OutRow);
	static void GetWeaponDefinition(class FName RowName, class UObject* __WorldContext, bool* Found, struct FS_WeaponDefinition* OutRow);
	static struct FS_GearScalingLevel GetEquipmentScalingLevel(class UDataTable* DataTable, int32 Level, class UObject* __WorldContext, bool* Found);
	static void GetConsumableItemFromShard(const struct FS_jRPG_Item_StaticData& S_jRPG_Item_StaticData, class UObject* __WorldContext, class FName* ItemId);
	static class UBP_ItemUpgradeSystem_C* GetItemUpgradeSystem(class UObject* __WorldContext);
	static void GetWeaponQualityLevelsEnum(class UObject* __WorldContext, TArray<EWeaponQuality>* Array);
	static TMap<EWeaponQuality, class FName> GetWeaponPassivesByUpgradeLevel(const struct FS_WeaponDefinition& S_WeaponDefinition, class UObject* __WorldContext);

	void GetWeaponQualityForUpgradeLevel(int32 UpgradeLevel, class UObject* __WorldContext, EWeaponQuality* Quality);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_ItemUpgradeHelpers_C">();
	}
	static class UFL_ItemUpgradeHelpers_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_ItemUpgradeHelpers_C>();
	}
};
static_assert(alignof(UFL_ItemUpgradeHelpers_C) == 0x000008, "Wrong alignment on UFL_ItemUpgradeHelpers_C");
static_assert(sizeof(UFL_ItemUpgradeHelpers_C) == 0x000028, "Wrong size on UFL_ItemUpgradeHelpers_C");

}

