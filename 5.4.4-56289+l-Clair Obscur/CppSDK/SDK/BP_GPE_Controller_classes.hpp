#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_Controller

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_Controller.BP_GPE_Controller_C
// 0x0020 (0x02B0 - 0x0290)
class ABP_GPE_Controller_C final : public AActor
{
public:
	class UBP_GPE_InternalActivationComponent_C*  BP_GPEInternalActivationComponent;                 // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GPE_DebugComponent_C*               BP_GPEDebugComponent;                              // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	void GPETrigger_GetGameplayElementsToActivate(struct FGPEInterfacesReferences* GameplayElementsToActivate);

	void GPE_GetActivationComponent(class UBP_GPE_InternalActivationComponent_C** ActivationComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_Controller_C">();
	}
	static class ABP_GPE_Controller_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPE_Controller_C>();
	}
};
static_assert(alignof(ABP_GPE_Controller_C) == 0x000008, "Wrong alignment on ABP_GPE_Controller_C");
static_assert(sizeof(ABP_GPE_Controller_C) == 0x0002B0, "Wrong size on ABP_GPE_Controller_C");
static_assert(offsetof(ABP_GPE_Controller_C, BP_GPEInternalActivationComponent) == 0x000290, "Member 'ABP_GPE_Controller_C::BP_GPEInternalActivationComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Controller_C, Billboard) == 0x000298, "Member 'ABP_GPE_Controller_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Controller_C, BP_GPEDebugComponent) == 0x0002A0, "Member 'ABP_GPE_Controller_C::BP_GPEDebugComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Controller_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_GPE_Controller_C::DefaultSceneRoot' has a wrong offset!");

}

