#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IKFootToGround

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "IKFootToGround_structs.hpp"


namespace SDK::Params
{

// Function IKFootToGround.FootIK.AddLegToMap
// 0x00F0 (0x00F0 - 0x0000)
struct FootIK_AddLegToMap final
{
public:
	class FName                                   Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLegInfo                               Data;                                              // 0x0010(0x00E0)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_AddLegToMap) == 0x000010, "Wrong alignment on FootIK_AddLegToMap");
static_assert(sizeof(FootIK_AddLegToMap) == 0x0000F0, "Wrong size on FootIK_AddLegToMap");
static_assert(offsetof(FootIK_AddLegToMap, Key) == 0x000000, "Member 'FootIK_AddLegToMap::Key' has a wrong offset!");
static_assert(offsetof(FootIK_AddLegToMap, Data) == 0x000010, "Member 'FootIK_AddLegToMap::Data' has a wrong offset!");

// Function IKFootToGround.FootIK.GetFootGround
// 0x0020 (0x0020 - 0x0000)
struct FootIK_GetFootGround final
{
public:
	class FName                                   LegTag;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_GetFootGround) == 0x000008, "Wrong alignment on FootIK_GetFootGround");
static_assert(sizeof(FootIK_GetFootGround) == 0x000020, "Wrong size on FootIK_GetFootGround");
static_assert(offsetof(FootIK_GetFootGround, LegTag) == 0x000000, "Member 'FootIK_GetFootGround::LegTag' has a wrong offset!");
static_assert(offsetof(FootIK_GetFootGround, ReturnValue) == 0x000008, "Member 'FootIK_GetFootGround::ReturnValue' has a wrong offset!");

// Function IKFootToGround.FootIK.GetLocalFootGround
// 0x0020 (0x0020 - 0x0000)
struct FootIK_GetLocalFootGround final
{
public:
	class FName                                   LegTag;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_GetLocalFootGround) == 0x000008, "Wrong alignment on FootIK_GetLocalFootGround");
static_assert(sizeof(FootIK_GetLocalFootGround) == 0x000020, "Wrong size on FootIK_GetLocalFootGround");
static_assert(offsetof(FootIK_GetLocalFootGround, LegTag) == 0x000000, "Member 'FootIK_GetLocalFootGround::LegTag' has a wrong offset!");
static_assert(offsetof(FootIK_GetLocalFootGround, ReturnValue) == 0x000008, "Member 'FootIK_GetLocalFootGround::ReturnValue' has a wrong offset!");

// Function IKFootToGround.FootIK.InitLeg
// 0x00A0 (0x00A0 - 0x0000)
struct FootIK_InitLeg final
{
public:
	class FName                                   LegTag;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThighBoneName;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CalfBoneName;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   FootBoneName;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootSide                                     Side;                                              // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0xF];                                       // 0x0021(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFootCollider                          FootCollider;                                      // 0x0030(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_InitLeg) == 0x000010, "Wrong alignment on FootIK_InitLeg");
static_assert(sizeof(FootIK_InitLeg) == 0x0000A0, "Wrong size on FootIK_InitLeg");
static_assert(offsetof(FootIK_InitLeg, LegTag) == 0x000000, "Member 'FootIK_InitLeg::LegTag' has a wrong offset!");
static_assert(offsetof(FootIK_InitLeg, ThighBoneName) == 0x000008, "Member 'FootIK_InitLeg::ThighBoneName' has a wrong offset!");
static_assert(offsetof(FootIK_InitLeg, CalfBoneName) == 0x000010, "Member 'FootIK_InitLeg::CalfBoneName' has a wrong offset!");
static_assert(offsetof(FootIK_InitLeg, FootBoneName) == 0x000018, "Member 'FootIK_InitLeg::FootBoneName' has a wrong offset!");
static_assert(offsetof(FootIK_InitLeg, Side) == 0x000020, "Member 'FootIK_InitLeg::Side' has a wrong offset!");
static_assert(offsetof(FootIK_InitLeg, FootCollider) == 0x000030, "Member 'FootIK_InitLeg::FootCollider' has a wrong offset!");

// Function IKFootToGround.FootIK.MakeTick
// 0x0004 (0x0004 - 0x0000)
struct FootIK_MakeTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_MakeTick) == 0x000004, "Wrong alignment on FootIK_MakeTick");
static_assert(sizeof(FootIK_MakeTick) == 0x000004, "Wrong size on FootIK_MakeTick");
static_assert(offsetof(FootIK_MakeTick, DeltaTime) == 0x000000, "Member 'FootIK_MakeTick::DeltaTime' has a wrong offset!");

// Function IKFootToGround.FootIK.SetEnabled
// 0x0001 (0x0001 - 0x0000)
struct FootIK_SetEnabled final
{
public:
	bool                                          NewIsEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_SetEnabled) == 0x000001, "Wrong alignment on FootIK_SetEnabled");
static_assert(sizeof(FootIK_SetEnabled) == 0x000001, "Wrong size on FootIK_SetEnabled");
static_assert(offsetof(FootIK_SetEnabled, NewIsEnabled) == 0x000000, "Member 'FootIK_SetEnabled::NewIsEnabled' has a wrong offset!");

// Function IKFootToGround.FootIK.SetLegEnabled
// 0x000C (0x000C - 0x0000)
struct FootIK_SetLegEnabled final
{
public:
	class FName                                   LegName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewIsEnabled;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FootIK_SetLegEnabled) == 0x000004, "Wrong alignment on FootIK_SetLegEnabled");
static_assert(sizeof(FootIK_SetLegEnabled) == 0x00000C, "Wrong size on FootIK_SetLegEnabled");
static_assert(offsetof(FootIK_SetLegEnabled, LegName) == 0x000000, "Member 'FootIK_SetLegEnabled::LegName' has a wrong offset!");
static_assert(offsetof(FootIK_SetLegEnabled, bNewIsEnabled) == 0x000008, "Member 'FootIK_SetLegEnabled::bNewIsEnabled' has a wrong offset!");

// Function IKFootToGround.FootIK.TraceForLeg
// 0x0010 (0x0010 - 0x0000)
struct FootIK_TraceForLeg final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFalling;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_TraceForLeg) == 0x000004, "Wrong alignment on FootIK_TraceForLeg");
static_assert(sizeof(FootIK_TraceForLeg) == 0x000010, "Wrong size on FootIK_TraceForLeg");
static_assert(offsetof(FootIK_TraceForLeg, Tag) == 0x000000, "Member 'FootIK_TraceForLeg::Tag' has a wrong offset!");
static_assert(offsetof(FootIK_TraceForLeg, IsFalling) == 0x000008, "Member 'FootIK_TraceForLeg::IsFalling' has a wrong offset!");
static_assert(offsetof(FootIK_TraceForLeg, DeltaTime) == 0x00000C, "Member 'FootIK_TraceForLeg::DeltaTime' has a wrong offset!");

// Function IKFootToGround.FootIK.GetFootGroundIKState
// 0x000C (0x000C - 0x0000)
struct FootIK_GetFootGroundIKState final
{
public:
	class FName                                   LegTag;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFootIKType                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FootIK_GetFootGroundIKState) == 0x000004, "Wrong alignment on FootIK_GetFootGroundIKState");
static_assert(sizeof(FootIK_GetFootGroundIKState) == 0x00000C, "Wrong size on FootIK_GetFootGroundIKState");
static_assert(offsetof(FootIK_GetFootGroundIKState, LegTag) == 0x000000, "Member 'FootIK_GetFootGroundIKState::LegTag' has a wrong offset!");
static_assert(offsetof(FootIK_GetFootGroundIKState, ReturnValue) == 0x000008, "Member 'FootIK_GetFootGroundIKState::ReturnValue' has a wrong offset!");

// Function IKFootToGround.FootIK.GetFootRotation
// 0x000C (0x000C - 0x0000)
struct FootIK_GetFootRotation final
{
public:
	class FName                                   LegTag;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_GetFootRotation) == 0x000004, "Wrong alignment on FootIK_GetFootRotation");
static_assert(sizeof(FootIK_GetFootRotation) == 0x00000C, "Wrong size on FootIK_GetFootRotation");
static_assert(offsetof(FootIK_GetFootRotation, LegTag) == 0x000000, "Member 'FootIK_GetFootRotation::LegTag' has a wrong offset!");
static_assert(offsetof(FootIK_GetFootRotation, ReturnValue) == 0x000008, "Member 'FootIK_GetFootRotation::ReturnValue' has a wrong offset!");

// Function IKFootToGround.FootIK.GetLastFootCollision
// 0x0010 (0x0010 - 0x0000)
struct FootIK_GetLastFootCollision final
{
public:
	class FName                                   LegName;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_GetLastFootCollision) == 0x000008, "Wrong alignment on FootIK_GetLastFootCollision");
static_assert(sizeof(FootIK_GetLastFootCollision) == 0x000010, "Wrong size on FootIK_GetLastFootCollision");
static_assert(offsetof(FootIK_GetLastFootCollision, LegName) == 0x000000, "Member 'FootIK_GetLastFootCollision::LegName' has a wrong offset!");
static_assert(offsetof(FootIK_GetLastFootCollision, ReturnValue) == 0x000008, "Member 'FootIK_GetLastFootCollision::ReturnValue' has a wrong offset!");

// Function IKFootToGround.FootIK.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct FootIK_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_IsEnabled) == 0x000001, "Wrong alignment on FootIK_IsEnabled");
static_assert(sizeof(FootIK_IsEnabled) == 0x000001, "Wrong size on FootIK_IsEnabled");
static_assert(offsetof(FootIK_IsEnabled, ReturnValue) == 0x000000, "Member 'FootIK_IsEnabled::ReturnValue' has a wrong offset!");

// Function IKFootToGround.FootIK.IsInitialized
// 0x0001 (0x0001 - 0x0000)
struct FootIK_IsInitialized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FootIK_IsInitialized) == 0x000001, "Wrong alignment on FootIK_IsInitialized");
static_assert(sizeof(FootIK_IsInitialized) == 0x000001, "Wrong size on FootIK_IsInitialized");
static_assert(offsetof(FootIK_IsInitialized, ReturnValue) == 0x000000, "Member 'FootIK_IsInitialized::ReturnValue' has a wrong offset!");

// Function IKFootToGround.LowerBodyIKComponent.ToggleEnabled
// 0x0001 (0x0001 - 0x0000)
struct LowerBodyIKComponent_ToggleEnabled final
{
public:
	bool                                          bNewIsEnabled;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LowerBodyIKComponent_ToggleEnabled) == 0x000001, "Wrong alignment on LowerBodyIKComponent_ToggleEnabled");
static_assert(sizeof(LowerBodyIKComponent_ToggleEnabled) == 0x000001, "Wrong size on LowerBodyIKComponent_ToggleEnabled");
static_assert(offsetof(LowerBodyIKComponent_ToggleEnabled, bNewIsEnabled) == 0x000000, "Member 'LowerBodyIKComponent_ToggleEnabled::bNewIsEnabled' has a wrong offset!");

}

