#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ReadingCube

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "BP_DocumentActor_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ReadingCube.BP_ReadingCube_C
// 0x0080 (0x03B8 - 0x0338)
class ABP_ReadingCube_C final : public ABP_DocumentActor_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_ReadingCube_C;                   // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        AC_Idle_LP;                                        // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Cube;                                              // 0x0348(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_OneShot;                                        // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Loop;                                           // 0x0358(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x0360(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_ReadingCube;                                    // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGameAction_Wrapper                    GameActionWrapperAfterReading;                     // 0x0370(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FItemDataTableRowHandle                JournalItem;                                       // 0x0380(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FSF_ReferenceCounterHandle             ReadingPauseBlocker;                               // 0x0390(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USoundControlBusMix*                    ControlBusMix;                                     // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ExecuteUbergraph_BP_ReadingCube(int32 EntryPoint);
	void GetJournalItemHardcodedName(class FName* Name_0);
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnPutAwayDocument();
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ReadingCube_C">();
	}
	static class ABP_ReadingCube_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ReadingCube_C>();
	}
};
static_assert(alignof(ABP_ReadingCube_C) == 0x000008, "Wrong alignment on ABP_ReadingCube_C");
static_assert(sizeof(ABP_ReadingCube_C) == 0x0003B8, "Wrong size on ABP_ReadingCube_C");
static_assert(offsetof(ABP_ReadingCube_C, UberGraphFrame_BP_ReadingCube_C) == 0x000338, "Member 'ABP_ReadingCube_C::UberGraphFrame_BP_ReadingCube_C' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, AC_Idle_LP) == 0x000340, "Member 'ABP_ReadingCube_C::AC_Idle_LP' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, Cube) == 0x000348, "Member 'ABP_ReadingCube_C::Cube' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, AC_OneShot) == 0x000350, "Member 'ABP_ReadingCube_C::AC_OneShot' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, AC_Loop) == 0x000358, "Member 'ABP_ReadingCube_C::AC_Loop' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, PointLight) == 0x000360, "Member 'ABP_ReadingCube_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, FX_ReadingCube) == 0x000368, "Member 'ABP_ReadingCube_C::FX_ReadingCube' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, GameActionWrapperAfterReading) == 0x000370, "Member 'ABP_ReadingCube_C::GameActionWrapperAfterReading' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, JournalItem) == 0x000380, "Member 'ABP_ReadingCube_C::JournalItem' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, ReadingPauseBlocker) == 0x000390, "Member 'ABP_ReadingCube_C::ReadingPauseBlocker' has a wrong offset!");
static_assert(offsetof(ABP_ReadingCube_C, ControlBusMix) == 0x0003B0, "Member 'ABP_ReadingCube_C::ControlBusMix' has a wrong offset!");

}

