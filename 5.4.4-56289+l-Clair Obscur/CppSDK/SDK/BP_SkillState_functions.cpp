#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SkillState

#include "Basic.hpp"

#include "BP_SkillState_classes.hpp"
#include "BP_SkillState_parameters.hpp"


namespace SDK
{

// Function BP_SkillState.BP_SkillState_C.AddSkillCostModifier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   DeltaCost                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FSF_ModifierStackEntryHandle&    OutModifierHandle                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    DebugName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_SkillState_C::AddSkillCostModifier(int32 DeltaCost, struct FSF_ModifierStackEntryHandle& OutModifierHandle, const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "AddSkillCostModifier");

	Params::BP_SkillState_C_AddSkillCostModifier Parms{};

	Parms.DeltaCost = DeltaCost;
	Parms.OutModifierHandle = std::move(OutModifierHandle);
	Parms.DebugName = std::move(DebugName);

	UObject::ProcessEvent(Func, &Parms);

	OutModifierHandle = std::move(Parms.OutModifierHandle);
}


// Function BP_SkillState.BP_SkillState_C.FindComponentScriptsByClass
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ScriptClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_SkillDataComponentScript_C*>*Array                                                  (Parm, OutParm)

void UBP_SkillState_C::FindComponentScriptsByClass(class UClass* ScriptClass, TArray<class UBP_SkillDataComponentScript_C*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "FindComponentScriptsByClass");

	Params::BP_SkillState_C_FindComponentScriptsByClass Parms{};

	Parms.ScriptClass = ScriptClass;

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_SkillState.BP_SkillState_C.GetScriptForComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class UBP_SkillDataComponent_Base_C*&SkillComponent                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UBP_SkillDataComponentScript_C**  SkillComponentScript                                   (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_SkillState_C::GetScriptForComponent(const class UBP_SkillDataComponent_Base_C*& SkillComponent, class UBP_SkillDataComponentScript_C** SkillComponentScript)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "GetScriptForComponent");

	Params::BP_SkillState_C_GetScriptForComponent Parms{};

	Parms.SkillComponent = SkillComponent;

	UObject::ProcessEvent(Func, &Parms);

	if (SkillComponentScript != nullptr)
		*SkillComponentScript = Parms.SkillComponentScript;
}


// Function BP_SkillState.BP_SkillState_C.GetSkillCost
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 UBP_SkillState_C::GetSkillCost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "GetSkillCost");

	Params::BP_SkillState_C_GetSkillCost Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SkillState.BP_SkillState_C.GetSkillCostModifier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UModifierStack_Float**            Stack                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void UBP_SkillState_C::GetSkillCostModifier(class UModifierStack_Float** Stack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "GetSkillCostModifier");

	Params::BP_SkillState_C_GetSkillCostModifier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Stack != nullptr)
		*Stack = Parms.Stack;
}


// Function BP_SkillState.BP_SkillState_C.GetSkillRuntimeElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EAttackType UBP_SkillState_C::GetSkillRuntimeElement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "GetSkillRuntimeElement");

	Params::BP_SkillState_C_GetSkillRuntimeElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SkillState.BP_SkillState_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SkillState_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillState.BP_SkillState_C.InitializeSkillScriptActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SkillState_C::InitializeSkillScriptActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "InitializeSkillScriptActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SkillState.BP_SkillState_C.IsSkillOvercharged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsOvercharged_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillState_C::IsSkillOvercharged(bool* IsOvercharged_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "IsSkillOvercharged");

	Params::BP_SkillState_C_IsSkillOvercharged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsOvercharged_0 != nullptr)
		*IsOvercharged_0 = Parms.IsOvercharged_0;
}


// Function BP_SkillState.BP_SkillState_C.RemoveSkillCostModifier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSF_ModifierStackEntryHandle&    ModifierHandle                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_SkillState_C::RemoveSkillCostModifier(struct FSF_ModifierStackEntryHandle& ModifierHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "RemoveSkillCostModifier");

	Params::BP_SkillState_C_RemoveSkillCostModifier Parms{};

	Parms.ModifierHandle = std::move(ModifierHandle);

	UObject::ProcessEvent(Func, &Parms);

	ModifierHandle = std::move(Parms.ModifierHandle);
}


// Function BP_SkillState.BP_SkillState_C.SetOvercharge
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOvercharged_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ForcedOverchargeFeedback                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SkillState_C::SetOvercharge(bool IsOvercharged_0, bool ForcedOverchargeFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "SetOvercharge");

	Params::BP_SkillState_C_SetOvercharge Parms{};

	Parms.IsOvercharged_0 = IsOvercharged_0;
	Parms.ForcedOverchargeFeedback = ForcedOverchargeFeedback;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SkillState.BP_SkillState_C.ShouldShowAsOvercharged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_SkillState_C::ShouldShowAsOvercharged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "ShouldShowAsOvercharged");

	Params::BP_SkillState_C_ShouldShowAsOvercharged Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SkillState.BP_SkillState_C.UpdateSkillState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_SkillState_C::UpdateSkillState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SkillState_C", "UpdateSkillState");

	UObject::ProcessEvent(Func, nullptr);
}

}

