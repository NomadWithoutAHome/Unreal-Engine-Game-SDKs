#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleDamages

#include "Basic.hpp"

#include "BP_BattleDamages_classes.hpp"
#include "BP_BattleDamages_parameters.hpp"


namespace SDK
{

// Function BP_BattleDamages.BP_BattleDamages_C.AddAttackPowerModifier
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFDamageModifier&          Modifier                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_BattleDamages_C::AddAttackPowerModifier(const struct FFDamageModifier& Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "AddAttackPowerModifier");

	Params::BP_BattleDamages_C_AddAttackPowerModifier Parms{};

	Parms.Modifier = std::move(Modifier);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.AddBreakBarDamageMultiplier
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Multiplier                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::AddBreakBarDamageMultiplier(double Multiplier, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "AddBreakBarDamageMultiplier");

	Params::BP_BattleDamages_C_AddBreakBarDamageMultiplier Parms{};

	Parms.Multiplier = Multiplier;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.AddCriticalHitExtraChance
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Chance__0_0_1_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::AddCriticalHitExtraChance(double Chance__0_0_1_0, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "AddCriticalHitExtraChance");

	Params::BP_BattleDamages_C_AddCriticalHitExtraChance Parms{};

	Parms.Chance__0_0_1_0 = Chance__0_0_1_0;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.AddDamageModifier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFDamageModifier&          Modifier                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_BattleDamages_C::AddDamageModifier(const struct FFDamageModifier& Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "AddDamageModifier");

	Params::BP_BattleDamages_C_AddDamageModifier Parms{};

	Parms.Modifier = std::move(Modifier);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.AddModifierInternal
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FFDamageModifier&          Modifier                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_BattleDamages_C::AddModifierInternal(const struct FFDamageModifier& Modifier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "AddModifierInternal");

	Params::BP_BattleDamages_C_AddModifierInternal Parms{};

	Parms.Modifier = std::move(Modifier);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyActiveModifiers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyActiveModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyActiveModifiers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyAffinitiesModifiers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyAffinitiesModifiers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyAffinitiesModifiers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyClamp
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyClamp()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyClamp");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyCommonDamageMultipliers
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyCommonDamageMultipliers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyCommonDamageMultipliers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyCriticalHitModifiers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsCriticalHit_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::ApplyCriticalHitModifiers(bool* IsCriticalHit_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyCriticalHitModifiers");

	Params::BP_BattleDamages_C_ApplyCriticalHitModifiers Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCriticalHit_0 != nullptr)
		*IsCriticalHit_0 = Parms.IsCriticalHit_0;
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyDeathtouch
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyDeathtouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyDeathtouch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyDebugOverrides
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyDebugOverrides()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyDebugOverrides");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyDefense
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyDefense()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyDefense");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyStraightDamages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  StraightDamage                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::ApplyStraightDamages(double StraightDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyStraightDamages");

	Params::BP_BattleDamages_C_ApplyStraightDamages Parms{};

	Parms.StraightDamage = StraightDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ApplyTargetClampAndRounding
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ApplyTargetClampAndRounding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ApplyTargetClampAndRounding");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.CalculateDefense
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  AttackPower                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Defense                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_BattleDamages_C::CalculateDefense(double AttackPower, double Defense)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "CalculateDefense");

	Params::BP_BattleDamages_C_CalculateDefense Parms{};

	Parms.AttackPower = AttackPower;
	Parms.Defense = Defense;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.Cancel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMissReason                             MissReason_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::Cancel(EMissReason MissReason_0, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "Cancel");

	Params::BP_BattleDamages_C_Cancel Parms{};

	Parms.MissReason_0 = MissReason_0;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.CheckEditableValue:Modify
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDamageValueState                       Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    ValueName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    ChangeReason                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool*                                   Allowed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::CheckEditableValue_Modify(EDamageValueState Selection, const class FString& ValueName, const class FString& ChangeReason, bool* Allowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "CheckEditableValue:Modify");

	Params::BP_BattleDamages_C_CheckEditableValue_Modify Parms{};

	Parms.Selection = Selection;
	Parms.ValueName = std::move(ValueName);
	Parms.ChangeReason = std::move(ChangeReason);

	UObject::ProcessEvent(Func, &Parms);

	if (Allowed != nullptr)
		*Allowed = Parms.Allowed;
}


// Function BP_BattleDamages.BP_BattleDamages_C.CheckEditableValue_GetFinalValue
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDamageValueState                       Selection                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Allowed                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::CheckEditableValue_GetFinalValue(EDamageValueState Selection, bool* Allowed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "CheckEditableValue_GetFinalValue");

	Params::BP_BattleDamages_C_CheckEditableValue_GetFinalValue Parms{};

	Parms.Selection = Selection;

	UObject::ProcessEvent(Func, &Parms);

	if (Allowed != nullptr)
		*Allowed = Parms.Allowed;
}


// Function BP_BattleDamages.BP_BattleDamages_C.CheckValidReason
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// const class FString&                    Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::CheckValidReason(const class FText& Reason, const class FString& Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "CheckValidReason");

	Params::BP_BattleDamages_C_CheckValidReason Parms{};

	Parms.Reason = std::move(Reason);
	Parms.Context = std::move(Context);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ComputeDamageModifiers
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFDamageModifier>&        Modifiers                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  InputBase                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 base                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FText>*                    DamageLogs                                             (Parm, OutParm)

void UBP_BattleDamages_C::ComputeDamageModifiers(TArray<struct FFDamageModifier>& Modifiers, double InputBase, double* base, TArray<class FText>* DamageLogs)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ComputeDamageModifiers");

	Params::BP_BattleDamages_C_ComputeDamageModifiers Parms{};

	Parms.Modifiers = std::move(Modifiers);
	Parms.InputBase = InputBase;

	UObject::ProcessEvent(Func, &Parms);

	Modifiers = std::move(Parms.Modifiers);

	if (base != nullptr)
		*base = Parms.base;

	if (DamageLogs != nullptr)
		*DamageLogs = std::move(Parms.DamageLogs);
}


// Function BP_BattleDamages.BP_BattleDamages_C.Finish
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::Finish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "Finish");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetAffinityType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EElementalAffinity*                     BaseTypeAffinity_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetAffinityType(EElementalAffinity* BaseTypeAffinity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetAffinityType");

	Params::BP_BattleDamages_C_GetAffinityType Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BaseTypeAffinity_0 != nullptr)
		*BaseTypeAffinity_0 = Parms.BaseTypeAffinity_0;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetBreakBarDamageMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_BattleDamages_C::GetBreakBarDamageMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetBreakBarDamageMultiplier");

	Params::BP_BattleDamages_C_GetBreakBarDamageMultiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetCriticalRollToBeat
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetCriticalRollToBeat(double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetCriticalRollToBeat");

	Params::BP_BattleDamages_C_GetCriticalRollToBeat Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetFeedbackReason
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasFeedback                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FText*                            FeedbackReasonText                                     (Parm, OutParm)
// struct FLinearColor*                    FeedbackReasonColor                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetFeedbackReason(bool* HasFeedback, class FText* FeedbackReasonText, struct FLinearColor* FeedbackReasonColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetFeedbackReason");

	Params::BP_BattleDamages_C_GetFeedbackReason Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasFeedback != nullptr)
		*HasFeedback = Parms.HasFeedback;

	if (FeedbackReasonText != nullptr)
		*FeedbackReasonText = std::move(Parms.FeedbackReasonText);

	if (FeedbackReasonColor != nullptr)
		*FeedbackReasonColor = std::move(Parms.FeedbackReasonColor);
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetFinalBaseElement
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType*                            AttackElement                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetFinalBaseElement(EAttackType* AttackElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetFinalBaseElement");

	Params::BP_BattleDamages_C_GetFinalBaseElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AttackElement != nullptr)
		*AttackElement = Parms.AttackElement;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetFinalBreakBarDamageAmount
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int64 UBP_BattleDamages_C::GetFinalBreakBarDamageAmount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetFinalBreakBarDamageAmount");

	Params::BP_BattleDamages_C_GetFinalBreakBarDamageAmount Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetHitSoundOverride
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class USoundBase*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class USoundBase* UBP_BattleDamages_C::GetHitSoundOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetHitSoundOverride");

	Params::BP_BattleDamages_C_GetHitSoundOverride Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetIgnoreMarkedRemoval
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_BattleDamages_C::GetIgnoreMarkedRemoval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetIgnoreMarkedRemoval");

	Params::BP_BattleDamages_C_GetIgnoreMarkedRemoval Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetInputBaseElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType*                            InputAttackType                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetInputBaseElement(EAttackType* InputAttackType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetInputBaseElement");

	Params::BP_BattleDamages_C_GetInputBaseElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InputAttackType != nullptr)
		*InputAttackType = Parms.InputAttackType;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetInputDamageMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBP_BattleDamages_C::GetInputDamageMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetInputDamageMultiplier");

	Params::BP_BattleDamages_C_GetInputDamageMultiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetIsCriticalHit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsCritical                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetIsCriticalHit(bool* IsCritical)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetIsCriticalHit");

	Params::BP_BattleDamages_C_GetIsCriticalHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCritical != nullptr)
		*IsCritical = Parms.IsCritical;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetIsResistant
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsResistant                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetIsResistant(bool* IsResistant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetIsResistant");

	Params::BP_BattleDamages_C_GetIsResistant Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsResistant != nullptr)
		*IsResistant = Parms.IsResistant;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetIsWeakness
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsWeakness                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetIsWeakness(bool* IsWeakness)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetIsWeakness");

	Params::BP_BattleDamages_C_GetIsWeakness Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsWeakness != nullptr)
		*IsWeakness = Parms.IsWeakness;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetMissReason
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EMissReason                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EMissReason UBP_BattleDamages_C::GetMissReason()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetMissReason");

	Params::BP_BattleDamages_C_GetMissReason Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetTargetCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C** NewParam                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetTargetCharacter(class UAC_jRPG_CharacterBattleStats_C** NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetTargetCharacter");

	Params::BP_BattleDamages_C_GetTargetCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_BattleDamages.BP_BattleDamages_C.Init
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "Init");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.InitAffinities
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::InitAffinities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "InitAffinities");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.InitFinalDamages
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::InitFinalDamages()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "InitFinalDamages");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.IsDeathtouch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_BattleDamages_C::IsDeathtouch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "IsDeathtouch");

	Params::BP_BattleDamages_C_IsDeathtouch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.LoadFromBuilder
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamageBuilder_C*        Builder                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::LoadFromBuilder(class UBP_BattleDamageBuilder_C* Builder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "LoadFromBuilder");

	Params::BP_BattleDamages_C_LoadFromBuilder Parms{};

	Parms.Builder = Builder;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.LogModifier
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_BattleDamages_C::LogModifier(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "LogModifier");

	Params::BP_BattleDamages_C_LogModifier Parms{};

	Parms.Text = std::move(Text);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ModifyBaseDamageElement
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             NewAttackType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FText&                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_BattleDamages_C::ModifyBaseDamageElement(EAttackType NewAttackType, const class FText& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ModifyBaseDamageElement");

	Params::BP_BattleDamages_C_ModifyBaseDamageElement Parms{};

	Parms.NewAttackType = NewAttackType;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ModifyFloatRef
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double&                                 TargetVariable                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    VarName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FText&                      Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_BattleDamages_C::ModifyFloatRef(double& TargetVariable, double NewValue, const class FString& VarName, const class FText& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ModifyFloatRef");

	Params::BP_BattleDamages_C_ModifyFloatRef Parms{};

	Parms.TargetVariable = TargetVariable;
	Parms.NewValue = NewValue;
	Parms.VarName = std::move(VarName);
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);

	TargetVariable = Parms.TargetVariable;
}


// Function BP_BattleDamages.BP_BattleDamages_C.NotifyListeners
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::NotifyListeners()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "NotifyListeners");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.OverrideWithEffectiveDamage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  FinalDamage                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::OverrideWithEffectiveDamage(double FinalDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "OverrideWithEffectiveDamage");

	Params::BP_BattleDamages_C_OverrideWithEffectiveDamage Parms{};

	Parms.FinalDamage = FinalDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.PrintMessage
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_BattleDamages_C::PrintMessage(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "PrintMessage");

	Params::BP_BattleDamages_C_PrintMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.ProcessBaseElement
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::ProcessBaseElement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "ProcessBaseElement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.RollCriticalHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsCriticalHit_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::RollCriticalHit(bool* IsCriticalHit_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "RollCriticalHit");

	Params::BP_BattleDamages_C_RollCriticalHit Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCriticalHit_0 != nullptr)
		*IsCriticalHit_0 = Parms.IsCriticalHit_0;
}


// Function BP_BattleDamages.BP_BattleDamages_C.Set Ignore Target Defense
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ignore                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::Set_Ignore_Target_Defense(bool Ignore)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "Set Ignore Target Defense");

	Params::BP_BattleDamages_C_Set_Ignore_Target_Defense Parms{};

	Parms.Ignore = Ignore;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.SetAbsorbedByShield
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::SetAbsorbedByShield()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "SetAbsorbedByShield");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.SetAffinities
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EElementalAffinity                      BaseTypeAffinity_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::SetAffinities(EElementalAffinity BaseTypeAffinity_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "SetAffinities");

	Params::BP_BattleDamages_C_SetAffinities Parms{};

	Parms.BaseTypeAffinity_0 = BaseTypeAffinity_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.SetIgnoreMarkedRemoval
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::SetIgnoreMarkedRemoval()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "SetIgnoreMarkedRemoval");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.SetIgnoreShields
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleDamages_C::SetIgnoreShields()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "SetIgnoreShields");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleDamages.BP_BattleDamages_C.SetIsCriticalHit
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCritical                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::SetIsCriticalHit(bool IsCritical, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "SetIsCriticalHit");

	Params::BP_BattleDamages_C_SetIsCriticalHit Parms{};

	Parms.IsCritical = IsCritical;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.SetMissReason
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMissReason                             MissReason_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::SetMissReason(EMissReason MissReason_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "SetMissReason");

	Params::BP_BattleDamages_C_SetMissReason Parms{};

	Parms.MissReason_0 = MissReason_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.TryAddLog
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      Reason                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// double                                  PreviousValue                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TArray<class FText>&              TargetArray                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_BattleDamages_C::TryAddLog(const class FText& Reason, double PreviousValue, double NewValue, const TArray<class FText>& TargetArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "TryAddLog");

	Params::BP_BattleDamages_C_TryAddLog Parms{};

	Parms.Reason = std::move(Reason);
	Parms.PreviousValue = PreviousValue;
	Parms.NewValue = NewValue;
	Parms.TargetArray = std::move(TargetArray);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleDamages.BP_BattleDamages_C.TryRollEnemyDodgeFromStats
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_BattleDamages_C::TryRollEnemyDodgeFromStats()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "TryRollEnemyDodgeFromStats");

	Params::BP_BattleDamages_C_TryRollEnemyDodgeFromStats Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetDamageSourceObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IIBattleDamageSource_C>*SourceObject                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetDamageSourceObject(TScriptInterface<class IIBattleDamageSource_C>* SourceObject) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetDamageSourceObject");

	Params::BP_BattleDamages_C_GetDamageSourceObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SourceObject != nullptr)
		*SourceObject = Parms.SourceObject;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetFinalDamages
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double*                                 FinalDamages                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetFinalDamages(double* FinalDamages) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetFinalDamages");

	Params::BP_BattleDamages_C_GetFinalDamages Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FinalDamages != nullptr)
		*FinalDamages = Parms.FinalDamages;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetFinalDamages_Base
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double*                                 FinalDamages                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetFinalDamages_Base(double* FinalDamages) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetFinalDamages_Base");

	Params::BP_BattleDamages_C_GetFinalDamages_Base Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (FinalDamages != nullptr)
		*FinalDamages = Parms.FinalDamages;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetIgnoreTargetDefense
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   IgnoreTargetDefense_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetIgnoreTargetDefense(bool* IgnoreTargetDefense_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetIgnoreTargetDefense");

	Params::BP_BattleDamages_C_GetIgnoreTargetDefense Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IgnoreTargetDefense_0 != nullptr)
		*IgnoreTargetDefense_0 = Parms.IgnoreTargetDefense_0;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetInputDamages
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double*                                 RawDamages                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetInputDamages(double* RawDamages) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetInputDamages");

	Params::BP_BattleDamages_C_GetInputDamages Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RawDamages != nullptr)
		*RawDamages = Parms.RawDamages;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetInputDamages_Base
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double*                                 RawDamages                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetInputDamages_Base(double* RawDamages) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetInputDamages_Base");

	Params::BP_BattleDamages_C_GetInputDamages_Base Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RawDamages != nullptr)
		*RawDamages = Parms.RawDamages;
}


// Function BP_BattleDamages.BP_BattleDamages_C.GetSourceCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C** SourceCharacter_0                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_BattleDamages_C::GetSourceCharacter(class UAC_jRPG_CharacterBattleStats_C** SourceCharacter_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "GetSourceCharacter");

	Params::BP_BattleDamages_C_GetSourceCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SourceCharacter_0 != nullptr)
		*SourceCharacter_0 = Parms.SourceCharacter_0;
}


// Function BP_BattleDamages.BP_BattleDamages_C.PrintError
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const class FText&                      Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_BattleDamages_C::PrintError(const class FText& Message) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleDamages_C", "PrintError");

	Params::BP_BattleDamages_C_PrintError Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}

}

