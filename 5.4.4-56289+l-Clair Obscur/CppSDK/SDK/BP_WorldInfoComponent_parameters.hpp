#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WorldInfoComponent

#include "Basic.hpp"

#include "S_EnemyWorldInfoData_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_EnemyWorldState_structs.hpp"


namespace SDK::Params
{

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.AddAggroLockOnAllEnemies
// 0x0040 (0x0040 - 0x0000)
struct BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies final
{
public:
	class FName                                   LockName;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> CallFunc_GetAllAliveEnemies_Enemies;         // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies");
static_assert(sizeof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies) == 0x000040, "Wrong size on BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, LockName) == 0x000000, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::LockName' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, CallFunc_GetAllAliveEnemies_Enemies) == 0x000018, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::CallFunc_GetAllAliveEnemies_Enemies' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_WorldInfoComponent_C_AddAggroLockOnAllEnemies::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.ComputeDistanceToClosestEnemy
// 0x00C8 (0x00C8 - 0x0000)
struct BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy final
{
public:
	double                                        local_CurrentSquaredDistance;                      // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        local_MinSquaredDistance;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_PlayerPawnLocation;                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> CallFunc_GetAllAliveEnemies_Enemies;         // 0x0038(0x0010)(ReferenceParm)
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LimitMax_Double_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LimitMax_Double_ReturnValue_1;            // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Sqrt_ReturnValue;                         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x6];                                       // 0x008A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_LimitMax_Double_ReturnValue_2;            // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy");
static_assert(sizeof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy) == 0x0000C8, "Wrong size on BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, local_CurrentSquaredDistance) == 0x000000, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::local_CurrentSquaredDistance' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, local_MinSquaredDistance) == 0x000008, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::local_MinSquaredDistance' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, local_PlayerPawnLocation) == 0x000010, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::local_PlayerPawnLocation' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_GetAllAliveEnemies_Enemies) == 0x000038, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_GetAllAliveEnemies_Enemies' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Array_Get_Item) == 0x000048, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_IsValid_ReturnValue) == 0x000054, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Less_IntInt_ReturnValue) == 0x000055, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_LimitMax_Double_ReturnValue) == 0x000070, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_LimitMax_Double_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_LimitMax_Double_ReturnValue_1) == 0x000078, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_LimitMax_Double_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Sqrt_ReturnValue) == 0x000080, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Sqrt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x000089, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000090, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_LimitMax_Double_ReturnValue_2) == 0x000098, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_LimitMax_Double_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_GetPlayerPawn_ReturnValue) == 0x0000A0, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x0000A8, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy, CallFunc_IsValid_ReturnValue_1) == 0x0000C0, "Member 'BP_WorldInfoComponent_C_ComputeDistanceToClosestEnemy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.ExecuteUbergraph_BP_WorldInfoComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent) == 0x000004, "Wrong alignment on BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent");
static_assert(sizeof(BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent) == 0x000008, "Wrong size on BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent");
static_assert(offsetof(BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent, EntryPoint) == 0x000000, "Member 'BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_WorldInfoComponent_C_ExecuteUbergraph_BP_WorldInfoComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetAllAliveEnemies
// 0x0068 (0x0068 - 0x0000)
struct BP_WorldInfoComponent_C_GetAllAliveEnemies final
{
public:
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> Enemies;                                     // 0x0000(0x0010)(Parm, OutParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> Temp_wildcard_Variable;                      // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> CallFunc_Map_Keys_Keys;                      // 0x0030(0x0010)(ReferenceParm)
	TArray<struct FS_EnemyWorldInfoData>          CallFunc_Map_Values_Values;                        // 0x0040(0x0010)(ReferenceParm)
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_GetAllAliveEnemies) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_GetAllAliveEnemies");
static_assert(sizeof(BP_WorldInfoComponent_C_GetAllAliveEnemies) == 0x000068, "Wrong size on BP_WorldInfoComponent_C_GetAllAliveEnemies");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, Enemies) == 0x000000, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::Enemies' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, Temp_wildcard_Variable) == 0x000018, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Map_Keys_Keys) == 0x000030, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Map_Values_Values) == 0x000040, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Array_Length_ReturnValue) == 0x00005C, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000060, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllAliveEnemies, CallFunc_Less_IntInt_ReturnValue) == 0x000061, "Member 'BP_WorldInfoComponent_C_GetAllAliveEnemies::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetAllTeleportPoints
// 0x0010 (0x0010 - 0x0000)
struct BP_WorldInfoComponent_C_GetAllTeleportPoints final
{
public:
	TArray<class ABP_jRPG_MapTeleportPoint_C*>    TeleportPoints;                                    // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_WorldInfoComponent_C_GetAllTeleportPoints) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_GetAllTeleportPoints");
static_assert(sizeof(BP_WorldInfoComponent_C_GetAllTeleportPoints) == 0x000010, "Wrong size on BP_WorldInfoComponent_C_GetAllTeleportPoints");
static_assert(offsetof(BP_WorldInfoComponent_C_GetAllTeleportPoints, TeleportPoints) == 0x000000, "Member 'BP_WorldInfoComponent_C_GetAllTeleportPoints::TeleportPoints' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetDistanceToClosestEnemy
// 0x0008 (0x0008 - 0x0000)
struct BP_WorldInfoComponent_C_GetDistanceToClosestEnemy final
{
public:
	double                                        DistanceToClosestEnemy_0;                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_GetDistanceToClosestEnemy) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_GetDistanceToClosestEnemy");
static_assert(sizeof(BP_WorldInfoComponent_C_GetDistanceToClosestEnemy) == 0x000008, "Wrong size on BP_WorldInfoComponent_C_GetDistanceToClosestEnemy");
static_assert(offsetof(BP_WorldInfoComponent_C_GetDistanceToClosestEnemy, DistanceToClosestEnemy_0) == 0x000000, "Member 'BP_WorldInfoComponent_C_GetDistanceToClosestEnemy::DistanceToClosestEnemy_0' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetEnemiesWithGlobalObjectID
// 0x0078 (0x0078 - 0x0000)
struct BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID final
{
public:
	class FName                                   GlobalObjectID;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> Enemies;                                     // 0x0008(0x0010)(Parm, OutParm)
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> Temp_wildcard_Variable;                      // 0x0018(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> CallFunc_Map_Keys_Keys;                      // 0x0038(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item;                           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetGlobalObjectIDWithGroup_ObjectID;      // 0x005C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item_1;                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID");
static_assert(sizeof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID) == 0x000078, "Wrong size on BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, GlobalObjectID) == 0x000000, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::GlobalObjectID' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, Enemies) == 0x000008, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::Enemies' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, Temp_wildcard_Variable) == 0x000018, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, Temp_int_Array_Index_Variable) == 0x000030, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Map_Keys_Keys) == 0x000038, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Array_Length_ReturnValue) == 0x000048, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Array_Get_Item) == 0x000050, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Less_IntInt_ReturnValue) == 0x000058, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_GetGlobalObjectIDWithGroup_ObjectID) == 0x00005C, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_GetGlobalObjectIDWithGroup_ObjectID' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000064, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Array_Get_Item_1) == 0x000068, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID, CallFunc_Array_Add_ReturnValue) == 0x000070, "Member 'BP_WorldInfoComponent_C_GetEnemiesWithGlobalObjectID::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.GetMaximumLevelGapToChasePlayer
// 0x0004 (0x0004 - 0x0000)
struct BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer final
{
public:
	int32                                         MaximumLevelGapToChasePlayer_0;                    // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer) == 0x000004, "Wrong alignment on BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer");
static_assert(sizeof(BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer) == 0x000004, "Wrong size on BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer");
static_assert(offsetof(BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer, MaximumLevelGapToChasePlayer_0) == 0x000000, "Member 'BP_WorldInfoComponent_C_GetMaximumLevelGapToChasePlayer::MaximumLevelGapToChasePlayer_0' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_WorldInfoComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_WorldInfoComponent_C_ReceiveTick");
static_assert(sizeof(BP_WorldInfoComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_WorldInfoComponent_C_ReceiveTick");
static_assert(offsetof(BP_WorldInfoComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_WorldInfoComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.RegisterTeleportPoint
// 0x0010 (0x0010 - 0x0000)
struct BP_WorldInfoComponent_C_RegisterTeleportPoint final
{
public:
	const class ABP_jRPG_MapTeleportPoint_C*      InTeleportPoint;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_RegisterTeleportPoint) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_RegisterTeleportPoint");
static_assert(sizeof(BP_WorldInfoComponent_C_RegisterTeleportPoint) == 0x000010, "Wrong size on BP_WorldInfoComponent_C_RegisterTeleportPoint");
static_assert(offsetof(BP_WorldInfoComponent_C_RegisterTeleportPoint, InTeleportPoint) == 0x000000, "Member 'BP_WorldInfoComponent_C_RegisterTeleportPoint::InTeleportPoint' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RegisterTeleportPoint, CallFunc_Array_Add_ReturnValue) == 0x000008, "Member 'BP_WorldInfoComponent_C_RegisterTeleportPoint::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.RegisterWorldEnemy
// 0x0010 (0x0010 - 0x0000)
struct BP_WorldInfoComponent_C_RegisterWorldEnemy final
{
public:
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_EnemyWorldInfoData                  Temp_struct_Variable;                              // 0x0008(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_RegisterWorldEnemy) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_RegisterWorldEnemy");
static_assert(sizeof(BP_WorldInfoComponent_C_RegisterWorldEnemy) == 0x000010, "Wrong size on BP_WorldInfoComponent_C_RegisterWorldEnemy");
static_assert(offsetof(BP_WorldInfoComponent_C_RegisterWorldEnemy, Enemy) == 0x000000, "Member 'BP_WorldInfoComponent_C_RegisterWorldEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RegisterWorldEnemy, Temp_struct_Variable) == 0x000008, "Member 'BP_WorldInfoComponent_C_RegisterWorldEnemy::Temp_struct_Variable' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.RemoveAggroLockOnAllEnemies
// 0x0040 (0x0040 - 0x0000)
struct BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies final
{
public:
	class FName                                   LockName;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> CallFunc_GetAllAliveEnemies_Enemies;         // 0x0018(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies");
static_assert(sizeof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies) == 0x000040, "Wrong size on BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, LockName) == 0x000000, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::LockName' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, CallFunc_GetAllAliveEnemies_Enemies) == 0x000018, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::CallFunc_GetAllAliveEnemies_Enemies' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_WorldInfoComponent_C_RemoveAggroLockOnAllEnemies::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.StopChasingForAllEnemies
// 0x0038 (0x0038 - 0x0000)
struct BP_WorldInfoComponent_C_StopChasingForAllEnemies final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Enemy_World_Base_Seamless_C*> CallFunc_GetAllAliveEnemies_Enemies;         // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_StopChasingForAllEnemies) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_StopChasingForAllEnemies");
static_assert(sizeof(BP_WorldInfoComponent_C_StopChasingForAllEnemies) == 0x000038, "Wrong size on BP_WorldInfoComponent_C_StopChasingForAllEnemies");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, CallFunc_GetAllAliveEnemies_Enemies) == 0x000010, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::CallFunc_GetAllAliveEnemies_Enemies' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_StopChasingForAllEnemies, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_WorldInfoComponent_C_StopChasingForAllEnemies::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.UnregisterTeleportPoint
// 0x0010 (0x0010 - 0x0000)
struct BP_WorldInfoComponent_C_UnregisterTeleportPoint final
{
public:
	const class ABP_jRPG_MapTeleportPoint_C*      InTeleportPoint;                                   // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_UnregisterTeleportPoint) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_UnregisterTeleportPoint");
static_assert(sizeof(BP_WorldInfoComponent_C_UnregisterTeleportPoint) == 0x000010, "Wrong size on BP_WorldInfoComponent_C_UnregisterTeleportPoint");
static_assert(offsetof(BP_WorldInfoComponent_C_UnregisterTeleportPoint, InTeleportPoint) == 0x000000, "Member 'BP_WorldInfoComponent_C_UnregisterTeleportPoint::InTeleportPoint' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_UnregisterTeleportPoint, CallFunc_Array_RemoveItem_ReturnValue) == 0x000008, "Member 'BP_WorldInfoComponent_C_UnregisterTeleportPoint::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.UnregisterWorldEnemy
// 0x0010 (0x0010 - 0x0000)
struct BP_WorldInfoComponent_C_UnregisterWorldEnemy final
{
public:
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Remove_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_UnregisterWorldEnemy) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_UnregisterWorldEnemy");
static_assert(sizeof(BP_WorldInfoComponent_C_UnregisterWorldEnemy) == 0x000010, "Wrong size on BP_WorldInfoComponent_C_UnregisterWorldEnemy");
static_assert(offsetof(BP_WorldInfoComponent_C_UnregisterWorldEnemy, Enemy) == 0x000000, "Member 'BP_WorldInfoComponent_C_UnregisterWorldEnemy::Enemy' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_UnregisterWorldEnemy, CallFunc_Map_Remove_ReturnValue) == 0x000008, "Member 'BP_WorldInfoComponent_C_UnregisterWorldEnemy::CallFunc_Map_Remove_ReturnValue' has a wrong offset!");

// Function BP_WorldInfoComponent.BP_WorldInfoComponent_C.UpdateWorldEnemyState
// 0x0010 (0x0010 - 0x0000)
struct BP_WorldInfoComponent_C_UpdateWorldEnemyState final
{
public:
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   Enemy;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_EnemyWorldState                             EnemyState;                                        // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_EnemyWorldInfoData                  local_WorldInfoData;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_EnemyWorldInfoData                  CallFunc_Map_Find_Value;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_WorldInfoComponent_C_UpdateWorldEnemyState) == 0x000008, "Wrong alignment on BP_WorldInfoComponent_C_UpdateWorldEnemyState");
static_assert(sizeof(BP_WorldInfoComponent_C_UpdateWorldEnemyState) == 0x000010, "Wrong size on BP_WorldInfoComponent_C_UpdateWorldEnemyState");
static_assert(offsetof(BP_WorldInfoComponent_C_UpdateWorldEnemyState, Enemy) == 0x000000, "Member 'BP_WorldInfoComponent_C_UpdateWorldEnemyState::Enemy' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_UpdateWorldEnemyState, EnemyState) == 0x000008, "Member 'BP_WorldInfoComponent_C_UpdateWorldEnemyState::EnemyState' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_UpdateWorldEnemyState, local_WorldInfoData) == 0x000009, "Member 'BP_WorldInfoComponent_C_UpdateWorldEnemyState::local_WorldInfoData' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_UpdateWorldEnemyState, CallFunc_Map_Find_Value) == 0x00000A, "Member 'BP_WorldInfoComponent_C_UpdateWorldEnemyState::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_WorldInfoComponent_C_UpdateWorldEnemyState, CallFunc_Map_Find_ReturnValue) == 0x00000B, "Member 'BP_WorldInfoComponent_C_UpdateWorldEnemyState::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

}

