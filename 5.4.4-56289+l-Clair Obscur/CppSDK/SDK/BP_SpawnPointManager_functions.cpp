#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpawnPointManager

#include "Basic.hpp"

#include "BP_SpawnPointManager_classes.hpp"
#include "BP_SpawnPointManager_parameters.hpp"


namespace SDK
{

// Function BP_SpawnPointManager.BP_SpawnPointManager_C.ComputeChangeLevelParameters
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_ChangeLevelParameters*        S_ChangeLevelParameters                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::ComputeChangeLevelParameters(struct FS_ChangeLevelParameters* S_ChangeLevelParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "ComputeChangeLevelParameters");

	Params::BP_SpawnPointManager_C_ComputeChangeLevelParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (S_ChangeLevelParameters != nullptr)
		*S_ChangeLevelParameters = std::move(Parms.S_ChangeLevelParameters);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.DEBUG_ActivateLightingScenarioForSpawnPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              SpawnPointTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::DEBUG_ActivateLightingScenarioForSpawnPoint(const struct FGameplayTag& SpawnPointTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "DEBUG_ActivateLightingScenarioForSpawnPoint");

	Params::BP_SpawnPointManager_C_DEBUG_ActivateLightingScenarioForSpawnPoint Parms{};

	Parms.SpawnPointTag = std::move(SpawnPointTag);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetOnLoadMapTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform*                      SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_jRPG_MapSpawnPoint_C**        SpawnPoint                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ABP_LightingScenarioReference_C>*LightingScenario                                       (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaAudioParameters*          AreaAudioParameters                                    (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetOnLoadMapTransform(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetOnLoadMapTransform");

	Params::BP_SpawnPointManager_C_GetOnLoadMapTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	if (SpawnPoint != nullptr)
		*SpawnPoint = Parms.SpawnPoint;

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;

	if (AreaAudioParameters != nullptr)
		*AreaAudioParameters = std::move(Parms.AreaAudioParameters);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetOnLoadMapTransformAfterBattle
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform*                      SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_jRPG_MapSpawnPoint_C**        SpawnPoint                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ABP_LightingScenarioReference_C>*LightingScenario                                       (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaAudioParameters*          AreaAudioParameters                                    (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetOnLoadMapTransformAfterBattle(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetOnLoadMapTransformAfterBattle");

	Params::BP_SpawnPointManager_C_GetOnLoadMapTransformAfterBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	if (SpawnPoint != nullptr)
		*SpawnPoint = Parms.SpawnPoint;

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;

	if (AreaAudioParameters != nullptr)
		*AreaAudioParameters = std::move(Parms.AreaAudioParameters);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetOnLoadMapTransformForWorldMap
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform*                      SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_jRPG_MapSpawnPoint_C**        SpawnPoint                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ABP_LightingScenarioReference_C>*LightingScenario                                       (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaAudioParameters*          AreaAudioParameters                                    (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetOnLoadMapTransformForWorldMap(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetOnLoadMapTransformForWorldMap");

	Params::BP_SpawnPointManager_C_GetOnLoadMapTransformForWorldMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	if (SpawnPoint != nullptr)
		*SpawnPoint = Parms.SpawnPoint;

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;

	if (AreaAudioParameters != nullptr)
		*AreaAudioParameters = std::move(Parms.AreaAudioParameters);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetOnLoadMapTransformRegular
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform*                      SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_jRPG_MapSpawnPoint_C**        SpawnPoint                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ABP_LightingScenarioReference_C>*LightingScenario                                       (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaAudioParameters*          AreaAudioParameters                                    (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetOnLoadMapTransformRegular(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetOnLoadMapTransformRegular");

	Params::BP_SpawnPointManager_C_GetOnLoadMapTransformRegular Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	if (SpawnPoint != nullptr)
		*SpawnPoint = Parms.SpawnPoint;

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;

	if (AreaAudioParameters != nullptr)
		*AreaAudioParameters = std::move(Parms.AreaAudioParameters);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetOnLoadMapTransformWithStaticSpawnPoint
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform*                      SpawnTransform                                         (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        CameraRotation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class ABP_jRPG_MapSpawnPoint_C**        SpawnPoint                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TSoftObjectPtr<class ABP_LightingScenarioReference_C>*LightingScenario                                       (Parm, OutParm, HasGetValueTypeHash)
// struct FS_AreaAudioParameters*          AreaAudioParameters                                    (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetOnLoadMapTransformWithStaticSpawnPoint(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetOnLoadMapTransformWithStaticSpawnPoint");

	Params::BP_SpawnPointManager_C_GetOnLoadMapTransformWithStaticSpawnPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnTransform != nullptr)
		*SpawnTransform = std::move(Parms.SpawnTransform);

	if (CameraRotation != nullptr)
		*CameraRotation = std::move(Parms.CameraRotation);

	if (SpawnPoint != nullptr)
		*SpawnPoint = Parms.SpawnPoint;

	if (LightingScenario != nullptr)
		*LightingScenario = Parms.LightingScenario;

	if (AreaAudioParameters != nullptr)
		*AreaAudioParameters = std::move(Parms.AreaAudioParameters);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetSpawnPointByTag
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              SpawnPointTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class ABP_jRPG_MapSpawnPoint_C**        SpawnPoint                                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Found                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetSpawnPointByTag(const struct FGameplayTag& SpawnPointTag, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, bool* Found)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetSpawnPointByTag");

	Params::BP_SpawnPointManager_C_GetSpawnPointByTag Parms{};

	Parms.SpawnPointTag = std::move(SpawnPointTag);

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnPoint != nullptr)
		*SpawnPoint = Parms.SpawnPoint;

	if (Found != nullptr)
		*Found = Parms.Found;
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.GetStaticSpawnPointTag
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FGameplayTag*                    SpawnPointTag                                          (Parm, OutParm, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::GetStaticSpawnPointTag(struct FGameplayTag* SpawnPointTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "GetStaticSpawnPointTag");

	Params::BP_SpawnPointManager_C_GetStaticSpawnPointTag Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnPointTag != nullptr)
		*SpawnPointTag = std::move(Parms.SpawnPointTag);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.IsSpawnPointLoaded
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              SpawnPointTag                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsLoaded                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::IsSpawnPointLoaded(const struct FGameplayTag& SpawnPointTag, bool* IsLoaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "IsSpawnPointLoaded");

	Params::BP_SpawnPointManager_C_IsSpawnPointLoaded Parms{};

	Parms.SpawnPointTag = std::move(SpawnPointTag);

	UObject::ProcessEvent(Func, &Parms);

	if (IsLoaded != nullptr)
		*IsLoaded = Parms.IsLoaded;
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.IsUsingDynamicSpawnPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_SpawnPointManager_C::IsUsingDynamicSpawnPoint()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "IsUsingDynamicSpawnPoint");

	Params::BP_SpawnPointManager_C_IsUsingDynamicSpawnPoint Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.PrepareToChangeMap
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_SpawnPointManager_C::PrepareToChangeMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "PrepareToChangeMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SpawnPointManager.BP_SpawnPointManager_C.RegisterSpawnPoint
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_MapSpawnPoint_C*         SpawnPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_SpawnPointManager_C::RegisterSpawnPoint(class ABP_jRPG_MapSpawnPoint_C* SpawnPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SpawnPointManager_C", "RegisterSpawnPoint");

	Params::BP_SpawnPointManager_C_RegisterSpawnPoint Parms{};

	Parms.SpawnPoint = SpawnPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

