#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CinematicSystem

#include "Basic.hpp"

#include "S_jRPG_Character_World_Movement_Data_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_TriggerCinematicVariables_structs.hpp"
#include "UMG_structs.hpp"
#include "ALSV4_CPP_structs.hpp"
#include "E_jRPG_CharacterWorldCapability_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CinematicSystem.BP_CinematicSystem_C
// 0x02D0 (0x0370 - 0x00A0)
class UBP_CinematicSystem_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULevelSequencePlayer*                   LevelSequencePlayer;                               // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    LevelSequencePlayerActor;                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_TriggerCinematicVariables           CurrentTriggerCinematicParameters;                 // 0x00B8(0x0150)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              EventAfterPostCinematicEvents;                     // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              EventWhenTriggeringCinematic;                      // 0x0218(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_CinematicControls_C*               CurrentCinematicWidget;                            // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_MediaPlayer_C*                      SpawnedMediaPlayerActor;                           // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayingCinematic;                                // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CinematicPaused;                                   // 0x0239(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23A[0x6];                                      // 0x023A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MediaPlayerCinematic_C*            CurrentMediaPlayerWidget;                          // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounterHandle             InteractionBlockerReferenceHandle;                 // 0x0248(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	class USF_BlueprintLatentAction*              CurrentLatentAction;                               // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         PreCinematicCameraBlendTime;                       // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         PreCinematicTimeBeforeInputLock;                   // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MinimumDelayBeforeStartingCinematicAfterBlend;     // 0x0278(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DelayBeforeAllowingInputPostCinematicTransition;   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Cine_ExitPoint_C*                   CinematicExitPoint;                                // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SequenceStarted;                                   // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasInputLockFromPreCinematic;                      // 0x0291(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_292[0x6];                                      // 0x0292(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              EventBeforePostCinematicTransitionStarted;         // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_LoadAssetRequest_C*                 LoadCinematicAssetRequest;                         // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_CinematicTransition_C*             CinematicTransitionWidget;                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           PreCinematicInputLockTimer;                        // 0x02B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Character_World_Movement_Data  CharacterWorldMovementData;                        // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SDPause;                                           // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SDUnPause;                                         // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SDSkip;                                            // 0x02F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	float                                         FrameRateLimit;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         SequencePlayRate;                                  // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnCinematicRequested;                              // 0x0308(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UUserWidget*>                    SpawnedWidgets;                                    // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UAudioComponent*>                ExternalAudioComponents;                           // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FSF_ReferenceCounterHandle             InputLockBlockerReference;                         // 0x0338(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsInTransition;                                    // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ALevelSequenceActor*>            ToDestroyLevelSequenceActors;                      // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void AddLevelSequenceActorToDestroy(class ALevelSequenceActor* ToDestroy);
	void ApplyFrameRateLimit();
	void ApplyLODSettingsOnGroom();
	void CleanUpAfterCinematic();
	void CreateAssetLoadRequest();
	void CreateCinematicControlsWidget();
	void DEBUG_AutoSkipCinematicIfNeeded();
	class FString DEBUG_GetCurrentState();
	void DEBUG_ModifyCinematicParameters();
	void DestroyCinematicControlsWidget();
	void DisplayCinematicTransitionWidget(EUMGSequencePlayMode PlayMode);
	void ExecuteExitPointTransition();
	void ExecuteGameActionIfNeeded();
	void ExecutePostCinematicTransition();
	void ExecutePreCinematicTransition();
	void ExecuteUbergraph_BP_CinematicSystem(int32 EntryPoint);
	void ExitCinematicModeForCharacter();
	void FinishLatentAction();
	void FinishPreCinematicTransition();
	void GetCharacterWorld(class ABP_jRPG_Character_World_C** AsBP_J_RPG_Character_World);
	void GetOverlayForPreCinematicTransition(EALSOverlayState* Overlay);
	class FString GetSequenceTimeDebugInfo();
	bool IsInCinematicTransition();
	void IsPlayingSequence(bool* IsPlaying);
	bool IsSequenceStarted();
	void OnPlatformPauseEvent(bool bShouldPause);
	void OnPreCinematicInputLockTimerElapsed();
	void OnSequenceFinished();
	void OnSequenceStarted();
	void OnUnpauseAnimationFinished();
	void PauseCinematic();
	void PauseSound();
	void PlayCinematicWithLevelSequence();
	void PlayCinematicWithMediaPlayer();
	void PrepareWorldToStartCinematic();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RegisterExternalAudioComponent(const class UAudioComponent*& AudioComponent);
	void RegisterSpawnedMediaPlayerActor(class ABP_MediaPlayer_C* MediaPlayer);
	void RegisterSpawnedWidget(class UUserWidget* Widget);
	void RemoveFrameRateLimit();
	void RemoveLODSettingsOnGroom();
	void ResetBindings();
	void ResumeGameAfterCinematic();
	void SetPauseForSpawnedWidgets(bool Paused);
	void SetPauseMediaPlayerActor(bool Paused);
	void SetSequencePlayRate(double PlayRate);
	void SkipCinematic();
	void StartLevelSequence(class ULevelSequence* LevelSequence, const struct FMovieSceneSequencePlaybackSettings& Settings);
	void StartPostCinematicTransition();
	void StartPreCinematicTransitionWithCameraBlend();
	void StartPreCinematicTransitionWithoutCameraBlend();
	void TriggerCinematic(const struct FS_TriggerCinematicVariables& TriggerCinematicVariableStruct, class USF_BlueprintLatentAction* LatentAction);
	void UnpauseSound();
	void UnpauseSoundAfterSkip();
	void UnregisterExternalAudioComponent(const class UAudioComponent*& AudioComponent);
	void UnregisterSpawnedMediaPlayerActor();
	void UnregisterSpawnedWidget(const class UUserWidget*& Widget);
	void UpdateDynamicResolutionFrameBudget(bool FrameRateLimitApplied);
	void UpdateWorldCharacterIfNeeded();
	void ValidateCinematicContext(const struct FS_TriggerCinematicVariables& TriggerCinematicParameters, bool* IsValid);
	void ValidateCinematicParameters(bool* IsValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CinematicSystem_C">();
	}
	static class UBP_CinematicSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CinematicSystem_C>();
	}
};
static_assert(alignof(UBP_CinematicSystem_C) == 0x000008, "Wrong alignment on UBP_CinematicSystem_C");
static_assert(sizeof(UBP_CinematicSystem_C) == 0x000370, "Wrong size on UBP_CinematicSystem_C");
static_assert(offsetof(UBP_CinematicSystem_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CinematicSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, LevelSequencePlayer) == 0x0000A8, "Member 'UBP_CinematicSystem_C::LevelSequencePlayer' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, LevelSequencePlayerActor) == 0x0000B0, "Member 'UBP_CinematicSystem_C::LevelSequencePlayerActor' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CurrentTriggerCinematicParameters) == 0x0000B8, "Member 'UBP_CinematicSystem_C::CurrentTriggerCinematicParameters' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, EventAfterPostCinematicEvents) == 0x000208, "Member 'UBP_CinematicSystem_C::EventAfterPostCinematicEvents' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, EventWhenTriggeringCinematic) == 0x000218, "Member 'UBP_CinematicSystem_C::EventWhenTriggeringCinematic' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CurrentCinematicWidget) == 0x000228, "Member 'UBP_CinematicSystem_C::CurrentCinematicWidget' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SpawnedMediaPlayerActor) == 0x000230, "Member 'UBP_CinematicSystem_C::SpawnedMediaPlayerActor' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, IsPlayingCinematic) == 0x000238, "Member 'UBP_CinematicSystem_C::IsPlayingCinematic' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CinematicPaused) == 0x000239, "Member 'UBP_CinematicSystem_C::CinematicPaused' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CurrentMediaPlayerWidget) == 0x000240, "Member 'UBP_CinematicSystem_C::CurrentMediaPlayerWidget' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, InteractionBlockerReferenceHandle) == 0x000248, "Member 'UBP_CinematicSystem_C::InteractionBlockerReferenceHandle' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CurrentLatentAction) == 0x000268, "Member 'UBP_CinematicSystem_C::CurrentLatentAction' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, PreCinematicCameraBlendTime) == 0x000270, "Member 'UBP_CinematicSystem_C::PreCinematicCameraBlendTime' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, PreCinematicTimeBeforeInputLock) == 0x000274, "Member 'UBP_CinematicSystem_C::PreCinematicTimeBeforeInputLock' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, MinimumDelayBeforeStartingCinematicAfterBlend) == 0x000278, "Member 'UBP_CinematicSystem_C::MinimumDelayBeforeStartingCinematicAfterBlend' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, DelayBeforeAllowingInputPostCinematicTransition) == 0x000280, "Member 'UBP_CinematicSystem_C::DelayBeforeAllowingInputPostCinematicTransition' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CinematicExitPoint) == 0x000288, "Member 'UBP_CinematicSystem_C::CinematicExitPoint' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SequenceStarted) == 0x000290, "Member 'UBP_CinematicSystem_C::SequenceStarted' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, HasInputLockFromPreCinematic) == 0x000291, "Member 'UBP_CinematicSystem_C::HasInputLockFromPreCinematic' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, EventBeforePostCinematicTransitionStarted) == 0x000298, "Member 'UBP_CinematicSystem_C::EventBeforePostCinematicTransitionStarted' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, LoadCinematicAssetRequest) == 0x0002A8, "Member 'UBP_CinematicSystem_C::LoadCinematicAssetRequest' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CinematicTransitionWidget) == 0x0002B0, "Member 'UBP_CinematicSystem_C::CinematicTransitionWidget' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, PreCinematicInputLockTimer) == 0x0002B8, "Member 'UBP_CinematicSystem_C::PreCinematicInputLockTimer' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, CharacterWorldMovementData) == 0x0002C0, "Member 'UBP_CinematicSystem_C::CharacterWorldMovementData' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SDPause) == 0x0002D0, "Member 'UBP_CinematicSystem_C::SDPause' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SDUnPause) == 0x0002E0, "Member 'UBP_CinematicSystem_C::SDUnPause' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SDSkip) == 0x0002F0, "Member 'UBP_CinematicSystem_C::SDSkip' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, FrameRateLimit) == 0x000300, "Member 'UBP_CinematicSystem_C::FrameRateLimit' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SequencePlayRate) == 0x000304, "Member 'UBP_CinematicSystem_C::SequencePlayRate' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, OnCinematicRequested) == 0x000308, "Member 'UBP_CinematicSystem_C::OnCinematicRequested' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, SpawnedWidgets) == 0x000318, "Member 'UBP_CinematicSystem_C::SpawnedWidgets' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, ExternalAudioComponents) == 0x000328, "Member 'UBP_CinematicSystem_C::ExternalAudioComponents' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, InputLockBlockerReference) == 0x000338, "Member 'UBP_CinematicSystem_C::InputLockBlockerReference' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, IsInTransition) == 0x000358, "Member 'UBP_CinematicSystem_C::IsInTransition' has a wrong offset!");
static_assert(offsetof(UBP_CinematicSystem_C, ToDestroyLevelSequenceActors) == 0x000360, "Member 'UBP_CinematicSystem_C::ToDestroyLevelSequenceActors' has a wrong offset!");

}

