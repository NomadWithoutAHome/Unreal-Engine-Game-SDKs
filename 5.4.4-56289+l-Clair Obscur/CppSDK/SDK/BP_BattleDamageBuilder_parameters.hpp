#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleDamageBuilder

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "EAttackType_structs.hpp"
#include "EDamageReason_structs.hpp"


namespace SDK::Params
{

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddBreakBarDamageMultiplier
// 0x01B8 (0x01B8 - 0x0000)
struct BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier final
{
public:
	double                                        Multiplier;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedForDistribution_ReturnValue;    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0010)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_IsEmpty_ReturnValue;                      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0088(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00D0(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0128(0x0010)()
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0148(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0190(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue_1;                     // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x01B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier) == 0x0001B8, "Wrong size on BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, Multiplier) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, Reason) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_IsPackagedForDistribution_ReturnValue) == 0x000018, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_IsPackagedForDistribution_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_Not_PreBool_ReturnValue) == 0x000030, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_IsEmpty_ReturnValue) == 0x000080, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, K2Node_MakeStruct_FormatArgumentData_1) == 0x000088, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000D0, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, K2Node_MakeArray_Array) == 0x000118, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000128, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_Format_ReturnValue) == 0x000138, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, K2Node_MakeStruct_FormatArgumentData_3) == 0x000148, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, K2Node_MakeArray_Array_1) == 0x000190, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_Format_ReturnValue_1) == 0x0001A0, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0001B0, "Member 'BP_BattleDamageBuilder_C_AddBreakBarDamageMultiplier::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddCriticalHitChanceModifier
// 0x0020 (0x0020 - 0x0000)
struct BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier final
{
public:
	double                                        Modifier;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier) == 0x000020, "Wrong size on BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier, Modifier) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier::Modifier' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier, Reason) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_BattleDamageBuilder_C_AddCriticalHitChanceModifier::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddCriticalHitDamageMultiplier
// 0x0020 (0x0020 - 0x0000)
struct BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier final
{
public:
	double                                        Multiplier;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier) == 0x000020, "Wrong size on BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier, Multiplier) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier, Reason) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_BattleDamageBuilder_C_AddCriticalHitDamageMultiplier::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddFinalDamageMultiplier
// 0x0020 (0x0020 - 0x0000)
struct BP_BattleDamageBuilder_C_AddFinalDamageMultiplier final
{
public:
	double                                        Multiplier;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddFinalDamageMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddFinalDamageMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddFinalDamageMultiplier) == 0x000020, "Wrong size on BP_BattleDamageBuilder_C_AddFinalDamageMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddFinalDamageMultiplier, Multiplier) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddFinalDamageMultiplier::Multiplier' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddFinalDamageMultiplier, Reason) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddFinalDamageMultiplier::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddFinalDamageMultiplier, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_BattleDamageBuilder_C_AddFinalDamageMultiplier::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddRegularHitChanceModifier
// 0x0020 (0x0020 - 0x0000)
struct BP_BattleDamageBuilder_C_AddRegularHitChanceModifier final
{
public:
	double                                        Multiplier;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddRegularHitChanceModifier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddRegularHitChanceModifier");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddRegularHitChanceModifier) == 0x000020, "Wrong size on BP_BattleDamageBuilder_C_AddRegularHitChanceModifier");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddRegularHitChanceModifier, Multiplier) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddRegularHitChanceModifier::Multiplier' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddRegularHitChanceModifier, Reason) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddRegularHitChanceModifier::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddRegularHitChanceModifier, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_BattleDamageBuilder_C_AddRegularHitChanceModifier::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddStraightDamageAsMaxHPPercent
// 0x0030 (0x0030 - 0x0000)
struct BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent final
{
public:
	double                                        Percent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NullifyBaseDamage_0;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepModifiersOnNullify;                            // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_GetMaxHP_MaxHP;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent) == 0x000030, "Wrong size on BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent, Percent) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent::Percent' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent, NullifyBaseDamage_0) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent::NullifyBaseDamage_0' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent, KeepModifiersOnNullify) == 0x000009, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent::KeepModifiersOnNullify' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent, Reason) == 0x000010, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent, CallFunc_GetMaxHP_MaxHP) == 0x000020, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent::CallFunc_GetMaxHP_MaxHP' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageAsMaxHPPercent::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.AddStraightDamageFlat
// 0x0100 (0x0100 - 0x0000)
struct BP_BattleDamageBuilder_C_AddStraightDamageFlat final
{
public:
	double                                        FlatValue;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NullifyBaseDamage_0;                               // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepModifiersOnNullify;                            // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0010)()
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0088(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0098(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00E0(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_AddStraightDamageFlat) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_AddStraightDamageFlat");
static_assert(sizeof(BP_BattleDamageBuilder_C_AddStraightDamageFlat) == 0x000100, "Wrong size on BP_BattleDamageBuilder_C_AddStraightDamageFlat");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, FlatValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::FlatValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, NullifyBaseDamage_0) == 0x000008, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::NullifyBaseDamage_0' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, KeepModifiersOnNullify) == 0x000009, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::KeepModifiersOnNullify' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, Reason) == 0x000010, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, CallFunc_Not_PreBool_ReturnValue) == 0x000080, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000088, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, K2Node_MakeStruct_FormatArgumentData_1) == 0x000098, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, K2Node_MakeArray_Array) == 0x0000E0, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_AddStraightDamageFlat, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'BP_BattleDamageBuilder_C_AddStraightDamageFlat::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.DealDamages
// 0x0028 (0x0028 - 0x0000)
struct BP_BattleDamageBuilder_C_DealDamages final
{
public:
	bool                                          HasHit;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BattleDamages_C*                    BattleDamages;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_ReceiveDamageFromObject_DamageDealt;      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceiveDamageFromObject_HasHit;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceiveDamageFromObject_DodgeSuccess;     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReceiveDamageFromObject_ParrySuccess;     // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_BattleDamages_C*                    CallFunc_ReceiveDamageFromObject_BattleDamages;    // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_DealDamages) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_DealDamages");
static_assert(sizeof(BP_BattleDamageBuilder_C_DealDamages) == 0x000028, "Wrong size on BP_BattleDamageBuilder_C_DealDamages");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, HasHit) == 0x000000, "Member 'BP_BattleDamageBuilder_C_DealDamages::HasHit' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, BattleDamages) == 0x000008, "Member 'BP_BattleDamageBuilder_C_DealDamages::BattleDamages' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, CallFunc_ReceiveDamageFromObject_DamageDealt) == 0x000010, "Member 'BP_BattleDamageBuilder_C_DealDamages::CallFunc_ReceiveDamageFromObject_DamageDealt' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, CallFunc_ReceiveDamageFromObject_HasHit) == 0x000018, "Member 'BP_BattleDamageBuilder_C_DealDamages::CallFunc_ReceiveDamageFromObject_HasHit' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, CallFunc_ReceiveDamageFromObject_DodgeSuccess) == 0x000019, "Member 'BP_BattleDamageBuilder_C_DealDamages::CallFunc_ReceiveDamageFromObject_DodgeSuccess' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, CallFunc_ReceiveDamageFromObject_ParrySuccess) == 0x00001A, "Member 'BP_BattleDamageBuilder_C_DealDamages::CallFunc_ReceiveDamageFromObject_ParrySuccess' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_DealDamages, CallFunc_ReceiveDamageFromObject_BattleDamages) == 0x000020, "Member 'BP_BattleDamageBuilder_C_DealDamages::CallFunc_ReceiveDamageFromObject_BattleDamages' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetAttackElement
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_GetAttackElement final
{
public:
	EAttackType                                   AttackElement_0;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetAttackElement) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_GetAttackElement");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetAttackElement) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_GetAttackElement");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetAttackElement, AttackElement_0) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetAttackElement::AttackElement_0' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetAttackPowerMultiplier
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetAttackPowerMultiplier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetAttackPowerMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetAttackPowerMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetAttackPowerMultiplier) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetAttackPowerMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetAttackPowerMultiplier, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetAttackPowerMultiplier::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetBreakBarMultiplier
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetBreakBarMultiplier final
{
public:
	double                                        INPUT_BreakBarMultiplier_0;                        // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetBreakBarMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetBreakBarMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetBreakBarMultiplier) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetBreakBarMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetBreakBarMultiplier, INPUT_BreakBarMultiplier_0) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetBreakBarMultiplier::INPUT_BreakBarMultiplier_0' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetCriticalHitChanceModifier
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetCriticalHitChanceModifier::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetCriticalHitDamageMultiplier
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetCriticalHitDamageMultiplier::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetDamageReason
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_GetDamageReason final
{
public:
	EDamageReason                                 DamageReason_0;                                    // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetDamageReason) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_GetDamageReason");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetDamageReason) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_GetDamageReason");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetDamageReason, DamageReason_0) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetDamageReason::DamageReason_0' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetDamageSource
// 0x0010 (0x0010 - 0x0000)
struct BP_BattleDamageBuilder_C_GetDamageSource final
{
public:
	TScriptInterface<class IIBattleDamageSource_C> DamageSource_0;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetDamageSource) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetDamageSource");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetDamageSource) == 0x000010, "Wrong size on BP_BattleDamageBuilder_C_GetDamageSource");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetDamageSource, DamageSource_0) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetDamageSource::DamageSource_0' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetFeedbackReason
// 0x0020 (0x0020 - 0x0000)
struct BP_BattleDamageBuilder_C_GetFeedbackReason final
{
public:
	class FText                                   FeedbackReasonText_0;                              // 0x0000(0x0010)(Parm, OutParm)
	struct FLinearColor                           FeedbackReasonColor_0;                             // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetFeedbackReason) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetFeedbackReason");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetFeedbackReason) == 0x000020, "Wrong size on BP_BattleDamageBuilder_C_GetFeedbackReason");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetFeedbackReason, FeedbackReasonText_0) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetFeedbackReason::FeedbackReasonText_0' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetFeedbackReason, FeedbackReasonColor_0) == 0x000010, "Member 'BP_BattleDamageBuilder_C_GetFeedbackReason::FeedbackReasonColor_0' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetFinalDamageMultiplier
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetFinalDamageMultiplier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetFinalDamageMultiplier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetFinalDamageMultiplier");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetFinalDamageMultiplier) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetFinalDamageMultiplier");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetFinalDamageMultiplier, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetFinalDamageMultiplier::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetForcedCriticalHit
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_GetForcedCriticalHit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetForcedCriticalHit) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_GetForcedCriticalHit");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetForcedCriticalHit) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_GetForcedCriticalHit");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetForcedCriticalHit, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetForcedCriticalHit::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetHitSoundOverride
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetHitSoundOverride final
{
public:
	class USoundBase*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetHitSoundOverride) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetHitSoundOverride");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetHitSoundOverride) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetHitSoundOverride");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetHitSoundOverride, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetHitSoundOverride::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetIgnoreMarkedRemoval
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetIgnoreMarkedRemoval::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetIgnoreShields
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_GetIgnoreShields final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetIgnoreShields) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_GetIgnoreShields");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetIgnoreShields) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_GetIgnoreShields");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetIgnoreShields, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetIgnoreShields::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetRegularHitChanceModifier
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetRegularHitChanceModifier final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetRegularHitChanceModifier) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetRegularHitChanceModifier");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetRegularHitChanceModifier) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetRegularHitChanceModifier");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetRegularHitChanceModifier, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetRegularHitChanceModifier::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.GetStraightDamage
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_GetStraightDamage final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_GetStraightDamage) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_GetStraightDamage");
static_assert(sizeof(BP_BattleDamageBuilder_C_GetStraightDamage) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_GetStraightDamage");
static_assert(offsetof(BP_BattleDamageBuilder_C_GetStraightDamage, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_GetStraightDamage::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.HasFeedbackReason
// 0x0003 (0x0003 - 0x0000)
struct BP_BattleDamageBuilder_C_HasFeedbackReason final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TextIsEmpty_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_HasFeedbackReason) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_HasFeedbackReason");
static_assert(sizeof(BP_BattleDamageBuilder_C_HasFeedbackReason) == 0x000003, "Wrong size on BP_BattleDamageBuilder_C_HasFeedbackReason");
static_assert(offsetof(BP_BattleDamageBuilder_C_HasFeedbackReason, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_HasFeedbackReason::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_HasFeedbackReason, CallFunc_TextIsEmpty_ReturnValue) == 0x000001, "Member 'BP_BattleDamageBuilder_C_HasFeedbackReason::CallFunc_TextIsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_HasFeedbackReason, CallFunc_Not_PreBool_ReturnValue) == 0x000002, "Member 'BP_BattleDamageBuilder_C_HasFeedbackReason::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.IsDeathtouch
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_IsDeathtouch final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_IsDeathtouch) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_IsDeathtouch");
static_assert(sizeof(BP_BattleDamageBuilder_C_IsDeathtouch) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_IsDeathtouch");
static_assert(offsetof(BP_BattleDamageBuilder_C_IsDeathtouch, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_IsDeathtouch::ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.NullifyBaseDamage
// 0x0088 (0x0088 - 0x0000)
struct BP_BattleDamageBuilder_C_NullifyBaseDamage final
{
public:
	class FString                                 Reason;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0010(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_NullifyBaseDamage) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_NullifyBaseDamage");
static_assert(sizeof(BP_BattleDamageBuilder_C_NullifyBaseDamage) == 0x000088, "Wrong size on BP_BattleDamageBuilder_C_NullifyBaseDamage");
static_assert(offsetof(BP_BattleDamageBuilder_C_NullifyBaseDamage, Reason) == 0x000000, "Member 'BP_BattleDamageBuilder_C_NullifyBaseDamage::Reason' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_NullifyBaseDamage, CallFunc_Conv_StringToText_ReturnValue) == 0x000010, "Member 'BP_BattleDamageBuilder_C_NullifyBaseDamage::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_NullifyBaseDamage, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'BP_BattleDamageBuilder_C_NullifyBaseDamage::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_NullifyBaseDamage, K2Node_MakeArray_Array) == 0x000068, "Member 'BP_BattleDamageBuilder_C_NullifyBaseDamage::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_NullifyBaseDamage, CallFunc_Format_ReturnValue) == 0x000078, "Member 'BP_BattleDamageBuilder_C_NullifyBaseDamage::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.SetFeedbackReason
// 0x0020 (0x0020 - 0x0000)
struct BP_BattleDamageBuilder_C_SetFeedbackReason final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	struct FLinearColor                           Color;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_SetFeedbackReason) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_SetFeedbackReason");
static_assert(sizeof(BP_BattleDamageBuilder_C_SetFeedbackReason) == 0x000020, "Wrong size on BP_BattleDamageBuilder_C_SetFeedbackReason");
static_assert(offsetof(BP_BattleDamageBuilder_C_SetFeedbackReason, Text) == 0x000000, "Member 'BP_BattleDamageBuilder_C_SetFeedbackReason::Text' has a wrong offset!");
static_assert(offsetof(BP_BattleDamageBuilder_C_SetFeedbackReason, Color) == 0x000010, "Member 'BP_BattleDamageBuilder_C_SetFeedbackReason::Color' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.SetHitSoundOverride
// 0x0008 (0x0008 - 0x0000)
struct BP_BattleDamageBuilder_C_SetHitSoundOverride final
{
public:
	class USoundBase*                             HitSoundOverride_0;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_SetHitSoundOverride) == 0x000008, "Wrong alignment on BP_BattleDamageBuilder_C_SetHitSoundOverride");
static_assert(sizeof(BP_BattleDamageBuilder_C_SetHitSoundOverride) == 0x000008, "Wrong size on BP_BattleDamageBuilder_C_SetHitSoundOverride");
static_assert(offsetof(BP_BattleDamageBuilder_C_SetHitSoundOverride, HitSoundOverride_0) == 0x000000, "Member 'BP_BattleDamageBuilder_C_SetHitSoundOverride::HitSoundOverride_0' has a wrong offset!");

// Function BP_BattleDamageBuilder.BP_BattleDamageBuilder_C.ShouldBypassModifiers
// 0x0001 (0x0001 - 0x0000)
struct BP_BattleDamageBuilder_C_ShouldBypassModifiers final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_BattleDamageBuilder_C_ShouldBypassModifiers) == 0x000001, "Wrong alignment on BP_BattleDamageBuilder_C_ShouldBypassModifiers");
static_assert(sizeof(BP_BattleDamageBuilder_C_ShouldBypassModifiers) == 0x000001, "Wrong size on BP_BattleDamageBuilder_C_ShouldBypassModifiers");
static_assert(offsetof(BP_BattleDamageBuilder_C_ShouldBypassModifiers, ReturnValue) == 0x000000, "Member 'BP_BattleDamageBuilder_C_ShouldBypassModifiers::ReturnValue' has a wrong offset!");

}

