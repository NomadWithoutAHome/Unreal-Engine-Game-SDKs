#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterVisualAlterationsComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterVisualAlterationsComponent.BP_CharacterVisualAlterationsComponent_C
// 0x00A0 (0x0140 - 0x00A0)
class UBP_CharacterVisualAlterationsComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UMeshComponent*>                 MeshesToAlter;                                     // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FVector                                LastCharacterLocation;                             // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceTraveled;                                  // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAlter;                                       // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCharacterInCinematic;                            // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x2];                                       // 0x00DA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DefaultWaterFXColor;                               // 0x00DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Water_Reaction_C*                   CurrentWaterFX;                                    // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInWater;                                         // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WaterLevel;                                        // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentWaterLevel;                                 // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetWaterLevel;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SpeedWaterLevel;                                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDynamicCharacterOpacity;                     // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimumDistanceToOpacifyCharacter;                 // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumDistanceToOpacifyCharacter;                 // 0x0130(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ThresholdToHideGroom;                              // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	double ComputeCameraDistanceToCapsule();
	void UpdateCharacterOpacity(double DeltaSeconds);
	double GetWaterLevel();
	double ComputeMeshHeight();
	void UpdateWaterLevelParameter(double DeltaSeconds, double Speed);
	void UpdateWaterLevelData(bool IsInWaterCheck, const struct FVector& ImpactPoint, double MeshHeight);
	void SpawnWaterFXIfNeeded(bool IsInWaterCheck, const struct FVector& Location, const struct FVector& CharacterForwardVector, class ABP_Water_Reaction_C** CurrentWaterFX_0);
	void GetOwnerAsCharacter(class ACharacter** Character);
	void UpdateWaterOnCharacter(double DeltaSeconds);
	void SetCharacterOpacity(double NewOpacity);
	void ApplyAlterationsWithHealthRatio(double HealthRatio);
	void SetTearsLevel(double TearLevel);
	void SetSweatLevel(double NewValue);
	void SetBloodLevel(double NewValue);
	void SetDirtLevel(double NewValue);
	void UpdateMudOnCharacter(double DeltaSeconds);
	void UpdateCharacterVisualAlterationsElements();
	void GetOwnerCurrentHealthRatio(double* Ratio);
	void GetOwnerCharacterName(class FName* HardcodedNameID);
	void OnCharacterCustomizationChanged(class UBP_CharacterSkinComponent_C* SkinComponent);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void OnCharacterUpdateNeeded();
	void ReceiveTick(float DeltaSeconds);
	void ForceCharacterVisualAlteration(double BloodLevel, double SweatLevel, double DirtLevel, double TearLevel);
	void ExecuteUbergraph_BP_CharacterVisualAlterationsComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterVisualAlterationsComponent_C">();
	}
	static class UBP_CharacterVisualAlterationsComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterVisualAlterationsComponent_C>();
	}
};
static_assert(alignof(UBP_CharacterVisualAlterationsComponent_C) == 0x000008, "Wrong alignment on UBP_CharacterVisualAlterationsComponent_C");
static_assert(sizeof(UBP_CharacterVisualAlterationsComponent_C) == 0x000140, "Wrong size on UBP_CharacterVisualAlterationsComponent_C");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CharacterVisualAlterationsComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, MeshesToAlter) == 0x0000A8, "Member 'UBP_CharacterVisualAlterationsComponent_C::MeshesToAlter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, LastCharacterLocation) == 0x0000B8, "Member 'UBP_CharacterVisualAlterationsComponent_C::LastCharacterLocation' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, DistanceTraveled) == 0x0000D0, "Member 'UBP_CharacterVisualAlterationsComponent_C::DistanceTraveled' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, ShouldAlter) == 0x0000D8, "Member 'UBP_CharacterVisualAlterationsComponent_C::ShouldAlter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, IsCharacterInCinematic) == 0x0000D9, "Member 'UBP_CharacterVisualAlterationsComponent_C::IsCharacterInCinematic' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, DefaultWaterFXColor) == 0x0000DC, "Member 'UBP_CharacterVisualAlterationsComponent_C::DefaultWaterFXColor' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, CurrentWaterFX) == 0x0000F0, "Member 'UBP_CharacterVisualAlterationsComponent_C::CurrentWaterFX' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, IsInWater) == 0x0000F8, "Member 'UBP_CharacterVisualAlterationsComponent_C::IsInWater' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, WaterLevel) == 0x000100, "Member 'UBP_CharacterVisualAlterationsComponent_C::WaterLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, CurrentWaterLevel) == 0x000108, "Member 'UBP_CharacterVisualAlterationsComponent_C::CurrentWaterLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, TargetWaterLevel) == 0x000110, "Member 'UBP_CharacterVisualAlterationsComponent_C::TargetWaterLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, SpeedWaterLevel) == 0x000118, "Member 'UBP_CharacterVisualAlterationsComponent_C::SpeedWaterLevel' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, EnableDynamicCharacterOpacity) == 0x000120, "Member 'UBP_CharacterVisualAlterationsComponent_C::EnableDynamicCharacterOpacity' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, MinimumDistanceToOpacifyCharacter) == 0x000128, "Member 'UBP_CharacterVisualAlterationsComponent_C::MinimumDistanceToOpacifyCharacter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, MaximumDistanceToOpacifyCharacter) == 0x000130, "Member 'UBP_CharacterVisualAlterationsComponent_C::MaximumDistanceToOpacifyCharacter' has a wrong offset!");
static_assert(offsetof(UBP_CharacterVisualAlterationsComponent_C, ThresholdToHideGroom) == 0x000138, "Member 'UBP_CharacterVisualAlterationsComponent_C::ThresholdToHideGroom' has a wrong offset!");

}

