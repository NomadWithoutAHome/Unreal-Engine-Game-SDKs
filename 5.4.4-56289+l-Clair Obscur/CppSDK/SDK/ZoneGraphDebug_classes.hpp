#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ZoneGraphDebug

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "ZoneGraph_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class ZoneGraphDebug.ZoneLaneTest
// 0x0008 (0x0030 - 0x0028)
class UZoneLaneTest : public UObject
{
public:
	class UZoneGraphTestingComponent*             OwnerComponent;                                    // 0x0028(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneLaneTest">();
	}
	static class UZoneLaneTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneLaneTest>();
	}
};
static_assert(alignof(UZoneLaneTest) == 0x000008, "Wrong alignment on UZoneLaneTest");
static_assert(sizeof(UZoneLaneTest) == 0x000030, "Wrong size on UZoneLaneTest");
static_assert(offsetof(UZoneLaneTest, OwnerComponent) == 0x000028, "Member 'UZoneLaneTest::OwnerComponent' has a wrong offset!");

// Class ZoneGraphDebug.ZoneGraphTestingComponent
// 0x02D0 (0x07F0 - 0x0520)
class UZoneGraphTestingComponent final : public UPrimitiveComponent
{
public:
	uint8                                         Pad_518[0x10];                                     // 0x0518(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneGraphSubsystem*                    ZoneGraph;                                         // 0x0528(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FZoneGraphLaneLocation                 LaneLocation;                                      // 0x0530(0x0070)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FZoneGraphLaneLocation                 NextLaneLocation;                                  // 0x05A0(0x0070)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FZoneGraphLaneLocation                 NearestLaneLocation;                               // 0x0610(0x0070)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                SearchExtent;                                      // 0x0680(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AdvanceDistance;                                   // 0x0698(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NearestTestOffset;                                 // 0x06A0(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FZoneGraphTagFilter                    QueryFilter;                                       // 0x06B8(0x000C)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bDrawLinkedLanes;                                  // 0x06C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawLaneTangentVectors;                           // 0x06C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawLaneSmoothing;                                // 0x06C6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawBVTreeQuery;                                  // 0x06C7(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDrawLanePath;                                     // 0x06C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C9[0x7];                                      // 0x06C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AZoneGraphTestingActor*                 OtherActor;                                        // 0x06D0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D8[0x100];                                    // 0x06D8(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UZoneLaneTest*>                  CustomTests;                                       // 0x07D8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0x8];                                      // 0x07E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableCustomTests();
	void EnableCustomTests();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphTestingComponent">();
	}
	static class UZoneGraphTestingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphTestingComponent>();
	}
};
static_assert(alignof(UZoneGraphTestingComponent) == 0x000010, "Wrong alignment on UZoneGraphTestingComponent");
static_assert(sizeof(UZoneGraphTestingComponent) == 0x0007F0, "Wrong size on UZoneGraphTestingComponent");
static_assert(offsetof(UZoneGraphTestingComponent, ZoneGraph) == 0x000528, "Member 'UZoneGraphTestingComponent::ZoneGraph' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, LaneLocation) == 0x000530, "Member 'UZoneGraphTestingComponent::LaneLocation' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, NextLaneLocation) == 0x0005A0, "Member 'UZoneGraphTestingComponent::NextLaneLocation' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, NearestLaneLocation) == 0x000610, "Member 'UZoneGraphTestingComponent::NearestLaneLocation' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, SearchExtent) == 0x000680, "Member 'UZoneGraphTestingComponent::SearchExtent' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, AdvanceDistance) == 0x000698, "Member 'UZoneGraphTestingComponent::AdvanceDistance' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, NearestTestOffset) == 0x0006A0, "Member 'UZoneGraphTestingComponent::NearestTestOffset' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, QueryFilter) == 0x0006B8, "Member 'UZoneGraphTestingComponent::QueryFilter' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, bDrawLinkedLanes) == 0x0006C4, "Member 'UZoneGraphTestingComponent::bDrawLinkedLanes' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, bDrawLaneTangentVectors) == 0x0006C5, "Member 'UZoneGraphTestingComponent::bDrawLaneTangentVectors' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, bDrawLaneSmoothing) == 0x0006C6, "Member 'UZoneGraphTestingComponent::bDrawLaneSmoothing' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, bDrawBVTreeQuery) == 0x0006C7, "Member 'UZoneGraphTestingComponent::bDrawBVTreeQuery' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, bDrawLanePath) == 0x0006C8, "Member 'UZoneGraphTestingComponent::bDrawLanePath' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, OtherActor) == 0x0006D0, "Member 'UZoneGraphTestingComponent::OtherActor' has a wrong offset!");
static_assert(offsetof(UZoneGraphTestingComponent, CustomTests) == 0x0007D8, "Member 'UZoneGraphTestingComponent::CustomTests' has a wrong offset!");

// Class ZoneGraphDebug.ZoneGraphTestingActor
// 0x0008 (0x0298 - 0x0290)
class AZoneGraphTestingActor final : public AActor
{
public:
	class UZoneGraphTestingComponent*             DebugComp;                                         // 0x0290(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DisableCustomTests();
	void EnableCustomTests();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphTestingActor">();
	}
	static class AZoneGraphTestingActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AZoneGraphTestingActor>();
	}
};
static_assert(alignof(AZoneGraphTestingActor) == 0x000008, "Wrong alignment on AZoneGraphTestingActor");
static_assert(sizeof(AZoneGraphTestingActor) == 0x000298, "Wrong size on AZoneGraphTestingActor");
static_assert(offsetof(AZoneGraphTestingActor, DebugComp) == 0x000290, "Member 'AZoneGraphTestingActor::DebugComp' has a wrong offset!");

}

