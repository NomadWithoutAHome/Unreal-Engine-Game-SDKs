#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputManager

#include "Basic.hpp"

#include "BP_InputManager_classes.hpp"
#include "BP_InputManager_parameters.hpp"


namespace SDK
{

// Function BP_InputManager.BP_InputManager_C.BindToActionAxis
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void(double Value)>&    Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::BindToActionAxis(EInputAction Action, const TDelegate<void(double Value)>& Event, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "BindToActionAxis");

	Params::BP_InputManager_C_BindToActionAxis Parms{};

	Parms.Action = Action;
	Parms.Event = Event;
	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.BindToActionPressed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::BindToActionPressed(EInputAction Action, const TDelegate<void()>& Event, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "BindToActionPressed");

	Params::BP_InputManager_C_BindToActionPressed Parms{};

	Parms.Action = Action;
	Parms.Event = Event;
	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.BindToActionPressedKey
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void(class UBP_InputKeyState_C* KeyState)>&Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::BindToActionPressedKey(EInputAction Action, class UObject* Object, const TDelegate<void(class UBP_InputKeyState_C* KeyState)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "BindToActionPressedKey");

	Params::BP_InputManager_C_BindToActionPressedKey Parms{};

	Parms.Action = Action;
	Parms.Object = Object;
	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.BindToActionPressedReleased
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                PressedEvent                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                Released                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::BindToActionPressedReleased(EInputAction Action, const TDelegate<void()>& PressedEvent, const TDelegate<void()>& Released, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "BindToActionPressedReleased");

	Params::BP_InputManager_C_BindToActionPressedReleased Parms{};

	Parms.Action = Action;
	Parms.PressedEvent = PressedEvent;
	Parms.Released = Released;
	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.BindToActionReleased
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          BoundObject                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::BindToActionReleased(EInputAction Action, const TDelegate<void()>& Event, class UObject* BoundObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "BindToActionReleased");

	Params::BP_InputManager_C_BindToActionReleased Parms{};

	Parms.Action = Action;
	Parms.Event = Event;
	Parms.BoundObject = BoundObject;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.CreateInputLayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsModal                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FGuid*                           Guid                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::CreateInputLayer(bool IsModal, struct FGuid* Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "CreateInputLayer");

	Params::BP_InputManager_C_CreateInputLayer Parms{};

	Parms.IsModal = IsModal;

	UObject::ProcessEvent(Func, &Parms);

	if (Guid != nullptr)
		*Guid = std::move(Parms.Guid);
}


// Function BP_InputManager.BP_InputManager_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputType                              InputType                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::CustomEvent_0(EInputType InputType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "CustomEvent_0");

	Params::BP_InputManager_C_CustomEvent_0 Parms{};

	Parms.InputType = InputType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.DEBUG_SetVerboseEnabled
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::DEBUG_SetVerboseEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "DEBUG_SetVerboseEnabled");

	Params::BP_InputManager_C_DEBUG_SetVerboseEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.DeleteInputLayerByGUID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid&                           Guid                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::DeleteInputLayerByGUID(struct FGuid& Guid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "DeleteInputLayerByGUID");

	Params::BP_InputManager_C_DeleteInputLayerByGUID Parms{};

	Parms.Guid = std::move(Guid);

	UObject::ProcessEvent(Func, &Parms);

	Guid = std::move(Parms.Guid);
}


// Function BP_InputManager.BP_InputManager_C.DisplayTutoPanel
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             RowName                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::DisplayTutoPanel(class FName RowName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "DisplayTutoPanel");

	Params::BP_InputManager_C_DisplayTutoPanel Parms{};

	Parms.RowName = RowName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.ExecuteUbergraph_BP_InputManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::ExecuteUbergraph_BP_InputManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "ExecuteUbergraph_BP_InputManager");

	Params::BP_InputManager_C_ExecuteUbergraph_BP_InputManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.FindLayerByGUID
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid&                           Guid                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFInputLayer*                    Output                                                 (Parm, OutParm, HasGetValueTypeHash)
// int32*                                  Array_Index                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::FindLayerByGUID(struct FGuid& Guid, struct FFInputLayer* Output, int32* Array_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "FindLayerByGUID");

	Params::BP_InputManager_C_FindLayerByGUID Parms{};

	Parms.Guid = std::move(Guid);

	UObject::ProcessEvent(Func, &Parms);

	Guid = std::move(Parms.Guid);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);

	if (Array_Index != nullptr)
		*Array_Index = Parms.Array_Index;
}


// Function BP_InputManager.BP_InputManager_C.GetActionKeyState
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FName&                      ActionName                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsKeyDown                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EInputType*                             InputType                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 AxisValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey*                            Key                                                    (Parm, OutParm, HasGetValueTypeHash)

void UBP_InputManager_C::GetActionKeyState(const class FName& ActionName, bool* IsKeyDown, EInputType* InputType, double* AxisValue, struct FKey* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetActionKeyState");

	Params::BP_InputManager_C_GetActionKeyState Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	if (IsKeyDown != nullptr)
		*IsKeyDown = Parms.IsKeyDown;

	if (InputType != nullptr)
		*InputType = Parms.InputType;

	if (AxisValue != nullptr)
		*AxisValue = Parms.AxisValue;

	if (Key != nullptr)
		*Key = std::move(Parms.Key);
}


// Function BP_InputManager.BP_InputManager_C.GetActionStateObject
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EInputAction                            ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_InputKeyState_C**             Value                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::GetActionStateObject(EInputAction ActionName, class UBP_InputKeyState_C** Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetActionStateObject");

	Params::BP_InputManager_C_GetActionStateObject Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_InputManager.BP_InputManager_C.GetActionStateObject_FromLayer
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EInputAction                            ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFInputLayer&                    InputLayer                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UBP_InputKeyState_C**             Value                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::GetActionStateObject_FromLayer(EInputAction ActionName, struct FFInputLayer& InputLayer, class UBP_InputKeyState_C** Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetActionStateObject_FromLayer");

	Params::BP_InputManager_C_GetActionStateObject_FromLayer Parms{};

	Parms.ActionName = ActionName;
	Parms.InputLayer = std::move(InputLayer);

	UObject::ProcessEvent(Func, &Parms);

	InputLayer = std::move(Parms.InputLayer);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_InputManager.BP_InputManager_C.GetActionStateObjectByName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_InputKeyState_C**             Value                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::GetActionStateObjectByName(class FName ActionName, class UBP_InputKeyState_C** Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetActionStateObjectByName");

	Params::BP_InputManager_C_GetActionStateObjectByName Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_InputManager.BP_InputManager_C.GetAllActionNames
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>*                    ActionNames                                            (Parm, OutParm)

void UBP_InputManager_C::GetAllActionNames(TArray<class FName>* ActionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetAllActionNames");

	Params::BP_InputManager_C_GetAllActionNames Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionNames != nullptr)
		*ActionNames = std::move(Parms.ActionNames);
}


// Function BP_InputManager.BP_InputManager_C.GetAllActionNamesFromEnum
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>*                    ActionNames                                            (Parm, OutParm)

void UBP_InputManager_C::GetAllActionNamesFromEnum(TArray<class FName>* ActionNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetAllActionNamesFromEnum");

	Params::BP_InputManager_C_GetAllActionNamesFromEnum Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ActionNames != nullptr)
		*ActionNames = std::move(Parms.ActionNames);
}


// Function BP_InputManager.BP_InputManager_C.GetBaseBindingKey
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EInputAction                            GameAction                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FKey*                            Key                                                    (Parm, OutParm, HasGetValueTypeHash)

void UBP_InputManager_C::GetBaseBindingKey(EInputAction GameAction, struct FKey* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetBaseBindingKey");

	Params::BP_InputManager_C_GetBaseBindingKey Parms{};

	Parms.GameAction = GameAction;

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = std::move(Parms.Key);
}


// Function BP_InputManager.BP_InputManager_C.GetBaseBindingKeyByName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FString&                    InputActionName                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FKey*                            Key                                                    (Parm, OutParm, HasGetValueTypeHash)

void UBP_InputManager_C::GetBaseBindingKeyByName(const class FString& InputActionName, struct FKey* Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetBaseBindingKeyByName");

	Params::BP_InputManager_C_GetBaseBindingKeyByName Parms{};

	Parms.InputActionName = std::move(InputActionName);

	UObject::ProcessEvent(Func, &Parms);

	if (Key != nullptr)
		*Key = std::move(Parms.Key);
}


// Function BP_InputManager.BP_InputManager_C.GetBaseBindingKeyVisualInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EInputAction                            GameAction                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFKeyVisualInfo*                 KeyVisualInfo                                          (Parm, OutParm, HasGetValueTypeHash)

void UBP_InputManager_C::GetBaseBindingKeyVisualInfo(EInputAction GameAction, struct FFKeyVisualInfo* KeyVisualInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetBaseBindingKeyVisualInfo");

	Params::BP_InputManager_C_GetBaseBindingKeyVisualInfo Parms{};

	Parms.GameAction = GameAction;

	UObject::ProcessEvent(Func, &Parms);

	if (KeyVisualInfo != nullptr)
		*KeyVisualInfo = std::move(Parms.KeyVisualInfo);
}


// Function BP_InputManager.BP_InputManager_C.GetCurrentLayer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FFInputLayer*                    Output                                                 (Parm, OutParm, HasGetValueTypeHash)

void UBP_InputManager_C::GetCurrentLayer(struct FFInputLayer* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetCurrentLayer");

	Params::BP_InputManager_C_GetCurrentLayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_InputManager.BP_InputManager_C.GetKeyVisualInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FFKeyVisualInfo*                 KeyVisualInfo                                          (Parm, OutParm, HasGetValueTypeHash)

void UBP_InputManager_C::GetKeyVisualInfo(const struct FKey& Key, struct FFKeyVisualInfo* KeyVisualInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "GetKeyVisualInfo");

	Params::BP_InputManager_C_GetKeyVisualInfo Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (KeyVisualInfo != nullptr)
		*KeyVisualInfo = std::move(Parms.KeyVisualInfo);
}


// Function BP_InputManager.BP_InputManager_C.ProcessTextForInlineInputTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const class FText&                      Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText*                            Output                                                 (Parm, OutParm)

void UBP_InputManager_C::ProcessTextForInlineInputTag(const class FText& Input, class FText* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "ProcessTextForInlineInputTag");

	Params::BP_InputManager_C_ProcessTextForInlineInputTag Parms{};

	Parms.Input = std::move(Input);

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_InputManager.BP_InputManager_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_InputManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InputManager.BP_InputManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "ReceiveTick");

	Params::BP_InputManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.ResetInputActionRestriction
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_InputManager_C::ResetInputActionRestriction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "ResetInputActionRestriction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_InputManager.BP_InputManager_C.SetAllInputBlocked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bLocked_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::SetAllInputBlocked(bool bLocked_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "SetAllInputBlocked");

	Params::BP_InputManager_C_SetAllInputBlocked Parms{};

	Parms.bLocked_0 = bLocked_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.SetInputActionsRestriction
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EInputAction>&                   InputActions                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    AllowNavigation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::SetInputActionsRestriction(TArray<EInputAction>& InputActions, bool AllowNavigation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "SetInputActionsRestriction");

	Params::BP_InputManager_C_SetInputActionsRestriction Parms{};

	Parms.InputActions = std::move(InputActions);
	Parms.AllowNavigation = AllowNavigation;

	UObject::ProcessEvent(Func, &Parms);

	InputActions = std::move(Parms.InputActions);
}


// Function BP_InputManager.BP_InputManager_C.SetInputActionsRestriction_NavigationOnly
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowConfirm                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::SetInputActionsRestriction_NavigationOnly(bool AllowConfirm)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "SetInputActionsRestriction_NavigationOnly");

	Params::BP_InputManager_C_SetInputActionsRestriction_NavigationOnly Parms{};

	Parms.AllowConfirm = AllowConfirm;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.UnbindToActionPressed
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::UnbindToActionPressed(EInputAction Action, const TDelegate<void()>& Event, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "UnbindToActionPressed");

	Params::BP_InputManager_C_UnbindToActionPressed Parms{};

	Parms.Action = Action;
	Parms.Event = Event;
	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.UnbindToActionPressedByObject
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::UnbindToActionPressedByObject(EInputAction Action, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "UnbindToActionPressedByObject");

	Params::BP_InputManager_C_UnbindToActionPressedByObject Parms{};

	Parms.Action = Action;
	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.UnbindToActionReleasedByEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::UnbindToActionReleasedByEvent(EInputAction Action, const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "UnbindToActionReleasedByEvent");

	Params::BP_InputManager_C_UnbindToActionReleasedByEvent Parms{};

	Parms.Action = Action;
	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.UnbindToActionReleasedByObjectReal
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            Action                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_InputManager_C::UnbindToActionReleasedByObjectReal(EInputAction Action, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "UnbindToActionReleasedByObjectReal");

	Params::BP_InputManager_C_UnbindToActionReleasedByObjectReal Parms{};

	Parms.Action = Action;
	Parms.Object = Object;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.UpdateLayerForKey
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsKeyDown                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FFInputLayer&              Layer                                                  (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_InputManager_C::UpdateLayerForKey(EInputAction InputAction, bool IsKeyDown, double AxisValue, const struct FKey& Key, const struct FFInputLayer& Layer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "UpdateLayerForKey");

	Params::BP_InputManager_C_UpdateLayerForKey Parms{};

	Parms.InputAction = InputAction;
	Parms.IsKeyDown = IsKeyDown;
	Parms.AxisValue = AxisValue;
	Parms.Key = std::move(Key);
	Parms.Layer = std::move(Layer);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_InputManager.BP_InputManager_C.UpdateLayersForKey
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInputAction                            InputAction                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsKeyDown                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FKey&                      Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_InputManager_C::UpdateLayersForKey(EInputAction InputAction, bool IsKeyDown, double AxisValue, const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_InputManager_C", "UpdateLayersForKey");

	Params::BP_InputManager_C_UpdateLayersForKey Parms{};

	Parms.InputAction = InputAction;
	Parms.IsKeyDown = IsKeyDown;
	Parms.AxisValue = AxisValue;
	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}

}

