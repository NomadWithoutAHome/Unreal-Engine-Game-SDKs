#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Settings_InputOptionsList

#include "Basic.hpp"

#include "WBP_Settings_InputOptionsList_classes.hpp"
#include "WBP_Settings_InputOptionsList_parameters.hpp"


namespace SDK
{

// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.ApplySettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Settings_InputOptionsList_C::ApplySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "ApplySettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.AreMappingsDirty
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsDirty                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::AreMappingsDirty(bool* IsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "AreMappingsDirty");

	Params::WBP_Settings_InputOptionsList_C_AreMappingsDirty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDirty != nullptr)
		*IsDirty = Parms.IsDirty;
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.AreMappingsValid
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::AreMappingsValid(bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "AreMappingsValid");

	Params::WBP_Settings_InputOptionsList_C_AreMappingsValid Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.BindOnOptionEntryFocused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void(class UWBP_Settings_OptionEntry_C* Widget)>&Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::BindOnOptionEntryFocused(const TDelegate<void(class UWBP_Settings_OptionEntry_C* Widget)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "BindOnOptionEntryFocused");

	Params::WBP_Settings_InputOptionsList_C_BindOnOptionEntryFocused Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.CheckMappingConflict
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_Settings_MappingOptionEntry_C*MappingEntry                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FMapPlayerKeyArgs&         NewMapping                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_Settings_InputOptionsList_C::CheckMappingConflict(class UWBP_Settings_MappingOptionEntry_C* MappingEntry, const struct FMapPlayerKeyArgs& NewMapping)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "CheckMappingConflict");

	Params::WBP_Settings_InputOptionsList_C_CheckMappingConflict Parms{};

	Parms.MappingEntry = MappingEntry;
	Parms.NewMapping = std::move(NewMapping);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.ExecuteUbergraph_WBP_Settings_InputOptionsList
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::ExecuteUbergraph_WBP_Settings_InputOptionsList(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "ExecuteUbergraph_WBP_Settings_InputOptionsList");

	Params::WBP_Settings_InputOptionsList_C_ExecuteUbergraph_WBP_Settings_InputOptionsList Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.IsKeyConflictingWithCurrentMappings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMapPlayerKeyArgs&         NewMapPlayerKeyArgs                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class UWBP_Settings_MappingOptionEntry_C*&MappingEntry                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsConflicting                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::IsKeyConflictingWithCurrentMappings(const struct FMapPlayerKeyArgs& NewMapPlayerKeyArgs, const class UWBP_Settings_MappingOptionEntry_C*& MappingEntry, bool* IsConflicting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "IsKeyConflictingWithCurrentMappings");

	Params::WBP_Settings_InputOptionsList_C_IsKeyConflictingWithCurrentMappings Parms{};

	Parms.NewMapPlayerKeyArgs = std::move(NewMapPlayerKeyArgs);
	Parms.MappingEntry = MappingEntry;

	UObject::ProcessEvent(Func, &Parms);

	if (IsConflicting != nullptr)
		*IsConflicting = Parms.IsConflicting;
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.IsKeyConflictingWithNewMappings
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FMapPlayerKeyArgs&         NewMapPlayerKeyArgs                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UWBP_Settings_MappingOptionEntry_C*MappingEntry                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsConflicting                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::IsKeyConflictingWithNewMappings(const struct FMapPlayerKeyArgs& NewMapPlayerKeyArgs, class UWBP_Settings_MappingOptionEntry_C* MappingEntry, bool* IsConflicting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "IsKeyConflictingWithNewMappings");

	Params::WBP_Settings_InputOptionsList_C_IsKeyConflictingWithNewMappings Parms{};

	Parms.NewMapPlayerKeyArgs = std::move(NewMapPlayerKeyArgs);
	Parms.MappingEntry = MappingEntry;

	UObject::ProcessEvent(Func, &Parms);

	if (IsConflicting != nullptr)
		*IsConflicting = Parms.IsConflicting;
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.LoadUserSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Settings_InputOptionsList_C::LoadUserSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "LoadUserSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.OnMappingEntryFocused
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UWBP_Settings_MappingOptionEntry_C*Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::OnMappingEntryFocused(class UWBP_Settings_MappingOptionEntry_C* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "OnMappingEntryFocused");

	Params::WBP_Settings_InputOptionsList_C_OnMappingEntryFocused Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.OnUserResponseToInputConflict
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EModalUIResponse                        InUserResponse                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::OnUserResponseToInputConflict(EModalUIResponse InUserResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "OnUserResponseToInputConflict");

	Params::WBP_Settings_InputOptionsList_C_OnUserResponseToInputConflict Parms{};

	Parms.InUserResponse = InUserResponse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.ResetToDefault
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Settings_InputOptionsList_C::ResetToDefault()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "ResetToDefault");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.RevertSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UWBP_Settings_InputOptionsList_C::RevertSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "RevertSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.StartIgnoreConflicts
// (BlueprintCallable, BlueprintEvent)

void UWBP_Settings_InputOptionsList_C::StartIgnoreConflicts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "StartIgnoreConflicts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.UnbindOnOptionEntryFocused
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void(class UWBP_Settings_OptionEntry_C* Widget)>&Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UWBP_Settings_InputOptionsList_C::UnbindOnOptionEntryFocused(const TDelegate<void(class UWBP_Settings_OptionEntry_C* Widget)>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "UnbindOnOptionEntryFocused");

	Params::WBP_Settings_InputOptionsList_C_UnbindOnOptionEntryFocused Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Settings_InputOptionsList.WBP_Settings_InputOptionsList_C.BP_GetDesiredFocusTarget
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UWidget*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UWidget* UWBP_Settings_InputOptionsList_C::BP_GetDesiredFocusTarget() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Settings_InputOptionsList_C", "BP_GetDesiredFocusTarget");

	Params::WBP_Settings_InputOptionsList_C_BP_GetDesiredFocusTarget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

