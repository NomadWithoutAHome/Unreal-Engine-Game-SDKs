#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingScenarioReference

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LightingScenarioReference.BP_LightingScenarioReference_C
// 0x00C0 (0x0350 - 0x0290)
class ABP_LightingScenarioReference_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AExponentialHeightFog>   ExponentialFog_Activate;                           // 0x02A0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class ADirectionalLight>       DirectionLight_Activate;                           // 0x02C8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class ASkyLight>               Skylight_Activate;                                 // 0x02F0(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TSoftObjectPtr<class ASkyAtmosphere>          SkyAtmosphere_Activate;                            // 0x0318(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          LightingActiveWhenStartPlaying;                    // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MainLightingScenario;                              // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0342(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_343[0x1];                                      // 0x0343(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChangeSpeedMultiplier;                             // 0x0344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DelayBeforeChangingScenario;                       // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Sequencer_OverrideLightingScenario;                // 0x034C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateLightingScenarioForCinematics();
	void ActivateScenario(const float ChangeSpeedMultiplier_0);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void DeactivateAllScenarios();
	void DeactivatePreviousAtmosphere();
	void DeactiveLightingForCinematic(class ABP_LightingScenarioReference_C* LightingScenarioToActivateAfterCine);
	void DEBUG_ActivateScenario();
	void ExecuteUbergraph_BP_LightingScenarioReference(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ScenarioHide();
	void SetNewAtmosphere();
	void SetSequencer_OverrideLightingScenario(bool NewValue);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LightingScenarioReference_C">();
	}
	static class ABP_LightingScenarioReference_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LightingScenarioReference_C>();
	}
};
static_assert(alignof(ABP_LightingScenarioReference_C) == 0x000008, "Wrong alignment on ABP_LightingScenarioReference_C");
static_assert(sizeof(ABP_LightingScenarioReference_C) == 0x000350, "Wrong size on ABP_LightingScenarioReference_C");
static_assert(offsetof(ABP_LightingScenarioReference_C, UberGraphFrame) == 0x000290, "Member 'ABP_LightingScenarioReference_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, Scene) == 0x000298, "Member 'ABP_LightingScenarioReference_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, ExponentialFog_Activate) == 0x0002A0, "Member 'ABP_LightingScenarioReference_C::ExponentialFog_Activate' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, DirectionLight_Activate) == 0x0002C8, "Member 'ABP_LightingScenarioReference_C::DirectionLight_Activate' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, Skylight_Activate) == 0x0002F0, "Member 'ABP_LightingScenarioReference_C::Skylight_Activate' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, SkyAtmosphere_Activate) == 0x000318, "Member 'ABP_LightingScenarioReference_C::SkyAtmosphere_Activate' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, LightingActiveWhenStartPlaying) == 0x000340, "Member 'ABP_LightingScenarioReference_C::LightingActiveWhenStartPlaying' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, MainLightingScenario) == 0x000341, "Member 'ABP_LightingScenarioReference_C::MainLightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, IsActive) == 0x000342, "Member 'ABP_LightingScenarioReference_C::IsActive' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, ChangeSpeedMultiplier) == 0x000344, "Member 'ABP_LightingScenarioReference_C::ChangeSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, DelayBeforeChangingScenario) == 0x000348, "Member 'ABP_LightingScenarioReference_C::DelayBeforeChangingScenario' has a wrong offset!");
static_assert(offsetof(ABP_LightingScenarioReference_C, Sequencer_OverrideLightingScenario) == 0x00034C, "Member 'ABP_LightingScenarioReference_C::Sequencer_OverrideLightingScenario' has a wrong offset!");

}

