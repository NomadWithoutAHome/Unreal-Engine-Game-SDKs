#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleBuffComponent

#include "Basic.hpp"

#include "SandFall_classes.hpp"
#include "Engine_structs.hpp"
#include "EAPChangeReason_structs.hpp"
#include "E_StanceType_structs.hpp"
#include "E_BuffAndStatusEffectTypes_structs.hpp"
#include "E_PerfectionUpdateType_structs.hpp"
#include "EPerfectionReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleBuffComponent.BP_BattleBuffComponent_C
// 0x0038 (0x0060 - 0x0028)
class UBP_BattleBuffComponent_C final : public UExtendedObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UBP_BattleBuffInstanceWrapper_C*> ActiveBattleBuffs;                                // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAC_jRPG_CharacterBattleStats_C*        OwnerAsCharacterStat;                              // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_BattleBuffInstanceWrapper_C*> StandbyBattleBuffs;                               // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          Safeguard_CanAddNonPassiveBuffs;                   // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ActivateBuff(class UBP_BattleBuffInstance_C*& BuffInstance, class UAC_jRPG_CharacterBattleStats_C*& SourceCharacter, class UBP_BattleBuffInstanceWrapper_C** BuffInstanceWrapper, bool* Success);
	void AddBuff(class UBP_BattleBuffInstanceWrapper_C*& BuffInstanceWrapper, bool* Added);
	void CreateBuffStack(class UClass* BuffClass, int32 Count, int32 TurnDuration, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, TArray<class UBP_BattleBuffInstance_C*>* CreatedInstances);
	void DeactivateOnOwnerKilled();
	void ExecuteUbergraph_BP_BattleBuffComponent(int32 EntryPoint);
	void FindActiveBuffsByInstigator(class UObject* Instigator, class UClass* BuffClass, TArray<class UBP_BattleBuffInstance_C*>* BuffInstances);
	void FindExistingSameBuffs(class UBP_BattleBuffInstance_C* Buff, TArray<class UBP_BattleBuffInstanceWrapper_C*>* ActiveBuffInstanceWrappers);
	void FindWrapper(class UBP_BattleBuffInstance_C*& Buff, class UBP_BattleBuffInstanceWrapper_C** BuffInstanceWrappers);
	int32 GetActiveBuffCounts(class UClass* Buff);
	void GetActiveBuffsByClass(class UClass* BuffClass, TArray<class UBP_BattleBuffInstanceWrapper_C*>* ActiveBuffInstanceWrappers);
	void GetBuffInstancesByType(E_BuffAndStatusEffectTypes Type, TArray<class UBP_BattleBuffInstance_C*>* Array);
	void GetBuffInstancesByTypes(TArray<E_BuffAndStatusEffectTypes>& Type, TArray<class UBP_BattleBuffInstance_C*>* Array);
	void GetOrCreateAggregatorBuff(class UClass* AggregatorBuffClass, class UBP_BattleBuffInstance_AggregatorBase_C** AggregatorInstance);
	void GetStandbyBuffsByClass(class UClass* BuffClass, TArray<class UBP_BattleBuffInstanceWrapper_C*>* StandbyBuffInstanceWrappers);
	void GetStatusEffectBuffInstance(TArray<class UBP_BattleBuffInstance_C*>* Array);
	bool HasBuffOfClass(class UClass* Buff);
	void Init();
	bool IsReadyToAddBuffs();
	void On_Perfection_Changed(int32 CurrentPerfection, int32 PreviousPerfection, E_PerfectionUpdateType PerfectionChangeType, EPerfectionReason PerfectionChangeReason, int32* FinalPerfection);
	void On_Stance_Change(E_StanceType NewStance, E_StanceType previousStance, E_StanceType* NewStance1, E_StanceType* PreviousStance1);
	void OnBattleEnded();
	void OnCharacterHealed(class UBP_BattleHeal_C* Heal);
	void OnCharacterTurnEnd();
	void OnCharacterTurnStart();
	void OnDeathDamagePrevented();
	void OnGradientGaugeChange(class UBP_GradientGaugeChangeEvent_C* GradientChangeEvent);
	void OnOwnerRevived();
	void OnReintegratedToBattle();
	void ProcessAPChange(int32 NewAP, int32 PreviousAP, EAPChangeReason ChangeReason, int32* ProcessedNewAP);
	void ProcessAPChangeEvent(class UBP_BattleEvent_APChange_C* APChange);
	void ProcessAttackElement(class UBP_BattleDamages_C* BattleDamages);
	void ProcessBattleStartEvents(class UBP_DependencyRefCounter_C* DepsRefCount);
	void ProcessDealtDamageCriticalHitChance(class UBP_BattleDamages_C* BattleDamages);
	void ProcessDealtRawDamages(class UBP_BattleDamages_C*& BattleDamages);
	void ProcessFinalDamages(class UBP_BattleDamages_C*& BattleDamages);
	void ProcessPermeate(class UBP_BattleDamages_C* BattleDamages);
	void ProcessReceivedRawDamages(class UBP_BattleDamages_C*& BattleDamages);
	void ProcessRemovedBuffs();
	void RemoveAllBuffsFromFamily(class UClass* BuffFamily);
	void RemoveAllBuffsOfType(E_BuffAndStatusEffectTypes BuffType);
	void RemoveBuffInstance(class UBP_BattleBuffInstance_C* BuffInstance);
	void RemoveBuffStacks(class UClass* Buff, int32 Number_of_stacks_to_remove);
	void RemoveBuffWrapper(class UBP_BattleBuffInstanceWrapper_C* BuffInstanceWrapper, bool* Success);
	void TryConsumeBuffs(class UClass* BuffClass, int32 MinCount, int32 MaxCount, bool IgnoreMaxCount, bool* Success, int32* ConsumedBuffs);
	void TryRemoveBuffStacks(class UClass* Buff, int32 Number_of_stacks_to_remove, int32* ConsumedStacks);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleBuffComponent_C">();
	}
	static class UBP_BattleBuffComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattleBuffComponent_C>();
	}
};
static_assert(alignof(UBP_BattleBuffComponent_C) == 0x000008, "Wrong alignment on UBP_BattleBuffComponent_C");
static_assert(sizeof(UBP_BattleBuffComponent_C) == 0x000060, "Wrong size on UBP_BattleBuffComponent_C");
static_assert(offsetof(UBP_BattleBuffComponent_C, UberGraphFrame) == 0x000028, "Member 'UBP_BattleBuffComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffComponent_C, ActiveBattleBuffs) == 0x000030, "Member 'UBP_BattleBuffComponent_C::ActiveBattleBuffs' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffComponent_C, OwnerAsCharacterStat) == 0x000040, "Member 'UBP_BattleBuffComponent_C::OwnerAsCharacterStat' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffComponent_C, StandbyBattleBuffs) == 0x000048, "Member 'UBP_BattleBuffComponent_C::StandbyBattleBuffs' has a wrong offset!");
static_assert(offsetof(UBP_BattleBuffComponent_C, Safeguard_CanAddNonPassiveBuffs) == 0x000058, "Member 'UBP_BattleBuffComponent_C::Safeguard_CanAddNonPassiveBuffs' has a wrong offset!");

}

