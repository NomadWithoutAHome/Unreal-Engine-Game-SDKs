#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConditionalDataLayersManager

#include "Basic.hpp"

#include "BP_ConditionalDataLayersManager_classes.hpp"
#include "BP_ConditionalDataLayersManager_parameters.hpp"


namespace SDK
{

// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.UnbindCondition
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ConditionalDataLayers&  ConditionalDataLayers_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::UnbindCondition(const struct FS_ConditionalDataLayers& ConditionalDataLayers_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "UnbindCondition");

	Params::BP_ConditionalDataLayersManager_C_UnbindCondition Parms{};

	Parms.ConditionalDataLayers_0 = std::move(ConditionalDataLayers_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.UnbindAllConditions
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ConditionalDataLayersManager_C::UnbindAllConditions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "UnbindAllConditions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.SetDataLayersRuntimeStateForEditor
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UDataLayerAsset*>&         DataLayers                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EDataLayerRuntimeState                  State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::SetDataLayersRuntimeStateForEditor(TArray<class UDataLayerAsset*>& DataLayers, EDataLayerRuntimeState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "SetDataLayersRuntimeStateForEditor");

	Params::BP_ConditionalDataLayersManager_C_SetDataLayersRuntimeStateForEditor Parms{};

	Parms.DataLayers = std::move(DataLayers);
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	DataLayers = std::move(Parms.DataLayers);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.SetDataLayersRuntimeState
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UDataLayerAsset*>&         DataLayers                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FName>&                    DataLayerNames                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EDataLayerRuntimeState                  State                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::SetDataLayersRuntimeState(TArray<class UDataLayerAsset*>& DataLayers, TArray<class FName>& DataLayerNames, EDataLayerRuntimeState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "SetDataLayersRuntimeState");

	Params::BP_ConditionalDataLayersManager_C_SetDataLayersRuntimeState Parms{};

	Parms.DataLayers = std::move(DataLayers);
	Parms.DataLayerNames = std::move(DataLayerNames);
	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);

	DataLayers = std::move(Parms.DataLayers);
	DataLayerNames = std::move(Parms.DataLayerNames);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "ReceiveEndPlay");

	Params::BP_ConditionalDataLayersManager_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_ConditionalDataLayersManager_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.OnGameStateChanged
// (Private, BlueprintCallable, BlueprintEvent)

void ABP_ConditionalDataLayersManager_C::OnGameStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "OnGameStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.OnGameModePreStartPlay
// (BlueprintCallable, BlueprintEvent)

void ABP_ConditionalDataLayersManager_C::OnGameModePreStartPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "OnGameModePreStartPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.OnConditionEvaluatedToTrue
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ConditionalDataLayers&  ConditionalDataLayers_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::OnConditionEvaluatedToTrue(const struct FS_ConditionalDataLayers& ConditionalDataLayers_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "OnConditionEvaluatedToTrue");

	Params::BP_ConditionalDataLayersManager_C_OnConditionEvaluatedToTrue Parms{};

	Parms.ConditionalDataLayers_0 = std::move(ConditionalDataLayers_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.OnConditionEvaluatedToFalse
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ConditionalDataLayers&  ConditionalDataLayers_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::OnConditionEvaluatedToFalse(const struct FS_ConditionalDataLayers& ConditionalDataLayers_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "OnConditionEvaluatedToFalse");

	Params::BP_ConditionalDataLayersManager_C_OnConditionEvaluatedToFalse Parms{};

	Parms.ConditionalDataLayers_0 = std::move(ConditionalDataLayers_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.ForceConditionAtIndex
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::ForceConditionAtIndex(int32 Index_0, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "ForceConditionAtIndex");

	Params::BP_ConditionalDataLayersManager_C_ForceConditionAtIndex Parms{};

	Parms.Index_0 = Index_0;
	Parms.Value = Value;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.ForceCondition
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_ConditionalDataLayersManager_C::ForceCondition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "ForceCondition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.ExecuteUbergraph_BP_ConditionalDataLayersManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::ExecuteUbergraph_BP_ConditionalDataLayersManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "ExecuteUbergraph_BP_ConditionalDataLayersManager");

	Params::BP_ConditionalDataLayersManager_C_ExecuteUbergraph_BP_ConditionalDataLayersManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.EvaluateCondition
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ConditionalDataLayers&  ConditionalDataLayer                                   (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::EvaluateCondition(const struct FS_ConditionalDataLayers& ConditionalDataLayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "EvaluateCondition");

	Params::BP_ConditionalDataLayersManager_C_EvaluateCondition Parms{};

	Parms.ConditionalDataLayer = std::move(ConditionalDataLayer);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.EvaluateAllConditions
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBeginPlay                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::EvaluateAllConditions(bool IsBeginPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "EvaluateAllConditions");

	Params::BP_ConditionalDataLayersManager_C_EvaluateAllConditions Parms{};

	Parms.IsBeginPlay = IsBeginPlay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.CheckForErrors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_ConditionalDataLayersManager_C::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "CheckForErrors");

	Params::BP_ConditionalDataLayersManager_C_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.BindCondition
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_ConditionalDataLayers&  ConditionalDataLayers_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)

void ABP_ConditionalDataLayersManager_C::BindCondition(const struct FS_ConditionalDataLayers& ConditionalDataLayers_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "BindCondition");

	Params::BP_ConditionalDataLayersManager_C_BindCondition Parms{};

	Parms.ConditionalDataLayers_0 = std::move(ConditionalDataLayers_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionalDataLayersManager.BP_ConditionalDataLayersManager_C.BindAllConditions
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_ConditionalDataLayersManager_C::BindAllConditions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionalDataLayersManager_C", "BindAllConditions");

	UObject::ProcessEvent(Func, nullptr);
}

}

