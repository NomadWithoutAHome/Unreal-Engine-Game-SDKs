#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_RotateToSmartObject

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTTask_RotateToSmartObject.BTTask_RotateToSmartObject_C
// 0x0058 (0x0100 - 0x00A8)
class UBTTask_RotateToSmartObject_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        CumulatedDt;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               DestinationRotator;                                // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FBlackboardKeySelector                 KeySelectorSmartObjectClaimHandle;                 // 0x00D0(0x0028)(Edit, BlueprintVisible)
	double                                        RotationSpeed;                                     // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTTask_RotateToSmartObject(int32 EntryPoint);
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTTask_RotateToSmartObject_C">();
	}
	static class UBTTask_RotateToSmartObject_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTTask_RotateToSmartObject_C>();
	}
};
static_assert(alignof(UBTTask_RotateToSmartObject_C) == 0x000008, "Wrong alignment on UBTTask_RotateToSmartObject_C");
static_assert(sizeof(UBTTask_RotateToSmartObject_C) == 0x000100, "Wrong size on UBTTask_RotateToSmartObject_C");
static_assert(offsetof(UBTTask_RotateToSmartObject_C, UberGraphFrame) == 0x0000A8, "Member 'UBTTask_RotateToSmartObject_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTTask_RotateToSmartObject_C, CumulatedDt) == 0x0000B0, "Member 'UBTTask_RotateToSmartObject_C::CumulatedDt' has a wrong offset!");
static_assert(offsetof(UBTTask_RotateToSmartObject_C, DestinationRotator) == 0x0000B8, "Member 'UBTTask_RotateToSmartObject_C::DestinationRotator' has a wrong offset!");
static_assert(offsetof(UBTTask_RotateToSmartObject_C, KeySelectorSmartObjectClaimHandle) == 0x0000D0, "Member 'UBTTask_RotateToSmartObject_C::KeySelectorSmartObjectClaimHandle' has a wrong offset!");
static_assert(offsetof(UBTTask_RotateToSmartObject_C, RotationSpeed) == 0x0000F8, "Member 'UBTTask_RotateToSmartObject_C::RotationSpeed' has a wrong offset!");

}

