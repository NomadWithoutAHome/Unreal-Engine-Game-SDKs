#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BattleCard_EffectBox

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_BattleCard_EffectBox.WBP_BattleCard_EffectBox_C.ExecuteUbergraph_WBP_BattleCard_EffectBox
// 0x0008 (0x0008 - 0x0000)
struct WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox) == 0x000004, "Wrong alignment on WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox");
static_assert(sizeof(WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox) == 0x000008, "Wrong size on WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox, EntryPoint) == 0x000000, "Member 'WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_BattleCard_EffectBox_C_ExecuteUbergraph_WBP_BattleCard_EffectBox::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_BattleCard_EffectBox.WBP_BattleCard_EffectBox_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_BattleCard_EffectBox_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleCard_EffectBox_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_BattleCard_EffectBox_C_PreConstruct");
static_assert(sizeof(WBP_BattleCard_EffectBox_C_PreConstruct) == 0x000001, "Wrong size on WBP_BattleCard_EffectBox_C_PreConstruct");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_BattleCard_EffectBox_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_BattleCard_EffectBox.WBP_BattleCard_EffectBox_C.SetEffectBoxParameters
// 0x0020 (0x0020 - 0x0000)
struct WBP_BattleCard_EffectBox_C_SetEffectBoxParameters final
{
public:
	bool                                          IsOvercharged;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowBackground;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Size;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters) == 0x000008, "Wrong alignment on WBP_BattleCard_EffectBox_C_SetEffectBoxParameters");
static_assert(sizeof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters) == 0x000020, "Wrong size on WBP_BattleCard_EffectBox_C_SetEffectBoxParameters");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, IsOvercharged) == 0x000000, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::IsOvercharged' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, bShowBackground) == 0x000001, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::bShowBackground' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Size) == 0x000008, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Size' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Temp_byte_Variable) == 0x000010, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Temp_bool_Variable) == 0x000011, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Temp_byte_Variable_1) == 0x000012, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Temp_byte_Variable_2) == 0x000013, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Temp_byte_Variable_3) == 0x000014, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, K2Node_Select_Default) == 0x000015, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, Temp_bool_Variable_1) == 0x000016, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, K2Node_Select_Default_1) == 0x000017, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_BattleCard_EffectBox_C_SetEffectBoxParameters, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000018, "Member 'WBP_BattleCard_EffectBox_C_SetEffectBoxParameters::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

}

