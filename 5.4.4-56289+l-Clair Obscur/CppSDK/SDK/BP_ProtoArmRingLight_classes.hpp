#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ProtoArmRingLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ProtoArmRingLight.BP_ProtoArmRingLight_C
// 0x0070 (0x0300 - 0x0290)
class ABP_ProtoArmRingLight_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        Audio;                                             // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Charge_FX;                                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   PointLight;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere1;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere;                                            // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         ArmRingLightTimeline_IntensityTrack_EAD3F8944A2CDF7E16A98F977594FD26; // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ArmRingLightTimeline__Direction_EAD3F8944A2CDF7E16A98F977594FD26; // 0x02D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D5[0x3];                                      // 0x02D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ArmRingLightTimeline;                              // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         IntensityCache;                                    // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SphereMaterial;                                    // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Sound_Idle;                                        // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldLoopChargeSound;                             // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ArmRingLightShutDown();
	void ArmRingLightTimeline__CutLightEvent__EventFunc();
	void ArmRingLightTimeline__FinishedFunc();
	void ArmRingLightTimeline__UpdateFunc();
	void BndEvt__BP_ProtoArmRingLight_Sphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_ProtoArmRingLight_Sphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void CutLightEvent();
	void ExecuteUbergraph_BP_ProtoArmRingLight(int32 EntryPoint);
	void PlayLightChargingSound();
	void PlayTimelineFromStart();
	void ReceiveBeginPlay();
	void StopChargingSound();
	void StopTimeline();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ProtoArmRingLight_C">();
	}
	static class ABP_ProtoArmRingLight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_ProtoArmRingLight_C>();
	}
};
static_assert(alignof(ABP_ProtoArmRingLight_C) == 0x000008, "Wrong alignment on ABP_ProtoArmRingLight_C");
static_assert(sizeof(ABP_ProtoArmRingLight_C) == 0x000300, "Wrong size on ABP_ProtoArmRingLight_C");
static_assert(offsetof(ABP_ProtoArmRingLight_C, UberGraphFrame) == 0x000290, "Member 'ABP_ProtoArmRingLight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, Audio) == 0x000298, "Member 'ABP_ProtoArmRingLight_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, Charge_FX) == 0x0002A0, "Member 'ABP_ProtoArmRingLight_C::Charge_FX' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, Arrow) == 0x0002A8, "Member 'ABP_ProtoArmRingLight_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, PointLight) == 0x0002B0, "Member 'ABP_ProtoArmRingLight_C::PointLight' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, Sphere1) == 0x0002B8, "Member 'ABP_ProtoArmRingLight_C::Sphere1' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, Sphere) == 0x0002C0, "Member 'ABP_ProtoArmRingLight_C::Sphere' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, DefaultSceneRoot) == 0x0002C8, "Member 'ABP_ProtoArmRingLight_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, ArmRingLightTimeline_IntensityTrack_EAD3F8944A2CDF7E16A98F977594FD26) == 0x0002D0, "Member 'ABP_ProtoArmRingLight_C::ArmRingLightTimeline_IntensityTrack_EAD3F8944A2CDF7E16A98F977594FD26' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, ArmRingLightTimeline__Direction_EAD3F8944A2CDF7E16A98F977594FD26) == 0x0002D4, "Member 'ABP_ProtoArmRingLight_C::ArmRingLightTimeline__Direction_EAD3F8944A2CDF7E16A98F977594FD26' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, ArmRingLightTimeline) == 0x0002D8, "Member 'ABP_ProtoArmRingLight_C::ArmRingLightTimeline' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, IntensityCache) == 0x0002E0, "Member 'ABP_ProtoArmRingLight_C::IntensityCache' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, SphereMaterial) == 0x0002E8, "Member 'ABP_ProtoArmRingLight_C::SphereMaterial' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, Sound_Idle) == 0x0002F0, "Member 'ABP_ProtoArmRingLight_C::Sound_Idle' has a wrong offset!");
static_assert(offsetof(ABP_ProtoArmRingLight_C, ShouldLoopChargeSound) == 0x0002F8, "Member 'ABP_ProtoArmRingLight_C::ShouldLoopChargeSound' has a wrong offset!");

}

