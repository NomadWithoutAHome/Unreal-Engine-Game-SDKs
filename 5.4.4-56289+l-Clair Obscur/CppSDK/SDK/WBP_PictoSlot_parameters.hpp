#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PictoSlot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "SlateCore_structs.hpp"
#include "S_jRPG_Item_DynamicData_structs.hpp"


namespace SDK::Params
{

// Function WBP_PictoSlot.WBP_PictoSlot_C.ExecuteUbergraph_WBP_PictoSlot
// 0x0050 (0x0050 - 0x0000)
struct WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInGamepadOrKeyboardNavigationMode_ReturnValue; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_1;       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_2;       // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_3;       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FFocusEvent                            K2Node_Event_InFocusEvent;                         // 0x0038(0x0008)(NoDestructor)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationReverse_ReturnValue_2;       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_4;       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot) == 0x000008, "Wrong alignment on WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot");
static_assert(sizeof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot) == 0x000050, "Wrong size on WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, EntryPoint) == 0x000000, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_IsInGamepadOrKeyboardNavigationMode_ReturnValue) == 0x000004, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_IsInGamepadOrKeyboardNavigationMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_Not_PreBool_ReturnValue) == 0x000005, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationReverse_ReturnValue) == 0x000010, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationReverse_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000018, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationReverse_ReturnValue_1) == 0x000020, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationReverse_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationForward_ReturnValue_2) == 0x000028, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationForward_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationForward_ReturnValue_3) == 0x000030, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationForward_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, K2Node_Event_InFocusEvent) == 0x000038, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::K2Node_Event_InFocusEvent' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationReverse_ReturnValue_2) == 0x000040, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationReverse_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot, CallFunc_PlayAnimationForward_ReturnValue_4) == 0x000048, "Member 'WBP_PictoSlot_C_ExecuteUbergraph_WBP_PictoSlot::CallFunc_PlayAnimationForward_ReturnValue_4' has a wrong offset!");

// Function WBP_PictoSlot.WBP_PictoSlot_C.GetIsEmpty
// 0x0001 (0x0001 - 0x0000)
struct WBP_PictoSlot_C_GetIsEmpty final
{
public:
	bool                                          IsEmpty_0;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoSlot_C_GetIsEmpty) == 0x000001, "Wrong alignment on WBP_PictoSlot_C_GetIsEmpty");
static_assert(sizeof(WBP_PictoSlot_C_GetIsEmpty) == 0x000001, "Wrong size on WBP_PictoSlot_C_GetIsEmpty");
static_assert(offsetof(WBP_PictoSlot_C_GetIsEmpty, IsEmpty_0) == 0x000000, "Member 'WBP_PictoSlot_C_GetIsEmpty::IsEmpty_0' has a wrong offset!");

// Function WBP_PictoSlot.WBP_PictoSlot_C.GetPictoViewItem
// 0x0008 (0x0008 - 0x0000)
struct WBP_PictoSlot_C_GetPictoViewItem final
{
public:
	class UBP_PictoViewItem_C*                    Picto_View_Item_0;                                 // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoSlot_C_GetPictoViewItem) == 0x000008, "Wrong alignment on WBP_PictoSlot_C_GetPictoViewItem");
static_assert(sizeof(WBP_PictoSlot_C_GetPictoViewItem) == 0x000008, "Wrong size on WBP_PictoSlot_C_GetPictoViewItem");
static_assert(offsetof(WBP_PictoSlot_C_GetPictoViewItem, Picto_View_Item_0) == 0x000000, "Member 'WBP_PictoSlot_C_GetPictoViewItem::Picto_View_Item_0' has a wrong offset!");

// Function WBP_PictoSlot.WBP_PictoSlot_C.OnAddedToFocusPath
// 0x0008 (0x0008 - 0x0000)
struct WBP_PictoSlot_C_OnAddedToFocusPath final
{
public:
	struct FFocusEvent                            InFocusEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
};
static_assert(alignof(WBP_PictoSlot_C_OnAddedToFocusPath) == 0x000004, "Wrong alignment on WBP_PictoSlot_C_OnAddedToFocusPath");
static_assert(sizeof(WBP_PictoSlot_C_OnAddedToFocusPath) == 0x000008, "Wrong size on WBP_PictoSlot_C_OnAddedToFocusPath");
static_assert(offsetof(WBP_PictoSlot_C_OnAddedToFocusPath, InFocusEvent) == 0x000000, "Member 'WBP_PictoSlot_C_OnAddedToFocusPath::InFocusEvent' has a wrong offset!");

// Function WBP_PictoSlot.WBP_PictoSlot_C.SetPictoData
// 0x0160 (0x0160 - 0x0000)
struct WBP_PictoSlot_C_SetPictoData final
{
public:
	class UBP_PictoViewItem_C*                    PictoViewItem;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_PictoViewItem_C*                    CallFunc_GetPictoViewItem_Picto_View_Item;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_GetItemDynamicData_ItemDynamicData;       // 0x0020(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoSlot_C_SetPictoData) == 0x000008, "Wrong alignment on WBP_PictoSlot_C_SetPictoData");
static_assert(sizeof(WBP_PictoSlot_C_SetPictoData) == 0x000160, "Wrong size on WBP_PictoSlot_C_SetPictoData");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, PictoViewItem) == 0x000000, "Member 'WBP_PictoSlot_C_SetPictoData::PictoViewItem' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_PictoSlot_C_SetPictoData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, CallFunc_GetPictoViewItem_Picto_View_Item) == 0x000010, "Member 'WBP_PictoSlot_C_SetPictoData::CallFunc_GetPictoViewItem_Picto_View_Item' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'WBP_PictoSlot_C_SetPictoData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, CallFunc_IsValid_ReturnValue_2) == 0x000019, "Member 'WBP_PictoSlot_C_SetPictoData::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, CallFunc_GetItemDynamicData_ItemDynamicData) == 0x000020, "Member 'WBP_PictoSlot_C_SetPictoData::CallFunc_GetItemDynamicData_ItemDynamicData' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_SetPictoData, CallFunc_IsValid_ReturnValue_3) == 0x000158, "Member 'WBP_PictoSlot_C_SetPictoData::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");

// Function WBP_PictoSlot.WBP_PictoSlot_C.ToggleEmptyState
// 0x0100 (0x0100 - 0x0000)
struct WBP_PictoSlot_C_ToggleEmptyState final
{
public:
	bool                                          IsEmpty_0;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayAnimation_0;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable;                              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Temp_struct_Variable_2;                            // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Temp_struct_Variable_3;                            // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0053(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_2;                              // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          Temp_byte_Variable_3;                              // 0x0055(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0058(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x006C(0x0014)()
	bool                                          Temp_bool_Variable_4;                              // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default;                             // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0098(0x0014)()
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              K2Node_Select_Default_2;                           // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_3;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EUMGSequencePlayMode                          K2Node_Select_Default_4;                           // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x6];                                       // 0x00C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default_5;                           // 0x00DC(0x0014)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast;  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderOpacity_InOpacity_ImplicitCast_1; // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoSlot_C_ToggleEmptyState) == 0x000008, "Wrong alignment on WBP_PictoSlot_C_ToggleEmptyState");
static_assert(sizeof(WBP_PictoSlot_C_ToggleEmptyState) == 0x000100, "Wrong size on WBP_PictoSlot_C_ToggleEmptyState");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, IsEmpty_0) == 0x000000, "Member 'WBP_PictoSlot_C_ToggleEmptyState::IsEmpty_0' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, PlayAnimation_0) == 0x000001, "Member 'WBP_PictoSlot_C_ToggleEmptyState::PlayAnimation_0' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_bool_Variable) == 0x000002, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_struct_Variable) == 0x000008, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_struct_Variable_1) == 0x000018, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_bool_Variable_1) == 0x000028, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_struct_Variable_2) == 0x000030, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_struct_Variable_3) == 0x000040, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_bool_Variable_2) == 0x000050, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_byte_Variable) == 0x000051, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_byte_Variable_1) == 0x000052, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_bool_Variable_3) == 0x000053, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_byte_Variable_2) == 0x000054, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_byte_Variable_3) == 0x000055, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_MakeStruct_SlateColor) == 0x000058, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_MakeStruct_SlateColor_1) == 0x00006C, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_bool_Variable_4) == 0x000080, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_Select_Default) == 0x000088, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_Select_Default_1) == 0x000098, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_Select_Default_2) == 0x0000B0, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_Select_Default_3) == 0x0000C0, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_Select_Default_4) == 0x0000C1, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, CallFunc_SelectFloat_ReturnValue) == 0x0000C8, "Member 'WBP_PictoSlot_C_ToggleEmptyState::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, CallFunc_SelectFloat_ReturnValue_1) == 0x0000D0, "Member 'WBP_PictoSlot_C_ToggleEmptyState::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, Temp_bool_Variable_5) == 0x0000D8, "Member 'WBP_PictoSlot_C_ToggleEmptyState::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, K2Node_Select_Default_5) == 0x0000DC, "Member 'WBP_PictoSlot_C_ToggleEmptyState::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, CallFunc_PlayAnimation_ReturnValue) == 0x0000F0, "Member 'WBP_PictoSlot_C_ToggleEmptyState::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast) == 0x0000F8, "Member 'WBP_PictoSlot_C_ToggleEmptyState::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_PictoSlot_C_ToggleEmptyState, CallFunc_SetRenderOpacity_InOpacity_ImplicitCast_1) == 0x0000FC, "Member 'WBP_PictoSlot_C_ToggleEmptyState::CallFunc_SetRenderOpacity_InOpacity_ImplicitCast_1' has a wrong offset!");

}

