#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CommonBoundActionButton

#include "Basic.hpp"

#include "WBP_CommonBoundActionButton_classes.hpp"
#include "WBP_CommonBoundActionButton_parameters.hpp"


namespace SDK
{

// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.SetForbiddenColor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FSlateColor&               ForbiddenColor_0                                       (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_CommonBoundActionButton_C::SetForbiddenColor(const struct FSlateColor& ForbiddenColor_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "SetForbiddenColor");

	Params::WBP_CommonBoundActionButton_C_SetForbiddenColor Parms{};

	Parms.ForbiddenColor_0 = std::move(ForbiddenColor_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.SetText
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText&                            InText                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CommonBoundActionButton_C::SetText(class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "SetText");

	Params::WBP_CommonBoundActionButton_C_SetText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);

	InText = std::move(Parms.InText);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.SetTextOverride
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (BlueprintVisible, BlueprintReadOnly, Parm)

void UWBP_CommonBoundActionButton_C::SetTextOverride(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "SetTextOverride");

	Params::WBP_CommonBoundActionButton_C_SetTextOverride Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.OnUpdateInputAction
// (Event, Protected, BlueprintEvent)

void UWBP_CommonBoundActionButton_C::OnUpdateInputAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "OnUpdateInputAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.PreConstruct
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDesignTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CommonBoundActionButton_C::PreConstruct(bool IsDesignTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "PreConstruct");

	Params::WBP_CommonBoundActionButton_C_PreConstruct Parms{};

	Parms.IsDesignTime = IsDesignTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.FeedbackForbidden
// (BlueprintCallable, BlueprintEvent)

void UWBP_CommonBoundActionButton_C::FeedbackForbidden()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "FeedbackForbidden");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.BP_OnEnabled
// (Event, Protected, BlueprintEvent)

void UWBP_CommonBoundActionButton_C::BP_OnEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "BP_OnEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.BP_OnDisabled
// (Event, Protected, BlueprintEvent)

void UWBP_CommonBoundActionButton_C::BP_OnDisabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "BP_OnDisabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.SetIsVisible
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bIsVisible                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CommonBoundActionButton_C::SetIsVisible(bool bIsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "SetIsVisible");

	Params::WBP_CommonBoundActionButton_C_SetIsVisible Parms{};

	Parms.bIsVisible = bIsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.OnActionTextUpdate
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InActionText                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UWBP_CommonBoundActionButton_C::OnActionTextUpdate(const class FText& InActionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "OnActionTextUpdate");

	Params::WBP_CommonBoundActionButton_C_OnActionTextUpdate Parms{};

	Parms.InActionText = std::move(InActionText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.OnActionProgress
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   HeldPercent                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CommonBoundActionButton_C::OnActionProgress(float HeldPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "OnActionProgress");

	Params::WBP_CommonBoundActionButton_C_OnActionProgress Parms{};

	Parms.HeldPercent = HeldPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.SetIsForbidden
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsForbidden_0                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CommonBoundActionButton_C::SetIsForbidden(bool IsForbidden_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "SetIsForbidden");

	Params::WBP_CommonBoundActionButton_C_SetIsForbidden Parms{};

	Parms.IsForbidden_0 = IsForbidden_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_CommonBoundActionButton.WBP_CommonBoundActionButton_C.ExecuteUbergraph_WBP_CommonBoundActionButton
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_CommonBoundActionButton_C::ExecuteUbergraph_WBP_CommonBoundActionButton(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_CommonBoundActionButton_C", "ExecuteUbergraph_WBP_CommonBoundActionButton");

	Params::WBP_CommonBoundActionButton_C_ExecuteUbergraph_WBP_CommonBoundActionButton Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

