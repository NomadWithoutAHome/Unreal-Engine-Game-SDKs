#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleDamageBuilder

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "EAttackType_structs.hpp"
#include "EDamageReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleDamageBuilder.BP_BattleDamageBuilder_C
// 0x00C8 (0x00F0 - 0x0028)
class UBP_BattleDamageBuilder_C final : public UObject
{
public:
	class UAC_jRPG_CharacterBattleStats_C*        TargetCharacterStats;                              // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        INPUT_CriticalHitDamageMultiplier;                 // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        INPUT_CriticalHitChanceModifier;                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                INPUT_HitLocationOverride;                         // 0x0040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        INPUT_BreakBarMultiplier;                          // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   AttackElement;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AttackPowerMultiplier;                             // 0x0068(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FinalDamageMultiplier;                             // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TScriptInterface<class IIBattleDamageSource_C> DamageSource;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	EDamageReason                                 DamageReason;                                      // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        INPUT_RegularHitChanceModifier;                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          INPUT_UseDefenseAsAttackPower;                     // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugReason;                                       // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        StraightDamage;                                    // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          INPUT_Deathtouch;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   FeedbackReasonText;                                // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           FeedbackReasonColor;                               // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             HitSoundOverride;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreMarkedRemoval;                               // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IgnoreShields;                                     // 0x00E9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForcedCriticalHit;                                 // 0x00EA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BypassModifiers;                                   // 0x00EB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddBreakBarDamageMultiplier(double Multiplier, const class FString& Reason);
	void AddCriticalHitChanceModifier(double Modifier, const class FString& Reason);
	void AddCriticalHitDamageMultiplier(double Multiplier, const class FString& Reason);
	void AddFinalDamageMultiplier(double Multiplier, const class FString& Reason);
	void AddRegularHitChanceModifier(double Multiplier, const class FString& Reason);
	void AddStraightDamageAsMaxHPPercent(double Percent, bool NullifyBaseDamage_0, bool KeepModifiersOnNullify, const class FString& Reason);
	void AddStraightDamageFlat(double FlatValue, bool NullifyBaseDamage_0, bool KeepModifiersOnNullify, const class FString& Reason);
	void DealDamages(bool* HasHit, class UBP_BattleDamages_C** BattleDamages);
	void GetAttackElement(EAttackType* AttackElement_0);
	double GetAttackPowerMultiplier();
	void GetBreakBarMultiplier(double* INPUT_BreakBarMultiplier_0);
	double GetCriticalHitChanceModifier();
	double GetCriticalHitDamageMultiplier();
	void GetDamageReason(EDamageReason* DamageReason_0);
	void GetDamageSource(TScriptInterface<class IIBattleDamageSource_C>* DamageSource_0);
	void GetFeedbackReason(class FText* FeedbackReasonText_0, struct FLinearColor* FeedbackReasonColor_0);
	double GetFinalDamageMultiplier();
	bool GetForcedCriticalHit();
	class USoundBase* GetHitSoundOverride();
	bool GetIgnoreMarkedRemoval();
	bool GetIgnoreShields();
	double GetRegularHitChanceModifier();
	double GetStraightDamage();
	bool HasFeedbackReason();
	bool IsDeathtouch();
	void LoadFromData();
	void NullifyBaseDamage(const class FString& Reason);
	void SetAsDeathtouch();
	void SetFeedbackReason(const class FText& Text, const struct FLinearColor& Color);
	void SetForcedCriticalHit();
	void SetHitSoundOverride(class USoundBase* HitSoundOverride_0);
	void SetIgnoreMarkedRemoval();
	void SetIgnoreShields();
	bool ShouldBypassModifiers();
	void UseDefenseAsAttackPower();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleDamageBuilder_C">();
	}
	static class UBP_BattleDamageBuilder_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattleDamageBuilder_C>();
	}
};
static_assert(alignof(UBP_BattleDamageBuilder_C) == 0x000008, "Wrong alignment on UBP_BattleDamageBuilder_C");
static_assert(sizeof(UBP_BattleDamageBuilder_C) == 0x0000F0, "Wrong size on UBP_BattleDamageBuilder_C");
static_assert(offsetof(UBP_BattleDamageBuilder_C, TargetCharacterStats) == 0x000028, "Member 'UBP_BattleDamageBuilder_C::TargetCharacterStats' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_CriticalHitDamageMultiplier) == 0x000030, "Member 'UBP_BattleDamageBuilder_C::INPUT_CriticalHitDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_CriticalHitChanceModifier) == 0x000038, "Member 'UBP_BattleDamageBuilder_C::INPUT_CriticalHitChanceModifier' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_HitLocationOverride) == 0x000040, "Member 'UBP_BattleDamageBuilder_C::INPUT_HitLocationOverride' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_BreakBarMultiplier) == 0x000058, "Member 'UBP_BattleDamageBuilder_C::INPUT_BreakBarMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, AttackElement) == 0x000060, "Member 'UBP_BattleDamageBuilder_C::AttackElement' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, AttackPowerMultiplier) == 0x000068, "Member 'UBP_BattleDamageBuilder_C::AttackPowerMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, FinalDamageMultiplier) == 0x000070, "Member 'UBP_BattleDamageBuilder_C::FinalDamageMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, DamageSource) == 0x000078, "Member 'UBP_BattleDamageBuilder_C::DamageSource' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, DamageReason) == 0x000088, "Member 'UBP_BattleDamageBuilder_C::DamageReason' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_RegularHitChanceModifier) == 0x000090, "Member 'UBP_BattleDamageBuilder_C::INPUT_RegularHitChanceModifier' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_UseDefenseAsAttackPower) == 0x000098, "Member 'UBP_BattleDamageBuilder_C::INPUT_UseDefenseAsAttackPower' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, DebugReason) == 0x0000A0, "Member 'UBP_BattleDamageBuilder_C::DebugReason' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, StraightDamage) == 0x0000B0, "Member 'UBP_BattleDamageBuilder_C::StraightDamage' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, INPUT_Deathtouch) == 0x0000B8, "Member 'UBP_BattleDamageBuilder_C::INPUT_Deathtouch' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, FeedbackReasonText) == 0x0000C0, "Member 'UBP_BattleDamageBuilder_C::FeedbackReasonText' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, FeedbackReasonColor) == 0x0000D0, "Member 'UBP_BattleDamageBuilder_C::FeedbackReasonColor' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, HitSoundOverride) == 0x0000E0, "Member 'UBP_BattleDamageBuilder_C::HitSoundOverride' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, IgnoreMarkedRemoval) == 0x0000E8, "Member 'UBP_BattleDamageBuilder_C::IgnoreMarkedRemoval' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, IgnoreShields) == 0x0000E9, "Member 'UBP_BattleDamageBuilder_C::IgnoreShields' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, ForcedCriticalHit) == 0x0000EA, "Member 'UBP_BattleDamageBuilder_C::ForcedCriticalHit' has a wrong offset!");
static_assert(offsetof(UBP_BattleDamageBuilder_C, BypassModifiers) == 0x0000EB, "Member 'UBP_BattleDamageBuilder_C::BypassModifiers' has a wrong offset!");

}

