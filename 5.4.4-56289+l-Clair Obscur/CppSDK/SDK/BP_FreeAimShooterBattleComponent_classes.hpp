#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeAimShooterBattleComponent

#include "Basic.hpp"

#include "EFreeAimType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EFreeAimBodyPartType_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EAttackType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FreeAimShooterBattleComponent.BP_FreeAimShooterBattleComponent_C
// 0x0108 (0x01A8 - 0x00A0)
class UBP_FreeAimShooterBattleComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         ShotsLeft;                                         // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ShotsFired;                                        // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TimeLeft;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAiming;                                          // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFreeAimEnabled;                                  // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(TArray<class ABP_jRPG_Character_Battle_Base_C*>& AllHitCharacters, EFreeAimType FreeAimType)> OnFreeAimEnded; // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnFreeAimCancelled;                                // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* HitCharacter, EFreeAimBodyPartType BodyPartType, class UBP_FreeAimTargetPart_C* TargetBodyPartBP)> OnFreeAimHit_Character_Skill; // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	EFreeAimType                                  CurrentFreeAimType;                                // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        SpawnLocationComponent;                            // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SpawnRotationComponent;                            // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, Deprecated, NoDestructor, HasGetValueTypeHash)
	struct FComponentReference                    CompRef;                                           // 0x0118(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* Character, EFreeAimBodyPartType BodyPart, const struct FHitResult& HitResult, class UBP_FreeAimTargetPart_C* TargetBodyPartBP)> OnFreeAimHit_Character_Regular; // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              ShootFreeAimProjectile;                            // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsEnding;                                          // 0x0160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AimingRotation;                                    // 0x0168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor)
	class FName                                   BoneProjectileSpawnLocation;                       // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActiveHandComponent;                               // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FreeAimProjectile_Base_C*           NextProjectileActor;                               // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 ProjectileClass;                                   // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsShootingProjectile;                              // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreBlocked;                                        // 0x01A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BeginPreBlock();
	void OnProjectileFiringFinished();
	bool CanCancelFreeAim();
	void SetShotsLeft(int32 ShotsLeft_0);
	bool HasUnlimitedShots();
	bool HasShotsLeft();
	void FireFreeAimProjectile();
	void PrepareNextFreeAimProjectile(class ABP_FreeAimProjectile_Base_C** CreatedProjectileActor);
	bool HasFreeAimTimeExpired();
	void Internal_DisableFreeAim();
	void CancelRegularFreeAim();
	void EndFreeAim();
	void EnableFreeAim(EFreeAimType FreeAimType, int32 AmmoCount, double TimeLimit, class UClass* ProjectileClass_0);
	void OnFreeAimShootAction();
	void ReceiveTick(float DeltaSeconds);
	void BindFreeAimProjectile(class ABP_FreeAimProjectile_Base_C* Projectile);
	void OnFreeAimProjectileHit(class ABP_jRPG_Character_Battle_Base_C* Character, EFreeAimBodyPartType BodyPart, const struct FHitResult& HitResult, class UBP_FreeAimTargetPart_C* TargetBodyPartBP);
	void UnbindFreeAimEvents();
	void UpdateAimingLocation(const struct FVector& WorldAimLocation);
	void ExecuteUbergraph_BP_FreeAimShooterBattleComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FreeAimShooterBattleComponent_C">();
	}
	static class UBP_FreeAimShooterBattleComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FreeAimShooterBattleComponent_C>();
	}
};
static_assert(alignof(UBP_FreeAimShooterBattleComponent_C) == 0x000008, "Wrong alignment on UBP_FreeAimShooterBattleComponent_C");
static_assert(sizeof(UBP_FreeAimShooterBattleComponent_C) == 0x0001A8, "Wrong size on UBP_FreeAimShooterBattleComponent_C");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_FreeAimShooterBattleComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, ShotsLeft) == 0x0000A8, "Member 'UBP_FreeAimShooterBattleComponent_C::ShotsLeft' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, ShotsFired) == 0x0000AC, "Member 'UBP_FreeAimShooterBattleComponent_C::ShotsFired' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, TimeLeft) == 0x0000B0, "Member 'UBP_FreeAimShooterBattleComponent_C::TimeLeft' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, IsAiming) == 0x0000B8, "Member 'UBP_FreeAimShooterBattleComponent_C::IsAiming' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, OnFreeAimEnabled) == 0x0000C0, "Member 'UBP_FreeAimShooterBattleComponent_C::OnFreeAimEnabled' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, OnFreeAimEnded) == 0x0000D0, "Member 'UBP_FreeAimShooterBattleComponent_C::OnFreeAimEnded' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, OnFreeAimCancelled) == 0x0000E0, "Member 'UBP_FreeAimShooterBattleComponent_C::OnFreeAimCancelled' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, OnFreeAimHit_Character_Skill) == 0x0000F0, "Member 'UBP_FreeAimShooterBattleComponent_C::OnFreeAimHit_Character_Skill' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, CurrentFreeAimType) == 0x000100, "Member 'UBP_FreeAimShooterBattleComponent_C::CurrentFreeAimType' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, SpawnLocationComponent) == 0x000108, "Member 'UBP_FreeAimShooterBattleComponent_C::SpawnLocationComponent' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, SpawnRotationComponent) == 0x000110, "Member 'UBP_FreeAimShooterBattleComponent_C::SpawnRotationComponent' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, CompRef) == 0x000118, "Member 'UBP_FreeAimShooterBattleComponent_C::CompRef' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, OnFreeAimHit_Character_Regular) == 0x000140, "Member 'UBP_FreeAimShooterBattleComponent_C::OnFreeAimHit_Character_Regular' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, ShootFreeAimProjectile) == 0x000150, "Member 'UBP_FreeAimShooterBattleComponent_C::ShootFreeAimProjectile' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, IsEnding) == 0x000160, "Member 'UBP_FreeAimShooterBattleComponent_C::IsEnding' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, AimingRotation) == 0x000168, "Member 'UBP_FreeAimShooterBattleComponent_C::AimingRotation' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, BoneProjectileSpawnLocation) == 0x000180, "Member 'UBP_FreeAimShooterBattleComponent_C::BoneProjectileSpawnLocation' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, ActiveHandComponent) == 0x000188, "Member 'UBP_FreeAimShooterBattleComponent_C::ActiveHandComponent' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, NextProjectileActor) == 0x000190, "Member 'UBP_FreeAimShooterBattleComponent_C::NextProjectileActor' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, ProjectileClass) == 0x000198, "Member 'UBP_FreeAimShooterBattleComponent_C::ProjectileClass' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, IsShootingProjectile) == 0x0001A0, "Member 'UBP_FreeAimShooterBattleComponent_C::IsShootingProjectile' has a wrong offset!");
static_assert(offsetof(UBP_FreeAimShooterBattleComponent_C, PreBlocked) == 0x0001A1, "Member 'UBP_FreeAimShooterBattleComponent_C::PreBlocked' has a wrong offset!");

}

