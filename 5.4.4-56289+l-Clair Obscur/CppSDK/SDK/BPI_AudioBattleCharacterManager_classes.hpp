#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_AudioBattleCharacterManager

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "EOnoType_structs.hpp"
#include "EBattleHitBy_structs.hpp"
#include "EBattleCommonSFX_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "EFootstepsType_structs.hpp"
#include "EUiBattleType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPI_AudioBattleCharacterManager.BPI_AudioBattleCharacterManager_C
// 0x0000 (0x0000 - 0x0000)
class IBPI_AudioBattleCharacterManager_C final
{
public:
	void Activate_ControlBusMix(class USoundControlBusMix* Activate_ControlBusMix_0);
	void Battle_Stop_AC_SFX_01();
	void Deactivate_ControlBusMix(class USoundControlBusMix* Deactivate_ControlBusMix_0);
	void PlayBattleCommonSFX(EBattleCommonSFX Battle_Common_SFX, bool ShouldAttachToComponent_);
	void PlayBattleFoley(class UMetaSoundSource* BattleFoley, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleFootstepEvent(EFootstepsType FootstepType, const struct FVector& Location, EPhysicalSurface SurfaceType, bool ShouldAttachToComponent_);
	void PlayBattleOno(EOnoType OnoType);
	void PlayBattleSFXEvent(class UMetaSoundSource* BattleSFX, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleSoundProto(class USoundBase* BattlePlaceholder);
	void PlayBattleUi(EUiBattleType UI_Battle_Type, bool ShouldAttachToComponent_);
	void PlayBattleVocalEvent(class UMetaSoundSource* BattleVocal, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleWeaponLeft(class UMetaSoundSource* BattleWeaponLeft, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleWeaponRight(class UMetaSoundSource* BattleWeaponRight, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayDeathCommon(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayDeathCommon_Bodyfall(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayHitBy_CallByBP(EBattleHitBy Hit_By_CallByBP);
	void PlayHitByCommonEvent(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayHitByEvent(class UMetaSoundSource* BattleHitBy, bool ShouldAttachToComponent_);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPI_AudioBattleCharacterManager_C">();
	}
	static class IBPI_AudioBattleCharacterManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBPI_AudioBattleCharacterManager_C>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IBPI_AudioBattleCharacterManager_C) == 0x000001, "Wrong alignment on IBPI_AudioBattleCharacterManager_C");
static_assert(sizeof(IBPI_AudioBattleCharacterManager_C) == 0x000001, "Wrong size on IBPI_AudioBattleCharacterManager_C");

}

