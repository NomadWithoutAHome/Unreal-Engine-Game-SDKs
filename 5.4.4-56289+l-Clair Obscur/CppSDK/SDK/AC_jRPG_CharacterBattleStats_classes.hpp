#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_CharacterBattleStats

#include "Basic.hpp"

#include "S_jRPG_Item_StaticData_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_jRPG_OverdriveSource_structs.hpp"
#include "StatMultiplier_structs.hpp"
#include "E_jRPG_ActionType_structs.hpp"
#include "EElementalAffinity_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_jRPG_ItemType_structs.hpp"
#include "FCharacterStats_structs.hpp"
#include "FEquipmentSlot_structs.hpp"
#include "ECharacterTeamSelector_structs.hpp"
#include "SandFall_structs.hpp"
#include "FPassiveEffect_structs.hpp"
#include "EAttackType_structs.hpp"
#include "S_ResurrectParameters_structs.hpp"
#include "EDamageReason_structs.hpp"
#include "E_BreakStunReason_structs.hpp"
#include "ERuntimeBattleStatType_structs.hpp"
#include "EBuffApplicationProbability_structs.hpp"
#include "EAPChangeReason_structs.hpp"
#include "EHealReason_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_jRPG_CharacterBattleStats.AC_jRPG_CharacterBattleStats_C
// 0x0708 (0x07A8 - 0x00A0)
class UAC_jRPG_CharacterBattleStats_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FName                                   CharacterHardcodedName;                            // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             CharacterBattleIcon;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FText                                   CharacterDisplayName;                              // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_jRPG_StatType, double>                 CharacterBaseStats;                                // 0x00C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, AdvancedDisplay)
	TMap<E_jRPG_StatType, double>                 CharacterCurrentStats;                             // 0x0118(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance, AdvancedDisplay)
	double                                        CurrentHP;                                         // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	int32                                         CurrentShieldPoints;                               // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurrentAP;                                         // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        CurrentInitiative;                                 // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          Defending;                                         // 0x0188(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_BattleManager_C*               BattleManagerReference;                            // 0x0190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   GameInstanceReference;                             // 0x0198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	E_jRPG_ActionType                             SelectedActionType;                                // 0x01A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A1[0x3];                                      // 0x01A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SelectedSecondaryActionName;                       // 0x01A4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_jRPG_Character_Battle_Base_C*> TargetedCharacters;                              // 0x01B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	double                                        CurrentPower;                                      // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	TMap<E_jRPG_ItemType, struct FS_jRPG_Item_StaticData> EquipmentLegacy;                           // 0x01C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        BuffPower;                                         // 0x0218(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OriginalPower;                                     // 0x0220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BattleBuffComponent_C*              BattleBuffComponent;                               // 0x0228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<struct FGuid, struct FStatMultiplier>    CharacterStatMultipliers;                          // 0x0230(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class FName, int32>                      SkillsLearnt;                                      // 0x0280(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	double                                        CurrentOverdrive;                                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FS_jRPG_OverdriveSource                OverdriveSources;                                  // 0x02D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SimulatedDamage_;                                  // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x3];                                      // 0x02E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TurnSkipRefCount;                                  // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UBP_BattleBuffInstance_C* BuffInstance)> OnBuffAdded;        // 0x02F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UBP_BattleBuffInstance_C* BuffInstance)> OnBuffRemoved;      // 0x0300(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(double NewHP, double PreviousHP)> OnHPChanged;                     // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(int32 CurrentValue, int32 PreviousValue)> OnShieldPointsChanged;   // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnCharacterInitialized;                            // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_HUD_Battle_CharacterPortrait_C*    CharacterBattleSlotWidget;                         // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          HasReceivedHitDuringCurrentSkill;                  // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasParriedAllHitsDuringCurrentSkill;               // 0x0349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34A[0x6];                                      // 0x034A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ActiveChecks;                                      // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   Check_CanRecoverHP;                                // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Check_IsAlive;                                     // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Check_IsMaxedHP;                                   // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Check_CanResurrect;                                // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_BattleCheckContext_C*               TargetingCheckContext;                             // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_BattleCheckContext_C*               BattleActionCheckContext;                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 NewAP, int32 PreviousAP, class UAC_jRPG_CharacterBattleStats_C* CharacterStats)> OnAPChanged; // 0x0390(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         APDefendCost;                                      // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APDodgeCost;                                       // 0x03A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APParryCost;                                       // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APNewTurnGain;                                     // 0x03AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APGainParry;                                       // 0x03B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APGainAttack;                                      // 0x03B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFCharacterStats                       CharacterStats;                                    // 0x03B8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         APTurnStartBonus;                                  // 0x03E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UBP_BattleEvent_APChange_C* APChangeEvent)> OnAPChangedEvent; // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDeath;                                           // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         DefenseLockRefCount;                               // 0x0410(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStun;                                            // 0x0414(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FFEquipmentSlot, struct FS_jRPG_Item_StaticData> Equipment;                          // 0x0418(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, ContainsInstancedReference)
	int64                                         StunBreakBarCurrent;                               // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         StunBreakBarMax;                                   // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounter                   BreakDamageBlockerRefCount;                        // 0x0478(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          HasEngagementBonus;                                // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UBP_BattleBuffInstance_C*, struct FFPassiveEffect> BuffToPassiveMap;                  // 0x04A0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UBP_BattleBuffInstance_C*, class FName> BuffToPassiveIDsMap;                          // 0x04F0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsBoss;                                            // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounter                   PreventDeathRefCount;                              // 0x0548(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsCurrentAttackUndodgeable;                        // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurrentAttackUnblockable;                        // 0x0569(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurrentAttackGradient;                           // 0x056A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurrentAttackJumpable;                           // 0x056B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_56C[0x4];                                      // 0x056C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AutomaticCounterSkill;                             // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_DataAsset_Skill_C*>          Skills;                                            // 0x0578(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<class UBP_DataAsset_Skill_C*, class UBP_SkillState_C*> SkillStates;                         // 0x0588(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	bool                                          GradientAttackPpIsOn;                              // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFleeing;                                         // 0x05D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5DA[0x6];                                      // 0x05DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_CharacterBattleStats_C*        PuppetedBy;                                        // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_SkillDataComponentScript_C*> BattleStartEvent_ToProcess_SkillDataComponent;     // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UBP_DependencyRefCounter_C*             BattleStartNotifyDependencies;                     // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounter                   DodgeLock;                                         // 0x0600(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UBP_BattleDamages_C* BattleDamages)> OnDamageReceived;       // 0x0620(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsPerformingLastStand;                             // 0x0630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldInterceptAllTeamAttacks;                     // 0x0631(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_632[0x6];                                      // 0x0632(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAC_jRPG_CharacterBattleStats_C*> CharactersToProtectWithInterception;              // 0x0638(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UAC_jRPG_CharacterBattleStats_C*        CurrentInterceptedCharacter;                       // 0x0648(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounter                   DamageLimitUnlockRefCount;                         // 0x0650(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	EAttackType                                   BaseDamageType;                                    // 0x0670(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   FreeAimDamageType;                                 // 0x0671(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_672[0x6];                                      // 0x0672(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_ResurrectParameters                 NextResurrectParameters;                           // 0x0678(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UAC_jRPG_CharacterBattleStats_C* SelfCharacter, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, int32 PreviousValue)> OnBreakDamageReceived; // 0x0690(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UAC_jRPG_CharacterBattleStats_C* SelfCharacter)> OnBreakBarStun; // 0x06A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UAC_jRPG_CharacterBattleStats_C* Character, class FName ShardID, class FName ConsumableID)> OnConsumableActionEffect; // 0x06B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UObject* CharacterStats)> OnDeathDamagePrevented;            // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsFlying;                                          // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D1[0x7];                                      // 0x06D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounter                   ForceAutoAttackRefCount;                           // 0x06D8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(int32 Amount, class UBP_BattleDamages_C* BattleDamages)> OnDamageAbsorbed; // 0x06F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ABP_Battle_SkillScript_C*               ForcedSkillOnNextTurn;                             // 0x0708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounter                   ParryLock;                                         // 0x0710(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UBP_SkillState_C* SkillState)> OnSkillPreExecution;          // 0x0730(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSF_ModifierStackWrapper               DodgeWindowModifierStack;                          // 0x0740(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference)
	struct FSF_ModifierStackWrapper               ParryWindowModifierStack;                          // 0x0748(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference)
	TMulticastInlineDelegate<void()>              OnPerfectDodge;                                    // 0x0750(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	ETextGender                                   GenderTag;                                         // 0x0760(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsPreparedForBattle;                              // 0x0761(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDeathQueuedForTurnEnd;                          // 0x0762(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_763[0x5];                                      // 0x0763(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAction_AddBuff_C*>              NestedAddBuffActionStack;                          // 0x0768(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounter                   SilenceRefCounts;                                  // 0x0778(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnSkillStatesInitialized;                          // 0x0798(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void GetDamageSourceCharacter(class UAC_jRPG_CharacterBattleStats_C** CharacterStats_0);
	void GetDamageSourceType(EDamageReason* DamageSourceType);
	void NotifySkillStatesAvailable();
	bool CanCounterAttackCurrentEnemySkill();
	bool IsDeathQueuedForTurnEnd();
	void ClearSkillStates();
	void SetDead_Internal();
	bool IsPreparedForBattle();
	ETextGender GetGenderTag();
	void TryDodgeHitFromCharacter(class UAC_jRPG_CharacterBattleStats_C* AttackingCharacter, bool* Successful, bool* IsPerfectDodge);
	void TryParryHitFromCharacter(class UAC_jRPG_CharacterBattleStats_C* AttackingCharacter, bool* Successful);
	void GetParryWindowModifier(class UModifierStack_Float** Stack);
	void RemoveParryWindowModifier(struct FSF_ModifierStackEntryHandle& OutModifierHandle);
	void AddParryWindowModifier(double Percent, struct FSF_ModifierStackEntryHandle& OutModifierHandle, const class FString& DebugName);
	void GetDodgeWindowModifier(class UModifierStack_Float** Stack);
	void RemoveDodgeWindowModifier(struct FSF_ModifierStackEntryHandle& OutModifierHandle);
	void AddDodgeWindowModifier(double Percent, struct FSF_ModifierStackEntryHandle& OutModifierHandle, const class FString& DebugName);
	void RemoveParryLock(struct FSF_ReferenceCounterHandle& LockHandle);
	void AddParryLock(struct FSF_ReferenceCounterHandle& LockHandle, const class FString& DebugReason);
	bool IsParryLocked();
	class ABP_Battle_SkillScript_C* GetCurrentSkillScript();
	bool IsOfArchetype(TSoftObjectPtr<class UBP_DataAsset_EnemyBattleArchetype_C> Archetype);
	void GetArchetype(class UBP_DataAsset_EnemyBattleArchetype_C** Archetype);
	void ResetCurrentParryFlags();
	void ResetCurrentAttackTypeFlags();
	class ABP_Battle_SkillScript_C* GetForcedSkillOnNextTurn();
	void TryProcessForcedSkill(bool* PreventPlayerChoice);
	void ForceSkillOnNextTurn(class ABP_Battle_SkillScript_C* SkillScript);
	bool IsSameCharacterStats(class UAC_jRPG_CharacterBattleStats_C* CharacterStats_0);
	void TryPerformBreakStun(class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, E_BreakStunReason Reason, bool* Success);
	bool CanPerformBreakStun();
	void PerformBreakStun(class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, E_BreakStunReason Reason);
	void SetIsCharacterFlying(bool IsFlying_0);
	bool CanPerformAction();
	bool HasForcedAutoAttack();
	void RemoveForcedAutoAttack(struct FSF_ReferenceCounterHandle& ReferenceHandle);
	void AddForcedAutoAttack(struct FSF_ReferenceCounterHandle& ReferenceHandle, const class FString& DebugName);
	bool IsFlyingCharacter();
	bool IsDead();
	void GetCharacterData(class UBP_CharacterData_C** CharacterData);
	bool IsInTeam(ECharacterTeamSelector Team);
	void SetCurrentBreakBarDamage(int64 NewValue, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, const class FString& Reason);
	class UClass* GetStunBuffClass();
	void SetBreakBarDamagePercentage(double Percentage, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, const class FString& Reason);
	void AddBreakBarDamagePercentage(double Percentage, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, const class FString& Reason);
	void AddBreakBarDamage(int64 DamageValue, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, const class FString& Reason);
	double GetCurrentBreakBarPercent();
	void InitBreakBar(int32 BreakBarHPPercentage);
	void HasPendingResurrect(bool* Enabled);
	void ResurrectInternal();
	EAttackType GetFreeAimDamageType();
	EAttackType GetBaseDamageType();
	void StopInterceptingAttacksAgainstCharacter(class UAC_jRPG_CharacterBattleStats_C* CharacterStats_0);
	void StartInterceptingAttacksAgainstCharacter(class UAC_jRPG_CharacterBattleStats_C* CharacterStats_0);
	bool CanInterceptAttack(class UAC_jRPG_CharacterBattleStats_C* TargetedCharacter, class UAC_jRPG_CharacterBattleStats_C* AttackerCharacter);
	void OnBattleEnded();
	bool IsDodgeLockActive();
	void RemoveDodgeLock(struct FSF_ReferenceCounterHandle& LockHandle);
	void AddDodgeLock(struct FSF_ReferenceCounterHandle& LockHandle, const class FString& DebugReason);
	void GetTeam(ECharacterTeamSelector* Team);
	void ReceiveDamageFromObject(double Straight_Damage__ignores_calculation_, class UBP_BattleDamageBuilder_C* DamageBuilder, double* DamageDealt, bool* HasHit, bool* DodgeSuccess, bool* ParrySuccess, class UBP_BattleDamages_C** BattleDamages);
	bool IsSkillOvercharged(class UBP_DataAsset_Skill_C* Skill);
	void GetSkillScriptByTurnStartEventCriteria(TArray<class UBP_SkillDataComponentScript_C*>* HasStartEvent, TArray<class UBP_SkillDataComponentScript_C*>* HasNoStartEvent);
	void GetCurrentAPPercentage01(double* Percent01);
	void GetRuntimeStatValue(ERuntimeBattleStatType StatType, double* Value);
	void Force_Play_Again(bool ShouldPlayTooltip, bool PreventChainedPlayAgain, bool* HasAppliedForcePlayAgain);
	void TryDisableGradientPostProcess(bool DuringCounter, const struct FVector& GradientCenterLocation);
	void RegisterSkillChecks(class UBP_DataAsset_Skill_C* Skill);
	void DrainAP(int32 Amount, class UAC_jRPG_CharacterBattleStats_C* SourceCharacterStats);
	void Drain_AP_FromTarget(class UAC_jRPG_CharacterBattleStats_C* TargetCharacter, int32 Amount);
	void CheckForDeath(class UBP_BattleDamages_C* BattleDamages);
	void SetDead();
	void SetCharacterFleeing(bool IsFleeing_0);
	void GetCurrentShieldPoints(int32* ShieldPoints);
	void SetCurrentShieldPoints(int32 NewValue, const class FString& DebugReason);
	void AddShieldPoints(int32 Amount, const class FString& DebugReason);
	void TryConsumeShieldPoints(int32 Amount, const class FString& DebugReason, bool* Success);
	void NotifyDeath(bool DeathCounter);
	void FindEquippedSkillByID(class FName SkillID, class UBP_DataAsset_Skill_C** Skill);
	void TriggerSkill(TArray<class ABP_jRPG_Character_Battle_Base_C*>& TargetedCharacters_0, class UClass* SkillClass);
	void UpdateSkillStates();
	void GetAllSkillStatesForUI(TMap<class UBP_DataAsset_Skill_C*, class UBP_SkillState_C*>* SkillStates_0);
	void GetSkillState(const class UBP_DataAsset_Skill_C* SkillData, class UBP_SkillState_C** Value);
	double GetProbabilityToReceiveBuff(class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, EBuffApplicationProbability StatusEffectProbability, class UBP_BattleBuffInstance_C* BuffInstance);
	void DeinitBattleGear();
	void GetDefenseAgainstElement(EAttackType AttackElement, double* Defense);
	void PrepareForActionAsSkillCaster();
	void PrepareForActionAsSkillTarget();
	void InitSkillStates();
	bool DEBUG_Console_AutoGradientParry();
	void GetAttackPowerForType(EAttackType AttackElement, double* Power);
	bool IsDefenseLockActive();
	void RemoveDefenseLock();
	void AddDefenseLock();
	bool IsTurnSkipActive();
	void RemoveTurnSkip();
	void AddTurnSkip();
	void GetPassiveFromBuff(const class UBP_BattleBuffInstance_C*& Key, struct FFPassiveEffect* PassiveEffect, class FName* PassiveID, bool* Found);
	double GetCurrentSpeedSimulate(bool HasEngagementBonus_0);
	double GetCurrentSpeed();
	void GetCurrentHPPercentage(double* Percent01);
	void OnKilledByDamage(class UBP_BattleDamages_C* BattleDamages);
	bool CanSpendAP(int32 Amount);
	void SetAP(int32 NewAP, EAPChangeReason ChangeReason);
	void CheckIsAlive2(bool CheckMode, class UBP_BattleCheckContext_C* NewParam, bool* Value);
	bool CheckCanResurrect(bool CheckMode);
	void CheckCanRecoverHP(bool CheckMode, bool* CanRecover, bool* BecauseDead, bool* BecauseMaxHP);
	void CheckIsMaxed(bool CheckMode, bool* Value);
	void CheckIsAlive(bool CheckMode, bool* Value);
	void InvalidateCheck(class FName CheckName);
	void AddCheckStack(class FName CheckConstant, bool CheckMode);
	void ResetChecks();
	void Assert_Check(class FName CheckConstant, const class FString& OperationName);
	void CanRecoverHP(bool* Valid, bool* BecauseDead);
	void OnParryPerfectFail(const class FText& Reason);
	bool DEBUG_Console_AutoDodge();
	bool DEBUG_Console_AutoParry();
	void ComputeNewInitiativeAfterTimeSimulate(double CurrentInitiative_0, double Time, bool HasEngagementBonus_0, bool DEBUG_Verbose, double* NewInitiative);
	void AdvanceInitiativeByTime(double Time, bool DEBUG_Verbose);
	void GetTimeToFullInitiativeSimulate(double CurrentInitiative_0, bool HasEngagementBonus_0, double* Time);
	void GetTimeToFullInitiative(double* Time);
	void GetMaxAP(double* MaxMP);
	void GetMaxHP(double* MaxHP);
	void InitBattleGear();
	void GetOtherElementalAffinity(class UAC_jRPG_CharacterBattleStats_C* CharacterBattleStats, EAttackType AttackType, EElementalAffinity* Affinity);
	void GetElementalAffinity(EAttackType AttackType, EElementalAffinity* Affinity);
	void MaxHP();
	void SetHP(double HP_Value);
	void OnOverrideFull();
	void AddOverdrive(double Amount, const class FText& Reason);
	void OnBuffDeactivated(class UBP_BattleBuffInstanceWrapper_C* BuffInstanceWrapper);
	void OnCharacterTurnStart(class UAC_jRPG_CharacterBattleStats_C* CharacterTurn);
	void RecalculateStats();
	void RemoveStatMultiplier(const struct FGuid& StatMultiplierUID);
	void AddStatMultiplier(E_jRPG_StatType StatType, double Multiplier, struct FGuid* StatMultiplierUID);
	void ActivateBuff(class UBP_BattleBuffInstance_C* BuffInstance, EBuffApplicationProbability StatusEffectProbability, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, bool* Success);
	void Resurrect(double HP_Amount, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter);
	void ReduceAP(double Amount, EAPChangeReason ChangeReason);
	void GainAP(int32 Amount, EAPChangeReason ChangeReason);
	void GetCurrentAP(double* AP);
	void ReduceHP(double Amount, double* NewHPValue, double* EffectiveDamage);
	void ReduceInitiative(double Amount);
	void CalculateDefendStanceDamageReduction(double DamageInput, double* DamageOutput);
	void RemoveInitiative(double Amount);
	void ReceiveDamage(double FinalDamageMultiplier, TScriptInterface<class IIBattleDamageSource_C> DamageSourceCharacter, EAttackType AttackType, bool Simulated_Damage__No_Damage_will_be_dealt_, double Straight_Damage__ignores_calculation_, bool IsCounterDamage, EDamageReason DamageReason, const struct FVector& DamageLocation, const class FString& DebugReason, double* DamageDealt, bool* HasHit, bool* DodgeSuccess, bool* ParrySuccess, bool* QTESuccess_, class UBP_BattleDamages_C** BattleDamages);
	void RecoverHP(double RecoveryAmount, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, bool PlayVFX, EHealReason Reason, const class FString& DebugReason);
	void AddInitiative(double Amount);
	void CreateCharacterBattleSlotUI();
	void SetCharacterDataFromHero(class UBP_CharacterData_C* HeroCharacterData);
	void SetCharacterData(class FName HardcodedID, const class FText& CharacterDisplayName_0, ETextGender GenderTag_0, const TMap<E_jRPG_StatType, double>& CharacterStats_0, double CurrentHealth, double CurrentMana, const struct FS_jRPG_OverdriveSource& OverdriveSources_0, class UTexture2D* CharacterBattleIcon_0, struct FFCharacterStats& CommonCharacterStats, bool IsBoss_0, bool IsFlying_0, const TMap<EAttackType, EElementalAffinity>& ElementalAffinities);
	void ReceiveBeginPlay();
	void Internal_BeginPrepareForBattle();
	void ProcessSkillComponentStartEvents(const class USF_BlueprintLatentAction* LatentAction, bool ForceInstant);
	void BattleStart_SkillComponents_ProcessNext();
	void BattleStart_SkillComponent_OnAllProcessed();
	void Internal_FinishPrepareForBattle();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ExecuteUbergraph_AC_jRPG_CharacterBattleStats(int32 EntryPoint);

	void GetCharacterBattleBase(class ABP_jRPG_Character_Battle_Base_C** jRPG_CharacterBattleBase, bool* IsValid) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_jRPG_CharacterBattleStats_C">();
	}
	static class UAC_jRPG_CharacterBattleStats_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_jRPG_CharacterBattleStats_C>();
	}
};
static_assert(alignof(UAC_jRPG_CharacterBattleStats_C) == 0x000008, "Wrong alignment on UAC_jRPG_CharacterBattleStats_C");
static_assert(sizeof(UAC_jRPG_CharacterBattleStats_C) == 0x0007A8, "Wrong size on UAC_jRPG_CharacterBattleStats_C");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, UberGraphFrame) == 0x0000A0, "Member 'UAC_jRPG_CharacterBattleStats_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterHardcodedName) == 0x0000A8, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterHardcodedName' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterBattleIcon) == 0x0000B0, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterBattleIcon' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterDisplayName) == 0x0000B8, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterDisplayName' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterBaseStats) == 0x0000C8, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterBaseStats' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterCurrentStats) == 0x000118, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterCurrentStats' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentHP) == 0x000168, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentHP' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentShieldPoints) == 0x000170, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentShieldPoints' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentAP) == 0x000178, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentAP' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentInitiative) == 0x000180, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentInitiative' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Defending) == 0x000188, "Member 'UAC_jRPG_CharacterBattleStats_C::Defending' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BattleManagerReference) == 0x000190, "Member 'UAC_jRPG_CharacterBattleStats_C::BattleManagerReference' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, GameInstanceReference) == 0x000198, "Member 'UAC_jRPG_CharacterBattleStats_C::GameInstanceReference' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, SelectedActionType) == 0x0001A0, "Member 'UAC_jRPG_CharacterBattleStats_C::SelectedActionType' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, SelectedSecondaryActionName) == 0x0001A4, "Member 'UAC_jRPG_CharacterBattleStats_C::SelectedSecondaryActionName' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, TargetedCharacters) == 0x0001B0, "Member 'UAC_jRPG_CharacterBattleStats_C::TargetedCharacters' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentPower) == 0x0001C0, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentPower' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, EquipmentLegacy) == 0x0001C8, "Member 'UAC_jRPG_CharacterBattleStats_C::EquipmentLegacy' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BuffPower) == 0x000218, "Member 'UAC_jRPG_CharacterBattleStats_C::BuffPower' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OriginalPower) == 0x000220, "Member 'UAC_jRPG_CharacterBattleStats_C::OriginalPower' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BattleBuffComponent) == 0x000228, "Member 'UAC_jRPG_CharacterBattleStats_C::BattleBuffComponent' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterStatMultipliers) == 0x000230, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterStatMultipliers' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, SkillsLearnt) == 0x000280, "Member 'UAC_jRPG_CharacterBattleStats_C::SkillsLearnt' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentOverdrive) == 0x0002D0, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentOverdrive' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OverdriveSources) == 0x0002D8, "Member 'UAC_jRPG_CharacterBattleStats_C::OverdriveSources' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, SimulatedDamage_) == 0x0002E8, "Member 'UAC_jRPG_CharacterBattleStats_C::SimulatedDamage_' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, TurnSkipRefCount) == 0x0002EC, "Member 'UAC_jRPG_CharacterBattleStats_C::TurnSkipRefCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnBuffAdded) == 0x0002F0, "Member 'UAC_jRPG_CharacterBattleStats_C::OnBuffAdded' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnBuffRemoved) == 0x000300, "Member 'UAC_jRPG_CharacterBattleStats_C::OnBuffRemoved' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnHPChanged) == 0x000310, "Member 'UAC_jRPG_CharacterBattleStats_C::OnHPChanged' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnShieldPointsChanged) == 0x000320, "Member 'UAC_jRPG_CharacterBattleStats_C::OnShieldPointsChanged' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnCharacterInitialized) == 0x000330, "Member 'UAC_jRPG_CharacterBattleStats_C::OnCharacterInitialized' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterBattleSlotWidget) == 0x000340, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterBattleSlotWidget' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, HasReceivedHitDuringCurrentSkill) == 0x000348, "Member 'UAC_jRPG_CharacterBattleStats_C::HasReceivedHitDuringCurrentSkill' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, HasParriedAllHitsDuringCurrentSkill) == 0x000349, "Member 'UAC_jRPG_CharacterBattleStats_C::HasParriedAllHitsDuringCurrentSkill' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, ActiveChecks) == 0x000350, "Member 'UAC_jRPG_CharacterBattleStats_C::ActiveChecks' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Check_CanRecoverHP) == 0x000360, "Member 'UAC_jRPG_CharacterBattleStats_C::Check_CanRecoverHP' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Check_IsAlive) == 0x000368, "Member 'UAC_jRPG_CharacterBattleStats_C::Check_IsAlive' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Check_IsMaxedHP) == 0x000370, "Member 'UAC_jRPG_CharacterBattleStats_C::Check_IsMaxedHP' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Check_CanResurrect) == 0x000378, "Member 'UAC_jRPG_CharacterBattleStats_C::Check_CanResurrect' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, TargetingCheckContext) == 0x000380, "Member 'UAC_jRPG_CharacterBattleStats_C::TargetingCheckContext' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BattleActionCheckContext) == 0x000388, "Member 'UAC_jRPG_CharacterBattleStats_C::BattleActionCheckContext' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnAPChanged) == 0x000390, "Member 'UAC_jRPG_CharacterBattleStats_C::OnAPChanged' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APDefendCost) == 0x0003A0, "Member 'UAC_jRPG_CharacterBattleStats_C::APDefendCost' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APDodgeCost) == 0x0003A4, "Member 'UAC_jRPG_CharacterBattleStats_C::APDodgeCost' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APParryCost) == 0x0003A8, "Member 'UAC_jRPG_CharacterBattleStats_C::APParryCost' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APNewTurnGain) == 0x0003AC, "Member 'UAC_jRPG_CharacterBattleStats_C::APNewTurnGain' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APGainParry) == 0x0003B0, "Member 'UAC_jRPG_CharacterBattleStats_C::APGainParry' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APGainAttack) == 0x0003B4, "Member 'UAC_jRPG_CharacterBattleStats_C::APGainAttack' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharacterStats) == 0x0003B8, "Member 'UAC_jRPG_CharacterBattleStats_C::CharacterStats' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, APTurnStartBonus) == 0x0003E8, "Member 'UAC_jRPG_CharacterBattleStats_C::APTurnStartBonus' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnAPChangedEvent) == 0x0003F0, "Member 'UAC_jRPG_CharacterBattleStats_C::OnAPChangedEvent' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnDeath) == 0x000400, "Member 'UAC_jRPG_CharacterBattleStats_C::OnDeath' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, DefenseLockRefCount) == 0x000410, "Member 'UAC_jRPG_CharacterBattleStats_C::DefenseLockRefCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsStun) == 0x000414, "Member 'UAC_jRPG_CharacterBattleStats_C::IsStun' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Equipment) == 0x000418, "Member 'UAC_jRPG_CharacterBattleStats_C::Equipment' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, StunBreakBarCurrent) == 0x000468, "Member 'UAC_jRPG_CharacterBattleStats_C::StunBreakBarCurrent' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, StunBreakBarMax) == 0x000470, "Member 'UAC_jRPG_CharacterBattleStats_C::StunBreakBarMax' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BreakDamageBlockerRefCount) == 0x000478, "Member 'UAC_jRPG_CharacterBattleStats_C::BreakDamageBlockerRefCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, HasEngagementBonus) == 0x000498, "Member 'UAC_jRPG_CharacterBattleStats_C::HasEngagementBonus' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BuffToPassiveMap) == 0x0004A0, "Member 'UAC_jRPG_CharacterBattleStats_C::BuffToPassiveMap' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BuffToPassiveIDsMap) == 0x0004F0, "Member 'UAC_jRPG_CharacterBattleStats_C::BuffToPassiveIDsMap' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsBoss) == 0x000540, "Member 'UAC_jRPG_CharacterBattleStats_C::IsBoss' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, PreventDeathRefCount) == 0x000548, "Member 'UAC_jRPG_CharacterBattleStats_C::PreventDeathRefCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsCurrentAttackUndodgeable) == 0x000568, "Member 'UAC_jRPG_CharacterBattleStats_C::IsCurrentAttackUndodgeable' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsCurrentAttackUnblockable) == 0x000569, "Member 'UAC_jRPG_CharacterBattleStats_C::IsCurrentAttackUnblockable' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsCurrentAttackGradient) == 0x00056A, "Member 'UAC_jRPG_CharacterBattleStats_C::IsCurrentAttackGradient' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsCurrentAttackJumpable) == 0x00056B, "Member 'UAC_jRPG_CharacterBattleStats_C::IsCurrentAttackJumpable' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, AutomaticCounterSkill) == 0x000570, "Member 'UAC_jRPG_CharacterBattleStats_C::AutomaticCounterSkill' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, Skills) == 0x000578, "Member 'UAC_jRPG_CharacterBattleStats_C::Skills' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, SkillStates) == 0x000588, "Member 'UAC_jRPG_CharacterBattleStats_C::SkillStates' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, GradientAttackPpIsOn) == 0x0005D8, "Member 'UAC_jRPG_CharacterBattleStats_C::GradientAttackPpIsOn' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsFleeing) == 0x0005D9, "Member 'UAC_jRPG_CharacterBattleStats_C::IsFleeing' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, PuppetedBy) == 0x0005E0, "Member 'UAC_jRPG_CharacterBattleStats_C::PuppetedBy' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BattleStartEvent_ToProcess_SkillDataComponent) == 0x0005E8, "Member 'UAC_jRPG_CharacterBattleStats_C::BattleStartEvent_ToProcess_SkillDataComponent' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BattleStartNotifyDependencies) == 0x0005F8, "Member 'UAC_jRPG_CharacterBattleStats_C::BattleStartNotifyDependencies' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, DodgeLock) == 0x000600, "Member 'UAC_jRPG_CharacterBattleStats_C::DodgeLock' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnDamageReceived) == 0x000620, "Member 'UAC_jRPG_CharacterBattleStats_C::OnDamageReceived' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsPerformingLastStand) == 0x000630, "Member 'UAC_jRPG_CharacterBattleStats_C::IsPerformingLastStand' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, ShouldInterceptAllTeamAttacks) == 0x000631, "Member 'UAC_jRPG_CharacterBattleStats_C::ShouldInterceptAllTeamAttacks' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CharactersToProtectWithInterception) == 0x000638, "Member 'UAC_jRPG_CharacterBattleStats_C::CharactersToProtectWithInterception' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, CurrentInterceptedCharacter) == 0x000648, "Member 'UAC_jRPG_CharacterBattleStats_C::CurrentInterceptedCharacter' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, DamageLimitUnlockRefCount) == 0x000650, "Member 'UAC_jRPG_CharacterBattleStats_C::DamageLimitUnlockRefCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, BaseDamageType) == 0x000670, "Member 'UAC_jRPG_CharacterBattleStats_C::BaseDamageType' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, FreeAimDamageType) == 0x000671, "Member 'UAC_jRPG_CharacterBattleStats_C::FreeAimDamageType' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, NextResurrectParameters) == 0x000678, "Member 'UAC_jRPG_CharacterBattleStats_C::NextResurrectParameters' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnBreakDamageReceived) == 0x000690, "Member 'UAC_jRPG_CharacterBattleStats_C::OnBreakDamageReceived' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnBreakBarStun) == 0x0006A0, "Member 'UAC_jRPG_CharacterBattleStats_C::OnBreakBarStun' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnConsumableActionEffect) == 0x0006B0, "Member 'UAC_jRPG_CharacterBattleStats_C::OnConsumableActionEffect' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnDeathDamagePrevented) == 0x0006C0, "Member 'UAC_jRPG_CharacterBattleStats_C::OnDeathDamagePrevented' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, IsFlying) == 0x0006D0, "Member 'UAC_jRPG_CharacterBattleStats_C::IsFlying' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, ForceAutoAttackRefCount) == 0x0006D8, "Member 'UAC_jRPG_CharacterBattleStats_C::ForceAutoAttackRefCount' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnDamageAbsorbed) == 0x0006F8, "Member 'UAC_jRPG_CharacterBattleStats_C::OnDamageAbsorbed' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, ForcedSkillOnNextTurn) == 0x000708, "Member 'UAC_jRPG_CharacterBattleStats_C::ForcedSkillOnNextTurn' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, ParryLock) == 0x000710, "Member 'UAC_jRPG_CharacterBattleStats_C::ParryLock' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnSkillPreExecution) == 0x000730, "Member 'UAC_jRPG_CharacterBattleStats_C::OnSkillPreExecution' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, DodgeWindowModifierStack) == 0x000740, "Member 'UAC_jRPG_CharacterBattleStats_C::DodgeWindowModifierStack' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, ParryWindowModifierStack) == 0x000748, "Member 'UAC_jRPG_CharacterBattleStats_C::ParryWindowModifierStack' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnPerfectDodge) == 0x000750, "Member 'UAC_jRPG_CharacterBattleStats_C::OnPerfectDodge' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, GenderTag) == 0x000760, "Member 'UAC_jRPG_CharacterBattleStats_C::GenderTag' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, bIsPreparedForBattle) == 0x000761, "Member 'UAC_jRPG_CharacterBattleStats_C::bIsPreparedForBattle' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, bIsDeathQueuedForTurnEnd) == 0x000762, "Member 'UAC_jRPG_CharacterBattleStats_C::bIsDeathQueuedForTurnEnd' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, NestedAddBuffActionStack) == 0x000768, "Member 'UAC_jRPG_CharacterBattleStats_C::NestedAddBuffActionStack' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, SilenceRefCounts) == 0x000778, "Member 'UAC_jRPG_CharacterBattleStats_C::SilenceRefCounts' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharacterBattleStats_C, OnSkillStatesInitialized) == 0x000798, "Member 'UAC_jRPG_CharacterBattleStats_C::OnSkillStatesInitialized' has a wrong offset!");

}

