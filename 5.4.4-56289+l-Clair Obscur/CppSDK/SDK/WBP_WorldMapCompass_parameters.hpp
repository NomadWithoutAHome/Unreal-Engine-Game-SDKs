#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WorldMapCompass

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "FLevelDataEntry_structs.hpp"


namespace SDK::Params
{

// Function WBP_WorldMapCompass.WBP_WorldMapCompass_C.ExecuteUbergraph_WBP_WorldMapCompass
// 0x0260 (0x0260 - 0x0000)
struct WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerCameraManager*                   CallFunc_GetPlayerCameraManager_ReturnValue;       // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetCameraRotation_ReturnValue;            // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindCurrentLevelData_Found;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFLevelDataEntry                       CallFunc_FindCurrentLevelData_LevelData;           // 0x0080(0x01B0)(HasGetValueTypeHash)
	class FName                                   CallFunc_FindCurrentLevelData_RowName;             // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Yaw;                // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetYawPitchFromVector_Pitch;              // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0240(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass) == 0x000008, "Wrong alignment on WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass");
static_assert(sizeof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass) == 0x000260, "Wrong size on WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, EntryPoint) == 0x000000, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_GetPlayerCameraManager_ReturnValue) == 0x000040, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_GetPlayerCameraManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_GetCameraRotation_ReturnValue) == 0x000048, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_GetCameraRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000060, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_FindCurrentLevelData_Found) == 0x000078, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_FindCurrentLevelData_Found' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_FindCurrentLevelData_LevelData) == 0x000080, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_FindCurrentLevelData_LevelData' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_FindCurrentLevelData_RowName) == 0x000230, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_FindCurrentLevelData_RowName' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_GetYawPitchFromVector_Yaw) == 0x000238, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_GetYawPitchFromVector_Yaw' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_GetYawPitchFromVector_Pitch) == 0x00023C, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_GetYawPitchFromVector_Pitch' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000240, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000248, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000250, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000258, "Member 'WBP_WorldMapCompass_C_ExecuteUbergraph_WBP_WorldMapCompass::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WBP_WorldMapCompass.WBP_WorldMapCompass_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_WorldMapCompass_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapCompass_C_Tick) == 0x000004, "Wrong alignment on WBP_WorldMapCompass_C_Tick");
static_assert(sizeof(WBP_WorldMapCompass_C_Tick) == 0x00003C, "Wrong size on WBP_WorldMapCompass_C_Tick");
static_assert(offsetof(WBP_WorldMapCompass_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_WorldMapCompass_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapCompass_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_WorldMapCompass_C_Tick::InDeltaTime' has a wrong offset!");

}

