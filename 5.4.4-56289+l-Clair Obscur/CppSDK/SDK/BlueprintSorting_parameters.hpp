#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueprintSorting

#include "Basic.hpp"

#include "BlueprintSorting_structs.hpp"


namespace SDK::Params
{

// Function BlueprintSorting.BlueprintSortingHelperLibrary.GreaterThanOrEqualArrayLength
// 0x0018 (0x0018 - 0x0000)
struct BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength) == 0x000008, "Wrong alignment on BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength");
static_assert(sizeof(BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength) == 0x000018, "Wrong size on BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength");
static_assert(offsetof(BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength, TargetArray) == 0x000000, "Member 'BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength::TargetArray' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength, Index_0) == 0x000010, "Member 'BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength::Index_0' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength, ReturnValue) == 0x000014, "Member 'BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength::ReturnValue' has a wrong offset!");

// Function BlueprintSorting.BlueprintSortingHelperLibrary.Increment
// 0x0008 (0x0008 - 0x0000)
struct BlueprintSortingHelperLibrary_Increment final
{
public:
	int32                                         ToIncrement;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintSortingHelperLibrary_Increment) == 0x000004, "Wrong alignment on BlueprintSortingHelperLibrary_Increment");
static_assert(sizeof(BlueprintSortingHelperLibrary_Increment) == 0x000008, "Wrong size on BlueprintSortingHelperLibrary_Increment");
static_assert(offsetof(BlueprintSortingHelperLibrary_Increment, ToIncrement) == 0x000000, "Member 'BlueprintSortingHelperLibrary_Increment::ToIncrement' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_Increment, ReturnValue) == 0x000004, "Member 'BlueprintSortingHelperLibrary_Increment::ReturnValue' has a wrong offset!");

// Function BlueprintSorting.BlueprintSortingHelperLibrary.LessThanOrEqualArrayLength
// 0x0018 (0x0018 - 0x0000)
struct BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Index_0;                                           // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength) == 0x000008, "Wrong alignment on BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength");
static_assert(sizeof(BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength) == 0x000018, "Wrong size on BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength");
static_assert(offsetof(BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength, TargetArray) == 0x000000, "Member 'BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength::TargetArray' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength, Index_0) == 0x000010, "Member 'BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength::Index_0' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength, ReturnValue) == 0x000014, "Member 'BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength::ReturnValue' has a wrong offset!");

// Function BlueprintSorting.BlueprintSortingHelperLibrary.SwapItems
// 0x0018 (0x0018 - 0x0000)
struct BlueprintSortingHelperLibrary_SwapItems final
{
public:
	TArray<int32>                                 TargetArray;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         index1;                                            // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         index2;                                            // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintSortingHelperLibrary_SwapItems) == 0x000008, "Wrong alignment on BlueprintSortingHelperLibrary_SwapItems");
static_assert(sizeof(BlueprintSortingHelperLibrary_SwapItems) == 0x000018, "Wrong size on BlueprintSortingHelperLibrary_SwapItems");
static_assert(offsetof(BlueprintSortingHelperLibrary_SwapItems, TargetArray) == 0x000000, "Member 'BlueprintSortingHelperLibrary_SwapItems::TargetArray' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_SwapItems, index1) == 0x000010, "Member 'BlueprintSortingHelperLibrary_SwapItems::index1' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_SwapItems, index2) == 0x000014, "Member 'BlueprintSortingHelperLibrary_SwapItems::index2' has a wrong offset!");

// Function BlueprintSorting.BlueprintSortingHelperLibrary.TestItem
// 0x0004 (0x0004 - 0x0000)
struct BlueprintSortingHelperLibrary_TestItem final
{
public:
	int32                                         TargetItem;                                        // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintSortingHelperLibrary_TestItem) == 0x000004, "Wrong alignment on BlueprintSortingHelperLibrary_TestItem");
static_assert(sizeof(BlueprintSortingHelperLibrary_TestItem) == 0x000004, "Wrong size on BlueprintSortingHelperLibrary_TestItem");
static_assert(offsetof(BlueprintSortingHelperLibrary_TestItem, TargetItem) == 0x000000, "Member 'BlueprintSortingHelperLibrary_TestItem::TargetItem' has a wrong offset!");

// Function BlueprintSorting.BlueprintSortingHelperLibrary.TestThreeItems
// 0x000C (0x000C - 0x0000)
struct BlueprintSortingHelperLibrary_TestThreeItems final
{
public:
	int32                                         TargetItem1;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetItem2;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetItem3;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintSortingHelperLibrary_TestThreeItems) == 0x000004, "Wrong alignment on BlueprintSortingHelperLibrary_TestThreeItems");
static_assert(sizeof(BlueprintSortingHelperLibrary_TestThreeItems) == 0x00000C, "Wrong size on BlueprintSortingHelperLibrary_TestThreeItems");
static_assert(offsetof(BlueprintSortingHelperLibrary_TestThreeItems, TargetItem1) == 0x000000, "Member 'BlueprintSortingHelperLibrary_TestThreeItems::TargetItem1' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_TestThreeItems, TargetItem2) == 0x000004, "Member 'BlueprintSortingHelperLibrary_TestThreeItems::TargetItem2' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_TestThreeItems, TargetItem3) == 0x000008, "Member 'BlueprintSortingHelperLibrary_TestThreeItems::TargetItem3' has a wrong offset!");

// Function BlueprintSorting.BlueprintSortingHelperLibrary.TestTwoItems
// 0x0008 (0x0008 - 0x0000)
struct BlueprintSortingHelperLibrary_TestTwoItems final
{
public:
	int32                                         TargetItem1;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetItem2;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintSortingHelperLibrary_TestTwoItems) == 0x000004, "Wrong alignment on BlueprintSortingHelperLibrary_TestTwoItems");
static_assert(sizeof(BlueprintSortingHelperLibrary_TestTwoItems) == 0x000008, "Wrong size on BlueprintSortingHelperLibrary_TestTwoItems");
static_assert(offsetof(BlueprintSortingHelperLibrary_TestTwoItems, TargetItem1) == 0x000000, "Member 'BlueprintSortingHelperLibrary_TestTwoItems::TargetItem1' has a wrong offset!");
static_assert(offsetof(BlueprintSortingHelperLibrary_TestTwoItems, TargetItem2) == 0x000004, "Member 'BlueprintSortingHelperLibrary_TestTwoItems::TargetItem2' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.IsFirstAfterSecond
// 0x0010 (0x0010 - 0x0000)
struct OrderingResult_IsFirstAfterSecond final
{
public:
	class UOrderingResult*                        OrderingResult;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESortDirection                                SortDirection;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OrderingResult_IsFirstAfterSecond) == 0x000008, "Wrong alignment on OrderingResult_IsFirstAfterSecond");
static_assert(sizeof(OrderingResult_IsFirstAfterSecond) == 0x000010, "Wrong size on OrderingResult_IsFirstAfterSecond");
static_assert(offsetof(OrderingResult_IsFirstAfterSecond, OrderingResult) == 0x000000, "Member 'OrderingResult_IsFirstAfterSecond::OrderingResult' has a wrong offset!");
static_assert(offsetof(OrderingResult_IsFirstAfterSecond, SortDirection) == 0x000008, "Member 'OrderingResult_IsFirstAfterSecond::SortDirection' has a wrong offset!");
static_assert(offsetof(OrderingResult_IsFirstAfterSecond, ReturnValue) == 0x000009, "Member 'OrderingResult_IsFirstAfterSecond::ReturnValue' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.MakeOrderingResult
// 0x0008 (0x0008 - 0x0000)
struct OrderingResult_MakeOrderingResult final
{
public:
	class UOrderingResult*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrderingResult_MakeOrderingResult) == 0x000008, "Wrong alignment on OrderingResult_MakeOrderingResult");
static_assert(sizeof(OrderingResult_MakeOrderingResult) == 0x000008, "Wrong size on OrderingResult_MakeOrderingResult");
static_assert(offsetof(OrderingResult_MakeOrderingResult, ReturnValue) == 0x000000, "Member 'OrderingResult_MakeOrderingResult::ReturnValue' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.SetForFloat
// 0x0008 (0x0008 - 0x0000)
struct OrderingResult_SetForFloat final
{
public:
	float                                         R;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Epsilon;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrderingResult_SetForFloat) == 0x000004, "Wrong alignment on OrderingResult_SetForFloat");
static_assert(sizeof(OrderingResult_SetForFloat) == 0x000008, "Wrong size on OrderingResult_SetForFloat");
static_assert(offsetof(OrderingResult_SetForFloat, R) == 0x000000, "Member 'OrderingResult_SetForFloat::R' has a wrong offset!");
static_assert(offsetof(OrderingResult_SetForFloat, Epsilon) == 0x000004, "Member 'OrderingResult_SetForFloat::Epsilon' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.SetForInt
// 0x0004 (0x0004 - 0x0000)
struct OrderingResult_SetForInt final
{
public:
	int32                                         R;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrderingResult_SetForInt) == 0x000004, "Wrong alignment on OrderingResult_SetForInt");
static_assert(sizeof(OrderingResult_SetForInt) == 0x000004, "Wrong size on OrderingResult_SetForInt");
static_assert(offsetof(OrderingResult_SetForInt, R) == 0x000000, "Member 'OrderingResult_SetForInt::R' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.SetForInts
// 0x0008 (0x0008 - 0x0000)
struct OrderingResult_SetForInts final
{
public:
	int32                                         A;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         B;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrderingResult_SetForInts) == 0x000004, "Wrong alignment on OrderingResult_SetForInts");
static_assert(sizeof(OrderingResult_SetForInts) == 0x000008, "Wrong size on OrderingResult_SetForInts");
static_assert(offsetof(OrderingResult_SetForInts, A) == 0x000000, "Member 'OrderingResult_SetForInts::A' has a wrong offset!");
static_assert(offsetof(OrderingResult_SetForInts, B) == 0x000004, "Member 'OrderingResult_SetForInts::B' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.SetForStrings
// 0x0020 (0x0020 - 0x0000)
struct OrderingResult_SetForStrings final
{
public:
	class FString                                 A;                                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 B;                                                 // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrderingResult_SetForStrings) == 0x000008, "Wrong alignment on OrderingResult_SetForStrings");
static_assert(sizeof(OrderingResult_SetForStrings) == 0x000020, "Wrong size on OrderingResult_SetForStrings");
static_assert(offsetof(OrderingResult_SetForStrings, A) == 0x000000, "Member 'OrderingResult_SetForStrings::A' has a wrong offset!");
static_assert(offsetof(OrderingResult_SetForStrings, B) == 0x000010, "Member 'OrderingResult_SetForStrings::B' has a wrong offset!");

// Function BlueprintSorting.OrderingResult.SetForTexts
// 0x0020 (0x0020 - 0x0000)
struct OrderingResult_SetForTexts final
{
public:
	class FText                                   A;                                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FText                                   B;                                                 // 0x0010(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrderingResult_SetForTexts) == 0x000008, "Wrong alignment on OrderingResult_SetForTexts");
static_assert(sizeof(OrderingResult_SetForTexts) == 0x000020, "Wrong size on OrderingResult_SetForTexts");
static_assert(offsetof(OrderingResult_SetForTexts, A) == 0x000000, "Member 'OrderingResult_SetForTexts::A' has a wrong offset!");
static_assert(offsetof(OrderingResult_SetForTexts, B) == 0x000010, "Member 'OrderingResult_SetForTexts::B' has a wrong offset!");

}

