#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCAnimationComponent

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "S_IdleNpcParameters_structs.hpp"
#include "E_Expressions_Metahuman_structs.hpp"
#include "E_NPC_ForceHeadDirection_structs.hpp"
#include "E_NPC_Body_IdleType_structs.hpp"
#include "E_Facial_LookAt_structs.hpp"


namespace SDK::Params
{

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ResetLookAtLocation
// 0x0090 (0x0090 - 0x0000)
struct BP_NPCAnimationComponent_C_ResetLookAtLocation final
{
public:
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetActorForwardVector_ReturnValue;        // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_ResetLookAtLocation) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_ResetLookAtLocation");
static_assert(sizeof(BP_NPCAnimationComponent_C_ResetLookAtLocation) == 0x000090, "Wrong size on BP_NPCAnimationComponent_C_ResetLookAtLocation");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000000, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, CallFunc_GetActorForwardVector_ReturnValue) == 0x000020, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::CallFunc_GetActorForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, K2Node_DynamicCast_AsCharacter) == 0x000038, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000048, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, CallFunc_GetSocketLocation_ReturnValue) == 0x000060, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ResetLookAtLocation, CallFunc_Add_VectorVector_ReturnValue) == 0x000078, "Member 'BP_NPCAnimationComponent_C_ResetLookAtLocation::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.UpdateLookAtData
// 0x0088 (0x0088 - 0x0000)
struct BP_NPCAnimationComponent_C_UpdateLookAtData final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue;           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x005B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Select_Default;                             // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_GetPlayerCharacter_ReturnValue_1;         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Less_DoubleDouble_A_ImplicitCast;         // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_UpdateLookAtData) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_UpdateLookAtData");
static_assert(sizeof(BP_NPCAnimationComponent_C_UpdateLookAtData) == 0x000088, "Wrong size on BP_NPCAnimationComponent_C_UpdateLookAtData");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, Temp_bool_Variable) == 0x000000, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_BooleanAND_ReturnValue) == 0x000001, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_IsValid_ReturnValue) == 0x000002, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000008, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_GetPlayerCharacter_ReturnValue) == 0x000020, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_GetPlayerCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_GetSocketLocation_ReturnValue) == 0x000028, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000040, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, Temp_bool_Variable_1) == 0x000058, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000059, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x00005A, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_BooleanAND_ReturnValue_1) == 0x00005B, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, K2Node_Select_Default) == 0x00005C, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_GetOwner_ReturnValue) == 0x000060, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_GetPlayerCharacter_ReturnValue_1) == 0x000068, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_GetPlayerCharacter_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_IsValid_ReturnValue_1) == 0x000070, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_GetDistanceTo_ReturnValue) == 0x000074, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000078, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateLookAtData, CallFunc_Less_DoubleDouble_A_ImplicitCast) == 0x000080, "Member 'BP_NPCAnimationComponent_C_UpdateLookAtData::CallFunc_Less_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetInteractingNPC
// 0x0008 (0x0008 - 0x0000)
struct BP_NPCAnimationComponent_C_SetInteractingNPC final
{
public:
	class ABP_jRPG_NPC_Dialog_C*                  InteractingNPC_0;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetInteractingNPC) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_SetInteractingNPC");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetInteractingNPC) == 0x000008, "Wrong size on BP_NPCAnimationComponent_C_SetInteractingNPC");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetInteractingNPC, InteractingNPC_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetInteractingNPC::InteractingNPC_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.GetEnvelopeVolume
// 0x0008 (0x0008 - 0x0000)
struct BP_NPCAnimationComponent_C_GetEnvelopeVolume final
{
public:
	double                                        EnvelopeVolume_0;                                  // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_GetEnvelopeVolume) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_GetEnvelopeVolume");
static_assert(sizeof(BP_NPCAnimationComponent_C_GetEnvelopeVolume) == 0x000008, "Wrong size on BP_NPCAnimationComponent_C_GetEnvelopeVolume");
static_assert(offsetof(BP_NPCAnimationComponent_C_GetEnvelopeVolume, EnvelopeVolume_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_GetEnvelopeVolume::EnvelopeVolume_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.UpdateEnvelopeVolume
// 0x0008 (0x0008 - 0x0000)
struct BP_NPCAnimationComponent_C_UpdateEnvelopeVolume final
{
public:
	double                                        SoundWaveVolume;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_UpdateEnvelopeVolume) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_UpdateEnvelopeVolume");
static_assert(sizeof(BP_NPCAnimationComponent_C_UpdateEnvelopeVolume) == 0x000008, "Wrong size on BP_NPCAnimationComponent_C_UpdateEnvelopeVolume");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateEnvelopeVolume, SoundWaveVolume) == 0x000000, "Member 'BP_NPCAnimationComponent_C_UpdateEnvelopeVolume::SoundWaveVolume' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIdleBase
// 0x0058 (0x0058 - 0x0000)
struct BP_NPCAnimationComponent_C_SetIdleBase final
{
public:
	struct FS_IdleNpcParameters                   IdleOverride_0;                                    // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetIdleBase) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_SetIdleBase");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetIdleBase) == 0x000058, "Wrong size on BP_NPCAnimationComponent_C_SetIdleBase");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIdleBase, IdleOverride_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetIdleBase::IdleOverride_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIsInDialogue
// 0x0001 (0x0001 - 0x0000)
struct BP_NPCAnimationComponent_C_SetIsInDialogue final
{
public:
	bool                                          IsInDialogue_0;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetIsInDialogue) == 0x000001, "Wrong alignment on BP_NPCAnimationComponent_C_SetIsInDialogue");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetIsInDialogue) == 0x000001, "Wrong size on BP_NPCAnimationComponent_C_SetIsInDialogue");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIsInDialogue, IsInDialogue_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetIsInDialogue::IsInDialogue_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.GetBaseAnimationStatus
// 0x0018 (0x0018 - 0x0000)
struct BP_NPCAnimationComponent_C_GetBaseAnimationStatus final
{
public:
	E_Expressions_Metahuman                       Basexpression_0;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BaseFacialExpressionStrength_0;                    // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_NPC_Body_IdleType                           BaseIdleType_0;                                    // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_GetBaseAnimationStatus) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_GetBaseAnimationStatus");
static_assert(sizeof(BP_NPCAnimationComponent_C_GetBaseAnimationStatus) == 0x000018, "Wrong size on BP_NPCAnimationComponent_C_GetBaseAnimationStatus");
static_assert(offsetof(BP_NPCAnimationComponent_C_GetBaseAnimationStatus, Basexpression_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_GetBaseAnimationStatus::Basexpression_0' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_GetBaseAnimationStatus, BaseFacialExpressionStrength_0) == 0x000008, "Member 'BP_NPCAnimationComponent_C_GetBaseAnimationStatus::BaseFacialExpressionStrength_0' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_GetBaseAnimationStatus, BaseIdleType_0) == 0x000010, "Member 'BP_NPCAnimationComponent_C_GetBaseAnimationStatus::BaseIdleType_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetForceHeadDirection
// 0x0001 (0x0001 - 0x0000)
struct BP_NPCAnimationComponent_C_SetForceHeadDirection final
{
public:
	E_NPC_ForceHeadDirection                      ForceHeadDirection_0;                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetForceHeadDirection) == 0x000001, "Wrong alignment on BP_NPCAnimationComponent_C_SetForceHeadDirection");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetForceHeadDirection) == 0x000001, "Wrong size on BP_NPCAnimationComponent_C_SetForceHeadDirection");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetForceHeadDirection, ForceHeadDirection_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetForceHeadDirection::ForceHeadDirection_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetEnableLookAt
// 0x0001 (0x0001 - 0x0000)
struct BP_NPCAnimationComponent_C_SetEnableLookAt final
{
public:
	bool                                          AllowNPCLookAt_0;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetEnableLookAt) == 0x000001, "Wrong alignment on BP_NPCAnimationComponent_C_SetEnableLookAt");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetEnableLookAt) == 0x000001, "Wrong size on BP_NPCAnimationComponent_C_SetEnableLookAt");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetEnableLookAt, AllowNPCLookAt_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetEnableLookAt::AllowNPCLookAt_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetLookAtEndBone
// 0x000C (0x000C - 0x0000)
struct BP_NPCAnimationComponent_C_SetLookAtEndBone final
{
public:
	class FName                                   CallFunc_Map_Find_Value;                           // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetLookAtEndBone) == 0x000004, "Wrong alignment on BP_NPCAnimationComponent_C_SetLookAtEndBone");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetLookAtEndBone) == 0x00000C, "Wrong size on BP_NPCAnimationComponent_C_SetLookAtEndBone");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetLookAtEndBone, CallFunc_Map_Find_Value) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetLookAtEndBone::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetLookAtEndBone, CallFunc_Map_Find_ReturnValue) == 0x000008, "Member 'BP_NPCAnimationComponent_C_SetLookAtEndBone::CallFunc_Map_Find_ReturnValue' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetFacialExpression
// 0x0018 (0x0018 - 0x0000)
struct BP_NPCAnimationComponent_C_SetFacialExpression final
{
public:
	E_Expressions_Metahuman                       FacialExpression_0;                                // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FacialExpressionStrength_0;                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Facial_LookAt                               EyesLook_0;                                        // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetFacialExpression) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_SetFacialExpression");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetFacialExpression) == 0x000018, "Wrong size on BP_NPCAnimationComponent_C_SetFacialExpression");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetFacialExpression, FacialExpression_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetFacialExpression::FacialExpression_0' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetFacialExpression, FacialExpressionStrength_0) == 0x000008, "Member 'BP_NPCAnimationComponent_C_SetFacialExpression::FacialExpressionStrength_0' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetFacialExpression, EyesLook_0) == 0x000010, "Member 'BP_NPCAnimationComponent_C_SetFacialExpression::EyesLook_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIdleType
// 0x0004 (0x0004 - 0x0000)
struct BP_NPCAnimationComponent_C_SetIdleType final
{
public:
	E_NPC_Body_IdleType                           IdleType_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue_1;          // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetIdleType) == 0x000001, "Wrong alignment on BP_NPCAnimationComponent_C_SetIdleType");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetIdleType) == 0x000004, "Wrong size on BP_NPCAnimationComponent_C_SetIdleType");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIdleType, IdleType_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetIdleType::IdleType_0' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIdleType, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_NPCAnimationComponent_C_SetIdleType::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIdleType, CallFunc_NotEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_NPCAnimationComponent_C_SetIdleType::CallFunc_NotEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIdleType, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_NPCAnimationComponent_C_SetIdleType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIsTalking
// 0x0001 (0x0001 - 0x0000)
struct BP_NPCAnimationComponent_C_SetIsTalking final
{
public:
	bool                                          IsTalking_0;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_SetIsTalking) == 0x000001, "Wrong alignment on BP_NPCAnimationComponent_C_SetIsTalking");
static_assert(sizeof(BP_NPCAnimationComponent_C_SetIsTalking) == 0x000001, "Wrong size on BP_NPCAnimationComponent_C_SetIsTalking");
static_assert(offsetof(BP_NPCAnimationComponent_C_SetIsTalking, IsTalking_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_SetIsTalking::IsTalking_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_NPCAnimationComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_NPCAnimationComponent_C_ReceiveTick");
static_assert(sizeof(BP_NPCAnimationComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_NPCAnimationComponent_C_ReceiveTick");
static_assert(offsetof(BP_NPCAnimationComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_NPCAnimationComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.UpdateCustomIdleAndSendToABP
// 0x0058 (0x0058 - 0x0000)
struct BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP final
{
public:
	struct FS_IdleNpcParameters                   CustomIdle_0;                                      // 0x0000(0x0058)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP");
static_assert(sizeof(BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP) == 0x000058, "Wrong size on BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP");
static_assert(offsetof(BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP, CustomIdle_0) == 0x000000, "Member 'BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP::CustomIdle_0' has a wrong offset!");

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ExecuteUbergraph_BP_NPCAnimationComponent
// 0x0060 (0x0060 - 0x0000)
struct BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_IdleNpcParameters                   K2Node_CustomEvent_CustomIdle;                     // 0x0008(0x0058)(HasGetValueTypeHash)
};
static_assert(alignof(BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent) == 0x000008, "Wrong alignment on BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent");
static_assert(sizeof(BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent) == 0x000060, "Wrong size on BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent");
static_assert(offsetof(BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent, EntryPoint) == 0x000000, "Member 'BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent, K2Node_Event_DeltaSeconds) == 0x000004, "Member 'BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent, K2Node_CustomEvent_CustomIdle) == 0x000008, "Member 'BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent::K2Node_CustomEvent_CustomIdle' has a wrong offset!");

}

