#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_ClimbingElement

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_ClimbingElement.BPI_ClimbingElement_C.CheckCanExitToBottom
// 0x0058 (0x0058 - 0x0000)
struct BPI_ClimbingElement_C_CheckCanExitToBottom final
{
public:
	struct FVector                                InputDirectionVertical;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanExit;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ClimbingElement_C_CheckCanExitToBottom) == 0x000008, "Wrong alignment on BPI_ClimbingElement_C_CheckCanExitToBottom");
static_assert(sizeof(BPI_ClimbingElement_C_CheckCanExitToBottom) == 0x000058, "Wrong size on BPI_ClimbingElement_C_CheckCanExitToBottom");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToBottom, InputDirectionVertical) == 0x000000, "Member 'BPI_ClimbingElement_C_CheckCanExitToBottom::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToBottom, InputScale) == 0x000018, "Member 'BPI_ClimbingElement_C_CheckCanExitToBottom::InputScale' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToBottom, CanExit) == 0x000020, "Member 'BPI_ClimbingElement_C_CheckCanExitToBottom::CanExit' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToBottom, Location) == 0x000028, "Member 'BPI_ClimbingElement_C_CheckCanExitToBottom::Location' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToBottom, Rotation) == 0x000040, "Member 'BPI_ClimbingElement_C_CheckCanExitToBottom::Rotation' has a wrong offset!");

// Function BPI_ClimbingElement.BPI_ClimbingElement_C.CheckCanExitToTop
// 0x0058 (0x0058 - 0x0000)
struct BPI_ClimbingElement_C_CheckCanExitToTop final
{
public:
	struct FVector                                InputDirectionVertical;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanExit;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ClimbingElement_C_CheckCanExitToTop) == 0x000008, "Wrong alignment on BPI_ClimbingElement_C_CheckCanExitToTop");
static_assert(sizeof(BPI_ClimbingElement_C_CheckCanExitToTop) == 0x000058, "Wrong size on BPI_ClimbingElement_C_CheckCanExitToTop");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToTop, InputDirectionVertical) == 0x000000, "Member 'BPI_ClimbingElement_C_CheckCanExitToTop::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToTop, InputScale) == 0x000018, "Member 'BPI_ClimbingElement_C_CheckCanExitToTop::InputScale' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToTop, CanExit) == 0x000020, "Member 'BPI_ClimbingElement_C_CheckCanExitToTop::CanExit' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToTop, Location) == 0x000028, "Member 'BPI_ClimbingElement_C_CheckCanExitToTop::Location' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckCanExitToTop, Rotation) == 0x000040, "Member 'BPI_ClimbingElement_C_CheckCanExitToTop::Rotation' has a wrong offset!");

// Function BPI_ClimbingElement.BPI_ClimbingElement_C.CheckMoveToNextClimbingElement
// 0x0080 (0x0080 - 0x0000)
struct BPI_ClimbingElement_C_CheckMoveToNextClimbingElement final
{
public:
	struct FVector                                InputDirectionHorizontal;                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirectionVertical;                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForward;                                     // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove;                                           // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ClimbingElement_C> NextHold;                                         // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement) == 0x000008, "Wrong alignment on BPI_ClimbingElement_C_CheckMoveToNextClimbingElement");
static_assert(sizeof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement) == 0x000080, "Wrong size on BPI_ClimbingElement_C_CheckMoveToNextClimbingElement");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, InputDirectionHorizontal) == 0x000000, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, InputDirectionVertical) == 0x000018, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, InputScale) == 0x000030, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::InputScale' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, CameraForward) == 0x000038, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::CameraForward' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, CameraLocation) == 0x000050, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::CameraLocation' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, CanMove) == 0x000068, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::CanMove' has a wrong offset!");
static_assert(offsetof(BPI_ClimbingElement_C_CheckMoveToNextClimbingElement, NextHold) == 0x000070, "Member 'BPI_ClimbingElement_C_CheckMoveToNextClimbingElement::NextHold' has a wrong offset!");

// Function BPI_ClimbingElement.BPI_ClimbingElement_C.GetClimbingElementLocation
// 0x0018 (0x0018 - 0x0000)
struct BPI_ClimbingElement_C_GetClimbingElementLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_ClimbingElement_C_GetClimbingElementLocation) == 0x000008, "Wrong alignment on BPI_ClimbingElement_C_GetClimbingElementLocation");
static_assert(sizeof(BPI_ClimbingElement_C_GetClimbingElementLocation) == 0x000018, "Wrong size on BPI_ClimbingElement_C_GetClimbingElementLocation");
static_assert(offsetof(BPI_ClimbingElement_C_GetClimbingElementLocation, Location) == 0x000000, "Member 'BPI_ClimbingElement_C_GetClimbingElementLocation::Location' has a wrong offset!");

// Function BPI_ClimbingElement.BPI_ClimbingElement_C.GetClimbingElementRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_ClimbingElement_C_GetClimbingElementRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_ClimbingElement_C_GetClimbingElementRotation) == 0x000008, "Wrong alignment on BPI_ClimbingElement_C_GetClimbingElementRotation");
static_assert(sizeof(BPI_ClimbingElement_C_GetClimbingElementRotation) == 0x000018, "Wrong size on BPI_ClimbingElement_C_GetClimbingElementRotation");
static_assert(offsetof(BPI_ClimbingElement_C_GetClimbingElementRotation, Rotation) == 0x000000, "Member 'BPI_ClimbingElement_C_GetClimbingElementRotation::Rotation' has a wrong offset!");

}

