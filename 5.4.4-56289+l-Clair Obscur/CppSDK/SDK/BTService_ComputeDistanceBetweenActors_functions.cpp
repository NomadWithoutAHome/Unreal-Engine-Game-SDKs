#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTService_ComputeDistanceBetweenActors

#include "Basic.hpp"

#include "BTService_ComputeDistanceBetweenActors_classes.hpp"
#include "BTService_ComputeDistanceBetweenActors_parameters.hpp"


namespace SDK
{

// Function BTService_ComputeDistanceBetweenActors.BTService_ComputeDistanceBetweenActors_C.ExecuteUbergraph_BTService_ComputeDistanceBetweenActors
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTService_ComputeDistanceBetweenActors_C::ExecuteUbergraph_BTService_ComputeDistanceBetweenActors(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_ComputeDistanceBetweenActors_C", "ExecuteUbergraph_BTService_ComputeDistanceBetweenActors");

	Params::BTService_ComputeDistanceBetweenActors_C_ExecuteUbergraph_BTService_ComputeDistanceBetweenActors Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTService_ComputeDistanceBetweenActors.BTService_ComputeDistanceBetweenActors_C.GetActorLocationFromKeySelector
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBlackboardKeySelector&    Key                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBTService_ComputeDistanceBetweenActors_C::GetActorLocationFromKeySelector(const struct FBlackboardKeySelector& Key, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_ComputeDistanceBetweenActors_C", "GetActorLocationFromKeySelector");

	Params::BTService_ComputeDistanceBetweenActors_C_GetActorLocationFromKeySelector Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;

	return Parms.ReturnValue;
}


// Function BTService_ComputeDistanceBetweenActors.BTService_ComputeDistanceBetweenActors_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTService_ComputeDistanceBetweenActors_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_ComputeDistanceBetweenActors_C", "ReceiveTickAI");

	Params::BTService_ComputeDistanceBetweenActors_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

