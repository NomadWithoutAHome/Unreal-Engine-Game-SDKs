#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemSorterAbstract

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_ItemSorterAbstract.BP_ItemSorterAbstract_C.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BP_ItemSorterAbstract_C_GetDisplayName final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_ItemSorterAbstract_C_GetDisplayName) == 0x000008, "Wrong alignment on BP_ItemSorterAbstract_C_GetDisplayName");
static_assert(sizeof(BP_ItemSorterAbstract_C_GetDisplayName) == 0x000010, "Wrong size on BP_ItemSorterAbstract_C_GetDisplayName");
static_assert(offsetof(BP_ItemSorterAbstract_C_GetDisplayName, DisplayName) == 0x000000, "Member 'BP_ItemSorterAbstract_C_GetDisplayName::DisplayName' has a wrong offset!");

// Function BP_ItemSorterAbstract.BP_ItemSorterAbstract_C.SortItemInstances
// 0x0018 (0x0018 - 0x0000)
struct BP_ItemSorterAbstract_C_SortItemInstances final
{
public:
	class UBP_ItemInstance_Base_C*                A;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemInstance_Base_C*                B;                                                 // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UOrderingResult*                        Result;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemSorterAbstract_C_SortItemInstances) == 0x000008, "Wrong alignment on BP_ItemSorterAbstract_C_SortItemInstances");
static_assert(sizeof(BP_ItemSorterAbstract_C_SortItemInstances) == 0x000018, "Wrong size on BP_ItemSorterAbstract_C_SortItemInstances");
static_assert(offsetof(BP_ItemSorterAbstract_C_SortItemInstances, A) == 0x000000, "Member 'BP_ItemSorterAbstract_C_SortItemInstances::A' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_SortItemInstances, B) == 0x000008, "Member 'BP_ItemSorterAbstract_C_SortItemInstances::B' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_SortItemInstances, Result) == 0x000010, "Member 'BP_ItemSorterAbstract_C_SortItemInstances::Result' has a wrong offset!");

// Function BP_ItemSorterAbstract.BP_ItemSorterAbstract_C.ExecuteSorter
// 0x0048 (0x0048 - 0x0000)
struct BP_ItemSorterAbstract_C_ExecuteSorter final
{
public:
	TArray<class UBP_ItemInstance_Base_C*>        ItemInstances;                                     // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TDelegate<void(class UBP_ItemInstance_Base_C* A, class UBP_ItemInstance_Base_C* B, class UOrderingResult* OrderingResult)> K2Node_CreateDelegate_OutputDelegate; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                BPNode_SortArray_OrderingResult;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          BPNode_SortArray_CmpSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BPNode_SortArray_SomeAlteration;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                BPNode_SortArray_Obj1;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                BPNode_SortArray_Obj2;                             // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         BPNode_SortArray_Index1;                           // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BPNode_SortArray_Index2;                           // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemSorterAbstract_C_ExecuteSorter) == 0x000008, "Wrong alignment on BP_ItemSorterAbstract_C_ExecuteSorter");
static_assert(sizeof(BP_ItemSorterAbstract_C_ExecuteSorter) == 0x000048, "Wrong size on BP_ItemSorterAbstract_C_ExecuteSorter");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, ItemInstances) == 0x000000, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::ItemInstances' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_OrderingResult) == 0x000020, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_OrderingResult' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_CmpSuccess) == 0x000028, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_SomeAlteration) == 0x000029, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_SomeAlteration' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_Obj1) == 0x000030, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_Obj1' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_Obj2) == 0x000038, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_Obj2' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_Index1) == 0x000040, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_Index1' has a wrong offset!");
static_assert(offsetof(BP_ItemSorterAbstract_C_ExecuteSorter, BPNode_SortArray_Index2) == 0x000044, "Member 'BP_ItemSorterAbstract_C_ExecuteSorter::BPNode_SortArray_Index2' has a wrong offset!");

}

