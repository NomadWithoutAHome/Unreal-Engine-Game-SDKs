#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LighingScenarioMain_DONOTTOUCH

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LighingScenarioMain_DONOTTOUCH.BP_LighingScenarioMain_DONOTTOUCH_C
// 0x00D0 (0x0360 - 0x0290)
class ABP_LighingScenarioMain_DONOTTOUCH_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDirectionalLightComponent*             DirectionalLight_Main_DONOTTOUCH;                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight_Main_DONOTTOUCH;                          // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                SkyAtmosphere_Main_DONOTTOUCH;                     // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExpoFog_Main_DONOTTOUCH;                           // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Float_D1799F134116507819661383658DED66;   // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_D1799F134116507819661383658DED66; // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             CurrentDirectionalLightComponent;                  // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         CurrentExponentialHeightFogComponent;              // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         TimelineFloat;                                     // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USkyLightComponent*                     CurrentSkyLightComponent;                          // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                CurrentSkyAtmosphereComponent;                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	float                                         Change_Speed_Multiplier;                           // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Debug_NumberOfMainLightingScenarioCheck;           // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_LightingScenarioReference_C*        CurrentLightingScenario;                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_LightingScenarioReference_C*        PreviousLightingScenario;                          // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             PreviousDirectionalLightComponent;                 // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         PreviousExponentialHeightFogComponent;             // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkyLightComponent*                     PreviousSkyLightComponent;                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class USkyAtmosphereComponent*                PreviousSkyAtmosphereComponent;                    // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UTexture*                               DirectionalLightMaskTextureWhite;                  // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DirectionalLightMaskLightFunction;                 // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               DirectionalLightMaskTexturePrevious;               // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_LightingScenarioReference_C*        LightingScenarioBeforeBattle;                      // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        TimerTickDirty;                                    // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MarkDirtyRate;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Are_Sky_Light_Settings_Valid(class ABP_LightingScenarioReference_C* LightScenario, bool* IsValid);
	void BlendAllElements();
	void BlendDirectionalLight();
	void BlendDirectionalLightMask();
	void BlendFog();
	void BlendSkyAtmosphere();
	void BlendSkylight();
	void BreakLightingScenarioInComponents(class ABP_LightingScenarioReference_C* LightingScenario, class UDirectionalLightComponent** DirectionalLightComponent, class UExponentialHeightFogComponent** ExponentialFogComponent, class USkyLightComponent** SkyLightComponent, class USkyAtmosphereComponent** SkyAtmosphereComponent);
	bool CanChangeLigthingScenario(class ABP_LightingScenarioReference_C* NewLightingScenario);
	void ChangeLightingToScenario(class ABP_LightingScenarioReference_C* LightingScenarioReference, const float ChangeSpeedMultiplier);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void DeactivateAllScenariosForCinematics();
	void DEBUG_PrintLightingScenarioChange(const class UObject* LightingScenario, const float Speed);
	void ExecuteUbergraph_BP_LighingScenarioMain_DONOTTOUCH(int32 EntryPoint);
	void HideAllLigthingScenariosAndSequencerActors();
	void HideLightingScenarioReferences();
	void HideLightsForCinematics();
	bool IncrementTimerAndCompareToRate();
	void MarkDirty();
	void ReceiveBeginPlay();
	void SetAllElementsVisbility(bool Visibility);
	void SetLightingScenarioDoNotTouchActivated();
	void SetMainScenarioHidden();
	void SetMainScenarioVisible();
	void SetupLightingScenarioChange(class ABP_LightingScenarioReference_C* LightingScenario);
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void UpdateTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LighingScenarioMain_DONOTTOUCH_C">();
	}
	static class ABP_LighingScenarioMain_DONOTTOUCH_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_LighingScenarioMain_DONOTTOUCH_C>();
	}
};
static_assert(alignof(ABP_LighingScenarioMain_DONOTTOUCH_C) == 0x000008, "Wrong alignment on ABP_LighingScenarioMain_DONOTTOUCH_C");
static_assert(sizeof(ABP_LighingScenarioMain_DONOTTOUCH_C) == 0x000360, "Wrong size on ABP_LighingScenarioMain_DONOTTOUCH_C");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, UberGraphFrame) == 0x000290, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, DirectionalLight_Main_DONOTTOUCH) == 0x000298, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::DirectionalLight_Main_DONOTTOUCH' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, SkyLight_Main_DONOTTOUCH) == 0x0002A0, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::SkyLight_Main_DONOTTOUCH' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, SkyAtmosphere_Main_DONOTTOUCH) == 0x0002A8, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::SkyAtmosphere_Main_DONOTTOUCH' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, ExpoFog_Main_DONOTTOUCH) == 0x0002B0, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::ExpoFog_Main_DONOTTOUCH' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, Timeline_Float_D1799F134116507819661383658DED66) == 0x0002C0, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::Timeline_Float_D1799F134116507819661383658DED66' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, Timeline__Direction_D1799F134116507819661383658DED66) == 0x0002C4, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::Timeline__Direction_D1799F134116507819661383658DED66' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, Timeline) == 0x0002C8, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, CurrentDirectionalLightComponent) == 0x0002D0, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::CurrentDirectionalLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, CurrentExponentialHeightFogComponent) == 0x0002D8, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::CurrentExponentialHeightFogComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, TimelineFloat) == 0x0002E0, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::TimelineFloat' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, CurrentSkyLightComponent) == 0x0002E8, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::CurrentSkyLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, CurrentSkyAtmosphereComponent) == 0x0002F0, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::CurrentSkyAtmosphereComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, Change_Speed_Multiplier) == 0x0002F8, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::Change_Speed_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, Debug_NumberOfMainLightingScenarioCheck) == 0x0002FC, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::Debug_NumberOfMainLightingScenarioCheck' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, CurrentLightingScenario) == 0x000300, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::CurrentLightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, PreviousLightingScenario) == 0x000308, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::PreviousLightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, PreviousDirectionalLightComponent) == 0x000310, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::PreviousDirectionalLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, PreviousExponentialHeightFogComponent) == 0x000318, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::PreviousExponentialHeightFogComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, PreviousSkyLightComponent) == 0x000320, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::PreviousSkyLightComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, PreviousSkyAtmosphereComponent) == 0x000328, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::PreviousSkyAtmosphereComponent' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, DirectionalLightMaskTextureWhite) == 0x000330, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::DirectionalLightMaskTextureWhite' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, DirectionalLightMaskLightFunction) == 0x000338, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::DirectionalLightMaskLightFunction' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, DirectionalLightMaskTexturePrevious) == 0x000340, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::DirectionalLightMaskTexturePrevious' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, LightingScenarioBeforeBattle) == 0x000348, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::LightingScenarioBeforeBattle' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, TimerTickDirty) == 0x000350, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::TimerTickDirty' has a wrong offset!");
static_assert(offsetof(ABP_LighingScenarioMain_DONOTTOUCH_C, MarkDirtyRate) == 0x000358, "Member 'ABP_LighingScenarioMain_DONOTTOUCH_C::MarkDirtyRate' has a wrong offset!");

}

