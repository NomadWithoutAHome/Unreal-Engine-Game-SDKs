#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleMap

#include "Basic.hpp"

#include "BP_BattleMap_classes.hpp"
#include "BP_BattleMap_parameters.hpp"


namespace SDK
{

// Function BP_BattleMap.BP_BattleMap_C.CheckForErrors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_BattleMap_C::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "CheckForErrors");

	Params::BP_BattleMap_C_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function BP_BattleMap.BP_BattleMap_C.CheckForErrorsActorArray
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<TSoftObjectPtr<class AActor>>&   Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    ArrayName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_BattleMap_C::CheckForErrorsActorArray(const TArray<class FText>& ErrorMessages, TArray<TSoftObjectPtr<class AActor>>& Array, const class FString& ArrayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "CheckForErrorsActorArray");

	Params::BP_BattleMap_C_CheckForErrorsActorArray Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.Array = std::move(Array);
	Parms.ArrayName = std::move(ArrayName);

	UObject::ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
}


// Function BP_BattleMap.BP_BattleMap_C.CustomEvent_0
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleMap_C::CustomEvent_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "CustomEvent_0");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleMap.BP_BattleMap_C.EDITORCHECK_TraceFreeAimLineOfSight
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UChildActorComponent*             HeroSpot                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UChildActorComponent*             EnemySpot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EDrawDebugTrace                         DrawDebugType                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FHitResult*                      OutHit                                                 (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_BattleMap_C::EDITORCHECK_TraceFreeAimLineOfSight(class UChildActorComponent* HeroSpot, class UChildActorComponent* EnemySpot, EDrawDebugTrace DrawDebugType, struct FHitResult* OutHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "EDITORCHECK_TraceFreeAimLineOfSight");

	Params::BP_BattleMap_C_EDITORCHECK_TraceFreeAimLineOfSight Parms{};

	Parms.HeroSpot = HeroSpot;
	Parms.EnemySpot = EnemySpot;
	Parms.DrawDebugType = DrawDebugType;

	UObject::ProcessEvent(Func, &Parms);

	if (OutHit != nullptr)
		*OutHit = std::move(Parms.OutHit);

	return Parms.ReturnValue;
}


// Function BP_BattleMap.BP_BattleMap_C.ExecuteUbergraph_BP_BattleMap
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::ExecuteUbergraph_BP_BattleMap(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "ExecuteUbergraph_BP_BattleMap");

	Params::BP_BattleMap_C_ExecuteUbergraph_BP_BattleMap Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleMap.BP_BattleMap_C.FindBattleActorByTag
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// class AActor**                          Actor                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::FindBattleActorByTag(const struct FGameplayTag& Tag, class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "FindBattleActorByTag");

	Params::BP_BattleMap_C_FindBattleActorByTag Parms{};

	Parms.Tag = std::move(Tag);

	UObject::ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function BP_BattleMap.BP_BattleMap_C.GetAlliesSpots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UChildActorComponent*>*    Array                                                  (Parm, OutParm, ContainsInstancedReference)

void ABP_BattleMap_C::GetAlliesSpots(TArray<class UChildActorComponent*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "GetAlliesSpots");

	Params::BP_BattleMap_C_GetAlliesSpots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleMap.BP_BattleMap_C.GetAllSpots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UChildActorComponent*>*    Array                                                  (Parm, OutParm, ContainsInstancedReference)

void ABP_BattleMap_C::GetAllSpots(TArray<class UChildActorComponent*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "GetAllSpots");

	Params::BP_BattleMap_C_GetAllSpots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleMap.BP_BattleMap_C.GetAllSpotsActors
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class AActor*>*                  Array                                                  (Parm, OutParm)

void ABP_BattleMap_C::GetAllSpotsActors(TArray<class AActor*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "GetAllSpotsActors");

	Params::BP_BattleMap_C_GetAllSpotsActors Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleMap.BP_BattleMap_C.GetBattleSpotTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent*                  self2                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform ABP_BattleMap_C::GetBattleSpotTransform(class USceneComponent* self2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "GetBattleSpotTransform");

	Params::BP_BattleMap_C_GetBattleSpotTransform Parms{};

	Parms.self2 = self2;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleMap.BP_BattleMap_C.GetEnemiesSpots
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UChildActorComponent*>*    Array                                                  (Parm, OutParm, ContainsInstancedReference)

void ABP_BattleMap_C::GetEnemiesSpots(TArray<class UChildActorComponent*>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "GetEnemiesSpots");

	Params::BP_BattleMap_C_GetEnemiesSpots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BP_BattleMap.BP_BattleMap_C.GetFurthestBound
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Point                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::GetFurthestBound(struct FVector* Point)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "GetFurthestBound");

	Params::BP_BattleMap_C_GetFurthestBound Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Point != nullptr)
		*Point = std::move(Parms.Point);
}


// Function BP_BattleMap.BP_BattleMap_C.ProcessActorsToHide
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldHide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::ProcessActorsToHide(bool ShouldHide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "ProcessActorsToHide");

	Params::BP_BattleMap_C_ProcessActorsToHide Parms{};

	Parms.ShouldHide = ShouldHide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleMap.BP_BattleMap_C.ProcessActorsToUnhide
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldUnhide                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::ProcessActorsToUnhide(bool ShouldUnhide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "ProcessActorsToUnhide");

	Params::BP_BattleMap_C_ProcessActorsToUnhide Parms{};

	Parms.ShouldUnhide = ShouldUnhide;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleMap.BP_BattleMap_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BattleMap_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleMap.BP_BattleMap_C.RotationUpdateMap
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleMap_C::RotationUpdateMap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "RotationUpdateMap");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleMap.BP_BattleMap_C.SetBattleMapActive
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::SetBattleMapActive(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "SetBattleMapActive");

	Params::BP_BattleMap_C_SetBattleMapActive Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleMap.BP_BattleMap_C.SetBattleMapStreamingSourceActive
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Active                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BattleMap_C::SetBattleMapStreamingSourceActive(bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "SetBattleMapStreamingSourceActive");

	Params::BP_BattleMap_C_SetBattleMapStreamingSourceActive Parms{};

	Parms.Active = Active;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleMap.BP_BattleMap_C.ShouldProcessActorHiddenState
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_BattleMap_C::ShouldProcessActorHiddenState(class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "ShouldProcessActorHiddenState");

	Params::BP_BattleMap_C_ShouldProcessActorHiddenState Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_BattleMap.BP_BattleMap_C.SpawnPreviewActorAtSpot
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftClassPtr<class UClass>             ActorClass                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class USceneComponent*                  BattleSpotComponent                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_BattleMap_C::SpawnPreviewActorAtSpot(TSoftClassPtr<class UClass> ActorClass, class USceneComponent* BattleSpotComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "SpawnPreviewActorAtSpot");

	Params::BP_BattleMap_C_SpawnPreviewActorAtSpot Parms{};

	Parms.ActorClass = ActorClass;
	Parms.BattleSpotComponent = BattleSpotComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleMap.BP_BattleMap_C.TogglePreviewMeshes
// (BlueprintCallable, BlueprintEvent)

void ABP_BattleMap_C::TogglePreviewMeshes()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "TogglePreviewMeshes");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleMap.BP_BattleMap_C.UpdateCamerasLookAtPoints
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleMap_C::UpdateCamerasLookAtPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "UpdateCamerasLookAtPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleMap.BP_BattleMap_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_BattleMap_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleMap_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

