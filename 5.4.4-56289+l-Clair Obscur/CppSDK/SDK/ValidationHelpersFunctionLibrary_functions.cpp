#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ValidationHelpersFunctionLibrary

#include "Basic.hpp"

#include "ValidationHelpersFunctionLibrary_classes.hpp"
#include "ValidationHelpersFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckComponentReferenceList
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FComponentReference>&     Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           OwningActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckComponentReferenceList(TArray<struct FComponentReference>& Array, TArray<class FText>& ErrorMessages, const class FString& Context, class AActor* OwningActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckComponentReferenceList");

	Params::ValidationHelpersFunctionLibrary_C_CheckComponentReferenceList Parms{};

	Parms.Array = std::move(Array);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.Context = std::move(Context);
	Parms.OwningActor = OwningActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
	ErrorMessages = std::move(Parms.ErrorMessages);
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckDataRowHandle
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       DataRowHandle                                          (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    VariableName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckDataRowHandle(const struct FDataTableRowHandle& DataRowHandle, const TArray<class FText>& ErrorMessages, const class FString& VariableName, class UObject* __WorldContext, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckDataRowHandle");

	Params::ValidationHelpersFunctionLibrary_C_CheckDataRowHandle Parms{};

	Parms.DataRowHandle = std::move(DataRowHandle);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.VariableName = std::move(VariableName);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckForNone
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UObject*>&                 List                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    ListName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckForNone(TArray<class UObject*>& List, const TArray<class FText>& ErrorMessages, const class FString& ListName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckForNone");

	Params::ValidationHelpersFunctionLibrary_C_CheckForNone Parms{};

	Parms.List = std::move(List);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.ListName = std::move(ListName);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	List = std::move(Parms.List);
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckForNone_Internal
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          EditorValidator                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class UObject*>&                 List                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    ListName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckForNone_Internal(class UObject* EditorValidator, TArray<class UObject*>& List, const TArray<class FText>& ErrorMessages, const class FString& ListName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckForNone_Internal");

	Params::ValidationHelpersFunctionLibrary_C_CheckForNone_Internal Parms{};

	Parms.EditorValidator = EditorValidator;
	Parms.List = std::move(List);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.ListName = std::move(ListName);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	List = std::move(Parms.List);
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckForNoneAndNotEmpty
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UObject*>&                 List                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    ListName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckForNoneAndNotEmpty(TArray<class UObject*>& List, const TArray<class FText>& ErrorMessages, const class FString& ListName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckForNoneAndNotEmpty");

	Params::ValidationHelpersFunctionLibrary_C_CheckForNoneAndNotEmpty Parms{};

	Parms.List = std::move(List);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.ListName = std::move(ListName);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	List = std::move(Parms.List);
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckForNoneSoftRef
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class UObject>>&  List                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    ListName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckForNoneSoftRef(TArray<TSoftObjectPtr<class UObject>>& List, const TArray<class FText>& ErrorMessages, const class FString& ListName, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckForNoneSoftRef");

	Params::ValidationHelpersFunctionLibrary_C_CheckForNoneSoftRef Parms{};

	Parms.List = std::move(List);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.ListName = std::move(ListName);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	List = std::move(Parms.List);
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckGPEActions
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FFGPEAction>&             Array                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    Context                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class AActor*                           OwningActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckGPEActions(TArray<struct FFGPEAction>& Array, TArray<class FText>& ErrorMessages, const class FString& Context, class AActor* OwningActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckGPEActions");

	Params::ValidationHelpersFunctionLibrary_C_CheckGPEActions Parms{};

	Parms.Array = std::move(Array);
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.Context = std::move(Context);
	Parms.OwningActor = OwningActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Array = std::move(Parms.Array);
	ErrorMessages = std::move(Parms.ErrorMessages);
}


// Function ValidationHelpersFunctionLibrary.ValidationHelpersFunctionLibrary_C.CheckIsValid
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Object                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const TArray<class FText>&              ErrorMessages                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    VariableName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          ValidatorContext                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UValidationHelpersFunctionLibrary_C::CheckIsValid(class UObject* Object, const TArray<class FText>& ErrorMessages, const class FString& VariableName, class UObject* ValidatorContext, class UObject* __WorldContext, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ValidationHelpersFunctionLibrary_C", "CheckIsValid");

	Params::ValidationHelpersFunctionLibrary_C_CheckIsValid Parms{};

	Parms.Object = Object;
	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.VariableName = std::move(VariableName);
	Parms.ValidatorContext = ValidatorContext;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}

}

