#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WorldMapPromptContainer

#include "Basic.hpp"

#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.ExecuteUbergraph_WBP_WorldMapPromptContainer
// 0x0020 (0x0020 - 0x0000)
struct WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer) == 0x000008, "Wrong alignment on WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer) == 0x000020, "Wrong size on WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer, EntryPoint) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer, CallFunc_GetCustomGI_ReturnValue) == 0x000008, "Member 'WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'WBP_WorldMapPromptContainer_C_ExecuteUbergraph_WBP_WorldMapPromptContainer::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.OnAnyWorldMapCapacityUnlocked
// 0x0005 (0x0005 - 0x0000)
struct WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasWorldMapCapacity_Result;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked) == 0x000001, "Wrong alignment on WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked) == 0x000005, "Wrong size on WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked, Temp_bool_Variable) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked, Temp_byte_Variable) == 0x000001, "Member 'WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked, CallFunc_HasWorldMapCapacity_Result) == 0x000003, "Member 'WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked::CallFunc_HasWorldMapCapacity_Result' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked, K2Node_Select_Default) == 0x000004, "Member 'WBP_WorldMapPromptContainer_C_OnAnyWorldMapCapacityUnlocked::K2Node_Select_Default' has a wrong offset!");

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.OnMountRequested
// 0x0005 (0x0005 - 0x0000)
struct WBP_WorldMapPromptContainer_C_OnMountRequested final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasWorldMapCapacity_Result;               // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_OnMountRequested) == 0x000001, "Wrong alignment on WBP_WorldMapPromptContainer_C_OnMountRequested");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_OnMountRequested) == 0x000005, "Wrong size on WBP_WorldMapPromptContainer_C_OnMountRequested");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnMountRequested, Temp_bool_Variable) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_OnMountRequested::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnMountRequested, Temp_byte_Variable) == 0x000001, "Member 'WBP_WorldMapPromptContainer_C_OnMountRequested::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnMountRequested, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_WorldMapPromptContainer_C_OnMountRequested::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnMountRequested, CallFunc_HasWorldMapCapacity_Result) == 0x000003, "Member 'WBP_WorldMapPromptContainer_C_OnMountRequested::CallFunc_HasWorldMapCapacity_Result' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_OnMountRequested, K2Node_Select_Default) == 0x000004, "Member 'WBP_WorldMapPromptContainer_C_OnMountRequested::K2Node_Select_Default' has a wrong offset!");

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.SetCampPossible
// 0x0001 (0x0001 - 0x0000)
struct WBP_WorldMapPromptContainer_C_SetCampPossible final
{
public:
	bool                                          CanCamp;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_SetCampPossible) == 0x000001, "Wrong alignment on WBP_WorldMapPromptContainer_C_SetCampPossible");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_SetCampPossible) == 0x000001, "Wrong size on WBP_WorldMapPromptContainer_C_SetCampPossible");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetCampPossible, CanCamp) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_SetCampPossible::CanCamp' has a wrong offset!");

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.SetIsFlying
// 0x0048 (0x0048 - 0x0000)
struct WBP_WorldMapPromptContainer_C_SetIsFlying final
{
public:
	bool                                          IsFlying;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Temp_text_Variable;                                // 0x0008(0x0010)()
	class FText                                   Temp_text_Variable_1;                              // 0x0018(0x0010)()
	bool                                          Temp_bool_Variable_1;                              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Select_Default;                             // 0x0030(0x0010)()
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_SetIsFlying) == 0x000008, "Wrong alignment on WBP_WorldMapPromptContainer_C_SetIsFlying");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_SetIsFlying) == 0x000048, "Wrong size on WBP_WorldMapPromptContainer_C_SetIsFlying");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, IsFlying) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::IsFlying' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_byte_Variable) == 0x000001, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_bool_Variable) == 0x000003, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_text_Variable) == 0x000008, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_text_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_text_Variable_1) == 0x000018, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_text_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_bool_Variable_1) == 0x000028, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, K2Node_Select_Default) == 0x000030, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_byte_Variable_2) == 0x000040, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_byte_Variable_3) == 0x000041, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, K2Node_Select_Default_1) == 0x000042, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, Temp_bool_Variable_2) == 0x000043, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetIsFlying, K2Node_Select_Default_2) == 0x000044, "Member 'WBP_WorldMapPromptContainer_C_SetIsFlying::K2Node_Select_Default_2' has a wrong offset!");

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.SetLandPossible
// 0x0001 (0x0001 - 0x0000)
struct WBP_WorldMapPromptContainer_C_SetLandPossible final
{
public:
	bool                                          CanLand;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_SetLandPossible) == 0x000001, "Wrong alignment on WBP_WorldMapPromptContainer_C_SetLandPossible");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_SetLandPossible) == 0x000001, "Wrong size on WBP_WorldMapPromptContainer_C_SetLandPossible");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetLandPossible, CanLand) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_SetLandPossible::CanLand' has a wrong offset!");

// Function WBP_WorldMapPromptContainer.WBP_WorldMapPromptContainer_C.SetMountPossible
// 0x0001 (0x0001 - 0x0000)
struct WBP_WorldMapPromptContainer_C_SetMountPossible final
{
public:
	bool                                          CanMount;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapPromptContainer_C_SetMountPossible) == 0x000001, "Wrong alignment on WBP_WorldMapPromptContainer_C_SetMountPossible");
static_assert(sizeof(WBP_WorldMapPromptContainer_C_SetMountPossible) == 0x000001, "Wrong size on WBP_WorldMapPromptContainer_C_SetMountPossible");
static_assert(offsetof(WBP_WorldMapPromptContainer_C_SetMountPossible, CanMount) == 0x000000, "Member 'WBP_WorldMapPromptContainer_C_SetMountPossible::CanMount' has a wrong offset!");

}

