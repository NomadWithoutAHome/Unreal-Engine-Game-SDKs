#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemInstance_Base

#include "Basic.hpp"

#include "E_jRPG_ItemType_structs.hpp"
#include "S_jRPG_Item_StaticData_structs.hpp"
#include "S_LootContext_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GenerateItem
// 0x01B8 (0x01B8 - 0x0000)
struct BP_ItemInstance_Base_C_GenerateItem final
{
public:
	struct FS_jRPG_Item_StaticData                ItemStaticItem;                                    // 0x0000(0x0130)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_LootContext                         LootContext;                                       // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           GeneratedItemInfo;                                 // 0x0138(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0140(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0150(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0198(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GenerateItem) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_GenerateItem");
static_assert(sizeof(BP_ItemInstance_Base_C_GenerateItem) == 0x0001B8, "Wrong size on BP_ItemInstance_Base_C_GenerateItem");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, ItemStaticItem) == 0x000000, "Member 'BP_ItemInstance_Base_C_GenerateItem::ItemStaticItem' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, LootContext) == 0x000130, "Member 'BP_ItemInstance_Base_C_GenerateItem::LootContext' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, GeneratedItemInfo) == 0x000138, "Member 'BP_ItemInstance_Base_C_GenerateItem::GeneratedItemInfo' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, CallFunc_Conv_NameToText_ReturnValue) == 0x000140, "Member 'BP_ItemInstance_Base_C_GenerateItem::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, K2Node_MakeStruct_FormatArgumentData) == 0x000150, "Member 'BP_ItemInstance_Base_C_GenerateItem::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, K2Node_MakeArray_Array) == 0x000198, "Member 'BP_ItemInstance_Base_C_GenerateItem::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_GenerateItem, CallFunc_Format_ReturnValue) == 0x0001A8, "Member 'BP_ItemInstance_Base_C_GenerateItem::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GetChromaValue
// 0x0004 (0x0004 - 0x0000)
struct BP_ItemInstance_Base_C_GetChromaValue final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GetChromaValue) == 0x000004, "Wrong alignment on BP_ItemInstance_Base_C_GetChromaValue");
static_assert(sizeof(BP_ItemInstance_Base_C_GetChromaValue) == 0x000004, "Wrong size on BP_ItemInstance_Base_C_GetChromaValue");
static_assert(offsetof(BP_ItemInstance_Base_C_GetChromaValue, ReturnValue) == 0x000000, "Member 'BP_ItemInstance_Base_C_GetChromaValue::ReturnValue' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.MergeItem
// 0x0008 (0x0008 - 0x0000)
struct BP_ItemInstance_Base_C_MergeItem final
{
public:
	class UBP_ItemInstance_Base_C*                OtherItemInstance;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_MergeItem) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_MergeItem");
static_assert(sizeof(BP_ItemInstance_Base_C_MergeItem) == 0x000008, "Wrong size on BP_ItemInstance_Base_C_MergeItem");
static_assert(offsetof(BP_ItemInstance_Base_C_MergeItem, OtherItemInstance) == 0x000000, "Member 'BP_ItemInstance_Base_C_MergeItem::OtherItemInstance' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.BPI_ShouldShowNotification
// 0x0018 (0x0018 - 0x0000)
struct BP_ItemInstance_Base_C_BPI_ShouldShowNotification final
{
public:
	bool                                          bShouldShow;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_InventoryManager_C*            CallFunc_GetInventoryManager_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldItemBeNotified_IsNotified;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_BPI_ShouldShowNotification) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_BPI_ShouldShowNotification");
static_assert(sizeof(BP_ItemInstance_Base_C_BPI_ShouldShowNotification) == 0x000018, "Wrong size on BP_ItemInstance_Base_C_BPI_ShouldShowNotification");
static_assert(offsetof(BP_ItemInstance_Base_C_BPI_ShouldShowNotification, bShouldShow) == 0x000000, "Member 'BP_ItemInstance_Base_C_BPI_ShouldShowNotification::bShouldShow' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_BPI_ShouldShowNotification, CallFunc_GetInventoryManager_ReturnValue) == 0x000008, "Member 'BP_ItemInstance_Base_C_BPI_ShouldShowNotification::CallFunc_GetInventoryManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_BPI_ShouldShowNotification, CallFunc_ShouldItemBeNotified_IsNotified) == 0x000010, "Member 'BP_ItemInstance_Base_C_BPI_ShouldShowNotification::CallFunc_ShouldItemBeNotified_IsNotified' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.SetQuantity
// 0x0004 (0x0004 - 0x0000)
struct BP_ItemInstance_Base_C_SetQuantity final
{
public:
	int32                                         Quantity_0;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_SetQuantity) == 0x000004, "Wrong alignment on BP_ItemInstance_Base_C_SetQuantity");
static_assert(sizeof(BP_ItemInstance_Base_C_SetQuantity) == 0x000004, "Wrong size on BP_ItemInstance_Base_C_SetQuantity");
static_assert(offsetof(BP_ItemInstance_Base_C_SetQuantity, Quantity_0) == 0x000000, "Member 'BP_ItemInstance_Base_C_SetQuantity::Quantity_0' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GetAcquiredPlayTime
// 0x0008 (0x0008 - 0x0000)
struct BP_ItemInstance_Base_C_GetAcquiredPlayTime final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GetAcquiredPlayTime) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_GetAcquiredPlayTime");
static_assert(sizeof(BP_ItemInstance_Base_C_GetAcquiredPlayTime) == 0x000008, "Wrong size on BP_ItemInstance_Base_C_GetAcquiredPlayTime");
static_assert(offsetof(BP_ItemInstance_Base_C_GetAcquiredPlayTime, ReturnValue) == 0x000000, "Member 'BP_ItemInstance_Base_C_GetAcquiredPlayTime::ReturnValue' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GetItemStaticData
// 0x0130 (0x0130 - 0x0000)
struct BP_ItemInstance_Base_C_GetItemStaticData final
{
public:
	struct FS_jRPG_Item_StaticData                ItemStaticData_0;                                  // 0x0000(0x0130)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GetItemStaticData) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_GetItemStaticData");
static_assert(sizeof(BP_ItemInstance_Base_C_GetItemStaticData) == 0x000130, "Wrong size on BP_ItemInstance_Base_C_GetItemStaticData");
static_assert(offsetof(BP_ItemInstance_Base_C_GetItemStaticData, ItemStaticData_0) == 0x000000, "Member 'BP_ItemInstance_Base_C_GetItemStaticData::ItemStaticData_0' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GetQuantity
// 0x0004 (0x0004 - 0x0000)
struct BP_ItemInstance_Base_C_GetQuantity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GetQuantity) == 0x000004, "Wrong alignment on BP_ItemInstance_Base_C_GetQuantity");
static_assert(sizeof(BP_ItemInstance_Base_C_GetQuantity) == 0x000004, "Wrong size on BP_ItemInstance_Base_C_GetQuantity");
static_assert(offsetof(BP_ItemInstance_Base_C_GetQuantity, ReturnValue) == 0x000000, "Member 'BP_ItemInstance_Base_C_GetQuantity::ReturnValue' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GetItemDefinitionID
// 0x0008 (0x0008 - 0x0000)
struct BP_ItemInstance_Base_C_GetItemDefinitionID final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GetItemDefinitionID) == 0x000004, "Wrong alignment on BP_ItemInstance_Base_C_GetItemDefinitionID");
static_assert(sizeof(BP_ItemInstance_Base_C_GetItemDefinitionID) == 0x000008, "Wrong size on BP_ItemInstance_Base_C_GetItemDefinitionID");
static_assert(offsetof(BP_ItemInstance_Base_C_GetItemDefinitionID, ReturnValue) == 0x000000, "Member 'BP_ItemInstance_Base_C_GetItemDefinitionID::ReturnValue' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.BPI_OnMarkNotificationAsRead
// 0x0008 (0x0008 - 0x0000)
struct BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead final
{
public:
	class UUserWidget*                            MarkCaller;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead");
static_assert(sizeof(BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead) == 0x000008, "Wrong size on BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead");
static_assert(offsetof(BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead, MarkCaller) == 0x000000, "Member 'BP_ItemInstance_Base_C_BPI_OnMarkNotificationAsRead::MarkCaller' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.ExecuteUbergraph_BP_ItemInstance_Base
// 0x0018 (0x0018 - 0x0000)
struct BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            K2Node_Event_MarkCaller;                           // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_InventoryManager_C*            CallFunc_GetInventoryManager_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base) == 0x000008, "Wrong alignment on BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base");
static_assert(sizeof(BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base) == 0x000018, "Wrong size on BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base");
static_assert(offsetof(BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base, EntryPoint) == 0x000000, "Member 'BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base, K2Node_Event_MarkCaller) == 0x000008, "Member 'BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base::K2Node_Event_MarkCaller' has a wrong offset!");
static_assert(offsetof(BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base, CallFunc_GetInventoryManager_ReturnValue) == 0x000010, "Member 'BP_ItemInstance_Base_C_ExecuteUbergraph_BP_ItemInstance_Base::CallFunc_GetInventoryManager_ReturnValue' has a wrong offset!");

// Function BP_ItemInstance_Base.BP_ItemInstance_Base_C.GetItemType
// 0x0001 (0x0001 - 0x0000)
struct BP_ItemInstance_Base_C_GetItemType final
{
public:
	E_jRPG_ItemType                               Item_Type;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemInstance_Base_C_GetItemType) == 0x000001, "Wrong alignment on BP_ItemInstance_Base_C_GetItemType");
static_assert(sizeof(BP_ItemInstance_Base_C_GetItemType) == 0x000001, "Wrong size on BP_ItemInstance_Base_C_GetItemType");
static_assert(offsetof(BP_ItemInstance_Base_C_GetItemType, Item_Type) == 0x000000, "Member 'BP_ItemInstance_Base_C_GetItemType::Item_Type' has a wrong offset!");

}

