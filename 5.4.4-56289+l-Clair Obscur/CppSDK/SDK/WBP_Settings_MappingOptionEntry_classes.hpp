#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Settings_MappingOptionEntry

#include "Basic.hpp"

#include "EnhancedInput_structs.hpp"
#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "InputCore_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_Settings_MappingOptionEntry.WBP_Settings_MappingOptionEntry_C
// 0x0168 (0x0470 - 0x0308)
class UWBP_Settings_MappingOptionEntry_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ShowStain;                                    // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonLazyImage*                       HoveredStain;                                      // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UKiBLIIInputKeySelector*                InputKeySelector;                                  // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_WrappingText_C*                    MappingNameText;                                   // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class FText                                   OptionName;                                        // 0x0330(0x0010)(Edit, BlueprintVisible)
	TMulticastInlineDelegate<void(class UWBP_Settings_MappingOptionEntry_C* Widget)> OnOptionEntryFocused; // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnOptionEntryUnfocused;                            // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FText                                   OptionDescription;                                 // 0x0360(0x0010)(Edit, BlueprintVisible)
	struct FGameplayTagContainer                  AvailableOnPlatform;                               // 0x0370(0x0020)(Edit, BlueprintVisible)
	struct FSoundEventDataTableRowHandle          SD_OnFocused;                                      // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FKeyMappingRow                         KeyMappings;                                       // 0x03A0(0x0050)(Edit, BlueprintVisible, ExposeOnSpawn)
	TMulticastInlineDelegate<void(class UWBP_Settings_MappingOptionEntry_C* MappingEntry, const struct FMapPlayerKeyArgs& NewMapping)> OnKeyUpdated; // 0x03F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FKey                                   Default_Key;                                       // 0x0400(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class FName                                   MappingName;                                       // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMapPlayerKeyArgs                      NewMapping;                                        // 0x0420(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           ConflictCategories;                                // 0x0460(0x0010)(Edit, BlueprintVisible)

public:
	void BndEvt__WBP_Settings_MappingOptionEntry_InputKeySelector_K2Node_ComponentBoundEvent_0_OnIsSelectingKeyChanged__DelegateSignature();
	void BndEvt__WBP_Settings_MappingOptionEntry_InputKeySelector_Slot1_K2Node_ComponentBoundEvent_1_OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey);
	void ExecuteUbergraph_WBP_Settings_MappingOptionEntry(int32 EntryPoint);
	void GetConflictCategories(TArray<class FName>* ConflictCategories_0);
	void GetKeyMapping(struct FKeyMappingRow* KeyMappings_0);
	void GetMappingName(class FName* MappingName_0);
	void GetNewMapping(struct FMapPlayerKeyArgs* NewMapping_0);
	void IsAvailableOnCurrentPlatform(const struct FGameplayTag& CurrentPlatformTag, bool* IsAvailable);
	void OnAddedToFocusPath(const struct FFocusEvent& InFocusEvent);
	void OnFocusBackToBaseButton();
	void OnMouseEnter(const struct FGeometry& MyGeometry, const struct FPointerEvent& MouseEvent);
	void OnMouseLeave(const struct FPointerEvent& MouseEvent);
	void OnRemovedFromFocusPath(const struct FFocusEvent& InFocusEvent);
	void PreConstruct(bool IsDesignTime);
	void ResetToCurrentMapping();
	void SetKeyMapping(const struct FKeyMappingRow& KeyMappings_0);
	void SetMappingsSlotToNone();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_Settings_MappingOptionEntry_C">();
	}
	static class UWBP_Settings_MappingOptionEntry_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_Settings_MappingOptionEntry_C>();
	}
};
static_assert(alignof(UWBP_Settings_MappingOptionEntry_C) == 0x000008, "Wrong alignment on UWBP_Settings_MappingOptionEntry_C");
static_assert(sizeof(UWBP_Settings_MappingOptionEntry_C) == 0x000470, "Wrong size on UWBP_Settings_MappingOptionEntry_C");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, UberGraphFrame) == 0x000308, "Member 'UWBP_Settings_MappingOptionEntry_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, Anim_ShowStain) == 0x000310, "Member 'UWBP_Settings_MappingOptionEntry_C::Anim_ShowStain' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, HoveredStain) == 0x000318, "Member 'UWBP_Settings_MappingOptionEntry_C::HoveredStain' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, InputKeySelector) == 0x000320, "Member 'UWBP_Settings_MappingOptionEntry_C::InputKeySelector' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, MappingNameText) == 0x000328, "Member 'UWBP_Settings_MappingOptionEntry_C::MappingNameText' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, OptionName) == 0x000330, "Member 'UWBP_Settings_MappingOptionEntry_C::OptionName' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, OnOptionEntryFocused) == 0x000340, "Member 'UWBP_Settings_MappingOptionEntry_C::OnOptionEntryFocused' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, OnOptionEntryUnfocused) == 0x000350, "Member 'UWBP_Settings_MappingOptionEntry_C::OnOptionEntryUnfocused' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, OptionDescription) == 0x000360, "Member 'UWBP_Settings_MappingOptionEntry_C::OptionDescription' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, AvailableOnPlatform) == 0x000370, "Member 'UWBP_Settings_MappingOptionEntry_C::AvailableOnPlatform' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, SD_OnFocused) == 0x000390, "Member 'UWBP_Settings_MappingOptionEntry_C::SD_OnFocused' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, KeyMappings) == 0x0003A0, "Member 'UWBP_Settings_MappingOptionEntry_C::KeyMappings' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, OnKeyUpdated) == 0x0003F0, "Member 'UWBP_Settings_MappingOptionEntry_C::OnKeyUpdated' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, Default_Key) == 0x000400, "Member 'UWBP_Settings_MappingOptionEntry_C::Default_Key' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, MappingName) == 0x000418, "Member 'UWBP_Settings_MappingOptionEntry_C::MappingName' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, NewMapping) == 0x000420, "Member 'UWBP_Settings_MappingOptionEntry_C::NewMapping' has a wrong offset!");
static_assert(offsetof(UWBP_Settings_MappingOptionEntry_C, ConflictCategories) == 0x000460, "Member 'UWBP_Settings_MappingOptionEntry_C::ConflictCategories' has a wrong offset!");

}

