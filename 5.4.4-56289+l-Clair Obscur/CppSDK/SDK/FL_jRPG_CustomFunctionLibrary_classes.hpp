#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FL_jRPG_CustomFunctionLibrary

#include "Basic.hpp"

#include "E_jRPG_ItemSubtype_structs.hpp"
#include "EAttributeScalingGrade_structs.hpp"
#include "EWeaponQuality_structs.hpp"
#include "Engine_classes.hpp"
#include "EAttackType_structs.hpp"
#include "E_Perfection_Ranks_structs.hpp"
#include "E_CharacterList_structs.hpp"
#include "BlueprintSorting_structs.hpp"
#include "ESkillElementOverride_structs.hpp"
#include "E_StanceType_structs.hpp"
#include "E_Characters_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "ECharacterAttribute_structs.hpp"
#include "EInputAction_structs.hpp"
#include "EFaceActions_structs.hpp"
#include "E_jRPG_ActionType_structs.hpp"
#include "E_jRPG_ItemRarity_structs.hpp"
#include "E_jRPG_ItemType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass FL_jRPG_CustomFunctionLibrary.FL_jRPG_CustomFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UFL_jRPG_CustomFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Change_Map_Internal(struct FFLevelDataEntry& LevelData, const struct FGameplayTag& SpawnPointTag, class UObject* __WorldContext);
	static void ChangeMapByAssetName(const class FName LevelAssetName, const struct FGameplayTag& SpawnPointTag, class UObject* __WorldContext);
	static TArray<class UDataTable*> GetAllLevelDataDTs(class UObject* __WorldContext);
	static E_CharacterList GetCharacterListEnum_FromID(class FName HardcodedName, class UObject* __WorldContext);
	static class FText GetPerfectionRankDisplayName(E_Perfection_Ranks PerfectionRank, class UObject* __WorldContext);
	static class FText GetStanceDisplayName(E_StanceType StanceType, class UObject* __WorldContext);
	static E_Characters GetCharacterEnum_FromID(class FName HardcodedName, class UObject* __WorldContext);
	static void ShowLootPopupFromGeneratedItem(const class UBP_GeneratedItemInfo_Base_C*& GeneratedItem, class UObject* __WorldContext);
	static void ShowLootPopupFromGeneratedItems(const TArray<class UBP_GeneratedItemInfo_Base_C*>& GeneratedItems, class UObject* __WorldContext);
	static void GetMaximumLevel(class UObject* __WorldContext, int32* Level);
	static struct FS_WeaponScalingLevel GetWeaponScalingLevel(int32 Level, class UObject* __WorldContext);
	static class UBP_DataAsset_EnemyBattleArchetype_C* GetEnemyArchetypeAsset(const struct FS_jRPG_Enemy& EnemyData, class UObject* __WorldContext);
	static class FText GetDynamicElementOverrideDisplayName(ESkillElementOverride DynamicElementOverride, class UObject* __WorldContext);
	static void GetWeaponInstanceFromID(class FName WeaponID, class UObject* __WorldContext, bool* Found, struct FS_WeaponInstanceData* WeaponInstanceData);
	static void GetItemID(const struct FS_jRPG_Item_StaticData& ItemStaticData, class UObject* __WorldContext, class FName* ItemId);
	static struct FS_WeaponDefinition GetWeaponDefinitionFromItem(const struct FS_jRPG_Item_StaticData& WeaponStaticItem, class UObject* __WorldContext, bool* Found);
	static void GetWeaponInstanceFromItem(const struct FS_jRPG_Item_StaticData& WeaponStaticItem, class UObject* __WorldContext, bool* Found, struct FS_WeaponInstanceData* WeaponInstanceData);
	static class UDataTable* GetLevelDataDT(class UObject* __WorldContext);
	static bool IsCurrentLevelMainMenu(class UObject* __WorldContext);
	static void GetItemStaticDefinitionRowNames(class UObject* __WorldContext, TArray<class FName>* OutRowNames);
	static bool IsNameValid(class FName Value, class UObject* __WorldContext);
	static struct FLinearColor GetErrorTextColor(class UObject* __WorldContext);
	static class FString GetAttackTypeRichTextDecorator(EAttackType AttackType, class UObject* __WorldContext);
	static class FText GetAttackTypeDisplayName(EAttackType AttackType, class UObject* __WorldContext);
	static ESortOrdering CompareStringsOrder(const class FString& A, const class FString& B, class UObject* __WorldContext);
	static class FName GetCharacterID_FromEnum(E_Characters Index_0, class UObject* __WorldContext);
	static bool IsItemDynamicDataValid(const struct FS_jRPG_Item_DynamicData& ItemDynamicData, class UObject* __WorldContext);
	static bool CompareItemQuality(EWeaponQuality ItemQualityA, EWeaponQuality ItemQualityB, uint8 ComparisonMethod, class UObject* __WorldContext);
	static struct FLinearColor GetColorVariationForText(const struct FLinearColor& InColor, class UObject* __WorldContext);
	static struct FLinearColor GetItemQualityColor(EWeaponQuality ItemQuality, class UObject* __WorldContext);
	static class FText GetItemQualityDisplayName(EWeaponQuality ItemQuality, class UObject* __WorldContext);
	static void GetWeaponDefinition(class FName RowName, class UObject* __WorldContext, bool* Found, struct FS_WeaponDefinition* OutRow);
	static class FText GetAttributeScalingGradeDisplayName(EAttributeScalingGrade CharacterAttribute, class UObject* __WorldContext);
	static class FText GetAttributeDisplayName(ECharacterAttribute CharacterAttribute, class UObject* __WorldContext);
	static class UBP_jRPG_GI_Custom_C* GetCustomGI(class UObject* __WorldContext);
	static void StatTypeToTextLong(E_jRPG_StatType StatType, class UObject* __WorldContext, class FText* Text);
	static void AttributeTypeToText(ECharacterAttribute AttributeType, class UObject* __WorldContext, class FText* Text);
	static void FindSubAreaName(const struct FFLevelDataEntry& LevelData, const struct FGameplayTag& SpawnPointTag, class FName SpawnPointName, class UObject* __WorldContext, class FText* Name_0, bool* Found);
	static void GetGameActionFromWrapperPure(const struct FGameAction_Wrapper& GameActionWrapper, class UObject* __WorldContext, class UGameAction** GameAction);
	static void ProcessScreenSpaceFogScatteringParameters(const struct FS_ScreenSpaceFogScatteringParameters& Parameters, class UObject* __WorldContext);
	static void GetGameActionFromWrapper(const struct FGameAction_Wrapper& GameActionWrapper, class UObject* __WorldContext, class UGameAction** GameAction);
	static bool IsCurrentLevelProductionLevel(class UObject* __WorldContext);
	static void ChangeMapByName(const class FName LevelDestination, const struct FGameplayTag& SpawnPointTag, class UObject* __WorldContext);
	static void PLACEHOLDER_GetWeaponScalings(const struct FS_jRPG_Item_StaticData& Item, class UBP_CharacterData_C* Character, class UObject* __WorldContext, class FText* Result);
	static void CharacterEquipmentAssignmentToString(const struct FFCharacterAssignedEquipment& Assignment, class UObject* __WorldContext, class FString* Value);
	static void NotifyLuminaPassiveEffectBuff(class UBP_BattleBuffInstance_C* BuffInstance, class UObject* __WorldContext);
	static void PlaySoundEvent_Music(struct FFSoundEvent& SoundEvent, class UObject* __WorldContext);
	static void ExecuteGameActionWrapper(const struct FGameAction_Wrapper& GameActionWrapper, class UObject* __WorldContext);
	static class UBP_CharacterReactionSystem_C* GetCharacterReactionSystem(class UObject* __WorldContext);
	static void PlaySoundEvent_Actor(const struct FFSoundEvent& SoundEvent, class AActor* Actor, class UObject* __WorldContext);
	static void RemapStatMultiplierToIntensity(double StatMultiplier, class UObject* __WorldContext, int32* FeedbackIntensity);
	static void RemapPartyIndexToBattleSpotIndex(int32 PartyIndex, int32 PartyCount, class UObject* __WorldContext, int32* SpotIndex);
	static void GetEnemyIndexesLeftToRight(class UObject* __WorldContext, TArray<int32>* IndexMapping);
	static void GetExperienceNeededToLevelUp(int32 CurrentLevel, class UObject* __WorldContext, int32* ExperienceNeeded);
	static bool EqualsEquipmentSlot(const struct FFEquipmentSlot& EquipmentSlot1, const struct FFEquipmentSlot& EquipmentSlot2, class UObject* __WorldContext);
	static void GetGameActionButtonTexture(EInputAction GameAction, class UObject* __WorldContext, class UTexture2D** ButtonTexture);
	static void GetImprovedItemDescription(const struct FS_jRPG_Item_StaticData& Item, class UObject* __WorldContext, class FText* Description);
	static void GetImprovedItemName(const struct FS_jRPG_Item_StaticData& Item, class UObject* __WorldContext, class FText* Name_0);
	static void GetPictosUnlockedPassiveEffects(struct FS_jRPG_Item_StaticData& Item, class UObject* __WorldContext, TArray<class FName>* PassiveEffects);
	static void GetPassiveEffectDefinition(class FName PassiveEffectID, class UObject* __WorldContext, struct FFPassiveEffect* PassiveEffect, bool* Found);
	static double GetLuminaProgression(const struct FFPassiveEffectProgression& PassiveProgression, class UObject* __WorldContext);
	static void EquipmentSlotToString(const struct FFEquipmentSlot& Slot, class UObject* __WorldContext, class FText* Result);
	static void GetCharacterHardcodedName(struct FS_jRPG_CharacterSaveState& Character, class UObject* __WorldContext, class FName* CharacterHardcodedName);
	static class UAC_jRPG_InventoryManager_C* GetInventoryManager(class UObject* __WorldContext);
	static void GetGameplayActionInlineTextTag(EInputAction GameAction, class UObject* __WorldContext, class FName* Row_Name);
	static class UBP_InteractionSystem_C* GetInteractionSystem(class UObject* __WorldContext);
	static void HideExplorationPrompt(struct FFPromptID& PromptID, class UObject* __WorldContext);
	static void ShowExplorationPromptAtWorldLocation(const struct FVector& Location, const struct FFPromptParams& PromptParams, struct FFPromptID& OutPromptID, class UObject* __WorldContext);
	static void ShowExplorationPromptOnActor(class AActor* Actor, const struct FVector& Offset, const struct FFPromptParams& PromptParams, class UObject* __WorldContext, struct FFPromptID* PromptID);
	static void ShowExplorationPrompt2D(class UObject* __WorldContext);
	static void ShowLootPopUp(const TMap<class FName, int32>& ItemType_Quantity, class UObject* __WorldContext);
	static void GetFaceActionButtonTexture_PLACEHOLDER(EFaceActions FaceAction, class UObject* __WorldContext, class UTexture2D** Texture);
	static void GetFaceActionIconTexture_PLACEHOLDER(EFaceActions FaceAction, class UObject* __WorldContext, class UTexture2D** Texture);
	static void GetFaceActionInlineTextTag(EFaceActions FaceAction, class UObject* __WorldContext, class FString* Text);
	static class UBP_CinematicSystem_C* GetCinematicsSystem(class UObject* __WorldContext);
	static void GetInputManager(class UObject* __WorldContext, class UBP_InputManager_C** InputManager);
	static class UAC_jRPG_BattleManager_C* GetBattleManager(class UObject* __WorldContext);
	static void GetCampManager(class UObject* __WorldContext, class UObject** CampManager);
	static void GetDialogueSystemComponent(class UObject* __WorldContext, class UBP_DialogueSystemComponent_C** DialogueSystem);
	static class UTexture2D* GetStanceIcon(E_StanceType Index_0, class UObject* __WorldContext);
	static void Get_UI_Attack_Element_Type_Color(EAttackType ElementType, class UObject* __WorldContext, struct FLinearColor* Color);
	static void GetAttackElementTypeIcon(EAttackType ElementType, class UObject* __WorldContext, class UTexture** Texture);
	static void PlaySoundEventRowHandle_UI(const struct FDataTableRowHandle& DataTableRowHandle, class UObject* __WorldContext);
	static void PlaySoundEventRow_UI(struct FSoundEventDataTableRowHandle& SoundEvent, class UObject* __WorldContext);
	static void PlaySoundEvent_UI(struct FFSoundEvent& SoundEvent, class UObject* __WorldContext);
	static void AdjustMapContentToZero(TMap<int32, int32>& Map, class UObject* __WorldContext);
	static void GetEnemyIndexToBattleSpotsLeftToRight(class UObject* __WorldContext, TArray<int32>* IndexMapping);
	static void GetBattleSpotFirstIndex(class UObject* __WorldContext, int32* First);
	static void FormatStructItemStaticData(const struct FS_jRPG_Item_StaticData& Item, class UObject* __WorldContext, class FText* Text);
	static void FormatStructCharacter(const struct FS_jRPG_CharacterSaveState& Character, class UObject* __WorldContext, class FText* Text);
	static void GetItemDisplayName(class FName ItemHardcodedName, class UObject* __WorldContext, class FText* ItemDisplayName);
	static void GetExperienceNeededToNextLevel(int32 CurrentLevel, int32 CurrentXP, class UObject* __WorldContext, int32* XPtoNextLevel);
	static void ActionTypeToText(E_jRPG_ActionType ActionType, class UObject* __WorldContext, class FText* Text);
	static class FName GetLevelName(const TSoftObjectPtr<class UWorld> Level, class UObject* __WorldContext);
	static void RarityToColor(E_jRPG_ItemRarity Rarity, class UObject* __WorldContext, struct FLinearColor* LinearColor);
	static void RarityToText(E_jRPG_ItemRarity Rarity, class UObject* __WorldContext, class FText* Text);
	static void ItemSubypeToText(E_jRPG_ItemSubtype ItemSubtype, class UObject* __WorldContext, class FText* Text);
	static void ItemTypeToImage(E_jRPG_ItemType ItemType, class UObject* __WorldContext, class UTexture2D** Image);
	static void ItemTypeToText(E_jRPG_ItemType ItemType, class UObject* __WorldContext, class FText* Text);
	static void StatTypeToText(E_jRPG_StatType StatType, class UObject* __WorldContext, class FText* Text);

	void FindLevelDataByLevelFile(class FName LevelAssetName, class UObject* __WorldContext, bool* Found, class FName* RowName, struct FFLevelDataEntry* LevelData);
	void FindLevelDataByID(class FName RowName, class UObject* __WorldContext, bool* Found, struct FFLevelDataEntry* LevelData);
	struct FS_jRPG_Item_StaticData GetItemStaticDefinitionFromID(class FName ItemId, class UObject* __WorldContext, bool* Found);
	void IsProductionLevel(class FName Name_0, class UObject* __WorldContext, bool* Found);
	void FindCurrentLevelData(class UObject* __WorldContext, bool* Found, struct FFLevelDataEntry* LevelData, class FName* RowName);
	void GetCurrentLevelData(class UObject* __WorldContext, bool* Found, struct FFLevelDataEntry* LevelData, class FName* RowName);
	void GetLevelData(class FName Name_0, class UObject* __WorldContext, bool* Found, struct FFLevelDataEntry* LevelData);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"FL_jRPG_CustomFunctionLibrary_C">();
	}
	static class UFL_jRPG_CustomFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFL_jRPG_CustomFunctionLibrary_C>();
	}
};
static_assert(alignof(UFL_jRPG_CustomFunctionLibrary_C) == 0x000008, "Wrong alignment on UFL_jRPG_CustomFunctionLibrary_C");
static_assert(sizeof(UFL_jRPG_CustomFunctionLibrary_C) == 0x000028, "Wrong size on UFL_jRPG_CustomFunctionLibrary_C");

}

