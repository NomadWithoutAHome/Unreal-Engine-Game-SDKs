#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_ScalingText

#include "Basic.hpp"

#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_ScalingText.WBP_ScalingText_C.ExecuteUbergraph_WBP_ScalingText
// 0x0030 (0x0030 - 0x0000)
struct WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           K2Node_DynamicCast_AsOverlay_Slot;                 // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_MakeStruct_Right_ImplicitCast;              // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast; // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText) == 0x000008, "Wrong alignment on WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText");
static_assert(sizeof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText) == 0x000030, "Wrong size on WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, EntryPoint) == 0x000000, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, K2Node_DynamicCast_AsOverlay_Slot) == 0x000008, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::K2Node_DynamicCast_AsOverlay_Slot' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, K2Node_MakeStruct_Margin) == 0x000014, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, K2Node_MakeStruct_Right_ImplicitCast) == 0x000024, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::K2Node_MakeStruct_Right_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText, CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast) == 0x000028, "Member 'WBP_ScalingText_C_ExecuteUbergraph_WBP_ScalingText::CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast' has a wrong offset!");

// Function WBP_ScalingText.WBP_ScalingText_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_ScalingText_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ScalingText_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_ScalingText_C_PreConstruct");
static_assert(sizeof(WBP_ScalingText_C_PreConstruct) == 0x000001, "Wrong size on WBP_ScalingText_C_PreConstruct");
static_assert(offsetof(WBP_ScalingText_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_ScalingText_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_ScalingText.WBP_ScalingText_C.Set Text
// 0x0010 (0x0010 - 0x0000)
struct WBP_ScalingText_C_Set_Text final
{
public:
	class FText                                   InText;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_ScalingText_C_Set_Text) == 0x000008, "Wrong alignment on WBP_ScalingText_C_Set_Text");
static_assert(sizeof(WBP_ScalingText_C_Set_Text) == 0x000010, "Wrong size on WBP_ScalingText_C_Set_Text");
static_assert(offsetof(WBP_ScalingText_C_Set_Text, InText) == 0x000000, "Member 'WBP_ScalingText_C_Set_Text::InText' has a wrong offset!");

// Function WBP_ScalingText.WBP_ScalingText_C.SetTextMaxDesiredWidth
// 0x0010 (0x0010 - 0x0000)
struct WBP_ScalingText_C_SetTextMaxDesiredWidth final
{
public:
	double                                        TextMaxDesiredWidth_0;                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_ScalingText_C_SetTextMaxDesiredWidth) == 0x000008, "Wrong alignment on WBP_ScalingText_C_SetTextMaxDesiredWidth");
static_assert(sizeof(WBP_ScalingText_C_SetTextMaxDesiredWidth) == 0x000010, "Wrong size on WBP_ScalingText_C_SetTextMaxDesiredWidth");
static_assert(offsetof(WBP_ScalingText_C_SetTextMaxDesiredWidth, TextMaxDesiredWidth_0) == 0x000000, "Member 'WBP_ScalingText_C_SetTextMaxDesiredWidth::TextMaxDesiredWidth_0' has a wrong offset!");
static_assert(offsetof(WBP_ScalingText_C_SetTextMaxDesiredWidth, CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast) == 0x000008, "Member 'WBP_ScalingText_C_SetTextMaxDesiredWidth::CallFunc_SetMaxDesiredWidth_InMaxDesiredWidth_ImplicitCast' has a wrong offset!");

}

