#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassAIBehavior

#include "Basic.hpp"

#include "ZoneGraph_structs.hpp"
#include "StateTreeModule_structs.hpp"
#include "MassSmartObjects_structs.hpp"
#include "SmartObjectsModule_structs.hpp"
#include "MassEntity_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "MassMovement_structs.hpp"


namespace SDK
{

// Enum MassAIBehavior.EMassLookAtMode
// NumValues: 0x0004
enum class EMassLookAtMode : uint8
{
	LookForward                              = 0,
	LookAlongPath                            = 1,
	LookAtEntity                             = 2,
	EMassLookAtMode_MAX                      = 3,
};

// Enum MassAIBehavior.EMassLookAtGazeMode
// NumValues: 0x0004
enum class EMassLookAtGazeMode : uint8
{
	None                                     = 0,
	Constant                                 = 1,
	Glance                                   = 2,
	EMassLookAtGazeMode_MAX                  = 3,
};

// ScriptStruct MassAIBehavior.MassClaimSmartObjectTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FMassClaimSmartObjectTaskInstanceData final
{
public:
	struct FStateTreeStructRef                    CandidateSlots;                                    // 0x0000(0x0010)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FSmartObjectClaimHandle                ClaimedSlot;                                       // 0x0010(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassClaimSmartObjectTaskInstanceData) == 0x000008, "Wrong alignment on FMassClaimSmartObjectTaskInstanceData");
static_assert(sizeof(FMassClaimSmartObjectTaskInstanceData) == 0x000030, "Wrong size on FMassClaimSmartObjectTaskInstanceData");
static_assert(offsetof(FMassClaimSmartObjectTaskInstanceData, CandidateSlots) == 0x000000, "Member 'FMassClaimSmartObjectTaskInstanceData::CandidateSlots' has a wrong offset!");
static_assert(offsetof(FMassClaimSmartObjectTaskInstanceData, ClaimedSlot) == 0x000010, "Member 'FMassClaimSmartObjectTaskInstanceData::ClaimedSlot' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassStateTreeTaskBase
// 0x0000 (0x0028 - 0x0028)
struct FMassStateTreeTaskBase : public FStateTreeTaskBase
{
};
static_assert(alignof(FMassStateTreeTaskBase) == 0x000008, "Wrong alignment on FMassStateTreeTaskBase");
static_assert(sizeof(FMassStateTreeTaskBase) == 0x000028, "Wrong size on FMassStateTreeTaskBase");

// ScriptStruct MassAIBehavior.MassClaimSmartObjectTask
// 0x0018 (0x0040 - 0x0028)
struct FMassClaimSmartObjectTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x14];                                      // 0x0028(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InteractionCooldown;                               // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMassClaimSmartObjectTask) == 0x000008, "Wrong alignment on FMassClaimSmartObjectTask");
static_assert(sizeof(FMassClaimSmartObjectTask) == 0x000040, "Wrong size on FMassClaimSmartObjectTask");
static_assert(offsetof(FMassClaimSmartObjectTask, InteractionCooldown) == 0x00003C, "Member 'FMassClaimSmartObjectTask::InteractionCooldown' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassComponentHitEvaluatorInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FMassComponentHitEvaluatorInstanceData final
{
public:
	bool                                          bGotHit;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMassEntityHandle                      LastHitEntity;                                     // 0x0008(0x0008)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassComponentHitEvaluatorInstanceData) == 0x000008, "Wrong alignment on FMassComponentHitEvaluatorInstanceData");
static_assert(sizeof(FMassComponentHitEvaluatorInstanceData) == 0x000010, "Wrong size on FMassComponentHitEvaluatorInstanceData");
static_assert(offsetof(FMassComponentHitEvaluatorInstanceData, bGotHit) == 0x000000, "Member 'FMassComponentHitEvaluatorInstanceData::bGotHit' has a wrong offset!");
static_assert(offsetof(FMassComponentHitEvaluatorInstanceData, LastHitEntity) == 0x000008, "Member 'FMassComponentHitEvaluatorInstanceData::LastHitEntity' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassStateTreeEvaluatorBase
// 0x0000 (0x0020 - 0x0020)
struct FMassStateTreeEvaluatorBase : public FStateTreeEvaluatorBase
{
};
static_assert(alignof(FMassStateTreeEvaluatorBase) == 0x000008, "Wrong alignment on FMassStateTreeEvaluatorBase");
static_assert(sizeof(FMassStateTreeEvaluatorBase) == 0x000020, "Wrong size on FMassStateTreeEvaluatorBase");

// ScriptStruct MassAIBehavior.MassComponentHitEvaluator
// 0x0008 (0x0028 - 0x0020)
struct FMassComponentHitEvaluator final : public FMassStateTreeEvaluatorBase
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassComponentHitEvaluator) == 0x000008, "Wrong alignment on FMassComponentHitEvaluator");
static_assert(sizeof(FMassComponentHitEvaluator) == 0x000028, "Wrong size on FMassComponentHitEvaluator");

// ScriptStruct MassAIBehavior.MassHitResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMassHitResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassHitResult) == 0x000008, "Wrong alignment on FMassHitResult");
static_assert(sizeof(FMassHitResult) == 0x000018, "Wrong size on FMassHitResult");

// ScriptStruct MassAIBehavior.MassFindSmartObjectTaskInstanceData
// 0x00A8 (0x00A8 - 0x0000)
struct FMassFindSmartObjectTaskInstanceData final
{
public:
	struct FMassSmartObjectCandidateSlots         FoundCandidateSlots;                               // 0x0000(0x0088)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bHasCandidateSlots;                                // 0x0088(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMassSmartObjectRequestID              SearchRequestID;                                   // 0x0090(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	double                                        NextUpdate;                                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneGraphLaneHandle                   LastLane;                                          // 0x00A0(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassFindSmartObjectTaskInstanceData) == 0x000008, "Wrong alignment on FMassFindSmartObjectTaskInstanceData");
static_assert(sizeof(FMassFindSmartObjectTaskInstanceData) == 0x0000A8, "Wrong size on FMassFindSmartObjectTaskInstanceData");
static_assert(offsetof(FMassFindSmartObjectTaskInstanceData, FoundCandidateSlots) == 0x000000, "Member 'FMassFindSmartObjectTaskInstanceData::FoundCandidateSlots' has a wrong offset!");
static_assert(offsetof(FMassFindSmartObjectTaskInstanceData, bHasCandidateSlots) == 0x000088, "Member 'FMassFindSmartObjectTaskInstanceData::bHasCandidateSlots' has a wrong offset!");
static_assert(offsetof(FMassFindSmartObjectTaskInstanceData, SearchRequestID) == 0x000090, "Member 'FMassFindSmartObjectTaskInstanceData::SearchRequestID' has a wrong offset!");
static_assert(offsetof(FMassFindSmartObjectTaskInstanceData, NextUpdate) == 0x000098, "Member 'FMassFindSmartObjectTaskInstanceData::NextUpdate' has a wrong offset!");
static_assert(offsetof(FMassFindSmartObjectTaskInstanceData, LastLane) == 0x0000A0, "Member 'FMassFindSmartObjectTaskInstanceData::LastLane' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassFindSmartObjectTask
// 0x0070 (0x0098 - 0x0028)
struct FMassFindSmartObjectTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      ActivityRequirements;                              // 0x0048(0x0048)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         SearchInterval;                                    // 0x0090(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassFindSmartObjectTask) == 0x000008, "Wrong alignment on FMassFindSmartObjectTask");
static_assert(sizeof(FMassFindSmartObjectTask) == 0x000098, "Wrong size on FMassFindSmartObjectTask");
static_assert(offsetof(FMassFindSmartObjectTask, ActivityRequirements) == 0x000048, "Member 'FMassFindSmartObjectTask::ActivityRequirements' has a wrong offset!");
static_assert(offsetof(FMassFindSmartObjectTask, SearchInterval) == 0x000090, "Member 'FMassFindSmartObjectTask::SearchInterval' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassLookAtFragment
// 0x0058 (0x0058 - 0x0000)
struct FMassLookAtFragment final : public FMassFragment
{
public:
	struct FVector                                Direction;                                         // 0x0000(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                GazeDirection;                                     // 0x0018(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMassEntityHandle                      TrackedEntity;                                     // 0x0030(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMassEntityHandle                      GazeTrackedEntity;                                 // 0x0038(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        GazeStartTime;                                     // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GazeDuration;                                      // 0x0048(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LastSeenActionID;                                  // 0x004C(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassLookAtMode                               LookAtMode;                                        // 0x004E(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMassLookAtGazeMode                           RandomGazeMode;                                    // 0x004F(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomGazeYawVariation;                            // 0x0050(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RandomGazePitchVariation;                          // 0x0051(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRandomGazeEntities : 1;                           // 0x0052(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassLookAtFragment) == 0x000008, "Wrong alignment on FMassLookAtFragment");
static_assert(sizeof(FMassLookAtFragment) == 0x000058, "Wrong size on FMassLookAtFragment");
static_assert(offsetof(FMassLookAtFragment, Direction) == 0x000000, "Member 'FMassLookAtFragment::Direction' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, GazeDirection) == 0x000018, "Member 'FMassLookAtFragment::GazeDirection' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, TrackedEntity) == 0x000030, "Member 'FMassLookAtFragment::TrackedEntity' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, GazeTrackedEntity) == 0x000038, "Member 'FMassLookAtFragment::GazeTrackedEntity' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, GazeStartTime) == 0x000040, "Member 'FMassLookAtFragment::GazeStartTime' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, GazeDuration) == 0x000048, "Member 'FMassLookAtFragment::GazeDuration' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, LastSeenActionID) == 0x00004C, "Member 'FMassLookAtFragment::LastSeenActionID' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, LookAtMode) == 0x00004E, "Member 'FMassLookAtFragment::LookAtMode' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, RandomGazeMode) == 0x00004F, "Member 'FMassLookAtFragment::RandomGazeMode' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, RandomGazeYawVariation) == 0x000050, "Member 'FMassLookAtFragment::RandomGazeYawVariation' has a wrong offset!");
static_assert(offsetof(FMassLookAtFragment, RandomGazePitchVariation) == 0x000051, "Member 'FMassLookAtFragment::RandomGazePitchVariation' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassLookAtTargetTag
// 0x0000 (0x0001 - 0x0001)
struct FMassLookAtTargetTag final : public FMassTag
{
};
static_assert(alignof(FMassLookAtTargetTag) == 0x000001, "Wrong alignment on FMassLookAtTargetTag");
static_assert(sizeof(FMassLookAtTargetTag) == 0x000001, "Wrong size on FMassLookAtTargetTag");

// ScriptStruct MassAIBehavior.MassLookAtTrajectoryPoint
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FMassLookAtTrajectoryPoint final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassLookAtTrajectoryPoint) == 0x000008, "Wrong alignment on FMassLookAtTrajectoryPoint");
static_assert(sizeof(FMassLookAtTrajectoryPoint) == 0x000020, "Wrong size on FMassLookAtTrajectoryPoint");

// ScriptStruct MassAIBehavior.MassLookAtTrajectoryFragment
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x08) FMassLookAtTrajectoryFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassLookAtTrajectoryFragment) == 0x000008, "Wrong alignment on FMassLookAtTrajectoryFragment");
static_assert(sizeof(FMassLookAtTrajectoryFragment) == 0x000070, "Wrong size on FMassLookAtTrajectoryFragment");

// ScriptStruct MassAIBehavior.MassLookAtTaskInstanceData
// 0x0010 (0x0010 - 0x0000)
struct FMassLookAtTaskInstanceData final
{
public:
	struct FMassEntityHandle                      TargetEntity;                                      // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassLookAtTaskInstanceData) == 0x000008, "Wrong alignment on FMassLookAtTaskInstanceData");
static_assert(sizeof(FMassLookAtTaskInstanceData) == 0x000010, "Wrong size on FMassLookAtTaskInstanceData");
static_assert(offsetof(FMassLookAtTaskInstanceData, TargetEntity) == 0x000000, "Member 'FMassLookAtTaskInstanceData::TargetEntity' has a wrong offset!");
static_assert(offsetof(FMassLookAtTaskInstanceData, Duration) == 0x000008, "Member 'FMassLookAtTaskInstanceData::Duration' has a wrong offset!");
static_assert(offsetof(FMassLookAtTaskInstanceData, Time) == 0x00000C, "Member 'FMassLookAtTaskInstanceData::Time' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassLookAtTask
// 0x0018 (0x0040 - 0x0028)
struct FMassLookAtTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0xC];                                       // 0x0028(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EMassLookAtMode                               LookAtMode;                                        // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMassLookAtGazeMode                           RandomGazeMode;                                    // 0x0035(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         RandomGazeYawVariation;                            // 0x0036(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         RandomGazePitchVariation;                          // 0x0037(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRandomGazeEntities;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassLookAtTask) == 0x000008, "Wrong alignment on FMassLookAtTask");
static_assert(sizeof(FMassLookAtTask) == 0x000040, "Wrong size on FMassLookAtTask");
static_assert(offsetof(FMassLookAtTask, LookAtMode) == 0x000034, "Member 'FMassLookAtTask::LookAtMode' has a wrong offset!");
static_assert(offsetof(FMassLookAtTask, RandomGazeMode) == 0x000035, "Member 'FMassLookAtTask::RandomGazeMode' has a wrong offset!");
static_assert(offsetof(FMassLookAtTask, RandomGazeYawVariation) == 0x000036, "Member 'FMassLookAtTask::RandomGazeYawVariation' has a wrong offset!");
static_assert(offsetof(FMassLookAtTask, RandomGazePitchVariation) == 0x000037, "Member 'FMassLookAtTask::RandomGazePitchVariation' has a wrong offset!");
static_assert(offsetof(FMassLookAtTask, bRandomGazeEntities) == 0x000038, "Member 'FMassLookAtTask::bRandomGazeEntities' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassStateTreeInstanceFragment
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMassStateTreeInstanceFragment final : public FMassFragment
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassStateTreeInstanceFragment) == 0x000008, "Wrong alignment on FMassStateTreeInstanceFragment");
static_assert(sizeof(FMassStateTreeInstanceFragment) == 0x000010, "Wrong size on FMassStateTreeInstanceFragment");

// ScriptStruct MassAIBehavior.MassStateTreeSharedFragment
// 0x0008 (0x0008 - 0x0000)
struct FMassStateTreeSharedFragment final : public FMassSharedFragment
{
public:
	class UStateTree*                             StateTree;                                         // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassStateTreeSharedFragment) == 0x000008, "Wrong alignment on FMassStateTreeSharedFragment");
static_assert(sizeof(FMassStateTreeSharedFragment) == 0x000008, "Wrong size on FMassStateTreeSharedFragment");
static_assert(offsetof(FMassStateTreeSharedFragment, StateTree) == 0x000000, "Member 'FMassStateTreeSharedFragment::StateTree' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassStateTreeActivatedTag
// 0x0000 (0x0001 - 0x0001)
struct FMassStateTreeActivatedTag final : public FMassTag
{
};
static_assert(alignof(FMassStateTreeActivatedTag) == 0x000001, "Wrong alignment on FMassStateTreeActivatedTag");
static_assert(sizeof(FMassStateTreeActivatedTag) == 0x000001, "Wrong size on FMassStateTreeActivatedTag");

// ScriptStruct MassAIBehavior.MassStateTreeInstanceDataItem
// 0x0018 (0x0018 - 0x0000)
struct FMassStateTreeInstanceDataItem final
{
public:
	struct FStateTreeInstanceData                 InstanceData;                                      // 0x0000(0x0010)(NativeAccessSpecifierPublic)
	int32                                         Generation;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassStateTreeInstanceDataItem) == 0x000008, "Wrong alignment on FMassStateTreeInstanceDataItem");
static_assert(sizeof(FMassStateTreeInstanceDataItem) == 0x000018, "Wrong size on FMassStateTreeInstanceDataItem");
static_assert(offsetof(FMassStateTreeInstanceDataItem, InstanceData) == 0x000000, "Member 'FMassStateTreeInstanceDataItem::InstanceData' has a wrong offset!");
static_assert(offsetof(FMassStateTreeInstanceDataItem, Generation) == 0x000010, "Member 'FMassStateTreeInstanceDataItem::Generation' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassUseSmartObjectTaskInstanceData
// 0x0020 (0x0020 - 0x0000)
struct FMassUseSmartObjectTaskInstanceData final
{
public:
	struct FSmartObjectClaimHandle                ClaimedSlot;                                       // 0x0000(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassUseSmartObjectTaskInstanceData) == 0x000008, "Wrong alignment on FMassUseSmartObjectTaskInstanceData");
static_assert(sizeof(FMassUseSmartObjectTaskInstanceData) == 0x000020, "Wrong size on FMassUseSmartObjectTaskInstanceData");
static_assert(offsetof(FMassUseSmartObjectTaskInstanceData, ClaimedSlot) == 0x000000, "Member 'FMassUseSmartObjectTaskInstanceData::ClaimedSlot' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassUseSmartObjectTask
// 0x0020 (0x0048 - 0x0028)
struct FMassUseSmartObjectTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassUseSmartObjectTask) == 0x000008, "Wrong alignment on FMassUseSmartObjectTask");
static_assert(sizeof(FMassUseSmartObjectTask) == 0x000048, "Wrong size on FMassUseSmartObjectTask");

// ScriptStruct MassAIBehavior.MassZoneGraphAnnotationEvaluatorInstanceData
// 0x0004 (0x0004 - 0x0000)
struct FMassZoneGraphAnnotationEvaluatorInstanceData final
{
public:
	struct FZoneGraphTagMask                      AnnotationTags;                                    // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassZoneGraphAnnotationEvaluatorInstanceData) == 0x000004, "Wrong alignment on FMassZoneGraphAnnotationEvaluatorInstanceData");
static_assert(sizeof(FMassZoneGraphAnnotationEvaluatorInstanceData) == 0x000004, "Wrong size on FMassZoneGraphAnnotationEvaluatorInstanceData");
static_assert(offsetof(FMassZoneGraphAnnotationEvaluatorInstanceData, AnnotationTags) == 0x000000, "Member 'FMassZoneGraphAnnotationEvaluatorInstanceData::AnnotationTags' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphAnnotationEvaluator
// 0x0008 (0x0028 - 0x0020)
struct FMassZoneGraphAnnotationEvaluator final : public FMassStateTreeEvaluatorBase
{
public:
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphAnnotationEvaluator) == 0x000008, "Wrong alignment on FMassZoneGraphAnnotationEvaluator");
static_assert(sizeof(FMassZoneGraphAnnotationEvaluator) == 0x000028, "Wrong size on FMassZoneGraphAnnotationEvaluator");

// ScriptStruct MassAIBehavior.MassZoneGraphAnnotationFragment
// 0x0004 (0x0004 - 0x0000)
struct FMassZoneGraphAnnotationFragment final : public FMassFragment
{
public:
	struct FZoneGraphTagMask                      Tags;                                              // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassZoneGraphAnnotationFragment) == 0x000004, "Wrong alignment on FMassZoneGraphAnnotationFragment");
static_assert(sizeof(FMassZoneGraphAnnotationFragment) == 0x000004, "Wrong size on FMassZoneGraphAnnotationFragment");
static_assert(offsetof(FMassZoneGraphAnnotationFragment, Tags) == 0x000000, "Member 'FMassZoneGraphAnnotationFragment::Tags' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphAnnotationVariableTickChunkFragment
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FMassZoneGraphAnnotationVariableTickChunkFragment final : public FMassChunkFragment
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphAnnotationVariableTickChunkFragment) == 0x000004, "Wrong alignment on FMassZoneGraphAnnotationVariableTickChunkFragment");
static_assert(sizeof(FMassZoneGraphAnnotationVariableTickChunkFragment) == 0x000008, "Wrong size on FMassZoneGraphAnnotationVariableTickChunkFragment");

// ScriptStruct MassAIBehavior.MassZoneGraphTargetLocation
// 0x0060 (0x0060 - 0x0000)
struct alignas(0x08) FMassZoneGraphTargetLocation final
{
public:
	uint8                                         Pad_0[0x60];                                       // 0x0000(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphTargetLocation) == 0x000008, "Wrong alignment on FMassZoneGraphTargetLocation");
static_assert(sizeof(FMassZoneGraphTargetLocation) == 0x000060, "Wrong size on FMassZoneGraphTargetLocation");

// ScriptStruct MassAIBehavior.MassZoneGraphFindEscapeTargetInstanceData
// 0x0060 (0x0060 - 0x0000)
struct FMassZoneGraphFindEscapeTargetInstanceData final
{
public:
	struct FMassZoneGraphTargetLocation           EscapeTargetLocation;                              // 0x0000(0x0060)(Edit, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassZoneGraphFindEscapeTargetInstanceData) == 0x000008, "Wrong alignment on FMassZoneGraphFindEscapeTargetInstanceData");
static_assert(sizeof(FMassZoneGraphFindEscapeTargetInstanceData) == 0x000060, "Wrong size on FMassZoneGraphFindEscapeTargetInstanceData");
static_assert(offsetof(FMassZoneGraphFindEscapeTargetInstanceData, EscapeTargetLocation) == 0x000000, "Member 'FMassZoneGraphFindEscapeTargetInstanceData::EscapeTargetLocation' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphFindEscapeTarget
// 0x0018 (0x0040 - 0x0028)
struct FMassZoneGraphFindEscapeTarget final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x12];                                      // 0x0028(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	struct FZoneGraphTag                          DisturbanceAnnotationTag;                          // 0x003A(0x0001)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphFindEscapeTarget) == 0x000008, "Wrong alignment on FMassZoneGraphFindEscapeTarget");
static_assert(sizeof(FMassZoneGraphFindEscapeTarget) == 0x000040, "Wrong size on FMassZoneGraphFindEscapeTarget");
static_assert(offsetof(FMassZoneGraphFindEscapeTarget, DisturbanceAnnotationTag) == 0x00003A, "Member 'FMassZoneGraphFindEscapeTarget::DisturbanceAnnotationTag' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphFindSmartObjectTargetInstanceData
// 0x0080 (0x0080 - 0x0000)
struct FMassZoneGraphFindSmartObjectTargetInstanceData final
{
public:
	struct FSmartObjectClaimHandle                ClaimedSlot;                                       // 0x0000(0x0020)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	struct FMassZoneGraphTargetLocation           SmartObjectLocation;                               // 0x0020(0x0060)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassZoneGraphFindSmartObjectTargetInstanceData) == 0x000008, "Wrong alignment on FMassZoneGraphFindSmartObjectTargetInstanceData");
static_assert(sizeof(FMassZoneGraphFindSmartObjectTargetInstanceData) == 0x000080, "Wrong size on FMassZoneGraphFindSmartObjectTargetInstanceData");
static_assert(offsetof(FMassZoneGraphFindSmartObjectTargetInstanceData, ClaimedSlot) == 0x000000, "Member 'FMassZoneGraphFindSmartObjectTargetInstanceData::ClaimedSlot' has a wrong offset!");
static_assert(offsetof(FMassZoneGraphFindSmartObjectTargetInstanceData, SmartObjectLocation) == 0x000020, "Member 'FMassZoneGraphFindSmartObjectTargetInstanceData::SmartObjectLocation' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphFindSmartObjectTarget
// 0x0018 (0x0040 - 0x0028)
struct FMassZoneGraphFindSmartObjectTarget final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphFindSmartObjectTarget) == 0x000008, "Wrong alignment on FMassZoneGraphFindSmartObjectTarget");
static_assert(sizeof(FMassZoneGraphFindSmartObjectTarget) == 0x000040, "Wrong size on FMassZoneGraphFindSmartObjectTarget");

// ScriptStruct MassAIBehavior.MassZoneGraphPathFollowTaskInstanceData
// 0x0030 (0x0030 - 0x0000)
struct FMassZoneGraphPathFollowTaskInstanceData final
{
public:
	struct FStateTreeStructRef                    TargetLocation;                                    // 0x0000(0x0010)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FMassMovementStyleRef                  MovementStyle;                                     // 0x0010(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	float                                         SpeedScale;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphPathFollowTaskInstanceData) == 0x000008, "Wrong alignment on FMassZoneGraphPathFollowTaskInstanceData");
static_assert(sizeof(FMassZoneGraphPathFollowTaskInstanceData) == 0x000030, "Wrong size on FMassZoneGraphPathFollowTaskInstanceData");
static_assert(offsetof(FMassZoneGraphPathFollowTaskInstanceData, TargetLocation) == 0x000000, "Member 'FMassZoneGraphPathFollowTaskInstanceData::TargetLocation' has a wrong offset!");
static_assert(offsetof(FMassZoneGraphPathFollowTaskInstanceData, MovementStyle) == 0x000010, "Member 'FMassZoneGraphPathFollowTaskInstanceData::MovementStyle' has a wrong offset!");
static_assert(offsetof(FMassZoneGraphPathFollowTaskInstanceData, SpeedScale) == 0x000028, "Member 'FMassZoneGraphPathFollowTaskInstanceData::SpeedScale' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphPathFollowTask
// 0x0030 (0x0058 - 0x0028)
struct FMassZoneGraphPathFollowTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphPathFollowTask) == 0x000008, "Wrong alignment on FMassZoneGraphPathFollowTask");
static_assert(sizeof(FMassZoneGraphPathFollowTask) == 0x000058, "Wrong size on FMassZoneGraphPathFollowTask");

// ScriptStruct MassAIBehavior.MassZoneGraphStandTaskInstanceData
// 0x0008 (0x0008 - 0x0000)
struct FMassZoneGraphStandTaskInstanceData final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMassZoneGraphStandTaskInstanceData) == 0x000004, "Wrong alignment on FMassZoneGraphStandTaskInstanceData");
static_assert(sizeof(FMassZoneGraphStandTaskInstanceData) == 0x000008, "Wrong size on FMassZoneGraphStandTaskInstanceData");
static_assert(offsetof(FMassZoneGraphStandTaskInstanceData, Duration) == 0x000000, "Member 'FMassZoneGraphStandTaskInstanceData::Duration' has a wrong offset!");
static_assert(offsetof(FMassZoneGraphStandTaskInstanceData, Time) == 0x000004, "Member 'FMassZoneGraphStandTaskInstanceData::Time' has a wrong offset!");

// ScriptStruct MassAIBehavior.MassZoneGraphStandTask
// 0x0030 (0x0058 - 0x0028)
struct FMassZoneGraphStandTask final : public FMassStateTreeTaskBase
{
public:
	uint8                                         Pad_28[0x30];                                      // 0x0028(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMassZoneGraphStandTask) == 0x000008, "Wrong alignment on FMassZoneGraphStandTask");
static_assert(sizeof(FMassZoneGraphStandTask) == 0x000058, "Wrong size on FMassZoneGraphStandTask");

// ScriptStruct MassAIBehavior.ZoneGraphTagFilterConditionInstanceData
// 0x0004 (0x0004 - 0x0000)
struct FZoneGraphTagFilterConditionInstanceData final
{
public:
	struct FZoneGraphTagMask                      Tags;                                              // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneGraphTagFilterConditionInstanceData) == 0x000004, "Wrong alignment on FZoneGraphTagFilterConditionInstanceData");
static_assert(sizeof(FZoneGraphTagFilterConditionInstanceData) == 0x000004, "Wrong size on FZoneGraphTagFilterConditionInstanceData");
static_assert(offsetof(FZoneGraphTagFilterConditionInstanceData, Tags) == 0x000000, "Member 'FZoneGraphTagFilterConditionInstanceData::Tags' has a wrong offset!");

// ScriptStruct MassAIBehavior.ZoneGraphTagFilterCondition
// 0x0010 (0x0038 - 0x0028)
struct FZoneGraphTagFilterCondition final : public FStateTreeConditionBase
{
public:
	struct FZoneGraphTagFilter                    Filter;                                            // 0x0028(0x000C)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoneGraphTagFilterCondition) == 0x000008, "Wrong alignment on FZoneGraphTagFilterCondition");
static_assert(sizeof(FZoneGraphTagFilterCondition) == 0x000038, "Wrong size on FZoneGraphTagFilterCondition");
static_assert(offsetof(FZoneGraphTagFilterCondition, Filter) == 0x000028, "Member 'FZoneGraphTagFilterCondition::Filter' has a wrong offset!");
static_assert(offsetof(FZoneGraphTagFilterCondition, bInvert) == 0x000034, "Member 'FZoneGraphTagFilterCondition::bInvert' has a wrong offset!");

// ScriptStruct MassAIBehavior.ZoneGraphTagMaskConditionInstanceData
// 0x0008 (0x0008 - 0x0000)
struct FZoneGraphTagMaskConditionInstanceData final
{
public:
	struct FZoneGraphTagMask                      Left;                                              // 0x0000(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneGraphTagMask                      Right;                                             // 0x0004(0x0004)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneGraphTagMaskConditionInstanceData) == 0x000004, "Wrong alignment on FZoneGraphTagMaskConditionInstanceData");
static_assert(sizeof(FZoneGraphTagMaskConditionInstanceData) == 0x000008, "Wrong size on FZoneGraphTagMaskConditionInstanceData");
static_assert(offsetof(FZoneGraphTagMaskConditionInstanceData, Left) == 0x000000, "Member 'FZoneGraphTagMaskConditionInstanceData::Left' has a wrong offset!");
static_assert(offsetof(FZoneGraphTagMaskConditionInstanceData, Right) == 0x000004, "Member 'FZoneGraphTagMaskConditionInstanceData::Right' has a wrong offset!");

// ScriptStruct MassAIBehavior.ZoneGraphTagMaskCondition
// 0x0008 (0x0030 - 0x0028)
struct FZoneGraphTagMaskCondition final : public FStateTreeConditionBase
{
public:
	EZoneLaneTagMaskComparison                    Operator;                                          // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInvert;                                           // 0x0029(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoneGraphTagMaskCondition) == 0x000008, "Wrong alignment on FZoneGraphTagMaskCondition");
static_assert(sizeof(FZoneGraphTagMaskCondition) == 0x000030, "Wrong size on FZoneGraphTagMaskCondition");
static_assert(offsetof(FZoneGraphTagMaskCondition, Operator) == 0x000028, "Member 'FZoneGraphTagMaskCondition::Operator' has a wrong offset!");
static_assert(offsetof(FZoneGraphTagMaskCondition, bInvert) == 0x000029, "Member 'FZoneGraphTagMaskCondition::bInvert' has a wrong offset!");

// ScriptStruct MassAIBehavior.ZoneGraphTagConditionInstanceData
// 0x0002 (0x0002 - 0x0000)
struct FZoneGraphTagConditionInstanceData final
{
public:
	struct FZoneGraphTag                          Left;                                              // 0x0000(0x0001)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneGraphTag                          Right;                                             // 0x0001(0x0001)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FZoneGraphTagConditionInstanceData) == 0x000001, "Wrong alignment on FZoneGraphTagConditionInstanceData");
static_assert(sizeof(FZoneGraphTagConditionInstanceData) == 0x000002, "Wrong size on FZoneGraphTagConditionInstanceData");
static_assert(offsetof(FZoneGraphTagConditionInstanceData, Left) == 0x000000, "Member 'FZoneGraphTagConditionInstanceData::Left' has a wrong offset!");
static_assert(offsetof(FZoneGraphTagConditionInstanceData, Right) == 0x000001, "Member 'FZoneGraphTagConditionInstanceData::Right' has a wrong offset!");

// ScriptStruct MassAIBehavior.ZoneGraphTagCondition
// 0x0008 (0x0030 - 0x0028)
struct FZoneGraphTagCondition final : public FStateTreeConditionBase
{
public:
	bool                                          bInvert;                                           // 0x0028(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FZoneGraphTagCondition) == 0x000008, "Wrong alignment on FZoneGraphTagCondition");
static_assert(sizeof(FZoneGraphTagCondition) == 0x000030, "Wrong size on FZoneGraphTagCondition");
static_assert(offsetof(FZoneGraphTagCondition, bInvert) == 0x000028, "Member 'FZoneGraphTagCondition::bInvert' has a wrong offset!");

}

