#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WorldMapLevelNameContainer

#include "Basic.hpp"

#include "E_LevelDangerType_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_WorldMapLevelNameContainer.WBP_WorldMapLevelNameContainer_C.AppearLevelNameWidget
// 0x0018 (0x0018 - 0x0000)
struct WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget final
{
public:
	class FText                                   LevelNameText;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	E_LevelDangerType                             DangerLevel;                                       // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LevelDangerType                             Temp_byte_Variable_4;                              // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget) == 0x000008, "Wrong alignment on WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget");
static_assert(sizeof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget) == 0x000018, "Wrong size on WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, LevelNameText) == 0x000000, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::LevelNameText' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, DangerLevel) == 0x000010, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::DangerLevel' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, Temp_byte_Variable) == 0x000011, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, Temp_byte_Variable_1) == 0x000012, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, Temp_byte_Variable_2) == 0x000013, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, Temp_byte_Variable_3) == 0x000014, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, Temp_byte_Variable_4) == 0x000015, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget, K2Node_Select_Default) == 0x000016, "Member 'WBP_WorldMapLevelNameContainer_C_AppearLevelNameWidget::K2Node_Select_Default' has a wrong offset!");

}

