#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QTEManager

#include "Basic.hpp"

#include "BP_QTEManager_classes.hpp"
#include "BP_QTEManager_parameters.hpp"


namespace SDK
{

// Function BP_QTEManager.BP_QTEManager_C.ExecuteUbergraph_BP_QTEManager
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::ExecuteUbergraph_BP_QTEManager(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "ExecuteUbergraph_BP_QTEManager");

	Params::BP_QTEManager_C_ExecuteUbergraph_BP_QTEManager Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.FlushActiveQTE
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EQTEPhaseType*                          QTEPhaseType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::FlushActiveQTE(EQTEPhaseType* QTEPhaseType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "FlushActiveQTE");

	Params::BP_QTEManager_C_FlushActiveQTE Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (QTEPhaseType != nullptr)
		*QTEPhaseType = Parms.QTEPhaseType;
}


// Function BP_QTEManager.BP_QTEManager_C.InitManager
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QTEManager_C::InitManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "InitManager");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTEManager.BP_QTEManager_C.On Timeline Ended
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TrackIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Success                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::On_Timeline_Ended(int32 TrackIndex, bool Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "On Timeline Ended");

	Params::BP_QTEManager_C_On_Timeline_Ended Parms{};

	Parms.TrackIndex = TrackIndex;
	Parms.Success = Success;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.OnAction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccess                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::OnAction(bool IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "OnAction");

	Params::BP_QTEManager_C_OnAction Parms{};

	Parms.IsSuccess = IsSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.OnQTENotifyStateEnd
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QTEManager_C::OnQTENotifyStateEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "OnQTENotifyStateEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTEManager.BP_QTEManager_C.OnQTENotifyStateStart
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EQTEPhaseType, double>&      PhaseDurations                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// double                                  TotalDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CurrentAnimTime                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::OnQTENotifyStateStart(const TMap<EQTEPhaseType, double>& PhaseDurations, double TotalDuration, double CurrentAnimTime, double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "OnQTENotifyStateStart");

	Params::BP_QTEManager_C_OnQTENotifyStateStart Parms{};

	Parms.PhaseDurations = std::move(PhaseDurations);
	Parms.TotalDuration = TotalDuration;
	Parms.CurrentAnimTime = CurrentAnimTime;
	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.OnQTENotifyStateTick
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentAnimationTime                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::OnQTENotifyStateTick(double CurrentAnimationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "OnQTENotifyStateTick");

	Params::BP_QTEManager_C_OnQTENotifyStateTick Parms{};

	Parms.CurrentAnimationTime = CurrentAnimationTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.OnSkillComboAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSuccess                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TrackIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    isPerfect                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::OnSkillComboAction(bool IsSuccess, int32 TrackIndex, bool isPerfect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "OnSkillComboAction");

	Params::BP_QTEManager_C_OnSkillComboAction Parms{};

	Parms.IsSuccess = IsSuccess;
	Parms.TrackIndex = TrackIndex;
	Parms.isPerfect = isPerfect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.OnUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::OnUpdate(double CurrentTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "OnUpdate");

	Params::BP_QTEManager_C_OnUpdate Parms{};

	Parms.CurrentTime = CurrentTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.PrintDebugText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_QTEManager_C::PrintDebugText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "PrintDebugText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_QTEManager.BP_QTEManager_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "ReceiveTick");

	Params::BP_QTEManager_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.StartSkillCombo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NowTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  PreDurationRealTime                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ValidityDurationRealTime                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULevelSequencePlayer*             sequenceTimeSource                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   TrackIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    showQTE                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::StartSkillCombo(double NowTime, double PreDurationRealTime, double ValidityDurationRealTime, class ULevelSequencePlayer* sequenceTimeSource, int32 TrackIndex, bool showQTE)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "StartSkillCombo");

	Params::BP_QTEManager_C_StartSkillCombo Parms{};

	Parms.NowTime = NowTime;
	Parms.PreDurationRealTime = PreDurationRealTime;
	Parms.ValidityDurationRealTime = ValidityDurationRealTime;
	Parms.sequenceTimeSource = sequenceTimeSource;
	Parms.TrackIndex = TrackIndex;
	Parms.showQTE = showQTE;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.StopSkillCombo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TrackIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsSuccess                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::StopSkillCombo(int32 TrackIndex, bool IsSuccess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "StopSkillCombo");

	Params::BP_QTEManager_C_StopSkillCombo Parms{};

	Parms.TrackIndex = TrackIndex;
	Parms.IsSuccess = IsSuccess;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_QTEManager.BP_QTEManager_C.ComputeRealTimeDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double                                  NotifyStateDuration                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  AnimPlayRate                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  EaseDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TargetTimeDilation                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 RealTimeDuration                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::ComputeRealTimeDuration(double NotifyStateDuration, double AnimPlayRate, double EaseDuration, double TargetTimeDilation, double* RealTimeDuration) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "ComputeRealTimeDuration");

	Params::BP_QTEManager_C_ComputeRealTimeDuration Parms{};

	Parms.NotifyStateDuration = NotifyStateDuration;
	Parms.AnimPlayRate = AnimPlayRate;
	Parms.EaseDuration = EaseDuration;
	Parms.TargetTimeDilation = TargetTimeDilation;

	UObject::ProcessEvent(Func, &Parms);

	if (RealTimeDuration != nullptr)
		*RealTimeDuration = Parms.RealTimeDuration;
}


// Function BP_QTEManager.BP_QTEManager_C.GetCurrentQTEState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EQTEPhaseType*                          QTEPhaseType                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::GetCurrentQTEState(EQTEPhaseType* QTEPhaseType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "GetCurrentQTEState");

	Params::BP_QTEManager_C_GetCurrentQTEState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (QTEPhaseType != nullptr)
		*QTEPhaseType = Parms.QTEPhaseType;
}


// Function BP_QTEManager.BP_QTEManager_C.GetRealTimeProgress
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// double*                                 RealTimeProgress                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsFinished                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_QTEManager_C::GetRealTimeProgress(double* RealTimeProgress, bool* IsFinished) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_QTEManager_C", "GetRealTimeProgress");

	Params::BP_QTEManager_C_GetRealTimeProgress Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (RealTimeProgress != nullptr)
		*RealTimeProgress = Parms.RealTimeProgress;

	if (IsFinished != nullptr)
		*IsFinished = Parms.IsFinished;
}

}

