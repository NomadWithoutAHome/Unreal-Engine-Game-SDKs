#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_DialogueCharacter

#include "Basic.hpp"

#include "BPI_DialogueCharacter_classes.hpp"
#include "BPI_DialogueCharacter_parameters.hpp"


namespace SDK
{

// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetAllDialogueCameras
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UCineCameraComponent*>*    CineCameraComponents                                   (Parm, OutParm, ContainsInstancedReference)

void IBPI_DialogueCharacter_C::BPI_GetAllDialogueCameras(TArray<class UCineCameraComponent*>* CineCameraComponents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetAllDialogueCameras");

	Params::BPI_DialogueCharacter_C_BPI_GetAllDialogueCameras Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CineCameraComponents != nullptr)
		*CineCameraComponents = std::move(Parms.CineCameraComponents);
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetDialogueAudioComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAudioComponent**                 AudioComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_DialogueCharacter_C::BPI_GetDialogueAudioComponent(class UAudioComponent** AudioComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetDialogueAudioComponent");

	Params::BPI_DialogueCharacter_C_BPI_GetDialogueAudioComponent Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (AudioComponent != nullptr)
		*AudioComponent = Parms.AudioComponent;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetDialogueCameraByType
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDialogueCameraType                     CameraType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCameraComponent**                CameraComponent                                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_DialogueCharacter_C::BPI_GetDialogueCameraByType(EDialogueCameraType CameraType, class UCameraComponent** CameraComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetDialogueCameraByType");

	Params::BPI_DialogueCharacter_C_BPI_GetDialogueCameraByType Parms{};

	Parms.CameraType = CameraType;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CameraComponent != nullptr)
		*CameraComponent = Parms.CameraComponent;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetDialogueCameraOffset
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector IBPI_DialogueCharacter_C::BPI_GetDialogueCameraOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetDialogueCameraOffset");

	Params::BPI_DialogueCharacter_C_BPI_GetDialogueCameraOffset Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetDialogueFocusPoint
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent**                 SceneComponent                                         (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_DialogueCharacter_C::BPI_GetDialogueFocusPoint(class USceneComponent** SceneComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetDialogueFocusPoint");

	Params::BPI_DialogueCharacter_C_BPI_GetDialogueFocusPoint Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (SceneComponent != nullptr)
		*SceneComponent = Parms.SceneComponent;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetInteractingCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_DialogueCharacter_C>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TScriptInterface<class IBPI_DialogueCharacter_C> IBPI_DialogueCharacter_C::BPI_GetInteractingCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetInteractingCharacter");

	Params::BPI_DialogueCharacter_C_BPI_GetInteractingCharacter Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetLightDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NPC_SpolightTypes                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_NPC_SpolightTypes IBPI_DialogueCharacter_C::BPI_GetLightDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetLightDirection");

	Params::BPI_DialogueCharacter_C_BPI_GetLightDirection Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetLightingSet
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NPC_SpolightTypes                     LightDirection                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ULightComponent**                 FrontLight                                             (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class ULightComponent**                 RimLight                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void IBPI_DialogueCharacter_C::BPI_GetLightingSet(E_NPC_SpolightTypes LightDirection, class ULightComponent** FrontLight, class ULightComponent** RimLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetLightingSet");

	Params::BPI_DialogueCharacter_C_BPI_GetLightingSet Parms{};

	Parms.LightDirection = LightDirection;

	AsUObject()->ProcessEvent(Func, &Parms);

	if (FrontLight != nullptr)
		*FrontLight = Parms.FrontLight;

	if (RimLight != nullptr)
		*RimLight = Parms.RimLight;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetReverseSpotlightReceiver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_DialogueCharacter_C>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

TScriptInterface<class IBPI_DialogueCharacter_C> IBPI_DialogueCharacter_C::BPI_GetReverseSpotlightReceiver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetReverseSpotlightReceiver");

	Params::BPI_DialogueCharacter_C_BPI_GetReverseSpotlightReceiver Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_GetSpotlightsToActivateDuringDialogue
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftObjectPtr<class ASpotLight>>*SpotLightActors                                        (Parm, OutParm)

void IBPI_DialogueCharacter_C::BPI_GetSpotlightsToActivateDuringDialogue(TArray<TSoftObjectPtr<class ASpotLight>>* SpotLightActors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_GetSpotlightsToActivateDuringDialogue");

	Params::BPI_DialogueCharacter_C_BPI_GetSpotlightsToActivateDuringDialogue Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (SpotLightActors != nullptr)
		*SpotLightActors = std::move(Parms.SpotLightActors);
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_HasLightingAuthority
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_DialogueCharacter_C::BPI_HasLightingAuthority()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_HasLightingAuthority");

	Params::BPI_DialogueCharacter_C_BPI_HasLightingAuthority Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BPI_DialogueCharacter.BPI_DialogueCharacter_C.BPI_ShouldMoveCameraPresetsToOtherSide
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool IBPI_DialogueCharacter_C::BPI_ShouldMoveCameraPresetsToOtherSide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_DialogueCharacter_C", "BPI_ShouldMoveCameraPresetsToOtherSide");

	Params::BPI_DialogueCharacter_C_BPI_ShouldMoveCameraPresetsToOtherSide Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

