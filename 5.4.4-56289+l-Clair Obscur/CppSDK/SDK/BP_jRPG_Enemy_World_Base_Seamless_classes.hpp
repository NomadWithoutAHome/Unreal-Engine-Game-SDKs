#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Enemy_World_Base_Seamless

#include "Basic.hpp"

#include "S_RangedAmbienceParameters_structs.hpp"
#include "S_MusicParameters_structs.hpp"
#include "EInputDevices_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_EnemyIdleState_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EInWorldAudioContainerComponents_structs.hpp"
#include "FSoundEvent_structs.hpp"
#include "E_AiStates_structs.hpp"
#include "FPromptParams_structs.hpp"
#include "E_jRPG_EngageTypes_structs.hpp"
#include "EBattleEndResult_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_Enemy_World_Base_Seamless.BP_jRPG_Enemy_World_Base_Seamless_C
// 0x0680 (0x0CF0 - 0x0670)
class ABP_jRPG_Enemy_World_Base_Seamless_C : public ACharacter
{
public:
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0670(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          FreeAimBoxCollision;                               // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ACWeaponL01;                                       // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ACWeaponR01;                                       // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ACWeaponL02;                                       // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ACHandL01;                                         // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Hand_L;                                            // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        ACHandR01;                                         // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Hand_R;                                            // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvironmentInteractorComponent_C*   BP_EnvironmentInteractorComponent_foot_right;      // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvironmentInteractorComponent_C*   BP_EnvironmentInteractorComponent_foot_left;       // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Enemy_SerializableComponent_C*      BP_Enemy_SerializableComponent;                    // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SmartObjectInteractorComponent_C*   BP_SmartObjectInteractorComponent;                 // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_RandomVariation_C*                  BP_RandomColor;                                    // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Weapon_Small_LP;                                   // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Weapon_Heavy_LP;                                   // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   weapon_r;                                          // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   weapon_l;                                          // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionWarpingComponent*                StartMotionWarp;                                   // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_RoamingAiComponent_C*               BP_RoamingAiComponent;                             // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Idle;                                           // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_SFX_02;                                         // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Foleys_02;                                      // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_FT_R;                                           // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Vocal_02;                                       // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_SFX_01;                                         // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Foleys_01;                                      // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_FT_L;                                           // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Vocal_01;                                       // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AudioCharacter_Manager_C*           BP_AudioCharacter_Manager;                         // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       PPBattleTransitionZone;                            // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        PromptLocation;                                    // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      StunFX;                                            // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      EncounterCapsuleRange;                             // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      NS_Sparks_ToughEnemy;                              // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_InteractionCheck_C*                 AC_InteractionCheck;                               // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_NewTrack_0_FF1BABD84E0F05C82447F48EFFD07FA9; // 0x0798(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_FF1BABD84E0F05C82447F48EFFD07FA9; // 0x079C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79D[0x3];                                      // 0x079D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDetection;                                   // 0x07A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7A9[0x7];                                      // 0x07A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        EncounterRadius;                                   // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             LastPlayerCharacterSeen;                           // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FDataTableRowHandle>            PossibleEncounters;                                // 0x07C0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	struct FDataTableRowHandle                    SelectedEncounter;                                 // 0x07D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<class FName>                           DEPRECATED_PossibleEncounters;                     // 0x07E0(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	TSoftObjectPtr<class ABP_BattleMap_C>         BattleMap_BP;                                      // 0x07F0(0x0028)(Edit, BlueprintVisible, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UDataLayerAsset*>                BattleMapDataLayers;                               // 0x0818(0x0010)(Edit, BlueprintVisible, ExposeOnSpawn)
	class UBP_PDT_GameAction_C*                   GameActionPostBattle;                              // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_MusicParameters                     BattleMusicParameters;                             // 0x0830(0x0030)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FFSoundEvent                           BattleMusic;                                       // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Deprecated, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, HasGetValueTypeHash)
	struct FS_RangedAmbienceParameters            BattleAmbienceParameters;                          // 0x0868(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          RespawnsOnRest;                                    // 0x0878(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Boss_;                                             // 0x0879(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_87A[0x6];                                      // 0x087A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   GameInstanceReference;                             // 0x0880(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ToughEnemy;                                        // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OriginalLocation;                                  // 0x0890(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FleeImpossible;                                    // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsChasingPlayer;                                   // 0x08A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AA[0x6];                                      // 0x08AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RoamingSpeed;                                      // 0x08B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRoamingWhenIdle;                                 // 0x08B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8B9[0x7];                                      // 0x08B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IdleRoamingRadius;                                 // 0x08C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementSpeed;                                     // 0x08C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class UAC_jRPG_BattleManager_C*               BattleManagerRef;                                  // 0x08D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, Deprecated, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAlreadyHitByWorldStrike;                         // 0x08D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8D9[0x7];                                      // 0x08D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FreezeDuration;                                    // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStun;                                            // 0x08E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8E9[0x7];                                      // 0x08E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AController_WorldAI_C*                  ControllerRef;                                     // 0x08F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UBehaviorTree*                          WaitBehaviorTree;                                  // 0x08F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          ChaseBehaviorTree;                                 // 0x0900(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeStun;                                         // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_909[0x7];                                      // 0x0909(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StunDurationFreeAimShoot;                          // 0x0910(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ATargetPoint>            WaitingPoint;                                      // 0x0918(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	E_AiStates                                    MainState;                                         // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_EnemyIdleState                              CurrentIdleState;                                  // 0x0941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanPlaySpottedSound;                               // 0x0942(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_943[0x5];                                      // 0x0943(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CamOriginalLocation;                               // 0x0948(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayBattleCameraIntro_;                            // 0x0960(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_961[0x7];                                      // 0x0961(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBehaviorTree*                          DetectPlayerBehaviorTree;                          // 0x0968(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               targetLookAtRot;                                   // 0x0970(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          is_rotating_to_player;                             // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DetectionDistance;                                 // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        VisionAngle;                                       // 0x0998(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DetectionDistancePeripheral;                       // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AggroVisionRange;                                  // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          StunBehaviorTree;                                  // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Back_to_Exploration_on_Lost;                       // 0x09B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAtPlayer;                                      // 0x09B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAtPlayerAllTheTime;                            // 0x09BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9BB[0x5];                                      // 0x09BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             CanBeStunHitSound;                                 // 0x09C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             CantBeStunHitSound;                                // 0x09C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          PP_Transition_Battle;                              // 0x09D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeAttacked;                                     // 0x09D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9D2[0x6];                                      // 0x09D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             CanBeAttackHitFeedBack;                            // 0x09D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         CanBeAttackHitFx1;                                 // 0x09E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         CanBeAttackHitFx2;                                 // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystem*                         StunFXhit;                                         // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldDisplayAttackPrompt;                         // 0x09F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9F9[0x7];                                      // 0x09F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPromptParams                         Prompt_Params;                                     // 0x0A00(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          DebugMe;                                           // 0x0A18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSoundEvent                           SD_WorldStrikeHit;                                 // 0x0A20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          HasBeenAttacked;                                   // 0x0A28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A29[0x7];                                      // 0x0A29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSoundEvent                           SD_WorldSound;                                     // 0x0A30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Deprecated, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        WorldSound_LowerDelay;                             // 0x0A38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WorldSound_MaxDelay;                               // 0x0A40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_jRPG_Enemy_World_Base_Seamless_C* Enemy, class ACharacter* AggroedCharacter)> OnAggroBegin; // 0x0A48(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class FName>                           AggroLocks;                                        // 0x0A58(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	float                                         ExtraDelayBeforeChase;                             // 0x0A68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A6C[0x4];                                      // 0x0A6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            ActiveVisionPrimitives;                            // 0x0A70(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FTimerHandle                           Timer_StopEnterChaseMode_Hysteresis;               // 0x0A80(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_PlayerLeftVision_Hysteresis;                 // 0x0A88(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_ForcedAggro;                                 // 0x0A90(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class ABP_GameplayRoom_C>> RoomsRequiredForAggro;                          // 0x0A98(0x0010)(Edit, BlueprintVisible)
	TArray<TSoftObjectPtr<class ABP_GameplayRoom_C>> RoomsTriggeringAggro;                           // 0x0AA8(0x0010)(Edit, BlueprintVisible)
	TArray<class ABP_GameplayRoom_C*>             RoomsRequiredForAggroHardRef;                      // 0x0AB8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_GameplayRoom_C*>             RoomsTriggeringAggroHardRef;                       // 0x0AC8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          PlayerCharacterMatchesRoomRequirement;             // 0x0AD8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD9[0x7];                                      // 0x0AD9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_World_C*             CharacterInVisionRange;                            // 0x0AE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        CustomScriptSources;                               // 0x0AE8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          LODOptimizationActive;                             // 0x0AF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AF9[0x7];                                      // 0x0AF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AggroMaxRange;                                     // 0x0B00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_ShowAggroRange;                              // 0x0B08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseMaxRadiusForCurrentAggro;                       // 0x0B09(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DebugFlag;                                   // 0x0B0A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCharacterInVisionCones;                         // 0x0B0B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B0C[0x4];                                      // 0x0B0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DetectionProgressDuration;                         // 0x0B10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DetectionForgetProgressDuration;                   // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LookAtPlayerWhenChasing;                           // 0x0B20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NoEndChaseOnEndOverlap;                            // 0x0B21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B22[0x6];                                      // 0x0B22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          DetectPlayerAnimSequence;                          // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DetectPlayerCharacterSound;                        // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             DetectPlayerCharacterSound_Generic;                // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayerCharacterIsInDetectionRange;                 // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B41[0x7];                                      // 0x0B41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DetectionProgress;                                 // 0x0B48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDetectionProgressDurationMultiplier;        // 0x0B50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               StartDetectPlayerRot;                              // 0x0B58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          EnableNewVisionSystem;                             // 0x0B70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DisplayVision;                               // 0x0B71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInBattle;                                        // 0x0B72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AdaptBattlemapLocation_;                           // 0x0B73(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B74[0x4];                                      // 0x0B74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          MainIdleAnimSequence;                              // 0x0B78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_AiStates                                    StartingAiState;                                   // 0x0B80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AiStates                                    CurrentAiState;                                    // 0x0B81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B82[0x6];                                      // 0x0B82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           DetectPlayerAnim;                                  // 0x0B88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	int32                                         EncounterLevelOffset;                              // 0x0B90(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_AiStates                                    StateWhenPlayerIsDetected;                         // 0x0B94(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B95[0xB];                                      // 0x0B95(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             InitialTransform;                                  // 0x0BA0(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldTick;                                        // 0x0C00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VO_IdleScream_;                                    // 0x0C01(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          VO_ChasingScream_;                                 // 0x0C02(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C03[0x5];                                      // 0x0C03(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             VO_Idle_Sound;                                     // 0x0C08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        VO_Idle_Delay_Min;                                 // 0x0C10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VO_Idle_Delay_Max;                                 // 0x0C18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             VO_Chasing_Sound;                                  // 0x0C20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        VO_Chasing_Delay_Min;                              // 0x0C28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VO_Chasing_Delay_Max;                              // 0x0C30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_Exploration_Growl;                           // 0x0C38(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_Chasing_Growl;                               // 0x0C40(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTransient;                                       // 0x0C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_C49[0x7];                                      // 0x0C49(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             VO_Pain_Sound;                                     // 0x0C50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         VO_Pain_Sound_Start_Time;                          // 0x0C58(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5C[0x4];                                      // 0x0C5C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Foley_Pain_Sound;                                  // 0x0C60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         Foley_Pain_Sound_Start_Time;                       // 0x0C68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C6C[0x4];                                      // 0x0C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class ABP_EnemyGroup_C>        EnemyGroupReference;                               // 0x0C70(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class UBehaviorTree*                          FleeingBehaviorTree;                               // 0x0C98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class USkeletalMeshComponent*>         SkeletalComponentsList;                            // 0x0CA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UCameraAnimationSequence*>       EncounterCamAnimSequence;                          // 0x0CB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        CustomIdlePlayRate;                                // 0x0CC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MainIdleStartPosition;                             // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          MirrorIdle;                                        // 0x0CD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HasDetectedPlayerOnce;                             // 0x0CD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CD2[0x6];                                      // 0x0CD2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           Timer_WaitBetweenDetection;                        // 0x0CD8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStunned;                                         // 0x0CE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CE1[0x7];                                      // 0x0CE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        StunDurationFleeBattle;                            // 0x0CE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddAggroLock(const class FName& LockName);
	void AddInteractable(class AActor* Interactable);
	void BeginCustomScriptState(class UObject* SourceObject);
	void BndEvt__BP_jRPG_Enemy_World_Base_Seamless_EncounterCapsuleRange_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_jRPG_Enemy_World_Base_Seamless_PPBattleTransitionZone_K2Node_ComponentBoundEvent_6_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_jRPG_Enemy_World_Base_Seamless_PPBattleTransitionZone_K2Node_ComponentBoundEvent_7_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BoxTriggered();
	void CanInteractWithMount(bool* CanInteract);
	bool CanStartBattleWithCharacter(class ABP_jRPG_Character_World_C* Character);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ComputeDetectionParameters(struct FActorDetectionParameters* DetectionParameters);
	void DEBUG_OnCVarChanged_DisplayVisionDebug(bool NewValue);
	void DEBUG_SetOptimizationActive(bool LODOptimizationActive_0);
	void DEBUG_ShowState();
	void EndCustomScriptState(const class UObject*& CustomScriptSource, E_AiStates DesiredState);
	void EnterDetectPlayerStateInternal();
	void EnterStunState(double StunDuration);
	void ExecuteUbergraph_BP_jRPG_Enemy_World_Base_Seamless(int32 EntryPoint);
	void ExplorationAttacked(class ABP_jRPG_Character_World_C* PlayerCharacter, const struct FVector& ImpactPoint);
	void FreeAimHit(class ABP_jRPG_Character_World_C* PlayerCharacterWorld, const struct FVector& HitLocation, bool IsDisabled);
	void GetAllAudioComponents(TArray<class UAudioComponent*>* AudioComponents);
	void GetAudioCharacterManager(class UActorComponent** AudioCharacterManager);
	void GetAudioComponentByType(const EInWorldAudioContainerComponents Type, class UAudioComponent** AudioComponent);
	void GetAudioComponents(class UAudioComponent** AC_SFX_01_0, class UAudioComponent** AC_Foleys_01_0, class UAudioComponent** AC_FT_L_0, class UAudioComponent** AC_Vocals_01, class UAudioComponent** AC_SFX_02_0, class UAudioComponent** AC_Foleys_02_0, class UAudioComponent** AC_FT_R_0, class UAudioComponent** AC_Vocals_02, class UAudioComponent** AC_Idle_0, class UAudioComponent** AC_Weapon_L_01, class UAudioComponent** AC_Weapon_L_02, class UAudioComponent** AC_Weapon_R_01, class UAudioComponent** AC_Hand_L_01, class UAudioComponent** AC_Hand_R_01);
	void GetBattleCameraTransition(class UCameraAnimationSequence** CameraTransition);
	void GetClosestInteractable(class AActor** Interactable);
	void GetCurrentInputDevice(EInputDevices::EInputDevices* InputDevice);
	void GetGlobalObjectIDWithGroup(class FName* ObjectId);
	struct FTransform GetInitialTransform();
	void GetInteractionPromptParams(struct FFPromptParams* PromptParams);
	void GetLookAtRotator(class AActor* Target, struct FRotator* Rotator);
	void GetPlayerCharacterIsInDetectionRange(bool* PlayerCharacterIsInDetectionRange_0);
	void GetTest();
	void InitializeGameplayRooms();
	void InterruptEnterChaseMode();
	void IsActorAggroTriggerRoom(class AActor* Actor, bool* IsTriggerRoom);
	void IsFreeAimTargetDisabled(bool* IsDisabled);
	void IsInteractionAvailable(bool* Available);
	void IsInteractionDone(bool* Done);
	bool IsPlayerTooPowerfullToChase();
	bool IsWithinMaxAggroRange();
	void OnBattleFinished(EBattleEndResult BattleEndResult);
	void OnBattleFled();
	void OnCharacterDetected();
	void OnCharacterEnteredVisionRange(class ABP_jRPG_Character_World_C* JRPG_Character_world);
	void OnCharacterLeftVisionHysteresisTimerCompleted();
	void OnDetectedCharacterChangedRoom(class ABP_jRPG_Character_World_C* Character);
	void OnDetectionComplete();
	void OnEnemyBattledEvent(class FName EnemyID);
	void OnEnemyBattleStateLoaded(bool BattleState);
	void OnExtraVisionShapeBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnExtraVisionShapeEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnFailedDetection();
	void OnInteractionDisabled();
	void OnInteractionEnabled();
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnObjectInteractionStateLoaded(bool InteractionState);
	void OnStunRecoveryAnimationFinished();
	void OnVisionShapeBeginOverlap(const class UPrimitiveComponent*& Primitive, const class FString& Reason);
	void OnVisionShapeEndOverlap(const class UPrimitiveComponent*& Component, class AActor* Actor, const class FString& Reason, bool* ValidEvent);
	void OnWaitBetweenDetectionTimerElapsed();
	void OptimizeCharacterMovementComponent();
	void OptimizeSkeletalMeshComponents();
	void PauseAllSound();
	void PlayBattleBeginTransition();
	void PlayBattleCameraTransition();
	void PlayChasingSound();
	void PlayExplorationSound();
	void PlayFeedbackHitCanBeAttacked();
	void PlayFeedbackHitCanNotBeAttacked();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RegisterEvents();
	void RegisterExtraVisionShape(class UPrimitiveComponent* Primitive);
	void RemoveAggroLock(const class FName& LockName);
	void RemoveInteractable(class AActor* Interactable);
	void RequestStopEnterChaseMode();
	void ResetAggro();
	void ResetAnimation();
	void ResetState();
	void ResetStateInternal();
	void RestoreTransformIfNeeded();
	void SetAiState(E_AiStates NewAiState);
	void SetAllOverlapCollision(ECollisionEnabled NewType);
	bool SetCurrentBT(class UBehaviorTree* BTAsset);
	void SetCurrentIdleState(E_EnemyIdleState CurrentIdleState_0);
	void SetGameplayPaused(bool Paused);
	bool ShouldEncounterCapsuleGenerateOverlaps();
	bool ShouldHideDistantInteraction();
	bool ShouldReactToCharacter(class FString* DebugReason);
	void SpawnDesintegrationFX();
	void StartBattle(E_jRPG_EngageTypes EngagementType);
	void StartChasingSoundTimer();
	void StartExplorationSoundTimer();
	void StopChasing();
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void UnpauseAllSound();
	void UpdateCharacterDetection();
	void UpdateCharacterDetectionTick();
	bool UpdateCharacterRoomsRequirement(class ABP_jRPG_Character_World_C* Character);
	void UpdateDetectionInVisionCone(const struct FActorDetectionParameters& DetectionParameters, bool* Detected);
	void UpdateDetectionProgress();
	void UpdateDetectionProgressDurationMultiplier();
	void UpdateDetectionProgressDurationMultiplierByGait();
	void UpdateDetectionProgressMultiplierByDistance();
	void UpdateDetectionProgressValue();
	void UpdateDetectionWithLineOfSight(const struct FActorDetectionParameters& DetectionParameters, bool* IsVisible);
	void UpdateEncounterCapsuleSettings();
	void UpdateFreeAimCollisionBox();
	void UpdateInteractables();
	void UpdatePlayerCharacterDetection(bool* Detected);
	void UserConstructionScript();

	void DEBUG_ShowVisionCone(float Lifetime) const;
	void DisplayVisionAngle(const struct FVector& Center, double A, float Lifetime, const struct FLinearColor& Color, float Radius) const;
	bool Editor_DrawDebugShapes() const;
	bool Editor_GetDebugShapes(TArray<struct FEditorDebugShape_Arrow>& Arrows, TArray<struct FEditorDebugShape_Arrow>& Lines) const;
	void GetInteractionFeedbackLocation(struct FVector* Location) const;
	void GetInteractionLocation(struct FVector* Location) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_Enemy_World_Base_Seamless_C">();
	}
	static class ABP_jRPG_Enemy_World_Base_Seamless_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_Enemy_World_Base_Seamless_C>();
	}
};
static_assert(alignof(ABP_jRPG_Enemy_World_Base_Seamless_C) == 0x000010, "Wrong alignment on ABP_jRPG_Enemy_World_Base_Seamless_C");
static_assert(sizeof(ABP_jRPG_Enemy_World_Base_Seamless_C) == 0x000CF0, "Wrong size on ABP_jRPG_Enemy_World_Base_Seamless_C");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, UberGraphFrame) == 0x000670, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, FreeAimBoxCollision) == 0x000678, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::FreeAimBoxCollision' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ACWeaponL01) == 0x000680, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ACWeaponL01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ACWeaponR01) == 0x000688, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ACWeaponR01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ACWeaponL02) == 0x000690, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ACWeaponL02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ACHandL01) == 0x000698, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ACHandL01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Hand_L) == 0x0006A0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ACHandR01) == 0x0006A8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ACHandR01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Hand_R) == 0x0006B0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_EnvironmentInteractorComponent_foot_right) == 0x0006B8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_EnvironmentInteractorComponent_foot_right' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_EnvironmentInteractorComponent_foot_left) == 0x0006C0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_EnvironmentInteractorComponent_foot_left' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_Enemy_SerializableComponent) == 0x0006C8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_Enemy_SerializableComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_SmartObjectInteractorComponent) == 0x0006D0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_SmartObjectInteractorComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_RandomColor) == 0x0006D8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_RandomColor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Weapon_Small_LP) == 0x0006E0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Weapon_Small_LP' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Weapon_Heavy_LP) == 0x0006E8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Weapon_Heavy_LP' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, weapon_r) == 0x0006F0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::weapon_r' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, weapon_l) == 0x0006F8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::weapon_l' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StartMotionWarp) == 0x000700, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StartMotionWarp' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_RoamingAiComponent) == 0x000708, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_RoamingAiComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_Idle) == 0x000710, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_Idle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_SFX_02) == 0x000718, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_SFX_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_Foleys_02) == 0x000720, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_Foleys_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_FT_R) == 0x000728, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_FT_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_Vocal_02) == 0x000730, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_Vocal_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_SFX_01) == 0x000738, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_SFX_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_Foleys_01) == 0x000740, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_Foleys_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_FT_L) == 0x000748, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_FT_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_Vocal_01) == 0x000750, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_Vocal_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BP_AudioCharacter_Manager) == 0x000758, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BP_AudioCharacter_Manager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PPBattleTransitionZone) == 0x000760, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PPBattleTransitionZone' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PromptLocation) == 0x000768, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PromptLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StunFX) == 0x000770, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StunFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Arrow1) == 0x000778, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EncounterCapsuleRange) == 0x000780, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EncounterCapsuleRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, NS_Sparks_ToughEnemy) == 0x000788, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::NS_Sparks_ToughEnemy' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AC_InteractionCheck) == 0x000790, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AC_InteractionCheck' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timeline_0_NewTrack_0_FF1BABD84E0F05C82447F48EFFD07FA9) == 0x000798, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timeline_0_NewTrack_0_FF1BABD84E0F05C82447F48EFFD07FA9' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timeline_0__Direction_FF1BABD84E0F05C82447F48EFFD07FA9) == 0x00079C, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timeline_0__Direction_FF1BABD84E0F05C82447F48EFFD07FA9' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timeline_0) == 0x0007A0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EnableDetection) == 0x0007A8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EnableDetection' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EncounterRadius) == 0x0007B0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EncounterRadius' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, LastPlayerCharacterSeen) == 0x0007B8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::LastPlayerCharacterSeen' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PossibleEncounters) == 0x0007C0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PossibleEncounters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, SelectedEncounter) == 0x0007D0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::SelectedEncounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DEPRECATED_PossibleEncounters) == 0x0007E0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DEPRECATED_PossibleEncounters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BattleMap_BP) == 0x0007F0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BattleMap_BP' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BattleMapDataLayers) == 0x000818, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BattleMapDataLayers' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, GameActionPostBattle) == 0x000828, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::GameActionPostBattle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BattleMusicParameters) == 0x000830, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BattleMusicParameters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BattleMusic) == 0x000860, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BattleMusic' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BattleAmbienceParameters) == 0x000868, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BattleAmbienceParameters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, RespawnsOnRest) == 0x000878, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::RespawnsOnRest' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Boss_) == 0x000879, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Boss_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, GameInstanceReference) == 0x000880, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::GameInstanceReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ToughEnemy) == 0x000888, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ToughEnemy' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, OriginalLocation) == 0x000890, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::OriginalLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, FleeImpossible) == 0x0008A8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::FleeImpossible' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsChasingPlayer) == 0x0008A9, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsChasingPlayer' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, RoamingSpeed) == 0x0008B0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::RoamingSpeed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsRoamingWhenIdle) == 0x0008B8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsRoamingWhenIdle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IdleRoamingRadius) == 0x0008C0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IdleRoamingRadius' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, MovementSpeed) == 0x0008C8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, BattleManagerRef) == 0x0008D0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::BattleManagerRef' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsAlreadyHitByWorldStrike) == 0x0008D8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsAlreadyHitByWorldStrike' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, FreezeDuration) == 0x0008E0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::FreezeDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsStun) == 0x0008E8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsStun' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ControllerRef) == 0x0008F0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ControllerRef' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, WaitBehaviorTree) == 0x0008F8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::WaitBehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ChaseBehaviorTree) == 0x000900, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ChaseBehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanBeStun) == 0x000908, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanBeStun' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StunDurationFreeAimShoot) == 0x000910, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StunDurationFreeAimShoot' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, WaitingPoint) == 0x000918, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::WaitingPoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, MainState) == 0x000940, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::MainState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CurrentIdleState) == 0x000941, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CurrentIdleState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanPlaySpottedSound) == 0x000942, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanPlaySpottedSound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CamOriginalLocation) == 0x000948, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CamOriginalLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PlayBattleCameraIntro_) == 0x000960, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PlayBattleCameraIntro_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectPlayerBehaviorTree) == 0x000968, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectPlayerBehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, targetLookAtRot) == 0x000970, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::targetLookAtRot' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, is_rotating_to_player) == 0x000988, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::is_rotating_to_player' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectionDistance) == 0x000990, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectionDistance' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VisionAngle) == 0x000998, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VisionAngle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectionDistancePeripheral) == 0x0009A0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectionDistancePeripheral' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AggroVisionRange) == 0x0009A8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AggroVisionRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StunBehaviorTree) == 0x0009B0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StunBehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Back_to_Exploration_on_Lost) == 0x0009B8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Back_to_Exploration_on_Lost' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, LookAtPlayer) == 0x0009B9, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::LookAtPlayer' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, LookAtPlayerAllTheTime) == 0x0009BA, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::LookAtPlayerAllTheTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanBeStunHitSound) == 0x0009C0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanBeStunHitSound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CantBeStunHitSound) == 0x0009C8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CantBeStunHitSound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PP_Transition_Battle) == 0x0009D0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PP_Transition_Battle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanBeAttacked) == 0x0009D1, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanBeAttacked' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanBeAttackHitFeedBack) == 0x0009D8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanBeAttackHitFeedBack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanBeAttackHitFx1) == 0x0009E0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanBeAttackHitFx1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CanBeAttackHitFx2) == 0x0009E8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CanBeAttackHitFx2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StunFXhit) == 0x0009F0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StunFXhit' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ShouldDisplayAttackPrompt) == 0x0009F8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ShouldDisplayAttackPrompt' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Prompt_Params) == 0x000A00, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Prompt_Params' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DebugMe) == 0x000A18, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DebugMe' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, SD_WorldStrikeHit) == 0x000A20, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::SD_WorldStrikeHit' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, HasBeenAttacked) == 0x000A28, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::HasBeenAttacked' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, SD_WorldSound) == 0x000A30, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::SD_WorldSound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, WorldSound_LowerDelay) == 0x000A38, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::WorldSound_LowerDelay' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, WorldSound_MaxDelay) == 0x000A40, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::WorldSound_MaxDelay' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, OnAggroBegin) == 0x000A48, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::OnAggroBegin' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AggroLocks) == 0x000A58, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AggroLocks' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ExtraDelayBeforeChase) == 0x000A68, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ExtraDelayBeforeChase' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ActiveVisionPrimitives) == 0x000A70, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ActiveVisionPrimitives' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timer_StopEnterChaseMode_Hysteresis) == 0x000A80, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timer_StopEnterChaseMode_Hysteresis' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timer_PlayerLeftVision_Hysteresis) == 0x000A88, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timer_PlayerLeftVision_Hysteresis' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timer_ForcedAggro) == 0x000A90, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timer_ForcedAggro' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, RoomsRequiredForAggro) == 0x000A98, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::RoomsRequiredForAggro' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, RoomsTriggeringAggro) == 0x000AA8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::RoomsTriggeringAggro' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, RoomsRequiredForAggroHardRef) == 0x000AB8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::RoomsRequiredForAggroHardRef' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, RoomsTriggeringAggroHardRef) == 0x000AC8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::RoomsTriggeringAggroHardRef' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PlayerCharacterMatchesRoomRequirement) == 0x000AD8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PlayerCharacterMatchesRoomRequirement' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CharacterInVisionRange) == 0x000AE0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CharacterInVisionRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CustomScriptSources) == 0x000AE8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CustomScriptSources' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, LODOptimizationActive) == 0x000AF8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::LODOptimizationActive' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AggroMaxRange) == 0x000B00, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AggroMaxRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DEBUG_ShowAggroRange) == 0x000B08, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DEBUG_ShowAggroRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, UseMaxRadiusForCurrentAggro) == 0x000B09, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::UseMaxRadiusForCurrentAggro' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DEBUG_DebugFlag) == 0x000B0A, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DEBUG_DebugFlag' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, HasCharacterInVisionCones) == 0x000B0B, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::HasCharacterInVisionCones' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectionProgressDuration) == 0x000B10, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectionProgressDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectionForgetProgressDuration) == 0x000B18, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectionForgetProgressDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, LookAtPlayerWhenChasing) == 0x000B20, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::LookAtPlayerWhenChasing' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, NoEndChaseOnEndOverlap) == 0x000B21, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::NoEndChaseOnEndOverlap' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectPlayerAnimSequence) == 0x000B28, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectPlayerAnimSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectPlayerCharacterSound) == 0x000B30, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectPlayerCharacterSound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectPlayerCharacterSound_Generic) == 0x000B38, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectPlayerCharacterSound_Generic' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, PlayerCharacterIsInDetectionRange) == 0x000B40, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::PlayerCharacterIsInDetectionRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectionProgress) == 0x000B48, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectionProgress' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CurrentDetectionProgressDurationMultiplier) == 0x000B50, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CurrentDetectionProgressDurationMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StartDetectPlayerRot) == 0x000B58, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StartDetectPlayerRot' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EnableNewVisionSystem) == 0x000B70, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EnableNewVisionSystem' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DEBUG_DisplayVision) == 0x000B71, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DEBUG_DisplayVision' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsInBattle) == 0x000B72, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsInBattle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, AdaptBattlemapLocation_) == 0x000B73, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::AdaptBattlemapLocation_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, MainIdleAnimSequence) == 0x000B78, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::MainIdleAnimSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StartingAiState) == 0x000B80, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StartingAiState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CurrentAiState) == 0x000B81, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CurrentAiState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, DetectPlayerAnim) == 0x000B88, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::DetectPlayerAnim' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EncounterLevelOffset) == 0x000B90, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EncounterLevelOffset' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StateWhenPlayerIsDetected) == 0x000B94, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StateWhenPlayerIsDetected' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, InitialTransform) == 0x000BA0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::InitialTransform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, ShouldTick) == 0x000C00, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::ShouldTick' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_IdleScream_) == 0x000C01, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_IdleScream_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_ChasingScream_) == 0x000C02, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_ChasingScream_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Idle_Sound) == 0x000C08, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Idle_Sound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Idle_Delay_Min) == 0x000C10, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Idle_Delay_Min' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Idle_Delay_Max) == 0x000C18, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Idle_Delay_Max' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Chasing_Sound) == 0x000C20, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Chasing_Sound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Chasing_Delay_Min) == 0x000C28, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Chasing_Delay_Min' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Chasing_Delay_Max) == 0x000C30, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Chasing_Delay_Max' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timer_Exploration_Growl) == 0x000C38, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timer_Exploration_Growl' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timer_Chasing_Growl) == 0x000C40, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timer_Chasing_Growl' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsTransient) == 0x000C48, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsTransient' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Pain_Sound) == 0x000C50, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Pain_Sound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, VO_Pain_Sound_Start_Time) == 0x000C58, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::VO_Pain_Sound_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Foley_Pain_Sound) == 0x000C60, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Foley_Pain_Sound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Foley_Pain_Sound_Start_Time) == 0x000C68, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Foley_Pain_Sound_Start_Time' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EnemyGroupReference) == 0x000C70, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EnemyGroupReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, FleeingBehaviorTree) == 0x000C98, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::FleeingBehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, SkeletalComponentsList) == 0x000CA0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::SkeletalComponentsList' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, EncounterCamAnimSequence) == 0x000CB0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::EncounterCamAnimSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, CustomIdlePlayRate) == 0x000CC0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::CustomIdlePlayRate' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, MainIdleStartPosition) == 0x000CC8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::MainIdleStartPosition' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, MirrorIdle) == 0x000CD0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::MirrorIdle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, HasDetectedPlayerOnce) == 0x000CD1, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::HasDetectedPlayerOnce' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, Timer_WaitBetweenDetection) == 0x000CD8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::Timer_WaitBetweenDetection' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, IsStunned) == 0x000CE0, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::IsStunned' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Enemy_World_Base_Seamless_C, StunDurationFleeBattle) == 0x000CE8, "Member 'ABP_jRPG_Enemy_World_Base_Seamless_C::StunDurationFleeBattle' has a wrong offset!");

}

