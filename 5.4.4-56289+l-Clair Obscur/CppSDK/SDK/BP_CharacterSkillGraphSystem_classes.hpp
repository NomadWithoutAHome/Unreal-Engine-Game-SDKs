#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CharacterSkillGraphSystem

#include "Basic.hpp"

#include "SandFall_classes.hpp"
#include "ELearnSkillBlockedReason_structs.hpp"
#include "ESkillNodeState_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CharacterSkillGraphSystem.BP_CharacterSkillGraphSystem_C
// 0x0048 (0x0070 - 0x0028)
class UBP_CharacterSkillGraphSystem_C final : public UExtendedObject
{
public:
	class UBP_CharacterData_C*                    TempCharacterData;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class UBP_DataAsset_Skill_C*>          UnlockedSkills;                                    // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SkillPointsFromItems;                              // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SkillPointsFromLeveling;                           // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_DataAsset_Skill_C*>          EquippedSkills;                                    // 0x0048(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnSkillTreeChanged;                                // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         CurrentlyUsedSkillPoints;                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool CanAffordSkillUnlock(class UBP_DataAsset_Skill_C* Skill);
	bool CanEquipMoreSkills();
	bool CanLearnSkill(const class UBP_DataAsset_Skill_C*& Skill, ELearnSkillBlockedReason* BlockedReason);
	void EquipSkill(class UBP_DataAsset_Skill_C* SkillID);
	void EquipSkillAtSlot(const class UBP_DataAsset_Skill_C*& SkillDefinition, int32 Index_0);
	TArray<class UBP_DataAsset_Skill_C*> GetAllAvailableEquippedSkills();
	TArray<class UBP_DataAsset_Skill_C*> GetAvailableGradientAttacks();
	int32 GetAvailableSkillPoints();
	void GetEquippedSkills(TArray<class UBP_DataAsset_Skill_C*>* EquippedSkills_0);
	void GetEquippedSkillsSaveData(TArray<class FName>* EquippedSkillIDs);
	void GetFirstEmptySlotIndex(int32* Index_0);
	void GetSkillGraph(class UBP_DataAsset_SkillGraph_C** SkillGraph);
	void GetSkillState(class UBP_DataAsset_Skill_C* Skill, ESkillNodeState* NodeState);
	int32 GetTotalSkillPoints();
	TArray<class UBP_DataAsset_Skill_C*> GetUnlockedSkills();
	void GetUnlockedSkillSaveData(TArray<class FName>* UnlockedSkillIDs);
	bool HasLearnableSkills();
	bool HasLearntDependencySkills(const class UBP_DataAsset_Skill_C*& Skill);
	void Init();
	bool IsSkillUnlocked(const class UBP_DataAsset_Skill_C*& Skill);
	void LoadCharacterState(const struct FS_jRPG_CharacterSaveState& CharacterSaveState);
	void NotifyOtherSystems(class UBP_DataAsset_Skill_C* Skill);
	void OnNewItemAcquired(const struct FS_jRPG_Item_StaticData& ItemDefinition);
	void OnOwnerLevelSet(int32 CurrentLevel);
	void ResetProgression();
	void SetEquippedSkillOverrides(TArray<class UBP_DataAsset_Skill_C*>& EquippedSkills_0);
	void TryUnlockSkill(class UBP_DataAsset_Skill_C* Skill, bool* Success);
	void UnequipSkill(class UBP_DataAsset_Skill_C* SkillID);
	void UpdateCurrentSkillsUsedSkillPoints();
	void UpdateUsedSkillPoints();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CharacterSkillGraphSystem_C">();
	}
	static class UBP_CharacterSkillGraphSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CharacterSkillGraphSystem_C>();
	}
};
static_assert(alignof(UBP_CharacterSkillGraphSystem_C) == 0x000008, "Wrong alignment on UBP_CharacterSkillGraphSystem_C");
static_assert(sizeof(UBP_CharacterSkillGraphSystem_C) == 0x000070, "Wrong size on UBP_CharacterSkillGraphSystem_C");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, TempCharacterData) == 0x000028, "Member 'UBP_CharacterSkillGraphSystem_C::TempCharacterData' has a wrong offset!");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, UnlockedSkills) == 0x000030, "Member 'UBP_CharacterSkillGraphSystem_C::UnlockedSkills' has a wrong offset!");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, SkillPointsFromItems) == 0x000040, "Member 'UBP_CharacterSkillGraphSystem_C::SkillPointsFromItems' has a wrong offset!");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, SkillPointsFromLeveling) == 0x000044, "Member 'UBP_CharacterSkillGraphSystem_C::SkillPointsFromLeveling' has a wrong offset!");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, EquippedSkills) == 0x000048, "Member 'UBP_CharacterSkillGraphSystem_C::EquippedSkills' has a wrong offset!");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, OnSkillTreeChanged) == 0x000058, "Member 'UBP_CharacterSkillGraphSystem_C::OnSkillTreeChanged' has a wrong offset!");
static_assert(offsetof(UBP_CharacterSkillGraphSystem_C, CurrentlyUsedSkillPoints) == 0x000068, "Member 'UBP_CharacterSkillGraphSystem_C::CurrentlyUsedSkillPoints' has a wrong offset!");

}

