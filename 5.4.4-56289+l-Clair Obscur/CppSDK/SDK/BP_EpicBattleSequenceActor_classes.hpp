#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EpicBattleSequenceActor

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EpicBattleSequenceActor.BP_EpicBattleSequenceActor_C
// 0x01C0 (0x0450 - 0x0290)
class ABP_EpicBattleSequenceActor_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         LevelSequence;                                     // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       SourceCharacter;                                   // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> TargetCharacters;                                // 0x02B0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, ExposeOnSpawn)
	TMulticastInlineDelegate<void()>              OnSequenceFinished;                                // 0x02C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FTransform                             AttackerFirstPosition;                             // 0x02D0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ALevelSequenceActor*                    LevelSequenceActor;                                // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          SnapOnTarget;                                      // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          UseTargetAsOrigin;                                 // 0x0339(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_33A[0x6];                                      // 0x033A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                temp_SnapLocation;                                 // 0x0340(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FTimerHandle>                   impactTimers;                                      // 0x0358(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         currentTimerIndex;                                 // 0x0368(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<double, uint8>                           BattleSequenceKeyframes;                           // 0x0370(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        NextKeyframeTime;                                  // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsFinished;                                        // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseTargetOrientation;                              // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LookAtTarget;                                      // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          LookAtAttacker;                                    // 0x03CB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          HasAttackerBinding;                                // 0x03CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CD[0x3];                                      // 0x03CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, double>                           TimeMap;                                           // 0x03D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	bool                                          DisableSequenceSnapping;                           // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          WasInterrupted;                                    // 0x0421(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_422[0x6];                                      // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ActionEffectIndex)> OnActionEffect;                          // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class USF_BlueprintLatentAction*              CompletedLatentAction;                             // 0x0438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceEnableCameraMovement;                         // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ApplySequenceSnapping();
	void BindActionEffectEvent(const TDelegate<void(int32 ActionEffectIndex)>& Event);
	void ClearActiveSequenceEventBindings();
	void ExecuteUbergraph_BP_EpicBattleSequenceActor(int32 EntryPoint);
	void FindTimelineObjectByEpicActor(int32* TimelineIndex);
	void ForceSequenceStop();
	class FName GetBattleSequenceAttackerTag();
	class FName GetBattleSequenceTargetCenterLocation();
	class FName GetBattleSequenceTargetTag();
	void InterruptSequence();
	void PlayBattleSequence(class USF_BlueprintLatentAction* CompletedLatentAction_0);
	void ProcessSequenceEndedInternal();
	void ProcessSequenceFinished();
	void ProcessSequenceStopped();
	void Queue_Next_Keyframe();
	void QueueDestroyActor();
	void QueueInterrupt();
	void QueueSequenceStop();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RegisterBindings();
	void StartSequence(double* SequenceDuration);
	void StartSequenceInternal();
	void TriggerActionEffect(int32 ActionEffectIndex);
	void TryRegisterKeyframes();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EpicBattleSequenceActor_C">();
	}
	static class ABP_EpicBattleSequenceActor_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EpicBattleSequenceActor_C>();
	}
};
static_assert(alignof(ABP_EpicBattleSequenceActor_C) == 0x000010, "Wrong alignment on ABP_EpicBattleSequenceActor_C");
static_assert(sizeof(ABP_EpicBattleSequenceActor_C) == 0x000450, "Wrong size on ABP_EpicBattleSequenceActor_C");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, UberGraphFrame) == 0x000290, "Member 'ABP_EpicBattleSequenceActor_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_EpicBattleSequenceActor_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, LevelSequence) == 0x0002A0, "Member 'ABP_EpicBattleSequenceActor_C::LevelSequence' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, SourceCharacter) == 0x0002A8, "Member 'ABP_EpicBattleSequenceActor_C::SourceCharacter' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, TargetCharacters) == 0x0002B0, "Member 'ABP_EpicBattleSequenceActor_C::TargetCharacters' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, OnSequenceFinished) == 0x0002C0, "Member 'ABP_EpicBattleSequenceActor_C::OnSequenceFinished' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, AttackerFirstPosition) == 0x0002D0, "Member 'ABP_EpicBattleSequenceActor_C::AttackerFirstPosition' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, LevelSequenceActor) == 0x000330, "Member 'ABP_EpicBattleSequenceActor_C::LevelSequenceActor' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, SnapOnTarget) == 0x000338, "Member 'ABP_EpicBattleSequenceActor_C::SnapOnTarget' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, UseTargetAsOrigin) == 0x000339, "Member 'ABP_EpicBattleSequenceActor_C::UseTargetAsOrigin' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, temp_SnapLocation) == 0x000340, "Member 'ABP_EpicBattleSequenceActor_C::temp_SnapLocation' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, impactTimers) == 0x000358, "Member 'ABP_EpicBattleSequenceActor_C::impactTimers' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, currentTimerIndex) == 0x000368, "Member 'ABP_EpicBattleSequenceActor_C::currentTimerIndex' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, BattleSequenceKeyframes) == 0x000370, "Member 'ABP_EpicBattleSequenceActor_C::BattleSequenceKeyframes' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, NextKeyframeTime) == 0x0003C0, "Member 'ABP_EpicBattleSequenceActor_C::NextKeyframeTime' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, IsFinished) == 0x0003C8, "Member 'ABP_EpicBattleSequenceActor_C::IsFinished' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, UseTargetOrientation) == 0x0003C9, "Member 'ABP_EpicBattleSequenceActor_C::UseTargetOrientation' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, LookAtTarget) == 0x0003CA, "Member 'ABP_EpicBattleSequenceActor_C::LookAtTarget' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, LookAtAttacker) == 0x0003CB, "Member 'ABP_EpicBattleSequenceActor_C::LookAtAttacker' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, HasAttackerBinding) == 0x0003CC, "Member 'ABP_EpicBattleSequenceActor_C::HasAttackerBinding' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, TimeMap) == 0x0003D0, "Member 'ABP_EpicBattleSequenceActor_C::TimeMap' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, DisableSequenceSnapping) == 0x000420, "Member 'ABP_EpicBattleSequenceActor_C::DisableSequenceSnapping' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, WasInterrupted) == 0x000421, "Member 'ABP_EpicBattleSequenceActor_C::WasInterrupted' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, OnActionEffect) == 0x000428, "Member 'ABP_EpicBattleSequenceActor_C::OnActionEffect' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, CompletedLatentAction) == 0x000438, "Member 'ABP_EpicBattleSequenceActor_C::CompletedLatentAction' has a wrong offset!");
static_assert(offsetof(ABP_EpicBattleSequenceActor_C, ForceEnableCameraMovement) == 0x000440, "Member 'ABP_EpicBattleSequenceActor_C::ForceEnableCameraMovement' has a wrong offset!");

}

