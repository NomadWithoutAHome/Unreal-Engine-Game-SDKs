#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTService_LerpDestinationLocation

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C
// 0x00A8 (0x0140 - 0x0098)
class UBTService_LerpDestinationLocation_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 KeySelectorCurrentTargetLocation;                  // 0x00A0(0x0028)(Edit, BlueprintVisible)
	struct FBlackboardKeySelector                 KeySelectorNextTargetLocation;                     // 0x00C8(0x0028)(Edit, BlueprintVisible)
	double                                        LerpDistanceThreshold;                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LerpSpeedMultiplier;                               // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBlackboardKeySelector                 KeySelectorDestinationLocation;                    // 0x0100(0x0028)(Edit, BlueprintVisible)
	double                                        LerpMax;                                           // 0x0128(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLerpingToNextTargetLocation;                     // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LerpProgress;                                      // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BTService_LerpDestinationLocation(int32 EntryPoint);
	double GetDistanceBetweenCurrentAndNextTargetLocation();
	double GetMaxSpeedFromPawn(class APawn* ControlledPawn);
	void ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void UpdateLerpParameters(class APawn* ControlledPawn, bool* ShouldLerp);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BTService_LerpDestinationLocation_C">();
	}
	static class UBTService_LerpDestinationLocation_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTService_LerpDestinationLocation_C>();
	}
};
static_assert(alignof(UBTService_LerpDestinationLocation_C) == 0x000008, "Wrong alignment on UBTService_LerpDestinationLocation_C");
static_assert(sizeof(UBTService_LerpDestinationLocation_C) == 0x000140, "Wrong size on UBTService_LerpDestinationLocation_C");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, UberGraphFrame) == 0x000098, "Member 'UBTService_LerpDestinationLocation_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, KeySelectorCurrentTargetLocation) == 0x0000A0, "Member 'UBTService_LerpDestinationLocation_C::KeySelectorCurrentTargetLocation' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, KeySelectorNextTargetLocation) == 0x0000C8, "Member 'UBTService_LerpDestinationLocation_C::KeySelectorNextTargetLocation' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, LerpDistanceThreshold) == 0x0000F0, "Member 'UBTService_LerpDestinationLocation_C::LerpDistanceThreshold' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, LerpSpeedMultiplier) == 0x0000F8, "Member 'UBTService_LerpDestinationLocation_C::LerpSpeedMultiplier' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, KeySelectorDestinationLocation) == 0x000100, "Member 'UBTService_LerpDestinationLocation_C::KeySelectorDestinationLocation' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, LerpMax) == 0x000128, "Member 'UBTService_LerpDestinationLocation_C::LerpMax' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, IsLerpingToNextTargetLocation) == 0x000130, "Member 'UBTService_LerpDestinationLocation_C::IsLerpingToNextTargetLocation' has a wrong offset!");
static_assert(offsetof(UBTService_LerpDestinationLocation_C, LerpProgress) == 0x000138, "Member 'UBTService_LerpDestinationLocation_C::LerpProgress' has a wrong offset!");

}

