#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameActionTriggerZone

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FPromptParams_structs.hpp"
#include "E_GameActionTriggerZoneResetCategory_structs.hpp"
#include "E_GameActionTriggerZoneDestroyCategory_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameActionTriggerZone.BP_GameActionTriggerZone_C
// 0x00A0 (0x0330 - 0x0290)
class ABP_GameActionTriggerZone_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBillboardComponent*                    Billboard;                                         // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ConditionCheckerComponent_C*        BP_ConditionCheckerComponent;                      // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   InteractionLocation;                               // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Interaction_SerializableComponent_C* BP_Interaction_SerializableComponent;             // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TriggerBox;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	E_GameActionTriggerZoneDestroyCategory        DestroyCategory;                                   // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GameActionTriggerZoneResetCategory          ResetCategory;                                     // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBehaviorDone;                                    // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CB[0x5];                                      // 0x02CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            TriggerComponents;                                 // 0x02D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FGameAction_Wrapper                    GameActionOnOverlap;                               // 0x02E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsGameActionOnOverlapPlaying;                      // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameAction_Wrapper                    GameActionOnInteract;                              // 0x02F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          IsGameActionOnInteractPlaying;                     // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPromptParams                         InteractionPromptParams;                           // 0x0310(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class USoundBase*                             AudioOnInteract;                                   // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateTriggerComponentsCollision();
	void UnbindAllTriggerComponents();
	void TryUnbindGameActionExecutor();
	void TryRegisterInteract();
	void TryExecuteGameActionOnOverlap();
	bool ShouldHideDistantInteraction();
	void ShouldExecuteGameActionOnOverlap(bool* Result);
	void ShouldExecuteGameActionOnInteract(bool* Result);
	void SetTriggerComponentsCollisionEnabled(bool Enabled);
	void SaveBehaviorState();
	void ResetState();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnObjectInteractionStateLoaded(bool InteractionState);
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnInteractionEnabled();
	void OnInteractionDisabled();
	void OnGameActionExecuted(class UGameAction* GameAction);
	void OnEnemyBattleStateLoaded(bool BattleState);
	void OnComponentEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnComponentBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnActorOverlap(class AActor* Actor);
	void IsPlayerOverlappingWithOtherTriggers(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, bool* IsOverlapping);
	void IsInteractionDone(bool* Done);
	void IsInteractionAvailable(bool* Available);
	void GetInteractionPromptParams(struct FFPromptParams* PromptParams);
	void ExecuteUbergraph_BP_GameActionTriggerZone(int32 EntryPoint);
	void ExecuteGameActionOnInteract();
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void CanInteractWithMount(bool* CanInteract);
	void BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature(bool Condition);
	void BindGameActionExecutor();
	void BindAllTriggerComponents();

	void GetInteractionLocation(struct FVector* Location) const;
	void GetInteractionFeedbackLocation(struct FVector* Location) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameActionTriggerZone_C">();
	}
	static class ABP_GameActionTriggerZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GameActionTriggerZone_C>();
	}
};
static_assert(alignof(ABP_GameActionTriggerZone_C) == 0x000008, "Wrong alignment on ABP_GameActionTriggerZone_C");
static_assert(sizeof(ABP_GameActionTriggerZone_C) == 0x000330, "Wrong size on ABP_GameActionTriggerZone_C");
static_assert(offsetof(ABP_GameActionTriggerZone_C, UberGraphFrame) == 0x000290, "Member 'ABP_GameActionTriggerZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, Billboard) == 0x000298, "Member 'ABP_GameActionTriggerZone_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, BP_ConditionCheckerComponent) == 0x0002A0, "Member 'ABP_GameActionTriggerZone_C::BP_ConditionCheckerComponent' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, InteractionLocation) == 0x0002A8, "Member 'ABP_GameActionTriggerZone_C::InteractionLocation' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, BP_Interaction_SerializableComponent) == 0x0002B0, "Member 'ABP_GameActionTriggerZone_C::BP_Interaction_SerializableComponent' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, TriggerBox) == 0x0002B8, "Member 'ABP_GameActionTriggerZone_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_GameActionTriggerZone_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, DestroyCategory) == 0x0002C8, "Member 'ABP_GameActionTriggerZone_C::DestroyCategory' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, ResetCategory) == 0x0002C9, "Member 'ABP_GameActionTriggerZone_C::ResetCategory' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, IsBehaviorDone) == 0x0002CA, "Member 'ABP_GameActionTriggerZone_C::IsBehaviorDone' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, TriggerComponents) == 0x0002D0, "Member 'ABP_GameActionTriggerZone_C::TriggerComponents' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, GameActionOnOverlap) == 0x0002E0, "Member 'ABP_GameActionTriggerZone_C::GameActionOnOverlap' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, IsGameActionOnOverlapPlaying) == 0x0002F0, "Member 'ABP_GameActionTriggerZone_C::IsGameActionOnOverlapPlaying' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, GameActionOnInteract) == 0x0002F8, "Member 'ABP_GameActionTriggerZone_C::GameActionOnInteract' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, IsGameActionOnInteractPlaying) == 0x000308, "Member 'ABP_GameActionTriggerZone_C::IsGameActionOnInteractPlaying' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, InteractionPromptParams) == 0x000310, "Member 'ABP_GameActionTriggerZone_C::InteractionPromptParams' has a wrong offset!");
static_assert(offsetof(ABP_GameActionTriggerZone_C, AudioOnInteract) == 0x000328, "Member 'ABP_GameActionTriggerZone_C::AudioOnInteract' has a wrong offset!");

}

