#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_QTEManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "SandFall_structs.hpp"
#include "EQTEPhaseType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_QTEManager.BP_QTEManager_C
// 0x0850 (0x08F0 - 0x00A0)
class UBP_QTEManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          hasActiveQTE;                                      // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQTEPhaseType                                 qteResultPhase;                                    // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          hasDoneAction;                                     // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundWave*                             soundQTEStart;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USoundWave*                             soundQTEEnd;                                       // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FPostProcessSettings                   PostProcessQTE;                                    // 0x00C0(0x06F0)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        qteNotifyStateProgress;                            // 0x07B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        qteNotifyStateDuration;                            // 0x07B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<EQTEPhaseType, double>                   qteNotifyStatePhaseDurations;                      // 0x07C0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        EaseInDuration;                                    // 0x0810(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          doEaseIn;                                          // 0x0818(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          doEaseOut;                                         // 0x0819(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81A[0x6];                                      // 0x081A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        qteNotifyStateAnimStartTime;                       // 0x0820(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        qteNotifyStateAnimElapsedTime;                     // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        slowMoTimeDilation;                                // 0x0830(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          isQTEStateFinished;                                // 0x0838(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_839[0x7];                                      // 0x0839(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        qteStartRealTime;                                  // 0x0840(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        qteExpectedEndRealTime;                            // 0x0848(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        debug_lastTick;                                    // 0x0850(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        comboPreTime;                                      // 0x0858(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        comboStartTime;                                    // 0x0860(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        comboEndTime;                                      // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_SkillComboPrompt_C*                skillComboPromptWidget;                            // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, Deprecated, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_SkillComboPrompt_C*>        skillComboPromptWidgets;                           // 0x0878(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, ContainsInstancedReference)
	bool                                          FEATURE_UseNewQTEWidget;                           // 0x0888(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWBP_HUD_QTE_Base_C*>            skillComboQTEWidgets;                              // 0x0890(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class ULevelSequencePlayer*                   currentTimeSource;                                 // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkillComboFailed;                                // 0x08A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          show_QTE_As_UI;                                    // 0x08A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8AA[0x6];                                      // 0x08AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundEventDataTableRowHandle          SD_QTE_Success_Perfect;                            // 0x08B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SD_QTE_Success_Regular;                            // 0x08C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMulticastInlineDelegate<void(class UWBP_HUD_QTE_Base_C* QTEWidget)> OnQTEStarted;               // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_QTEContainer_C*                    QTEContainer;                                      // 0x08E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_QTEManager(int32 EntryPoint);
	void FlushActiveQTE(EQTEPhaseType* QTEPhaseType);
	void InitManager();
	void On_Timeline_Ended(int32 TrackIndex, bool Success);
	void OnAction(bool IsSuccess);
	void OnQTENotifyStateEnd();
	void OnQTENotifyStateStart(const TMap<EQTEPhaseType, double>& PhaseDurations, double TotalDuration, double CurrentAnimTime, double PlayRate);
	void OnQTENotifyStateTick(double CurrentAnimationTime);
	void OnSkillComboAction(bool IsSuccess, int32 TrackIndex, bool isPerfect);
	void OnUpdate(double CurrentTime);
	void PrintDebugText();
	void ReceiveTick(float DeltaSeconds);
	void StartSkillCombo(double NowTime, double PreDurationRealTime, double ValidityDurationRealTime, class ULevelSequencePlayer* sequenceTimeSource, int32 TrackIndex, bool showQTE);
	void StopSkillCombo(int32 TrackIndex, bool IsSuccess);

	void ComputeRealTimeDuration(double NotifyStateDuration, double AnimPlayRate, double EaseDuration, double TargetTimeDilation, double* RealTimeDuration) const;
	void GetCurrentQTEState(EQTEPhaseType* QTEPhaseType) const;
	void GetRealTimeProgress(double* RealTimeProgress, bool* IsFinished) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_QTEManager_C">();
	}
	static class UBP_QTEManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_QTEManager_C>();
	}
};
static_assert(alignof(UBP_QTEManager_C) == 0x000010, "Wrong alignment on UBP_QTEManager_C");
static_assert(sizeof(UBP_QTEManager_C) == 0x0008F0, "Wrong size on UBP_QTEManager_C");
static_assert(offsetof(UBP_QTEManager_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_QTEManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, hasActiveQTE) == 0x0000A8, "Member 'UBP_QTEManager_C::hasActiveQTE' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteResultPhase) == 0x0000A9, "Member 'UBP_QTEManager_C::qteResultPhase' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, hasDoneAction) == 0x0000AA, "Member 'UBP_QTEManager_C::hasDoneAction' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, soundQTEStart) == 0x0000B0, "Member 'UBP_QTEManager_C::soundQTEStart' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, soundQTEEnd) == 0x0000B8, "Member 'UBP_QTEManager_C::soundQTEEnd' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, PostProcessQTE) == 0x0000C0, "Member 'UBP_QTEManager_C::PostProcessQTE' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteNotifyStateProgress) == 0x0007B0, "Member 'UBP_QTEManager_C::qteNotifyStateProgress' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteNotifyStateDuration) == 0x0007B8, "Member 'UBP_QTEManager_C::qteNotifyStateDuration' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteNotifyStatePhaseDurations) == 0x0007C0, "Member 'UBP_QTEManager_C::qteNotifyStatePhaseDurations' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, EaseInDuration) == 0x000810, "Member 'UBP_QTEManager_C::EaseInDuration' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, doEaseIn) == 0x000818, "Member 'UBP_QTEManager_C::doEaseIn' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, doEaseOut) == 0x000819, "Member 'UBP_QTEManager_C::doEaseOut' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteNotifyStateAnimStartTime) == 0x000820, "Member 'UBP_QTEManager_C::qteNotifyStateAnimStartTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteNotifyStateAnimElapsedTime) == 0x000828, "Member 'UBP_QTEManager_C::qteNotifyStateAnimElapsedTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, slowMoTimeDilation) == 0x000830, "Member 'UBP_QTEManager_C::slowMoTimeDilation' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, isQTEStateFinished) == 0x000838, "Member 'UBP_QTEManager_C::isQTEStateFinished' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteStartRealTime) == 0x000840, "Member 'UBP_QTEManager_C::qteStartRealTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, qteExpectedEndRealTime) == 0x000848, "Member 'UBP_QTEManager_C::qteExpectedEndRealTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, debug_lastTick) == 0x000850, "Member 'UBP_QTEManager_C::debug_lastTick' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, comboPreTime) == 0x000858, "Member 'UBP_QTEManager_C::comboPreTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, comboStartTime) == 0x000860, "Member 'UBP_QTEManager_C::comboStartTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, comboEndTime) == 0x000868, "Member 'UBP_QTEManager_C::comboEndTime' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, skillComboPromptWidget) == 0x000870, "Member 'UBP_QTEManager_C::skillComboPromptWidget' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, skillComboPromptWidgets) == 0x000878, "Member 'UBP_QTEManager_C::skillComboPromptWidgets' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, FEATURE_UseNewQTEWidget) == 0x000888, "Member 'UBP_QTEManager_C::FEATURE_UseNewQTEWidget' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, skillComboQTEWidgets) == 0x000890, "Member 'UBP_QTEManager_C::skillComboQTEWidgets' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, currentTimeSource) == 0x0008A0, "Member 'UBP_QTEManager_C::currentTimeSource' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, IsSkillComboFailed) == 0x0008A8, "Member 'UBP_QTEManager_C::IsSkillComboFailed' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, show_QTE_As_UI) == 0x0008A9, "Member 'UBP_QTEManager_C::show_QTE_As_UI' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, SD_QTE_Success_Perfect) == 0x0008B0, "Member 'UBP_QTEManager_C::SD_QTE_Success_Perfect' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, SD_QTE_Success_Regular) == 0x0008C0, "Member 'UBP_QTEManager_C::SD_QTE_Success_Regular' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, OnQTEStarted) == 0x0008D0, "Member 'UBP_QTEManager_C::OnQTEStarted' has a wrong offset!");
static_assert(offsetof(UBP_QTEManager_C, QTEContainer) == 0x0008E0, "Member 'UBP_QTEManager_C::QTEContainer' has a wrong offset!");

}

