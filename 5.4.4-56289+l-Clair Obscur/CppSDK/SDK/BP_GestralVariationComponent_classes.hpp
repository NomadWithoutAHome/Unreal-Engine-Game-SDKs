#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GestralVariationComponent

#include "Basic.hpp"

#include "S_GestralRandomScaleVariation_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GestralVariationComponent.BP_GestralVariationComponent_C
// 0x00C0 (0x0160 - 0x00A0)
class UBP_GestralVariationComponent_C final : public UActorComponent
{
public:
	struct FS_GestralRandomScaleVariation         GestralRandomVariationStructure;                   // 0x00A0(0x0088)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UStaticMesh>>     GestralHairCutList;                                // 0x0128(0x0010)(Edit, BlueprintVisible)
	double                                        ScaleMin;                                          // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ScaleMax;                                          // 0x0140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UVMaskScale;                                       // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class UTexture2D>>      GestralMaslAlphaList;                              // 0x0150(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void GiveMeARandomGestral(double ScaleMin_0, double ScaleMax_0, struct FS_GestralRandomScaleVariation* ScaleVariationStruct);
	void GiveMeAWTFGestral(struct FS_GestralRandomScaleVariation* ScaleVariationStruct);
	void RandomizeHaircut();
	void RandomizeScales(double ScaleMin_0, double ScaleMax_0, struct FS_GestralRandomScaleVariation* Output_Get);
	void RefreshABP();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GestralVariationComponent_C">();
	}
	static class UBP_GestralVariationComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GestralVariationComponent_C>();
	}
};
static_assert(alignof(UBP_GestralVariationComponent_C) == 0x000008, "Wrong alignment on UBP_GestralVariationComponent_C");
static_assert(sizeof(UBP_GestralVariationComponent_C) == 0x000160, "Wrong size on UBP_GestralVariationComponent_C");
static_assert(offsetof(UBP_GestralVariationComponent_C, GestralRandomVariationStructure) == 0x0000A0, "Member 'UBP_GestralVariationComponent_C::GestralRandomVariationStructure' has a wrong offset!");
static_assert(offsetof(UBP_GestralVariationComponent_C, GestralHairCutList) == 0x000128, "Member 'UBP_GestralVariationComponent_C::GestralHairCutList' has a wrong offset!");
static_assert(offsetof(UBP_GestralVariationComponent_C, ScaleMin) == 0x000138, "Member 'UBP_GestralVariationComponent_C::ScaleMin' has a wrong offset!");
static_assert(offsetof(UBP_GestralVariationComponent_C, ScaleMax) == 0x000140, "Member 'UBP_GestralVariationComponent_C::ScaleMax' has a wrong offset!");
static_assert(offsetof(UBP_GestralVariationComponent_C, UVMaskScale) == 0x000148, "Member 'UBP_GestralVariationComponent_C::UVMaskScale' has a wrong offset!");
static_assert(offsetof(UBP_GestralVariationComponent_C, GestralMaslAlphaList) == 0x000150, "Member 'UBP_GestralVariationComponent_C::GestralMaslAlphaList' has a wrong offset!");

}

