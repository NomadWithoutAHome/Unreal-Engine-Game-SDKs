#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioCharacter_BattleManager

#include "Basic.hpp"

#include "EBattleHitBy_structs.hpp"
#include "FAudioCharacter_Battle_HitBy_BP_structs.hpp"
#include "ECharacterTeamSelector_structs.hpp"
#include "EUiBattleType_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FAudioCharacter_Battle_HitBy_AnimCommon_structs.hpp"
#include "FAudioCharacter_Battle_DeathCommon_structs.hpp"
#include "FAudioCharacter_Battle_UI_structs.hpp"
#include "FAudioBattleCommonSFX_structs.hpp"
#include "EBattleCommonSFX_structs.hpp"
#include "S_BattleHitSoundOverrideHandle_structs.hpp"
#include "EOnoType_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "EFootstepsType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AudioCharacter_BattleManager.BP_AudioCharacter_BattleManager_C
// 0x01B0 (0x0250 - 0x00A0)
class UBP_AudioCharacter_BattleManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          Debug;                                             // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Battle_Sound_Played;                               // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       BP_CharacterBattle;                                // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	EUiBattleType                                 EUiBattleType;                                     // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFAudioCharacter_Battle_UI             StructureBattleUiType;                             // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_CharacterBattleAudioProfile_C* DataAsset_Battle;                             // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EBattleCommonSFX                              CommonSFX;                                         // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleHitBy                                  EBattle_Hit_By_Call_By_BP;                         // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFAudioBattleCommonSFX                 StructureBattleCommonSFX;                          // 0x00E8(0x0058)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFAudioCharacter_Battle_HitBy_BP       StructureBattle_HitBy_CallByBP;                    // 0x0140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFAudioCharacter_Battle_HitBy_AnimCommon StructureBattle_HitByCommonAnim;                 // 0x0150(0x0040)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFAudioCharacter_Battle_DeathCommon    StructureBattle_DeathByCommonAnim;                 // 0x0190(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          hasShield_;                                        // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Container_SFX;                                     // 0x01B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Container_Weapon_L;                                // 0x01C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Container_Weapon_R;                                // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Container_Foley;                                   // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Container_Vocal;                                   // 0x01D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Container_Foot_L;                                  // 0x01E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Container_Foot_R;                                  // 0x01E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          PLACEHOLDER_FootFlipFlop;                          // 0x01F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        Container_HitBy;                                   // 0x01F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UAudioComponent*>                SpawnedAudioComponentsContainer;                   // 0x0200(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class USoundEffectSubmixPreset*>       Submix_Effect_Preset_Chain;                        // 0x0210(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FS_BattleHitSoundOverrideHandle> HitSoundOverrideStack;                            // 0x0220(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UAudioComponent*                        CurrentSkillBattleLine;                            // 0x0230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CurrentDialogueBattleLine;                         // 0x0238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_BattleLinesModel_Base_C*            BattleLinesModel;                                  // 0x0240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CurrentEventBattleLine;                            // 0x0248(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void PlayEventBattleLine(const struct FS_BattleLine& BattleLine);
	void OnDamageReceived(class UBP_BattleDamages_C* BattleDamage);
	void PlayDialogueBattleLineInternal(class USoundBase* SoundAsset);
	class UBP_BattleLinesModel_Base_C* GetBattleLineModel();
	void TryInterruptActiveSkillBattleLine(bool* HasInterrupted);
	void HasActiveSkillBattleLine(bool* Active);
	void PlaySkillBattleLineInternal(class USoundBase* SoundAsset);
	void StopAllSFXs();
	void ProcessTaggedGameplayEvent(const struct FTaggedGameplayEvent& Event);
	void RemoveHitOverride(struct FS_BattleHitSoundOverrideHandle& OutHitOverrideHandle);
	void PlayHitSoundFromDamageObject(class UBP_BattleDamages_C* BattleDamages);
	void PushHitOverride(class UBP_DataAsset_BattleHitSound_C* HitSoundAsset, struct FS_BattleHitSoundOverrideHandle& OutHitOverrideHandle);
	void ResolveHitSound(class UBP_BattleDamages_C* BattleDamage, class USoundBase** Sound);
	void ResolveHitSoundAsset(class UBP_BattleDamages_C* BattleDamage, class UBP_DataAsset_BattleHitSound_C** HitSoundAsset);
	void Internal_PlayOnoFromData(EOnoType OnoType);
	void Battle_PlaySeqOno(EOnoType OnoType);
	void CleanSpawnedAudioComponentList();
	void Internal_PlayAudioComponent(class USoundBase* Sound, class USceneComponent* OriginComponent, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleDeactivateControlBusMix(class USoundControlBusMix* Deactivate_ControlBusMix);
	void HandleActivateControlBusMix(class USoundControlBusMix* Activate_ControlBusMix);
	void HandleBattleDeathCommonBodyFall(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void Stop_AC_SFX_01();
	void BattleHitBy_CallByBP(EBattleHitBy BattleHitBy_CallByBP_0);
	void HandleBattleDeathCommon(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleHitByCommon(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleHitBy(class UMetaSoundSource* BattleHitBy, bool ShouldAttachToComponent_);
	void Battle_PlaySeqStep(class USoundBase* Battle_PlaySeqStep_0, bool IsRight, class USoundAttenuation* AttenuationOverride, bool SoundShouldFollow_);
	void Battle_PlaySeqVocal(class USoundBase* Battle_PlaySeqVocal_0, class USoundAttenuation* AttenuationOverride, bool SoundShouldFollow_);
	void BattleCommonSFX(EBattleCommonSFX Common_SFX);
	void HandleBattlePlaceholder(class USoundBase* Battle_Placeholder);
	void HandleBattleFoley(class UMetaSoundSource* Battle_Foley, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleFootstep(EFootstepsType FootstepType, const struct FVector& Location, const EPhysicalSurface& SurfaceType, bool ShouldAttachToComponent_);
	void HandleBattleVocal(class UMetaSoundSource* Battle_Vocal, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleWeaponRight(class UMetaSoundSource* Battle_Weapon_Right, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleWeaponLeft(class UMetaSoundSource* Battle_Weapon_Left, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleSFX(class UMetaSoundSource* Battle_SFX, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void HandleBattleUiCharacter(EUiBattleType Battle_UI_Type, bool ShouldAttachToComponent_);
	void HandleBattleOno(EOnoType OnoType);
	void Battle_PlaySeqFoley(class USoundBase* Battle_PlaySeqFoley_0, class USoundAttenuation* AttenuationOverride, bool SoundShouldFollow_);
	void Init();
	void Battle_PlayWeaponR(class USoundBase* Battle_Weapon_R, class USoundAttenuation* AttenuationOverride, bool SoundShouldFollow_);
	void Battle_Play_Weapon_L(class USoundBase* Battle_Weapon_L, class USoundAttenuation* AttenuationOverride, bool SoundShouldFollow_);
	void Battle_PlaySeqSFX(class USoundBase* Battle_PlaySeqSFX_0, class USoundAttenuation* AttenuationOverride, bool SoundShouldFollow_);
	void PlayBattleWeaponLeft(class UMetaSoundSource* BattleWeaponLeft, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleWeaponRight(class UMetaSoundSource* BattleWeaponRight, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleVocalEvent(class UMetaSoundSource* BattleVocal, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleSFXEvent(class UMetaSoundSource* BattleSFX, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleFootstepEvent(EFootstepsType FootstepType, const struct FVector& Location, EPhysicalSurface SurfaceType, bool ShouldAttachToComponent_);
	void PlayBattleFoley(class UMetaSoundSource* BattleFoley, class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleUi(EUiBattleType UI_Battle_Type, bool ShouldAttachToComponent_);
	void PlayBattleSoundProto(class USoundBase* BattlePlaceholder);
	void PlayHitByEvent(class UMetaSoundSource* BattleHitBy, bool ShouldAttachToComponent_);
	void PlayHitByCommonEvent(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void ReceiveBeginPlay();
	void PlayHitBy_CallByBP(EBattleHitBy Hit_By_CallByBP);
	void Deactivate_ControlBusMix(class USoundControlBusMix* Deactivate_ControlBusMix_0);
	void Battle_Stop_AC_SFX_01();
	void Activate_ControlBusMix(class USoundControlBusMix* Activate_ControlBusMix_0);
	void PlayDeathCommon(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleCommonSFX(EBattleCommonSFX Battle_Common_SFX, bool ShouldAttachToComponent_);
	void PlayDeathCommon_Bodyfall(class USoundAttenuation* AttenuationOverride, bool ShouldAttachToComponent_);
	void PlayBattleOno(EOnoType OnoType);
	void ExecuteUbergraph_BP_AudioCharacter_BattleManager(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AudioCharacter_BattleManager_C">();
	}
	static class UBP_AudioCharacter_BattleManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_AudioCharacter_BattleManager_C>();
	}
};
static_assert(alignof(UBP_AudioCharacter_BattleManager_C) == 0x000008, "Wrong alignment on UBP_AudioCharacter_BattleManager_C");
static_assert(sizeof(UBP_AudioCharacter_BattleManager_C) == 0x000250, "Wrong size on UBP_AudioCharacter_BattleManager_C");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_AudioCharacter_BattleManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Debug) == 0x0000A8, "Member 'UBP_AudioCharacter_BattleManager_C::Debug' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Battle_Sound_Played) == 0x0000B0, "Member 'UBP_AudioCharacter_BattleManager_C::Battle_Sound_Played' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, BP_CharacterBattle) == 0x0000B8, "Member 'UBP_AudioCharacter_BattleManager_C::BP_CharacterBattle' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, EUiBattleType) == 0x0000C0, "Member 'UBP_AudioCharacter_BattleManager_C::EUiBattleType' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, StructureBattleUiType) == 0x0000C8, "Member 'UBP_AudioCharacter_BattleManager_C::StructureBattleUiType' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, DataAsset_Battle) == 0x0000D8, "Member 'UBP_AudioCharacter_BattleManager_C::DataAsset_Battle' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, CommonSFX) == 0x0000E0, "Member 'UBP_AudioCharacter_BattleManager_C::CommonSFX' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, EBattle_Hit_By_Call_By_BP) == 0x0000E1, "Member 'UBP_AudioCharacter_BattleManager_C::EBattle_Hit_By_Call_By_BP' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, StructureBattleCommonSFX) == 0x0000E8, "Member 'UBP_AudioCharacter_BattleManager_C::StructureBattleCommonSFX' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, StructureBattle_HitBy_CallByBP) == 0x000140, "Member 'UBP_AudioCharacter_BattleManager_C::StructureBattle_HitBy_CallByBP' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, StructureBattle_HitByCommonAnim) == 0x000150, "Member 'UBP_AudioCharacter_BattleManager_C::StructureBattle_HitByCommonAnim' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, StructureBattle_DeathByCommonAnim) == 0x000190, "Member 'UBP_AudioCharacter_BattleManager_C::StructureBattle_DeathByCommonAnim' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, hasShield_) == 0x0001B0, "Member 'UBP_AudioCharacter_BattleManager_C::hasShield_' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_SFX) == 0x0001B8, "Member 'UBP_AudioCharacter_BattleManager_C::Container_SFX' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_Weapon_L) == 0x0001C0, "Member 'UBP_AudioCharacter_BattleManager_C::Container_Weapon_L' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_Weapon_R) == 0x0001C8, "Member 'UBP_AudioCharacter_BattleManager_C::Container_Weapon_R' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_Foley) == 0x0001D0, "Member 'UBP_AudioCharacter_BattleManager_C::Container_Foley' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_Vocal) == 0x0001D8, "Member 'UBP_AudioCharacter_BattleManager_C::Container_Vocal' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_Foot_L) == 0x0001E0, "Member 'UBP_AudioCharacter_BattleManager_C::Container_Foot_L' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_Foot_R) == 0x0001E8, "Member 'UBP_AudioCharacter_BattleManager_C::Container_Foot_R' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, PLACEHOLDER_FootFlipFlop) == 0x0001F0, "Member 'UBP_AudioCharacter_BattleManager_C::PLACEHOLDER_FootFlipFlop' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Container_HitBy) == 0x0001F8, "Member 'UBP_AudioCharacter_BattleManager_C::Container_HitBy' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, SpawnedAudioComponentsContainer) == 0x000200, "Member 'UBP_AudioCharacter_BattleManager_C::SpawnedAudioComponentsContainer' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, Submix_Effect_Preset_Chain) == 0x000210, "Member 'UBP_AudioCharacter_BattleManager_C::Submix_Effect_Preset_Chain' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, HitSoundOverrideStack) == 0x000220, "Member 'UBP_AudioCharacter_BattleManager_C::HitSoundOverrideStack' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, CurrentSkillBattleLine) == 0x000230, "Member 'UBP_AudioCharacter_BattleManager_C::CurrentSkillBattleLine' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, CurrentDialogueBattleLine) == 0x000238, "Member 'UBP_AudioCharacter_BattleManager_C::CurrentDialogueBattleLine' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, BattleLinesModel) == 0x000240, "Member 'UBP_AudioCharacter_BattleManager_C::BattleLinesModel' has a wrong offset!");
static_assert(offsetof(UBP_AudioCharacter_BattleManager_C, CurrentEventBattleLine) == 0x000248, "Member 'UBP_AudioCharacter_BattleManager_C::CurrentEventBattleLine' has a wrong offset!");

}

