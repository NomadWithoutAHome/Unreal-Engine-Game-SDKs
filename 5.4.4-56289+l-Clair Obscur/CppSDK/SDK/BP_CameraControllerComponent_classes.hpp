#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraControllerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_CharacterList_structs.hpp"
#include "S_CameraRecenterRequest_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraControllerComponent.BP_CameraControllerComponent_C
// 0x0078 (0x0118 - 0x00A0)
class UBP_CameraControllerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UBP_CameraConfigBlender_C*>      CameraConfigBlenders;                              // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ApplyCameraConfigs;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCameraRecentering;                               // 0x00B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BA[0x6];                                       // 0x00BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_CameraRecenterRequest               CameraRecenterRequest;                             // 0x00C0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CachedControllerRotation;                          // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        AccumulatedDeltaTime;                              // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDynamicCameraFocus;                          // 0x00E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaximumDynamicFocusDistance;                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableCameraShakeWhenMoving;                       // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_CharacterList>                       CharactersToIgnoreCameraShake;                     // 0x0100(0x0010)(Edit, BlueprintVisible)
	class UCameraShakeBase*                       CameraShakeInPlay;                                 // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddCameraConfigOnFreeAimCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void AddCameraConfigOnMainCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void AddNewCameraConfigOnComponents(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, const class UBP_DataAsset_CameraConfig_C*& CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void CancelCameraRecenter();
	bool CanPerformCameraRecenter();
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	double ComputeCameraShakeScale();
	double ComputeDistanceBetweenCameraAndCharacterMesh();
	void DebugDrawCameraControllerComponent();
	void ExecuteUbergraph_BP_CameraControllerComponent(int32 EntryPoint);
	void FindOrCreateCameraConfigBlender(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, class UBP_CameraConfigBlender_C** CameraConfigBlender);
	void GetCameraConfig(int32 Index_0, struct FS_CameraConfig* CameraConfig);
	void GetOwnerAsCharacterWorld(class ABP_jRPG_Character_World_C** CharacterWorld);
	bool IsPerformingCameraRecenter();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RemoveCameraConfigOnComponents(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, const class UBP_DataAsset_CameraConfig_C*& CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void RemoveCameraConfigOnFreeAimCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void RemoveCameraConfigOnMainCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void RequestCameraRecenter(struct FS_CameraRecenterRequest& CameraRecenterRequest_0);
	void SetFocusDistance(float FocusDistance);
	void SetFocusDistanceWithComponent(class USceneComponent* ComponentToFocus);
	void SetGameplayPaused(bool Paused);
	void SetupCameraConfigOnComponents(class UCameraComponent* CameraComponent, class USpringArmComponent* SpringArmComponent, const class UBP_DataAsset_CameraConfig_C*& CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void SetupCameraConfigOnFreeAimCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void SetupCameraConfigOnMainCamera(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	void SetupCameraConfigs(class UBP_DataAsset_CameraConfig_C* CameraConfig, class UBP_DataAsset_CameraConfig_C* FreeAimCameraConfig, const struct FViewTargetTransitionParams& TransitionParameters);
	bool ShouldEnableCameraShake();
	void StopAllCameraShakes();
	void UpdateCameraConfigBlenders(float DeltaSeconds);
	void UpdateCameraRecenter(double DeltaSeconds);
	void UpdateCameraShake(double DeltaSeconds);
	void UpdateDynamicCameraFocusDistance(double DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraControllerComponent_C">();
	}
	static class UBP_CameraControllerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CameraControllerComponent_C>();
	}
};
static_assert(alignof(UBP_CameraControllerComponent_C) == 0x000008, "Wrong alignment on UBP_CameraControllerComponent_C");
static_assert(sizeof(UBP_CameraControllerComponent_C) == 0x000118, "Wrong size on UBP_CameraControllerComponent_C");
static_assert(offsetof(UBP_CameraControllerComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CameraControllerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, CameraConfigBlenders) == 0x0000A8, "Member 'UBP_CameraControllerComponent_C::CameraConfigBlenders' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, ApplyCameraConfigs) == 0x0000B8, "Member 'UBP_CameraControllerComponent_C::ApplyCameraConfigs' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, IsCameraRecentering) == 0x0000B9, "Member 'UBP_CameraControllerComponent_C::IsCameraRecentering' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, CameraRecenterRequest) == 0x0000C0, "Member 'UBP_CameraControllerComponent_C::CameraRecenterRequest' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, CachedControllerRotation) == 0x0000C8, "Member 'UBP_CameraControllerComponent_C::CachedControllerRotation' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, AccumulatedDeltaTime) == 0x0000E0, "Member 'UBP_CameraControllerComponent_C::AccumulatedDeltaTime' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, EnableDynamicCameraFocus) == 0x0000E8, "Member 'UBP_CameraControllerComponent_C::EnableDynamicCameraFocus' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, MaximumDynamicFocusDistance) == 0x0000F0, "Member 'UBP_CameraControllerComponent_C::MaximumDynamicFocusDistance' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, EnableCameraShakeWhenMoving) == 0x0000F8, "Member 'UBP_CameraControllerComponent_C::EnableCameraShakeWhenMoving' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, CharactersToIgnoreCameraShake) == 0x000100, "Member 'UBP_CameraControllerComponent_C::CharactersToIgnoreCameraShake' has a wrong offset!");
static_assert(offsetof(UBP_CameraControllerComponent_C, CameraShakeInPlay) == 0x000110, "Member 'UBP_CameraControllerComponent_C::CameraShakeInPlay' has a wrong offset!");

}

