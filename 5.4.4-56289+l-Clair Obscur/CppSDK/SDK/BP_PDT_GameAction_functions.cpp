#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PDT_GameAction

#include "Basic.hpp"

#include "BP_PDT_GameAction_classes.hpp"
#include "BP_PDT_GameAction_parameters.hpp"


namespace SDK
{

// Function BP_PDT_GameAction.BP_PDT_GameAction_C.AppendPropertyPath
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString&                          CurrentPath                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// const class FString&                    PropertyName                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_PDT_GameAction_C::AppendPropertyPath(class FString& CurrentPath, const class FString& PropertyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PDT_GameAction_C", "AppendPropertyPath");

	Params::BP_PDT_GameAction_C_AppendPropertyPath Parms{};

	Parms.CurrentPath = std::move(CurrentPath);
	Parms.PropertyName = std::move(PropertyName);

	UObject::ProcessEvent(Func, &Parms);

	CurrentPath = std::move(Parms.CurrentPath);

	return Parms.ReturnValue;
}


// Function BP_PDT_GameAction.BP_PDT_GameAction_C.GetInstanceClass
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UGameActionInstance>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

TSubclassOf<class UGameActionInstance> UBP_PDT_GameAction_C::GetInstanceClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PDT_GameAction_C", "GetInstanceClass");

	Params::BP_PDT_GameAction_C_GetInstanceClass Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PDT_GameAction.BP_PDT_GameAction_C.IsGameActionWrapperValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameAction_Wrapper&       GameAction_Wrapper                                     (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_PDT_GameAction_C::IsGameActionWrapperValid(const struct FGameAction_Wrapper& GameAction_Wrapper)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PDT_GameAction_C", "IsGameActionWrapperValid");

	Params::BP_PDT_GameAction_C_IsGameActionWrapperValid Parms{};

	Parms.GameAction_Wrapper = std::move(GameAction_Wrapper);

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_PDT_GameAction.BP_PDT_GameAction_C.ReportValidationError
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMesssages                                         (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const class FString&                    PropertyPath                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// const class FString&                    Message                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void UBP_PDT_GameAction_C::ReportValidationError(TArray<class FText>& ErrorMesssages, const class FString& PropertyPath, const class FString& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PDT_GameAction_C", "ReportValidationError");

	Params::BP_PDT_GameAction_C_ReportValidationError Parms{};

	Parms.ErrorMesssages = std::move(ErrorMesssages);
	Parms.PropertyPath = std::move(PropertyPath);
	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMesssages = std::move(Parms.ErrorMesssages);
}


// Function BP_PDT_GameAction.BP_PDT_GameAction_C.ValidateGameAction
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString&                          PropertyPath                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// bool&                                   ExploreAssetChildren                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PDT_GameAction_C::ValidateGameAction(TArray<class FText>& ErrorMessages, class FString& PropertyPath, bool& ExploreAssetChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PDT_GameAction_C", "ValidateGameAction");

	Params::BP_PDT_GameAction_C_ValidateGameAction Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.PropertyPath = std::move(PropertyPath);
	Parms.ExploreAssetChildren = ExploreAssetChildren;

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);
	PropertyPath = std::move(Parms.PropertyPath);
	ExploreAssetChildren = Parms.ExploreAssetChildren;
}


// Function BP_PDT_GameAction.BP_PDT_GameAction_C.ValidateGameActionWrapper
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const struct FGameAction_Wrapper&       GameActionWrapper                                      (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class FString&                          PropertyPath                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// bool&                                   ExploreAssetChildren                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_PDT_GameAction_C::ValidateGameActionWrapper(TArray<class FText>& ErrorMessages, const struct FGameAction_Wrapper& GameActionWrapper, class FString& PropertyPath, bool& ExploreAssetChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_PDT_GameAction_C", "ValidateGameActionWrapper");

	Params::BP_PDT_GameAction_C_ValidateGameActionWrapper Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.GameActionWrapper = std::move(GameActionWrapper);
	Parms.PropertyPath = std::move(PropertyPath);
	Parms.ExploreAssetChildren = ExploreAssetChildren;

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);
	PropertyPath = std::move(Parms.PropertyPath);
	ExploreAssetChildren = Parms.ExploreAssetChildren;
}

}

