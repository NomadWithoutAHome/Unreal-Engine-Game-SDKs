#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LoadingSystemComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_LoadingSystemComponent.BP_LoadingSystemComponent_C
// 0x0110 (0x01B0 - 0x00A0)
class UBP_LoadingSystemComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UClass*>                         LoadedClasses;                                     // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UObject*>                        LoadedAssets;                                      // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftClassPtr<class UClass>>           LoadingClasses;                                    // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class UObject>>         LoadingAssets;                                     // 0x00D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnFullyLoaded;                                     // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<class UDataLayerAsset*, class USF_ReferenceCounterWrapper*> RequestedDataLayers;            // 0x00F8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataLayerInstance*>             LoadedDataLayers;                                  // 0x0148(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataLayerInstance*>             ActivatedDataLayers;                               // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UDataLayerInstance*>             DataLayersRequestedForActivation;                  // 0x0168(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FName>                           DataLayerLabelsRequestedForActivation;             // 0x0178(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnDataLayersActivated;                             // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<TSoftObjectPtr<class AActor>>          ActorRefsToResolve;                                // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsLoadingActorSoftRefs;                            // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddRequiredActorSoftRefs(TArray<TSoftObjectPtr<class AActor>>& ActorRefs);
	void BuildDependencyTree(TScriptInterface<class IBPI_LoadingDependenciesSource_C> Object, TArray<TSoftClassPtr<class UClass>>* Classes, TArray<TSoftObjectPtr<class UObject>>* Assets);
	void ExecuteUbergraph_BP_LoadingSystemComponent(int32 EntryPoint);
	class FString GetDebugText();
	bool HasOutstandingActorSoftRefs();
	bool HasOutstandingDataLayerActivation();
	bool HasOutstandingLoading();
	void InitializeCurrentDataLayerState(const class UDataLayerAsset* DataLayer);
	bool IsClassLoaded(TSoftClassPtr<class UClass> Class_0);
	void IsDataLayerLoaded(const class UDataLayerAsset* DataLayer, bool* Result);
	void IsDataLayerRequested(const class UDataLayerInstance* DataLayer, bool* Result);
	void LoadDependenciesFromObject(class UObject* Object);
	void OnDataLayerStateChanged(const class UDataLayerInstance* DataLayer, EDataLayerRuntimeState State);
	void OnLoaded_0E2FB5894CE508D91ED5A4B406268CAA(TSubclassOf<class UObject> Loaded);
	void OnLoaded_99E02A9049DFB624676D73BFA670B572(class UObject* Loaded);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReleaseAll();
	void RemoveRequiredActorSoftRefs(TArray<TSoftObjectPtr<class AActor>>& ActorRefs);
	void RequestDataLayerActivation(TArray<class UDataLayerAsset*>& DataLayers);
	void RequestDataLayerDeactivation(TArray<class UDataLayerAsset*>& DataLayers);
	void RequestLoadDataLayers(TArray<class UDataLayerAsset*>& DataLayers, struct FSF_ReferenceCounterHandle& RequestReferenceHandle, const class FString& DebugName);
	void RequestUnloadDataLayers(TArray<class UDataLayerAsset*>& DataLayers, struct FSF_ReferenceCounterHandle& RequestReferenceHandle, const class FString& DebugName);
	void StartLoadingAssets(TArray<TSoftObjectPtr<class UObject>>& Classes);
	void StartLoadingAssetsInternal(const TArray<TSoftObjectPtr<class UObject>>& Assets);
	void StartLoadingClasses(TArray<TSoftClassPtr<class UClass>>& Classes);
	void StartLoadingClassesInternal(const TArray<TSoftClassPtr<class UClass>>& Classes);
	void UpdateLoadingState();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_LoadingSystemComponent_C">();
	}
	static class UBP_LoadingSystemComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_LoadingSystemComponent_C>();
	}
};
static_assert(alignof(UBP_LoadingSystemComponent_C) == 0x000008, "Wrong alignment on UBP_LoadingSystemComponent_C");
static_assert(sizeof(UBP_LoadingSystemComponent_C) == 0x0001B0, "Wrong size on UBP_LoadingSystemComponent_C");
static_assert(offsetof(UBP_LoadingSystemComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_LoadingSystemComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, LoadedClasses) == 0x0000A8, "Member 'UBP_LoadingSystemComponent_C::LoadedClasses' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, LoadedAssets) == 0x0000B8, "Member 'UBP_LoadingSystemComponent_C::LoadedAssets' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, LoadingClasses) == 0x0000C8, "Member 'UBP_LoadingSystemComponent_C::LoadingClasses' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, LoadingAssets) == 0x0000D8, "Member 'UBP_LoadingSystemComponent_C::LoadingAssets' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, OnFullyLoaded) == 0x0000E8, "Member 'UBP_LoadingSystemComponent_C::OnFullyLoaded' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, RequestedDataLayers) == 0x0000F8, "Member 'UBP_LoadingSystemComponent_C::RequestedDataLayers' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, LoadedDataLayers) == 0x000148, "Member 'UBP_LoadingSystemComponent_C::LoadedDataLayers' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, ActivatedDataLayers) == 0x000158, "Member 'UBP_LoadingSystemComponent_C::ActivatedDataLayers' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, DataLayersRequestedForActivation) == 0x000168, "Member 'UBP_LoadingSystemComponent_C::DataLayersRequestedForActivation' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, DataLayerLabelsRequestedForActivation) == 0x000178, "Member 'UBP_LoadingSystemComponent_C::DataLayerLabelsRequestedForActivation' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, OnDataLayersActivated) == 0x000188, "Member 'UBP_LoadingSystemComponent_C::OnDataLayersActivated' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, ActorRefsToResolve) == 0x000198, "Member 'UBP_LoadingSystemComponent_C::ActorRefsToResolve' has a wrong offset!");
static_assert(offsetof(UBP_LoadingSystemComponent_C, IsLoadingActorSoftRefs) == 0x0001A8, "Member 'UBP_LoadingSystemComponent_C::IsLoadingActorSoftRefs' has a wrong offset!");

}

