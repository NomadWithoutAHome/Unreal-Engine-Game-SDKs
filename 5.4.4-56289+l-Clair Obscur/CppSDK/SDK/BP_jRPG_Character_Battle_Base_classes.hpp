#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Character_Battle_Base

#include "Basic.hpp"

#include "EBattleTurnState_structs.hpp"
#include "EFreeAimType_structs.hpp"
#include "E_StatusEffects_structs.hpp"
#include "ECharacterTeamSelector_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_jRPG_FormationType_structs.hpp"
#include "E_jRPG_CharacterAttachmentSlot_structs.hpp"
#include "EElementalAffinity_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "E_jRPG_CombatStyle_structs.hpp"
#include "FEnemyDataRow_structs.hpp"
#include "EBattleActionEvent_structs.hpp"
#include "E_FreezeFrame_structs.hpp"
#include "FBattleTurnSequence_CharacterData_structs.hpp"
#include "EAttackType_structs.hpp"
#include "FElementalAffinityList_structs.hpp"
#include "FCharacterBattleAudioProfile_structs.hpp"
#include "E_EnemyIdleState_structs.hpp"
#include "E_HitReact_Anim_Type_structs.hpp"
#include "EPermeateIntensity_structs.hpp"
#include "FRoutedEventHandle_structs.hpp"
#include "ECounterType_structs.hpp"
#include "E_JRPG_VFXSpawnSpots_structs.hpp"
#include "SlateCore_structs.hpp"
#include "E_GameDifficulty_structs.hpp"
#include "EHealReason_structs.hpp"
#include "E_QuestStatus_structs.hpp"
#include "EBuffApplicationProbability_structs.hpp"
#include "EBattleForbiddenActionReason_structs.hpp"
#include "EAPChangeReason_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "E_jRPG_ActionType_structs.hpp"
#include "EDamageReason_structs.hpp"
#include "EFreeAimBodyPartType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C
// 0x0EF0 (0x1560 - 0x0670)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_jRPG_Character_Battle_Base_C : public ACharacter
{
public:
	uint8                                         Pad_668[0x8];                                      // 0x0668(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0670(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULODSyncComponent*                      LODSyncCharacters;                                 // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSyncEnemies;                                    // 0x0680(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterVisualAlterationsComponent_C* BPC_CharacterVisualAlterations;                 // 0x0688(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor_PreviewWeapon;                          // 0x0690(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TargetingCameraFocusPoint;                         // 0x0698(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvironmentInteractorComponent_C*   BP_EnvironmentInteractorComponent_foot_right;      // 0x06A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EnvironmentInteractorComponent_C*   BP_EnvironmentInteractorComponent_foot_left;       // 0x06A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_3D_UI_BackgroundGold;                      // 0x06B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara_3D_UI_Background;                          // 0x06B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterSkinComponent_C*           BP_CharacterSkinComponent;                         // 0x06C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EventRoutingSystemComponent_C*      BP_EventRoutingSystemComponent_AISkills;           // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LookAtLocation_FreeAim;                            // 0x06D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LookAtLocation;                                    // 0x06D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DebugArrow_FreeAim_L;                              // 0x06E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FreeAimRotationComponent_L;                        // 0x06E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FreeAimSpawnLocation_L;                            // 0x06F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttackedLocation;                                  // 0x06F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Idle;                                           // 0x0700(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Placeholder_02;                                 // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Placeholder_01;                                 // 0x0710(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Foley_02;                                       // 0x0718(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Foley_01;                                       // 0x0720(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Footstep_L;                                     // 0x0728(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Footstep_R;                                     // 0x0730(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_L_02;                                    // 0x0738(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_R_02;                                    // 0x0740(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Vocal_02;                                       // 0x0748(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_HitBy_02;                                       // 0x0750(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_SFX_02;                                         // 0x0758(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_HitBy_01;                                       // 0x0760(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_SFX_01;                                         // 0x0768(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Vocal_01;                                       // 0x0770(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_L_01;                                    // 0x0778(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_R_01;                                    // 0x0780(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AudioCharacter_BattleManager_C*     BP_AudioCharacter_BattleManager;                   // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        FrontLocation;                                     // 0x0790(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DamagePosition;                                    // 0x0798(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_FootR;                                  // 0x07A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_FootL;                                  // 0x07A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Spine03;                                // 0x07B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Spine01;                                // 0x07B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Root;                                   // 0x07C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Head;                                   // 0x07C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Hand_R;                                 // 0x07D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_Hand_L;                                 // 0x07D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachment_AboveBody;                              // 0x07E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FrontVFXSpawn;                                     // 0x07E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FreeAimRotationComponent_R;                        // 0x07F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DebugArrow_FreeAim_R;                              // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FreeAimSpawnLocation_R;                            // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HealthBar_CloseLocation;                           // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       HealthBar;                                         // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Head_R;                                            // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Head_L;                                            // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        thigh_r;                                           // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        thigh_l;                                           // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        lowerarm_r;                                        // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        lowerarm_l;                                        // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        upperarm_r;                                        // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        upperarm_l;                                        // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Side_R;                                            // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Side_L;                                            // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DebugText_CharacterInfos;                          // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CameraTargetingTarget;                             // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor_TargetingCamera;                        // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   TargetingCamera;                                   // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow1;                                            // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FreeAimShooterBattleComponent_C*    BP_FreeAimShooterBattleComponent;                  // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      TargetingCapsule;                                  // 0x0898(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   DebugText_PreviousPosition;                        // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera_Shoulder;                                   // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_Shoulder;                                // 0x08B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Head;                                       // 0x08B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Hand_R;                                     // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Hand_L;                                     // 0x08C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Attachments;                                       // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       TargetWidget;                                      // 0x08D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_CombatMovement_C*              AC_jRPG_CombatMovement;                            // 0x08E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    TargetPointer;                                     // 0x08E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_CharacterBattleStats_C*        AC_jRPG_CharacterStats;                            // 0x08F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x08F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0900(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         LateralOffsetUIFX_0to1_5196A039410C8DC3D94C10B3DAF53447; // 0x0908(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            LateralOffsetUIFX__Direction_5196A039410C8DC3D94C10B3DAF53447; // 0x090C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_90D[0x3];                                      // 0x090D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     LateralOffsetUIFX;                                 // 0x0910(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         ChangeSizeTimeline_0to1_FEFB868E4BAD591F95B10BA3ADE10F40; // 0x0918(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            ChangeSizeTimeline__Direction_FEFB868E4BAD591F95B10BA3ADE10F40; // 0x091C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91D[0x3];                                      // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     ChangeSizeTimeline;                                // 0x0920(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_FreeaimRecoil_RecoilTimeline_1AFEEEE64C939F0FE67404B5B1F4ABE1; // 0x0928(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_FreeaimRecoil__Direction_1AFEEEE64C939F0FE67404B5B1F4ABE1; // 0x092C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_92D[0x3];                                      // 0x092D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_FreeaimRecoil;                            // 0x0930(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         GradientCounterRadius_0to1_AB8F890F4FB1CBA3A26D6084F926BCCC; // 0x0938(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            GradientCounterRadius__Direction_AB8F890F4FB1CBA3A26D6084F926BCCC; // 0x093C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93D[0x3];                                      // 0x093D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     GradientCounterRadius;                             // 0x0940(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Targeting_NewTrack_0_EB09F8A344E5CF553AEF4B84CD1DA71B; // 0x0948(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_Targeting__Direction_EB09F8A344E5CF553AEF4B84CD1DA71B; // 0x094C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_Targeting;                                // 0x0950(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_GradientAttackPostProcess_0to1_1CFBE67A4635212B1C24BF9F8B70EEF3; // 0x0958(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_GradientAttackPostProcess__Direction_1CFBE67A4635212B1C24BF9F8B70EEF3; // 0x095C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_95D[0x3];                                      // 0x095D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_GradientAttackPostProcess;                // 0x0960(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         AppearDisappearTimeline_0To1_64AB1CEA4A58B3518DA3F59F51F1CBD1; // 0x0968(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            AppearDisappearTimeline__Direction_64AB1CEA4A58B3518DA3F59F51F1CBD1; // 0x096C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_96D[0x3];                                      // 0x096D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     AppearDisappearTimeline;                           // 0x0970(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ControlledByBattleAI_;                             // 0x0978(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_979[0x7];                                      // 0x0979(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_BattleManager_C*               BattleManagerReference;                            // 0x0980(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Enemy_;                                            // 0x0988(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_989[0x7];                                      // 0x0989(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_TargetingManager_C*            TargetingManagerReference;                         // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	E_jRPG_FormationType                          FormationType;                                     // 0x0998(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Dead_;                                             // 0x0999(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_jRPG_CombatStyle                            CombatStyle_DEPRECATED;                            // 0x099A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99B[0x5];                                      // 0x099B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   GameInstanceReference;                             // 0x09A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundToPlayWhenTargetHovered;                      // 0x09A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             SoundToPlayWhenTargetDecided;                      // 0x09B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalLocation;                                  // 0x09B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               OriginalRotation;                                  // 0x09D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor)
	class ABP_jRPG_Character_Battle_Base_C*       TargetedCharacter;                                 // 0x09E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraName;                                        // 0x09F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UAnimMontage*>                   AnimDodge;                                         // 0x09F8(0x0010)(Edit, BlueprintVisible)
	class UAnimMontage*                           AnimJump;                                          // 0x0A08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AnimJumpCounter;                                   // 0x0A10(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AnimParry;                                         // 0x0A18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TMap<E_jRPG_CharacterAttachmentSlot, class FName> SocketNames;                                   // 0x0A20(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_jRPG_CharacterAttachmentSlot, class USceneComponent*> AttachmentComponents;               // 0x0A70(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UParticleSystemComponent*               SpawnedParticleSystem;                             // 0x0AC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SingleTargetLocation;                              // 0x0AC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           BattleActionQueue;                                 // 0x0AE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	class UAnimMontage*                           AnimGradientParry;                                 // 0x0AF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DefensiveMoveLockEndTime;                          // 0x0AF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           DefensiveMoveLockTimer;                            // 0x0B00(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DefensiveMoveImmunityEndTime;                      // 0x0B08(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsParrying;                                        // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDodging;                                         // 0x0B11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsJumping;                                         // 0x0B12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsStunLocked;                                      // 0x0B13(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B14[0x4];                                      // 0x0B14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DodgeLockDuration;                                 // 0x0B18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DodgeSuccessLockDuration;                          // 0x0B20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DodgeImmuneDuration;                               // 0x0B28(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParryLockDuration;                                 // 0x0B30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ParryImmuneDuration;                               // 0x0B38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CurrentSkillNextComboAction;                       // 0x0B40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLastSkillComboSuccessful;                        // 0x0B48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EQTEKeyframeType                              QTE_Keyframes;                                     // 0x0B49(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceKeyframeType                   BattleKeyframes;                                   // 0x0B4A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceKeyframeType                   BattleKeyframes_Track2;                            // 0x0B4B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceKeyframeType                   BattleKeyframes_Track3;                            // 0x0B4C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceCameraType                     BattleCameraKeyframes;                             // 0x0B4D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceKeyframeType                   BattleKeyframes_Diegetic;                          // 0x0B4E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4F[0x1];                                      // 0x0B4F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EBattleTurnState>                      BattleStateStack;                                  // 0x0B50(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EBattleTurnState, class UAnimSequenceBase*> CurrentBattlePostureAnimations;                 // 0x0B60(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          UseFullComboSequence;                              // 0x0BB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BB1[0x7];                                      // 0x0BB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EpicBattleSequenceActor_C*          CurrentComboSequence;                              // 0x0BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        NextBattleSequenceActionTime;                      // 0x0BC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DEBUG_CurrentComboAutoSuccess;                     // 0x0BC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleActionEvent                            LastBattleSequenceAction;                          // 0x0BCC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BCD[0x3];                                      // 0x0BCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ComboSuccessHistory;                               // 0x0BD0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<bool>                                  ComboPerfectHistory;                               // 0x0BE0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsComboWaitingForActionEffect;                     // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasAimingSkill;                                    // 0x0BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CHECK_wasBaseBeginPlayCalled;                      // 0x0BF2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BF3[0x5];                                      // 0x0BF3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Anim_DefaultSlotAlpha;                             // 0x0BF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FFBattleTurnSequence_CharacterData     BattleSequenceData;                                // 0x0C00(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFBattleTurnSequence_CharacterData     BattleSequenceData_Static;                         // 0x0C20(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattleStateDirty;                                // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C41[0x7];                                      // 0x0C41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UBP_BattleSequenceTimeline_C*> BattleSequenceTimelines;                        // 0x0C48(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentActionEffectNumber;                         // 0x0C98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPerformingCounterAttack;                         // 0x0C9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCurrentCounterAttackGradient;                    // 0x0C9D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9E[0x2];                                      // 0x0C9E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       CurrentCounterAttackTarget;                        // 0x0CA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       CurrentCounterAttackSource;                        // 0x0CA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, Deprecated, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeCountered;                                    // 0x0CB0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBeingCountered;                                  // 0x0CB1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CounterAttackRequiresPerfect;                      // 0x0CB2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldPlayHitAnimationOnNextDamage_;               // 0x0CB3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CHECK_ParentCall;                                  // 0x0CB4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CHECK_PublicCall;                                  // 0x0CB5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CB6[0x2];                                      // 0x0CB6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CHECK_CallContext;                                 // 0x0CB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, HasGetValueTypeHash)
	struct FRotator                               OriginalSpringArmRelativeRotation;                 // 0x0CC8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               OriginalActorWorldRotation;                        // 0x0CE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          DEBUG_IgnoreDamages;                               // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF9[0x7];                                      // 0x0CF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_HUD_AimTarget_C*                   Crosshair;                                         // 0x0D00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          RandomIntroPlayRate_;                              // 0x0D08(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D09[0x7];                                      // 0x0D09(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFreeAimCancelInput;                              // 0x0D10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         BattleSpotIndex;                                   // 0x0D20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D24[0x4];                                      // 0x0D24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundEventDataTableRowHandle          SoundEvent_FreeAimStart;                           // 0x0D28(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SoundEvent_FreeAimCancel;                          // 0x0D38(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FVector                                OriginalWidgetRelativeLocation;                    // 0x0D48(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        StunLockDuration;                                  // 0x0D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthBarScale_Close;                              // 0x0D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HealthBarScale_Far;                                // 0x0D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnResetBattleActionValidation;                     // 0x0D78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSelfTurnStart;                                   // 0x0D88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnSelfTurnEnd;                                     // 0x0D98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(bool IsActive)> OnDefenseStateChange;                              // 0x0DA8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnParryStart;                                      // 0x0DB8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnGradientParryStart;                              // 0x0DC8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDefensiveMoveEnd;                                // 0x0DD8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDodgeStart;                                      // 0x0DE8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDefenseLockEnd;                                  // 0x0DF8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnDefenseLockStart;                                // 0x0E08(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          DEBUG_CVar_ShowBattleDebug;                        // 0x0E18(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_CVar_ShowFreeAimBodyParts;                   // 0x0E19(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1A[0x6];                                      // 0x0E1A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EAttackType, EElementalAffinity>         ElementalAffinitiesCurrent;                        // 0x0E20(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<EAttackType, struct FFElementalAffinityList> ElementalAffinitiesOverrides;                  // 0x0E70(0x0050)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TMap<EAttackType, EElementalAffinity>         ElementalAffinitiesBase;                           // 0x0EC0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<EAttackType, EElementalAffinity>         ElementalAffinitiesInitial;                        // 0x0F10(0x0050)(Edit, BlueprintVisible)
	int32                                         BaseAttackNumber;                                  // 0x0F60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DodgeAnimIndex;                                    // 0x0F64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FreeAimLookSpeed;                                  // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeTargeted;                                     // 0x0F70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceKeyframeType                   BattleKeyframes_Diegetic2;                         // 0x0F71(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	EBattleSequenceKeyframeType                   BattleKeyframes_Diegetic3;                         // 0x0F72(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F73[0x5];                                      // 0x0F73(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFCharacterBattleAudioProfile          CharacterAudioProfile;                             // 0x0F78(0x00D0)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	E_EnemyIdleState                              CurrentIdleState;                                  // 0x1048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1049[0x7];                                     // 0x1049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UABP_Battle_Global_C*                   As_ABP_Battle_Global;                              // 0x1050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	E_HitReact_Anim_Type                          E_HitReactAnimType;                                // 0x1058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1059[0x7];                                     // 0x1059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MoveToControlForSequence;                          // 0x1060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTo_Start;                                      // 0x1068(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTo_Target;                                     // 0x1080(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                MoveTo_Offset;                                     // 0x1098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          MoveTo_IsActive;                                   // 0x10B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10B1[0x7];                                     // 0x10B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Battle_SkillScript_C*               CurrentBattleSkill;                                // 0x10B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_CharacterBattleAudioProfile_C* DataAsset_BattleAudioProfile;                 // 0x10C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_Battle_Boss_OverheadState_C*       BossUI;                                            // 0x10C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon_Mesh_L;                                     // 0x10D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Weapon_Mesh_R;                                     // 0x10D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SD_Hit_Critical;                                   // 0x10E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_HitAffinity_Resistant;                          // 0x10F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_HitAffinity_Weak;                               // 0x1100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_HitIntensity_Light;                             // 0x1110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_HitIntensity_Medium;                            // 0x1120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_HitIntensity_Strong;                            // 0x1130(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TArray<class UBP_FreeAimTargetPart_C*>        FreeAimTargetParts;                                // 0x1140(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        GradientParryLockDuration;                         // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GradientParryImmuneDuration;                       // 0x1158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGradientParrying;                                // 0x1160(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1161[0x7];                                     // 0x1161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* CharacterBase)> OnMoveToCompleted; // 0x1168(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UAnimMontage*                           AM_DashBack;                                       // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   LastFeedbackedPermeateElement;                     // 0x1180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlayerControlledCharacter;                       // 0x1181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_1182[0x6];                                     // 0x1182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_WeaponSkin_C*                       Weapons;                                           // 0x1188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, Interp, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 BaseWeaponSkinIfNoWeaponEquipped;                  // 0x1190(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weapon_R_SocketName;                               // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Weapon_L_Socket_Name;                              // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 WeaponClass;                                       // 0x11A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_DashIn;                                         // 0x11B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFEnemyDataRow>                 PossibleMinions;                                   // 0x11B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          CanDoJumpCounterAttack;                            // 0x11C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C9[0x7];                                     // 0x11C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ResurectAnimation;                                 // 0x11D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FreeAimProjectileClass;                            // 0x11D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FreeAimShootAnim;                                  // 0x11E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        AOEDamageMultiplier;                               // 0x11E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpLockDuration;                                  // 0x11F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpWarmUpDuration;                                // 0x11F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpImmuneDuration;                                // 0x1200(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefensiveMoveImmunityStartTime;                    // 0x1208(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* Character)> OnJumpStart;   // 0x1210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        JumpCounterAttackWindowDuration;                   // 0x1220(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpCounterAttackWindowStartDelay;                 // 0x1228(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        JumpCounterAttackWindowSlomo;                      // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       JumpAttacker;                                      // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FSF_ReferenceCounterHandle             LastStandReference;                                // 0x1240(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          DisableLastStandOnCounterAttackDamages;            // 0x1260(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawDebugMoveToOnNextFrame;                  // 0x1261(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InitFreeAimWithRightHand;                          // 0x1262(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1263[0x1];                                     // 0x1263(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InitFreeAimWithBoneOverride;                       // 0x1264(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPermeateIntensity                            LastFeedbackedPermeateIntensity;                   // 0x126C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_126D[0x3];                                     // 0x126D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FleeIntroAnimation;                                // 0x1270(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 Attackx1Sequence;                                  // 0x1278(0x0010)(Edit, BlueprintVisible)
	class ULevelSequence*                         Attackx2Sequence;                                  // 0x1288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         Attackx3Sequence;                                  // 0x1290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ULevelSequence*                         Attackx4Sequence;                                  // 0x1298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          BaseAttack_ShouldDashBefore;                       // 0x12A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A1[0x7];                                     // 0x12A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BaseAttack_DistanceToEnemyAfterDash;               // 0x12A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FleeActivationAnimation;                           // 0x12B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> TargetsAcquisitionOverride;                      // 0x12B8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void()>              OnPuppetTurnEnded;                                 // 0x12C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class ULevelSequence*                         GradientCounterSequence;                           // 0x12D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 CounterSequence;                                   // 0x12E0(0x0010)(Edit, BlueprintVisible)
	class UNiagaraSystem*                         FX_ParrySuccess;                                   // 0x12F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_ItemUse;                                        // 0x12F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          CurrentBattleSequenceActionEffectCount;            // 0x1300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1301[0x3];                                     // 0x1301(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentSkillActionEffectCount;                     // 0x1304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> AcquiredHeroTargets;                             // 0x1308(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	struct FVector                                PPGradientCenter;                                  // 0x1318(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	class UWBP_HUD_DamageFeedback_C*              CurrentDamagePopupWidget;                          // 0x1330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, Deprecated, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(int32 ActionEffectIndex)> OnBattleSequenceActionEffect;            // 0x1338(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        LookX;                                             // 0x1348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LookY;                                             // 0x1350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentRecoilValue;                                // 0x1358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTurnActive;                                      // 0x135C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135D[0x3];                                     // 0x135D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFRoutedEventHandle                    DEBUG_OverrideSkillRouting;                        // 0x1360(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	TArray<class ULevelSequence*>                 RangeCounterSequence;                              // 0x1380(0x0010)(Edit, BlueprintVisible)
	ECounterType                                  CurrentCounterType;                                // 0x1390(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1391[0x7];                                     // 0x1391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAnimMontage*>                   AnimAOECounter;                                    // 0x1398(0x0010)(Edit, BlueprintVisible)
	class UAnimMontage*                           AM_InterceptDashTo;                                // 0x13A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AM_InterceptDashBack;                              // 0x13B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnJumpCounter;                                     // 0x13B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        AimingBreathingMultiplier;                         // 0x13C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           IdleToFreeAim_Transition_Montage;                  // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    SD_StanceBreak;                                    // 0x13D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_JumpStart;                                      // 0x13E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    SD_JumpSuccess;                                    // 0x13F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	int32                                         NextDamagePopupPositionIndex;                      // 0x1408(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                DamageNumberPositionOffset;                        // 0x140C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          NiagaraTurnSystemEnabled;                          // 0x141C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141D[0x3];                                     // 0x141D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                DefaultHitSound;                                   // 0x1420(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class AActor>>          InstigatedActors;                                  // 0x1428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class FString>                         InstigatedActorNames;                              // 0x1438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class AActor>>          RegisteredInstigatedActors;                        // 0x1448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FName                                   BoneToAttachGradientFX;                            // 0x1458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSyncToChange;                                   // 0x1460(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ULODSyncComponent*                      LODSync_Characters;                                // 0x1468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         LODBias;                                           // 0x1470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1474[0x4];                                     // 0x1474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinimumDodgeLockDiff;                              // 0x1478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class ULevelSequence>          FinisherSequence;                                  // 0x1480(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	struct FSF_ReferenceCounterHandle             FinisherDeathPreventHandle;                        // 0x14A8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShouldPlayFinisherWhenTurnEnd;                     // 0x14C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasPlayedFinisher;                                 // 0x14C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14CA[0x6];                                     // 0x14CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_EpicBattleSequenceActor_C*          ActiveCounterSequence;                             // 0x14D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter)> OnCounterAttacked; // 0x14D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CurrentOverpoweredFeedbackState;                   // 0x14E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14E9[0x7];                                     // 0x14E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    SD_JumpCounter;                                    // 0x14F0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_Battle_Base_C* CharacterActor)> OnStartedAllowQTE; // 0x1500(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class FName                                   BoneNameToAttachGradientFX;                        // 0x1510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnReadyForBattle;                                  // 0x1518(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class ABP_jRPG_Character_Battle_Base_C*> LifeLinkedCharacters;                            // 0x1528(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bIsLifeLinkMaster;                                 // 0x1538(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1539[0x7];                                     // 0x1539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ExternalFreeAimTargetActors;                       // 0x1540(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          AdditionalTurnEndEventRequested;                   // 0x1550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool OnInstigatedActorSpawned(class AActor* SpawnedActor);
	void BPI_GetDependencies(TArray<TSoftClassPtr<class UClass>>* Classes, TArray<TSoftObjectPtr<class UObject>>* Assets, TArray<TScriptInterface<class IBPI_LoadingDependenciesSource_C>>* ExternalDependencies);
	void GetBattleAudioProfile(class UBP_DataAsset_CharacterBattleAudioProfile_C** AudioProfile);
	void GetBattleAudioContainerComponents(class USceneComponent** SFX, class USceneComponent** weapon_l, class USceneComponent** weapon_r, class USceneComponent** Foley, class USceneComponent** Vocal, class USceneComponent** foot_l, class USceneComponent** Foot_R, class USceneComponent** HitBy);
	void GetBattleAudioCharacterManager(class UBP_AudioCharacter_BattleManager_C** AudioCharacterBattleManager);
	void GetTiedObject(class UObject** Object);
	void GetIsDead(bool* Dead);
	void GetIsDefending(bool* Defending);
	void GetCharacterCombatStyle(E_jRPG_CombatStyle* CombatStyle);
	void FlushAdditionalTurnEndEvent(bool* Value);
	void RequestAdditionalTurnEnd();
	bool HasFinisherSequence();
	const struct FTransform GetTransformForBattleSequenceSnapping();
	void InitializeLifeLinkedCharacters();
	void AddLifeLinkedCharacter(class ABP_jRPG_Character_Battle_Base_C* LifeLinkedCharacter);
	bool IsLifeLinkedMaster();
	bool IsLifeLinked();
	void GetLocationForSequenceSnapping(struct FVector* InitialLocation);
	double GetCounterDamageLevelMultiplier();
	void PlayBattleDialogueLine(class USoundBase* SoundAsset);
	void PlaySkillBattleLine(class USoundBase* SoundAsset);
	class UBP_BattleLinesModel_Base_C* GetBattleLineModel();
	void ApplyDifficultySettings();
	void Internal_SetUniqueMechanicOverpoweredState(bool Enabled);
	double GetParryImmuneDuration();
	double GetDodgeImmuneDuration();
	void GetIsBeingCountered(bool* IsBeingCountered_0);
	void GetBattleSpotIndex(int32* BattleSpotIndex_0);
	void GetAcquiredTargets(TArray<class ABP_jRPG_Character_Battle_Base_C*>* Characters);
	void ClearAcquiredTargets();
	void TryStopParryAnim();
	void OnGroupCounterAttackBegin(class ABP_jRPG_Character_Battle_Base_C* CounterAttackTarget);
	void OnCounteredStart();
	void GetHasAimingSkill(bool* HasAimingSkill_0);
	class ABP_EpicBattleSequenceActor_C* GetActiveCounterSequence();
	bool CanCounterAttackCurrentEnemy();
	bool HasUnlockedJump();
	void ActivateLightingScenarioWithTag(class FName LightingScenarioTag, const float ChangeSpeedMultiplier);
	void GetBattleWheel2DOffsetForPage(const struct FGameplayTag& WheelPageTag, struct FVector2D* TwoDOffset);
	void SetBattleCharacterVisible(bool Visible);
	void SetShouldPlayFinisherAtTurnEnd(bool ShouldPlayFinisherWhenTurnEnd_0);
	void GetShouldPlayFinisher(bool* ShouldPlayFinisherWhenTurnEnd_0);
	void GetBattleMap(class ABP_BattleMap_C** BattleMap);
	class UBP_AudioCharacter_BattleManager_C* GetCharacterAudioManager();
	void InitializeLODSync();
	void LODSyncBattle();
	void LODSyncApplyParameter(class UConfigurableGameUserSettings* UserSettings);
	void SummonSingleMinion(const struct FDataTableRowHandle& EnemyRow, int32 BattleSpotIndex_0, bool NotifyBattleStart, class ABP_jRPG_Character_Battle_Base_C** SpawnedCharacter, struct FVector* SpawnLocation);
	void CleanInstigatedActors();
	void RegisterExternalActor(class AActor* Actor);
	void ProcessDamageReceivedSound(class UBP_BattleDamages_C* BattleDamage);
	void SpawnDamagePopupFromDamages(class UBP_BattleDamages_C* BattleDamages, class UWBP_HUD_DamageFeedback_C** DamageWidget);
	void ResolveHitSound();
	void Attach_Weapons_to_Hands(class ABP_WeaponSkin_C* WeaponActor);
	void InitializeCameraFocus();
	struct FVector GetDamagePopupWorldLocation();
	void ExecuteSkillAction(class FName SkillID);
	void ClearActionEffectNumber(const class FString& Reason);
	struct FVector GetAttackedLocation();
	bool HasReceivedBattleStart();
	class ABP_WeaponSkin_C* GetWeaponActor();
	void StartCounterableMove(ECounterType CounterType);
	void PerformActionByAI_Internal();
	void ExecuteSkillEvent(struct FFRoutedEventHandle& SkillHandle);
	void DeclareSkillEvent(struct FFRoutedEventHandle& SkillHandle, const TDelegate<void()>& Event, const class FString& DebugName);
	void DeclareCharacterSkillEvents();
	void ExecuteSkillScript(class ABP_Battle_SkillScript_C* SkillScriptInstance);
	void OnBattleEnded();
	void ShouldDoLastStand(bool* DoLastStand);
	void AdjustDefensiveMoveLockTimer(double NewDuration, const class FString& Reason);
	void OnDefenseLockTimerExpired();
	void Acquire_Targets(TArray<class ABP_jRPG_Character_Battle_Base_C*>& Targets, TArray<class ABP_jRPG_Character_Battle_Base_C*>* AcquiredTargets);
	bool IsLastActionEffectOfSkill();
	void ApplyStandardStatusEffectOnTarget(E_StatusEffects StatusEffect, int32 TurnDuration, EBuffApplicationProbability StatusEffectProbability, bool Condition, class ABP_jRPG_Character_Battle_Base_C* TargetCharacter, bool* Success);
	void ApplyStandardStatusEffect(E_StatusEffects StatusEffect, int32 TurnDuration, EBuffApplicationProbability StatusEffectProbability, bool Condition, bool* Success);
	void PerformStandardHit(bool CanBeCountered_0, bool CanBeJumped, bool RequiresGradientCounter, double DamageMultiplier, EAttackType DamageElement, bool* HasHit, TArray<class UBP_BattleDamages_C*>* BattleDamages);
	void PerformStandardHitOnCharacter(class ABP_jRPG_Character_Battle_Base_C* TargetCharacter, bool CanBeCountered_0, bool CanBeJumped, bool RequiresGradientCounter, double DamageMultiplier, EAttackType DamageElement, bool* HasHit, class UBP_BattleDamages_C** BattleDamages);
	void SetActiveFreeAimHand(bool UseRightHand, class FName BoneOverride);
	void TryPerformLastStand(class UBP_LastStandRequest_C* LastStandRequest);
	void EndLastStandMove();
	void StartLastStandMove(const class FString& DebugName);
	void StartGradientAttack();
	bool IsInImmunityPhase();
	void ResetMoveToStartLocation();
	void TryStartJump(bool* Success);
	void ResetCurrentSkill();
	void ExecuteSkillScriptFromState(class UBP_SkillState_C* SkillState);
	void OnCharacterReintegratesBattle();
	void KickCharacterFromBattle(struct FGuid* KickedCharacterHandle);
	void RegisterExternalFreeAimTarget(class AActor* Actor);
	void UpdatePermeateFeedback();
	void GetAllEnemiesExceptSelf(TArray<class ABP_jRPG_Character_Battle_Base_C*>* EnemiesExceptSelf);
	void TryStartGradientParry(bool* Success);
	void StartUnblockableAttack();
	void StartUndodgeableAttack();
	TArray<class UBP_FreeAimTargetPart_C*> GetFreeAimTargetPartsComponents();
	void SpawnWeaponAndSetSkin();
	void GetDynamicMaterialInstance(int32 Material_Index, class UMeshComponent* Mesh_0, class UMaterialInstanceDynamic** Dynamic_Material_Instance);
	void StartMoveToControlledBySequence(class ABP_jRPG_Character_Battle_Base_C* TargetCharacter, double Distance);
	void SetMoveToControlForSequence(double MoveToControlForSequence_0);
	void SetCurrentIdleState(E_EnemyIdleState CurrentIdleState_0, class UAnimMontage* Idle_Transition_AnimMontage, float* AnimMontageDuration);
	void SummonMinions(const struct FDataTableRowHandle& EncounterRow, bool NotifyBattleStart, TArray<class ABP_jRPG_Character_Battle_Base_C*>* SpawnedCharacters, TArray<struct FVector>* SpawnLocations);
	void OnSkipTurnChosen();
	void ReactToBattleEnd();
	void ReactToCharacterThatWasAttacked(class UAC_jRPG_CharacterBattleStats_C* OtherCharacter);
	void ReactToRevivingOther(class UAC_jRPG_CharacterBattleStats_C* RevivedCharacterStats);
	void ReactToBeingRevived(class UAC_jRPG_CharacterBattleStats_C* ReviverCharacterStats);
	void ReactToGivingBuff(class UAC_jRPG_CharacterBattleStats_C* TargetCharacterStats, class UBP_BattleBuffInstance_C* GivenBuffInstance);
	void ReactToBuffReceived(class UAC_jRPG_CharacterBattleStats_C* SourceCharacterStats, class UBP_BattleBuffInstance_C* BuffInstance);
	void OnTriedForbiddenAction(EBattleForbiddenActionReason ForbiddenActionReason);
	void UI_AppearOnDamagePosition(class UUserWidget* UIElement);
	void UpdateDamageSkin(class USkeletalMeshComponent* FaceMesh);
	void OnStartAllowQTE();
	void SetBaseElementalAffinities(const TMap<EAttackType, EElementalAffinity>& ElementalAffinities);
	void RemoveElementalAllAffinityOverridesFromSource(class UObject* Source);
	void AddElementalAffinityOverride(class UObject* Source, EAttackType Element, EElementalAffinity Affinity);
	void GetElementalAffinity(EAttackType AttackType, EElementalAffinity* Value);
	void UpdateElementalAffinities();
	void Shield_Explosion();
	void RegisterSkillChecks(class FName ActionName);
	void Feedback_APLostUI(int32 LostAP, EAPChangeReason ChangeReason);
	void GetOverheadStateWidget(class UWBP_Battle_CharacterOverheadState_Base_C** WBPOverheadState);
	void StartDefenseLock(double Duration, const class FString& Reason);
	void UpdateFreeAimOnAPChanged(int32 NewAP, int32 PreviousAP, class UAC_jRPG_CharacterBattleStats_C* CharacterStats);
	void MakeBoneMap(TMap<class USceneComponent*, double>* Map);
	void Feedback_APRecoverUI(double RecoveredAP, bool IsFromTurnStart);
	void UseDynamicCameraSystem();
	void IsDataValid(TArray<class FText>& ValidationErrors, EDataValidationResult* Result);
	void StartFreeAim_Regular();
	void OnBattleReset();
	void OnDeathPublic(bool DeathCounter);
	void OnResurrectedPublic(double HealAmount);
	void OnInitiativeReducedPublic(double ReductionAmount);
	void OnHealedPublic(double HealAmount, bool RestoredMP_);
	void CheckPublicCall();
	void CheckParentCall();
	void StartPublicCall(const class FString& CallContext);
	void ActivateCharacterDynamicCamera(EBattleTurnState BattleTurnState);
	void OnCounterAttackFinished();
	void SetIsCounterAttacking(class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter, bool IsGradient);
	void On_Action_Finished(bool* HasMoreActions);
	void ActivateActionEffect();
	void PrintDebugText();
	void GetBattleTimelineExpiringSoonest(TArray<class UBP_BattleSequenceTimeline_C*>* SortedBattleSequenceTimelines);
	void GetCurrentBattleSequenceTime(double* Time);
	void UpdateBattleTurnState();
	void OnBattleTurnStateChanged();
	void PopAllBattleTurnStates();
	void PopBattleTurnStates(TArray<EBattleTurnState>& CurrentState);
	void PopBattleTurnState(EBattleTurnState CurrentState);
	void PushBattleTurnState(EBattleTurnState TurnState);
	void GetDebugText(class FText* Result);
	void SetAnim_DefaultSlotAlpha(double Anim_DefaultSlotAlpha_0);
	class UAC_jRPG_ActionsManager_C* GetActionManager();
	void TryCancelFreeAim();
	void EnableFreeAim(EFreeAimType FreeAimType, int32 AmmoCount, double TimeLimit, class UClass* ProjectileClass);
	void OnStopTargeting();
	void OnStartTargeting();
	void ExternalTickCurrentBattleSequenceActionTimeline();
	void DeclareBattleSequenceTimingsAsList(class ABP_EpicBattleSequenceActor_C* BattleSequence, TArray<struct FBattleSequenceKeyframe>& BattleSequenceKeyframes, const TMap<double, EBattleSequenceCameraType>& CameraKeyframes, int32 TrackIndex);
	void OnSkillComboFailed();
	void OnBattleSequenceFinished(class ABP_EpicBattleSequenceActor_C* ComboSequence);
	void OnBattleSequenceStarts(class ABP_EpicBattleSequenceActor_C* BattleSequence);
	void OnStopChoosingItem();
	void OnStartChoosingItem();
	void OnStopChoosingUltimate();
	void OnStartChoosingUltimate();
	void OnStopChoosingMagic();
	void OnStartChoosingSkill();
	void AssertIsCurrentTurn();
	void IsCurrentTurn(bool* IsCurrentTurn_0);
	void Try_Activate_Skill_Combo();
	void OnDefendSuccess(class ABP_jRPG_Character_Battle_Base_C* DefendedEnemy);
	void OnParrySuccess(class ABP_jRPG_Character_Battle_Base_C* ParriedEnemy);
	void OnDodgeSuccess(class ABP_jRPG_Character_Battle_Base_C* DodgedEnemy, bool IsPerfectDodge);
	void ClearDefensiveMoveLock(const class FString& Reason);
	void TryStartParry(bool* Success);
	void TryStartDodge(bool* Success);
	void EndDefensiveMove();
	void StartDefensiveMove(double LockDuration, double ImmuneDuration, double WarmUpDuration, const class FString& Reason);
	void IsImmunityByDefensiveMoveFinished(bool* IsFinished);
	void IsLockedByDefensiveMoveTimer(bool* IsLocked);
	void CanDoDefensiveMove(bool* CanDoDefensiveMove_0);
	void OverrideWithShoulderCamera(bool Enabled);
	void OnTurnEnded();
	void OnTurnStart();
	void QTEFailFXAndSound(const struct FVector& FXScale, class USoundBase* SoundBase, class UParticleSystem* ParticleSystem, const struct FVector& FX_Position_Offset);
	void GetSingleTargetLocation(struct FVector* TargetLocation);
	void GetTargetHeadLocation(TArray<struct FVector>* TargetsLocation, TArray<struct FVector>* TargetScaleList, TArray<struct FRotator>* TargetRotationList);
	void GetTargetMiddleLocation(TArray<struct FVector>* TargetsLocation, TArray<struct FVector>* TargetScaleList, TArray<struct FRotator>* TargetRotationList);
	void GetTargetRootLocation(TArray<struct FVector>* TargetsLocation, TArray<struct FVector>* TargetScaleList, TArray<struct FRotator>* TargetRotationList);
	class UParticleSystemComponent* SpawnFXOnSelectedTargets(class UNiagaraSystem* VFXNiagara, const struct FVector& LocationModif, const struct FRotator& RotationModif, const struct FVector& ScaleModif, E_JRPG_VFXSpawnSpots WhereToSpawn, class USoundBase* VFXSound, class UParticleSystem* OLDCASCADE_ParticleSystem, TArray<class UParticleSystemComponent*>* SpawnedParticleSystems);
	void AddCharacterParticleSystem(E_jRPG_CharacterAttachmentSlot AttachmentSlot, class UParticleSystem* ParticleSystemCascade, const struct FRotator& ParticleSystemRotation, class UNiagaraSystem* SystemNiagara, const struct FVector& PositionOffset, class UParticleSystemComponent** ParticleSystemComponent_Cascade, class UNiagaraComponent** NiagaraSystem);
	void GetAllEnemies(TArray<class ABP_jRPG_Character_Battle_Base_C*>* Output);
	void GetMiddleEnemy(class ABP_jRPG_Character_Battle_Base_C** Output);
	void CameraShakePlay(class UClass* CameraShake, double Scale);
	void ChangeCamera(class FName CameraName_0);
	void PerformActionByAI();
	void UserConstructionScript();
	void Timeline_Targeting__FinishedFunc();
	void Timeline_Targeting__UpdateFunc();
	void Timeline_FreeaimRecoil__FinishedFunc();
	void Timeline_FreeaimRecoil__UpdateFunc();
	void ChangeSizeTimeline__FinishedFunc();
	void ChangeSizeTimeline__UpdateFunc();
	void AppearDisappearTimeline__FinishedFunc();
	void AppearDisappearTimeline__UpdateFunc();
	void Timeline_GradientAttackPostProcess__FinishedFunc();
	void Timeline_GradientAttackPostProcess__UpdateFunc();
	void GradientCounterRadius__FinishedFunc();
	void GradientCounterRadius__UpdateFunc();
	void LateralOffsetUIFX__FinishedFunc();
	void LateralOffsetUIFX__UpdateFunc();
	void OnFinished_282BA5C34080385E2DB4D1849738C470();
	void OnFinished_77F23D7F4DB17AAB78B820BB808011AB();
	void InpActEvt_IA_Battle_FreeAim_Shoot_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_Battle_FreeAim_Cancel_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void OnLoaded_F2DB9C784493F242341D828551987DA8(class UObject* Loaded);
	void OnFinished_B66BF519426C66C6C8336A86B3DB3006();
	void OnUIAction();
	void OnInitiativeReduced(double ReductionAmount);
	void OnPowerDebuff(double Debuff_Power);
	void StartAttackInterceptionAnim(class ABP_jRPG_Character_Battle_Base_C* CharacterToProtect);
	void Internal_StartDashBackForInterception();
	void ResetInterceptionMovement(class USF_BlueprintLatentAction* LatentAction);
	void ReceiveTick(float DeltaSeconds);
	void Down_K2Node_InputAxisEvent_0(float AxisValue);
	void Right_K2Node_InputAxisEvent_1(float AxisValue);
	void OnBeginCursorOver_Trace(class AActor* TouchedActor);
	void OnEndCursorOver_Trace(class AActor* TouchedActor);
	void OnClicked_Trace();
	void OnTargetingHoverStart();
	void OnTargetingHoverEnd();
	void OnUINavigationFocusLost();
	void OnUINavigationFocus(const class UBP_UINavigationFocusEvent_C* FocusEventBP);
	void ShootFreeAimProjectile();
	void BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_0_ShootFreeAimProjectile__DelegateSignature();
	void OnBeginFreeAimHover();
	void OnEndFreeAimHover();
	void ExecuteAction(E_jRPG_ActionType ActionType, class FName SecondaryActionName);
	void ExecuteAttackAction();
	void ExecuteDefendAction();
	void ExecuteItemAction(class FName ItemName);
	void ExecuteFleeAction();
	void ExecuteMagicAction(class FName MagicName);
	void ExecuteMoveAction(class FName MoveName);
	void ExecuteSoloCounterAttack(bool IsGradientCounter, class USF_BlueprintLatentAction* LatentAction);
	void CounterAttackActionEffect();
	void OnDeathDamagePrevented();
	void ExecuteGradientCounterAttack(class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter);
	void GradientCounterAttackActionEffect();
	void DisableGradientPPFromCounterAttack(const struct FVector& GradientCenterLocation);
	void PlayFreezeFrameInternal(class USF_BlueprintLatentAction* LatentAction);
	void ChangeSize(double ScaleMultiplier, double Duration, class UCurveFloat* CurveOverride);
	void Feedback_OnAccuracyDodge();
	void LeadGroupCounter(class USF_BlueprintLatentAction* LatentAction);
	void CleanPost();
	void Feedback_OnUniqueMechanicOverpowerEnable();
	void Feedback_OnUniqueMechanicOverpowerDisable();
	void OnDeath(bool DeathByCounter);
	void OnHealed(double HealAmount, bool RestoredMP_, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, EHealReason Reason);
	void OnResurrected(double HealAmount);
	void OnDamageReceivedPublic(class UBP_BattleDamages_C* BattleDamages, TScriptInterface<class IIBattleDamageSource_C> DamageSourceCharacter);
	void OnAPRecovered(int32 Amount, bool IsFromTurnStart);
	void ShieldAdded();
	void OnStanceBroken();
	void MakeDead_Internal();
	void ReceiveBeginPlay();
	void OnBattleStart();
	void StartDodgeFeedback();
	void StartParry();
	void StartDefend();
	void StopDefend();
	void FeedbackSuccessfulDodge();
	void FeedbackSuccessfulParry();
	void FeedbackSuccessfulDefend();
	void OnDamageReceived(double Damage, bool Critical_, bool Weakness_, bool Resistant_, EAttackType Element, EDamageReason Reason, class ABP_jRPG_Character_Battle_Base_C* DamageCharacterSource);
	void BeginRotationOverride();
	void ClearRotationOverride();
	void OnFreeAimHit(EFreeAimBodyPartType BodyPart, class ABP_FreeAimProjectile_Base_C* Projectile);
	void BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_2_OnFreeAimHit_Character_Regular__DelegateSignature(class ABP_jRPG_Character_Battle_Base_C* Character, EFreeAimBodyPartType BodyPart, const struct FHitResult& HitResult, class UBP_FreeAimTargetPart_C* TargetBodyPartBP);
	void HitFeedback(class ABP_jRPG_Character_Battle_Base_C* OverrideTarget, bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead);
	void DEBUG_CVarChange_ShowBattleDebug(bool NewValue);
	void DEBUG_CVarChange_ShowFreeAimBodyParts(bool NewValue);
	void ResetDefensiveLockAfterTime(double Duration);
	void TriggerABPHitAnimation();
	void BndEvt__BP_jRPG_Character_Battle_Base_AC_jRPG_CharacterStats_K2Node_ComponentBoundEvent_0_OnCharacterInitialized__DelegateSignature();
	void DEBUG_SpawnWeapon();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StartGradientParryFeedback();
	void MoveToInitialLocation2(class USF_BlueprintLatentAction* CompletedLatentAction, const class FString& DebugReason);
	void TEMP_TriggerCounterAttack(class UAC_jRPG_CharacterBattleStats_C* TargetCharacterStats);
	void FeedbackPermeateChange(EAttackType NewPermeateElement, EPermeateIntensity NewPermeateIntensity);
	void DashBack(class UAnimMontage* DashBackAnimMontage, class USF_BlueprintLatentAction* CompletedLatentAction);
	void MakeCharacterDisappear();
	void MakeCharacterAppear();
	void StartPPGradientAttack();
	void EndPPGradientAttack();
	void StartJumpFeedback();
	void BeginJumpCounterAttackWindow(class ABP_jRPG_Character_Battle_Base_C* Attacker);
	void TryTriggerJumpCounterAttack();
	void PerformBattleStartEvent(class UBP_DependencyRefCounter_C* RefCounter);
	void EndPPGradientAttackCounter(const struct FVector& GradientCenterLocation);
	void PrepareForBattleInternal();
	void Init(const struct FS_CharacterCustomization& CharacterCustomization);
	void PerformDelayedBattleStart();
	void DTrailsBasedOnVelocity();
	void HitFeedbackOnSelf(bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead);
	void HitFeedbackOnCurrentTarget(class ABP_jRPG_Character_Battle_Base_C* OverrideTarget, bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead);
	void HitFeedbackInternal(class ABP_jRPG_Character_Battle_Base_C* OverrideTarget, bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead);
	void SetNiagaraUIEnabled(bool Enabled);
	void OrientNiagaraUIFromCamera();
	void DEBUG_OnCvarChanged_HideUI(bool NewValue);
	void OnCharacterTurnEnd(class ABP_jRPG_Character_Battle_Base_C* Character);
	void OffsetFX_UISkillPanel();
	void PlayFinisherAtTurnEnd(class UObject* CharacterStats);
	void PlayFinisherSequence();
	void Action_Effect_Finisher(int32 ActionEffectIndex);
	void ActivateFinisherPossible();
	void BeginStaggerOnCountered();
	void EndStaggerOnCountered();
	void OnBattlePreIntro();
	void FreeAimEndTurnInternal(EFreeAimType FreeAimType);
	void OnFreeAimCancelled();
	void OnFreeAimEnded(TArray<class ABP_jRPG_Character_Battle_Base_C*>& AllHitCharacters, EFreeAimType FreeAimType);
	void OnFreeAimEnabled();
	void ExecuteUbergraph_BP_jRPG_Character_Battle_Base(int32 EntryPoint);

	void GetCurrentBattlePosture(EBattleTurnState* CurrentBattlePosture) const;
	void GetBattlePostureAnimations(TMap<EBattleTurnState, class UAnimSequenceBase*>* BattlePostureAnimations) const;
	void GetOwnerCharacter(class ABP_jRPG_Character_Battle_Base_C** Character) const;
	int32 GetBattleSpotIndexLeftToRight__WhenFacingCharacters_() const;
	EBattleTurnState GetCurrentBattleTurnState() const;
	void IsPlayerTeamCharacter(bool* IsPlayerTeam) const;
	void GetLastSkillComboInfo(bool* OnlySuccess, bool* OnlyFail, bool* OnlyPerfect, int32* SuccessCount, int32* FailCount, int32* PerfectCount) const;
	void GetRootLocation(struct FVector* Location, struct FVector* Scale, struct FRotator* Rotation) const;
	void FillTargetsWithOtherHeroes(TArray<class ABP_jRPG_Character_Battle_Base_C*>& OriginalTargets, TArray<class ABP_jRPG_Character_Battle_Base_C*>* TargetList) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_Character_Battle_Base_C">();
	}
	static class ABP_jRPG_Character_Battle_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_Character_Battle_Base_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_jRPG_Character_Battle_Base_C) == 0x000010, "Wrong alignment on ABP_jRPG_Character_Battle_Base_C");
static_assert(sizeof(ABP_jRPG_Character_Battle_Base_C) == 0x001560, "Wrong size on ABP_jRPG_Character_Battle_Base_C");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, UberGraphFrame) == 0x000670, "Member 'ABP_jRPG_Character_Battle_Base_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LODSyncCharacters) == 0x000678, "Member 'ABP_jRPG_Character_Battle_Base_C::LODSyncCharacters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LODSyncEnemies) == 0x000680, "Member 'ABP_jRPG_Character_Battle_Base_C::LODSyncEnemies' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BPC_CharacterVisualAlterations) == 0x000688, "Member 'ABP_jRPG_Character_Battle_Base_C::BPC_CharacterVisualAlterations' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ChildActor_PreviewWeapon) == 0x000690, "Member 'ABP_jRPG_Character_Battle_Base_C::ChildActor_PreviewWeapon' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetingCameraFocusPoint) == 0x000698, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetingCameraFocusPoint' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BP_EnvironmentInteractorComponent_foot_right) == 0x0006A0, "Member 'ABP_jRPG_Character_Battle_Base_C::BP_EnvironmentInteractorComponent_foot_right' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BP_EnvironmentInteractorComponent_foot_left) == 0x0006A8, "Member 'ABP_jRPG_Character_Battle_Base_C::BP_EnvironmentInteractorComponent_foot_left' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Niagara_3D_UI_BackgroundGold) == 0x0006B0, "Member 'ABP_jRPG_Character_Battle_Base_C::Niagara_3D_UI_BackgroundGold' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Niagara_3D_UI_Background) == 0x0006B8, "Member 'ABP_jRPG_Character_Battle_Base_C::Niagara_3D_UI_Background' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BP_CharacterSkinComponent) == 0x0006C0, "Member 'ABP_jRPG_Character_Battle_Base_C::BP_CharacterSkinComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BP_EventRoutingSystemComponent_AISkills) == 0x0006C8, "Member 'ABP_jRPG_Character_Battle_Base_C::BP_EventRoutingSystemComponent_AISkills' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LookAtLocation_FreeAim) == 0x0006D0, "Member 'ABP_jRPG_Character_Battle_Base_C::LookAtLocation_FreeAim' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LookAtLocation) == 0x0006D8, "Member 'ABP_jRPG_Character_Battle_Base_C::LookAtLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DebugArrow_FreeAim_L) == 0x0006E0, "Member 'ABP_jRPG_Character_Battle_Base_C::DebugArrow_FreeAim_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimRotationComponent_L) == 0x0006E8, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimRotationComponent_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimSpawnLocation_L) == 0x0006F0, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimSpawnLocation_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AttackedLocation) == 0x0006F8, "Member 'ABP_jRPG_Character_Battle_Base_C::AttackedLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Idle) == 0x000700, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Idle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Placeholder_02) == 0x000708, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Placeholder_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Placeholder_01) == 0x000710, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Placeholder_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Foley_02) == 0x000718, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Foley_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Foley_01) == 0x000720, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Foley_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Footstep_L) == 0x000728, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Footstep_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Footstep_R) == 0x000730, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Footstep_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Weapon_L_02) == 0x000738, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Weapon_L_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Weapon_R_02) == 0x000740, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Weapon_R_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Vocal_02) == 0x000748, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Vocal_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_HitBy_02) == 0x000750, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_HitBy_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_SFX_02) == 0x000758, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_SFX_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_HitBy_01) == 0x000760, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_HitBy_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_SFX_01) == 0x000768, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_SFX_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Vocal_01) == 0x000770, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Vocal_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Weapon_L_01) == 0x000778, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Weapon_L_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_Weapon_R_01) == 0x000780, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_Weapon_R_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BP_AudioCharacter_BattleManager) == 0x000788, "Member 'ABP_jRPG_Character_Battle_Base_C::BP_AudioCharacter_BattleManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FrontLocation) == 0x000790, "Member 'ABP_jRPG_Character_Battle_Base_C::FrontLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DamagePosition) == 0x000798, "Member 'ABP_jRPG_Character_Battle_Base_C::DamagePosition' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_FootR) == 0x0007A0, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_FootR' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_FootL) == 0x0007A8, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_FootL' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_Spine03) == 0x0007B0, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_Spine03' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_Spine01) == 0x0007B8, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_Spine01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_Root) == 0x0007C0, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_Root' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_Head) == 0x0007C8, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_Head' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_Hand_R) == 0x0007D0, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_Hand_L) == 0x0007D8, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachment_AboveBody) == 0x0007E0, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachment_AboveBody' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FrontVFXSpawn) == 0x0007E8, "Member 'ABP_jRPG_Character_Battle_Base_C::FrontVFXSpawn' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimRotationComponent_R) == 0x0007F0, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimRotationComponent_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DebugArrow_FreeAim_R) == 0x0007F8, "Member 'ABP_jRPG_Character_Battle_Base_C::DebugArrow_FreeAim_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimSpawnLocation_R) == 0x000800, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimSpawnLocation_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, HealthBar_CloseLocation) == 0x000808, "Member 'ABP_jRPG_Character_Battle_Base_C::HealthBar_CloseLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, HealthBar) == 0x000810, "Member 'ABP_jRPG_Character_Battle_Base_C::HealthBar' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Head_R) == 0x000818, "Member 'ABP_jRPG_Character_Battle_Base_C::Head_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Head_L) == 0x000820, "Member 'ABP_jRPG_Character_Battle_Base_C::Head_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, thigh_r) == 0x000828, "Member 'ABP_jRPG_Character_Battle_Base_C::thigh_r' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, thigh_l) == 0x000830, "Member 'ABP_jRPG_Character_Battle_Base_C::thigh_l' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, lowerarm_r) == 0x000838, "Member 'ABP_jRPG_Character_Battle_Base_C::lowerarm_r' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, lowerarm_l) == 0x000840, "Member 'ABP_jRPG_Character_Battle_Base_C::lowerarm_l' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, upperarm_r) == 0x000848, "Member 'ABP_jRPG_Character_Battle_Base_C::upperarm_r' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, upperarm_l) == 0x000850, "Member 'ABP_jRPG_Character_Battle_Base_C::upperarm_l' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Side_R) == 0x000858, "Member 'ABP_jRPG_Character_Battle_Base_C::Side_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Side_L) == 0x000860, "Member 'ABP_jRPG_Character_Battle_Base_C::Side_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DebugText_CharacterInfos) == 0x000868, "Member 'ABP_jRPG_Character_Battle_Base_C::DebugText_CharacterInfos' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CameraTargetingTarget) == 0x000870, "Member 'ABP_jRPG_Character_Battle_Base_C::CameraTargetingTarget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ChildActor_TargetingCamera) == 0x000878, "Member 'ABP_jRPG_Character_Battle_Base_C::ChildActor_TargetingCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetingCamera) == 0x000880, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetingCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Arrow1) == 0x000888, "Member 'ABP_jRPG_Character_Battle_Base_C::Arrow1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BP_FreeAimShooterBattleComponent) == 0x000890, "Member 'ABP_jRPG_Character_Battle_Base_C::BP_FreeAimShooterBattleComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetingCapsule) == 0x000898, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetingCapsule' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DebugText_PreviousPosition) == 0x0008A0, "Member 'ABP_jRPG_Character_Battle_Base_C::DebugText_PreviousPosition' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Camera_Shoulder) == 0x0008A8, "Member 'ABP_jRPG_Character_Battle_Base_C::Camera_Shoulder' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SpringArm_Shoulder) == 0x0008B0, "Member 'ABP_jRPG_Character_Battle_Base_C::SpringArm_Shoulder' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Sphere_Head) == 0x0008B8, "Member 'ABP_jRPG_Character_Battle_Base_C::Sphere_Head' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Sphere_Hand_R) == 0x0008C0, "Member 'ABP_jRPG_Character_Battle_Base_C::Sphere_Hand_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Sphere_Hand_L) == 0x0008C8, "Member 'ABP_jRPG_Character_Battle_Base_C::Sphere_Hand_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attachments) == 0x0008D0, "Member 'ABP_jRPG_Character_Battle_Base_C::Attachments' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetWidget) == 0x0008D8, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_jRPG_CombatMovement) == 0x0008E0, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_jRPG_CombatMovement' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetPointer) == 0x0008E8, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetPointer' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AC_jRPG_CharacterStats) == 0x0008F0, "Member 'ABP_jRPG_Character_Battle_Base_C::AC_jRPG_CharacterStats' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Camera) == 0x0008F8, "Member 'ABP_jRPG_Character_Battle_Base_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SpringArm) == 0x000900, "Member 'ABP_jRPG_Character_Battle_Base_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LateralOffsetUIFX_0to1_5196A039410C8DC3D94C10B3DAF53447) == 0x000908, "Member 'ABP_jRPG_Character_Battle_Base_C::LateralOffsetUIFX_0to1_5196A039410C8DC3D94C10B3DAF53447' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LateralOffsetUIFX__Direction_5196A039410C8DC3D94C10B3DAF53447) == 0x00090C, "Member 'ABP_jRPG_Character_Battle_Base_C::LateralOffsetUIFX__Direction_5196A039410C8DC3D94C10B3DAF53447' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LateralOffsetUIFX) == 0x000910, "Member 'ABP_jRPG_Character_Battle_Base_C::LateralOffsetUIFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ChangeSizeTimeline_0to1_FEFB868E4BAD591F95B10BA3ADE10F40) == 0x000918, "Member 'ABP_jRPG_Character_Battle_Base_C::ChangeSizeTimeline_0to1_FEFB868E4BAD591F95B10BA3ADE10F40' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ChangeSizeTimeline__Direction_FEFB868E4BAD591F95B10BA3ADE10F40) == 0x00091C, "Member 'ABP_jRPG_Character_Battle_Base_C::ChangeSizeTimeline__Direction_FEFB868E4BAD591F95B10BA3ADE10F40' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ChangeSizeTimeline) == 0x000920, "Member 'ABP_jRPG_Character_Battle_Base_C::ChangeSizeTimeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_FreeaimRecoil_RecoilTimeline_1AFEEEE64C939F0FE67404B5B1F4ABE1) == 0x000928, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_FreeaimRecoil_RecoilTimeline_1AFEEEE64C939F0FE67404B5B1F4ABE1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_FreeaimRecoil__Direction_1AFEEEE64C939F0FE67404B5B1F4ABE1) == 0x00092C, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_FreeaimRecoil__Direction_1AFEEEE64C939F0FE67404B5B1F4ABE1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_FreeaimRecoil) == 0x000930, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_FreeaimRecoil' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GradientCounterRadius_0to1_AB8F890F4FB1CBA3A26D6084F926BCCC) == 0x000938, "Member 'ABP_jRPG_Character_Battle_Base_C::GradientCounterRadius_0to1_AB8F890F4FB1CBA3A26D6084F926BCCC' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GradientCounterRadius__Direction_AB8F890F4FB1CBA3A26D6084F926BCCC) == 0x00093C, "Member 'ABP_jRPG_Character_Battle_Base_C::GradientCounterRadius__Direction_AB8F890F4FB1CBA3A26D6084F926BCCC' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GradientCounterRadius) == 0x000940, "Member 'ABP_jRPG_Character_Battle_Base_C::GradientCounterRadius' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_Targeting_NewTrack_0_EB09F8A344E5CF553AEF4B84CD1DA71B) == 0x000948, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_Targeting_NewTrack_0_EB09F8A344E5CF553AEF4B84CD1DA71B' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_Targeting__Direction_EB09F8A344E5CF553AEF4B84CD1DA71B) == 0x00094C, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_Targeting__Direction_EB09F8A344E5CF553AEF4B84CD1DA71B' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_Targeting) == 0x000950, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_Targeting' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_GradientAttackPostProcess_0to1_1CFBE67A4635212B1C24BF9F8B70EEF3) == 0x000958, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_GradientAttackPostProcess_0to1_1CFBE67A4635212B1C24BF9F8B70EEF3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_GradientAttackPostProcess__Direction_1CFBE67A4635212B1C24BF9F8B70EEF3) == 0x00095C, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_GradientAttackPostProcess__Direction_1CFBE67A4635212B1C24BF9F8B70EEF3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Timeline_GradientAttackPostProcess) == 0x000960, "Member 'ABP_jRPG_Character_Battle_Base_C::Timeline_GradientAttackPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AppearDisappearTimeline_0To1_64AB1CEA4A58B3518DA3F59F51F1CBD1) == 0x000968, "Member 'ABP_jRPG_Character_Battle_Base_C::AppearDisappearTimeline_0To1_64AB1CEA4A58B3518DA3F59F51F1CBD1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AppearDisappearTimeline__Direction_64AB1CEA4A58B3518DA3F59F51F1CBD1) == 0x00096C, "Member 'ABP_jRPG_Character_Battle_Base_C::AppearDisappearTimeline__Direction_64AB1CEA4A58B3518DA3F59F51F1CBD1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AppearDisappearTimeline) == 0x000970, "Member 'ABP_jRPG_Character_Battle_Base_C::AppearDisappearTimeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ControlledByBattleAI_) == 0x000978, "Member 'ABP_jRPG_Character_Battle_Base_C::ControlledByBattleAI_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleManagerReference) == 0x000980, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleManagerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Enemy_) == 0x000988, "Member 'ABP_jRPG_Character_Battle_Base_C::Enemy_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetingManagerReference) == 0x000990, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetingManagerReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FormationType) == 0x000998, "Member 'ABP_jRPG_Character_Battle_Base_C::FormationType' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Dead_) == 0x000999, "Member 'ABP_jRPG_Character_Battle_Base_C::Dead_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CombatStyle_DEPRECATED) == 0x00099A, "Member 'ABP_jRPG_Character_Battle_Base_C::CombatStyle_DEPRECATED' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GameInstanceReference) == 0x0009A0, "Member 'ABP_jRPG_Character_Battle_Base_C::GameInstanceReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SoundToPlayWhenTargetHovered) == 0x0009A8, "Member 'ABP_jRPG_Character_Battle_Base_C::SoundToPlayWhenTargetHovered' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SoundToPlayWhenTargetDecided) == 0x0009B0, "Member 'ABP_jRPG_Character_Battle_Base_C::SoundToPlayWhenTargetDecided' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OriginalLocation) == 0x0009B8, "Member 'ABP_jRPG_Character_Battle_Base_C::OriginalLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OriginalRotation) == 0x0009D0, "Member 'ABP_jRPG_Character_Battle_Base_C::OriginalRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetedCharacter) == 0x0009E8, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetedCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CameraName) == 0x0009F0, "Member 'ABP_jRPG_Character_Battle_Base_C::CameraName' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AnimDodge) == 0x0009F8, "Member 'ABP_jRPG_Character_Battle_Base_C::AnimDodge' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AnimJump) == 0x000A08, "Member 'ABP_jRPG_Character_Battle_Base_C::AnimJump' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AnimJumpCounter) == 0x000A10, "Member 'ABP_jRPG_Character_Battle_Base_C::AnimJumpCounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AnimParry) == 0x000A18, "Member 'ABP_jRPG_Character_Battle_Base_C::AnimParry' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SocketNames) == 0x000A20, "Member 'ABP_jRPG_Character_Battle_Base_C::SocketNames' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AttachmentComponents) == 0x000A70, "Member 'ABP_jRPG_Character_Battle_Base_C::AttachmentComponents' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SpawnedParticleSystem) == 0x000AC0, "Member 'ABP_jRPG_Character_Battle_Base_C::SpawnedParticleSystem' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SingleTargetLocation) == 0x000AC8, "Member 'ABP_jRPG_Character_Battle_Base_C::SingleTargetLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleActionQueue) == 0x000AE0, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleActionQueue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AnimGradientParry) == 0x000AF0, "Member 'ABP_jRPG_Character_Battle_Base_C::AnimGradientParry' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DefensiveMoveLockEndTime) == 0x000AF8, "Member 'ABP_jRPG_Character_Battle_Base_C::DefensiveMoveLockEndTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DefensiveMoveLockTimer) == 0x000B00, "Member 'ABP_jRPG_Character_Battle_Base_C::DefensiveMoveLockTimer' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DefensiveMoveImmunityEndTime) == 0x000B08, "Member 'ABP_jRPG_Character_Battle_Base_C::DefensiveMoveImmunityEndTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsParrying) == 0x000B10, "Member 'ABP_jRPG_Character_Battle_Base_C::IsParrying' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsDodging) == 0x000B11, "Member 'ABP_jRPG_Character_Battle_Base_C::IsDodging' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsJumping) == 0x000B12, "Member 'ABP_jRPG_Character_Battle_Base_C::IsJumping' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsStunLocked) == 0x000B13, "Member 'ABP_jRPG_Character_Battle_Base_C::IsStunLocked' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DodgeLockDuration) == 0x000B18, "Member 'ABP_jRPG_Character_Battle_Base_C::DodgeLockDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DodgeSuccessLockDuration) == 0x000B20, "Member 'ABP_jRPG_Character_Battle_Base_C::DodgeSuccessLockDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DodgeImmuneDuration) == 0x000B28, "Member 'ABP_jRPG_Character_Battle_Base_C::DodgeImmuneDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ParryLockDuration) == 0x000B30, "Member 'ABP_jRPG_Character_Battle_Base_C::ParryLockDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ParryImmuneDuration) == 0x000B38, "Member 'ABP_jRPG_Character_Battle_Base_C::ParryImmuneDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentSkillNextComboAction) == 0x000B40, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentSkillNextComboAction' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsLastSkillComboSuccessful) == 0x000B48, "Member 'ABP_jRPG_Character_Battle_Base_C::IsLastSkillComboSuccessful' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, QTE_Keyframes) == 0x000B49, "Member 'ABP_jRPG_Character_Battle_Base_C::QTE_Keyframes' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleKeyframes) == 0x000B4A, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleKeyframes' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleKeyframes_Track2) == 0x000B4B, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleKeyframes_Track2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleKeyframes_Track3) == 0x000B4C, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleKeyframes_Track3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleCameraKeyframes) == 0x000B4D, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleCameraKeyframes' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleKeyframes_Diegetic) == 0x000B4E, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleKeyframes_Diegetic' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleStateStack) == 0x000B50, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleStateStack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentBattlePostureAnimations) == 0x000B60, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentBattlePostureAnimations' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, UseFullComboSequence) == 0x000BB0, "Member 'ABP_jRPG_Character_Battle_Base_C::UseFullComboSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentComboSequence) == 0x000BB8, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentComboSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, NextBattleSequenceActionTime) == 0x000BC0, "Member 'ABP_jRPG_Character_Battle_Base_C::NextBattleSequenceActionTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DEBUG_CurrentComboAutoSuccess) == 0x000BC8, "Member 'ABP_jRPG_Character_Battle_Base_C::DEBUG_CurrentComboAutoSuccess' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LastBattleSequenceAction) == 0x000BCC, "Member 'ABP_jRPG_Character_Battle_Base_C::LastBattleSequenceAction' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ComboSuccessHistory) == 0x000BD0, "Member 'ABP_jRPG_Character_Battle_Base_C::ComboSuccessHistory' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ComboPerfectHistory) == 0x000BE0, "Member 'ABP_jRPG_Character_Battle_Base_C::ComboPerfectHistory' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsComboWaitingForActionEffect) == 0x000BF0, "Member 'ABP_jRPG_Character_Battle_Base_C::IsComboWaitingForActionEffect' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, HasAimingSkill) == 0x000BF1, "Member 'ABP_jRPG_Character_Battle_Base_C::HasAimingSkill' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CHECK_wasBaseBeginPlayCalled) == 0x000BF2, "Member 'ABP_jRPG_Character_Battle_Base_C::CHECK_wasBaseBeginPlayCalled' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Anim_DefaultSlotAlpha) == 0x000BF8, "Member 'ABP_jRPG_Character_Battle_Base_C::Anim_DefaultSlotAlpha' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleSequenceData) == 0x000C00, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleSequenceData' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleSequenceData_Static) == 0x000C20, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleSequenceData_Static' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsBattleStateDirty) == 0x000C40, "Member 'ABP_jRPG_Character_Battle_Base_C::IsBattleStateDirty' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleSequenceTimelines) == 0x000C48, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleSequenceTimelines' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentActionEffectNumber) == 0x000C98, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentActionEffectNumber' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsPerformingCounterAttack) == 0x000C9C, "Member 'ABP_jRPG_Character_Battle_Base_C::IsPerformingCounterAttack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsCurrentCounterAttackGradient) == 0x000C9D, "Member 'ABP_jRPG_Character_Battle_Base_C::IsCurrentCounterAttackGradient' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentCounterAttackTarget) == 0x000CA0, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentCounterAttackTarget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentCounterAttackSource) == 0x000CA8, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentCounterAttackSource' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CanBeCountered) == 0x000CB0, "Member 'ABP_jRPG_Character_Battle_Base_C::CanBeCountered' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsBeingCountered) == 0x000CB1, "Member 'ABP_jRPG_Character_Battle_Base_C::IsBeingCountered' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CounterAttackRequiresPerfect) == 0x000CB2, "Member 'ABP_jRPG_Character_Battle_Base_C::CounterAttackRequiresPerfect' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ShouldPlayHitAnimationOnNextDamage_) == 0x000CB3, "Member 'ABP_jRPG_Character_Battle_Base_C::ShouldPlayHitAnimationOnNextDamage_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CHECK_ParentCall) == 0x000CB4, "Member 'ABP_jRPG_Character_Battle_Base_C::CHECK_ParentCall' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CHECK_PublicCall) == 0x000CB5, "Member 'ABP_jRPG_Character_Battle_Base_C::CHECK_PublicCall' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CHECK_CallContext) == 0x000CB8, "Member 'ABP_jRPG_Character_Battle_Base_C::CHECK_CallContext' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OriginalSpringArmRelativeRotation) == 0x000CC8, "Member 'ABP_jRPG_Character_Battle_Base_C::OriginalSpringArmRelativeRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OriginalActorWorldRotation) == 0x000CE0, "Member 'ABP_jRPG_Character_Battle_Base_C::OriginalActorWorldRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DEBUG_IgnoreDamages) == 0x000CF8, "Member 'ABP_jRPG_Character_Battle_Base_C::DEBUG_IgnoreDamages' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Crosshair) == 0x000D00, "Member 'ABP_jRPG_Character_Battle_Base_C::Crosshair' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, RandomIntroPlayRate_) == 0x000D08, "Member 'ABP_jRPG_Character_Battle_Base_C::RandomIntroPlayRate_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnFreeAimCancelInput) == 0x000D10, "Member 'ABP_jRPG_Character_Battle_Base_C::OnFreeAimCancelInput' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleSpotIndex) == 0x000D20, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleSpotIndex' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SoundEvent_FreeAimStart) == 0x000D28, "Member 'ABP_jRPG_Character_Battle_Base_C::SoundEvent_FreeAimStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SoundEvent_FreeAimCancel) == 0x000D38, "Member 'ABP_jRPG_Character_Battle_Base_C::SoundEvent_FreeAimCancel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OriginalWidgetRelativeLocation) == 0x000D48, "Member 'ABP_jRPG_Character_Battle_Base_C::OriginalWidgetRelativeLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, StunLockDuration) == 0x000D60, "Member 'ABP_jRPG_Character_Battle_Base_C::StunLockDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, HealthBarScale_Close) == 0x000D68, "Member 'ABP_jRPG_Character_Battle_Base_C::HealthBarScale_Close' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, HealthBarScale_Far) == 0x000D70, "Member 'ABP_jRPG_Character_Battle_Base_C::HealthBarScale_Far' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnResetBattleActionValidation) == 0x000D78, "Member 'ABP_jRPG_Character_Battle_Base_C::OnResetBattleActionValidation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnSelfTurnStart) == 0x000D88, "Member 'ABP_jRPG_Character_Battle_Base_C::OnSelfTurnStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnSelfTurnEnd) == 0x000D98, "Member 'ABP_jRPG_Character_Battle_Base_C::OnSelfTurnEnd' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnDefenseStateChange) == 0x000DA8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnDefenseStateChange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnParryStart) == 0x000DB8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnParryStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnGradientParryStart) == 0x000DC8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnGradientParryStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnDefensiveMoveEnd) == 0x000DD8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnDefensiveMoveEnd' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnDodgeStart) == 0x000DE8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnDodgeStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnDefenseLockEnd) == 0x000DF8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnDefenseLockEnd' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnDefenseLockStart) == 0x000E08, "Member 'ABP_jRPG_Character_Battle_Base_C::OnDefenseLockStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DEBUG_CVar_ShowBattleDebug) == 0x000E18, "Member 'ABP_jRPG_Character_Battle_Base_C::DEBUG_CVar_ShowBattleDebug' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DEBUG_CVar_ShowFreeAimBodyParts) == 0x000E19, "Member 'ABP_jRPG_Character_Battle_Base_C::DEBUG_CVar_ShowFreeAimBodyParts' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ElementalAffinitiesCurrent) == 0x000E20, "Member 'ABP_jRPG_Character_Battle_Base_C::ElementalAffinitiesCurrent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ElementalAffinitiesOverrides) == 0x000E70, "Member 'ABP_jRPG_Character_Battle_Base_C::ElementalAffinitiesOverrides' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ElementalAffinitiesBase) == 0x000EC0, "Member 'ABP_jRPG_Character_Battle_Base_C::ElementalAffinitiesBase' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ElementalAffinitiesInitial) == 0x000F10, "Member 'ABP_jRPG_Character_Battle_Base_C::ElementalAffinitiesInitial' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BaseAttackNumber) == 0x000F60, "Member 'ABP_jRPG_Character_Battle_Base_C::BaseAttackNumber' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DodgeAnimIndex) == 0x000F64, "Member 'ABP_jRPG_Character_Battle_Base_C::DodgeAnimIndex' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimLookSpeed) == 0x000F68, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimLookSpeed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CanBeTargeted) == 0x000F70, "Member 'ABP_jRPG_Character_Battle_Base_C::CanBeTargeted' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleKeyframes_Diegetic2) == 0x000F71, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleKeyframes_Diegetic2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BattleKeyframes_Diegetic3) == 0x000F72, "Member 'ABP_jRPG_Character_Battle_Base_C::BattleKeyframes_Diegetic3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CharacterAudioProfile) == 0x000F78, "Member 'ABP_jRPG_Character_Battle_Base_C::CharacterAudioProfile' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentIdleState) == 0x001048, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentIdleState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, As_ABP_Battle_Global) == 0x001050, "Member 'ABP_jRPG_Character_Battle_Base_C::As_ABP_Battle_Global' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, E_HitReactAnimType) == 0x001058, "Member 'ABP_jRPG_Character_Battle_Base_C::E_HitReactAnimType' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, MoveToControlForSequence) == 0x001060, "Member 'ABP_jRPG_Character_Battle_Base_C::MoveToControlForSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, MoveTo_Start) == 0x001068, "Member 'ABP_jRPG_Character_Battle_Base_C::MoveTo_Start' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, MoveTo_Target) == 0x001080, "Member 'ABP_jRPG_Character_Battle_Base_C::MoveTo_Target' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, MoveTo_Offset) == 0x001098, "Member 'ABP_jRPG_Character_Battle_Base_C::MoveTo_Offset' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, MoveTo_IsActive) == 0x0010B0, "Member 'ABP_jRPG_Character_Battle_Base_C::MoveTo_IsActive' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentBattleSkill) == 0x0010B8, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentBattleSkill' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DataAsset_BattleAudioProfile) == 0x0010C0, "Member 'ABP_jRPG_Character_Battle_Base_C::DataAsset_BattleAudioProfile' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BossUI) == 0x0010C8, "Member 'ABP_jRPG_Character_Battle_Base_C::BossUI' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Weapon_Mesh_L) == 0x0010D0, "Member 'ABP_jRPG_Character_Battle_Base_C::Weapon_Mesh_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Weapon_Mesh_R) == 0x0010D8, "Member 'ABP_jRPG_Character_Battle_Base_C::Weapon_Mesh_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_Hit_Critical) == 0x0010E0, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_Hit_Critical' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_HitAffinity_Resistant) == 0x0010F0, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_HitAffinity_Resistant' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_HitAffinity_Weak) == 0x001100, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_HitAffinity_Weak' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_HitIntensity_Light) == 0x001110, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_HitIntensity_Light' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_HitIntensity_Medium) == 0x001120, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_HitIntensity_Medium' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_HitIntensity_Strong) == 0x001130, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_HitIntensity_Strong' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimTargetParts) == 0x001140, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimTargetParts' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GradientParryLockDuration) == 0x001150, "Member 'ABP_jRPG_Character_Battle_Base_C::GradientParryLockDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GradientParryImmuneDuration) == 0x001158, "Member 'ABP_jRPG_Character_Battle_Base_C::GradientParryImmuneDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsGradientParrying) == 0x001160, "Member 'ABP_jRPG_Character_Battle_Base_C::IsGradientParrying' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnMoveToCompleted) == 0x001168, "Member 'ABP_jRPG_Character_Battle_Base_C::OnMoveToCompleted' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AM_DashBack) == 0x001178, "Member 'ABP_jRPG_Character_Battle_Base_C::AM_DashBack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LastFeedbackedPermeateElement) == 0x001180, "Member 'ABP_jRPG_Character_Battle_Base_C::LastFeedbackedPermeateElement' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsPlayerControlledCharacter) == 0x001181, "Member 'ABP_jRPG_Character_Battle_Base_C::IsPlayerControlledCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Weapons) == 0x001188, "Member 'ABP_jRPG_Character_Battle_Base_C::Weapons' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BaseWeaponSkinIfNoWeaponEquipped) == 0x001190, "Member 'ABP_jRPG_Character_Battle_Base_C::BaseWeaponSkinIfNoWeaponEquipped' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Weapon_R_SocketName) == 0x001198, "Member 'ABP_jRPG_Character_Battle_Base_C::Weapon_R_SocketName' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Weapon_L_Socket_Name) == 0x0011A0, "Member 'ABP_jRPG_Character_Battle_Base_C::Weapon_L_Socket_Name' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, WeaponClass) == 0x0011A8, "Member 'ABP_jRPG_Character_Battle_Base_C::WeaponClass' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AM_DashIn) == 0x0011B0, "Member 'ABP_jRPG_Character_Battle_Base_C::AM_DashIn' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, PossibleMinions) == 0x0011B8, "Member 'ABP_jRPG_Character_Battle_Base_C::PossibleMinions' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CanDoJumpCounterAttack) == 0x0011C8, "Member 'ABP_jRPG_Character_Battle_Base_C::CanDoJumpCounterAttack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ResurectAnimation) == 0x0011D0, "Member 'ABP_jRPG_Character_Battle_Base_C::ResurectAnimation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimProjectileClass) == 0x0011D8, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimProjectileClass' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FreeAimShootAnim) == 0x0011E0, "Member 'ABP_jRPG_Character_Battle_Base_C::FreeAimShootAnim' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AOEDamageMultiplier) == 0x0011E8, "Member 'ABP_jRPG_Character_Battle_Base_C::AOEDamageMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpLockDuration) == 0x0011F0, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpLockDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpWarmUpDuration) == 0x0011F8, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpWarmUpDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpImmuneDuration) == 0x001200, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpImmuneDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DefensiveMoveImmunityStartTime) == 0x001208, "Member 'ABP_jRPG_Character_Battle_Base_C::DefensiveMoveImmunityStartTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnJumpStart) == 0x001210, "Member 'ABP_jRPG_Character_Battle_Base_C::OnJumpStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpCounterAttackWindowDuration) == 0x001220, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpCounterAttackWindowDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpCounterAttackWindowStartDelay) == 0x001228, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpCounterAttackWindowStartDelay' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpCounterAttackWindowSlomo) == 0x001230, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpCounterAttackWindowSlomo' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, JumpAttacker) == 0x001238, "Member 'ABP_jRPG_Character_Battle_Base_C::JumpAttacker' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LastStandReference) == 0x001240, "Member 'ABP_jRPG_Character_Battle_Base_C::LastStandReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DisableLastStandOnCounterAttackDamages) == 0x001260, "Member 'ABP_jRPG_Character_Battle_Base_C::DisableLastStandOnCounterAttackDamages' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DEBUG_DrawDebugMoveToOnNextFrame) == 0x001261, "Member 'ABP_jRPG_Character_Battle_Base_C::DEBUG_DrawDebugMoveToOnNextFrame' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, InitFreeAimWithRightHand) == 0x001262, "Member 'ABP_jRPG_Character_Battle_Base_C::InitFreeAimWithRightHand' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, InitFreeAimWithBoneOverride) == 0x001264, "Member 'ABP_jRPG_Character_Battle_Base_C::InitFreeAimWithBoneOverride' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LastFeedbackedPermeateIntensity) == 0x00126C, "Member 'ABP_jRPG_Character_Battle_Base_C::LastFeedbackedPermeateIntensity' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FleeIntroAnimation) == 0x001270, "Member 'ABP_jRPG_Character_Battle_Base_C::FleeIntroAnimation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attackx1Sequence) == 0x001278, "Member 'ABP_jRPG_Character_Battle_Base_C::Attackx1Sequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attackx2Sequence) == 0x001288, "Member 'ABP_jRPG_Character_Battle_Base_C::Attackx2Sequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attackx3Sequence) == 0x001290, "Member 'ABP_jRPG_Character_Battle_Base_C::Attackx3Sequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, Attackx4Sequence) == 0x001298, "Member 'ABP_jRPG_Character_Battle_Base_C::Attackx4Sequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BaseAttack_ShouldDashBefore) == 0x0012A0, "Member 'ABP_jRPG_Character_Battle_Base_C::BaseAttack_ShouldDashBefore' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BaseAttack_DistanceToEnemyAfterDash) == 0x0012A8, "Member 'ABP_jRPG_Character_Battle_Base_C::BaseAttack_DistanceToEnemyAfterDash' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FleeActivationAnimation) == 0x0012B0, "Member 'ABP_jRPG_Character_Battle_Base_C::FleeActivationAnimation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, TargetsAcquisitionOverride) == 0x0012B8, "Member 'ABP_jRPG_Character_Battle_Base_C::TargetsAcquisitionOverride' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnPuppetTurnEnded) == 0x0012C8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnPuppetTurnEnded' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, GradientCounterSequence) == 0x0012D8, "Member 'ABP_jRPG_Character_Battle_Base_C::GradientCounterSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CounterSequence) == 0x0012E0, "Member 'ABP_jRPG_Character_Battle_Base_C::CounterSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FX_ParrySuccess) == 0x0012F0, "Member 'ABP_jRPG_Character_Battle_Base_C::FX_ParrySuccess' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AM_ItemUse) == 0x0012F8, "Member 'ABP_jRPG_Character_Battle_Base_C::AM_ItemUse' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentBattleSequenceActionEffectCount) == 0x001300, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentBattleSequenceActionEffectCount' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentSkillActionEffectCount) == 0x001304, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentSkillActionEffectCount' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AcquiredHeroTargets) == 0x001308, "Member 'ABP_jRPG_Character_Battle_Base_C::AcquiredHeroTargets' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, PPGradientCenter) == 0x001318, "Member 'ABP_jRPG_Character_Battle_Base_C::PPGradientCenter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentDamagePopupWidget) == 0x001330, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentDamagePopupWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnBattleSequenceActionEffect) == 0x001338, "Member 'ABP_jRPG_Character_Battle_Base_C::OnBattleSequenceActionEffect' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LookX) == 0x001348, "Member 'ABP_jRPG_Character_Battle_Base_C::LookX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LookY) == 0x001350, "Member 'ABP_jRPG_Character_Battle_Base_C::LookY' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentRecoilValue) == 0x001358, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentRecoilValue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IsTurnActive) == 0x00135C, "Member 'ABP_jRPG_Character_Battle_Base_C::IsTurnActive' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DEBUG_OverrideSkillRouting) == 0x001360, "Member 'ABP_jRPG_Character_Battle_Base_C::DEBUG_OverrideSkillRouting' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, RangeCounterSequence) == 0x001380, "Member 'ABP_jRPG_Character_Battle_Base_C::RangeCounterSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentCounterType) == 0x001390, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentCounterType' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AnimAOECounter) == 0x001398, "Member 'ABP_jRPG_Character_Battle_Base_C::AnimAOECounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AM_InterceptDashTo) == 0x0013A8, "Member 'ABP_jRPG_Character_Battle_Base_C::AM_InterceptDashTo' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AM_InterceptDashBack) == 0x0013B0, "Member 'ABP_jRPG_Character_Battle_Base_C::AM_InterceptDashBack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnJumpCounter) == 0x0013B8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnJumpCounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AimingBreathingMultiplier) == 0x0013C8, "Member 'ABP_jRPG_Character_Battle_Base_C::AimingBreathingMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, IdleToFreeAim_Transition_Montage) == 0x0013D0, "Member 'ABP_jRPG_Character_Battle_Base_C::IdleToFreeAim_Transition_Montage' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_StanceBreak) == 0x0013D8, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_StanceBreak' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_JumpStart) == 0x0013E8, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_JumpStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_JumpSuccess) == 0x0013F8, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_JumpSuccess' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, NextDamagePopupPositionIndex) == 0x001408, "Member 'ABP_jRPG_Character_Battle_Base_C::NextDamagePopupPositionIndex' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DamageNumberPositionOffset) == 0x00140C, "Member 'ABP_jRPG_Character_Battle_Base_C::DamageNumberPositionOffset' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, NiagaraTurnSystemEnabled) == 0x00141C, "Member 'ABP_jRPG_Character_Battle_Base_C::NiagaraTurnSystemEnabled' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, DefaultHitSound) == 0x001420, "Member 'ABP_jRPG_Character_Battle_Base_C::DefaultHitSound' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, InstigatedActors) == 0x001428, "Member 'ABP_jRPG_Character_Battle_Base_C::InstigatedActors' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, InstigatedActorNames) == 0x001438, "Member 'ABP_jRPG_Character_Battle_Base_C::InstigatedActorNames' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, RegisteredInstigatedActors) == 0x001448, "Member 'ABP_jRPG_Character_Battle_Base_C::RegisteredInstigatedActors' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BoneToAttachGradientFX) == 0x001458, "Member 'ABP_jRPG_Character_Battle_Base_C::BoneToAttachGradientFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LODSyncToChange) == 0x001460, "Member 'ABP_jRPG_Character_Battle_Base_C::LODSyncToChange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LODSync_Characters) == 0x001468, "Member 'ABP_jRPG_Character_Battle_Base_C::LODSync_Characters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LODBias) == 0x001470, "Member 'ABP_jRPG_Character_Battle_Base_C::LODBias' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, MinimumDodgeLockDiff) == 0x001478, "Member 'ABP_jRPG_Character_Battle_Base_C::MinimumDodgeLockDiff' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FinisherSequence) == 0x001480, "Member 'ABP_jRPG_Character_Battle_Base_C::FinisherSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, FinisherDeathPreventHandle) == 0x0014A8, "Member 'ABP_jRPG_Character_Battle_Base_C::FinisherDeathPreventHandle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ShouldPlayFinisherWhenTurnEnd) == 0x0014C8, "Member 'ABP_jRPG_Character_Battle_Base_C::ShouldPlayFinisherWhenTurnEnd' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, HasPlayedFinisher) == 0x0014C9, "Member 'ABP_jRPG_Character_Battle_Base_C::HasPlayedFinisher' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ActiveCounterSequence) == 0x0014D0, "Member 'ABP_jRPG_Character_Battle_Base_C::ActiveCounterSequence' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnCounterAttacked) == 0x0014D8, "Member 'ABP_jRPG_Character_Battle_Base_C::OnCounterAttacked' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, CurrentOverpoweredFeedbackState) == 0x0014E8, "Member 'ABP_jRPG_Character_Battle_Base_C::CurrentOverpoweredFeedbackState' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, SD_JumpCounter) == 0x0014F0, "Member 'ABP_jRPG_Character_Battle_Base_C::SD_JumpCounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnStartedAllowQTE) == 0x001500, "Member 'ABP_jRPG_Character_Battle_Base_C::OnStartedAllowQTE' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, BoneNameToAttachGradientFX) == 0x001510, "Member 'ABP_jRPG_Character_Battle_Base_C::BoneNameToAttachGradientFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, OnReadyForBattle) == 0x001518, "Member 'ABP_jRPG_Character_Battle_Base_C::OnReadyForBattle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, LifeLinkedCharacters) == 0x001528, "Member 'ABP_jRPG_Character_Battle_Base_C::LifeLinkedCharacters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, bIsLifeLinkMaster) == 0x001538, "Member 'ABP_jRPG_Character_Battle_Base_C::bIsLifeLinkMaster' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, ExternalFreeAimTargetActors) == 0x001540, "Member 'ABP_jRPG_Character_Battle_Base_C::ExternalFreeAimTargetActors' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_Battle_Base_C, AdditionalTurnEndEventRequested) == 0x001550, "Member 'ABP_jRPG_Character_Battle_Base_C::AdditionalTurnEndEventRequested' has a wrong offset!");

}

