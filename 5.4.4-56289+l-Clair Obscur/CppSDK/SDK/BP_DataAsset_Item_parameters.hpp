#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DataAsset_Item

#include "Basic.hpp"

#include "S_LootContext_structs.hpp"


namespace SDK::Params
{

// Function BP_DataAsset_Item.BP_DataAsset_Item_C.OnAddedToInventory
// 0x0020 (0x0020 - 0x0000)
struct BP_DataAsset_Item_C_OnAddedToInventory final
{
public:
	class UAC_jRPG_InventoryManager_C*            InventoryManager;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LootContext                         LootContext;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           GeneratedItem;                                     // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DataAsset_Item_C_OnAddedToInventory) == 0x000008, "Wrong alignment on BP_DataAsset_Item_C_OnAddedToInventory");
static_assert(sizeof(BP_DataAsset_Item_C_OnAddedToInventory) == 0x000020, "Wrong size on BP_DataAsset_Item_C_OnAddedToInventory");
static_assert(offsetof(BP_DataAsset_Item_C_OnAddedToInventory, InventoryManager) == 0x000000, "Member 'BP_DataAsset_Item_C_OnAddedToInventory::InventoryManager' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_C_OnAddedToInventory, ItemId) == 0x000008, "Member 'BP_DataAsset_Item_C_OnAddedToInventory::ItemId' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_C_OnAddedToInventory, LootContext) == 0x000010, "Member 'BP_DataAsset_Item_C_OnAddedToInventory::LootContext' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_C_OnAddedToInventory, GeneratedItem) == 0x000018, "Member 'BP_DataAsset_Item_C_OnAddedToInventory::GeneratedItem' has a wrong offset!");

// Function BP_DataAsset_Item.BP_DataAsset_Item_C.GetItemInstanceClass
// 0x0008 (0x0008 - 0x0000)
struct BP_DataAsset_Item_C_GetItemInstanceClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DataAsset_Item_C_GetItemInstanceClass) == 0x000008, "Wrong alignment on BP_DataAsset_Item_C_GetItemInstanceClass");
static_assert(sizeof(BP_DataAsset_Item_C_GetItemInstanceClass) == 0x000008, "Wrong size on BP_DataAsset_Item_C_GetItemInstanceClass");
static_assert(offsetof(BP_DataAsset_Item_C_GetItemInstanceClass, ReturnValue) == 0x000000, "Member 'BP_DataAsset_Item_C_GetItemInstanceClass::ReturnValue' has a wrong offset!");

// Function BP_DataAsset_Item.BP_DataAsset_Item_C.OnRemovedFromInventory
// 0x0018 (0x0018 - 0x0000)
struct BP_DataAsset_Item_C_OnRemovedFromInventory final
{
public:
	class UBP_jRPG_GI_Custom_C*                   GameInstance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_InventoryManager_C*            InventoryManager;                                  // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemId;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DataAsset_Item_C_OnRemovedFromInventory) == 0x000008, "Wrong alignment on BP_DataAsset_Item_C_OnRemovedFromInventory");
static_assert(sizeof(BP_DataAsset_Item_C_OnRemovedFromInventory) == 0x000018, "Wrong size on BP_DataAsset_Item_C_OnRemovedFromInventory");
static_assert(offsetof(BP_DataAsset_Item_C_OnRemovedFromInventory, GameInstance) == 0x000000, "Member 'BP_DataAsset_Item_C_OnRemovedFromInventory::GameInstance' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_C_OnRemovedFromInventory, InventoryManager) == 0x000008, "Member 'BP_DataAsset_Item_C_OnRemovedFromInventory::InventoryManager' has a wrong offset!");
static_assert(offsetof(BP_DataAsset_Item_C_OnRemovedFromInventory, ItemId) == 0x000010, "Member 'BP_DataAsset_Item_C_OnRemovedFromInventory::ItemId' has a wrong offset!");

}

