#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameActionTriggerZone

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FPromptParams_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.UserConstructionScript
// 0x0020 (0x0020 - 0x0000)
struct BP_GameActionTriggerZone_C_UserConstructionScript final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_UserConstructionScript");
static_assert(sizeof(BP_GameActionTriggerZone_C_UserConstructionScript) == 0x000020, "Wrong size on BP_GameActionTriggerZone_C_UserConstructionScript");
static_assert(offsetof(BP_GameActionTriggerZone_C_UserConstructionScript, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_GameActionTriggerZone_C_UserConstructionScript::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UserConstructionScript, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_UserConstructionScript::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.UpdateTriggerComponentsCollision
// 0x0038 (0x0038 - 0x0000)
struct BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0010(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReadState_State;                          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurrentConditionValue_CurrentValue;    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision");
static_assert(sizeof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision) == 0x000038, "Wrong size on BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000010, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_ReadState_State) == 0x000028, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_ReadState_State' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_Not_PreBool_ReturnValue) == 0x000029, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_GetCurrentConditionValue_CurrentValue) == 0x000031, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_GetCurrentConditionValue_CurrentValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision, CallFunc_BooleanAND_ReturnValue) == 0x000032, "Member 'BP_GameActionTriggerZone_C_UpdateTriggerComponentsCollision::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.UnbindAllTriggerComponents
// 0x0040 (0x0040 - 0x0000)
struct BP_GameActionTriggerZone_C_UnbindAllTriggerComponents final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate; // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0030(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_UnbindAllTriggerComponents");
static_assert(sizeof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents) == 0x000040, "Wrong size on BP_GameActionTriggerZone_C_UnbindAllTriggerComponents");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, CallFunc_Less_IntInt_ReturnValue) == 0x00002C, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_UnbindAllTriggerComponents, K2Node_CreateDelegate_OutputDelegate_1) == 0x000030, "Member 'BP_GameActionTriggerZone_C_UnbindAllTriggerComponents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.TryUnbindGameActionExecutor
// 0x0030 (0x0030 - 0x0000)
struct BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGameAction* GameAction)> K2Node_CreateDelegate_OutputDelegate;             // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor");
static_assert(sizeof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor) == 0x000030, "Wrong size on BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, CallFunc_Not_PreBool_ReturnValue_1) == 0x000001, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, CallFunc_BooleanAND_ReturnValue) == 0x000014, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, CallFunc_GetPlayerController_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000020, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_GameActionTriggerZone_C_TryUnbindGameActionExecutor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.TryRegisterInteract
// 0x0020 (0x0020 - 0x0000)
struct BP_GameActionTriggerZone_C_TryRegisterInteract final
{
public:
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldExecuteGameActionOnInteract_Result; // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_RegisterInteractiveObject_InteractiveObject_CastInput; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_TryRegisterInteract) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_TryRegisterInteract");
static_assert(sizeof(BP_GameActionTriggerZone_C_TryRegisterInteract) == 0x000020, "Wrong size on BP_GameActionTriggerZone_C_TryRegisterInteract");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryRegisterInteract, CallFunc_GetInteractionSystem_ReturnValue) == 0x000000, "Member 'BP_GameActionTriggerZone_C_TryRegisterInteract::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryRegisterInteract, CallFunc_ShouldExecuteGameActionOnInteract_Result) == 0x000008, "Member 'BP_GameActionTriggerZone_C_TryRegisterInteract::CallFunc_ShouldExecuteGameActionOnInteract_Result' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryRegisterInteract, CallFunc_RegisterInteractiveObject_InteractiveObject_CastInput) == 0x000010, "Member 'BP_GameActionTriggerZone_C_TryRegisterInteract::CallFunc_RegisterInteractiveObject_InteractiveObject_CastInput' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.TryExecuteGameActionOnOverlap
// 0x0028 (0x0028 - 0x0000)
struct BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap final
{
public:
	TDelegate<void(class UGameAction* GameAction)> K2Node_CreateDelegate_OutputDelegate;             // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldExecuteGameActionOnOverlap_Result;  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap");
static_assert(sizeof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap) == 0x000028, "Wrong size on BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000018, "Member 'BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap, CallFunc_ShouldExecuteGameActionOnOverlap_Result) == 0x000021, "Member 'BP_GameActionTriggerZone_C_TryExecuteGameActionOnOverlap::CallFunc_ShouldExecuteGameActionOnOverlap_Result' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.ShouldHideDistantInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_ShouldHideDistantInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_ShouldHideDistantInteraction) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_ShouldHideDistantInteraction");
static_assert(sizeof(BP_GameActionTriggerZone_C_ShouldHideDistantInteraction) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_ShouldHideDistantInteraction");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldHideDistantInteraction, ReturnValue) == 0x000000, "Member 'BP_GameActionTriggerZone_C_ShouldHideDistantInteraction::ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.ShouldExecuteGameActionOnOverlap
// 0x0004 (0x0004 - 0x0000)
struct BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGameActionWrapper_IsValid;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap");
static_assert(sizeof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap) == 0x000004, "Wrong size on BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap, Result) == 0x000000, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap::Result' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap, CallFunc_IsValidGameActionWrapper_IsValid) == 0x000002, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap::CallFunc_IsValidGameActionWrapper_IsValid' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnOverlap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.ShouldExecuteGameActionOnInteract
// 0x0004 (0x0004 - 0x0000)
struct BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract final
{
public:
	bool                                          Result;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGameActionWrapper_IsValid;         // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract");
static_assert(sizeof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract) == 0x000004, "Wrong size on BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract, Result) == 0x000000, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract::Result' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract, CallFunc_IsValidGameActionWrapper_IsValid) == 0x000002, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract::CallFunc_IsValidGameActionWrapper_IsValid' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract, CallFunc_BooleanAND_ReturnValue) == 0x000003, "Member 'BP_GameActionTriggerZone_C_ShouldExecuteGameActionOnInteract::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.SetTriggerComponentsCollisionEnabled
// 0x0028 (0x0028 - 0x0000)
struct BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled");
static_assert(sizeof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled) == 0x000028, "Wrong size on BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, Enabled) == 0x000000, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, Temp_bool_Variable) == 0x000001, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, Temp_byte_Variable) == 0x000002, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, Temp_byte_Variable_1) == 0x000003, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, K2Node_Select_Default) == 0x000008, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, CallFunc_Array_Length_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, CallFunc_Less_IntInt_ReturnValue) == 0x00001C, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled, CallFunc_Add_IntInt_ReturnValue) == 0x000020, "Member 'BP_GameActionTriggerZone_C_SetTriggerComponentsCollisionEnabled::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.SaveBehaviorState
// 0x0018 (0x0018 - 0x0000)
struct BP_GameActionTriggerZone_C_SaveBehaviorState final
{
public:
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_SaveBehaviorState) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_SaveBehaviorState");
static_assert(sizeof(BP_GameActionTriggerZone_C_SaveBehaviorState) == 0x000018, "Wrong size on BP_GameActionTriggerZone_C_SaveBehaviorState");
static_assert(offsetof(BP_GameActionTriggerZone_C_SaveBehaviorState, CallFunc_GetInteractionSystem_ReturnValue) == 0x000000, "Member 'BP_GameActionTriggerZone_C_SaveBehaviorState::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_SaveBehaviorState, CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput) == 0x000008, "Member 'BP_GameActionTriggerZone_C_SaveBehaviorState::CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_ReceiveEndPlay");
static_assert(sizeof(BP_GameActionTriggerZone_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_ReceiveEndPlay");
static_assert(offsetof(BP_GameActionTriggerZone_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_GameActionTriggerZone_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnObjectInteractionStateLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded final
{
public:
	bool                                          InteractionState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded, InteractionState) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnObjectInteractionStateLoaded::InteractionState' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnInteractionRequested
// 0x0010 (0x0010 - 0x0000)
struct BP_GameActionTriggerZone_C_OnInteractionRequested final
{
public:
	class ABP_jRPG_Character_World_C*             InteractingWorldCharacter;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Instant;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnInteractionRequested) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_OnInteractionRequested");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnInteractionRequested) == 0x000010, "Wrong size on BP_GameActionTriggerZone_C_OnInteractionRequested");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnInteractionRequested, InteractingWorldCharacter) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnInteractionRequested::InteractingWorldCharacter' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnInteractionRequested, Instant) == 0x000008, "Member 'BP_GameActionTriggerZone_C_OnInteractionRequested::Instant' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnGameActionExecuted
// 0x0030 (0x0030 - 0x0000)
struct BP_GameActionTriggerZone_C_OnGameActionExecuted final
{
public:
	class UGameAction*                            GameAction;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameAction*                            CallFunc_GetGameActionFromWrapper_GameAction;      // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameAction*                            CallFunc_GetGameActionFromWrapper_GameAction_1;    // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnGameActionExecuted) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_OnGameActionExecuted");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnGameActionExecuted) == 0x000030, "Wrong size on BP_GameActionTriggerZone_C_OnGameActionExecuted");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, GameAction) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::GameAction' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000009, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, CallFunc_GetGameActionFromWrapper_GameAction) == 0x000010, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::CallFunc_GetGameActionFromWrapper_GameAction' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, CallFunc_GetGameActionFromWrapper_GameAction_1) == 0x000020, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::CallFunc_GetGameActionFromWrapper_GameAction_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnGameActionExecuted, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000028, "Member 'BP_GameActionTriggerZone_C_OnGameActionExecuted::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnEnemyBattleStateLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded final
{
public:
	bool                                          BattleState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded, BattleState) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnEnemyBattleStateLoaded::BattleState' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnComponentEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BP_GameActionTriggerZone_C_OnComponentEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnComponentEndOverlap) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_OnComponentEndOverlap");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnComponentEndOverlap) == 0x000020, "Wrong size on BP_GameActionTriggerZone_C_OnComponentEndOverlap");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentEndOverlap, OverlappedComponent) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnComponentEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentEndOverlap, OtherActor) == 0x000008, "Member 'BP_GameActionTriggerZone_C_OnComponentEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentEndOverlap, OtherComp) == 0x000010, "Member 'BP_GameActionTriggerZone_C_OnComponentEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_GameActionTriggerZone_C_OnComponentEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnComponentBeginOverlap
// 0x0118 (0x0118 - 0x0000)
struct BP_GameActionTriggerZone_C_OnComponentBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_OnComponentBeginOverlap");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap) == 0x000118, "Wrong size on BP_GameActionTriggerZone_C_OnComponentBeginOverlap");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnComponentBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap, OtherActor) == 0x000008, "Member 'BP_GameActionTriggerZone_C_OnComponentBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap, OtherComp) == 0x000010, "Member 'BP_GameActionTriggerZone_C_OnComponentBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_GameActionTriggerZone_C_OnComponentBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap, bFromSweep) == 0x00001C, "Member 'BP_GameActionTriggerZone_C_OnComponentBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnComponentBeginOverlap, SweepResult) == 0x000020, "Member 'BP_GameActionTriggerZone_C_OnComponentBeginOverlap::SweepResult' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.OnActorOverlap
// 0x0020 (0x0020 - 0x0000)
struct BP_GameActionTriggerZone_C_OnActorOverlap final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetConsoleVariableBoolValue_ReturnValue;  // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_OnActorOverlap) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_OnActorOverlap");
static_assert(sizeof(BP_GameActionTriggerZone_C_OnActorOverlap) == 0x000020, "Wrong size on BP_GameActionTriggerZone_C_OnActorOverlap");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnActorOverlap, Actor) == 0x000000, "Member 'BP_GameActionTriggerZone_C_OnActorOverlap::Actor' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnActorOverlap, CallFunc_GetConsoleVariableBoolValue_ReturnValue) == 0x000008, "Member 'BP_GameActionTriggerZone_C_OnActorOverlap::CallFunc_GetConsoleVariableBoolValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnActorOverlap, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_GameActionTriggerZone_C_OnActorOverlap::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnActorOverlap, CallFunc_GetPlayerPawn_ReturnValue) == 0x000010, "Member 'BP_GameActionTriggerZone_C_OnActorOverlap::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_OnActorOverlap, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_OnActorOverlap::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.IsPlayerOverlappingWithOtherTriggers
// 0x0040 (0x0040 - 0x0000)
struct BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsOverlapping;                                     // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOverlappingActor_ReturnValue;           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers");
static_assert(sizeof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers) == 0x000040, "Wrong size on BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, OverlappedComponent) == 0x000000, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, OtherActor) == 0x000008, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, IsOverlapping) == 0x000010, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::IsOverlapping' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, Temp_int_Array_Index_Variable) == 0x000014, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, Temp_int_Loop_Counter_Variable) == 0x000018, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_Add_IntInt_ReturnValue) == 0x00001C, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_GetPlayerPawn_ReturnValue) == 0x000020, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000030, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000031, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_IsOverlappingActor_ReturnValue) == 0x000032, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_IsOverlappingActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_Array_Length_ReturnValue) == 0x000034, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_BooleanAND_ReturnValue) == 0x000038, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers, CallFunc_Less_IntInt_ReturnValue) == 0x000039, "Member 'BP_GameActionTriggerZone_C_IsPlayerOverlappingWithOtherTriggers::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.IsInteractionDone
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_IsInteractionDone final
{
public:
	bool                                          Done;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_IsInteractionDone) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_IsInteractionDone");
static_assert(sizeof(BP_GameActionTriggerZone_C_IsInteractionDone) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_IsInteractionDone");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsInteractionDone, Done) == 0x000000, "Member 'BP_GameActionTriggerZone_C_IsInteractionDone::Done' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.IsInteractionAvailable
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_IsInteractionAvailable final
{
public:
	bool                                          Available;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_IsInteractionAvailable) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_IsInteractionAvailable");
static_assert(sizeof(BP_GameActionTriggerZone_C_IsInteractionAvailable) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_IsInteractionAvailable");
static_assert(offsetof(BP_GameActionTriggerZone_C_IsInteractionAvailable, Available) == 0x000000, "Member 'BP_GameActionTriggerZone_C_IsInteractionAvailable::Available' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.GetInteractionPromptParams
// 0x0018 (0x0018 - 0x0000)
struct BP_GameActionTriggerZone_C_GetInteractionPromptParams final
{
public:
	struct FFPromptParams                         PromptParams;                                      // 0x0000(0x0018)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_GetInteractionPromptParams) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_GetInteractionPromptParams");
static_assert(sizeof(BP_GameActionTriggerZone_C_GetInteractionPromptParams) == 0x000018, "Wrong size on BP_GameActionTriggerZone_C_GetInteractionPromptParams");
static_assert(offsetof(BP_GameActionTriggerZone_C_GetInteractionPromptParams, PromptParams) == 0x000000, "Member 'BP_GameActionTriggerZone_C_GetInteractionPromptParams::PromptParams' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.ExecuteUbergraph_BP_GameActionTriggerZone
// 0x0190 (0x0190 - 0x0000)
struct BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InteractionState;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_World_C*             K2Node_Event_InteractingWorldCharacter;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Instant;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue_1;       // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_Condition;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput_1; // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OverlappedComponent;            // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_OtherActor;                     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_CustomEvent_OtherComp;                      // 0x0060(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_OtherBodyIndex;                 // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_bFromSweep;                     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_CustomEvent_SweepResult;                    // 0x0070(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0168(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0178(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPlayerOverlappingWithOtherTriggers_IsOverlapping; // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_BattleState;                          // 0x0187(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ReadState_State;                          // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0189(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x018A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x018B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone");
static_assert(sizeof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone) == 0x000190, "Wrong size on BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, EntryPoint) == 0x000000, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_Event_InteractionState) == 0x000004, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_Event_InteractionState' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_Event_InteractingWorldCharacter) == 0x000008, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_Event_InteractingWorldCharacter' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_Event_Instant) == 0x000010, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_Event_Instant' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_GetInteractionSystem_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_GetInteractionSystem_ReturnValue_1) == 0x000020, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_GetInteractionSystem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput) == 0x000028, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_ComponentBoundEvent_Condition) == 0x000038, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_ComponentBoundEvent_Condition' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput_1) == 0x000040, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_CustomEvent_OverlappedComponent) == 0x000050, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_CustomEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_CustomEvent_OtherActor) == 0x000058, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_CustomEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_CustomEvent_OtherComp) == 0x000060, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_CustomEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_CustomEvent_OtherBodyIndex) == 0x000068, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_CustomEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_CustomEvent_bFromSweep) == 0x00006C, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_CustomEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_CustomEvent_SweepResult) == 0x000070, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_CustomEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000168, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_ComponentBoundEvent_OtherActor) == 0x000170, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_ComponentBoundEvent_OtherComp) == 0x000178, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000180, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_Event_EndPlayReason) == 0x000184, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_IsPlayerOverlappingWithOtherTriggers_IsOverlapping) == 0x000185, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_IsPlayerOverlappingWithOtherTriggers_IsOverlapping' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_Not_PreBool_ReturnValue) == 0x000186, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, K2Node_Event_BattleState) == 0x000187, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::K2Node_Event_BattleState' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_ReadState_State) == 0x000188, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_ReadState_State' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_Not_PreBool_ReturnValue_1) == 0x000189, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_BooleanAND_ReturnValue) == 0x00018A, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00018B, "Member 'BP_GameActionTriggerZone_C_ExecuteUbergraph_BP_GameActionTriggerZone::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.ExecuteGameActionOnInteract
// 0x0028 (0x0028 - 0x0000)
struct BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract final
{
public:
	TDelegate<void(class UGameAction* GameAction)> K2Node_CreateDelegate_OutputDelegate;             // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract");
static_assert(sizeof(BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract) == 0x000028, "Wrong size on BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000018, "Member 'BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_GameActionTriggerZone_C_ExecuteGameActionOnInteract::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.CheckForErrors
// 0x0098 (0x0098 - 0x0000)
struct BP_GameActionTriggerZone_C_CheckForErrors final
{
public:
	TArray<class FText>                           ErrorMessages;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0028(0x0010)()
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0040(0x0010)(ReferenceParm)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue;              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Format_ReturnValue_1;                     // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_MakeLiteralBool_ReturnValue_1;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0070(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue_2;                     // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGameActionWrapper_IsValid;         // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidGameActionWrapper_IsValid_1;       // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_CheckForErrors) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_CheckForErrors");
static_assert(sizeof(BP_GameActionTriggerZone_C_CheckForErrors) == 0x000098, "Wrong size on BP_GameActionTriggerZone_C_CheckForErrors");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, ErrorMessages) == 0x000000, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::ErrorMessages' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, ReturnValue) == 0x000010, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_Format_ReturnValue) == 0x000028, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_Array_Add_ReturnValue) == 0x000038, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, K2Node_MakeArray_Array_1) == 0x000040, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_MakeLiteralBool_ReturnValue) == 0x000050, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_MakeLiteralBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_Format_ReturnValue_1) == 0x000058, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_MakeLiteralBool_ReturnValue_1) == 0x000068, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_MakeLiteralBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, K2Node_MakeArray_Array_2) == 0x000070, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_Format_ReturnValue_2) == 0x000080, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_IsValidGameActionWrapper_IsValid) == 0x000090, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_IsValidGameActionWrapper_IsValid' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_IsValidGameActionWrapper_IsValid_1) == 0x000091, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_IsValidGameActionWrapper_IsValid_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_Not_PreBool_ReturnValue) == 0x000092, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_Not_PreBool_ReturnValue_1) == 0x000093, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_CheckForErrors, CallFunc_BooleanAND_ReturnValue) == 0x000094, "Member 'BP_GameActionTriggerZone_C_CheckForErrors::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.CanInteractWithMount
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_CanInteractWithMount final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_CanInteractWithMount) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_CanInteractWithMount");
static_assert(sizeof(BP_GameActionTriggerZone_C_CanInteractWithMount) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_CanInteractWithMount");
static_assert(offsetof(BP_GameActionTriggerZone_C_CanInteractWithMount, CanInteract) == 0x000000, "Member 'BP_GameActionTriggerZone_C_CanInteractWithMount::CanInteract' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature) == 0x000001, "Wrong alignment on BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature");
static_assert(sizeof(BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature) == 0x000001, "Wrong size on BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature");
static_assert(offsetof(BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature, Condition) == 0x000000, "Member 'BP_GameActionTriggerZone_C_BndEvt__BP_GameActionTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_3_OnConditionChanged__DelegateSignature::Condition' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.BindGameActionExecutor
// 0x0028 (0x0028 - 0x0000)
struct BP_GameActionTriggerZone_C_BindGameActionExecutor final
{
public:
	TDelegate<void(class UGameAction* GameAction)> K2Node_CreateDelegate_OutputDelegate;             // 0x0000(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_BindGameActionExecutor) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_BindGameActionExecutor");
static_assert(sizeof(BP_GameActionTriggerZone_C_BindGameActionExecutor) == 0x000028, "Wrong size on BP_GameActionTriggerZone_C_BindGameActionExecutor");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindGameActionExecutor, K2Node_CreateDelegate_OutputDelegate) == 0x000000, "Member 'BP_GameActionTriggerZone_C_BindGameActionExecutor::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindGameActionExecutor, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_GameActionTriggerZone_C_BindGameActionExecutor::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindGameActionExecutor, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000018, "Member 'BP_GameActionTriggerZone_C_BindGameActionExecutor::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindGameActionExecutor, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_GameActionTriggerZone_C_BindGameActionExecutor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.BindAllTriggerComponents
// 0x0050 (0x0050 - 0x0000)
struct BP_GameActionTriggerZone_C_BindAllTriggerComponents final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate; // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate_1; // 0x001C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CallFunc_K2_GetComponentsByClass_ReturnValue;      // 0x0040(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_GameActionTriggerZone_C_BindAllTriggerComponents) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_BindAllTriggerComponents");
static_assert(sizeof(BP_GameActionTriggerZone_C_BindAllTriggerComponents) == 0x000050, "Wrong size on BP_GameActionTriggerZone_C_BindAllTriggerComponents");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, K2Node_CreateDelegate_OutputDelegate_1) == 0x00001C, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, CallFunc_Less_IntInt_ReturnValue) == 0x00003C, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_BindAllTriggerComponents, CallFunc_K2_GetComponentsByClass_ReturnValue) == 0x000040, "Member 'BP_GameActionTriggerZone_C_BindAllTriggerComponents::CallFunc_K2_GetComponentsByClass_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.GetInteractionLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_GameActionTriggerZone_C_GetInteractionLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_GetInteractionLocation) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_GetInteractionLocation");
static_assert(sizeof(BP_GameActionTriggerZone_C_GetInteractionLocation) == 0x000030, "Wrong size on BP_GameActionTriggerZone_C_GetInteractionLocation");
static_assert(offsetof(BP_GameActionTriggerZone_C_GetInteractionLocation, Location) == 0x000000, "Member 'BP_GameActionTriggerZone_C_GetInteractionLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_GetInteractionLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_GetInteractionLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_GameActionTriggerZone.BP_GameActionTriggerZone_C.GetInteractionFeedbackLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation) == 0x000008, "Wrong alignment on BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation");
static_assert(sizeof(BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation) == 0x000030, "Wrong size on BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation");
static_assert(offsetof(BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation, Location) == 0x000000, "Member 'BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_GameActionTriggerZone_C_GetInteractionFeedbackLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

}

