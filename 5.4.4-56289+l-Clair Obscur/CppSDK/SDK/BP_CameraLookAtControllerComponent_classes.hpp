#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraLookAtControllerComponent

#include "Basic.hpp"

#include "S_CameraLookAtRequest_structs.hpp"
#include "E_LookAtUpdateStep_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_LookAtCameraParameters_structs.hpp"
#include "E_jRPG_CharacterWorldCapability_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_CameraLookAtControllerComponent.BP_CameraLookAtControllerComponent_C
// 0x00D8 (0x0178 - 0x00A0)
class UBP_CameraLookAtControllerComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMulticastInlineDelegate<void()>              OnLookAtStarted;                                   // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnLookAtFinished;                                  // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FS_CameraLookAtRequest                 LookAtRequest;                                     // 0x00C8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class AActor*                                 ActorToLookAtReference;                            // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             OwnerAsCharacterWorld;                             // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_LookAtCameraParameters              InitialCameraValues;                               // 0x0108(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialCameraRotation;                             // 0x0130(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               InitialSpringArmRotation;                          // 0x0148(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	double                                        AccumulatedTime;                                   // 0x0160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionCurveMaxTime;                            // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasCameraInputsEnable;                             // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_LookAtUpdateStep                            LookAtUpdateStep;                                  // 0x0171(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	double ComputeAlpha();
	void ExecuteUbergraph_BP_CameraLookAtControllerComponent(int32 EntryPoint);
	void FinishLookAt();
	void IsLookAtRequestValid(const struct FS_CameraLookAtRequest& LookAtRequest_0, bool* IsValid);
	bool IsPerformingLookAt();
	void OnLoaded_E108BA93448EE7FC170BF68270B157D0(class UObject* Loaded);
	void PrepareCameraForLookAtAndCacheValues();
	void PrepareForLookAt();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void RequestLookAt(const struct FS_CameraLookAtRequest& LookAtRequest_0);
	void SetCameraInputsEnable(bool Enable);
	void UpdateAccumulatedTime(double DeltaSeconds);
	void UpdateLookAt(double DeltaSeconds);
	void UpdateLookAtRotation(double Alpha);
	void UpdateLookAtTransition();
	void UpdateLookAtUpdateStep();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_CameraLookAtControllerComponent_C">();
	}
	static class UBP_CameraLookAtControllerComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_CameraLookAtControllerComponent_C>();
	}
};
static_assert(alignof(UBP_CameraLookAtControllerComponent_C) == 0x000008, "Wrong alignment on UBP_CameraLookAtControllerComponent_C");
static_assert(sizeof(UBP_CameraLookAtControllerComponent_C) == 0x000178, "Wrong size on UBP_CameraLookAtControllerComponent_C");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_CameraLookAtControllerComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, OnLookAtStarted) == 0x0000A8, "Member 'UBP_CameraLookAtControllerComponent_C::OnLookAtStarted' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, OnLookAtFinished) == 0x0000B8, "Member 'UBP_CameraLookAtControllerComponent_C::OnLookAtFinished' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, LookAtRequest) == 0x0000C8, "Member 'UBP_CameraLookAtControllerComponent_C::LookAtRequest' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, ActorToLookAtReference) == 0x0000F8, "Member 'UBP_CameraLookAtControllerComponent_C::ActorToLookAtReference' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, OwnerAsCharacterWorld) == 0x000100, "Member 'UBP_CameraLookAtControllerComponent_C::OwnerAsCharacterWorld' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, InitialCameraValues) == 0x000108, "Member 'UBP_CameraLookAtControllerComponent_C::InitialCameraValues' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, InitialCameraRotation) == 0x000130, "Member 'UBP_CameraLookAtControllerComponent_C::InitialCameraRotation' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, InitialSpringArmRotation) == 0x000148, "Member 'UBP_CameraLookAtControllerComponent_C::InitialSpringArmRotation' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, AccumulatedTime) == 0x000160, "Member 'UBP_CameraLookAtControllerComponent_C::AccumulatedTime' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, TransitionCurveMaxTime) == 0x000168, "Member 'UBP_CameraLookAtControllerComponent_C::TransitionCurveMaxTime' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, HasCameraInputsEnable) == 0x000170, "Member 'UBP_CameraLookAtControllerComponent_C::HasCameraInputsEnable' has a wrong offset!");
static_assert(offsetof(UBP_CameraLookAtControllerComponent_C, LookAtUpdateStep) == 0x000171, "Member 'UBP_CameraLookAtControllerComponent_C::LookAtUpdateStep' has a wrong offset!");

}

