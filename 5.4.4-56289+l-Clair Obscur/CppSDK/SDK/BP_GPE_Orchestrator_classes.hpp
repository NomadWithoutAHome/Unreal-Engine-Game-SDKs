#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_Orchestrator

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_GPE_OrchestratorMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_Orchestrator.BP_GPE_Orchestrator_C
// 0x0040 (0x02D0 - 0x0290)
class ABP_GPE_Orchestrator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GPE_IndexSelectorComponent_C*       BP_GPE_IndexSelectorComponent;                     // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GPE_InternalActivationComponent_C*  BP_GPEInternalActivationComponent;                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GPE_DebugComponent_C*               BP_GPEDebugComponent;                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    Billboard;                                         // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FGPEInterfacesReferences               GameplayElementsToActivate;                        // 0x02B8(0x0010)(Edit, BlueprintVisible)
	E_GPE_OrchestratorMode                        Mode;                                              // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ActivateGPE_AllAtOnce;                             // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ResetCurrentGPE_OrderOnDeactivate;                 // 0x02CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Activate_GPEInternal(TScriptInterface<class IBPI_GPE_Interface_C> GPE);
	void BndEvt__BP_GPE_Orchestrator_BP_GPEInternalActivationComponent_K2Node_ComponentBoundEvent_0_OnActivationChanged__DelegateSignature(bool Activated);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void DeactivateGPEInternal(TScriptInterface<class IBPI_GPE_Interface_C> GPE);
	void ExecuteUbergraph_BP_GPE_Orchestrator(int32 EntryPoint);
	void GPETrigger_GetGameplayElementsToActivate(struct FGPEInterfacesReferences* GameplayElementsToActivate_0);
	void OnTickOrchestrator();
	void ProcessDeactivateOrchestrator(class UBP_GPE_InternalActivationComponent_C* GPE);
	void ProcessTickOrchestrator(class UBP_GPE_InternalActivationComponent_C* GPE);
	void ReceiveBeginPlay();
	void UserConstructionScript();

	void GPE_GetActivationComponent(class UBP_GPE_InternalActivationComponent_C** ActivationComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_Orchestrator_C">();
	}
	static class ABP_GPE_Orchestrator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPE_Orchestrator_C>();
	}
};
static_assert(alignof(ABP_GPE_Orchestrator_C) == 0x000008, "Wrong alignment on ABP_GPE_Orchestrator_C");
static_assert(sizeof(ABP_GPE_Orchestrator_C) == 0x0002D0, "Wrong size on ABP_GPE_Orchestrator_C");
static_assert(offsetof(ABP_GPE_Orchestrator_C, UberGraphFrame) == 0x000290, "Member 'ABP_GPE_Orchestrator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, BP_GPE_IndexSelectorComponent) == 0x000298, "Member 'ABP_GPE_Orchestrator_C::BP_GPE_IndexSelectorComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, BP_GPEInternalActivationComponent) == 0x0002A0, "Member 'ABP_GPE_Orchestrator_C::BP_GPEInternalActivationComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, BP_GPEDebugComponent) == 0x0002A8, "Member 'ABP_GPE_Orchestrator_C::BP_GPEDebugComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, Billboard) == 0x0002B0, "Member 'ABP_GPE_Orchestrator_C::Billboard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, GameplayElementsToActivate) == 0x0002B8, "Member 'ABP_GPE_Orchestrator_C::GameplayElementsToActivate' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, Mode) == 0x0002C8, "Member 'ABP_GPE_Orchestrator_C::Mode' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, ActivateGPE_AllAtOnce) == 0x0002C9, "Member 'ABP_GPE_Orchestrator_C::ActivateGPE_AllAtOnce' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Orchestrator_C, ResetCurrentGPE_OrderOnDeactivate) == 0x0002CA, "Member 'ABP_GPE_Orchestrator_C::ResetCurrentGPE_OrderOnDeactivate' has a wrong offset!");

}

