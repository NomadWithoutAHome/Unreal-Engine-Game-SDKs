#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemFilterAbstract_ItemType

#include "Basic.hpp"

#include "E_jRPG_ItemType_structs.hpp"


namespace SDK::Params
{

// Function BP_ItemFilterAbstract_ItemType.BP_ItemFilterAbstract_ItemType_C.GetFilteredTypes
// 0x0010 (0x0010 - 0x0000)
struct BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes final
{
public:
	TArray<E_jRPG_ItemType>                       FilteredType;                                      // 0x0000(0x0010)(Parm, OutParm)
};
static_assert(alignof(BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes) == 0x000008, "Wrong alignment on BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes");
static_assert(sizeof(BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes) == 0x000010, "Wrong size on BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes, FilteredType) == 0x000000, "Member 'BP_ItemFilterAbstract_ItemType_C_GetFilteredTypes::FilteredType' has a wrong offset!");

// Function BP_ItemFilterAbstract_ItemType.BP_ItemFilterAbstract_ItemType_C.ExecuteFilter
// 0x0080 (0x0080 - 0x0000)
struct BP_ItemFilterAbstract_ItemType_C_ExecuteFilter final
{
public:
	TArray<class UBP_ItemInstance_Base_C*>        ItemInstances;                                     // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class UBP_ItemInstance_Base_C*>        FilteredItemInstances;                             // 0x0010(0x0010)(Parm, OutParm)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemInstance_Base_C*                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_jRPG_ItemType                               CallFunc_GetItemType_Item_Type;                    // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_ItemInstance_Base_C*>        Temp_wildcard_Temp_buffer_array_Variable;          // 0x0038(0x0010)(ConstParm, ReferenceParm)
	TArray<class UBP_ItemInstance_Base_C*>        Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable; // 0x0048(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_jRPG_ItemType>                       CallFunc_GetFilteredTypes_FilteredType;            // 0x0060(0x0010)(ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_76[0x2];                                       // 0x0076(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter) == 0x000008, "Wrong alignment on BP_ItemFilterAbstract_ItemType_C_ExecuteFilter");
static_assert(sizeof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter) == 0x000080, "Wrong size on BP_ItemFilterAbstract_ItemType_C_ExecuteFilter");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, ItemInstances) == 0x000000, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::ItemInstances' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, FilteredItemInstances) == 0x000010, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::FilteredItemInstances' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_GetItemType_Item_Type) == 0x000030, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_GetItemType_Item_Type' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, Temp_wildcard_Temp_buffer_array_Variable) == 0x000038, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::Temp_wildcard_Temp_buffer_array_Variable' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable) == 0x000048, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_Array_Add_ReturnValue) == 0x000058, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_GetFilteredTypes_FilteredType) == 0x000060, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_GetFilteredTypes_FilteredType' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, Temp_int_Loop_Counter_Variable) == 0x000070, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_Array_Contains_ReturnValue) == 0x000074, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_Less_IntInt_ReturnValue) == 0x000075, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_ItemFilterAbstract_ItemType_C_ExecuteFilter, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'BP_ItemFilterAbstract_ItemType_C_ExecuteFilter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

}

