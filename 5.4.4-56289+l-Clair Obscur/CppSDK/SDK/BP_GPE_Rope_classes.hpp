#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_Rope

#include "Basic.hpp"

#include "S_Interaction_Parameters_structs.hpp"
#include "E_RopeMovementDirection_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_Rope.BP_GPE_Rope_C
// 0x0150 (0x03E0 - 0x0290)
class ABP_GPE_Rope_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USphereComponent*                       TopTriggerSphereBig;                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BottomTriggerSphereBig;                            // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Loop;                                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      FX_GPE_Rope;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TopPlayerStartPosition;                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Bottom_PlayerStartPosition;                        // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DragAndDropPoint;                                  // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   TopCapsulePoint;                                   // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   BottomCapsulePoint;                                // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GPE_SerializableComponent_C*        BP_GPE_SerializableComponent;                      // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      TopCapsule;                                        // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      BottomCapsule;                                     // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        TopArrow;                                          // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        BottomArrow;                                       // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        TopInteractionPromptLocation;                      // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       TopTriggerSphere;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        BottomInteractionPromptLocation;                   // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       BottomTriggerSphere;                               // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_GPE_InternalActivationComponent_C*  BP_GPE_InternalActivationComponent;                // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   PivotPointSphere;                                  // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       CharacterTrajectorySpline;                         // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0340(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         SetFXHeight_0_to_1_18FEACBC46C3B0C41BA7B58769DE6C50; // 0x0348(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SetFXHeight__Direction_18FEACBC46C3B0C41BA7B58769DE6C50; // 0x034C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34D[0x3];                                      // 0x034D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SetFXHeight;                                       // 0x0350(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActivatedByDefault;                              // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Interaction_Parameters              InteractionParameters;                             // 0x0360(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash)
	E_RopeMovementDirection                       CurrentDirection;                                  // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CurveRadius;                                       // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            SplineMesh;                                        // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        SectionLength;                                     // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               ForwardAxis;                                       // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_Interaction_Parameters              ActivationParameters;                              // 0x03A8(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash)
	bool                                          CanBeActivatedFromBottom;                          // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeActivatedFromTop;                             // 0x03C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InteractionRegistered;                             // 0x03CA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CB[0x5];                                      // 0x03CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_World_C*             CurrentUser;                                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          WasActivatedByBeginPlay;                           // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ApplySplineRadius();
	void BndEvt__BP_GPE_Rope_BottomTriggerSphereBig_K2Node_ComponentBoundEvent_4_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_GPE_Rope_BP_GPE_InternalActivationComponent_K2Node_ComponentBoundEvent_6_OnActivationChanged__DelegateSignature(bool Activated);
	void BndEvt__BP_GPE_Rope_BP_GPE_InternalActivationComponent_K2Node_ComponentBoundEvent_7_OnInstantActivationChanged__DelegateSignature(bool Activated);
	void BndEvt__BP_GPE_Rope_EntryTriggerSphere_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_GPE_Rope_EntryTriggerSphere_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_GPE_Rope_TopTriggerSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_GPE_Rope_TopTriggerSphere_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_GPE_Rope_TopTriggerSphereBig_K2Node_ComponentBoundEvent_5_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void CanInteractWithMount(bool* CanInteract);
	void CreateSplineMesh();
	void ExecuteUbergraph_BP_GPE_Rope(int32 EntryPoint);
	void GetEndPositionAndTangent(int32 Index_0, struct FVector* position, struct FVector* Tangent);
	void GetInteractionPromptParams(struct FFPromptParams* PromptParams);
	double GetRopeFXHeight();
	void GetStartPositionAndTangent(int32 Index_0, struct FVector* position, struct FVector* Tangent);
	void IsInteractionAvailable(bool* Available);
	void IsInteractionDone(bool* Done);
	void OnEnemyBattleStateLoaded(bool BattleState);
	void OnInteractionDisabled();
	void OnInteractionEnabled();
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnObjectInteractionStateLoaded(bool InteractionState);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RegisterInteractionIfPossible();
	void SetCurrentUser(class ABP_jRPG_Character_World_C* Character);
	void SetFXHeight__FinishedFunc();
	void SetFXHeight__UpdateFunc();
	void SetupFXParameters();
	bool ShouldHideDistantInteraction();
	void SpawnActivationExplosionFX(const struct FVector& Location);
	void UnregisterInteractionIfNeeded();
	void UpdateArrowsColor();
	void UpdateEntryPointsLocation();
	void UpdateFXRope(bool Instant);
	void UpdateSplineMeshesVisibility();
	void UpdateSplinePointLocationAtIndex(int32 Index_0);
	void UpdateSplinePointLocationAtIndex0();
	void UpdateSplinePointLocationAtIndex1();
	void UpdateSplinePointLocationAtIndex2();
	void UpdateSplinePointLocationAtIndex3();
	void UpdateState(bool Instant);
	void UpdateStateInstant();
	void UserConstructionScript();

	void GetInteractionFeedbackLocation(struct FVector* Location) const;
	void GetInteractionLocation(struct FVector* Location) const;
	void GPE_GetActivationComponent(class UBP_GPE_InternalActivationComponent_C** ActivationComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_Rope_C">();
	}
	static class ABP_GPE_Rope_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPE_Rope_C>();
	}
};
static_assert(alignof(ABP_GPE_Rope_C) == 0x000008, "Wrong alignment on ABP_GPE_Rope_C");
static_assert(sizeof(ABP_GPE_Rope_C) == 0x0003E0, "Wrong size on ABP_GPE_Rope_C");
static_assert(offsetof(ABP_GPE_Rope_C, UberGraphFrame) == 0x000290, "Member 'ABP_GPE_Rope_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopTriggerSphereBig) == 0x000298, "Member 'ABP_GPE_Rope_C::TopTriggerSphereBig' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BottomTriggerSphereBig) == 0x0002A0, "Member 'ABP_GPE_Rope_C::BottomTriggerSphereBig' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, AC_Loop) == 0x0002A8, "Member 'ABP_GPE_Rope_C::AC_Loop' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, FX_GPE_Rope) == 0x0002B0, "Member 'ABP_GPE_Rope_C::FX_GPE_Rope' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopPlayerStartPosition) == 0x0002B8, "Member 'ABP_GPE_Rope_C::TopPlayerStartPosition' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, Bottom_PlayerStartPosition) == 0x0002C0, "Member 'ABP_GPE_Rope_C::Bottom_PlayerStartPosition' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, DragAndDropPoint) == 0x0002C8, "Member 'ABP_GPE_Rope_C::DragAndDropPoint' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopCapsulePoint) == 0x0002D0, "Member 'ABP_GPE_Rope_C::TopCapsulePoint' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BottomCapsulePoint) == 0x0002D8, "Member 'ABP_GPE_Rope_C::BottomCapsulePoint' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BP_GPE_SerializableComponent) == 0x0002E0, "Member 'ABP_GPE_Rope_C::BP_GPE_SerializableComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopCapsule) == 0x0002E8, "Member 'ABP_GPE_Rope_C::TopCapsule' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BottomCapsule) == 0x0002F0, "Member 'ABP_GPE_Rope_C::BottomCapsule' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopArrow) == 0x0002F8, "Member 'ABP_GPE_Rope_C::TopArrow' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BottomArrow) == 0x000300, "Member 'ABP_GPE_Rope_C::BottomArrow' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopInteractionPromptLocation) == 0x000308, "Member 'ABP_GPE_Rope_C::TopInteractionPromptLocation' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, TopTriggerSphere) == 0x000310, "Member 'ABP_GPE_Rope_C::TopTriggerSphere' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BottomInteractionPromptLocation) == 0x000318, "Member 'ABP_GPE_Rope_C::BottomInteractionPromptLocation' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BottomTriggerSphere) == 0x000320, "Member 'ABP_GPE_Rope_C::BottomTriggerSphere' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, BP_GPE_InternalActivationComponent) == 0x000328, "Member 'ABP_GPE_Rope_C::BP_GPE_InternalActivationComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, PivotPointSphere) == 0x000330, "Member 'ABP_GPE_Rope_C::PivotPointSphere' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, CharacterTrajectorySpline) == 0x000338, "Member 'ABP_GPE_Rope_C::CharacterTrajectorySpline' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, DefaultSceneRoot) == 0x000340, "Member 'ABP_GPE_Rope_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, SetFXHeight_0_to_1_18FEACBC46C3B0C41BA7B58769DE6C50) == 0x000348, "Member 'ABP_GPE_Rope_C::SetFXHeight_0_to_1_18FEACBC46C3B0C41BA7B58769DE6C50' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, SetFXHeight__Direction_18FEACBC46C3B0C41BA7B58769DE6C50) == 0x00034C, "Member 'ABP_GPE_Rope_C::SetFXHeight__Direction_18FEACBC46C3B0C41BA7B58769DE6C50' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, SetFXHeight) == 0x000350, "Member 'ABP_GPE_Rope_C::SetFXHeight' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, IsActivatedByDefault) == 0x000358, "Member 'ABP_GPE_Rope_C::IsActivatedByDefault' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, InteractionParameters) == 0x000360, "Member 'ABP_GPE_Rope_C::InteractionParameters' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, CurrentDirection) == 0x000380, "Member 'ABP_GPE_Rope_C::CurrentDirection' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, CurveRadius) == 0x000388, "Member 'ABP_GPE_Rope_C::CurveRadius' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, SplineMesh) == 0x000390, "Member 'ABP_GPE_Rope_C::SplineMesh' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, SectionLength) == 0x000398, "Member 'ABP_GPE_Rope_C::SectionLength' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, ForwardAxis) == 0x0003A0, "Member 'ABP_GPE_Rope_C::ForwardAxis' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, ActivationParameters) == 0x0003A8, "Member 'ABP_GPE_Rope_C::ActivationParameters' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, CanBeActivatedFromBottom) == 0x0003C8, "Member 'ABP_GPE_Rope_C::CanBeActivatedFromBottom' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, CanBeActivatedFromTop) == 0x0003C9, "Member 'ABP_GPE_Rope_C::CanBeActivatedFromTop' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, InteractionRegistered) == 0x0003CA, "Member 'ABP_GPE_Rope_C::InteractionRegistered' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, CurrentUser) == 0x0003D0, "Member 'ABP_GPE_Rope_C::CurrentUser' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Rope_C, WasActivatedByBeginPlay) == 0x0003D8, "Member 'ABP_GPE_Rope_C::WasActivatedByBeginPlay' has a wrong offset!");

}

