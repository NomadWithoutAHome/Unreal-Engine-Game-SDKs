#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_World_Audio_Component

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_RuntimeSoundDataWithDelay_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_World_Audio_Component.BP_World_Audio_Component_C
// 0x0030 (0x00D0 - 0x00A0)
class UBP_World_Audio_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          DEBUG_DrawEnable;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinRatioAttenuationAroundPlayer;                   // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaxRatioAttenuationAroundPlayer;                   // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_RuntimeSoundDataWithDelay>   RFXRuntimeData;                                    // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ClearRFXData();
	void ComputeRFXLocation(class USoundBase* Sound, struct FVector* Location);
	void ExecuteUbergraph_BP_World_Audio_Component(int32 EntryPoint);
	void OnRFXTimerElapsed();
	void PauseAllRFXs();
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void StartRFXTimers();
	void StopRFX();
	void UnpauseAllRFXs();
	void UpdateFullAmbienceFromAsset(class UBP_DataAsset_Ambience_C* Ambience);
	void UpdateRFXData(class UBP_DataAsset_Ambience_C* AmbianceAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_World_Audio_Component_C">();
	}
	static class UBP_World_Audio_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_World_Audio_Component_C>();
	}
};
static_assert(alignof(UBP_World_Audio_Component_C) == 0x000008, "Wrong alignment on UBP_World_Audio_Component_C");
static_assert(sizeof(UBP_World_Audio_Component_C) == 0x0000D0, "Wrong size on UBP_World_Audio_Component_C");
static_assert(offsetof(UBP_World_Audio_Component_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_World_Audio_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_World_Audio_Component_C, DEBUG_DrawEnable) == 0x0000A8, "Member 'UBP_World_Audio_Component_C::DEBUG_DrawEnable' has a wrong offset!");
static_assert(offsetof(UBP_World_Audio_Component_C, MinRatioAttenuationAroundPlayer) == 0x0000B0, "Member 'UBP_World_Audio_Component_C::MinRatioAttenuationAroundPlayer' has a wrong offset!");
static_assert(offsetof(UBP_World_Audio_Component_C, MaxRatioAttenuationAroundPlayer) == 0x0000B8, "Member 'UBP_World_Audio_Component_C::MaxRatioAttenuationAroundPlayer' has a wrong offset!");
static_assert(offsetof(UBP_World_Audio_Component_C, RFXRuntimeData) == 0x0000C0, "Member 'UBP_World_Audio_Component_C::RFXRuntimeData' has a wrong offset!");

}

