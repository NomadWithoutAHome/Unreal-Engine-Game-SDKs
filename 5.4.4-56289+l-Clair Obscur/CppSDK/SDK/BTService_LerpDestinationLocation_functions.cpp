#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTService_LerpDestinationLocation

#include "Basic.hpp"

#include "BTService_LerpDestinationLocation_classes.hpp"
#include "BTService_LerpDestinationLocation_parameters.hpp"


namespace SDK
{

// Function BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C.ExecuteUbergraph_BTService_LerpDestinationLocation
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTService_LerpDestinationLocation_C::ExecuteUbergraph_BTService_LerpDestinationLocation(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_LerpDestinationLocation_C", "ExecuteUbergraph_BTService_LerpDestinationLocation");

	Params::BTService_LerpDestinationLocation_C_ExecuteUbergraph_BTService_LerpDestinationLocation Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C.GetDistanceBetweenCurrentAndNextTargetLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBTService_LerpDestinationLocation_C::GetDistanceBetweenCurrentAndNextTargetLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_LerpDestinationLocation_C", "GetDistanceBetweenCurrentAndNextTargetLocation");

	Params::BTService_LerpDestinationLocation_C_GetDistanceBetweenCurrentAndNextTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C.GetMaxSpeedFromPawn
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double UBTService_LerpDestinationLocation_C::GetMaxSpeedFromPawn(class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_LerpDestinationLocation_C", "GetMaxSpeedFromPawn");

	Params::BTService_LerpDestinationLocation_C_GetMaxSpeedFromPawn Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C.ReceiveDeactivationAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTService_LerpDestinationLocation_C::ReceiveDeactivationAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_LerpDestinationLocation_C", "ReceiveDeactivationAI");

	Params::BTService_LerpDestinationLocation_C_ReceiveDeactivationAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C.ReceiveTickAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTService_LerpDestinationLocation_C::ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_LerpDestinationLocation_C", "ReceiveTickAI");

	Params::BTService_LerpDestinationLocation_C_ReceiveTickAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;
	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTService_LerpDestinationLocation.BTService_LerpDestinationLocation_C.UpdateLerpParameters
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   ShouldLerp                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTService_LerpDestinationLocation_C::UpdateLerpParameters(class APawn* ControlledPawn, bool* ShouldLerp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTService_LerpDestinationLocation_C", "UpdateLerpParameters");

	Params::BTService_LerpDestinationLocation_C_UpdateLerpParameters Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldLerp != nullptr)
		*ShouldLerp = Parms.ShouldLerp;
}

}

