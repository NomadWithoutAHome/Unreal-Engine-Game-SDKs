#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponSkin

#include "Basic.hpp"

#include "BP_WeaponSkin_classes.hpp"
#include "BP_WeaponSkin_parameters.hpp"


namespace SDK
{

// Function BP_WeaponSkin.BP_WeaponSkin_C.GetAllTrailsOnWeaponL
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UNiagaraComponent*>*       TrailsArrayL                                           (Parm, OutParm, ContainsInstancedReference)

void ABP_WeaponSkin_C::GetAllTrailsOnWeaponL(TArray<class UNiagaraComponent*>* TrailsArrayL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "GetAllTrailsOnWeaponL");

	Params::BP_WeaponSkin_C_GetAllTrailsOnWeaponL Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TrailsArrayL != nullptr)
		*TrailsArrayL = std::move(Parms.TrailsArrayL);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.GetAllTrailsOnWeaponR
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UNiagaraComponent*>*       TrailsArrayR                                           (Parm, OutParm, ContainsInstancedReference)

void ABP_WeaponSkin_C::GetAllTrailsOnWeaponR(TArray<class UNiagaraComponent*>* TrailsArrayR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "GetAllTrailsOnWeaponR");

	Params::BP_WeaponSkin_C_GetAllTrailsOnWeaponR Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TrailsArrayR != nullptr)
		*TrailsArrayR = std::move(Parms.TrailsArrayR);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeaponSkin_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.EditorCheckData
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeaponSkin_C::EditorCheckData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "EditorCheckData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.EditorValidatePartsGetters
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   HasErrors                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class FString>*                  Errors                                                 (Parm, OutParm)

void ABP_WeaponSkin_C::EditorValidatePartsGetters(bool* HasErrors, TArray<class FString>* Errors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "EditorValidatePartsGetters");

	Params::BP_WeaponSkin_C_EditorValidatePartsGetters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasErrors != nullptr)
		*HasErrors = Parms.HasErrors;

	if (Errors != nullptr)
		*Errors = std::move(Parms.Errors);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SpawnFXOnWeaponRParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeaponSkin_C::SpawnFXOnWeaponRParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SpawnFXOnWeaponRParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SpawnFXOnWeaponLParts
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeaponSkin_C::SpawnFXOnWeaponLParts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SpawnFXOnWeaponLParts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.GetAllWeaponLParts
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMeshComponent*>*          MeshComponentL                                         (Parm, OutParm, ContainsInstancedReference)

void ABP_WeaponSkin_C::GetAllWeaponLParts(TArray<class UMeshComponent*>* MeshComponentL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "GetAllWeaponLParts");

	Params::BP_WeaponSkin_C_GetAllWeaponLParts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComponentL != nullptr)
		*MeshComponentL = std::move(Parms.MeshComponentL);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.GetAllWeaponRParts
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMeshComponent*>*          MeshComponentR                                         (Parm, OutParm, ContainsInstancedReference)

void ABP_WeaponSkin_C::GetAllWeaponRParts(TArray<class UMeshComponent*>* MeshComponentR)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "GetAllWeaponRParts");

	Params::BP_WeaponSkin_C_GetAllWeaponRParts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MeshComponentR != nullptr)
		*MeshComponentR = std::move(Parms.MeshComponentR);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.WeaponSummon_Instant
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Unsummon                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::WeaponSummon_Instant(bool R, bool L, bool Unsummon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "WeaponSummon_Instant");

	Params::BP_WeaponSkin_C_WeaponSummon_Instant Parms{};

	Parms.R = R;
	Parms.L = L;
	Parms.Unsummon = Unsummon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.GetWeaponR_VelocityAndSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::GetWeaponR_VelocityAndSpeed(struct FVector* Velocity, double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "GetWeaponR_VelocityAndSpeed");

	Params::BP_WeaponSkin_C_GetWeaponR_VelocityAndSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.GetWeaponL_VelocityAndSpeed
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::GetWeaponL_VelocityAndSpeed(struct FVector* Velocity, double* Speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "GetWeaponL_VelocityAndSpeed");

	Params::BP_WeaponSkin_C_GetWeaponL_VelocityAndSpeed Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (Speed != nullptr)
		*Speed = Parms.Speed;
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetGlow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Glow_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetGlow(double Glow_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetGlow");

	Params::BP_WeaponSkin_C_SetGlow Parms{};

	Parms.Glow_0 = Glow_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetEmissive Color
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Emissive_Color_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetEmissive_Color(const struct FLinearColor& Emissive_Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetEmissive Color");

	Params::BP_WeaponSkin_C_SetEmissive_Color Parms{};

	Parms.Emissive_Color_0 = std::move(Emissive_Color_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.UpdateVisualParameters
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_WeaponSkin_C::UpdateVisualParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "UpdateVisualParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetColor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetColor(const struct FLinearColor& Color_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetColor");

	Params::BP_WeaponSkin_C_SetColor Parms{};

	Parms.Color_0 = std::move(Color_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.UpdatePermeate
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMesh                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EAttackType                             PermeateType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPermeateIntensity                      PermeateIntensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TrailWidth                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::UpdatePermeate(class USkeletalMeshComponent* SkeletalMesh, EAttackType PermeateType, EPermeateIntensity PermeateIntensity, float TrailWidth)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "UpdatePermeate");

	Params::BP_WeaponSkin_C_UpdatePermeate Parms{};

	Parms.SkeletalMesh = SkeletalMesh;
	Parms.PermeateType = PermeateType;
	Parms.PermeateIntensity = PermeateIntensity;
	Parms.TrailWidth = TrailWidth;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.IfNotLinkedUpdateColorR
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              EmissiveColor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::IfNotLinkedUpdateColorR(const struct FLinearColor& Color_0, const struct FLinearColor& EmissiveColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "IfNotLinkedUpdateColorR");

	Params::BP_WeaponSkin_C_IfNotLinkedUpdateColorR Parms{};

	Parms.Color_0 = std::move(Color_0);
	Parms.EmissiveColor = std::move(EmissiveColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.IfNotLinkedUpdateColorL
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FLinearColor&              Color_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              EmissiveColor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::IfNotLinkedUpdateColorL(const struct FLinearColor& Color_0, const struct FLinearColor& EmissiveColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "IfNotLinkedUpdateColorL");

	Params::BP_WeaponSkin_C_IfNotLinkedUpdateColorL Parms{};

	Parms.Color_0 = std::move(Color_0);
	Parms.EmissiveColor = std::move(EmissiveColor);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetWeaponTrailParameter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UFXSystemComponent*>&      Trail                                                  (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_WeaponSkin_C::SetWeaponTrailParameter(TArray<class UFXSystemComponent*>& Trail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetWeaponTrailParameter");

	Params::BP_WeaponSkin_C_SetWeaponTrailParameter Parms{};

	Parms.Trail = std::move(Trail);

	UObject::ProcessEvent(Func, &Parms);

	Trail = std::move(Parms.Trail);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetWeaponMaterialParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMeshComponent*                   weapon                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetWeaponMaterialParameter(class UMeshComponent* weapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetWeaponMaterialParameter");

	Params::BP_WeaponSkin_C_SetWeaponMaterialParameter Parms{};

	Parms.weapon = weapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.D__FinishedFunc
// (BlueprintEvent)

void ABP_WeaponSkin_C::D__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "D__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.D__UpdateFunc
// (BlueprintEvent)

void ABP_WeaponSkin_C::D__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "D__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.D__FinishedFunc
// (BlueprintEvent)

void ABP_WeaponSkin_C::D__FinishedFunc_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "D__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.D__UpdateFunc
// (BlueprintEvent)

void ABP_WeaponSkin_C::D__UpdateFunc_0()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "D__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.RotateWeapon__FinishedFunc
// (BlueprintEvent)

void ABP_WeaponSkin_C::RotateWeapon__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "RotateWeapon__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.RotateWeapon__UpdateFunc
// (BlueprintEvent)

void ABP_WeaponSkin_C::RotateWeapon__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "RotateWeapon__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.UpdatePermeateFeedback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             PermeateType                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPermeateIntensity                      PermeateIntensity                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::UpdatePermeateFeedback(EAttackType PermeateType, EPermeateIntensity PermeateIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "UpdatePermeateFeedback");

	Params::BP_WeaponSkin_C_UpdatePermeateFeedback Parms{};

	Parms.PermeateType = PermeateType;
	Parms.PermeateIntensity = PermeateIntensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.ActivateTrails
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              AllTrails                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::ActivateTrails(const bool AllTrails, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "ActivateTrails");

	Params::BP_WeaponSkin_C_ActivateTrails Parms{};

	Parms.AllTrails = AllTrails;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.DeactivateTrails
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              AllTrails                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::DeactivateTrails(const bool AllTrails, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "DeactivateTrails");

	Params::BP_WeaponSkin_C_DeactivateTrails Parms{};

	Parms.AllTrails = AllTrails;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetSphereInteractionWithCharaHands
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   PositionHandR                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   PositionHandL                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetSphereInteractionWithCharaHands(const struct FVector& PositionHandR, const struct FVector& PositionHandL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetSphereInteractionWithCharaHands");

	Params::BP_WeaponSkin_C_SetSphereInteractionWithCharaHands Parms{};

	Parms.PositionHandR = std::move(PositionHandR);
	Parms.PositionHandL = std::move(PositionHandL);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.ActivateFX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              AllFX                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::ActivateFX(const bool AllFX, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "ActivateFX");

	Params::BP_WeaponSkin_C_ActivateFX Parms{};

	Parms.AllFX = AllFX;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.DeactivateFX
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              AllFX                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::DeactivateFX(const bool AllFX, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "DeactivateFX");

	Params::BP_WeaponSkin_C_DeactivateFX Parms{};

	Parms.AllFX = AllFX;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.WeaponDisappear
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DisappearTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllWeapons                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::WeaponDisappear(double DisappearTime, bool AllWeapons, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "WeaponDisappear");

	Params::BP_WeaponSkin_C_WeaponDisappear Parms{};

	Parms.DisappearTime = DisappearTime;
	Parms.AllWeapons = AllWeapons;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.WeaponAppear
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AppearTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    AllWeapons                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::WeaponAppear(double AppearTime, bool AllWeapons, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "WeaponAppear");

	Params::BP_WeaponSkin_C_WeaponAppear Parms{};

	Parms.AppearTime = AppearTime;
	Parms.AllWeapons = AllWeapons;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.UpdateVisualPermeateFeedback
// (BlueprintCallable, BlueprintEvent)

void ABP_WeaponSkin_C::UpdateVisualPermeateFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "UpdateVisualPermeateFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.D
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::Func_D_0(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "D");

	Params::BP_WeaponSkin_C_Func_D_0 Parms{};

	Parms.IsActive = IsActive;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "ReceiveTick");

	Params::BP_WeaponSkin_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_WeaponSkin_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.RotateWeaponAlongAxis
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const double                            Speed                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Axis                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    WeaponL                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Degree                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::RotateWeaponAlongAxis(const double Speed, const struct FVector& Axis, bool WeaponL, double Degree)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "RotateWeaponAlongAxis");

	Params::BP_WeaponSkin_C_RotateWeaponAlongAxis Parms{};

	Parms.Speed = Speed;
	Parms.Axis = std::move(Axis);
	Parms.WeaponL = WeaponL;
	Parms.Degree = Degree;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetVisibilityOnTrails
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              AllTrails                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetVisibilityOnTrails(const bool AllTrails, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetVisibilityOnTrails");

	Params::BP_WeaponSkin_C_SetVisibilityOnTrails Parms{};

	Parms.AllTrails = AllTrails;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.SetVisibilityOffTrails
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const bool                              AllTrails                                              (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    R                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    L                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::SetVisibilityOffTrails(const bool AllTrails, bool R, bool L)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "SetVisibilityOffTrails");

	Params::BP_WeaponSkin_C_SetVisibilityOffTrails Parms{};

	Parms.AllTrails = AllTrails;
	Parms.R = R;
	Parms.L = L;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_WeaponSkin.BP_WeaponSkin_C.ExecuteUbergraph_BP_WeaponSkin
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_WeaponSkin_C::ExecuteUbergraph_BP_WeaponSkin(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_WeaponSkin_C", "ExecuteUbergraph_BP_WeaponSkin");

	Params::BP_WeaponSkin_C_ExecuteUbergraph_BP_WeaponSkin Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

