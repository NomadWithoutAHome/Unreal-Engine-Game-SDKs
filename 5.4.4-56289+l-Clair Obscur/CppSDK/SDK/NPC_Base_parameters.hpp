#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NPC_Base

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function NPC_Base.NPC_Base_C.Dialog
// 0x0020 (0x0020 - 0x0000)
struct NPC_Base_C_Dialog final
{
public:
	class FName                                   EventId;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SwitchID;                                          // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DialogText;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(NPC_Base_C_Dialog) == 0x000008, "Wrong alignment on NPC_Base_C_Dialog");
static_assert(sizeof(NPC_Base_C_Dialog) == 0x000020, "Wrong size on NPC_Base_C_Dialog");
static_assert(offsetof(NPC_Base_C_Dialog, EventId) == 0x000000, "Member 'NPC_Base_C_Dialog::EventId' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_Dialog, SwitchID) == 0x000008, "Member 'NPC_Base_C_Dialog::SwitchID' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_Dialog, DialogText) == 0x000010, "Member 'NPC_Base_C_Dialog::DialogText' has a wrong offset!");

// Function NPC_Base.NPC_Base_C.ExecuteUbergraph_NPC_Base
// 0x00A0 (0x00A0 - 0x0000)
struct NPC_Base_C_ExecuteUbergraph_NPC_Base final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   K2Node_InputActionEvent_Key;                       // 0x0008(0x0018)(HasGetValueTypeHash)
	ETouchIndex                                   K2Node_InputTouchEvent_FingerIndex_1;              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_InputTouchEvent_Location_1;                 // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETouchIndex                                   K2Node_InputTouchEvent_FingerIndex;                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                K2Node_InputTouchEvent_Location;                   // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETouchIndex                                   Temp_byte_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Temp_struct_Variable;                              // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   K2Node_Event_EventID;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Event_SwitchID;                             // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_Event_DialogText;                           // 0x0090(0x0010)()
};
static_assert(alignof(NPC_Base_C_ExecuteUbergraph_NPC_Base) == 0x000008, "Wrong alignment on NPC_Base_C_ExecuteUbergraph_NPC_Base");
static_assert(sizeof(NPC_Base_C_ExecuteUbergraph_NPC_Base) == 0x0000A0, "Wrong size on NPC_Base_C_ExecuteUbergraph_NPC_Base");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, EntryPoint) == 0x000000, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::EntryPoint' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_InputActionEvent_Key) == 0x000008, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_InputActionEvent_Key' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_InputTouchEvent_FingerIndex_1) == 0x000020, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_InputTouchEvent_FingerIndex_1' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_InputTouchEvent_Location_1) == 0x000028, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_InputTouchEvent_Location_1' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_InputTouchEvent_FingerIndex) == 0x000040, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_InputTouchEvent_FingerIndex' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_InputTouchEvent_Location) == 0x000048, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_InputTouchEvent_Location' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, Temp_byte_Variable) == 0x000060, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, Temp_struct_Variable) == 0x000068, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_Event_EventID) == 0x000080, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_Event_EventID' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_Event_SwitchID) == 0x000088, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_Event_SwitchID' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_ExecuteUbergraph_NPC_Base, K2Node_Event_DialogText) == 0x000090, "Member 'NPC_Base_C_ExecuteUbergraph_NPC_Base::K2Node_Event_DialogText' has a wrong offset!");

// Function NPC_Base.NPC_Base_C.InpActEvt_ResetVR_K2Node_InputActionEvent_0
// 0x0018 (0x0018 - 0x0000)
struct NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0 final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
};
static_assert(alignof(NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0) == 0x000008, "Wrong alignment on NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0");
static_assert(sizeof(NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0) == 0x000018, "Wrong size on NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0");
static_assert(offsetof(NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0, Key) == 0x000000, "Member 'NPC_Base_C_InpActEvt_ResetVR_K2Node_InputActionEvent_0::Key' has a wrong offset!");

// Function NPC_Base.NPC_Base_C.InpTchEvt_Pressed
// 0x0020 (0x0020 - 0x0000)
struct NPC_Base_C_InpTchEvt_Pressed final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPC_Base_C_InpTchEvt_Pressed) == 0x000008, "Wrong alignment on NPC_Base_C_InpTchEvt_Pressed");
static_assert(sizeof(NPC_Base_C_InpTchEvt_Pressed) == 0x000020, "Wrong size on NPC_Base_C_InpTchEvt_Pressed");
static_assert(offsetof(NPC_Base_C_InpTchEvt_Pressed, FingerIndex) == 0x000000, "Member 'NPC_Base_C_InpTchEvt_Pressed::FingerIndex' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_InpTchEvt_Pressed, Location) == 0x000008, "Member 'NPC_Base_C_InpTchEvt_Pressed::Location' has a wrong offset!");

// Function NPC_Base.NPC_Base_C.InpTchEvt_Released
// 0x0020 (0x0020 - 0x0000)
struct NPC_Base_C_InpTchEvt_Released final
{
public:
	ETouchIndex                                   FingerIndex;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(NPC_Base_C_InpTchEvt_Released) == 0x000008, "Wrong alignment on NPC_Base_C_InpTchEvt_Released");
static_assert(sizeof(NPC_Base_C_InpTchEvt_Released) == 0x000020, "Wrong size on NPC_Base_C_InpTchEvt_Released");
static_assert(offsetof(NPC_Base_C_InpTchEvt_Released, FingerIndex) == 0x000000, "Member 'NPC_Base_C_InpTchEvt_Released::FingerIndex' has a wrong offset!");
static_assert(offsetof(NPC_Base_C_InpTchEvt_Released, Location) == 0x000008, "Member 'NPC_Base_C_InpTchEvt_Released::Location' has a wrong offset!");

}

