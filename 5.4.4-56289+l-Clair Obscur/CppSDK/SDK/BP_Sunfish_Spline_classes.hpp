#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sunfish_Spline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Sunfish_Spline.BP_Sunfish_Spline_C
// 0x0178 (0x0408 - 0x0290)
class ABP_Sunfish_Spline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 Sunfish;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Sunfish_Transform;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Sphere_Front;                                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       LookAt_Front;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Speed_Variations__Direction_48216A854F78B698C97F228A748B55D1; // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Speed_Variations;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Distance;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lookat_Front_CurrentDistance;                      // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lookat_Front_Offset;                               // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowLookatSpheres;                                 // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MovementSpeed_Spline;                              // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AnimPlayRate_Min;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DynamicSpeed_SpeedingUp_;                          // 0x0308(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DynamicSpeed_Desired_Speed;                        // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Desired_BlendSpace;                                // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicAnim_Fast_Length;                           // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicAnim_Time_Randomness;                       // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicAnim_Slow_Length;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dynamic_Speed;                                     // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnimPlayRate_Max;                                  // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicSpeed_Speed;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicSpeed_Acceleration;                         // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpace;                                        // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DynamicSpeed_Deceleration;                         // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementSpeed_Min;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MovementSpeed_Max;                                 // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpace_Acceleration;                           // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BlendSpace_Decelaration;                           // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Non_Dynamic_AnimPlayRate;                          // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Non_Dynamic_MovementSpeed;                         // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Non_Dynamic_Anim_Intensity;                        // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pitch;                                             // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TurningAngle;                                      // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Roll_Rotation_Intensity;                           // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Roll_Smoothing_Speed;                              // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TurningBlendSpaceAngle;                            // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rotation_Smoothing_Speed;                          // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Movement_Smoothing_Speed;                          // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale_LengthRatio;                                 // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Scale;                                             // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShowSpline;                                        // 0x03E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USunfish_AnimBP_C*                      Sunfish_AnimBP;                                    // 0x03F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceForTick;                                   // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Toggle_LookAt_Spheres();
	void Speed_Variations__UpdateFunc();
	void Speed_Variations__FinishedFunc();
	void Set_Meshes_initial_Transform();
	void Set_Mesh_to_Distance_along_Spline();
	void Set_LookAt_Front_s_initial_Position();
	void Set_Initial_Speed();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Play_Dynamic_Animations();
	void Interpolate_Dynamic_Speed_Variables();
	void ExecuteUbergraph_BP_Sunfish_Spline(int32 EntryPoint);
	void Animate_Turning_Blendspace();
	void Animate_LookAt_Front_Variable();
	void Animate_LookAt_Front();
	void Animate_Distance_Variable();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Sunfish_Spline_C">();
	}
	static class ABP_Sunfish_Spline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Sunfish_Spline_C>();
	}
};
static_assert(alignof(ABP_Sunfish_Spline_C) == 0x000008, "Wrong alignment on ABP_Sunfish_Spline_C");
static_assert(sizeof(ABP_Sunfish_Spline_C) == 0x000408, "Wrong size on ABP_Sunfish_Spline_C");
static_assert(offsetof(ABP_Sunfish_Spline_C, UberGraphFrame) == 0x000290, "Member 'ABP_Sunfish_Spline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Sunfish) == 0x000298, "Member 'ABP_Sunfish_Spline_C::Sunfish' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Sunfish_Transform) == 0x0002A0, "Member 'ABP_Sunfish_Spline_C::Sunfish_Transform' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Sphere_Front) == 0x0002A8, "Member 'ABP_Sunfish_Spline_C::Sphere_Front' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, LookAt_Front) == 0x0002B0, "Member 'ABP_Sunfish_Spline_C::LookAt_Front' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Spline) == 0x0002B8, "Member 'ABP_Sunfish_Spline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_Sunfish_Spline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Speed_Variations__Direction_48216A854F78B698C97F228A748B55D1) == 0x0002C8, "Member 'ABP_Sunfish_Spline_C::Speed_Variations__Direction_48216A854F78B698C97F228A748B55D1' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Speed_Variations) == 0x0002D0, "Member 'ABP_Sunfish_Spline_C::Speed_Variations' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Distance) == 0x0002D8, "Member 'ABP_Sunfish_Spline_C::Distance' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Lookat_Front_CurrentDistance) == 0x0002E0, "Member 'ABP_Sunfish_Spline_C::Lookat_Front_CurrentDistance' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Lookat_Front_Offset) == 0x0002E8, "Member 'ABP_Sunfish_Spline_C::Lookat_Front_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, ShowLookatSpheres) == 0x0002F0, "Member 'ABP_Sunfish_Spline_C::ShowLookatSpheres' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, MovementSpeed_Spline) == 0x0002F8, "Member 'ABP_Sunfish_Spline_C::MovementSpeed_Spline' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, AnimPlayRate_Min) == 0x000300, "Member 'ABP_Sunfish_Spline_C::AnimPlayRate_Min' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicSpeed_SpeedingUp_) == 0x000308, "Member 'ABP_Sunfish_Spline_C::DynamicSpeed_SpeedingUp_' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicSpeed_Desired_Speed) == 0x000310, "Member 'ABP_Sunfish_Spline_C::DynamicSpeed_Desired_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Desired_BlendSpace) == 0x000318, "Member 'ABP_Sunfish_Spline_C::Desired_BlendSpace' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicAnim_Fast_Length) == 0x000320, "Member 'ABP_Sunfish_Spline_C::DynamicAnim_Fast_Length' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicAnim_Time_Randomness) == 0x000328, "Member 'ABP_Sunfish_Spline_C::DynamicAnim_Time_Randomness' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicAnim_Slow_Length) == 0x000330, "Member 'ABP_Sunfish_Spline_C::DynamicAnim_Slow_Length' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Dynamic_Speed) == 0x000338, "Member 'ABP_Sunfish_Spline_C::Dynamic_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, AnimPlayRate_Max) == 0x000340, "Member 'ABP_Sunfish_Spline_C::AnimPlayRate_Max' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicSpeed_Speed) == 0x000348, "Member 'ABP_Sunfish_Spline_C::DynamicSpeed_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicSpeed_Acceleration) == 0x000350, "Member 'ABP_Sunfish_Spline_C::DynamicSpeed_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, BlendSpace) == 0x000358, "Member 'ABP_Sunfish_Spline_C::BlendSpace' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DynamicSpeed_Deceleration) == 0x000360, "Member 'ABP_Sunfish_Spline_C::DynamicSpeed_Deceleration' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, MovementSpeed_Min) == 0x000368, "Member 'ABP_Sunfish_Spline_C::MovementSpeed_Min' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, MovementSpeed_Max) == 0x000370, "Member 'ABP_Sunfish_Spline_C::MovementSpeed_Max' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, BlendSpace_Acceleration) == 0x000378, "Member 'ABP_Sunfish_Spline_C::BlendSpace_Acceleration' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, BlendSpace_Decelaration) == 0x000380, "Member 'ABP_Sunfish_Spline_C::BlendSpace_Decelaration' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Non_Dynamic_AnimPlayRate) == 0x000388, "Member 'ABP_Sunfish_Spline_C::Non_Dynamic_AnimPlayRate' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Non_Dynamic_MovementSpeed) == 0x000390, "Member 'ABP_Sunfish_Spline_C::Non_Dynamic_MovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Non_Dynamic_Anim_Intensity) == 0x000398, "Member 'ABP_Sunfish_Spline_C::Non_Dynamic_Anim_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Pitch) == 0x0003A0, "Member 'ABP_Sunfish_Spline_C::Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, TurningAngle) == 0x0003A8, "Member 'ABP_Sunfish_Spline_C::TurningAngle' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Roll_Rotation_Intensity) == 0x0003B0, "Member 'ABP_Sunfish_Spline_C::Roll_Rotation_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Roll_Smoothing_Speed) == 0x0003B8, "Member 'ABP_Sunfish_Spline_C::Roll_Smoothing_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, TurningBlendSpaceAngle) == 0x0003C0, "Member 'ABP_Sunfish_Spline_C::TurningBlendSpaceAngle' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Rotation_Smoothing_Speed) == 0x0003C8, "Member 'ABP_Sunfish_Spline_C::Rotation_Smoothing_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Movement_Smoothing_Speed) == 0x0003D0, "Member 'ABP_Sunfish_Spline_C::Movement_Smoothing_Speed' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Scale_LengthRatio) == 0x0003D8, "Member 'ABP_Sunfish_Spline_C::Scale_LengthRatio' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Scale) == 0x0003E0, "Member 'ABP_Sunfish_Spline_C::Scale' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, ShowSpline) == 0x0003E8, "Member 'ABP_Sunfish_Spline_C::ShowSpline' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Sunfish_AnimBP) == 0x0003F0, "Member 'ABP_Sunfish_Spline_C::Sunfish_AnimBP' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, Material) == 0x0003F8, "Member 'ABP_Sunfish_Spline_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_Sunfish_Spline_C, DistanceForTick) == 0x000400, "Member 'ABP_Sunfish_Spline_C::DistanceForTick' has a wrong offset!");

}

