#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_InventoryManager

#include "Basic.hpp"

#include "E_jRPG_ItemType_structs.hpp"
#include "Engine_structs.hpp"
#include "E_jRPG_ItemSubtype_structs.hpp"
#include "S_jRPG_Item_DynamicData_structs.hpp"
#include "S_InventoryItemTypeMetadata_structs.hpp"
#include "S_LootContext_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "E_CustomizationItemType_structs.hpp"
#include "S_jRPG_Item_StaticData_structs.hpp"
#include "S_jRPG_CharacterSaveState_structs.hpp"
#include "S_ItemQuantity_structs.hpp"
#include "FVendorState_structs.hpp"
#include "FEquipmentSlot_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "FCharacterAssignedEquipment_structs.hpp"


namespace SDK::Params
{

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.AddItemInstanceToInventory
// 0x0180 (0x0180 - 0x0000)
struct AC_jRPG_InventoryManager_C_AddItemInstanceToInventory final
{
public:
	class UBP_ItemInstance_Base_C*                ItemInstance;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LootContext                         LootContext;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GeneratedItemInfo_Base_C*           local_generatedItemInfo;                           // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          local_isNewItem;                                   // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_LootContext                         local_lootContext;                                 // 0x001C(0x0004)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SurplusLOCAL;                                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountToAddLOCAL;                                  // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemHardcodedNameLOCAL;                            // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_StaticData                ItemStructLOCAL;                                   // 0x0030(0x0130)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_ItemUpgradeSystem_C*                CallFunc_GetItemUpgradeSystem_ReturnValue;         // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetItemDefinitionID_ReturnValue;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem;         // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ItemInstance_Base_C*                CallFunc_FindItemInstanceByID_ItemInstance;        // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_AddItemInstanceToInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory) == 0x000180, "Wrong size on AC_jRPG_InventoryManager_C_AddItemInstanceToInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, ItemInstance) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::ItemInstance' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, Amount) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::Amount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, LootContext) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::LootContext' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, local_generatedItemInfo) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::local_generatedItemInfo' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, local_isNewItem) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::local_isNewItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, local_lootContext) == 0x00001C, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::local_lootContext' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, SurplusLOCAL) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::SurplusLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, AmountToAddLOCAL) == 0x000024, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::AmountToAddLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, ItemHardcodedNameLOCAL) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::ItemHardcodedNameLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, ItemStructLOCAL) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::ItemStructLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, CallFunc_GetItemUpgradeSystem_ReturnValue) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::CallFunc_GetItemUpgradeSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, CallFunc_GetItemDefinitionID_ReturnValue) == 0x000168, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::CallFunc_GetItemDefinitionID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, CallFunc_AddItemToInventory_GeneratedItem) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::CallFunc_AddItemToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemInstanceToInventory, CallFunc_FindItemInstanceByID_ItemInstance) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_AddItemInstanceToInventory::CallFunc_FindItemInstanceByID_ItemInstance' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.AddItemToInventory
// 0x0748 (0x0748 - 0x0000)
struct AC_jRPG_InventoryManager_C_AddItemToInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LootContext                         LootContext;                                       // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GeneratedItemInfo_Base_C*           GeneratedItem;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_GeneratedItemInfo_Base_C*           local_generatedItemInfo;                           // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          local_isNewItem;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_LootContext                         local_lootContext;                                 // 0x0024(0x0004)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SurplusLOCAL;                                      // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountToAddLOCAL;                                  // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemHardcodedNameLOCAL;                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_StaticData                ItemStructLOCAL;                                   // 0x0038(0x0130)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0170(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x01B8(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x01C8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0210(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0220(0x0010)()
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x023C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23D[0x3];                                      // 0x023D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue_1;            // 0x0240(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x0250(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0298(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue_1;                     // 0x02A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x02C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_OnItemAddedToInventory_GeneratedItemInfo; // 0x02D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNameValid_ReturnValue;                  // 0x02D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x02DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_OnAddedToInventory_GeneratedItem;         // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x02E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x02EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EB[0x5];                                      // 0x02EB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_CharacterData_C*>            CallFunc_Map_Values_Values;                        // 0x02F0(0x0010)(ReferenceParm)
	class UBP_CharacterData_C*                    CallFunc_Array_Get_Item;                           // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0308(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x030C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem;         // 0x0310(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem_1;       // 0x0320(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemStackMaxCount_ReturnValue;         // 0x032C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0330(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Item_C*           CallFunc_SpawnObject_ReturnValue;                  // 0x0338(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x0344(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsFreeSlotInInventory_Success_; // 0x0348(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               K2Node_MakeStruct_S_jRPG_Item_DynamicData;         // 0x0350(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0488(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_Success_;   // 0x048C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_; // 0x048D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_48E[0x2];                                      // 0x048E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckIfThereIsItemInInventory_ItemIndex;  // 0x0490(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               K2Node_MakeStruct_S_jRPG_Item_DynamicData_1;       // 0x0498(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x05D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x05D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x05DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsFreeSlotInInventory_Success__1; // 0x05E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetStacksLeftForItem_HasExistingStack;    // 0x05E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5E2[0x2];                                      // 0x05E2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetStacksLeftForItem_ItemIndex;           // 0x05E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStacksLeftForItem_StackLeft;           // 0x05E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetStacksLeftForItem_StackCount;          // 0x05EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemDefinitionFromID_Found;            // 0x05F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemDefinitionFromID_ReturnValue;      // 0x05F8(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0728(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0729(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72A[0x2];                                      // 0x072A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x072C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemQuantityInInventory_ReturnValue;   // 0x0730(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0734(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_735[0x3];                                      // 0x0735(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemStackMaxCount_ReturnValue_1;       // 0x0738(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x073C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_3;                      // 0x0740(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_AddItemToInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_AddItemToInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_AddItemToInventory) == 0x000748, "Wrong size on AC_jRPG_InventoryManager_C_AddItemToInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, Amount) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::Amount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, LootContext) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::LootContext' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, GeneratedItem) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, local_generatedItemInfo) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::local_generatedItemInfo' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, local_isNewItem) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::local_isNewItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, local_lootContext) == 0x000024, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::local_lootContext' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, SurplusLOCAL) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::SurplusLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, AmountToAddLOCAL) == 0x00002C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::AmountToAddLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, ItemHardcodedNameLOCAL) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::ItemHardcodedNameLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, ItemStructLOCAL) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::ItemStructLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000168, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeStruct_FormatArgumentData) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Conv_NameToText_ReturnValue) == 0x0001B8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeStruct_FormatArgumentData_1) == 0x0001C8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeArray_Array) == 0x000210, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Format_ReturnValue) == 0x000220, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, Temp_int_Array_Index_Variable) == 0x000230, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, Temp_int_Loop_Counter_Variable) == 0x000234, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000238, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_IsValid_ReturnValue) == 0x00023C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Conv_NameToText_ReturnValue_1) == 0x000240, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Conv_NameToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeStruct_FormatArgumentData_2) == 0x000250, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeArray_Array_1) == 0x000298, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Format_ReturnValue_1) == 0x0002A8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_IsValid_ReturnValue_1) == 0x0002B8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetCustomGI_ReturnValue) == 0x0002C0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Not_PreBool_ReturnValue) == 0x0002C8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_OnItemAddedToInventory_GeneratedItemInfo) == 0x0002D0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_OnItemAddedToInventory_GeneratedItemInfo' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_IsValid_ReturnValue_2) == 0x0002D8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_IsNameValid_ReturnValue) == 0x0002D9, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_IsNameValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_IsValid_ReturnValue_3) == 0x0002DA, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002DB, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002DC, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_OnAddedToInventory_GeneratedItem) == 0x0002E0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_OnAddedToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_BooleanOR_ReturnValue) == 0x0002E8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Not_PreBool_ReturnValue_1) == 0x0002E9, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_BooleanOR_ReturnValue_1) == 0x0002EA, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Map_Values_Values) == 0x0002F0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Array_Get_Item) == 0x000300, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Array_Length_ReturnValue) == 0x000308, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Less_IntInt_ReturnValue) == 0x00030C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_AddItemToInventory_GeneratedItem) == 0x000310, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_AddItemToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Greater_IntInt_ReturnValue) == 0x000318, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_AddItemToInventory_GeneratedItem_1) == 0x000320, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_AddItemToInventory_GeneratedItem_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000328, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetItemStackMaxCount_ReturnValue) == 0x00032C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetItemStackMaxCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000330, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_SpawnObject_ReturnValue) == 0x000338, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Subtract_IntInt_ReturnValue) == 0x000340, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Clamp_ReturnValue) == 0x000344, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_CheckIfThereIsFreeSlotInInventory_Success_) == 0x000348, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_CheckIfThereIsFreeSlotInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeStruct_S_jRPG_Item_DynamicData) == 0x000350, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeStruct_S_jRPG_Item_DynamicData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Array_Add_ReturnValue) == 0x000488, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_CheckIfThereIsItemInInventory_Success_) == 0x00048C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_CheckIfThereIsItemInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_) == 0x00048D, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_CheckIfThereIsItemInInventory_ItemIndex) == 0x000490, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_CheckIfThereIsItemInInventory_ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Clamp_ReturnValue_1) == 0x000494, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, K2Node_MakeStruct_S_jRPG_Item_DynamicData_1) == 0x000498, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::K2Node_MakeStruct_S_jRPG_Item_DynamicData_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Array_Add_ReturnValue_1) == 0x0005D0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Add_IntInt_ReturnValue_1) == 0x0005D4, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Not_PreBool_ReturnValue_2) == 0x0005D8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Clamp_ReturnValue_2) == 0x0005DC, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_CheckIfThereIsFreeSlotInInventory_Success__1) == 0x0005E0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_CheckIfThereIsFreeSlotInInventory_Success__1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetStacksLeftForItem_HasExistingStack) == 0x0005E1, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetStacksLeftForItem_HasExistingStack' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetStacksLeftForItem_ItemIndex) == 0x0005E4, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetStacksLeftForItem_ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetStacksLeftForItem_StackLeft) == 0x0005E8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetStacksLeftForItem_StackLeft' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetStacksLeftForItem_StackCount) == 0x0005EC, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetStacksLeftForItem_StackCount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetItemDefinitionFromID_Found) == 0x0005F0, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetItemDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetItemDefinitionFromID_ReturnValue) == 0x0005F8, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetItemDefinitionFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000728, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_BooleanAND_ReturnValue) == 0x000729, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00072C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetItemQuantityInInventory_ReturnValue) == 0x000730, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetItemQuantityInInventory_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000734, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_GetItemStackMaxCount_ReturnValue_1) == 0x000738, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_GetItemStackMaxCount_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Add_IntInt_ReturnValue_2) == 0x00073C, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddItemToInventory, CallFunc_Clamp_ReturnValue_3) == 0x000740, "Member 'AC_jRPG_InventoryManager_C_AddItemToInventory::CallFunc_Clamp_ReturnValue_3' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.AddMissingItemsFromCharacterSave
// 0x0208 (0x0208 - 0x0000)
struct AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave final
{
public:
	struct FS_jRPG_CharacterSaveState             CharacterSaveState;                                // 0x0000(0x01C0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C4[0x4];                                      // 0x01C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_Map_Values_Values;                        // 0x01C8(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindItemCountFromInventory_Quantity;      // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LootContext                         K2Node_MakeStruct_S_LootContext;                   // 0x01E8(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x01EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem;         // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FD[0x3];                                      // 0x01FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave");
static_assert(sizeof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave) == 0x000208, "Wrong size on AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CharacterSaveState) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CharacterSaveState' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, Temp_int_Array_Index_Variable) == 0x0001C0, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_Map_Values_Values) == 0x0001C8, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_Array_Get_Item) == 0x0001D8, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_Array_Length_ReturnValue) == 0x0001E0, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_FindItemCountFromInventory_Quantity) == 0x0001E4, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_FindItemCountFromInventory_Quantity' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, K2Node_MakeStruct_S_LootContext) == 0x0001E8, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::K2Node_MakeStruct_S_LootContext' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x0001EC, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_AddItemToInventory_GeneratedItem) == 0x0001F0, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_AddItemToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, Temp_int_Loop_Counter_Variable) == 0x0001F8, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_Less_IntInt_ReturnValue) == 0x0001FC, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave, CallFunc_Add_IntInt_ReturnValue) == 0x000200, "Member 'AC_jRPG_InventoryManager_C_AddMissingItemsFromCharacterSave::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.BuyItem
// 0x0160 (0x0160 - 0x0000)
struct AC_jRPG_InventoryManager_C_BuyItem final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemToBuyLOCAL;                                    // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemDefinitionFromID_Found;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemDefinitionFromID_ReturnValue;      // 0x0028(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfItemCanBeBought_CanBeBought;       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TrySpendGold_Success;                     // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_BuyItem) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_BuyItem");
static_assert(sizeof(AC_jRPG_InventoryManager_C_BuyItem) == 0x000160, "Wrong size on AC_jRPG_InventoryManager_C_BuyItem");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_BuyItem::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, Success) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_BuyItem::Success' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, ItemToBuyLOCAL) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_BuyItem::ItemToBuyLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, CallFunc_AddItemToInventory_GeneratedItem) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_BuyItem::CallFunc_AddItemToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, CallFunc_GetItemDefinitionFromID_Found) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_BuyItem::CallFunc_GetItemDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, CallFunc_GetItemDefinitionFromID_ReturnValue) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_BuyItem::CallFunc_GetItemDefinitionFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, CallFunc_CheckIfItemCanBeBought_CanBeBought) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_BuyItem::CallFunc_CheckIfItemCanBeBought_CanBeBought' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_BuyItem, CallFunc_TrySpendGold_Success) == 0x000159, "Member 'AC_jRPG_InventoryManager_C_BuyItem::CallFunc_TrySpendGold_Success' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CalculateStatsComparisonOnEquip
// 0x02C8 (0x02C8 - 0x0000)
struct AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_jRPG_StatType, double>                 StatsAfterEquippingLOCAL;                          // 0x0008(0x0050)(Edit, BlueprintVisible)
	TMap<E_jRPG_StatType, double>                 NewItemStatsLOCAL;                                 // 0x0058(0x0050)(Edit, BlueprintVisible)
	TMap<E_jRPG_StatType, double>                 CurrentItemStatsLOCAL;                             // 0x00A8(0x0050)(Edit, BlueprintVisible)
	TMap<E_jRPG_StatType, double>                 CharacterStatsLOCAL;                               // 0x00F8(0x0050)(Edit, BlueprintVisible)
	struct FS_jRPG_Item_StaticData                ItemToEquipLOCAL;                                  // 0x0148(0x0130)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	TMap<E_jRPG_StatType, double>                 K2Node_MakeVariable_MakeVariableOutput;            // 0x0278(0x0050)()
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip) == 0x0002C8, "Wrong size on AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, StatsAfterEquippingLOCAL) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::StatsAfterEquippingLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, NewItemStatsLOCAL) == 0x000058, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::NewItemStatsLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, CurrentItemStatsLOCAL) == 0x0000A8, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::CurrentItemStatsLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, CharacterStatsLOCAL) == 0x0000F8, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::CharacterStatsLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, ItemToEquipLOCAL) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::ItemToEquipLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip, K2Node_MakeVariable_MakeVariableOutput) == 0x000278, "Member 'AC_jRPG_InventoryManager_C_CalculateStatsComparisonOnEquip::K2Node_MakeVariable_MakeVariableOutput' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CanAffordItemCosts
// 0x0180 (0x0180 - 0x0000)
struct AC_jRPG_InventoryManager_C_CanAffordItemCosts final
{
public:
	TArray<struct FS_ItemQuantity>                RequiredItem;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_ItemQuantity                        CallFunc_Array_Get_Item;                           // 0x0020(0x0018)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindItemDynamicFromInventory_Found;       // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_FindItemDynamicFromInventory_ItemStruct;  // 0x0040(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CanAffordItemCosts) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CanAffordItemCosts");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CanAffordItemCosts) == 0x000180, "Wrong size on AC_jRPG_InventoryManager_C_CanAffordItemCosts");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, RequiredItem) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::RequiredItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, ReturnValue) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_Array_Length_ReturnValue) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, Temp_int_Array_Index_Variable) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, Temp_int_Loop_Counter_Variable) == 0x00001C, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_Array_Get_Item) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_FindItemDynamicFromInventory_Found) == 0x000039, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_FindItemDynamicFromInventory_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_FindItemDynamicFromInventory_ItemStruct) == 0x000040, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_FindItemDynamicFromInventory_ItemStruct' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_Add_IntInt_ReturnValue) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAffordItemCosts, CallFunc_Less_IntInt_ReturnValue_1) == 0x00017C, "Member 'AC_jRPG_InventoryManager_C_CanAffordItemCosts::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CanAutoEquipConsumableShard
// 0x0018 (0x0018 - 0x0000)
struct AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetMaxConsumableShardsCount_ReturnValue;  // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard) == 0x000018, "Wrong size on AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard, ReturnValue) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard, CallFunc_GetMaxConsumableShardsCount_ReturnValue) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard::CallFunc_GetMaxConsumableShardsCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard, CallFunc_GetCustomGI_ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard, CallFunc_Less_IntInt_ReturnValue) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CanAutoEquipConsumableShard::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckAmountOfItemInInventory
// 0x0168 (0x0168 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalAmountInInventory;                            // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalAmountOwnedLOCAL;                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0020(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x015D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15E[0x2];                                      // 0x015E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory) == 0x000168, "Wrong size on AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, TotalAmountInInventory) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::TotalAmountInInventory' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, TotalAmountOwnedLOCAL) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::TotalAmountOwnedLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, Temp_int_Array_Index_Variable) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, Temp_int_Loop_Counter_Variable) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, CallFunc_Array_Get_Item) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, CallFunc_Array_Length_ReturnValue) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, CallFunc_Less_IntInt_ReturnValue) == 0x00015C, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00015D, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory, CallFunc_Add_IntInt_ReturnValue_1) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemInInventory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckAmountOfItemTypeInInventory
// 0x0160 (0x0160 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_jRPG_ItemSubtype                            ItemSubtype;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalAmountInInventory;                            // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalAmountOwnedLOCAL;                             // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0018(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0155(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0156(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_157[0x1];                                      // 0x0157(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory) == 0x000160, "Wrong size on AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::ItemType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, ItemSubtype) == 0x000001, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::ItemSubtype' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, TotalAmountInInventory) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::TotalAmountInInventory' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, TotalAmountOwnedLOCAL) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::TotalAmountOwnedLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_Array_Get_Item) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_Array_Length_ReturnValue) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_Less_IntInt_ReturnValue) == 0x000154, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000155, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000156, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_Add_IntInt_ReturnValue_1) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory, CallFunc_BooleanAND_ReturnValue) == 0x00015C, "Member 'AC_jRPG_InventoryManager_C_CheckAmountOfItemTypeInInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckIfCanUnequipItemToInventory
// 0x0014 (0x0014 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success_;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsFreeSlotInInventory_Success_; // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_Success_;   // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_; // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CheckIfThereIsItemInInventory_ItemIndex;  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory) == 0x000014, "Wrong size on AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, Success_) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, CallFunc_CheckIfThereIsFreeSlotInInventory_Success_) == 0x000009, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::CallFunc_CheckIfThereIsFreeSlotInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, CallFunc_CheckIfThereIsItemInInventory_Success_) == 0x00000A, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::CallFunc_CheckIfThereIsItemInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_) == 0x00000B, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, CallFunc_CheckIfThereIsItemInInventory_ItemIndex) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::CallFunc_CheckIfThereIsItemInInventory_ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckIfCanUnequipItemToInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckIfItemCanBeBought
// 0x0150 (0x0150 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeBought;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_Success_;   // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_; // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckIfThereIsItemInInventory_ItemIndex;  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemDefinitionFromID_Found;            // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemDefinitionFromID_ReturnValue;      // 0x0018(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsFreeSlotInInventory_Success_; // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought) == 0x000150, "Wrong size on AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, ItemId) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::ItemId' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CanBeBought) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CanBeBought' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_CheckIfThereIsItemInInventory_Success_) == 0x000009, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_CheckIfThereIsItemInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_) == 0x00000A, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_CheckIfThereIsItemInInventory_ItemIndex) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_CheckIfThereIsItemInInventory_ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_GetItemDefinitionFromID_Found) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_GetItemDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_GetItemDefinitionFromID_ReturnValue) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_GetItemDefinitionFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_Not_PreBool_ReturnValue) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_CheckIfThereIsFreeSlotInInventory_Success_) == 0x000149, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_CheckIfThereIsFreeSlotInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x00014A, "Member 'AC_jRPG_InventoryManager_C_CheckIfItemCanBeBought::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckIfThereIsAmountOfItemInInventory
// 0x02D0 (0x02D0 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success_;                                          // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalAmountOwnedLOCAL;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NeededAmountLOCAL;                                 // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemHardcodedNameLOCAL;                            // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0038(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item_1;                         // 0x0180(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue_1;        // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue_1;        // 0x02BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BB[0x1];                                      // 0x02BB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory) == 0x0002D0, "Wrong size on AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Amount) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Amount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Success_) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, TotalAmountOwnedLOCAL) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::TotalAmountOwnedLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, NeededAmountLOCAL) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::NeededAmountLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, ItemHardcodedNameLOCAL) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::ItemHardcodedNameLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Temp_bool_True_if_break_was_hit_Variable) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Temp_int_Array_Index_Variable) == 0x00002C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Array_Length_ReturnValue) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Array_Get_Item) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Array_Length_ReturnValue_1) == 0x000174, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Temp_int_Array_Index_Variable_1) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Less_IntInt_ReturnValue) == 0x00017C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Array_Get_Item_1) == 0x000180, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0002B8, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_GreaterEqual_IntInt_ReturnValue_1) == 0x0002B9, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_GreaterEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_EqualEqual_NameName_ReturnValue_1) == 0x0002BA, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_EqualEqual_NameName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Add_IntInt_ReturnValue_1) == 0x0002BC, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, Temp_int_Loop_Counter_Variable_1) == 0x0002C0, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002C4, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_Add_IntInt_ReturnValue_2) == 0x0002C8, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory, CallFunc_BooleanAND_ReturnValue) == 0x0002CC, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsAmountOfItemInInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckIfThereIsFreeSlotInInventory
// 0x000C (0x000C - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory final
{
public:
	bool                                          Success_;                                          // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory) == 0x00000C, "Wrong size on AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory, Success_) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory::Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory, CallFunc_Array_Length_ReturnValue) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory, CallFunc_Less_IntInt_ReturnValue) == 0x000009, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsFreeSlotInInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckIfThereIsItemInInventory
// 0x0168 (0x0168 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success_;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsItemFullyStacked_;                               // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemIndex;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemIndexLOCAL;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsItemFullyStacked_LOCAL;                          // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success_LOCAL;                                     // 0x0015(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0028(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0165(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0166(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0167(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory) == 0x000168, "Wrong size on AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, Success_) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, IsItemFullyStacked_) == 0x000009, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::IsItemFullyStacked_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, ItemIndex) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, ItemIndexLOCAL) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::ItemIndexLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, IsItemFullyStacked_LOCAL) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::IsItemFullyStacked_LOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, Success_LOCAL) == 0x000015, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::Success_LOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, Temp_bool_True_if_break_was_hit_Variable) == 0x000016, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, Temp_int_Array_Index_Variable) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_Array_Get_Item) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_Less_IntInt_ReturnValue) == 0x000164, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000165, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_BooleanAND_ReturnValue) == 0x000166, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000167, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsItemInInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.CheckIfThereIsNotFullyStackedItemInInventory
// 0x0170 (0x0170 - 0x0000)
struct AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success_;                                          // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemIndex;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ItemIndexLOCAL;                                    // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Success_LOCAL;                                     // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0028(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetItemStackMaxCount_ReturnValue;         // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x016A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x016B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory) == 0x000170, "Wrong size on AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, Success_) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, ItemIndex) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, ItemIndexLOCAL) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::ItemIndexLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, Success_LOCAL) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::Success_LOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, Temp_bool_True_if_break_was_hit_Variable) == 0x000015, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, Temp_int_Array_Index_Variable) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_Not_PreBool_ReturnValue) == 0x00001C, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, Temp_int_Loop_Counter_Variable) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000024, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_Array_Get_Item) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_Array_Length_ReturnValue) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_GetItemStackMaxCount_ReturnValue) == 0x000164, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_GetItemStackMaxCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_Less_IntInt_ReturnValue) == 0x000168, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_Less_IntInt_ReturnValue_1) == 0x000169, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_BooleanAND_ReturnValue) == 0x00016A, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00016B, "Member 'AC_jRPG_InventoryManager_C_CheckIfThereIsNotFullyStackedItemInInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.DEBUG_ShowDebugText
// 0x04F0 (0x04F0 - 0x0000)
struct AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         Temp_wildcard_Temp_buffer_array_Variable;          // 0x0008(0x0010)(ConstParm, ReferenceParm)
	TArray<class FString>                         Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable; // 0x0018(0x0010)(ConstParm, ReferenceParm)
	class FString                                 CallFunc_JoinStringArray_ReturnValue;              // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0038(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0048)(HasGetValueTypeHash)
	TArray<class FString>                         Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable_1; // 0x0090(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_JoinStringArray_ReturnValue_1;            // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00B8(0x0010)()
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00D0(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0118(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0128(0x0010)()
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Temp_string_Variable;                              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayDebugCategoryEnabled_ReturnValue; // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetConsumablesShards_FilteredArray;       // 0x0160(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0170(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue;            // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x02D0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Temp_string_Variable_1;                            // 0x02E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x02F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x0300(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FString>                         Temp_wildcard_Temp_buffer_array_Variable_1;        // 0x0310(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetConsumables_FilteredArray;             // 0x0320(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item_1;                         // 0x0330(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0468(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x046C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_46D[0x3];                                      // 0x046D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_NameToString_ReturnValue_1;          // 0x0470(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x0480(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0490(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x04A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x04B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x04C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x04C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C5[0x3];                                      // 0x04C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 K2Node_Select_Default;                             // 0x04C8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x04D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x04E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText");
static_assert(sizeof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText) == 0x0004F0, "Wrong size on AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_int_Array_Index_Variable) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_bool_Variable) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_wildcard_Temp_buffer_array_Variable) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_wildcard_Temp_buffer_array_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_JoinStringArray_ReturnValue) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_JoinStringArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Conv_StringToText_ReturnValue) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable_1) == 0x000090, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_int_Loop_Counter_Variable) == 0x0000A0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_JoinStringArray_ReturnValue_1) == 0x0000A8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_JoinStringArray_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000B8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Add_IntInt_ReturnValue) == 0x0000C8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000D0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, K2Node_MakeArray_Array) == 0x000118, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Format_ReturnValue) == 0x000128, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_int_Loop_Counter_Variable_1) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Add_IntInt_ReturnValue_1) == 0x00013C, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_int_Array_Index_Variable_1) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_string_Variable) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_string_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_IsGameplayDebugCategoryEnabled_ReturnValue) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_IsGameplayDebugCategoryEnabled_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_GetConsumablesShards_FilteredArray) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_GetConsumablesShards_FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Get_Item) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Length_ReturnValue) == 0x0002A8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Less_IntInt_ReturnValue) == 0x0002AC, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Conv_NameToString_ReturnValue) == 0x0002B0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Conv_NameToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Conv_IntToString_ReturnValue) == 0x0002C0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue) == 0x0002D0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_string_Variable_1) == 0x0002E0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_string_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0002F0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue_2) == 0x000300, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, Temp_wildcard_Temp_buffer_array_Variable_1) == 0x000310, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::Temp_wildcard_Temp_buffer_array_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_GetConsumables_FilteredArray) == 0x000320, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_GetConsumables_FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Get_Item_1) == 0x000330, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Length_ReturnValue_1) == 0x000468, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Less_IntInt_ReturnValue_1) == 0x00046C, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Conv_NameToString_ReturnValue_1) == 0x000470, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Conv_NameToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Conv_IntToString_ReturnValue_1) == 0x000480, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000490, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue_4) == 0x0004A0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0004B0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Add_ReturnValue) == 0x0004C0, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Contains_ReturnValue) == 0x0004C4, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, K2Node_Select_Default) == 0x0004C8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0004D8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText, CallFunc_Array_Add_ReturnValue_1) == 0x0004E8, "Member 'AC_jRPG_InventoryManager_C_DEBUG_ShowDebugText::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.EquipItem
// 0x0010 (0x0010 - 0x0000)
struct AC_jRPG_InventoryManager_C_EquipItem final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CharacterName;                                     // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_EquipItem) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_EquipItem");
static_assert(sizeof(AC_jRPG_InventoryManager_C_EquipItem) == 0x000010, "Wrong size on AC_jRPG_InventoryManager_C_EquipItem");
static_assert(offsetof(AC_jRPG_InventoryManager_C_EquipItem, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_EquipItem::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_EquipItem, CharacterName) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_EquipItem::CharacterName' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.EquipItem_DEPRECATED
// 0x0008 (0x0008 - 0x0000)
struct AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED");
static_assert(sizeof(AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED) == 0x000008, "Wrong size on AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED");
static_assert(offsetof(AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_EquipItem_DEPRECATED::ItemHardcodedName' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ExecuteUbergraph_AC_jRPG_InventoryManager
// 0x0018 (0x0018 - 0x0000)
struct AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedBuild_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager) == 0x000018, "Wrong size on AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager, EntryPoint) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager, CallFunc_GetCustomGI_ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager, CallFunc_IsPackagedBuild_ReturnValue) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager::CallFunc_IsPackagedBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager, CallFunc_Not_PreBool_ReturnValue) == 0x000015, "Member 'AC_jRPG_InventoryManager_C_ExecuteUbergraph_AC_jRPG_InventoryManager::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.FindItemCountFromInventory
// 0x0148 (0x0148 - 0x0000)
struct AC_jRPG_InventoryManager_C_FindItemCountFromInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Quantity;                                          // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_FindItemDynamicFromInventory_Found;       // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_FindItemDynamicFromInventory_ItemStruct;  // 0x0010(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_FindItemCountFromInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_FindItemCountFromInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_FindItemCountFromInventory) == 0x000148, "Wrong size on AC_jRPG_InventoryManager_C_FindItemCountFromInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemCountFromInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_FindItemCountFromInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemCountFromInventory, Quantity) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_FindItemCountFromInventory::Quantity' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemCountFromInventory, CallFunc_FindItemDynamicFromInventory_Found) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_FindItemCountFromInventory::CallFunc_FindItemDynamicFromInventory_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemCountFromInventory, CallFunc_FindItemDynamicFromInventory_ItemStruct) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_FindItemCountFromInventory::CallFunc_FindItemDynamicFromInventory_ItemStruct' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.FindItemDynamicFromInventory
// 0x02A0 (0x02A0 - 0x0000)
struct AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               ItemStruct;                                        // 0x0010(0x0138)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0160(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x029D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x029E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory) == 0x0002A0, "Wrong size on AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, Found) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, ItemStruct) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::ItemStruct' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, Temp_bool_True_if_break_was_hit_Variable) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, Temp_int_Array_Index_Variable) == 0x00014C, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_Not_PreBool_ReturnValue) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, Temp_int_Loop_Counter_Variable) == 0x000154, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_Array_Get_Item) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_Array_Length_ReturnValue) == 0x000298, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_Less_IntInt_ReturnValue) == 0x00029C, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x00029D, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory, CallFunc_BooleanAND_ReturnValue) == 0x00029E, "Member 'AC_jRPG_InventoryManager_C_FindItemDynamicFromInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetAllEquipableItems
// 0x0238 (0x0238 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetAllEquipableItems final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<E_jRPG_ItemSubtype>                      AvailableSubtypes;                                 // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, Parm)
	TArray<struct FS_jRPG_Item_DynamicData>       EquipableItems;                                    // 0x0058(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<struct FS_jRPG_Item_DynamicData>       EquipableItemsLOCAL;                               // 0x0068(0x0010)(Edit, BlueprintVisible, ContainsInstancedReference)
	TArray<class FName>                           AlreadyAddedItemsLOCAL;                            // 0x0078(0x0010)(Edit, BlueprintVisible)
	TSet<E_jRPG_ItemSubtype>                      AvailableSubtypesLOCAL;                            // 0x0088(0x0050)(Edit, BlueprintVisible)
	E_jRPG_ItemType                               ItemTypeLOCAL;                                     // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x00E8(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x022C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x022D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22E[0x2];                                      // 0x022E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x0234(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0235(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetAllEquipableItems) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetAllEquipableItems");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetAllEquipableItems) == 0x000238, "Wrong size on AC_jRPG_InventoryManager_C_GetAllEquipableItems");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::ItemType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, AvailableSubtypes) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::AvailableSubtypes' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, EquipableItems) == 0x000058, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::EquipableItems' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, EquipableItemsLOCAL) == 0x000068, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::EquipableItemsLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, AlreadyAddedItemsLOCAL) == 0x000078, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::AlreadyAddedItemsLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, AvailableSubtypesLOCAL) == 0x000088, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::AvailableSubtypesLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, ItemTypeLOCAL) == 0x0000D8, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::ItemTypeLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, Temp_int_Array_Index_Variable) == 0x0000DC, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, Temp_int_Loop_Counter_Variable) == 0x0000E0, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Add_IntInt_ReturnValue) == 0x0000E4, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Array_Get_Item) == 0x0000E8, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Array_Length_ReturnValue) == 0x000220, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Less_IntInt_ReturnValue) == 0x000224, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Array_Add_ReturnValue) == 0x000228, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Array_Contains_ReturnValue) == 0x00022C, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Not_PreBool_ReturnValue) == 0x00022D, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Array_Add_ReturnValue_1) == 0x000230, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_Set_Contains_ReturnValue) == 0x000234, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetAllEquipableItems, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000235, "Member 'AC_jRPG_InventoryManager_C_GetAllEquipableItems::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetCharactersForWeapon
// 0x01F8 (0x01F8 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetCharactersForWeapon final
{
public:
	struct FS_jRPG_Item_StaticData                ItemStatic;                                        // 0x0000(0x0130)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	TArray<class UBP_CharacterData_C*>            ReturnValue;                                       // 0x0130(0x0010)(Parm, OutParm, ReturnParm)
	TArray<class UBP_CharacterData_C*>            Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable; // 0x0140(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_CharacterData_C*>            Temp_wildcard_Temp_buffer_array_Variable;          // 0x0160(0x0010)(ConstParm, ReferenceParm)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_CharacterData_C*>            CallFunc_GetCharacterCollection_Characters;        // 0x0178(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterData_C*                    CallFunc_Array_Get_Item;                           // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSet<E_jRPG_ItemSubtype>                      CallFunc_GetAllowedEquipmentSubtypes_AllowedEquipmentSubtypes; // 0x01A0(0x0050)()
	bool                                          CallFunc_Set_Contains_ReturnValue;                 // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetCharactersForWeapon");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon) == 0x0001F8, "Wrong size on AC_jRPG_InventoryManager_C_GetCharactersForWeapon");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, ItemStatic) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::ItemStatic' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, ReturnValue) == 0x000130, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, Temp_int_Loop_Counter_Variable) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_Add_IntInt_ReturnValue) == 0x000154, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, Temp_int_Array_Index_Variable) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, Temp_wildcard_Temp_buffer_array_Variable) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::Temp_wildcard_Temp_buffer_array_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_GetCustomGI_ReturnValue) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_GetCharacterCollection_Characters) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_GetCharacterCollection_Characters' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_Array_Length_ReturnValue) == 0x000188, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_Array_Get_Item) == 0x000190, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_Array_Add_ReturnValue) == 0x00019C, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_GetAllowedEquipmentSubtypes_AllowedEquipmentSubtypes) == 0x0001A0, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_GetAllowedEquipmentSubtypes_AllowedEquipmentSubtypes' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersForWeapon, CallFunc_Set_Contains_ReturnValue) == 0x0001F0, "Member 'AC_jRPG_InventoryManager_C_GetCharactersForWeapon::CallFunc_Set_Contains_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetCharactersWithItemEquipped
// 0x0090 (0x0090 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FFCharacterAssignedEquipment>   AssignedEquipment;                                 // 0x0008(0x0010)(Parm, OutParm)
	TArray<struct FFCharacterAssignedEquipment>   local_assignedEquipments;                          // 0x0018(0x0010)(Edit, BlueprintVisible)
	TArray<class UBP_CharacterData_C*>            local_userCharacters;                              // 0x0028(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_CharacterData_C*>            CallFunc_Map_Values_Values;                        // 0x0048(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CharacterData_C*                    CallFunc_Array_Get_Item;                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasItemEquipped_IsEquipped;               // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFEquipmentSlot                        CallFunc_HasItemEquipped_Slot;                     // 0x006C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFCharacterAssignedEquipment           K2Node_MakeStruct_FCharacterAssignedEquipment;     // 0x0078(0x0010)(NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped) == 0x000090, "Wrong size on AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, ItemId) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::ItemId' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, AssignedEquipment) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::AssignedEquipment' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, local_assignedEquipments) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::local_assignedEquipments' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, local_userCharacters) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::local_userCharacters' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, Temp_int_Array_Index_Variable) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, Temp_int_Loop_Counter_Variable) == 0x00003C, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_Add_IntInt_ReturnValue) == 0x000040, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_Map_Values_Values) == 0x000048, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_Map_Values_Values' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_Array_Get_Item) == 0x000060, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_Less_IntInt_ReturnValue) == 0x000068, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_HasItemEquipped_IsEquipped) == 0x000069, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_HasItemEquipped_IsEquipped' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_HasItemEquipped_Slot) == 0x00006C, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_HasItemEquipped_Slot' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, K2Node_MakeStruct_FCharacterAssignedEquipment) == 0x000078, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::K2Node_MakeStruct_FCharacterAssignedEquipment' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped, CallFunc_Array_Add_ReturnValue) == 0x000088, "Member 'AC_jRPG_InventoryManager_C_GetCharactersWithItemEquipped::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetConsumables
// 0x0020 (0x0020 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetConsumables final
{
public:
	TArray<struct FS_jRPG_Item_DynamicData>       FilteredArray;                                     // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetConsumables) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetConsumables");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetConsumables) == 0x000020, "Wrong size on AC_jRPG_InventoryManager_C_GetConsumables");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetConsumables, FilteredArray) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetConsumables::FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetConsumables, CallFunc_GetOwnedItemsByType_FilteredArray) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_GetConsumables::CallFunc_GetOwnedItemsByType_FilteredArray' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetConsumablesShards
// 0x0020 (0x0020 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetConsumablesShards final
{
public:
	TArray<struct FS_jRPG_Item_DynamicData>       FilteredArray;                                     // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray;        // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetConsumablesShards) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetConsumablesShards");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetConsumablesShards) == 0x000020, "Wrong size on AC_jRPG_InventoryManager_C_GetConsumablesShards");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetConsumablesShards, FilteredArray) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetConsumablesShards::FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetConsumablesShards, CallFunc_GetOwnedItemsByType_FilteredArray) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_GetConsumablesShards::CallFunc_GetOwnedItemsByType_FilteredArray' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetItemDefinitionFromID
// 0x0278 (0x0278 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetItemDefinitionFromID final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                ReturnValue;                                       // 0x0010(0x0130)(Parm, OutParm, ReturnParm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemStaticDefinitionFromID_Found;      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemStaticDefinitionFromID_ReturnValue; // 0x0148(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetItemDefinitionFromID");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID) == 0x000278, "Wrong size on AC_jRPG_InventoryManager_C_GetItemDefinitionFromID");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID, ItemId) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetItemDefinitionFromID::ItemId' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID, Found) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetItemDefinitionFromID::Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID, ReturnValue) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_GetItemDefinitionFromID::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID, CallFunc_GetItemStaticDefinitionFromID_Found) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_GetItemDefinitionFromID::CallFunc_GetItemStaticDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDefinitionFromID, CallFunc_GetItemStaticDefinitionFromID_ReturnValue) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_GetItemDefinitionFromID::CallFunc_GetItemStaticDefinitionFromID_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetItemDynamicFromInventory
// 0x0318 (0x0318 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               ItemStruct;                                        // 0x0008(0x0138)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0140(0x0010)()
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0158(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x01A0(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x01B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B1[0x7];                                      // 0x01B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x01B8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x01D8(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0315(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0316(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory) == 0x000318, "Wrong size on AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, ItemStruct) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::ItemStruct' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Conv_NameToText_ReturnValue) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, Temp_bool_True_if_break_was_hit_Variable) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, K2Node_MakeStruct_FormatArgumentData) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, K2Node_MakeArray_Array) == 0x0001A0, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Not_PreBool_ReturnValue) == 0x0001B0, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Format_ReturnValue) == 0x0001B8, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, Temp_int_Array_Index_Variable) == 0x0001C8, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, Temp_int_Loop_Counter_Variable) == 0x0001CC, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Add_IntInt_ReturnValue) == 0x0001D0, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Array_Get_Item) == 0x0001D8, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Array_Length_ReturnValue) == 0x000310, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_Less_IntInt_ReturnValue) == 0x000314, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000315, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory, CallFunc_BooleanAND_ReturnValue) == 0x000316, "Member 'AC_jRPG_InventoryManager_C_GetItemDynamicFromInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetItemStackMaxCount
// 0x0148 (0x0148 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetItemStackMaxCount final
{
public:
	struct FS_jRPG_Item_StaticData                ItemStaticData;                                    // 0x0000(0x0130)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0130(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemTypeMetadata_Found;                // 0x0134(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InventoryItemTypeMetadata           CallFunc_GetItemTypeMetadata_ItemTypeMetadata;     // 0x0138(0x0010)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetItemStackMaxCount) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetItemStackMaxCount");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetItemStackMaxCount) == 0x000148, "Wrong size on AC_jRPG_InventoryManager_C_GetItemStackMaxCount");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStackMaxCount, ItemStaticData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetItemStackMaxCount::ItemStaticData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStackMaxCount, ReturnValue) == 0x000130, "Member 'AC_jRPG_InventoryManager_C_GetItemStackMaxCount::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStackMaxCount, CallFunc_GetItemTypeMetadata_Found) == 0x000134, "Member 'AC_jRPG_InventoryManager_C_GetItemStackMaxCount::CallFunc_GetItemTypeMetadata_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStackMaxCount, CallFunc_GetItemTypeMetadata_ItemTypeMetadata) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_GetItemStackMaxCount::CallFunc_GetItemTypeMetadata_ItemTypeMetadata' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetItemStructFromInventory
// 0x03C0 (0x03C0 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetItemStructFromInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_StaticData                ItemStruct;                                        // 0x0008(0x0130)(Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)
	struct FS_jRPG_Item_StaticData                ItemStructLOCAL;                                   // 0x0138(0x0130)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0268(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_269[0x3];                                      // 0x0269(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0280(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x03BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x03BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x03BE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetItemStructFromInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory) == 0x0003C0, "Wrong size on AC_jRPG_InventoryManager_C_GetItemStructFromInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, ItemStruct) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::ItemStruct' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, ItemStructLOCAL) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::ItemStructLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, Temp_bool_True_if_break_was_hit_Variable) == 0x000268, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, Temp_int_Array_Index_Variable) == 0x00026C, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_Not_PreBool_ReturnValue) == 0x000270, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, Temp_int_Loop_Counter_Variable) == 0x000274, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000278, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_Array_Get_Item) == 0x000280, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_Array_Length_ReturnValue) == 0x0003B8, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_Less_IntInt_ReturnValue) == 0x0003BC, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_BooleanAND_ReturnValue) == 0x0003BD, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemStructFromInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x0003BE, "Member 'AC_jRPG_InventoryManager_C_GetItemStructFromInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetItemTypeMetadata
// 0x0058 (0x0058 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetItemTypeMetadata final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Found;                                             // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InventoryItemTypeMetadata           ItemTypeMetadata;                                  // 0x0004(0x0010)(Parm, OutParm, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FS_InventoryItemTypeMetadata           K2Node_MakeStruct_S_InventoryItemTypeMetadata;     // 0x0028(0x0010)(NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_Conv_StringToName_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_InventoryItemTypeMetadata           CallFunc_GetDataTableRowFromName_OutRow;           // 0x0040(0x0010)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetItemTypeMetadata");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata) == 0x000058, "Wrong size on AC_jRPG_InventoryManager_C_GetItemTypeMetadata");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::ItemType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, Found) == 0x000001, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, ItemTypeMetadata) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::ItemTypeMetadata' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, K2Node_MakeStruct_S_InventoryItemTypeMetadata) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::K2Node_MakeStruct_S_InventoryItemTypeMetadata' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, CallFunc_Conv_StringToName_ReturnValue) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::CallFunc_Conv_StringToName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, CallFunc_GetDataTableRowFromName_OutRow) == 0x000040, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetItemTypeMetadata, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000050, "Member 'AC_jRPG_InventoryManager_C_GetItemTypeMetadata::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetNotificationPoolTagFromItemType
// 0x0020 (0x0020 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType final
{
public:
	E_jRPG_ItemType                               Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReturnValue;                                       // 0x0004(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemTypeMetadata_Found;                // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InventoryItemTypeMetadata           CallFunc_GetItemTypeMetadata_ItemTypeMetadata;     // 0x0010(0x0010)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType) == 0x000020, "Wrong size on AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType, Index_0) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType::Index_0' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType, ReturnValue) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType::ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType, CallFunc_GetItemTypeMetadata_Found) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType::CallFunc_GetItemTypeMetadata_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType, CallFunc_GetItemTypeMetadata_ItemTypeMetadata) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_GetNotificationPoolTagFromItemType::CallFunc_GetItemTypeMetadata_ItemTypeMetadata' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetOwnedItemsByType
// 0x02C8 (0x02C8 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetOwnedItemsByType final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_jRPG_ItemSubtype                            ItemSubtype;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IncludeHidden;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Item_DynamicData>       FilteredArray;                                     // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<struct FS_jRPG_Item_DynamicData>       Temp_wildcard_Variable;                            // 0x0018(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0040(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item_1;                         // 0x0180(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x02B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x3];                                      // 0x02B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x02C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x02C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x02C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x02C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetOwnedItemsByType");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType) == 0x0002C8, "Wrong size on AC_jRPG_InventoryManager_C_GetOwnedItemsByType");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::ItemType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, ItemSubtype) == 0x000001, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::ItemSubtype' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, IncludeHidden) == 0x000002, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::IncludeHidden' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, FilteredArray) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, Temp_wildcard_Variable) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, Temp_int_Array_Index_Variable) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Array_Length_ReturnValue) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Array_Get_Item) == 0x000040, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Array_Get_Item_1) == 0x000180, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Not_PreBool_ReturnValue) == 0x0002B8, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_Array_Add_ReturnValue) == 0x0002BC, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_BooleanOR_ReturnValue) == 0x0002C0, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0002C1, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x0002C2, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_BooleanOR_ReturnValue_1) == 0x0002C3, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_BooleanAND_ReturnValue) == 0x0002C4, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetOwnedItemsByType, CallFunc_BooleanAND_ReturnValue_1) == 0x0002C5, "Member 'AC_jRPG_InventoryManager_C_GetOwnedItemsByType::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetPartyHealConsumable
// 0x0160 (0x0160 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetPartyHealConsumable final
{
public:
	class FName                                   Row_Name;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAC_jRPG_InventoryManager_C*            CallFunc_GetInventoryManager_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemDefinitionFromID_Found;            // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemDefinitionFromID_ReturnValue;      // 0x0020(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_DataAsset_Item_Shard_C*             K2Node_DynamicCast_AsBP_Data_Asset_Item_Shard;     // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetPartyHealConsumable");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable) == 0x000160, "Wrong size on AC_jRPG_InventoryManager_C_GetPartyHealConsumable");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, Row_Name) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::Row_Name' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, CallFunc_GetInventoryManager_ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::CallFunc_GetInventoryManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, CallFunc_GetCustomGI_ReturnValue) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, CallFunc_GetItemDefinitionFromID_Found) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::CallFunc_GetItemDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, CallFunc_GetItemDefinitionFromID_ReturnValue) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::CallFunc_GetItemDefinitionFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, K2Node_DynamicCast_AsBP_Data_Asset_Item_Shard) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::K2Node_DynamicCast_AsBP_Data_Asset_Item_Shard' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealConsumable, K2Node_DynamicCast_bSuccess) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealConsumable::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetPartyHealShard
// 0x0010 (0x0010 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetPartyHealShard final
{
public:
	class FName                                   Row_Name;                                          // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetPartyHealShard) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetPartyHealShard");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetPartyHealShard) == 0x000010, "Wrong size on AC_jRPG_InventoryManager_C_GetPartyHealShard");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealShard, Row_Name) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealShard::Row_Name' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetPartyHealShard, CallFunc_GetCustomGI_ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetPartyHealShard::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetProperEquipmentChangeSlot
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot, SlotIndex) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetProperEquipmentChangeSlot::SlotIndex' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetProperInventorySlotWidget
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget, ItemIndex) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetProperInventorySlotWidget::ItemIndex' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetProperUseItemOnCharacterSlotWidget
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget, SlotIndex) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetProperUseItemOnCharacterSlotWidget::SlotIndex' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetProperVendorSlot
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetProperVendorSlot final
{
public:
	int32                                         Index_0;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetProperVendorSlot) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_GetProperVendorSlot");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetProperVendorSlot) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_GetProperVendorSlot");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetProperVendorSlot, Index_0) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetProperVendorSlot::Index_0' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetStacksLeftForItem
// 0x0188 (0x0188 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetStacksLeftForItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasExistingStack;                                  // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ItemIndex;                                         // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StackLeft;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         StackCount;                                        // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         local_smallestStackLeftCount;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         local_smallestStackIndex;                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         local_smallestStackCount;                          // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_True_if_break_was_hit_Variable;          // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0040(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17A[0x2];                                      // 0x017A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetItemStackMaxCount_ReturnValue;         // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0184(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0185(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0186(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetStacksLeftForItem");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem) == 0x000188, "Wrong size on AC_jRPG_InventoryManager_C_GetStacksLeftForItem");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, ItemId) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::ItemId' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, HasExistingStack) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::HasExistingStack' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, ItemIndex) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, StackLeft) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::StackLeft' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, StackCount) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::StackCount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, local_smallestStackLeftCount) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::local_smallestStackLeftCount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, local_smallestStackIndex) == 0x00001C, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::local_smallestStackIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, local_smallestStackCount) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::local_smallestStackCount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, Temp_bool_True_if_break_was_hit_Variable) == 0x000024, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::Temp_bool_True_if_break_was_hit_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, Temp_int_Array_Index_Variable) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Not_PreBool_ReturnValue) == 0x00002C, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000039, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Array_Get_Item) == 0x000040, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_BooleanAND_ReturnValue) == 0x000179, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_GetItemStackMaxCount_ReturnValue) == 0x00017C, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_GetItemStackMaxCount_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Subtract_IntInt_ReturnValue) == 0x000180, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_Less_IntInt_ReturnValue_1) == 0x000184, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000185, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetStacksLeftForItem, CallFunc_BooleanOR_ReturnValue) == 0x000186, "Member 'AC_jRPG_InventoryManager_C_GetStacksLeftForItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.GetWeaponsForCharacter
// 0x01A8 (0x01A8 - 0x0000)
struct AC_jRPG_InventoryManager_C_GetWeaponsForCharacter final
{
public:
	class UBP_CharacterData_C*                    CharacterData;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_jRPG_Item_DynamicData>       WeaponsDynamicData;                                // 0x0008(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<struct FS_jRPG_Item_DynamicData>       Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable; // 0x0018(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Item_DynamicData>       Temp_wildcard_Temp_buffer_array_Variable;          // 0x0038(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray;        // 0x0048(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0060(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanEquipItem_ReturnValue;                 // 0x01A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_GetWeaponsForCharacter");
static_assert(sizeof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter) == 0x0001A8, "Wrong size on AC_jRPG_InventoryManager_C_GetWeaponsForCharacter");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CharacterData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CharacterData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, WeaponsDynamicData) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::WeaponsDynamicData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::Temp_wildcard_We_need_a_second_array_to_store_the_result_and_be_able_to_wipe_the_first__buffer__array_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x00002C, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, Temp_int_Array_Index_Variable) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, Temp_wildcard_Temp_buffer_array_Variable) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::Temp_wildcard_Temp_buffer_array_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_GetOwnedItemsByType_FilteredArray) == 0x000048, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_GetOwnedItemsByType_FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_Array_Length_ReturnValue) == 0x000058, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_Array_Get_Item) == 0x000060, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_Array_Add_ReturnValue) == 0x00019C, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_GetWeaponsForCharacter, CallFunc_CanEquipItem_ReturnValue) == 0x0001A0, "Member 'AC_jRPG_InventoryManager_C_GetWeaponsForCharacter::CallFunc_CanEquipItem_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.IsThereNotifiedCustomizationForCharacter
// 0x0178 (0x0178 - 0x0000)
struct AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter final
{
public:
	class UBP_CharacterData_C*                    CharacterData;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNotified;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray;        // 0x0020(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0030(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_CustomizationItemType                       CallFunc_GetCustomizationTypeForCharacter_CustomizationType; // 0x016D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x016E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNameValid_ReturnValue;                  // 0x016F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldObjectBeNotified_IsNotified;        // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter");
static_assert(sizeof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter) == 0x000178, "Wrong size on AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CharacterData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CharacterData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, IsNotified) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::IsNotified' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, Temp_int_Array_Index_Variable) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, Temp_int_Loop_Counter_Variable) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_GetCustomGI_ReturnValue) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_GetOwnedItemsByType_FilteredArray) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_GetOwnedItemsByType_FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_Array_Get_Item) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_Array_Length_ReturnValue) == 0x000168, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x00016C, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_GetCustomizationTypeForCharacter_CustomizationType) == 0x00016D, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_GetCustomizationTypeForCharacter_CustomizationType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x00016E, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_IsNameValid_ReturnValue) == 0x00016F, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_IsNameValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_ShouldObjectBeNotified_IsNotified) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_ShouldObjectBeNotified_IsNotified' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_BooleanAND_ReturnValue) == 0x000171, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter, CallFunc_BooleanAND_ReturnValue_1) == 0x000172, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedCustomizationForCharacter::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.IsThereNotifiedWeaponForCharacter
// 0x01F8 (0x01F8 - 0x0000)
struct AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter final
{
public:
	class UBP_CharacterData_C*                    CharacterData;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsNotified;                                        // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<E_jRPG_ItemSubtype>                      CallFunc_GetAllowedEquipmentSubtypes_AllowedEquipmentSubtypes; // 0x0010(0x0050)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_jRPG_ItemSubtype>                    CallFunc_Set_ToArray_Result;                       // 0x0068(0x0010)(ReferenceParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_jRPG_ItemSubtype                            CallFunc_Array_Get_Item;                           // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray;        // 0x0090(0x0010)(ReferenceParm, ContainsInstancedReference)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item_1;                         // 0x00A0(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNameValid_ReturnValue;                  // 0x01DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DE[0x2];                                      // 0x01DE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldObjectBeNotified_IsNotified;        // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F3[0x1];                                      // 0x01F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter");
static_assert(sizeof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter) == 0x0001F8, "Wrong size on AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CharacterData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CharacterData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, IsNotified) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::IsNotified' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_GetAllowedEquipmentSubtypes_AllowedEquipmentSubtypes) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_GetAllowedEquipmentSubtypes_AllowedEquipmentSubtypes' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, Temp_int_Loop_Counter_Variable) == 0x000060, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Set_ToArray_Result) == 0x000068, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Set_ToArray_Result' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Add_IntInt_ReturnValue) == 0x000078, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Array_Length_ReturnValue) == 0x00007C, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, Temp_int_Array_Index_Variable) == 0x000080, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, Temp_int_Array_Index_Variable_1) == 0x000084, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Array_Get_Item) == 0x000088, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_GetOwnedItemsByType_FilteredArray) == 0x000090, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_GetOwnedItemsByType_FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Array_Get_Item_1) == 0x0000A0, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Array_Length_ReturnValue_1) == 0x0001D8, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Less_IntInt_ReturnValue) == 0x0001DC, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_IsNameValid_ReturnValue) == 0x0001DD, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_IsNameValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, Temp_int_Loop_Counter_Variable_1) == 0x0001E0, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_GetCustomGI_ReturnValue) == 0x0001E8, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_ShouldObjectBeNotified_IsNotified) == 0x0001F0, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_ShouldObjectBeNotified_IsNotified' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001F1, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_BooleanAND_ReturnValue) == 0x0001F2, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001F4, "Member 'AC_jRPG_InventoryManager_C_IsThereNotifiedWeaponForCharacter::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.MarkItemAsRead
// 0x0150 (0x0150 - 0x0000)
struct AC_jRPG_InventoryManager_C_MarkItemAsRead final
{
public:
	struct FS_jRPG_Item_StaticData                ItemData;                                          // 0x0000(0x0130)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class UUserWidget*                            Mark_Caller;                                       // 0x0130(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CallFunc_GetNotificationPoolTagFromItemType_ReturnValue; // 0x0144(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_MarkItemAsRead) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_MarkItemAsRead");
static_assert(sizeof(AC_jRPG_InventoryManager_C_MarkItemAsRead) == 0x000150, "Wrong size on AC_jRPG_InventoryManager_C_MarkItemAsRead");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, ItemData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::ItemData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, Mark_Caller) == 0x000130, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::Mark_Caller' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, CallFunc_GetCustomGI_ReturnValue) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, CallFunc_Not_PreBool_ReturnValue) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000141, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, CallFunc_GetNotificationPoolTagFromItemType_ReturnValue) == 0x000144, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::CallFunc_GetNotificationPoolTagFromItemType_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_MarkItemAsRead, CallFunc_BooleanOR_ReturnValue) == 0x00014C, "Member 'AC_jRPG_InventoryManager_C_MarkItemAsRead::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.NotifyItem
// 0x0148 (0x0148 - 0x0000)
struct AC_jRPG_InventoryManager_C_NotifyItem final
{
public:
	struct FS_jRPG_Item_StaticData                ItemData;                                          // 0x0000(0x0130)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetNotificationPoolTagFromItemType_ReturnValue; // 0x0138(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_NotifyItem) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_NotifyItem");
static_assert(sizeof(AC_jRPG_InventoryManager_C_NotifyItem) == 0x000148, "Wrong size on AC_jRPG_InventoryManager_C_NotifyItem");
static_assert(offsetof(AC_jRPG_InventoryManager_C_NotifyItem, ItemData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_NotifyItem::ItemData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_NotifyItem, CallFunc_GetCustomGI_ReturnValue) == 0x000130, "Member 'AC_jRPG_InventoryManager_C_NotifyItem::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_NotifyItem, CallFunc_GetNotificationPoolTagFromItemType_ReturnValue) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_NotifyItem::CallFunc_GetNotificationPoolTagFromItemType_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_NotifyItem, CallFunc_Not_PreBool_ReturnValue) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_NotifyItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_NotifyItem, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000141, "Member 'AC_jRPG_InventoryManager_C_NotifyItem::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_NotifyItem, CallFunc_BooleanOR_ReturnValue) == 0x000142, "Member 'AC_jRPG_InventoryManager_C_NotifyItem::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.OnItemRemovedFromInventory
// 0x0158 (0x0158 - 0x0000)
struct AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory final
{
public:
	struct FS_jRPG_Item_StaticData                ItemStaticData;                                    // 0x0000(0x0130)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0130(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_ItemUpgradeSystem_C*                CallFunc_GetItemUpgradeSystem_ReturnValue;         // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_OnItemRemovedFromInventory_RemainingQuantity; // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0154(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory) == 0x000158, "Wrong size on AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, ItemStaticData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::ItemStaticData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, Amount) == 0x000130, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::Amount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, CallFunc_GetCustomGI_ReturnValue) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, CallFunc_IsValid_ReturnValue) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, CallFunc_GetItemUpgradeSystem_ReturnValue) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::CallFunc_GetItemUpgradeSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, CallFunc_OnItemRemovedFromInventory_RemainingQuantity) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::CallFunc_OnItemRemovedFromInventory_RemainingQuantity' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000154, "Member 'AC_jRPG_InventoryManager_C_OnItemRemovedFromInventory::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.OnVendorItemSold
// 0x00C8 (0x00C8 - 0x0000)
struct AC_jRPG_InventoryManager_C_OnVendorItemSold final
{
public:
	class FName                                   VendorID;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemId;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Quantity;                                          // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFVendorState                          local_vendorState;                                 // 0x0018(0x0050)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         CallFunc_Map_Find_Value;                           // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Map_Find_ReturnValue;                     // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFVendorState                          CallFunc_GetOrCreateVendorState_Value;             // 0x0078(0x0050)(HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_OnVendorItemSold) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_OnVendorItemSold");
static_assert(sizeof(AC_jRPG_InventoryManager_C_OnVendorItemSold) == 0x0000C8, "Wrong size on AC_jRPG_InventoryManager_C_OnVendorItemSold");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, VendorID) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::VendorID' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, ItemId) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::ItemId' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, Quantity) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::Quantity' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, local_vendorState) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::local_vendorState' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, CallFunc_Map_Find_Value) == 0x000068, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::CallFunc_Map_Find_Value' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, CallFunc_Map_Find_ReturnValue) == 0x00006C, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::CallFunc_Map_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, CallFunc_Add_IntInt_ReturnValue) == 0x000070, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, CallFunc_Max_ReturnValue) == 0x000074, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_OnVendorItemSold, CallFunc_GetOrCreateVendorState_Value) == 0x000078, "Member 'AC_jRPG_InventoryManager_C_OnVendorItemSold::CallFunc_GetOrCreateVendorState_Value' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ReceiveGold
// 0x0190 (0x0190 - 0x0000)
struct AC_jRPG_InventoryManager_C_ReceiveGold final
{
public:
	int32                                         GoldAmount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         local_newGold;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0010)()
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0080(0x0048)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00D0(0x0048)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_2;            // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0120(0x0048)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0170(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ReceiveGold) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_ReceiveGold");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ReceiveGold) == 0x000190, "Wrong size on AC_jRPG_InventoryManager_C_ReceiveGold");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, GoldAmount) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::GoldAmount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, Reason) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::Reason' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, local_newGold) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::local_newGold' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, K2Node_MakeStruct_FormatArgumentData_1) == 0x000080, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x0000C8, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000D0, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, CallFunc_Conv_IntToInt64_ReturnValue_2) == 0x000118, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::CallFunc_Conv_IntToInt64_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, K2Node_MakeStruct_FormatArgumentData_3) == 0x000120, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, CallFunc_Add_IntInt_ReturnValue) == 0x000168, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, K2Node_MakeArray_Array) == 0x000170, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveGold, CallFunc_Format_ReturnValue) == 0x000180, "Member 'AC_jRPG_InventoryManager_C_ReceiveGold::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ReceiveTick) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_ReceiveTick");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ReceiveTick) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_ReceiveTick");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.RefillConsumables
// 0x0300 (0x0300 - 0x0000)
struct AC_jRPG_InventoryManager_C_RefillConsumables final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetPartyHealShard_Row_Name;               // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetPartyHealConsumable_Row_Name;          // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindItemCountFromInventory_Quantity;      // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_wildcard_Variable;                            // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray;        // 0x0038(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem;         // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0050(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x018C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18D[0x3];                                      // 0x018D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CallFunc_GetConsumableItemFromShard_ItemID;        // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem_1;       // 0x0198(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FindItemCountFromInventory_Quantity_1;    // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldRefillConsumableShard_ReturnValue;  // 0x01A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Item_DynamicData>       CallFunc_GetOwnedItemsByType_FilteredArray_1;      // 0x01A8(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item_1;                         // 0x01C0(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_RefillConsumables) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_RefillConsumables");
static_assert(sizeof(AC_jRPG_InventoryManager_C_RefillConsumables) == 0x000300, "Wrong size on AC_jRPG_InventoryManager_C_RefillConsumables");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, Temp_int_Array_Index_Variable) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, Temp_int_Array_Index_Variable_1) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_GetPartyHealShard_Row_Name) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_GetPartyHealShard_Row_Name' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_GetPartyHealConsumable_Row_Name) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_GetPartyHealConsumable_Row_Name' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_FindItemCountFromInventory_Quantity) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_FindItemCountFromInventory_Quantity' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, Temp_wildcard_Variable) == 0x00002C, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_GetOwnedItemsByType_FilteredArray) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_GetOwnedItemsByType_FilteredArray' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_AddItemToInventory_GeneratedItem) == 0x000048, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_AddItemToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Array_Get_Item) == 0x000050, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Array_Length_ReturnValue) == 0x000188, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Less_IntInt_ReturnValue) == 0x00018C, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_GetConsumableItemFromShard_ItemID) == 0x000190, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_GetConsumableItemFromShard_ItemID' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_AddItemToInventory_GeneratedItem_1) == 0x000198, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_AddItemToInventory_GeneratedItem_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_FindItemCountFromInventory_Quantity_1) == 0x0001A0, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_FindItemCountFromInventory_Quantity_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_ShouldRefillConsumableShard_ReturnValue) == 0x0001A4, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_ShouldRefillConsumableShard_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_GetOwnedItemsByType_FilteredArray_1) == 0x0001A8, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_GetOwnedItemsByType_FilteredArray_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Array_Length_ReturnValue_1) == 0x0001B8, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Array_Get_Item_1) == 0x0001C0, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefillConsumables, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002F8, "Member 'AC_jRPG_InventoryManager_C_RefillConsumables::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.RefreshInventorySlot
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_RefreshInventorySlot final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_RefreshInventorySlot) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_RefreshInventorySlot");
static_assert(sizeof(AC_jRPG_InventoryManager_C_RefreshInventorySlot) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_RefreshInventorySlot");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefreshInventorySlot, SlotIndex) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_RefreshInventorySlot::SlotIndex' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.RefreshInventorySlotAfterDiscarding
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding");
static_assert(sizeof(AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding, SlotIndex) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_RefreshInventorySlotAfterDiscarding::SlotIndex' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.RefreshVendorItemDetails
// 0x0001 (0x0001 - 0x0000)
struct AC_jRPG_InventoryManager_C_RefreshVendorItemDetails final
{
public:
	bool                                          ShowItemFromInventory;                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_RefreshVendorItemDetails) == 0x000001, "Wrong alignment on AC_jRPG_InventoryManager_C_RefreshVendorItemDetails");
static_assert(sizeof(AC_jRPG_InventoryManager_C_RefreshVendorItemDetails) == 0x000001, "Wrong size on AC_jRPG_InventoryManager_C_RefreshVendorItemDetails");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RefreshVendorItemDetails, ShowItemFromInventory) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_RefreshVendorItemDetails::ShowItemFromInventory' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ReleaseInventorySlot
// 0x0010 (0x0010 - 0x0000)
struct AC_jRPG_InventoryManager_C_ReleaseInventorySlot final
{
public:
	int32                                         InventorySlot;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_jRPG_InventorySlot_C*              SlotToRemoveLOCAL;                                 // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ReleaseInventorySlot) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_ReleaseInventorySlot");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ReleaseInventorySlot) == 0x000010, "Wrong size on AC_jRPG_InventoryManager_C_ReleaseInventorySlot");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReleaseInventorySlot, InventorySlot) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ReleaseInventorySlot::InventorySlot' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ReleaseInventorySlot, SlotToRemoveLOCAL) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ReleaseInventorySlot::SlotToRemoveLOCAL' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.RemoveAllItemsOfType
// 0x0208 (0x0208 - 0x0000)
struct AC_jRPG_InventoryManager_C_RemoveAllItemsOfType final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          local_KeepEmptyStacks;                             // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexToCheckLOCAL;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountToRemoveLOCAL;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemHardcodedNameLOCAL;                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_GetEnumeratorUserFriendlyName_ReturnValue; // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0030(0x0010)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0048(0x0048)(HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0098(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x00C0(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_RemoveAllItemsOfType");
static_assert(sizeof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType) == 0x000208, "Wrong size on AC_jRPG_InventoryManager_C_RemoveAllItemsOfType");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::ItemType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, local_KeepEmptyStacks) == 0x000001, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::local_KeepEmptyStacks' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, SlotIndexToCheckLOCAL) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::SlotIndexToCheckLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, AmountToRemoveLOCAL) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::AmountToRemoveLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, ItemHardcodedNameLOCAL) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::ItemHardcodedNameLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_GetEnumeratorUserFriendlyName_ReturnValue) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_GetEnumeratorUserFriendlyName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, Temp_int_Array_Index_Variable) == 0x000028, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Conv_StringToText_ReturnValue) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, K2Node_MakeStruct_FormatArgumentData) == 0x000048, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Subtract_IntInt_ReturnValue) == 0x000090, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, K2Node_MakeArray_Array) == 0x000098, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Format_ReturnValue) == 0x0000A8, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x0000B8, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Array_Get_Item) == 0x0000C0, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Array_Length_ReturnValue) == 0x0001F8, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0001FC, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_Max_ReturnValue) == 0x000200, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveAllItemsOfType, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000204, "Member 'AC_jRPG_InventoryManager_C_RemoveAllItemsOfType::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.RemoveItemFromInventory
// 0x0538 (0x0538 - 0x0000)
struct AC_jRPG_InventoryManager_C_RemoveItemFromInventory final
{
public:
	class FName                                   ItemHardcodedName;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Amount;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          KeepEmptyStack;                                    // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          local_KeepEmptyStacks;                             // 0x000D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexToCheckLOCAL;                             // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountToRemoveLOCAL;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_StaticData                ItemStaticDataLOCAL;                               // 0x0018(0x0130)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
	class FName                                   ItemHardcodedNameLOCAL;                            // 0x0148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Abs_Int_ReturnValue;                      // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetItemStaticDefinitionFromID_Found;      // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_StaticData                CallFunc_GetItemStaticDefinitionFromID_ReturnValue; // 0x0160(0x0130)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0295(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0296(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0297(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item;                           // 0x0298(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x03D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x03D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DD[0x3];                                      // 0x03DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Item_DynamicData               CallFunc_Array_Get_Item_1;                         // 0x03E0(0x0138)(ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_2;            // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x051C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_3;            // 0x0520(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0524(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0525(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0526(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_NameName_ReturnValue;          // 0x0527(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_4;            // 0x0528(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_Success_;   // 0x052C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_; // 0x052D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52E[0x2];                                      // 0x052E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_CheckIfThereIsItemInInventory_ItemIndex;  // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_3;             // 0x0534(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x0535(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_RemoveItemFromInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory) == 0x000538, "Wrong size on AC_jRPG_InventoryManager_C_RemoveItemFromInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, ItemHardcodedName) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::ItemHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, Amount) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::Amount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, KeepEmptyStack) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::KeepEmptyStack' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, local_KeepEmptyStacks) == 0x00000D, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::local_KeepEmptyStacks' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, SlotIndexToCheckLOCAL) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::SlotIndexToCheckLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, AmountToRemoveLOCAL) == 0x000014, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::AmountToRemoveLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, ItemStaticDataLOCAL) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::ItemStaticDataLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, ItemHardcodedNameLOCAL) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::ItemHardcodedNameLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, Temp_int_Variable) == 0x000150, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Abs_Int_ReturnValue) == 0x000154, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Abs_Int_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_GetItemStaticDefinitionFromID_Found) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_GetItemStaticDefinitionFromID_Found' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_GetItemStaticDefinitionFromID_ReturnValue) == 0x000160, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_GetItemStaticDefinitionFromID_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Add_IntInt_ReturnValue) == 0x000290, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000294, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, Temp_bool_Variable) == 0x000295, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Not_PreBool_ReturnValue) == 0x000296, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_BooleanAND_ReturnValue) == 0x000297, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Array_Get_Item) == 0x000298, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Array_Length_ReturnValue) == 0x0003D0, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Subtract_IntInt_ReturnValue) == 0x0003D4, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x0003D8, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Greater_IntInt_ReturnValue) == 0x0003DC, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Array_Get_Item_1) == 0x0003E0, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Subtract_IntInt_ReturnValue_2) == 0x000518, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Subtract_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Greater_IntInt_ReturnValue_1) == 0x00051C, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Subtract_IntInt_ReturnValue_3) == 0x000520, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Subtract_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000524, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000525, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_BooleanOR_ReturnValue) == 0x000526, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_EqualEqual_NameName_ReturnValue) == 0x000527, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_EqualEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Subtract_IntInt_ReturnValue_4) == 0x000528, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Subtract_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_CheckIfThereIsItemInInventory_Success_) == 0x00052C, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_CheckIfThereIsItemInInventory_Success_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_) == 0x00052D, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_CheckIfThereIsItemInInventory_IsItemFullyStacked_' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_CheckIfThereIsItemInInventory_ItemIndex) == 0x000530, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_CheckIfThereIsItemInInventory_ItemIndex' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_Greater_IntInt_ReturnValue_3) == 0x000534, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_Greater_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_RemoveItemFromInventory, CallFunc_BooleanOR_ReturnValue_1) == 0x000535, "Member 'AC_jRPG_InventoryManager_C_RemoveItemFromInventory::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ResetInventory
// 0x0014 (0x0014 - 0x0000)
struct AC_jRPG_InventoryManager_C_ResetInventory final
{
public:
	bool                                          local_KeepEmptyStacks;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SlotIndexToCheckLOCAL;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         AmountToRemoveLOCAL;                               // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemHardcodedNameLOCAL;                            // 0x000C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ResetInventory) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_ResetInventory");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ResetInventory) == 0x000014, "Wrong size on AC_jRPG_InventoryManager_C_ResetInventory");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventory, local_KeepEmptyStacks) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ResetInventory::local_KeepEmptyStacks' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventory, SlotIndexToCheckLOCAL) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_ResetInventory::SlotIndexToCheckLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventory, AmountToRemoveLOCAL) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ResetInventory::AmountToRemoveLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventory, ItemHardcodedNameLOCAL) == 0x00000C, "Member 'AC_jRPG_InventoryManager_C_ResetInventory::ItemHardcodedNameLOCAL' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ResetInventoryForNewGamePlus
// 0x0020 (0x0020 - 0x0000)
struct AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus final
{
public:
	int32                                         local_NumberOfTokens;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_LootContext                         K2Node_MakeStruct_S_LootContext;                   // 0x0004(0x0004)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_GeneratedItemInfo_Base_C*           CallFunc_AddItemToInventory_GeneratedItem;         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_CheckAmountOfItemInInventory_TotalAmountInInventory; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus) == 0x000020, "Wrong size on AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus, local_NumberOfTokens) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus::local_NumberOfTokens' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus, K2Node_MakeStruct_S_LootContext) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus::K2Node_MakeStruct_S_LootContext' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus, CallFunc_Greater_IntInt_ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus, CallFunc_AddItemToInventory_GeneratedItem) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus::CallFunc_AddItemToInventory_GeneratedItem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus, CallFunc_CheckAmountOfItemInInventory_TotalAmountInInventory) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_ResetInventoryForNewGamePlus::CallFunc_CheckAmountOfItemInInventory_TotalAmountInInventory' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.SetShouldDispatchModifications
// 0x0001 (0x0001 - 0x0000)
struct AC_jRPG_InventoryManager_C_SetShouldDispatchModifications final
{
public:
	bool                                          ShouldDispatch;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_SetShouldDispatchModifications) == 0x000001, "Wrong alignment on AC_jRPG_InventoryManager_C_SetShouldDispatchModifications");
static_assert(sizeof(AC_jRPG_InventoryManager_C_SetShouldDispatchModifications) == 0x000001, "Wrong size on AC_jRPG_InventoryManager_C_SetShouldDispatchModifications");
static_assert(offsetof(AC_jRPG_InventoryManager_C_SetShouldDispatchModifications, ShouldDispatch) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_SetShouldDispatchModifications::ShouldDispatch' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ShouldItemBeNotified
// 0x0150 (0x0150 - 0x0000)
struct AC_jRPG_InventoryManager_C_ShouldItemBeNotified final
{
public:
	struct FS_jRPG_Item_StaticData                ItemData;                                          // 0x0000(0x0130)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          IsNotified;                                        // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0138(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetNotificationPoolTagFromItemType_ReturnValue; // 0x0140(0x0008)(NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ShouldObjectBeNotified_IsNotified;        // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_ShouldItemBeNotified");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified) == 0x000150, "Wrong size on AC_jRPG_InventoryManager_C_ShouldItemBeNotified");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, ItemData) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::ItemData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, IsNotified) == 0x000130, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::IsNotified' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, CallFunc_GetCustomGI_ReturnValue) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, CallFunc_GetNotificationPoolTagFromItemType_ReturnValue) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::CallFunc_GetNotificationPoolTagFromItemType_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, CallFunc_Not_PreBool_ReturnValue) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, CallFunc_ShouldObjectBeNotified_IsNotified) == 0x000149, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::CallFunc_ShouldObjectBeNotified_IsNotified' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00014A, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldItemBeNotified, CallFunc_BooleanOR_ReturnValue) == 0x00014B, "Member 'AC_jRPG_InventoryManager_C_ShouldItemBeNotified::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ShouldRefillConsumableShard
// 0x000C (0x000C - 0x0000)
struct AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard final
{
public:
	class FName                                   ItemToFind;                                        // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard) == 0x00000C, "Wrong size on AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard, ItemToFind) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard::ItemToFind' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard, ReturnValue) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ShouldRefillConsumableShard::ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ShowAllEquipableItems
// 0x0001 (0x0001 - 0x0000)
struct AC_jRPG_InventoryManager_C_ShowAllEquipableItems final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ShowAllEquipableItems) == 0x000001, "Wrong alignment on AC_jRPG_InventoryManager_C_ShowAllEquipableItems");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ShowAllEquipableItems) == 0x000001, "Wrong size on AC_jRPG_InventoryManager_C_ShowAllEquipableItems");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowAllEquipableItems, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ShowAllEquipableItems::ItemType' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ShowItemsToBuy
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_ShowItemsToBuy final
{
public:
	int32                                         SlotToFocus;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ShowItemsToBuy) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_ShowItemsToBuy");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ShowItemsToBuy) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_ShowItemsToBuy");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowItemsToBuy, SlotToFocus) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ShowItemsToBuy::SlotToFocus' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ShowItemsToSell
// 0x0004 (0x0004 - 0x0000)
struct AC_jRPG_InventoryManager_C_ShowItemsToSell final
{
public:
	int32                                         SlotToFocus;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ShowItemsToSell) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_ShowItemsToSell");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ShowItemsToSell) == 0x000004, "Wrong size on AC_jRPG_InventoryManager_C_ShowItemsToSell");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowItemsToSell, SlotToFocus) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ShowItemsToSell::SlotToFocus' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.ShowLootNotificationInDialogue
// 0x0160 (0x0160 - 0x0000)
struct AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue final
{
public:
	class UBP_GeneratedItemInfo_Base_C*           GeneratedItemInfo;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_jRPG_Item_StaticData                ItemData;                                          // 0x0008(0x0130)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference, HasGetValueTypeHash)
	class UBP_DialogueSystemComponent_C*          CallFunc_GetDialogueSystemComponent_DialogueSystem; // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasActiveDialogue_ReturnValue;            // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0142(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_143[0x5];                                      // 0x0143(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBP_GeneratedItemInfo_Base_C*>   K2Node_MakeArray_Array;                            // 0x0148(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0159(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x015A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue");
static_assert(sizeof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue) == 0x000160, "Wrong size on AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, GeneratedItemInfo) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::GeneratedItemInfo' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, ItemData) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::ItemData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_GetDialogueSystemComponent_DialogueSystem) == 0x000138, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_GetDialogueSystemComponent_DialogueSystem' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_HasActiveDialogue_ReturnValue) == 0x000140, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_HasActiveDialogue_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_Not_PreBool_ReturnValue) == 0x000141, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_IsValid_ReturnValue) == 0x000142, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, K2Node_MakeArray_Array) == 0x000148, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_IsValid_ReturnValue_1) == 0x000158, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_BooleanAND_ReturnValue) == 0x000159, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue, CallFunc_BooleanAND_ReturnValue_1) == 0x00015A, "Member 'AC_jRPG_InventoryManager_C_ShowLootNotificationInDialogue::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.TrySpendGold
// 0x0190 (0x0190 - 0x0000)
struct AC_jRPG_InventoryManager_C_TrySpendGold final
{
public:
	int32                                         GoldAmount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         local_newGold;                                     // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0020(0x0010)()
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0038(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0080(0x0048)(HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_2;            // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00D8(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0120(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0168(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_TrySpendGold) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_TrySpendGold");
static_assert(sizeof(AC_jRPG_InventoryManager_C_TrySpendGold) == 0x000190, "Wrong size on AC_jRPG_InventoryManager_C_TrySpendGold");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, GoldAmount) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::GoldAmount' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, Reason) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::Reason' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, Success) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::Success' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, local_newGold) == 0x00001C, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::local_newGold' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_Conv_StringToText_ReturnValue) == 0x000020, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000030, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, K2Node_MakeStruct_FormatArgumentData) == 0x000038, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, K2Node_MakeStruct_FormatArgumentData_1) == 0x000080, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x0000C8, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_Conv_IntToInt64_ReturnValue_2) == 0x0000D0, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_Conv_IntToInt64_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000D8, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, K2Node_MakeStruct_FormatArgumentData_3) == 0x000120, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, K2Node_MakeArray_Array) == 0x000168, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_Format_ReturnValue) == 0x000178, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000188, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_TrySpendGold, CallFunc_Subtract_IntInt_ReturnValue) == 0x00018C, "Member 'AC_jRPG_InventoryManager_C_TrySpendGold::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.UnequipItem
// 0x0190 (0x0190 - 0x0000)
struct AC_jRPG_InventoryManager_C_UnequipItem final
{
public:
	E_jRPG_ItemType                               ItemType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CharacterHardcodedNameLOCAL;                       // 0x0004(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_jRPG_ItemType, struct FS_jRPG_Item_StaticData> CharacterEquipmentLOCAL;                   // 0x0010(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference)
	struct FS_jRPG_Item_StaticData                ItemToUnequipLOCAL;                                // 0x0060(0x0130)(Edit, BlueprintVisible, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_UnequipItem) == 0x000008, "Wrong alignment on AC_jRPG_InventoryManager_C_UnequipItem");
static_assert(sizeof(AC_jRPG_InventoryManager_C_UnequipItem) == 0x000190, "Wrong size on AC_jRPG_InventoryManager_C_UnequipItem");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UnequipItem, ItemType) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_UnequipItem::ItemType' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UnequipItem, CharacterHardcodedNameLOCAL) == 0x000004, "Member 'AC_jRPG_InventoryManager_C_UnequipItem::CharacterHardcodedNameLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UnequipItem, CharacterEquipmentLOCAL) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_UnequipItem::CharacterEquipmentLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UnequipItem, ItemToUnequipLOCAL) == 0x000060, "Member 'AC_jRPG_InventoryManager_C_UnequipItem::ItemToUnequipLOCAL' has a wrong offset!");

// Function AC_jRPG_InventoryManager.AC_jRPG_InventoryManager_C.UseItemOnCharacter
// 0x0020 (0x0020 - 0x0000)
struct AC_jRPG_InventoryManager_C_UseItemOnCharacter final
{
public:
	class FName                                   ItemToUse_0;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CharacterHardcodedName;                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   ItemToUseLOCAL;                                    // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CharacterToUseItemOnLOCAL;                         // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AC_jRPG_InventoryManager_C_UseItemOnCharacter) == 0x000004, "Wrong alignment on AC_jRPG_InventoryManager_C_UseItemOnCharacter");
static_assert(sizeof(AC_jRPG_InventoryManager_C_UseItemOnCharacter) == 0x000020, "Wrong size on AC_jRPG_InventoryManager_C_UseItemOnCharacter");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UseItemOnCharacter, ItemToUse_0) == 0x000000, "Member 'AC_jRPG_InventoryManager_C_UseItemOnCharacter::ItemToUse_0' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UseItemOnCharacter, CharacterHardcodedName) == 0x000008, "Member 'AC_jRPG_InventoryManager_C_UseItemOnCharacter::CharacterHardcodedName' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UseItemOnCharacter, ItemToUseLOCAL) == 0x000010, "Member 'AC_jRPG_InventoryManager_C_UseItemOnCharacter::ItemToUseLOCAL' has a wrong offset!");
static_assert(offsetof(AC_jRPG_InventoryManager_C_UseItemOnCharacter, CharacterToUseItemOnLOCAL) == 0x000018, "Member 'AC_jRPG_InventoryManager_C_UseItemOnCharacter::CharacterToUseItemOnLOCAL' has a wrong offset!");

}

