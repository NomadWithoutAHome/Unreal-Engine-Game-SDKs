#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VelocityControllerComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_VelocityControllerComponent.BP_VelocityControllerComponent_C.CheckForErrors
// 0x0058 (0x0058 - 0x0000)
struct BP_VelocityControllerComponent_C_CheckForErrors final
{
public:
	TArray<class FText>                           ErrorMessages;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0028(0x0010)()
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VelocityControllerComponent_C_CheckForErrors) == 0x000008, "Wrong alignment on BP_VelocityControllerComponent_C_CheckForErrors");
static_assert(sizeof(BP_VelocityControllerComponent_C_CheckForErrors) == 0x000058, "Wrong size on BP_VelocityControllerComponent_C_CheckForErrors");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, ErrorMessages) == 0x000000, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::ErrorMessages' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, ReturnValue) == 0x000010, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, CallFunc_Format_ReturnValue) == 0x000028, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, CallFunc_GetOwner_ReturnValue) == 0x000038, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, CallFunc_Array_Add_ReturnValue) == 0x000040, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, K2Node_DynamicCast_AsCharacter) == 0x000048, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_CheckForErrors, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'BP_VelocityControllerComponent_C_CheckForErrors::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_VelocityControllerComponent.BP_VelocityControllerComponent_C.ExecuteUbergraph_BP_VelocityControllerComponent
// 0x0028 (0x0028 - 0x0000)
struct BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_GetOwnerAsCharacter_Character;            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode)> K2Node_CreateDelegate_OutputDelegate; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent) == 0x000008, "Wrong alignment on BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent");
static_assert(sizeof(BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent) == 0x000028, "Wrong size on BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent");
static_assert(offsetof(BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent, EntryPoint) == 0x000000, "Member 'BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent, CallFunc_GetOwnerAsCharacter_Character) == 0x000008, "Member 'BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent::CallFunc_GetOwnerAsCharacter_Character' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'BP_VelocityControllerComponent_C_ExecuteUbergraph_BP_VelocityControllerComponent::K2Node_Event_DeltaSeconds' has a wrong offset!");

// Function BP_VelocityControllerComponent.BP_VelocityControllerComponent_C.GetOwnerAsCharacter
// 0x0020 (0x0020 - 0x0000)
struct BP_VelocityControllerComponent_C_GetOwnerAsCharacter final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VelocityControllerComponent_C_GetOwnerAsCharacter) == 0x000008, "Wrong alignment on BP_VelocityControllerComponent_C_GetOwnerAsCharacter");
static_assert(sizeof(BP_VelocityControllerComponent_C_GetOwnerAsCharacter) == 0x000020, "Wrong size on BP_VelocityControllerComponent_C_GetOwnerAsCharacter");
static_assert(offsetof(BP_VelocityControllerComponent_C_GetOwnerAsCharacter, Character) == 0x000000, "Member 'BP_VelocityControllerComponent_C_GetOwnerAsCharacter::Character' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_GetOwnerAsCharacter, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_VelocityControllerComponent_C_GetOwnerAsCharacter::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_GetOwnerAsCharacter, K2Node_DynamicCast_AsCharacter) == 0x000010, "Member 'BP_VelocityControllerComponent_C_GetOwnerAsCharacter::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_GetOwnerAsCharacter, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_VelocityControllerComponent_C_GetOwnerAsCharacter::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_VelocityControllerComponent.BP_VelocityControllerComponent_C.LimitVelocityIfNeeded
// 0x0078 (0x0078 - 0x0000)
struct BP_VelocityControllerComponent_C_LimitVelocityIfNeeded final
{
public:
	class ACharacter*                             CallFunc_GetOwnerAsCharacter_Character;            // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetMaxSpeed_ReturnValue;                  // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsExceedingMaxSpeed_ReturnValue;          // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_VSize_ReturnValue;                        // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_B_ImplicitCast;                      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded) == 0x000008, "Wrong alignment on BP_VelocityControllerComponent_C_LimitVelocityIfNeeded");
static_assert(sizeof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded) == 0x000078, "Wrong size on BP_VelocityControllerComponent_C_LimitVelocityIfNeeded");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_GetOwnerAsCharacter_Character) == 0x000000, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_GetOwnerAsCharacter_Character' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_GetMaxSpeed_ReturnValue) == 0x000008, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_GetMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_IsExceedingMaxSpeed_ReturnValue) == 0x00000C, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_IsExceedingMaxSpeed_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_VSize_ReturnValue) == 0x000010, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_Normal_ReturnValue) == 0x000020, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_FMax_ReturnValue) == 0x000038, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000040, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000058, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_LimitVelocityIfNeeded, CallFunc_FMax_B_ImplicitCast) == 0x000070, "Member 'BP_VelocityControllerComponent_C_LimitVelocityIfNeeded::CallFunc_FMax_B_ImplicitCast' has a wrong offset!");

// Function BP_VelocityControllerComponent.BP_VelocityControllerComponent_C.OnMovementModeChanged
// 0x0020 (0x0020 - 0x0000)
struct BP_VelocityControllerComponent_C_OnMovementModeChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VelocityControllerComponent_C_OnMovementModeChanged) == 0x000008, "Wrong alignment on BP_VelocityControllerComponent_C_OnMovementModeChanged");
static_assert(sizeof(BP_VelocityControllerComponent_C_OnMovementModeChanged) == 0x000020, "Wrong size on BP_VelocityControllerComponent_C_OnMovementModeChanged");
static_assert(offsetof(BP_VelocityControllerComponent_C_OnMovementModeChanged, Character) == 0x000000, "Member 'BP_VelocityControllerComponent_C_OnMovementModeChanged::Character' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_OnMovementModeChanged, PrevMovementMode) == 0x000008, "Member 'BP_VelocityControllerComponent_C_OnMovementModeChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_OnMovementModeChanged, PreviousCustomMode) == 0x000009, "Member 'BP_VelocityControllerComponent_C_OnMovementModeChanged::PreviousCustomMode' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_OnMovementModeChanged, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_VelocityControllerComponent_C_OnMovementModeChanged::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_VelocityControllerComponent_C_OnMovementModeChanged, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_VelocityControllerComponent_C_OnMovementModeChanged::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function BP_VelocityControllerComponent.BP_VelocityControllerComponent_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_VelocityControllerComponent_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_VelocityControllerComponent_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_VelocityControllerComponent_C_ReceiveTick");
static_assert(sizeof(BP_VelocityControllerComponent_C_ReceiveTick) == 0x000004, "Wrong size on BP_VelocityControllerComponent_C_ReceiveTick");
static_assert(offsetof(BP_VelocityControllerComponent_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_VelocityControllerComponent_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

}

