#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleTowerSystem

#include "Basic.hpp"

#include "BP_BattleTowerSystem_classes.hpp"
#include "BP_BattleTowerSystem_parameters.hpp"


namespace SDK
{

// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.ComputeBattleParametersByIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattleIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FFBattleStartParams*             BattleParameters                                       (Parm, OutParm, ContainsInstancedReference, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::ComputeBattleParametersByIndex(int32 BattleIndex, struct FFBattleStartParams* BattleParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "ComputeBattleParametersByIndex");

	Params::BP_BattleTowerSystem_C_ComputeBattleParametersByIndex Parms{};

	Parms.BattleIndex = BattleIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (BattleParameters != nullptr)
		*BattleParameters = std::move(Parms.BattleParameters);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.ComputeBattleRewardParameters
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattleIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FS_BattleTowerStageData&   BattleTowerStageData                                   (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// struct FS_BattleRewardParameters*       BattleRewardParameters                                 (Parm, OutParm, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::ComputeBattleRewardParameters(int32 BattleIndex, const struct FS_BattleTowerStageData& BattleTowerStageData, struct FS_BattleRewardParameters* BattleRewardParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "ComputeBattleRewardParameters");

	Params::BP_BattleTowerSystem_C_ComputeBattleRewardParameters Parms{};

	Parms.BattleIndex = BattleIndex;
	Parms.BattleTowerStageData = std::move(BattleTowerStageData);

	UObject::ProcessEvent(Func, &Parms);

	if (BattleRewardParameters != nullptr)
		*BattleRewardParameters = std::move(Parms.BattleRewardParameters);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.DEBUG_UnlockAllBattles
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleTowerSystem_C::DEBUG_UnlockAllBattles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "DEBUG_UnlockAllBattles");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.FindBattleIDFromIndex
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattleIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName*                            BattleID                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::FindBattleIDFromIndex(int32 BattleIndex, class FName* BattleID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "FindBattleIDFromIndex");

	Params::BP_BattleTowerSystem_C_FindBattleIDFromIndex Parms{};

	Parms.BattleIndex = BattleIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (BattleID != nullptr)
		*BattleID = Parms.BattleID;
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.Initialize
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_BattleTowerSystem_C::Initialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "Initialize");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.LoadState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_BattleTowerSaveData&    SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::LoadState(const struct FS_BattleTowerSaveData& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "LoadState");

	Params::BP_BattleTowerSystem_C_LoadState Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.OnBattleVictory
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattleIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::OnBattleVictory(int32 BattleIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "OnBattleVictory");

	Params::BP_BattleTowerSystem_C_OnBattleVictory Parms{};

	Parms.BattleIndex = BattleIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.ResetState
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_BattleTowerSystem_C::ResetState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "ResetState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.RetrieveUnlockedBattles
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FS_BattleTowerStageData>* BatteTowerStageDatas                                   (Parm, OutParm)

void UBP_BattleTowerSystem_C::RetrieveUnlockedBattles(TArray<struct FS_BattleTowerStageData>* BatteTowerStageDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "RetrieveUnlockedBattles");

	Params::BP_BattleTowerSystem_C_RetrieveUnlockedBattles Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BatteTowerStageDatas != nullptr)
		*BatteTowerStageDatas = std::move(Parms.BatteTowerStageDatas);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.SaveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_BattleTowerSaveData&          SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::SaveState(struct FS_BattleTowerSaveData& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "SaveState");

	Params::BP_BattleTowerSystem_C_SaveState Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);

	SaveData = std::move(Parms.SaveData);
}


// Function BP_BattleTowerSystem.BP_BattleTowerSystem_C.VerifyBattleIndex
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BattleIndex                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_BattleTowerSystem_C::VerifyBattleIndex(int32 BattleIndex, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BattleTowerSystem_C", "VerifyBattleIndex");

	Params::BP_BattleTowerSystem_C_VerifyBattleIndex Parms{};

	Parms.BattleIndex = BattleIndex;

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}

}

