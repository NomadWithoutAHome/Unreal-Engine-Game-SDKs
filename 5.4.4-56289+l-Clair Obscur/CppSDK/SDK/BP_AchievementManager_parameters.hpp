#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AchievementManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "S_AchievementDefinition_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "S_AchievementRuntimeData_structs.hpp"


namespace SDK::Params
{

// Function BP_AchievementManager.BP_AchievementManager_C.ExecuteUbergraph_BP_AchievementManager
// 0x0020 (0x0020 - 0x0000)
struct BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool Success)>                 K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_SaveManager_C*                      CallFunc_GetSaveManager_SaveManager;               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager) == 0x000008, "Wrong alignment on BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager");
static_assert(sizeof(BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager) == 0x000020, "Wrong size on BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager");
static_assert(offsetof(BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager, EntryPoint) == 0x000000, "Member 'BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager, CallFunc_GetSaveManager_SaveManager) == 0x000018, "Member 'BP_AchievementManager_C_ExecuteUbergraph_BP_AchievementManager::CallFunc_GetSaveManager_SaveManager' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.GetAchievementRuntimeData
// 0x00D0 (0x00D0 - 0x0000)
struct BP_AchievementManager_C_GetAchievementRuntimeData final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_AchievementRuntimeData              Data;                                              // 0x0008(0x0028)(Parm, OutParm, HasGetValueTypeHash)
	bool                                          CallFunc_IsAchievementUnlocked_ReturnValue;        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AchievementDefinition               CallFunc_GetDataTableRowFromName_OutRow;           // 0x0038(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0088(0x0010)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x0098(0x0010)()
	struct FS_AchievementRuntimeData              K2Node_MakeStruct_S_AchievementRuntimeData;        // 0x00A8(0x0028)(HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_GetAchievementRuntimeData) == 0x000008, "Wrong alignment on BP_AchievementManager_C_GetAchievementRuntimeData");
static_assert(sizeof(BP_AchievementManager_C_GetAchievementRuntimeData) == 0x0000D0, "Wrong size on BP_AchievementManager_C_GetAchievementRuntimeData");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, AchievementID) == 0x000000, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, Data) == 0x000008, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::Data' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, CallFunc_IsAchievementUnlocked_ReturnValue) == 0x000030, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::CallFunc_IsAchievementUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, CallFunc_GetDataTableRowFromName_OutRow) == 0x000038, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000080, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, CallFunc_Conv_StringToText_ReturnValue) == 0x000088, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, CallFunc_Conv_StringToText_ReturnValue_1) == 0x000098, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementRuntimeData, K2Node_MakeStruct_S_AchievementRuntimeData) == 0x0000A8, "Member 'BP_AchievementManager_C_GetAchievementRuntimeData::K2Node_MakeStruct_S_AchievementRuntimeData' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.GetAchievementSpecificPlatformID
// 0x0068 (0x0068 - 0x0000)
struct BP_AchievementManager_C_GetAchievementSpecificPlatformID final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   PlatformId;                                        // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           CallFunc_GetPlatformNameAsTag_ReturnValue;         // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash)
	struct FS_AchievementDefinition               CallFunc_GetDataTableRowFromName_OutRow;           // 0x0018(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess;   // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_GetAchievementSpecificPlatformID) == 0x000008, "Wrong alignment on BP_AchievementManager_C_GetAchievementSpecificPlatformID");
static_assert(sizeof(BP_AchievementManager_C_GetAchievementSpecificPlatformID) == 0x000068, "Wrong size on BP_AchievementManager_C_GetAchievementSpecificPlatformID");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementSpecificPlatformID, AchievementID) == 0x000000, "Member 'BP_AchievementManager_C_GetAchievementSpecificPlatformID::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementSpecificPlatformID, PlatformId) == 0x000008, "Member 'BP_AchievementManager_C_GetAchievementSpecificPlatformID::PlatformId' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementSpecificPlatformID, CallFunc_GetPlatformNameAsTag_ReturnValue) == 0x000010, "Member 'BP_AchievementManager_C_GetAchievementSpecificPlatformID::CallFunc_GetPlatformNameAsTag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementSpecificPlatformID, CallFunc_GetDataTableRowFromName_OutRow) == 0x000018, "Member 'BP_AchievementManager_C_GetAchievementSpecificPlatformID::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementSpecificPlatformID, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000060, "Member 'BP_AchievementManager_C_GetAchievementSpecificPlatformID::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAchievementSpecificPlatformID, GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess) == 0x000061, "Member 'BP_AchievementManager_C_GetAchievementSpecificPlatformID::GameplayTagsK2Node_SwitchGameplayTag_CmpSuccess' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.GetAllAchievementsIDs
// 0x0028 (0x0028 - 0x0000)
struct BP_AchievementManager_C_GetAllAchievementsIDs final
{
public:
	TArray<class FName>                           AchievementIDs;                                    // 0x0000(0x0010)(Parm, OutParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0018(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_AchievementManager_C_GetAllAchievementsIDs) == 0x000008, "Wrong alignment on BP_AchievementManager_C_GetAllAchievementsIDs");
static_assert(sizeof(BP_AchievementManager_C_GetAllAchievementsIDs) == 0x000028, "Wrong size on BP_AchievementManager_C_GetAllAchievementsIDs");
static_assert(offsetof(BP_AchievementManager_C_GetAllAchievementsIDs, AchievementIDs) == 0x000000, "Member 'BP_AchievementManager_C_GetAllAchievementsIDs::AchievementIDs' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAllAchievementsIDs, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_AchievementManager_C_GetAllAchievementsIDs::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_GetAllAchievementsIDs, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000018, "Member 'BP_AchievementManager_C_GetAllAchievementsIDs::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.Initialize
// 0x0188 (0x0188 - 0x0000)
struct BP_AchievementManager_C_Initialize final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class FName AchievementID)>    K2Node_CreateDelegate_OutputDelegate;              // 0x000C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_GetDataTableRowNames_OutRowNames;         // 0x0038(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0048(0x0010)()
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0060(0x0048)(HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x00A8(0x0010)()
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x00C0(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0110(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_AchievementDefinition               CallFunc_GetDataTableRowFromName_OutRow;           // 0x0138(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0181(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_Initialize) == 0x000008, "Wrong alignment on BP_AchievementManager_C_Initialize");
static_assert(sizeof(BP_AchievementManager_C_Initialize) == 0x000188, "Wrong size on BP_AchievementManager_C_Initialize");
static_assert(offsetof(BP_AchievementManager_C_Initialize, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_AchievementManager_C_Initialize::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_AchievementManager_C_Initialize::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, K2Node_CreateDelegate_OutputDelegate) == 0x00000C, "Member 'BP_AchievementManager_C_Initialize::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_GetGameInstance_ReturnValue) == 0x000020, "Member 'BP_AchievementManager_C_Initialize::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_GetDisplayName_ReturnValue) == 0x000028, "Member 'BP_AchievementManager_C_Initialize::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_GetDataTableRowNames_OutRowNames) == 0x000038, "Member 'BP_AchievementManager_C_Initialize::CallFunc_GetDataTableRowNames_OutRowNames' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Conv_StringToText_ReturnValue) == 0x000048, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Array_Get_Item) == 0x000058, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, K2Node_MakeStruct_FormatArgumentData) == 0x000060, "Member 'BP_AchievementManager_C_Initialize::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Conv_NameToText_ReturnValue) == 0x0000A8, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, K2Node_MakeStruct_FormatArgumentData_1) == 0x0000C0, "Member 'BP_AchievementManager_C_Initialize::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Less_IntInt_ReturnValue) == 0x000108, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, K2Node_MakeArray_Array) == 0x000110, "Member 'BP_AchievementManager_C_Initialize::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_Format_ReturnValue) == 0x000120, "Member 'BP_AchievementManager_C_Initialize::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_IsValid_ReturnValue) == 0x000130, "Member 'BP_AchievementManager_C_Initialize::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_GetDataTableRowFromName_OutRow) == 0x000138, "Member 'BP_AchievementManager_C_Initialize::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000180, "Member 'BP_AchievementManager_C_Initialize::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_Initialize, CallFunc_IsValid_ReturnValue_1) == 0x000181, "Member 'BP_AchievementManager_C_Initialize::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.InitializeOnSaveLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_AchievementManager_C_InitializeOnSaveLoaded final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_InitializeOnSaveLoaded) == 0x000001, "Wrong alignment on BP_AchievementManager_C_InitializeOnSaveLoaded");
static_assert(sizeof(BP_AchievementManager_C_InitializeOnSaveLoaded) == 0x000001, "Wrong size on BP_AchievementManager_C_InitializeOnSaveLoaded");
static_assert(offsetof(BP_AchievementManager_C_InitializeOnSaveLoaded, Success) == 0x000000, "Member 'BP_AchievementManager_C_InitializeOnSaveLoaded::Success' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.IsAchievementUnlocked
// 0x0038 (0x0038 - 0x0000)
struct BP_AchievementManager_C_IsAchievementUnlocked final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetAchievementSpecificPlatformID_PlatformID; // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCachedAchievementProgress_bFoundID;    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetCachedAchievementProgress_Progress;    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast; // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_IsAchievementUnlocked) == 0x000008, "Wrong alignment on BP_AchievementManager_C_IsAchievementUnlocked");
static_assert(sizeof(BP_AchievementManager_C_IsAchievementUnlocked) == 0x000038, "Wrong size on BP_AchievementManager_C_IsAchievementUnlocked");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, AchievementID) == 0x000000, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, ReturnValue) == 0x000008, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_GetAchievementSpecificPlatformID_PlatformID) == 0x000018, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_GetAchievementSpecificPlatformID_PlatformID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_GetCachedAchievementProgress_bFoundID) == 0x000020, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_GetCachedAchievementProgress_bFoundID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_GetCachedAchievementProgress_Progress) == 0x000024, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_GetCachedAchievementProgress_Progress' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_BooleanAND_ReturnValue) == 0x000029, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_IsAchievementUnlocked, CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast) == 0x000030, "Member 'BP_AchievementManager_C_IsAchievementUnlocked::CallFunc_GreaterEqual_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.OnAchievementTriggered
// 0x0108 (0x0108 - 0x0000)
struct BP_AchievementManager_C_OnAchievementTriggered final
{
public:
	struct FAchievementsMap                       AchievementsMap;                                   // 0x0000(0x0050)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm)
	bool                                          bSuccess;                                          // 0x0050(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FName>                           CallFunc_Map_Keys_Keys;                            // 0x0058(0x0010)(ReferenceParm)
	class FName                                   CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0078(0x0010)()
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0090(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00D8(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_OnAchievementTriggered) == 0x000008, "Wrong alignment on BP_AchievementManager_C_OnAchievementTriggered");
static_assert(sizeof(BP_AchievementManager_C_OnAchievementTriggered) == 0x000108, "Wrong size on BP_AchievementManager_C_OnAchievementTriggered");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, AchievementsMap) == 0x000000, "Member 'BP_AchievementManager_C_OnAchievementTriggered::AchievementsMap' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, bSuccess) == 0x000050, "Member 'BP_AchievementManager_C_OnAchievementTriggered::bSuccess' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, Temp_int_Array_Index_Variable) == 0x000054, "Member 'BP_AchievementManager_C_OnAchievementTriggered::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Map_Keys_Keys) == 0x000058, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Map_Keys_Keys' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Array_Length_ReturnValue) == 0x000070, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Conv_NameToText_ReturnValue) == 0x000078, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, Temp_int_Loop_Counter_Variable) == 0x000088, "Member 'BP_AchievementManager_C_OnAchievementTriggered::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, K2Node_MakeStruct_FormatArgumentData) == 0x000090, "Member 'BP_AchievementManager_C_OnAchievementTriggered::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, K2Node_MakeArray_Array) == 0x0000D8, "Member 'BP_AchievementManager_C_OnAchievementTriggered::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Less_IntInt_ReturnValue) == 0x0000E8, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Format_ReturnValue) == 0x0000F0, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementTriggered, CallFunc_Add_IntInt_ReturnValue) == 0x000100, "Member 'BP_AchievementManager_C_OnAchievementTriggered::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.OnAchievementValidatorPassed
// 0x0088 (0x0088 - 0x0000)
struct BP_AchievementManager_C_OnAchievementValidatorPassed final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetAchievementSpecificPlatformID_PlatformID; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(const struct FAchievementsMap& AchievementsMap, const bool bSuccess)> K2Node_CreateDelegate_OutputDelegate; // 0x0010(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPlatformsSubsystem*                    CallFunc_GetGameInstanceSubsystem_ReturnValue;     // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FS_AchievementDefinition               CallFunc_GetDataTableRowFromName_OutRow;           // 0x0028(0x0048)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetDataTableRowFromName_ReturnValue;      // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FName AchievementID)>    K2Node_CreateDelegate_OutputDelegate_1;            // 0x0074(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0084(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_OnAchievementValidatorPassed) == 0x000008, "Wrong alignment on BP_AchievementManager_C_OnAchievementValidatorPassed");
static_assert(sizeof(BP_AchievementManager_C_OnAchievementValidatorPassed) == 0x000088, "Wrong size on BP_AchievementManager_C_OnAchievementValidatorPassed");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, AchievementID) == 0x000000, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, CallFunc_GetAchievementSpecificPlatformID_PlatformID) == 0x000008, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::CallFunc_GetAchievementSpecificPlatformID_PlatformID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, K2Node_CreateDelegate_OutputDelegate) == 0x000010, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, CallFunc_GetGameInstanceSubsystem_ReturnValue) == 0x000020, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::CallFunc_GetGameInstanceSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, CallFunc_GetDataTableRowFromName_OutRow) == 0x000028, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::CallFunc_GetDataTableRowFromName_OutRow' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, CallFunc_GetDataTableRowFromName_ReturnValue) == 0x000070, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::CallFunc_GetDataTableRowFromName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, K2Node_CreateDelegate_OutputDelegate_1) == 0x000074, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_OnAchievementValidatorPassed, CallFunc_IsValid_ReturnValue) == 0x000084, "Member 'BP_AchievementManager_C_OnAchievementValidatorPassed::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_AchievementManager.BP_AchievementManager_C.UnlockAchievement
// 0x00A0 (0x00A0 - 0x0000)
struct BP_AchievementManager_C_UnlockAchievement final
{
public:
	class FName                                   AchievementID;                                     // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsAchievementUnlocked_ReturnValue;        // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_NameToText_ReturnValue;              // 0x0010(0x0010)()
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0028(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FString                                 CallFunc_Format_ReturnValue;                       // 0x0080(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FName                                   CallFunc_GetAchievementSpecificPlatformID_PlatformID; // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsNameValid_ReturnValue;                  // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_AchievementManager_C_UnlockAchievement) == 0x000008, "Wrong alignment on BP_AchievementManager_C_UnlockAchievement");
static_assert(sizeof(BP_AchievementManager_C_UnlockAchievement) == 0x0000A0, "Wrong size on BP_AchievementManager_C_UnlockAchievement");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, AchievementID) == 0x000000, "Member 'BP_AchievementManager_C_UnlockAchievement::AchievementID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, CallFunc_IsAchievementUnlocked_ReturnValue) == 0x000008, "Member 'BP_AchievementManager_C_UnlockAchievement::CallFunc_IsAchievementUnlocked_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, CallFunc_Conv_NameToText_ReturnValue) == 0x000010, "Member 'BP_AchievementManager_C_UnlockAchievement::CallFunc_Conv_NameToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, CallFunc_Not_PreBool_ReturnValue) == 0x000020, "Member 'BP_AchievementManager_C_UnlockAchievement::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, K2Node_MakeStruct_FormatArgumentData) == 0x000028, "Member 'BP_AchievementManager_C_UnlockAchievement::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, K2Node_MakeArray_Array) == 0x000070, "Member 'BP_AchievementManager_C_UnlockAchievement::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, CallFunc_Format_ReturnValue) == 0x000080, "Member 'BP_AchievementManager_C_UnlockAchievement::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, CallFunc_GetAchievementSpecificPlatformID_PlatformID) == 0x000090, "Member 'BP_AchievementManager_C_UnlockAchievement::CallFunc_GetAchievementSpecificPlatformID_PlatformID' has a wrong offset!");
static_assert(offsetof(BP_AchievementManager_C_UnlockAchievement, CallFunc_IsNameValid_ReturnValue) == 0x000098, "Member 'BP_AchievementManager_C_UnlockAchievement::CallFunc_IsNameValid_ReturnValue' has a wrong offset!");

}

