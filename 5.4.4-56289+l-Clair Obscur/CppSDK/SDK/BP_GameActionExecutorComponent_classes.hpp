#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameActionExecutorComponent

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameActionExecutorComponent.BP_GameActionExecutorComponent_C
// 0x0060 (0x0100 - 0x00A0)
class UBP_GameActionExecutorComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TArray<class UGameActionInstance*>            GameActionInstancesInExecution;                    // 0x00A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class UGameAction* GameAction)> OnGameActionExecuted;              // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSF_ReferenceCounterHandle             SaveBlockerReferenceHandle;                        // 0x00C8(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UAudioComponent*>                SpawnedAudioComponents;                            // 0x00E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          DebugDrawEnabled;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void DrawDebug();
	void ExecuteGameAction(class UGameAction* GameAction);
	void ExecuteGameActionWrapper(const struct FGameAction_Wrapper& GameActrionWrapper);
	void ExecuteUbergraph_BP_GameActionExecutorComponent(int32 EntryPoint);
	bool HasAnyGameActionInExecution();
	void OnAudioComponentStateChanged(EAudioComponentPlayState PlayState);
	void OnGameActionExecutionFinished(class UGameActionInstance* GameActionInstance);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void RegisterSpawnedAudioComponent(const class UAudioComponent*& AudioComponent);
	void RequestAutoSaveIfNeeded(class UGameActionInstance* GameActionInstance);
	void SetDebugDrawEnable(bool Enable);
	void SetGameplayPaused(bool Paused);
	bool ShouldBlockAutoSave();

	void GetDebugString(class FString* String) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameActionExecutorComponent_C">();
	}
	static class UBP_GameActionExecutorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameActionExecutorComponent_C>();
	}
};
static_assert(alignof(UBP_GameActionExecutorComponent_C) == 0x000008, "Wrong alignment on UBP_GameActionExecutorComponent_C");
static_assert(sizeof(UBP_GameActionExecutorComponent_C) == 0x000100, "Wrong size on UBP_GameActionExecutorComponent_C");
static_assert(offsetof(UBP_GameActionExecutorComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_GameActionExecutorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameActionExecutorComponent_C, GameActionInstancesInExecution) == 0x0000A8, "Member 'UBP_GameActionExecutorComponent_C::GameActionInstancesInExecution' has a wrong offset!");
static_assert(offsetof(UBP_GameActionExecutorComponent_C, OnGameActionExecuted) == 0x0000B8, "Member 'UBP_GameActionExecutorComponent_C::OnGameActionExecuted' has a wrong offset!");
static_assert(offsetof(UBP_GameActionExecutorComponent_C, SaveBlockerReferenceHandle) == 0x0000C8, "Member 'UBP_GameActionExecutorComponent_C::SaveBlockerReferenceHandle' has a wrong offset!");
static_assert(offsetof(UBP_GameActionExecutorComponent_C, SpawnedAudioComponents) == 0x0000E8, "Member 'UBP_GameActionExecutorComponent_C::SpawnedAudioComponents' has a wrong offset!");
static_assert(offsetof(UBP_GameActionExecutorComponent_C, DebugDrawEnabled) == 0x0000F8, "Member 'UBP_GameActionExecutorComponent_C::DebugDrawEnabled' has a wrong offset!");

}

