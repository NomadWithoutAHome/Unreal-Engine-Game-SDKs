#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ClimbingComponent

#include "Basic.hpp"

#include "BP_ClimbingComponent_classes.hpp"
#include "BP_ClimbingComponent_parameters.hpp"


namespace SDK
{

// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CameraShake
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::CameraShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "CameraShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CanUseClimbingElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   CanClimb                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::CanUseClimbingElement(bool* CanClimb)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "CanUseClimbingElement");

	Params::BP_ClimbingComponent_C_CanUseClimbingElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanClimb != nullptr)
		*CanClimb = Parms.CanClimb;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ChangeState
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_ClimbingComponentState                NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ChangeState(E_ClimbingComponentState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ChangeState");

	Params::BP_ClimbingComponent_C_ChangeState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CheckExitingClimbing
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::CheckExitingClimbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "CheckExitingClimbing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.CheckNextHold
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::CheckNextHold()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "CheckNextHold");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeAlpha
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ComputeAlpha(double Time, class UCurveFloat* Curve, double* Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeAlpha");

	Params::BP_ClimbingComponent_C_ComputeAlpha Parms{};

	Parms.Time = Time;
	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeClimbingAngle
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double*                                 Angle                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ComputeClimbingAngle(double* Angle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeClimbingAngle");

	Params::BP_ClimbingComponent_C_ComputeClimbingAngle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Angle != nullptr)
		*Angle = Parms.Angle;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeClimbingDirection
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::ComputeClimbingDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeClimbingDirection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeClimbingLocation
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ComputeClimbingLocation(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeClimbingLocation");

	Params::BP_ClimbingComponent_C_ComputeClimbingLocation Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeFootRaycast
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SocketName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasHit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ComputeFootRaycast(class FName SocketName, bool* HasHit, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeFootRaycast");

	Params::BP_ClimbingComponent_C_ComputeFootRaycast Parms{};

	Parms.SocketName = SocketName;

	UObject::ProcessEvent(Func, &Parms);

	if (HasHit != nullptr)
		*HasHit = Parms.HasHit;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeFootRaycasts
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::ComputeFootRaycasts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeFootRaycasts");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeInputDirections
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         InputDirectionHorizontal                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         InputDirectionVertical                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 InputScale                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ComputeInputDirections(struct FVector* InputDirectionHorizontal, struct FVector* InputDirectionVertical, double* InputScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeInputDirections");

	Params::BP_ClimbingComponent_C_ComputeInputDirections Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InputDirectionHorizontal != nullptr)
		*InputDirectionHorizontal = std::move(Parms.InputDirectionHorizontal);

	if (InputDirectionVertical != nullptr)
		*InputDirectionVertical = std::move(Parms.InputDirectionVertical);

	if (InputScale != nullptr)
		*InputScale = Parms.InputScale;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ComputeTime
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  MaxTime                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ComputeTime(double DeltaSeconds, double MaxTime, double* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ComputeTime");

	Params::BP_ClimbingComponent_C_ComputeTime Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.MaxTime = MaxTime;

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.DEBUG_OnDebugModeEnabled
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::DEBUG_OnDebugModeEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "DEBUG_OnDebugModeEnabled");

	Params::BP_ClimbingComponent_C_DEBUG_OnDebugModeEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.DEBUG_UpdateClimbingComponent
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::DEBUG_UpdateClimbingComponent(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "DEBUG_UpdateClimbingComponent");

	Params::BP_ClimbingComponent_C_DEBUG_UpdateClimbingComponent Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ExecuteUbergraph_BP_ClimbingComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ExecuteUbergraph_BP_ClimbingComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ExecuteUbergraph_BP_ClimbingComponent");

	Params::BP_ClimbingComponent_C_ExecuteUbergraph_BP_ClimbingComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetCharacterHandsLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBP_ClimbingComponent_C::GetCharacterHandsLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetCharacterHandsLocation");

	Params::BP_ClimbingComponent_C_GetCharacterHandsLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetCharacterHandsOffset
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector UBP_ClimbingComponent_C::GetCharacterHandsOffset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetCharacterHandsOffset");

	Params::BP_ClimbingComponent_C_GetCharacterHandsOffset Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetClimbingDirection
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Climbing_Direction*                   ClimbingDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::GetClimbingDirection(E_Climbing_Direction* ClimbingDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetClimbingDirection");

	Params::BP_ClimbingComponent_C_GetClimbingDirection Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ClimbingDirection != nullptr)
		*ClimbingDirection = Parms.ClimbingDirection;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetClimbingDirectionFromAngle
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Angle                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Climbing_Direction*                   ClimbingDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::GetClimbingDirectionFromAngle(double Angle, E_Climbing_Direction* ClimbingDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetClimbingDirectionFromAngle");

	Params::BP_ClimbingComponent_C_GetClimbingDirectionFromAngle Parms{};

	Parms.Angle = Angle;

	UObject::ProcessEvent(Func, &Parms);

	if (ClimbingDirection != nullptr)
		*ClimbingDirection = Parms.ClimbingDirection;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetClimbingState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_ClimbingComponentState*               ClimbingState                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::GetClimbingState(E_ClimbingComponentState* ClimbingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetClimbingState");

	Params::BP_ClimbingComponent_C_GetClimbingState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ClimbingState != nullptr)
		*ClimbingState = Parms.ClimbingState;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetCurrentClimbingElementTransform
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform UBP_ClimbingComponent_C::GetCurrentClimbingElementTransform()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetCurrentClimbingElementTransform");

	Params::BP_ClimbingComponent_C_GetCurrentClimbingElementTransform Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetDistanceToNextClimbingElement
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::GetDistanceToNextClimbingElement(double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetDistanceToNextClimbingElement");

	Params::BP_ClimbingComponent_C_GetDistanceToNextClimbingElement Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetFootRaycasts
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         LeftFootRaycastLocation_0                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         RightFootRaycastLocation_0                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::GetFootRaycasts(struct FVector* LeftFootRaycastLocation_0, struct FVector* RightFootRaycastLocation_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetFootRaycasts");

	Params::BP_ClimbingComponent_C_GetFootRaycasts Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (LeftFootRaycastLocation_0 != nullptr)
		*LeftFootRaycastLocation_0 = std::move(Parms.LeftFootRaycastLocation_0);

	if (RightFootRaycastLocation_0 != nullptr)
		*RightFootRaycastLocation_0 = std::move(Parms.RightFootRaycastLocation_0);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.GetTimeToPerformStateChange
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::GetTimeToPerformStateChange(double* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "GetTimeToPerformStateChange");

	Params::BP_ClimbingComponent_C_GetTimeToPerformStateChange Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InitializeClimbingComponent
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::InitializeClimbingComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "InitializeClimbingComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InitializeDebug
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::InitializeDebug()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "InitializeDebug");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1");

	Params::BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_ForwardMovementAction_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0");

	Params::BP_ClimbingComponent_C_InpActEvt_IA_CustomMovement_RightMovementAction_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InputAxisClimbingRight
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::InputAxisClimbingRight(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "InputAxisClimbingRight");

	Params::BP_ClimbingComponent_C_InputAxisClimbingRight Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.InputAxisClimbingUp
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::InputAxisClimbingUp(double AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "InputAxisClimbingUp");

	Params::BP_ClimbingComponent_C_InputAxisClimbingUp Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.IsClimbing
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_ClimbingComponent_C::IsClimbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "IsClimbing");

	Params::BP_ClimbingComponent_C_IsClimbing Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.IsMovingToTop
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_ClimbingComponent_C::IsMovingToTop()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "IsMovingToTop");

	Params::BP_ClimbingComponent_C_IsMovingToTop Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.LerpLocationAndRotation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ClimbingComponent_C::LerpLocationAndRotation(double Time, class UCurveFloat* Curve, double* Alpha, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "LerpLocationAndRotation");

	Params::BP_ClimbingComponent_C_LerpLocationAndRotation Parms{};

	Parms.Time = Time;
	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.LerpLocationAndRotationForEntry
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ClimbingComponent_C::LerpLocationAndRotationForEntry(double Time, class UCurveFloat* Curve, double* Alpha, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "LerpLocationAndRotationForEntry");

	Params::BP_ClimbingComponent_C_LerpLocationAndRotationForEntry Parms{};

	Parms.Time = Time;
	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.LerpLocationAndRotationForExit
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 Alpha                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ClimbingComponent_C::LerpLocationAndRotationForExit(double Time, class UCurveFloat* Curve, double* Alpha, struct FVector* Location, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "LerpLocationAndRotationForExit");

	Params::BP_ClimbingComponent_C_LerpLocationAndRotationForExit Parms{};

	Parms.Time = Time;
	Parms.Curve = Curve;

	UObject::ProcessEvent(Func, &Parms);

	if (Alpha != nullptr)
		*Alpha = Parms.Alpha;

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.OnClimbingAnimationInterrupted
// (BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::OnClimbingAnimationInterrupted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "OnClimbingAnimationInterrupted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.OnClimbingJumpMovementEnd
// (BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::OnClimbingJumpMovementEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "OnClimbingJumpMovementEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.OnClimbingJumpMovementStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  TotalDuration                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::OnClimbingJumpMovementStart(double TotalDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "OnClimbingJumpMovementStart");

	Params::BP_ClimbingComponent_C_OnClimbingJumpMovementStart Parms{};

	Parms.TotalDuration = TotalDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.OnClimbingMovementDone
// (BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::OnClimbingMovementDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "OnClimbingMovementDone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.OnStartClimbAnimationDone
// (BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::OnStartClimbAnimationDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "OnStartClimbAnimationDone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.PrepareCharacterForClimbing
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::PrepareCharacterForClimbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "PrepareCharacterForClimbing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.PrepareCharacterForWalking
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::PrepareCharacterForWalking()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "PrepareCharacterForWalking");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_ClimbingComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "ReceiveTick");

	Params::BP_ClimbingComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetCharacterCollisions
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECollisionResponse                      NewResponse                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::SetCharacterCollisions(ECollisionResponse NewResponse)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "SetCharacterCollisions");

	Params::BP_ClimbingComponent_C_SetCharacterCollisions Parms{};

	Parms.NewResponse = NewResponse;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetDataForEnterTransition
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::SetDataForEnterTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "SetDataForEnterTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetDataForExitTransition
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   Location                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void UBP_ClimbingComponent_C::SetDataForExitTransition(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "SetDataForExitTransition");

	Params::BP_ClimbingComponent_C_SetDataForExitTransition Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.SetDataForMove
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_ClimbingElement_C>ClimbingElement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::SetDataForMove(TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "SetDataForMove");

	Params::BP_ClimbingComponent_C_SetDataForMove Parms{};

	Parms.ClimbingElement = ClimbingElement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.StartClimbing
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_ClimbingElement_C>ClimbingElement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::StartClimbing(TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "StartClimbing");

	Params::BP_ClimbingComponent_C_StartClimbing Parms{};

	Parms.ClimbingElement = ClimbingElement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.StopClimbing
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::StopClimbing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "StopClimbing");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateClimbingComponent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::UpdateClimbingComponent(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "UpdateClimbingComponent");

	Params::BP_ClimbingComponent_C_UpdateClimbingComponent Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateClimbingMovement
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_ClimbingComponent_C::UpdateClimbingMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "UpdateClimbingMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateEndLocationWithHandsOffset
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// TScriptInterface<class IBPI_ClimbingElement_C>ClimbingElement                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::UpdateEndLocationWithHandsOffset(TScriptInterface<class IBPI_ClimbingElement_C> ClimbingElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "UpdateEndLocationWithHandsOffset");

	Params::BP_ClimbingComponent_C_UpdateEndLocationWithHandsOffset Parms{};

	Parms.ClimbingElement = ClimbingElement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateEnteringTransition
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::UpdateEnteringTransition(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "UpdateEnteringTransition");

	Params::BP_ClimbingComponent_C_UpdateEnteringTransition Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ClimbingComponent.BP_ClimbingComponent_C.UpdateExitingTransition
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ClimbingComponent_C::UpdateExitingTransition(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ClimbingComponent_C", "UpdateExitingTransition");

	Params::BP_ClimbingComponent_C_UpdateExitingTransition Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}

}

