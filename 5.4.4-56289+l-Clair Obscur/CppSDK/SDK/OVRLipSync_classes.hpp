#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OVRLipSync

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "OVRLipSync_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class OVRLipSync.OVRLipSyncActorComponentBase
// 0x0028 (0x00C8 - 0x00A0)
class UOVRLipSyncActorComponentBase : public UActorComponent
{
public:
	TMulticastInlineDelegate<void()>              OnVisemesReady;                                    // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AssignVisemesToMorphTargets(class USkeletalMeshComponent* Mesh, const TArray<class FString>& MorphTargetNames);

	const float GetLaughterScore() const;
	const TArray<class FString> GetVisemeNames() const;
	const TArray<float> GetVisemes() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OVRLipSyncActorComponentBase">();
	}
	static class UOVRLipSyncActorComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOVRLipSyncActorComponentBase>();
	}
};
static_assert(alignof(UOVRLipSyncActorComponentBase) == 0x000008, "Wrong alignment on UOVRLipSyncActorComponentBase");
static_assert(sizeof(UOVRLipSyncActorComponentBase) == 0x0000C8, "Wrong size on UOVRLipSyncActorComponentBase");
static_assert(offsetof(UOVRLipSyncActorComponentBase, OnVisemesReady) == 0x0000A0, "Member 'UOVRLipSyncActorComponentBase::OnVisemesReady' has a wrong offset!");

// Class OVRLipSync.OVRLipSyncFrameSequence
// 0x0010 (0x0038 - 0x0028)
class UOVRLipSyncFrameSequence final : public UObject
{
public:
	TArray<struct FOVRLipSyncFrame>               FrameSequence;                                     // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OVRLipSyncFrameSequence">();
	}
	static class UOVRLipSyncFrameSequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOVRLipSyncFrameSequence>();
	}
};
static_assert(alignof(UOVRLipSyncFrameSequence) == 0x000008, "Wrong alignment on UOVRLipSyncFrameSequence");
static_assert(sizeof(UOVRLipSyncFrameSequence) == 0x000038, "Wrong size on UOVRLipSyncFrameSequence");
static_assert(offsetof(UOVRLipSyncFrameSequence, FrameSequence) == 0x000028, "Member 'UOVRLipSyncFrameSequence::FrameSequence' has a wrong offset!");

// Class OVRLipSync.OVRLipSyncActorComponent
// 0x0038 (0x0100 - 0x00C8)
class UOVRLipSyncActorComponent final : public UOVRLipSyncActorComponentBase
{
public:
	int32                                         SampleRate;                                        // 0x00C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BufferSize;                                        // 0x00CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOVRLipSyncProviderKind                       ProviderKind;                                      // 0x00D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableHardwareAcceleration;                        // 0x00D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2E];                                      // 0x00D2(0x002E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FeedAudio(const TArray<uint8>& AudioData);
	void OnVoiceCaptureTimer();
	void PermissionCallback(const TArray<class FString>& Permissions, const TArray<bool>& GrantResults);
	void Start();
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OVRLipSyncActorComponent">();
	}
	static class UOVRLipSyncActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOVRLipSyncActorComponent>();
	}
};
static_assert(alignof(UOVRLipSyncActorComponent) == 0x000008, "Wrong alignment on UOVRLipSyncActorComponent");
static_assert(sizeof(UOVRLipSyncActorComponent) == 0x000100, "Wrong size on UOVRLipSyncActorComponent");
static_assert(offsetof(UOVRLipSyncActorComponent, SampleRate) == 0x0000C8, "Member 'UOVRLipSyncActorComponent::SampleRate' has a wrong offset!");
static_assert(offsetof(UOVRLipSyncActorComponent, BufferSize) == 0x0000CC, "Member 'UOVRLipSyncActorComponent::BufferSize' has a wrong offset!");
static_assert(offsetof(UOVRLipSyncActorComponent, ProviderKind) == 0x0000D0, "Member 'UOVRLipSyncActorComponent::ProviderKind' has a wrong offset!");
static_assert(offsetof(UOVRLipSyncActorComponent, EnableHardwareAcceleration) == 0x0000D1, "Member 'UOVRLipSyncActorComponent::EnableHardwareAcceleration' has a wrong offset!");

// Class OVRLipSync.OVRLipSyncPlaybackActorComponent
// 0x0020 (0x00E8 - 0x00C8)
class UOVRLipSyncPlaybackActorComponent final : public UOVRLipSyncActorComponentBase
{
public:
	class UOVRLipSyncFrameSequence*               Sequence;                                          // 0x00C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        AudioComponent;                                    // 0x00D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPlaybackSequence(class UOVRLipSyncFrameSequence* InSequence);
	void Start(class UAudioComponent* InAudioComponent, class UOVRLipSyncFrameSequence* InSequence);
	void Stop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OVRLipSyncPlaybackActorComponent">();
	}
	static class UOVRLipSyncPlaybackActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOVRLipSyncPlaybackActorComponent>();
	}
};
static_assert(alignof(UOVRLipSyncPlaybackActorComponent) == 0x000008, "Wrong alignment on UOVRLipSyncPlaybackActorComponent");
static_assert(sizeof(UOVRLipSyncPlaybackActorComponent) == 0x0000E8, "Wrong size on UOVRLipSyncPlaybackActorComponent");
static_assert(offsetof(UOVRLipSyncPlaybackActorComponent, Sequence) == 0x0000C8, "Member 'UOVRLipSyncPlaybackActorComponent::Sequence' has a wrong offset!");
static_assert(offsetof(UOVRLipSyncPlaybackActorComponent, AudioComponent) == 0x0000D0, "Member 'UOVRLipSyncPlaybackActorComponent::AudioComponent' has a wrong offset!");

}

