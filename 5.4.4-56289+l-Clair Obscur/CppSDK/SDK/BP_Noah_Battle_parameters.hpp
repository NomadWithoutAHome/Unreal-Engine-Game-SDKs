#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Noah_Battle

#include "Basic.hpp"

#include "EHealReason_structs.hpp"
#include "EAttackType_structs.hpp"
#include "EDamageReason_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Noah_Battle.BP_Noah_Battle_C.ExecuteUbergraph_BP_Noah_Battle
// 0x01B8 (0x01B8 - 0x0000)
struct BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 NewValue, int32 PreviousValue)> K2Node_CreateDelegate_OutputDelegate;       // 0x0014(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0064(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0074(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable;                                // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_2;                              // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_3;                              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_4;                              // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_5;                              // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_6;                              // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_7;                              // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_8;                              // 0x00A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_9;                              // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_10;                             // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_DeathByCounter;                       // 0x00B4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Event_Damage;                               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Critical_;                            // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Weakness_;                            // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Resistant_;                           // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   K2Node_Event_Element;                              // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageReason                                 K2Node_Event_Reason_1;                             // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       K2Node_Event_DamageCharacterSource;                // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_HealAmount_1;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Event_HealAmount;                           // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_RestoredMP_;                          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_CharacterBattleStats_C*        K2Node_Event_SourceCharacter;                      // 0x00E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHealReason                                   K2Node_Event_Reason;                               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_NewValue;                       // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_PreviousValue;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x00FC(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue;         // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x013C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_AttachToComponent_ReturnValue_1;       // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_10;                           // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0164(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_LinearColorToVector_ReturnValue;     // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1;   // 0x0198(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x01A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_Param_ImplicitCast;     // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast; // 0x01AC(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_Param_ImplicitCast_1;   // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle) == 0x000008, "Wrong alignment on BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle");
static_assert(sizeof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle) == 0x0001B8, "Wrong size on BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, EntryPoint) == 0x000000, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable) == 0x000004, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_CreateDelegate_OutputDelegate) == 0x000014, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_1) == 0x000024, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_2) == 0x000034, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_3) == 0x000044, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_4) == 0x000054, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_5) == 0x000064, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_6) == 0x000074, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_int_Variable) == 0x000084, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable) == 0x000088, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_1) == 0x00008C, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_2) == 0x000090, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_3) == 0x000094, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_4) == 0x000098, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_5) == 0x00009C, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_6) == 0x0000A0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_7) == 0x0000A4, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_8) == 0x0000A8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_9) == 0x0000AC, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_real_Variable_10) == 0x0000B0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_DeathByCounter) == 0x0000B4, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_DeathByCounter' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Damage) == 0x0000B8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Damage' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Critical_) == 0x0000C0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Critical_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Weakness_) == 0x0000C1, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Weakness_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Resistant_) == 0x0000C2, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Resistant_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Element) == 0x0000C3, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Element' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Reason_1) == 0x0000C4, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Reason_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_DamageCharacterSource) == 0x0000C8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_DamageCharacterSource' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_HealAmount_1) == 0x0000D0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_HealAmount_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_HealAmount) == 0x0000D8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_HealAmount' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_RestoredMP_) == 0x0000E0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_RestoredMP_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_SourceCharacter) == 0x0000E8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_SourceCharacter' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Event_Reason) == 0x0000F0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Event_Reason' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_CustomEvent_NewValue) == 0x0000F4, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_CustomEvent_NewValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_CustomEvent_PreviousValue) == 0x0000F8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_CustomEvent_PreviousValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_7) == 0x0000FC, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Select_Default) == 0x00010C, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000110, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000118, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000120, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_8) == 0x000128, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_K2_AttachToComponent_ReturnValue) == 0x000138, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_K2_AttachToComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_9) == 0x00013C, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_K2_AttachToComponent_ReturnValue_1) == 0x00014C, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_K2_AttachToComponent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_struct_Variable_10) == 0x000150, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, Temp_int_Variable_1) == 0x000160, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, K2Node_Select_Default_1) == 0x000164, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Conv_LinearColorToVector_ReturnValue) == 0x000178, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Conv_LinearColorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000190, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1) == 0x000198, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Multiply_DoubleDouble_A_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x0001A0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_SetFloatParameter_Param_ImplicitCast) == 0x0001A8, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_SetFloatParameter_Param_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast) == 0x0001AC, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle, CallFunc_SetFloatParameter_Param_ImplicitCast_1) == 0x0001B0, "Member 'BP_Noah_Battle_C_ExecuteUbergraph_BP_Noah_Battle::CallFunc_SetFloatParameter_Param_ImplicitCast_1' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.FX_FeedbackUniqueMecanic
// 0x0008 (0x0008 - 0x0000)
struct BP_Noah_Battle_C_FX_FeedbackUniqueMecanic final
{
public:
	int32                                         NewValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PreviousValue;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_FX_FeedbackUniqueMecanic) == 0x000004, "Wrong alignment on BP_Noah_Battle_C_FX_FeedbackUniqueMecanic");
static_assert(sizeof(BP_Noah_Battle_C_FX_FeedbackUniqueMecanic) == 0x000008, "Wrong size on BP_Noah_Battle_C_FX_FeedbackUniqueMecanic");
static_assert(offsetof(BP_Noah_Battle_C_FX_FeedbackUniqueMecanic, NewValue) == 0x000000, "Member 'BP_Noah_Battle_C_FX_FeedbackUniqueMecanic::NewValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_FX_FeedbackUniqueMecanic, PreviousValue) == 0x000004, "Member 'BP_Noah_Battle_C_FX_FeedbackUniqueMecanic::PreviousValue' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.OnHealed
// 0x0020 (0x0020 - 0x0000)
struct BP_Noah_Battle_C_OnHealed final
{
public:
	double                                        HealAmount;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RestoredMP_;                                       // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_CharacterBattleStats_C*        SourceCharacter;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	EHealReason                                   Reason;                                            // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_OnHealed) == 0x000008, "Wrong alignment on BP_Noah_Battle_C_OnHealed");
static_assert(sizeof(BP_Noah_Battle_C_OnHealed) == 0x000020, "Wrong size on BP_Noah_Battle_C_OnHealed");
static_assert(offsetof(BP_Noah_Battle_C_OnHealed, HealAmount) == 0x000000, "Member 'BP_Noah_Battle_C_OnHealed::HealAmount' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnHealed, RestoredMP_) == 0x000008, "Member 'BP_Noah_Battle_C_OnHealed::RestoredMP_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnHealed, SourceCharacter) == 0x000010, "Member 'BP_Noah_Battle_C_OnHealed::SourceCharacter' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnHealed, Reason) == 0x000018, "Member 'BP_Noah_Battle_C_OnHealed::Reason' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.OnResurrected
// 0x0008 (0x0008 - 0x0000)
struct BP_Noah_Battle_C_OnResurrected final
{
public:
	double                                        HealAmount;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_OnResurrected) == 0x000008, "Wrong alignment on BP_Noah_Battle_C_OnResurrected");
static_assert(sizeof(BP_Noah_Battle_C_OnResurrected) == 0x000008, "Wrong size on BP_Noah_Battle_C_OnResurrected");
static_assert(offsetof(BP_Noah_Battle_C_OnResurrected, HealAmount) == 0x000000, "Member 'BP_Noah_Battle_C_OnResurrected::HealAmount' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.OnDamageReceived
// 0x0018 (0x0018 - 0x0000)
struct BP_Noah_Battle_C_OnDamageReceived final
{
public:
	double                                        Damage;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Critical_;                                         // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Weakness_;                                         // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Resistant_;                                        // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   Element;                                           // 0x000B(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDamageReason                                 Reason;                                            // 0x000C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       DamageCharacterSource;                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_OnDamageReceived) == 0x000008, "Wrong alignment on BP_Noah_Battle_C_OnDamageReceived");
static_assert(sizeof(BP_Noah_Battle_C_OnDamageReceived) == 0x000018, "Wrong size on BP_Noah_Battle_C_OnDamageReceived");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, Damage) == 0x000000, "Member 'BP_Noah_Battle_C_OnDamageReceived::Damage' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, Critical_) == 0x000008, "Member 'BP_Noah_Battle_C_OnDamageReceived::Critical_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, Weakness_) == 0x000009, "Member 'BP_Noah_Battle_C_OnDamageReceived::Weakness_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, Resistant_) == 0x00000A, "Member 'BP_Noah_Battle_C_OnDamageReceived::Resistant_' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, Element) == 0x00000B, "Member 'BP_Noah_Battle_C_OnDamageReceived::Element' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, Reason) == 0x00000C, "Member 'BP_Noah_Battle_C_OnDamageReceived::Reason' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_OnDamageReceived, DamageCharacterSource) == 0x000010, "Member 'BP_Noah_Battle_C_OnDamageReceived::DamageCharacterSource' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.OnDeath
// 0x0001 (0x0001 - 0x0000)
struct BP_Noah_Battle_C_OnDeath final
{
public:
	bool                                          DeathByCounter;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_OnDeath) == 0x000001, "Wrong alignment on BP_Noah_Battle_C_OnDeath");
static_assert(sizeof(BP_Noah_Battle_C_OnDeath) == 0x000001, "Wrong size on BP_Noah_Battle_C_OnDeath");
static_assert(offsetof(BP_Noah_Battle_C_OnDeath, DeathByCounter) == 0x000000, "Member 'BP_Noah_Battle_C_OnDeath::DeathByCounter' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.DodgeParameters
// 0x0058 (0x0058 - 0x0000)
struct BP_Noah_Battle_C_DodgeParameters final
{
public:
	class UStaticMeshComponent*                   Hair_0;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Mesh_0;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 Face_0;                                            // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        Movement;                                          // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Black;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_3;                       // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast; // 0x0048(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1; // 0x004C(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_2; // 0x0050(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_3; // 0x0054(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_DodgeParameters) == 0x000008, "Wrong alignment on BP_Noah_Battle_C_DodgeParameters");
static_assert(sizeof(BP_Noah_Battle_C_DodgeParameters) == 0x000058, "Wrong size on BP_Noah_Battle_C_DodgeParameters");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, Hair_0) == 0x000000, "Member 'BP_Noah_Battle_C_DodgeParameters::Hair_0' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, Mesh_0) == 0x000008, "Member 'BP_Noah_Battle_C_DodgeParameters::Mesh_0' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, Face_0) == 0x000010, "Member 'BP_Noah_Battle_C_DodgeParameters::Face_0' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, Movement) == 0x000018, "Member 'BP_Noah_Battle_C_DodgeParameters::Movement' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, Black) == 0x000020, "Member 'BP_Noah_Battle_C_DodgeParameters::Black' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_Lerp_ReturnValue) == 0x000028, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_Lerp_ReturnValue_1) == 0x000030, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_Lerp_ReturnValue_2) == 0x000038, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_Lerp_ReturnValue_3) == 0x000040, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_Lerp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast) == 0x000048, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1) == 0x00004C, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_2) == 0x000050, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_DodgeParameters, CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_3) == 0x000054, "Member 'BP_Noah_Battle_C_DodgeParameters::CallFunc_SetScalarParameterValueOnMaterials_ParameterValue_ImplicitCast_3' has a wrong offset!");

// Function BP_Noah_Battle.BP_Noah_Battle_C.Attach Weapons to Hands
// 0x0018 (0x0018 - 0x0000)
struct BP_Noah_Battle_C_Attach_Weapons_to_Hands final
{
public:
	class ABP_WeaponSkin_C*                       WeaponActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponSkin_Noah_Base_C*             K2Node_DynamicCast_AsBP_Weapon_Skin_Noah_Base;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Noah_Battle_C_Attach_Weapons_to_Hands) == 0x000008, "Wrong alignment on BP_Noah_Battle_C_Attach_Weapons_to_Hands");
static_assert(sizeof(BP_Noah_Battle_C_Attach_Weapons_to_Hands) == 0x000018, "Wrong size on BP_Noah_Battle_C_Attach_Weapons_to_Hands");
static_assert(offsetof(BP_Noah_Battle_C_Attach_Weapons_to_Hands, WeaponActor) == 0x000000, "Member 'BP_Noah_Battle_C_Attach_Weapons_to_Hands::WeaponActor' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_Attach_Weapons_to_Hands, K2Node_DynamicCast_AsBP_Weapon_Skin_Noah_Base) == 0x000008, "Member 'BP_Noah_Battle_C_Attach_Weapons_to_Hands::K2Node_DynamicCast_AsBP_Weapon_Skin_Noah_Base' has a wrong offset!");
static_assert(offsetof(BP_Noah_Battle_C_Attach_Weapons_to_Hands, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'BP_Noah_Battle_C_Attach_Weapons_to_Hands::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

