#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GroupingPolicy_Base

#include "Basic.hpp"

#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GroupingPolicy_Base.BP_GroupingPolicy_Base_C
// 0x0030 (0x0058 - 0x0028)
class UBP_GroupingPolicy_Base_C : public UExtendedObject
{
public:
	TArray<class UBP_GroupInstance_Base_C*>       GroupInstances;                                    // 0x0028(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UClass*                                 ExpectedClass;                                     // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class FText                                   PolicyDisplayName;                                 // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          IsMultiMatchAllowed;                               // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	TArray<class UBP_GroupInstance_Base_C*> GetGroupInstances();
	void GetPolicyDisplayName(class FText* PolicyDisplayName_0);
	void InitGroupPolicy();
	void PopulateGroupsWithObjects(TArray<class UObject*>& Objects);
	void RegisterGroupInstance(const class UBP_GroupInstance_Base_C*& GroupInstance);
	void SetMultiMatchAllowed(bool Allowed);
	void SetPolicyDisplayName(const class FText& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GroupingPolicy_Base_C">();
	}
	static class UBP_GroupingPolicy_Base_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GroupingPolicy_Base_C>();
	}
};
static_assert(alignof(UBP_GroupingPolicy_Base_C) == 0x000008, "Wrong alignment on UBP_GroupingPolicy_Base_C");
static_assert(sizeof(UBP_GroupingPolicy_Base_C) == 0x000058, "Wrong size on UBP_GroupingPolicy_Base_C");
static_assert(offsetof(UBP_GroupingPolicy_Base_C, GroupInstances) == 0x000028, "Member 'UBP_GroupingPolicy_Base_C::GroupInstances' has a wrong offset!");
static_assert(offsetof(UBP_GroupingPolicy_Base_C, ExpectedClass) == 0x000038, "Member 'UBP_GroupingPolicy_Base_C::ExpectedClass' has a wrong offset!");
static_assert(offsetof(UBP_GroupingPolicy_Base_C, PolicyDisplayName) == 0x000040, "Member 'UBP_GroupingPolicy_Base_C::PolicyDisplayName' has a wrong offset!");
static_assert(offsetof(UBP_GroupingPolicy_Base_C, IsMultiMatchAllowed) == 0x000050, "Member 'UBP_GroupingPolicy_Base_C::IsMultiMatchAllowed' has a wrong offset!");

}

