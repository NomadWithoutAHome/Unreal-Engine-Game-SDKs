#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Holds

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FPromptParams_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Holds.BP_Holds_C
// 0x00C8 (0x0358 - 0x0290)
class ABP_Holds_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        CharacterLocation;                                 // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       InteractionTrigger_Sphere;                         // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EnterExitLocation;                                 // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Mesh_Climb;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Holds_C*>                    LinkedHolds;                                       // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          IsTopHold;                                         // 0x02D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBottomHold;                                      // 0x02D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DA[0x6];                                      // 0x02DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                DebugComponents;                                   // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UStaticMesh*>                    PossibleMeshes;                                    // 0x02F0(0x0010)(Edit, BlueprintVisible)
	bool                                          RandomlyRotateHolds;                               // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Meshscale;                                         // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x0320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_324[0x4];                                      // 0x0324(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFPromptParams                         InteractionPromptParams;                           // 0x0328(0x0018)(Edit, BlueprintVisible, HasGetValueTypeHash)
	class AActor*                                 InteractorActor;                                   // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MinimumDistanceBetweenHolds;                       // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumDistanceBetweenHolds;                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AutoLinkAllHoldsInRange();
	void AutoLinkAllHoldsInRangeWithIgnoreList(TArray<class ABP_Holds_C*>& ClimbingElementsToIgnore);
	void AutoLinkHold();
	void CanInteractWithMount(bool* CanInteract);
	void CheckCanExitToBottom(const struct FVector& InputDirectionVertical, double InputScale, bool* CanExit, struct FVector* Location, struct FRotator* Rotation);
	void CheckCanExitToTop(const struct FVector& InputDirectionVertical, double InputScale, bool* CanExit, struct FVector* Location, struct FRotator* Rotation);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void CheckMoveToNextClimbingElement(const struct FVector& InputDirectionHorizontal, const struct FVector& InputDirectionVertical, double InputScale, const struct FVector& CameraForward, const struct FVector& CameraLocation, bool* CanMove, TScriptInterface<class IBPI_ClimbingElement_C>* NextHold);
	void ConstructObject();
	void EvaluatePossibleHold(class AActor* HoldToEvaluate, const struct FVector& InputDirection, const struct FVector& CameraForward, const struct FVector& CameraLocation, double* ComputedDot);
	void ExecuteUbergraph_BP_Holds(int32 EntryPoint);
	void GetClimbingElementInRange(class ABP_Holds_C* ClimbingElement, TArray<class ABP_Holds_C*>* ClimbingElements);
	void GetClimbingElementLocation(struct FVector* Location);
	void GetClimbingElementRotation(struct FRotator* Rotation);
	void GetInteractionPromptParams(struct FFPromptParams* PromptParams);
	bool IsEntryOrExit();
	void IsInteractionAvailable(bool* Available);
	void IsInteractionDone(bool* Done);
	void LinkToFirstClimbingElementAndRemoveIt(TArray<class ABP_Holds_C*>& Holds, class ABP_Holds_C** LinkedHold);
	void OnEnemyBattleStateLoaded(bool BattleState);
	void OnInteractionDisabled();
	void OnInteractionEnabled();
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnObjectInteractionStateLoaded(bool InteractionState);
	void OnTriggerBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnTriggerEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ProjectLocationsOnCameraPlane(class AActor* HoldToEvaluate, const struct FVector& CameraForward, const struct FVector& CameraLocation, struct FVector* HoldToEvaluateLocation, struct FVector* CurrentLocation);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	bool ShouldHideDistantInteraction();
	void SortClimbingElementByDistance(class ABP_Holds_C* Hold, TArray<class ABP_Holds_C*>& Array, TArray<class ABP_Holds_C*>* SortedArray);
	void UpdateDebugDisplay();
	void UpdateEntryExitDefaultLocation();
	void UserConstructionScript();

	void GetInteractionFeedbackLocation(struct FVector* Location) const;
	void GetInteractionLocation(struct FVector* Location) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Holds_C">();
	}
	static class ABP_Holds_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Holds_C>();
	}
};
static_assert(alignof(ABP_Holds_C) == 0x000008, "Wrong alignment on ABP_Holds_C");
static_assert(sizeof(ABP_Holds_C) == 0x000358, "Wrong size on ABP_Holds_C");
static_assert(offsetof(ABP_Holds_C, UberGraphFrame) == 0x000290, "Member 'ABP_Holds_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, CharacterLocation) == 0x000298, "Member 'ABP_Holds_C::CharacterLocation' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, InteractionTrigger_Sphere) == 0x0002A0, "Member 'ABP_Holds_C::InteractionTrigger_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, Arrow) == 0x0002A8, "Member 'ABP_Holds_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, EnterExitLocation) == 0x0002B0, "Member 'ABP_Holds_C::EnterExitLocation' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, Mesh_Climb) == 0x0002B8, "Member 'ABP_Holds_C::Mesh_Climb' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, Scene) == 0x0002C0, "Member 'ABP_Holds_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, LinkedHolds) == 0x0002C8, "Member 'ABP_Holds_C::LinkedHolds' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, IsTopHold) == 0x0002D8, "Member 'ABP_Holds_C::IsTopHold' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, IsBottomHold) == 0x0002D9, "Member 'ABP_Holds_C::IsBottomHold' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, DebugComponents) == 0x0002E0, "Member 'ABP_Holds_C::DebugComponents' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, PossibleMeshes) == 0x0002F0, "Member 'ABP_Holds_C::PossibleMeshes' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, RandomlyRotateHolds) == 0x000300, "Member 'ABP_Holds_C::RandomlyRotateHolds' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, Meshscale) == 0x000308, "Member 'ABP_Holds_C::Meshscale' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, Seed) == 0x000320, "Member 'ABP_Holds_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, InteractionPromptParams) == 0x000328, "Member 'ABP_Holds_C::InteractionPromptParams' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, InteractorActor) == 0x000340, "Member 'ABP_Holds_C::InteractorActor' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, MinimumDistanceBetweenHolds) == 0x000348, "Member 'ABP_Holds_C::MinimumDistanceBetweenHolds' has a wrong offset!");
static_assert(offsetof(ABP_Holds_C, MaximumDistanceBetweenHolds) == 0x000350, "Member 'ABP_Holds_C::MaximumDistanceBetweenHolds' has a wrong offset!");

}

