#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AN_ENM_Footsteps_IsBattle

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EFootstepsType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.Received_Notify
// 0x02E8 (0x02E8 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_Received_Notify final
{
public:
	class USkeletalMeshComponent*                 MeshComp;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UAnimSequenceBase*                      Animation;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FAnimNotifyEventReference              EventReference;                                    // 0x0010(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              local_SurfaceType;                                 // 0x0041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          local_IsBattle;                                    // 0x0042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                local_PlaySoundLocation;                           // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 local_MeshComponent;                               // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue;            // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetSocketLocation_ReturnValue_1;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   K2Node_DynamicCast_AsBP_J_RPG_Enemy_World_Base_Seamless; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Enemy_Battle_Base_C*           K2Node_DynamicCast_AsBP_J_RPG_Enemy_Battle_Base;   // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00C0(0x0010)(ConstParm, ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0100(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FB[0x1];                                      // 0x01FB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0250(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0278(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0280(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBP_Interface_NiagaraWaterInteraction_C> K2Node_DynamicCast_AsBP_Interface_Niagara_Water_Interaction; // 0x02D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x02E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x02E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_Received_Notify) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_Received_Notify");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_Received_Notify) == 0x0002E8, "Wrong size on AN_ENM_Footsteps_IsBattle_C_Received_Notify");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, MeshComp) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::MeshComp' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, Animation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::Animation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, EventReference) == 0x000010, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::EventReference' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, ReturnValue) == 0x000040, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, local_SurfaceType) == 0x000041, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::local_SurfaceType' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, local_IsBattle) == 0x000042, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::local_IsBattle' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, local_PlaySoundLocation) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::local_PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, local_MeshComponent) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::local_MeshComponent' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_GetSocketLocation_ReturnValue) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_GetSocketLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_GetSocketLocation_ReturnValue_1) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_GetSocketLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_GetOwner_ReturnValue) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, K2Node_DynamicCast_AsBP_J_RPG_Enemy_World_Base_Seamless) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::K2Node_DynamicCast_AsBP_J_RPG_Enemy_World_Base_Seamless' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, K2Node_DynamicCast_AsBP_J_RPG_Enemy_Battle_Base) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::K2Node_DynamicCast_AsBP_J_RPG_Enemy_Battle_Base' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, K2Node_DynamicCast_bSuccess_1) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, Temp_object_Variable) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_Add_VectorVector_ReturnValue) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_LineTraceSingle_OutHit) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_LineTraceSingle_ReturnValue) == 0x0001F8, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_bBlockingHit) == 0x0001F9, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_bInitialOverlap) == 0x0001FA, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_Time) == 0x0001FC, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_Distance) == 0x000200, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_Location) == 0x000208, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_ImpactPoint) == 0x000220, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_Normal) == 0x000238, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_ImpactNormal) == 0x000250, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_PhysMat) == 0x000268, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_HitActor) == 0x000270, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_HitComponent) == 0x000278, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_HitBoneName) == 0x000280, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_BoneName) == 0x000288, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_HitItem) == 0x000290, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_ElementIndex) == 0x000294, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_FaceIndex) == 0x000298, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_TraceStart) == 0x0002A0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_BreakHitResult_TraceEnd) == 0x0002B8, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, K2Node_DynamicCast_AsBP_Interface_Niagara_Water_Interaction) == 0x0002D0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::K2Node_DynamicCast_AsBP_Interface_Niagara_Water_Interaction' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, K2Node_DynamicCast_bSuccess_2) == 0x0002E0, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_DoesImplementInterface_ReturnValue) == 0x0002E1, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_Received_Notify, CallFunc_IsValid_ReturnValue) == 0x0002E2, "Member 'AN_ENM_Footsteps_IsBattle_C_Received_Notify::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.PlaySoundBasedOnMonsterSize
// 0x0028 (0x0028 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize final
{
public:
	EPhysicalSurface                              SurfaceType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaySoundLocation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattle_;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize) == 0x000028, "Wrong size on AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize, SurfaceType_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize::SurfaceType_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize, PlaySoundLocation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize::PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize, IsBattle_) == 0x000020, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize::IsBattle_' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize, K2Node_SwitchEnum_CmpSuccess) == 0x000021, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySoundBasedOnMonsterSize::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.PlaySmallSound
// 0x0138 (0x0138 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_PlaySmallSound final
{
public:
	EPhysicalSurface                              SurfaceType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaySoundLocation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattle_;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable_1;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_7;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_9;                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_10;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_11;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_12;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_13;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_14;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_15;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_16;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_17;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_18;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_19;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_20;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_21;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_22;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_23;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_24;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_25;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_26;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      K2Node_Select_Default_1;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_PlaySmallSound");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound) == 0x000138, "Wrong size on AN_ENM_Footsteps_IsBattle_C_PlaySmallSound");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, SurfaceType_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::SurfaceType_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, PlaySoundLocation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, IsBattle_) == 0x000020, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::IsBattle_' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable) == 0x000028, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, CallFunc_SelectInt_ReturnValue) == 0x000030, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_1) == 0x000038, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_byte_Variable) == 0x000040, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_2) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_3) == 0x000050, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_4) == 0x000058, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_5) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_6) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_7) == 0x000070, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_8) == 0x000078, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_9) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_10) == 0x000088, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_11) == 0x000090, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_12) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_13) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_14) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_15) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_16) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_17) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_18) == 0x0000C8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_19) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_20) == 0x0000D8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_21) == 0x0000E0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_22) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_23) == 0x0000F0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_24) == 0x0000F8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_25) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_object_Variable_26) == 0x000108, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, CallFunc_SelectInt_ReturnValue_1) == 0x000110, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, CallFunc_Max_ReturnValue) == 0x000114, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, K2Node_Select_Default) == 0x000118, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, CallFunc_Add_IntInt_ReturnValue) == 0x000120, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, Temp_int_Variable) == 0x000124, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, CallFunc_And_IntInt_ReturnValue) == 0x000128, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlaySmallSound, K2Node_Select_Default_1) == 0x000130, "Member 'AN_ENM_Footsteps_IsBattle_C_PlaySmallSound::K2Node_Select_Default_1' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.PlayMediumSound
// 0x0138 (0x0138 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_PlayMediumSound final
{
public:
	EPhysicalSurface                              SurfaceType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaySoundLocation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattle_;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable_1;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_7;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_9;                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_10;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_11;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_12;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_13;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_14;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_15;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_16;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_17;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_18;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_19;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_20;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_21;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_22;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_23;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_24;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_25;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_26;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      K2Node_Select_Default_1;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_PlayMediumSound");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound) == 0x000138, "Wrong size on AN_ENM_Footsteps_IsBattle_C_PlayMediumSound");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, SurfaceType_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::SurfaceType_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, PlaySoundLocation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, IsBattle_) == 0x000020, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::IsBattle_' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable) == 0x000028, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, CallFunc_SelectInt_ReturnValue) == 0x000030, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_1) == 0x000038, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_byte_Variable) == 0x000040, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_2) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_3) == 0x000050, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_4) == 0x000058, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_5) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_6) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_7) == 0x000070, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_8) == 0x000078, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_9) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_10) == 0x000088, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_11) == 0x000090, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_12) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_13) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_14) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_15) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_16) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_17) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_18) == 0x0000C8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_19) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_20) == 0x0000D8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_21) == 0x0000E0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_22) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_23) == 0x0000F0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_24) == 0x0000F8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_25) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_object_Variable_26) == 0x000108, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, CallFunc_SelectInt_ReturnValue_1) == 0x000110, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, CallFunc_Max_ReturnValue) == 0x000114, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, K2Node_Select_Default) == 0x000118, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, CallFunc_Add_IntInt_ReturnValue) == 0x000120, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, Temp_int_Variable) == 0x000124, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, CallFunc_And_IntInt_ReturnValue) == 0x000128, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayMediumSound, K2Node_Select_Default_1) == 0x000130, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayMediumSound::K2Node_Select_Default_1' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.PlayLargeSound
// 0x0138 (0x0138 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_PlayLargeSound final
{
public:
	EPhysicalSurface                              SurfaceType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaySoundLocation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattle_;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable_1;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_7;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_9;                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_10;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_11;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_12;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_13;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_14;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_15;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_16;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_17;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_18;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_19;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_20;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_21;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_22;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_23;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_24;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_25;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_26;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      K2Node_Select_Default_1;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_PlayLargeSound");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound) == 0x000138, "Wrong size on AN_ENM_Footsteps_IsBattle_C_PlayLargeSound");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, SurfaceType_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::SurfaceType_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, PlaySoundLocation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, IsBattle_) == 0x000020, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::IsBattle_' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable) == 0x000028, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, CallFunc_SelectInt_ReturnValue) == 0x000030, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_1) == 0x000038, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_byte_Variable) == 0x000040, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_2) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_3) == 0x000050, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_4) == 0x000058, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_5) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_6) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_7) == 0x000070, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_8) == 0x000078, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_9) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_10) == 0x000088, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_11) == 0x000090, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_12) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_13) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_14) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_15) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_16) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_17) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_18) == 0x0000C8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_19) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_20) == 0x0000D8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_21) == 0x0000E0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_22) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_23) == 0x0000F0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_24) == 0x0000F8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_25) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_object_Variable_26) == 0x000108, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, CallFunc_SelectInt_ReturnValue_1) == 0x000110, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, CallFunc_Max_ReturnValue) == 0x000114, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, K2Node_Select_Default) == 0x000118, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, CallFunc_Add_IntInt_ReturnValue) == 0x000120, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, Temp_int_Variable) == 0x000124, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, CallFunc_And_IntInt_ReturnValue) == 0x000128, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayLargeSound, K2Node_Select_Default_1) == 0x000130, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayLargeSound::K2Node_Select_Default_1' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.PlayHumanoidSound
// 0x0138 (0x0138 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound final
{
public:
	EPhysicalSurface                              SurfaceType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaySoundLocation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattle_;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundAttenuation*                      Temp_object_Variable_1;                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_7;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_9;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_10;                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_11;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_12;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_13;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_14;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_15;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_16;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_17;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_18;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_19;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_20;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_21;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_22;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_23;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_24;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_25;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_26;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      K2Node_Select_Default_1;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound) == 0x000138, "Wrong size on AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, SurfaceType_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::SurfaceType_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, PlaySoundLocation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, IsBattle_) == 0x000020, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::IsBattle_' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable) == 0x000028, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_1) == 0x000030, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_byte_Variable) == 0x000038, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_2) == 0x000040, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_3) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_4) == 0x000050, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_5) == 0x000058, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_6) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_7) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_8) == 0x000070, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_9) == 0x000078, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_10) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_11) == 0x000088, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_12) == 0x000090, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_13) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_14) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_15) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_16) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_17) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_18) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_19) == 0x0000C8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_20) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_21) == 0x0000D8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_22) == 0x0000E0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_23) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_24) == 0x0000F0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_25) == 0x0000F8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_object_Variable_26) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, CallFunc_SelectInt_ReturnValue) == 0x000108, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, K2Node_Select_Default) == 0x000110, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, Temp_int_Variable) == 0x000118, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, CallFunc_SelectInt_ReturnValue_1) == 0x00011C, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, CallFunc_Max_ReturnValue) == 0x000120, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, CallFunc_Add_IntInt_ReturnValue) == 0x000124, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, CallFunc_And_IntInt_ReturnValue) == 0x000128, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound, K2Node_Select_Default_1) == 0x000130, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayHumanoidSound::K2Node_Select_Default_1' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.PlayExtraSmallSound
// 0x0138 (0x0138 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound final
{
public:
	EPhysicalSurface                              SurfaceType_0;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PlaySoundLocation;                                 // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsBattle_;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable;                              // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      Temp_object_Variable_1;                            // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_7;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_9;                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_10;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_11;                           // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_12;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_13;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_14;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_15;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_16;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_17;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_18;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_19;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_20;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_21;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_22;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_23;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_24;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_25;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_26;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_SelectInt_ReturnValue_1;                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Max_ReturnValue;                          // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_And_IntInt_ReturnValue;                   // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      K2Node_Select_Default_1;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound) == 0x000138, "Wrong size on AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, SurfaceType_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::SurfaceType_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, PlaySoundLocation) == 0x000008, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::PlaySoundLocation' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, IsBattle_) == 0x000020, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::IsBattle_' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable) == 0x000028, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, CallFunc_SelectInt_ReturnValue) == 0x000030, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::CallFunc_SelectInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_1) == 0x000038, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_byte_Variable) == 0x000040, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_2) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_3) == 0x000050, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_4) == 0x000058, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_5) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_6) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_7) == 0x000070, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_8) == 0x000078, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_9) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_10) == 0x000088, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_11) == 0x000090, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_12) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_13) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_14) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_15) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_16) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_17) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_18) == 0x0000C8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_19) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_20) == 0x0000D8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_21) == 0x0000E0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_22) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_23) == 0x0000F0, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_24) == 0x0000F8, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_25) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_25' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_object_Variable_26) == 0x000108, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_object_Variable_26' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, CallFunc_SelectInt_ReturnValue_1) == 0x000110, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::CallFunc_SelectInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, CallFunc_Max_ReturnValue) == 0x000114, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::CallFunc_Max_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, K2Node_Select_Default) == 0x000118, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, CallFunc_Add_IntInt_ReturnValue) == 0x000120, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, Temp_int_Variable) == 0x000124, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, CallFunc_And_IntInt_ReturnValue) == 0x000128, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::CallFunc_And_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound, K2Node_Select_Default_1) == 0x000130, "Member 'AN_ENM_Footsteps_IsBattle_C_PlayExtraSmallSound::K2Node_Select_Default_1' has a wrong offset!");

// Function AN_ENM_Footsteps_IsBattle.AN_ENM_Footsteps_IsBattle_C.ExecutreTriggerParametersForSurfaceType
// 0x0140 (0x0140 - 0x0000)
struct AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType final
{
public:
	EPhysicalSurface                              Index_0;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Temp_name_Variable;                                // 0x0004(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_1;                              // 0x000C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_2;                              // 0x0014(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_3;                              // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_4;                              // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_5;                              // 0x002C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_6;                              // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Temp_name_Variable_7;                              // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable;                              // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_7;                            // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_8;                            // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_9;                            // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_10;                           // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_11;                           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_12;                           // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_13;                           // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_14;                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_15;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_16;                           // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_17;                           // 0x00D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_18;                           // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_19;                           // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_20;                           // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_21;                           // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_22;                           // 0x00F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_23;                           // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_24;                           // 0x0108(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             K2Node_Select_Default;                             // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EFootstepsType                                Temp_byte_Variable_1;                              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IAudioParameterControllerInterface> K2Node_DynamicCast_AsAudio_Parameter_Controller_Interface; // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0130(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   K2Node_Select_Default_1;                           // 0x0134(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType) == 0x000008, "Wrong alignment on AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType");
static_assert(sizeof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType) == 0x000140, "Wrong size on AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Index_0) == 0x000000, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Index_0' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable) == 0x000004, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_1) == 0x00000C, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_2) == 0x000014, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_3) == 0x00001C, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_4) == 0x000024, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_5) == 0x00002C, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_6) == 0x000034, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_name_Variable_7) == 0x00003C, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_name_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_byte_Variable) == 0x000044, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable) == 0x000048, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_1) == 0x000050, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_2) == 0x000058, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_3) == 0x000060, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_4) == 0x000068, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_5) == 0x000070, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_6) == 0x000078, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_7) == 0x000080, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_7' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_8) == 0x000088, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_8' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_9) == 0x000090, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_9' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_10) == 0x000098, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_10' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_11) == 0x0000A0, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_11' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_12) == 0x0000A8, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_12' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_13) == 0x0000B0, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_13' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_14) == 0x0000B8, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_14' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_15) == 0x0000C0, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_15' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_16) == 0x0000C8, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_16' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_17) == 0x0000D0, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_17' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_18) == 0x0000D8, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_18' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_19) == 0x0000E0, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_19' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_20) == 0x0000E8, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_20' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_21) == 0x0000F0, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_21' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_22) == 0x0000F8, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_22' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_23) == 0x000100, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_23' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_object_Variable_24) == 0x000108, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_object_Variable_24' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, K2Node_Select_Default) == 0x000110, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, Temp_byte_Variable_1) == 0x000118, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, K2Node_DynamicCast_AsAudio_Parameter_Controller_Interface) == 0x000120, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::K2Node_DynamicCast_AsAudio_Parameter_Controller_Interface' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, K2Node_DynamicCast_bSuccess) == 0x000130, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType, K2Node_Select_Default_1) == 0x000134, "Member 'AN_ENM_Footsteps_IsBattle_C_ExecutreTriggerParametersForSurfaceType::K2Node_Select_Default_1' has a wrong offset!");

}

