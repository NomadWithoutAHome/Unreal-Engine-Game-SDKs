#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameDifficultyManager

#include "Basic.hpp"

#include "E_GameDifficulty_structs.hpp"
#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameDifficultyManager.BP_GameDifficultyManager_C
// 0x0018 (0x0040 - 0x0028)
class UBP_GameDifficultyManager_C final : public UExtendedObject
{
public:
	E_GameDifficulty                              SelectedDifficulty;                                // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GameDifficulty                              CurrentDifficulty;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_GameDifficulty                              LowestDifficulty;                                  // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnGameDifficultyChanged;                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void ApplySelectedGameDifficulty(bool DispatchChanges);
	E_GameDifficulty GetCurrentDifficulty();
	void IsCurrentDifficultyDirty(bool* IsDirty);
	void LoadState(const struct FS_GameDifficultySaveData& SaveData);
	void RevertSelectedGameDiffculty();
	void SaveState(struct FS_GameDifficultySaveData& SaveData);
	void SelectGameDifficulty(E_GameDifficulty Difficulty);
	void SetCurrentDifficulty(E_GameDifficulty Difficulty);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameDifficultyManager_C">();
	}
	static class UBP_GameDifficultyManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameDifficultyManager_C>();
	}
};
static_assert(alignof(UBP_GameDifficultyManager_C) == 0x000008, "Wrong alignment on UBP_GameDifficultyManager_C");
static_assert(sizeof(UBP_GameDifficultyManager_C) == 0x000040, "Wrong size on UBP_GameDifficultyManager_C");
static_assert(offsetof(UBP_GameDifficultyManager_C, SelectedDifficulty) == 0x000028, "Member 'UBP_GameDifficultyManager_C::SelectedDifficulty' has a wrong offset!");
static_assert(offsetof(UBP_GameDifficultyManager_C, CurrentDifficulty) == 0x000029, "Member 'UBP_GameDifficultyManager_C::CurrentDifficulty' has a wrong offset!");
static_assert(offsetof(UBP_GameDifficultyManager_C, LowestDifficulty) == 0x00002A, "Member 'UBP_GameDifficultyManager_C::LowestDifficulty' has a wrong offset!");
static_assert(offsetof(UBP_GameDifficultyManager_C, OnGameDifficultyChanged) == 0x000030, "Member 'UBP_GameDifficultyManager_C::OnGameDifficultyChanged' has a wrong offset!");

}

