#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DataAsset_Skill

#include "Basic.hpp"

#include "E_jRPG_SpeedModifier_structs.hpp"
#include "ESkillType_structs.hpp"
#include "EAttackType_structs.hpp"
#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "SandFall_classes.hpp"
#include "ESkillElementOverride_structs.hpp"
#include "E_jRPG_TargetingType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DataAsset_Skill.BP_DataAsset_Skill_C
// 0x00C0 (0x0120 - 0x0060)
class UBP_DataAsset_Skill_C final : public USkillDataAsset
{
public:
	class FName                                   NameID;                                            // 0x0060(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    ActionRow;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, NoDestructor)
	ESkillType                                    SkillType;                                         // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         APCost;                                            // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   Name_0;                                            // 0x0080(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   Description;                                       // 0x0090(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   ShortDescription;                                  // 0x00A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_jRPG_TargetingType                          TargetingType;                                     // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSkillDataComponent_Wrapper>    SkillComponents;                                   // 0x00B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, ContainsInstancedReference)
	TArray<class UBP_BattleAction_DataAsset_C*>   ActionData;                                        // 0x00C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	EAttackType                                   BaseElementalType;                                 // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESkillElementOverride                         DynamicElementOverride;                            // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   SkillScript;                                       // 0x00E0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	E_jRPG_SpeedModifier                          TimelinePreview_TargetSpeedModifier;               // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimelinePreview_TargetSpeedModifierDuration;       // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TimelinePreview_StunTurnDuration;                  // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillDataComponent_Wrapper            SkillDataComponent;                                // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, ContainsInstancedReference)

public:
	void BPI_GetDependencies(TArray<TSoftClassPtr<class UClass>>* Classes, TArray<TSoftObjectPtr<class UObject>>* Assets, TArray<TScriptInterface<class IBPI_LoadingDependenciesSource_C>>* ExternalDependencies);
	int32 GetSkillBaseCost();
	int32 GetSkillCost(class UBP_SkillState_C* SkillState);
	void FindSkillComponentsByClass(class UClass* SkillComponentClass, TArray<class UBP_SkillDataComponent_Base_C*>* Array);
	void GetSkillComponentsAsBP(TArray<class UBP_SkillDataComponent_Base_C*>* Array);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DataAsset_Skill_C">();
	}
	static class UBP_DataAsset_Skill_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DataAsset_Skill_C>();
	}
};
static_assert(alignof(UBP_DataAsset_Skill_C) == 0x000008, "Wrong alignment on UBP_DataAsset_Skill_C");
static_assert(sizeof(UBP_DataAsset_Skill_C) == 0x000120, "Wrong size on UBP_DataAsset_Skill_C");
static_assert(offsetof(UBP_DataAsset_Skill_C, NameID) == 0x000060, "Member 'UBP_DataAsset_Skill_C::NameID' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, ActionRow) == 0x000068, "Member 'UBP_DataAsset_Skill_C::ActionRow' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, SkillType) == 0x000078, "Member 'UBP_DataAsset_Skill_C::SkillType' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, APCost) == 0x00007C, "Member 'UBP_DataAsset_Skill_C::APCost' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, Name_0) == 0x000080, "Member 'UBP_DataAsset_Skill_C::Name_0' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, Description) == 0x000090, "Member 'UBP_DataAsset_Skill_C::Description' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, ShortDescription) == 0x0000A0, "Member 'UBP_DataAsset_Skill_C::ShortDescription' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, TargetingType) == 0x0000B0, "Member 'UBP_DataAsset_Skill_C::TargetingType' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, SkillComponents) == 0x0000B8, "Member 'UBP_DataAsset_Skill_C::SkillComponents' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, ActionData) == 0x0000C8, "Member 'UBP_DataAsset_Skill_C::ActionData' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, BaseElementalType) == 0x0000D8, "Member 'UBP_DataAsset_Skill_C::BaseElementalType' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, DynamicElementOverride) == 0x0000D9, "Member 'UBP_DataAsset_Skill_C::DynamicElementOverride' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, SkillScript) == 0x0000E0, "Member 'UBP_DataAsset_Skill_C::SkillScript' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, TimelinePreview_TargetSpeedModifier) == 0x000108, "Member 'UBP_DataAsset_Skill_C::TimelinePreview_TargetSpeedModifier' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, TimelinePreview_TargetSpeedModifierDuration) == 0x00010C, "Member 'UBP_DataAsset_Skill_C::TimelinePreview_TargetSpeedModifierDuration' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, TimelinePreview_StunTurnDuration) == 0x000110, "Member 'UBP_DataAsset_Skill_C::TimelinePreview_StunTurnDuration' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_Skill_C, SkillDataComponent) == 0x000118, "Member 'UBP_DataAsset_Skill_C::SkillDataComponent' has a wrong offset!");

}

