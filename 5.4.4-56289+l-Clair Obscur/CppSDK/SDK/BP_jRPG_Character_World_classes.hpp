#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Character_World

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "EInputDevices_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "EFreeAimFeedbackType_structs.hpp"
#include "EInWorldAudioContainerComponents_structs.hpp"
#include "FSoundEvent_structs.hpp"
#include "FluidForceDynamic_structs.hpp"
#include "MovementSettings_structs.hpp"
#include "FCharacterExplorationAudioProfile_structs.hpp"
#include "ALSV4_CPP_structs.hpp"
#include "E_jRPG_CharacterWorldCapability_structs.hpp"
#include "S_jRPG_Character_World_Capabilities_structs.hpp"
#include "S_jRPG_Character_World_Movement_Data_structs.hpp"
#include "ALS_CharacterBP_classes.hpp"
#include "EDialogueCameraType_structs.hpp"
#include "E_NPC_SpolightTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_Character_World.BP_jRPG_Character_World_C
// 0x0E40 (0x1880 - 0x0A40)
class ABP_jRPG_Character_World_C final : public AALS_CharacterBP_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_jRPG_Character_World_C;          // 0x0A38(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCameraShakeSourceComponent*            CameraShakeSource_Moving;                          // 0x0A40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterSpringArmComponent*           CharacterSpringArm;                                // 0x0A48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   Main_CineCamera;                                   // 0x0A50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Camera_PreCinematic;                               // 0x0A58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LookAtTarget;                                      // 0x0A60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       MainCamera;                                        // 0x0A68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USmartSpringArmComponent*               SmartSpringArm_MainCamera;                         // 0x0A70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      CompanionAvoidanceCapsule;                         // 0x0A78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterSkinComponent_C*           BP_CharacterSkinComponent;                         // 0x0A80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CharacterVisualAlterationsComponent_C* BP_CharacterVisualAlterationsComponent;         // 0x0A88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Vocals_01;                                      // 0x0A90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Vocals_02;                                      // 0x0A98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Hand_R_01;                                      // 0x0AA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_R_01;                                    // 0x0AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_L_01;                                    // 0x0AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Hand_L_01;                                      // 0x0AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Weapon_L_02;                                    // 0x0AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_FT_R;                                           // 0x0AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_FT_L;                                           // 0x0AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWorldPartitionStreamingSourceComponent* WorldPartitionStreamingSource;                    // 0x0AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Audio_Dialogue;                                    // 0x0AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_DialogueCameraControllerComponent_C* BP_DialogueCameraControllerComponent;             // 0x0AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Dialogue_RimLeft;                        // 0x0AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Dialogue_FrontRight;                     // 0x0AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Dialogue_RimRight;                       // 0x0B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight_Dialogue_FrontLeft;                      // 0x0B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue6;                              // 0x0B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue9;                              // 0x0B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue8;                              // 0x0B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue7;                              // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue4;                              // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue2;                              // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue3;                              // 0x0B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue10;                             // 0x0B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue5;                              // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue1;                              // 0x0B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FocusPoint_Dialogue;                               // 0x0B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCineCameraComponent*                   CineCamera_Dialogue_Main;                          // 0x0B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_NPCAnimationComponent_C*            BP_NPCAnimationComponent;                          // 0x0B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_EyeEffectsControllerComponent_C*    BP_EyeEffectsControllerComponent;                  // 0x0B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ExplorationCapacityComponent_Rope_C* BP_ExplorationCapacityComponent_Rope;             // 0x0B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ClimbingComponent_C*                BP_ClimbingComponent;                              // 0x0B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CameraControllerComponent_C*        BP_CameraControllerComponent;                      // 0x0B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CameraLookAtControllerComponent_C*  BP_CameraLookAtControllerComponent;                // 0x0B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AICompanion_CompanionManager_C*     BP_AICompanion_CompanionManager;                   // 0x0BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AICompanion_TargetPointsComponent_C* BP_AICompanion_TargetPointsComponent;             // 0x0BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActorAimCamera;                               // 0x0BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm_FreeAim;                                 // 0x0BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_VelocityControllerComponent_C*      BP_VelocityControllerComponent;                    // 0x0BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Component_WorldAnimationProfile_C*  BP_Component_WorldAnimationProfile;                // 0x0BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FacialAnimationComponent_C*         BP_FacialAnimationComponent;                       // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    Torch_SpringArm;                                   // 0x0BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailSource_Component_C*            BP_TrailSource_Component_r;                        // 0x0BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_TrailSource_Component_C*            BP_TrailSource_Component_l;                        // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ExplorationCapacityComponent_GrappleHook_C* BP_ExplorationCapacityComponent_GrappleHook; // 0x0BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMotionWarpingComponent*                MotionWarping;                                     // 0x0BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPC_LightAreaMecanic_C*                BPC_LightAreaMecanic;                              // 0x0C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ExplorationCapacityComponent_FreeAimTeleport_C* BP_ExplorationCapacityComponent_FreeAimTeleport; // 0x0C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_ExplorationCapacityComponent_FreeAimDamage_C* BP_ExplorationCapacityComponent_FreeAimDamage; // 0x0C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Idle;                                           // 0x0C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_SFX_02;                                         // 0x0C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Foleys_02;                                      // 0x0C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_Foleys_01;                                      // 0x0C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_SFX_01;                                         // 0x0C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_AudioCharacter_Manager_C*           BP_AudioCharacter_Manager;                         // 0x0C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight1;                                        // 0x0C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ProjectileSpawnLocation;                           // 0x0C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   ChildActor_Skin;                                   // 0x0C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow2;                                            // 0x0C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   SneakActorCamera;                                  // 0x0C70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        EndSneakCamArrow;                                  // 0x0C78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        StartSneakCamArrow;                                // 0x0C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URectLightComponent*                    RectLight;                                         // 0x0C88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DashFxLoc1;                                        // 0x0C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_FreeAim_C*                          BP_FreeAimControlComponent;                        // 0x0C98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       ShoulderCam;                                       // 0x0CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    ShoulderSpringArm;                                 // 0x0CA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        ExploAtkArrow;                                     // 0x0CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        DashFxLoc;                                         // 0x0CB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   NinjaTraceMesh;                                    // 0x0CC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    CharaxcterLightBack;                               // 0x0CC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    CharacterLightFront;                               // 0x0CD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          WorldStrikeCollision;                              // 0x0CD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          DialogBox;                                         // 0x0CE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ExplorationAttack_HitBoxTrack_F552019B465836AC171344A345E24AF5; // 0x0CE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_ExplorationAttack_StepForwardTrack_F552019B465836AC171344A345E24AF5; // 0x0CEC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_ExplorationAttack__Direction_F552019B465836AC171344A345E24AF5; // 0x0CF0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CF1[0x7];                                      // 0x0CF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_ExplorationAttack;                        // 0x0CF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_DistanceMultiplier_530E22E44FEF074B39B902B36F8EE6E0; // 0x0D00(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_530E22E44FEF074B39B902B36F8EE6E0; // 0x0D04(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D05[0x3];                                      // 0x0D05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x0D08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         EnableIKTimeline_IKAlpha_DDD7A86D4122DF4EACB63E877B021AFE; // 0x0D10(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            EnableIKTimeline__Direction_DDD7A86D4122DF4EACB63E877B021AFE; // 0x0D14(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D15[0x3];                                      // 0x0D15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     EnableIKTimeline;                                  // 0x0D18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_SpringArmMovement_E5045E2A45345B73800A59A639C19BD6; // 0x0D20(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_E5045E2A45345B73800A59A639C19BD6; // 0x0D24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D25[0x3];                                      // 0x0D25(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0D28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         FoV_Control_Timeline_SpringArmMovement_9901529640326D15C1E16593984FA550; // 0x0D30(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FoV_Control_Timeline__Direction_9901529640326D15C1E16593984FA550; // 0x0D34(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D35[0x3];                                      // 0x0D35(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FoV_Control_Timeline;                              // 0x0D38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmReset_Timeline_SpringArmMovement_97E0D35D46F19FBD762F89AA85055A4E; // 0x0D40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpringArmReset_Timeline__Direction_97E0D35D46F19FBD762F89AA85055A4E; // 0x0D44(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D45[0x3];                                      // 0x0D45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpringArmReset_Timeline;                           // 0x0D48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         SpringArmControl_Timeline_SpringArmMovement_50E9683048EA6E7F81BD9E94476B74B7; // 0x0D50(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            SpringArmControl_Timeline__Direction_50E9683048EA6E7F81BD9E94476B74B7; // 0x0D54(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D55[0x3];                                      // 0x0D55(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     SpringArmControl_Timeline;                         // 0x0D58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         FX_ArmRingColor_0to1_9F591E5949084DB1308311B637BE9513; // 0x0D60(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FX_ArmRingColor__Direction_9F591E5949084DB1308311B637BE9513; // 0x0D64(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D65[0x3];                                      // 0x0D65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FX_ArmRingColor;                                   // 0x0D68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_GrappeCamera_FieldOfView_CA80C41844AFE0A643BF3BA198223DE5; // 0x0D70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_GrappeCamera__Direction_CA80C41844AFE0A643BF3BA198223DE5; // 0x0D74(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D75[0x3];                                      // 0x0D75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_GrappeCamera;                             // 0x0D78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorInInteractionRange;                           // 0x0D80(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance, Deprecated)
	class AActor*                                 ActorToInteract;                                   // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            PlayerController;                                  // 0x0D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UW_UseWidget_C*                         UseWidget;                                         // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UBP_DialogSystem_C*                     DialogSystemReference;                             // 0x0DA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0DB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTeleporting_;                                    // 0x0DC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC1[0x7];                                      // 0x0DC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               SpeedLinesBlendable;                               // 0x0DC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class UObject*>                        reversibleActors;                                  // 0x0DD0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UObject*>                        reversibleCharacters;                              // 0x0DE0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class UParticleSystemComponent*               Particles;                                         // 0x0DF0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInterface*>             AllMeshMaterials;                                  // 0x0DF8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         JumpCounter;                                       // 0x0E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E0C[0x4];                                      // 0x0E0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDataTableRowHandle                    MovementStruct;                                    // 0x0E10(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class ABP_jRPG_Enemy_World_Base_Seamless_C*   EnemyHit;                                          // 0x0E20(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          DashCooldownActive;                                // 0x0E28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E29[0x7];                                      // 0x0E29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DashDuration;                                      // 0x0E30(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           DashAnimMontage;                                   // 0x0E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DashForce;                                         // 0x0E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        DashVfx;                                           // 0x0E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               TrailFx;                                           // 0x0E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DashZHeight;                                       // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldAdapteDashMovementToGround;                  // 0x0E60(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E61[0x3];                                      // 0x0E61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DashCount;                                         // 0x0E64(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxDashCount;                                      // 0x0E68(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E6C[0x4];                                      // 0x0E6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AdaptativeDashGroundCheck;                         // 0x0E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashInputVectorCache;                              // 0x0E78(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashCamForwardVectorCache;                         // 0x0E90(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DashInterupted;                                    // 0x0EA8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EA9[0x7];                                      // 0x0EA9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreventingLocationCache;                           // 0x0EB0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsDashing;                                        // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DashUseInputVector;                                // 0x0EC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldNotUseAdaptiveDash;                          // 0x0ECA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ECB[0x5];                                      // 0x0ECB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DashForwardChekDistance;                           // 0x0ED0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        AdaptativeDashRoofCheck;                           // 0x0ED8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashCoolDownAerial;                                // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashCoolDownGround;                                // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsWorldMapPawn;                                   // 0x0EF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EF1[0x7];                                      // 0x0EF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DashAtkForce;                                      // 0x0EF8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashAtkHeight;                                     // 0x0F00(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashAtkInputVector;                                // 0x0F08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashAtkCamForwardVector;                           // 0x0F20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               DashAtkTrailFX;                                    // 0x0F38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        AtkCoolDown;                                       // 0x0F40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DashAtkHitBoxSize;                                 // 0x0F48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DashAttackHitBoxHalf_Size;                         // 0x0F50(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDamageLevelElementsLv1;                         // 0x0F68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F69[0x7];                                      // 0x0F69(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           AM_ExplorationAtk;                                 // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ExplorationAttackStepForwardForce;                 // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDamageLevelElementsLv2;                         // 0x0F80(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExploAtkHitSomething;                              // 0x0F81(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanDamageLevelElementsLv3;                         // 0x0F82(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F83[0x5];                                      // 0x0F83(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        DashAttackImpactFX;                                // 0x0F88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DashAtkRecover;                                    // 0x0F90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           AmExploAtkInterupted;                              // 0x0F98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    FreeAimMovementModel;                              // 0x0FA0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    WalkingMovementModel;                              // 0x0FB0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          DEBUG_IsInvisible;                                 // 0x0FC0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC1[0x7];                                      // 0x0FC1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InvisibilityEffectDuration;                        // 0x0FC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CheckpointLocation;                                // 0x0FD0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CheckPointRotation;                                // 0x0FE8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsInDebugFlyMode;                                  // 0x1000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1001[0x7];                                     // 0x1001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DebugFlyingGravityScale;                           // 0x1008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    DebugFlyingMovementModel;                          // 0x1010(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FDataTableRowHandle                    DebugWalkingMovementModel;                         // 0x1020(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	double                                        DebugGravityScaleCache;                            // 0x1030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSneaking;                                        // 0x1038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1039[0x7];                                     // 0x1039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               StartSneakActorRotCache;                           // 0x1040(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                StartSneakActorLocCache;                           // 0x1058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndSneakArrowLoc;                                  // 0x1070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EndSneakArrowRot;                                  // 0x1088(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          StartSneaking;                                     // 0x10A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A1[0x7];                                     // 0x10A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               SneakCamRelativeRotCache;                          // 0x10A8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SneakCameraLocCache;                               // 0x10C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               SneakCameraRotCache;                               // 0x10D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FVector                                SneakCamRelativeLocCache;                          // 0x10F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndSneakCamLocCache;                               // 0x1108(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EndSneakCamRotCache;                               // 0x1120(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          IsClimbing;                                        // 0x1138(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1139[0x7];                                     // 0x1139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       Sneak_Spline_to_Follow;                            // 0x1140(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        SneakDistanceValue;                                // 0x1148(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceOnSpline;                                  // 0x1150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StartSneakFromSplineEnd;                           // 0x1158(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1159[0x7];                                     // 0x1159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        InputForwardBackwardValue;                         // 0x1160(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndSneakCamWorldLoc;                               // 0x1168(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               EndSneakCamWorldRot;                               // 0x1180(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UArrowComponent*                        SneakEntryArrow;                                   // 0x1198(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_SneakCam_C*                         SneakCam;                                          // 0x11A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UAnimMontage*                           SneakExitAtSplineEnd;                              // 0x11A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           SneakExitAtSplineStart;                            // 0x11B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FFluidForceDynamic                     FluidForceDynamic_Settings;                        // 0x11B8(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          TutoGameIsPaused;                                  // 0x1228(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1229[0x7];                                     // 0x1229(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_TutoPanel_C*                       CurrentTutoPanel;                                  // 0x1230(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UWBP_DialogNotifBox_C*                  CurrentDialogUI;                                   // 0x1238(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        EndCombatTransitionDuration;                       // 0x1240(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          LightingActiveWhenStartPlaying;                    // 0x1248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1249[0x7];                                     // 0x1249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                NearestLightingScenario;                           // 0x1250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        ClosestDistance;                                   // 0x1258(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Distance;                                      // 0x1260(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TSoftClassPtr<class UClass>                   Asset_Class;                                       // 0x1268(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	TMap<class FName, class UClass*>              PreloadedHeads;                                    // 0x1290(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_Arm_Ring_V2_C*                      As_BP_Arm_Ring_V2;                                 // 0x12E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	bool                                          Starting_from_Spline_Start;                        // 0x12E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12E9[0x7];                                     // 0x12E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             SneakCamTransformCache;                            // 0x12F0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             SneakCamTransformInverseCache;                     // 0x1350(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ExitFromStartBox;                                  // 0x13B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13B1[0x7];                                     // 0x13B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UArrowComponent*                        Exit_from_Entry_Arrow;                             // 0x13B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Exit_from_Exit_Arrow;                              // 0x13C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Sneak_Custom_Look_At;                              // 0x13C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C9[0x7];                                     // 0x13C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        BrakingDecelerationFlyingCache;                    // 0x13D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_FlyMode_C*                         FlyModeWidget;                                     // 0x13D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        DeadZoneCameraLagSpeedCache;                       // 0x13E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeadZoneCamera_Lag_Speed;                          // 0x13E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMovementSettings                      CurrentMovementSettingsCache;                      // 0x13F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        BrakingDecelerationFallingDeadZoneCache;           // 0x1410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFSoundEvent                           Sound_Event;                                       // 0x1418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FSoundEventDataTableRowHandle          Sound_Event_0;                                     // 0x1420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class AWaterBody*                             WaterBody;                                         // 0x1430(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DEBUG_DashTraceTime;                               // 0x1438(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDrawDebugTrace                               DEBUG_DashTraceVisibility;                         // 0x1440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1441[0x7];                                     // 0x1441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Relative_LocationSpringArmCache;                   // 0x1448(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                _CameraCacheRelativeLocation;                      // 0x1460(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CharacterLocationResetInProgress;                  // 0x1478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsManorCharacter;                                  // 0x1479(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_147A[0x6];                                     // 0x147A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFSoundEvent                           SD_CharacterWorld_CharaSwitch;                     // 0x1480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFSoundEvent                           SD_CharacterWorld_DoubleJump;                      // 0x1488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFSoundEvent                           SD_CharacterWorld_Jump;                            // 0x1490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFSoundEvent                           SD_CharacterWorld_WorldStrike;                     // 0x1498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFSoundEvent                           SD_CharacterWorld_Dash;                            // 0x14A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFSoundEvent                           SD_CharacterWorld_Landed;                          // 0x14A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	struct FFSoundEvent                           SD_CharacterWorld_MantleReachTop;                  // 0x14B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	bool                                          CanHeadRotate;                                     // 0x14B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingDebugTp;                                    // 0x14B9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanClimb;                                          // 0x14BA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14BB[0x5];                                     // 0x14BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FieldOfViewCache;                                  // 0x14C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CameraLagSpeedCache;                               // 0x14C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TargetArmLengthCache;                              // 0x14D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SocketOffsetCache;                                 // 0x14D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TargetOffsetCache;                                 // 0x14F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocation;                                  // 0x1508(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceTraveled;                                  // 0x1520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FreeAimShootingCooldown;                           // 0x1528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                OriginalCameraLocation;                            // 0x1530(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFCharacterExplorationAudioProfile     CharacterExplorationAudioProfile;                  // 0x1548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	int32                                         DebugFlySpeedIndex;                                // 0x1550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1554[0x4];                                     // 0x1554(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_SpawnPointLevelProto_C*             SpawnPointCache;                                   // 0x1558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsUsingShortJump;                                  // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1561[0x7];                                     // 0x1561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_ShortJumper_C*                      CurrentShortJump;                                  // 0x1568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   ActiveCharacterAtPreload;                          // 0x1570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_CharacterExplorationAudioProfile_C* DataAsset_ExplorationAudioProfile;       // 0x1578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_GameplayRoom_C*>             ActiveRooms;                                       // 0x1580(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class ABP_jRPG_Character_World_C* Character)> OnActiveRoomsChanged; // 0x1590(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	double                                        DownRate;                                          // 0x15A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GamepadCameraSpeedUpDown;                          // 0x15A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GamepadCameraSpeedLeftRight;                       // 0x15B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15B8[0x8];                                     // 0x15B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TransformBeforeTPMenu;                             // 0x15C0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AExponentialHeightFog*>          FogsActivatedBeforeOpeningMenu;                    // 0x1620(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          IsInExplorationAttack;                             // 0x1630(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1631[0x7];                                     // 0x1631(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FXArmRingMaterial;                                 // 0x1638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EFreeAimFeedbackType                          CurrentFreeaimFeedback;                            // 0x1640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1641[0x3];                                     // 0x1641(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringArmLengthBeforeMovement;                     // 0x1644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxWalkSpeedCache;                                 // 0x1648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FovBeforeMovement;                                 // 0x164C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLagMaxDistanceBeforeMovement;                // 0x1650(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraLagMaxDistanceCache;                         // 0x1654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EALSOverlayState                              ChangeOverlay;                                     // 0x1658(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1659[0x7];                                     // 0x1659(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_jRPG_CharacterWorldCapability, int32>  CharacterCapabilities;                             // 0x1660(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_jRPG_Character_World_Capabilities   Override_Character_Capabilites;                    // 0x16B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          UseOverrideCharacterCapabilities;                  // 0x1700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1701[0x7];                                     // 0x1701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IKAlpha;                                           // 0x1708(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSprintRequested;                                 // 0x1710(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1711[0x7];                                     // 0x1711(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_jRPG_Character_World_Movement_Data> CharacterMovementDataQueue;                 // 0x1718(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ABP_ExplorationCapacity_TorchObject_C*  TorchActor;                                        // 0x1728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Editor_ChestsRemainingInTheLevel;                  // 0x1730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UseCachedAimingRotationForInputs;                  // 0x1734(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInPostBattleAggroDelay;                          // 0x1735(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1736[0x2];                                     // 0x1736(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCharacterCapabilitiesInitialized;                // 0x1738(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FRotator                               CachedAimingRotation;                              // 0x1748(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	float                                         PreCinematicCameraBlendTime;                       // 0x1760(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1764[0x4];                                     // 0x1764(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UCineCameraComponent*, struct FTransform> OriginalCamerasTransform;                   // 0x1768(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UCineCameraComponent*, struct FTransform> OnDialogueStartCamerasTransform;            // 0x17B8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        CurrentHeartRate;                                  // 0x1808(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAttachedToMovingPlatform;                        // 0x1810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1811[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounterHandle             CheckpointInputLockBlocker;                        // 0x1818(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             CinematicInputLockBlocker;                         // 0x1838(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             CinematicInteractionLockBlocker;                   // 0x1858(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	TSubclassOf<class UCameraModifier>            DefaultCameraModifierRotationLimiterClass;         // 0x1878(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

public:
	void AddCharacterMovementData(const struct FS_jRPG_Character_World_Movement_Data& Movement_Data, bool IsHighPriority);
	void AddInteractable(class AActor* Interactable);
	void AdjustCharacterSpringArm(bool IsCrouching, double ScaledHalfHeightAdjust);
	void AimAction(bool bValue);
	void ApplyCustomizationOnAICompanions();
	void ApplyDefaultInputContext(bool SetDefaultRunningGait);
	void AreDependenciesLoaded(bool* AreLoaded);
	void ArmRingChangeFeedbackType(EFreeAimFeedbackType NewFeedbackType);
	void ArmRingDisableFeedbackType(EFreeAimFeedbackType CurrentFeedbackType);
	void ArmRingEnableFeedbackType(EFreeAimFeedbackType CurrentFeedbackType, struct FLinearColor* CurrentColor, double* RotationRate, double* Glow);
	void AttachTorch();
	void BindEventsToController();
	void BndEvt__BP_jRPG_Character_World_BP_CharacterSkinComponent_K2Node_ComponentBoundEvent_4_OnCharacterSkinChanged__DelegateSignature(class UBP_CharacterSkinComponent_C* SkinComponent);
	void BndEvt__BP_jRPG_Character_World_BP_ClimbingComponent_K2Node_ComponentBoundEvent_3_OnStartClimbing__DelegateSignature();
	void BndEvt__BP_jRPG_Character_World_BP_ClimbingComponent_K2Node_ComponentBoundEvent_8_OnEndClimbing__DelegateSignature();
	void BndEvt__BP_jRPG_Character_World_BP_FallDetectorComponent_K2Node_ComponentBoundEvent_2_OnKillByFallDetected__DelegateSignature();
	void BndEvt__BP_jRPG_Character_World_MantleComponent_K2Node_ComponentBoundEvent_1_MantleStateChangedSignature__DelegateSignature(bool State);
	void BPI_GetAllDialogueCameras(TArray<class UCineCameraComponent*>* CineCameraComponents);
	void BPI_GetDialogueAudioComponent(class UAudioComponent** AudioComponent);
	void BPI_GetDialogueCameraByType(EDialogueCameraType CameraType, class UCameraComponent** CameraComponent);
	struct FVector BPI_GetDialogueCameraOffset();
	void BPI_GetDialogueFocusPoint(class USceneComponent** SceneComponent);
	TScriptInterface<class IBPI_DialogueCharacter_C> BPI_GetInteractingCharacter();
	E_NPC_SpolightTypes BPI_GetLightDirection();
	void BPI_GetLightingSet(E_NPC_SpolightTypes LightDirection, class ULightComponent** FrontLight, class ULightComponent** RimLight);
	TScriptInterface<class IBPI_DialogueCharacter_C> BPI_GetReverseSpotlightReceiver();
	void BPI_GetSpotlightsToActivateDuringDialogue(TArray<TSoftObjectPtr<class ASpotLight>>* SpotLightActors);
	bool BPI_HasLightingAuthority();
	bool BPI_ShouldMoveCameraPresetsToOtherSide();
	void CameraToBasePosition(float OverTime);
	void CameraToPosition(const struct FVector& TargetRelativeLocation, float OverTime);
	bool CanAddMovementInput();
	bool CanBeDetectedByEnemies();
	bool CanDash();
	bool CanEnterFreeAimCheck();
	bool CanPerformExplorationAttack();
	void CanSwitchCharacter(bool* CharacterSwitchFromButtonPress);
	void CharacterSwitch();
	void CharacterTalking(bool Talking);
	void Cinematic_ActivatePlayerCamera();
	void Cinematic_ActivatePreCameraCinematic();
	void Cinematic_GetPreCinematicBlendTime(float* PreCinematicCameraBlendTime_0);
	void ComputeActiveCharacter();
	void ComputeActorRotationDuringAttack(struct FRotator* Rotation);
	void DEBUG_CVarChange_DisableAggro(bool NewValue);
	void DEBUG_CVarChange_DisableCompanions(bool NewValue);
	void DEBUG_PrintCharacterCapabilities();
	void DEBUG_TeleportEnviro(int32 TPNumber);
	void Despawn();
	void EnableIK(bool EnableIK_0);
	void EnableIKTimeline__FinishedFunc();
	void EnableIKTimeline__UpdateFunc();
	void Enter_Debug_Fly_Mode();
	void EnterCinematicMode();
	void ExecuteUbergraph_BP_jRPG_Character_World(int32 EntryPoint);
	void Exit_Debug_Fly_Mode();
	void ExitCinematicMode();
	void ExplorationAttacked(class ABP_jRPG_Character_World_C* PlayerCharacter, const struct FVector& ImpactPoint);
	void FindNearestActorOfClass(class UClass* Class_0, const struct FVector& TargetLocation, class AActor** NearestActor, double* NearestDistance);
	void Force_LOD();
	void ForceRefreshCharacterAndCompanions();
	void ForwardMovementAction(float Value);
	void FoV_Control_Timeline__FinishedFunc();
	void FoV_Control_Timeline__UpdateFunc();
	void FovControl(double TargetFov);
	void FovReset();
	void FreeAimHit(class ABP_jRPG_Character_World_C* PlayerCharacterWorld, const struct FVector& HitLocation, bool IsDisabled);
	void FX_ArmRingColor__FinishedFunc();
	void FX_ArmRingColor__UpdateFunc();
	void FXArmRingActivate(bool AddTrail);
	void FXArmRingChangeColor(const struct FLinearColor& CurrentColor, double RotationRate, double Glow);
	void FXArmRingDeactivate();
	void GenerateExplorationAttack(double A);
	void GetAllAudioComponents(TArray<class UAudioComponent*>* AudioComponents);
	void GetAllDialogueCameras(TArray<class UCineCameraComponent*>* AllCameras);
	void GetALSAnimBP(class UALS_UE5_AnimBP_C** AsALS_UE5_Anim_BP);
	void GetAssetDialogueCharacter(class UBP_DataAsset_DialogueCharacter_C** DialogueCharacter);
	void GetAudioCharacterManager(class UActorComponent** AudioCharacterManager);
	void GetAudioComponentByType(const EInWorldAudioContainerComponents Type, class UAudioComponent** AudioComponent);
	void GetAudioComponents(class UAudioComponent** AC_SFX_01_0, class UAudioComponent** AC_Foleys_01_0, class UAudioComponent** AC_FT_L_0, class UAudioComponent** AC_Vocals_01_0, class UAudioComponent** AC_SFX_02_0, class UAudioComponent** AC_Foleys_02_0, class UAudioComponent** AC_FT_R_0, class UAudioComponent** AC_Vocals_02_0, class UAudioComponent** AC_Idle_0, class UAudioComponent** AC_Weapon_L_01_0, class UAudioComponent** AC_Weapon_L_02_0, class UAudioComponent** AC_Weapon_R_01_0, class UAudioComponent** AC_Hand_L_01_0, class UAudioComponent** AC_Hand_R_01_0);
	void GetCameraComponent(class UCameraComponent** Camera);
	void GetCharacterActor(class AActor** Character);
	void GetClosestInteractable(class AActor** Interactable);
	void GetCurrentInputDevice(EInputDevices::EInputDevices* InputDevice);
	void GetCurrentWorldCharacter(bool* Found, struct FS_jRPG_WorldCharacters* WorldCharacter);
	TScriptInterface<class IBPI_DialogueCharacter_C> GetDialogueCharacterInterface();
	void GetFreeAimCamera(class UCameraComponent** Camera);
	bool GetIsAttachedToMovingPlatform();
	void GetMainCamera(class UCameraComponent** MainCamera_0);
	void GetNextWorldCharacterName(class FName* CharacterName);
	void GetSpringArmFreeAimCamera(class USpringArmComponent** SpringArm);
	void GetSpringArmMainCamera(class USpringArmComponent** SpringArm_MainCamera);
	void GetTest();
	void GetWorldCharacterByName(class FName RowName, bool* Found, struct FS_jRPG_WorldCharacters* WorldCharacter);
	void GrappleCameraMovement();
	void HasCameraOverride(bool* HasOverride);
	void Hide_AI_Companions();
	void InitCharacterCapabilities();
	void InpActEvt_AimAction_K2Node_EnhancedInputActionEvent_24(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_AimAction_K2Node_EnhancedInputActionEvent_25(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_AimAction_K2Node_EnhancedInputActionEvent_26(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_CameraTapAction_K2Node_EnhancedInputActionEvent_17(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_CharacterSwitchAction_K2Node_EnhancedInputActionEvent_19(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugFlyMode_K2Node_EnhancedInputActionEvent_14(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugForceLoadLastSave_K2Node_EnhancedInputActionEvent_16(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugIncreaseCinematicSpeed_K2Node_EnhancedInputActionEvent_11(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugIncreaseCinematicSpeed_K2Node_EnhancedInputActionEvent_12(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugIncreaseCinematicSpeed_K2Node_EnhancedInputActionEvent_13(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugRequestAutoSave_K2Node_EnhancedInputActionEvent_15(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport10_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport1_K2Node_EnhancedInputActionEvent_10(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport2_K2Node_EnhancedInputActionEvent_9(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport3_K2Node_EnhancedInputActionEvent_8(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport4_K2Node_EnhancedInputActionEvent_7(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport5_K2Node_EnhancedInputActionEvent_6(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport6_K2Node_EnhancedInputActionEvent_5(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport7_K2Node_EnhancedInputActionEvent_4(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport8_K2Node_EnhancedInputActionEvent_3(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_DebugTeleport9_K2Node_EnhancedInputActionEvent_2(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_E_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Gamepad_FaceButton_Bottom_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_Gamepad_LeftThumbstick_K2Node_InputDebugKeyEvent_0(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_Gamepad_RightThumbstick_K2Node_InputDebugKeyEvent_1(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_HitInWorldAction_K2Node_EnhancedInputActionEvent_18(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_I_K2Node_InputDebugKeyEvent_6(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_IA_CameraRightAction_Gamepad_K2Node_EnhancedInputActionEvent_28(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CameraRightAction_Keyboard_K2Node_EnhancedInputActionEvent_27(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CameraUpAction_Gamepad_K2Node_EnhancedInputActionEvent_30(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_CameraUpAction_Keyboard_K2Node_EnhancedInputActionEvent_29(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_IA_FreeAimExplo_Shoot_K2Node_EnhancedInputActionEvent_23(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_JumpAction_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_NumPadNine_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_SprintAction_K2Node_EnhancedInputActionEvent_20(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_SprintAction_K2Node_EnhancedInputActionEvent_21(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_SprintAction_K2Node_EnhancedInputActionEvent_22(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction);
	void InpActEvt_T_K2Node_InputDebugKeyEvent_4(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_U_K2Node_InputDebugKeyEvent_5(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_V_K2Node_InputDebugKeyEvent_2(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_Y_K2Node_InputDebugKeyEvent_3(const struct FKey& Key, const struct FInputActionValue& ActionValue);
	void InpActEvt_ZoomIn_K2Node_InputActionEvent_0(const struct FKey& Key);
	void InpActEvt_ZoomOut_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpAxisEvt_DebugFlyingUpDown_K2Node_InputAxisEvent_1(float AxisValue);
	void InteractWithReader();
	void InterruptExplorationAttack();
	void InterruptExplorationAttackTimeline();
	void IsAnyInputUsable(bool* Usable);
	void IsFreeAimTargetDisabled(bool* IsDisabled);
	bool IsInAnyRoom(TArray<class ABP_GameplayRoom_C*>& Rooms);
	bool IsInCustomMovement();
	void JumpAction(bool bValue);
	void K2_OnEndCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void K2_OnStartCrouch(float HalfHeightAdjust, float ScaledHalfHeightAdjust);
	void LimitCharacterWorldMovement(const TMap<E_jRPG_CharacterWorldCapability, bool>& Capabilities, const struct FS_jRPG_Character_World_Movement_Data& Movement_Data, const class FString& Reason);
	void LiveActivation(class FName ParamName, double FadeTimeOfBrush, double FadeTimeOfCanvas);
	void LiveFluidParams(double BrushSize);
	void LoadAndActivateCharacter(class FName CharacterName, bool HasSwitchCharacter);
	void LoadCharacter();
	void LoadDependencies();
	void OnBattleDependenciesLoaded();
	void OnBattleEnds();
	void OnBattleStarts();
	void OnBlendOut_417717A14648999DF1C834AF8E5C7DD4(class FName NotifyName);
	void OnCharacterCapabilitiesUpdated();
	void OnCharacterCollectionChanged();
	void OnCharacterMovementDataQueueUpdated();
	void OnCompleted_417717A14648999DF1C834AF8E5C7DD4(class FName NotifyName);
	void OnGaitChanged(EALSGait previousGait, EALSGait nextGait);
	void OnGameUserSettingsApplied(const class UConfigurableGameUserSettings* UserConfig);
	void OnInterrupted_417717A14648999DF1C834AF8E5C7DD4(class FName NotifyName);
	void OnLanded(const struct FHitResult& Hit);
	void OnNotifyBegin_417717A14648999DF1C834AF8E5C7DD4(class FName NotifyName);
	void OnNotifyEnd_417717A14648999DF1C834AF8E5C7DD4(class FName NotifyName);
	void OnRollAnimationStarted();
	void OnRollAnimationStopped(bool IsInterrupted);
	void OnSaveLoaded();
	void OnTargetViewAboutToChanged(class AActor* PreviousViewTarget, class AActor* CurrentViewTarget);
	void PlayAnimMontageOnCharacterWorld(class UAnimMontage* MontageToPlay);
	void PostBattleAggroDelay();
	void ReceiveActorBeginOverlap(class AActor* OtherActor);
	void ReceiveActorEndOverlap(class AActor* OtherActor);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceivePossessed(class AController* NewController);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveUnpossessed(class AController* OldController);
	void RemoveCharacterCapabilitiesOverride();
	void RemoveCharacterMovementData(const struct FS_jRPG_Character_World_Movement_Data& MovementData_0);
	void RemoveInteractable(class AActor* Interactable);
	void ResetCamValuesToCache();
	void ResetCharacterCapabilitiesAndMovementData();
	void ResetCharacterWorldMovement();
	void ResetLocationToCheckPoint();
	void RightMovementAction(float Value);
	void SaveCamValuesInCache();
	void SetAbpBattleForAiming(bool Aiming);
	void SetCharacterCapabilitiesOverride(const struct FS_jRPG_Character_World_Capabilities& Capabilities);
	void SetCharacterCustomization(const struct FS_CharacterCustomization& CharacterCustomization, class FName Character_Name);
	void SetCharacterSpotLightsEnabled(bool Visible);
	void SetGaitToRunningIfPossible();
	void SetGaitToSprintIfPossible();
	void SetIsAttachedToMovingPlatform(bool IsAttachedToMovingPlatform_0);
	void SetLastCheckpoint(const struct FVector& Location, const struct FRotator& Rotation, class AActor* SourceObject);
	void SetSpawnLocationFromWorldMap();
	void SpawnAICompanions();
	void SpringArmControl(float Target_Arm_Length, double CameraLagMaxDistance);
	void SpringArmControl_Timeline__FinishedFunc();
	void SpringArmControl_Timeline__UpdateFunc();
	void SpringArmReset();
	void SpringArmReset_Timeline__FinishedFunc();
	void SpringArmReset_Timeline__UpdateFunc();
	void SprintAction(bool bValue);
	void StanceAction();
	void StopCustomMovement();
	void TeleportCharacter(const struct FTransform& DestinationTransform, const struct FRotator& CameraRotation);
	void TeleportCharacterToArea(const struct FTransform& DestinationTransform, const struct FRotator& CameraRotation, class ABP_LightingScenarioReference_C* LightingScenario, const struct FS_AreaAudioParameters& AreaAudioParameters, const struct FS_ChangeLevelParameters& ChangeLevelParameters);
	void Timeline_0__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_ExplorationAttack__FinishedFunc();
	void Timeline_ExplorationAttack__UpdateFunc();
	void Timeline_GrappeCamera__FinishedFunc();
	void Timeline_GrappeCamera__UpdateFunc();
	void ToggleGaitIfPossible();
	void UnattachTorch();
	void UnloadDependencies();
	void UnspawnAICompanions();
	void UpdateCharacterCapabilities(const TMap<E_jRPG_CharacterWorldCapability, bool>& Capabilities, const class FString& Reason);
	void UpdateCharacterVisualAlterations();
	void UpdateDebugFlyModeSpeed();
	void UpdateInteractables();
	void UpdateSpringArmLength();
	void UserConstructionScript();
	void WaterFXDelay();
	void ZoomInEvent();
	void ZoomOutEvent();

	EALSGait GetAllowedGait() const;
	void IsCapabilityAllowed(E_jRPG_CharacterWorldCapability Capability, bool* isAllowed) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_Character_World_C">();
	}
	static class ABP_jRPG_Character_World_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_Character_World_C>();
	}
};
static_assert(alignof(ABP_jRPG_Character_World_C) == 0x000010, "Wrong alignment on ABP_jRPG_Character_World_C");
static_assert(sizeof(ABP_jRPG_Character_World_C) == 0x001880, "Wrong size on ABP_jRPG_Character_World_C");
static_assert(offsetof(ABP_jRPG_Character_World_C, UberGraphFrame_BP_jRPG_Character_World_C) == 0x000A38, "Member 'ABP_jRPG_Character_World_C::UberGraphFrame_BP_jRPG_Character_World_C' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CameraShakeSource_Moving) == 0x000A40, "Member 'ABP_jRPG_Character_World_C::CameraShakeSource_Moving' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharacterSpringArm) == 0x000A48, "Member 'ABP_jRPG_Character_World_C::CharacterSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Main_CineCamera) == 0x000A50, "Member 'ABP_jRPG_Character_World_C::Main_CineCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Camera_PreCinematic) == 0x000A58, "Member 'ABP_jRPG_Character_World_C::Camera_PreCinematic' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, LookAtTarget) == 0x000A60, "Member 'ABP_jRPG_Character_World_C::LookAtTarget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, MainCamera) == 0x000A68, "Member 'ABP_jRPG_Character_World_C::MainCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SmartSpringArm_MainCamera) == 0x000A70, "Member 'ABP_jRPG_Character_World_C::SmartSpringArm_MainCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CompanionAvoidanceCapsule) == 0x000A78, "Member 'ABP_jRPG_Character_World_C::CompanionAvoidanceCapsule' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_CharacterSkinComponent) == 0x000A80, "Member 'ABP_jRPG_Character_World_C::BP_CharacterSkinComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_CharacterVisualAlterationsComponent) == 0x000A88, "Member 'ABP_jRPG_Character_World_C::BP_CharacterVisualAlterationsComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Vocals_01) == 0x000A90, "Member 'ABP_jRPG_Character_World_C::AC_Vocals_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Vocals_02) == 0x000A98, "Member 'ABP_jRPG_Character_World_C::AC_Vocals_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Hand_R_01) == 0x000AA0, "Member 'ABP_jRPG_Character_World_C::AC_Hand_R_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Weapon_R_01) == 0x000AA8, "Member 'ABP_jRPG_Character_World_C::AC_Weapon_R_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Weapon_L_01) == 0x000AB0, "Member 'ABP_jRPG_Character_World_C::AC_Weapon_L_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Hand_L_01) == 0x000AB8, "Member 'ABP_jRPG_Character_World_C::AC_Hand_L_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Weapon_L_02) == 0x000AC0, "Member 'ABP_jRPG_Character_World_C::AC_Weapon_L_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_FT_R) == 0x000AC8, "Member 'ABP_jRPG_Character_World_C::AC_FT_R' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_FT_L) == 0x000AD0, "Member 'ABP_jRPG_Character_World_C::AC_FT_L' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, WorldPartitionStreamingSource) == 0x000AD8, "Member 'ABP_jRPG_Character_World_C::WorldPartitionStreamingSource' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Audio_Dialogue) == 0x000AE0, "Member 'ABP_jRPG_Character_World_C::Audio_Dialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_DialogueCameraControllerComponent) == 0x000AE8, "Member 'ABP_jRPG_Character_World_C::BP_DialogueCameraControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpotLight_Dialogue_RimLeft) == 0x000AF0, "Member 'ABP_jRPG_Character_World_C::SpotLight_Dialogue_RimLeft' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpotLight_Dialogue_FrontRight) == 0x000AF8, "Member 'ABP_jRPG_Character_World_C::SpotLight_Dialogue_FrontRight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpotLight_Dialogue_RimRight) == 0x000B00, "Member 'ABP_jRPG_Character_World_C::SpotLight_Dialogue_RimRight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpotLight_Dialogue_FrontLeft) == 0x000B08, "Member 'ABP_jRPG_Character_World_C::SpotLight_Dialogue_FrontLeft' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue6) == 0x000B10, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue6' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue9) == 0x000B18, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue9' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue8) == 0x000B20, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue8' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue7) == 0x000B28, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue7' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue4) == 0x000B30, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue4' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue2) == 0x000B38, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue3) == 0x000B40, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue10) == 0x000B48, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue10' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue5) == 0x000B50, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue1) == 0x000B58, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FocusPoint_Dialogue) == 0x000B60, "Member 'ABP_jRPG_Character_World_C::FocusPoint_Dialogue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CineCamera_Dialogue_Main) == 0x000B68, "Member 'ABP_jRPG_Character_World_C::CineCamera_Dialogue_Main' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_NPCAnimationComponent) == 0x000B70, "Member 'ABP_jRPG_Character_World_C::BP_NPCAnimationComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_EyeEffectsControllerComponent) == 0x000B78, "Member 'ABP_jRPG_Character_World_C::BP_EyeEffectsControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_ExplorationCapacityComponent_Rope) == 0x000B80, "Member 'ABP_jRPG_Character_World_C::BP_ExplorationCapacityComponent_Rope' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_ClimbingComponent) == 0x000B88, "Member 'ABP_jRPG_Character_World_C::BP_ClimbingComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_CameraControllerComponent) == 0x000B90, "Member 'ABP_jRPG_Character_World_C::BP_CameraControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_CameraLookAtControllerComponent) == 0x000B98, "Member 'ABP_jRPG_Character_World_C::BP_CameraLookAtControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_AICompanion_CompanionManager) == 0x000BA0, "Member 'ABP_jRPG_Character_World_C::BP_AICompanion_CompanionManager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_AICompanion_TargetPointsComponent) == 0x000BA8, "Member 'ABP_jRPG_Character_World_C::BP_AICompanion_TargetPointsComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ChildActorAimCamera) == 0x000BB0, "Member 'ABP_jRPG_Character_World_C::ChildActorAimCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArm_FreeAim) == 0x000BB8, "Member 'ABP_jRPG_Character_World_C::SpringArm_FreeAim' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_VelocityControllerComponent) == 0x000BC0, "Member 'ABP_jRPG_Character_World_C::BP_VelocityControllerComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_Component_WorldAnimationProfile) == 0x000BC8, "Member 'ABP_jRPG_Character_World_C::BP_Component_WorldAnimationProfile' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_FacialAnimationComponent) == 0x000BD0, "Member 'ABP_jRPG_Character_World_C::BP_FacialAnimationComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Torch_SpringArm) == 0x000BD8, "Member 'ABP_jRPG_Character_World_C::Torch_SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_TrailSource_Component_r) == 0x000BE0, "Member 'ABP_jRPG_Character_World_C::BP_TrailSource_Component_r' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_TrailSource_Component_l) == 0x000BE8, "Member 'ABP_jRPG_Character_World_C::BP_TrailSource_Component_l' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_ExplorationCapacityComponent_GrappleHook) == 0x000BF0, "Member 'ABP_jRPG_Character_World_C::BP_ExplorationCapacityComponent_GrappleHook' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, MotionWarping) == 0x000BF8, "Member 'ABP_jRPG_Character_World_C::MotionWarping' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BPC_LightAreaMecanic) == 0x000C00, "Member 'ABP_jRPG_Character_World_C::BPC_LightAreaMecanic' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_ExplorationCapacityComponent_FreeAimTeleport) == 0x000C08, "Member 'ABP_jRPG_Character_World_C::BP_ExplorationCapacityComponent_FreeAimTeleport' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_ExplorationCapacityComponent_FreeAimDamage) == 0x000C10, "Member 'ABP_jRPG_Character_World_C::BP_ExplorationCapacityComponent_FreeAimDamage' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Idle) == 0x000C18, "Member 'ABP_jRPG_Character_World_C::AC_Idle' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_SFX_02) == 0x000C20, "Member 'ABP_jRPG_Character_World_C::AC_SFX_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Foleys_02) == 0x000C28, "Member 'ABP_jRPG_Character_World_C::AC_Foleys_02' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_Foleys_01) == 0x000C30, "Member 'ABP_jRPG_Character_World_C::AC_Foleys_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AC_SFX_01) == 0x000C38, "Member 'ABP_jRPG_Character_World_C::AC_SFX_01' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_AudioCharacter_Manager) == 0x000C40, "Member 'ABP_jRPG_Character_World_C::BP_AudioCharacter_Manager' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpotLight1) == 0x000C48, "Member 'ABP_jRPG_Character_World_C::SpotLight1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpotLight) == 0x000C50, "Member 'ABP_jRPG_Character_World_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ProjectileSpawnLocation) == 0x000C58, "Member 'ABP_jRPG_Character_World_C::ProjectileSpawnLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ChildActor_Skin) == 0x000C60, "Member 'ABP_jRPG_Character_World_C::ChildActor_Skin' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Arrow2) == 0x000C68, "Member 'ABP_jRPG_Character_World_C::Arrow2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakActorCamera) == 0x000C70, "Member 'ABP_jRPG_Character_World_C::SneakActorCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakCamArrow) == 0x000C78, "Member 'ABP_jRPG_Character_World_C::EndSneakCamArrow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, StartSneakCamArrow) == 0x000C80, "Member 'ABP_jRPG_Character_World_C::StartSneakCamArrow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, RectLight) == 0x000C88, "Member 'ABP_jRPG_Character_World_C::RectLight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashFxLoc1) == 0x000C90, "Member 'ABP_jRPG_Character_World_C::DashFxLoc1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BP_FreeAimControlComponent) == 0x000C98, "Member 'ABP_jRPG_Character_World_C::BP_FreeAimControlComponent' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ShoulderCam) == 0x000CA0, "Member 'ABP_jRPG_Character_World_C::ShoulderCam' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ShoulderSpringArm) == 0x000CA8, "Member 'ABP_jRPG_Character_World_C::ShoulderSpringArm' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ExploAtkArrow) == 0x000CB0, "Member 'ABP_jRPG_Character_World_C::ExploAtkArrow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashFxLoc) == 0x000CB8, "Member 'ABP_jRPG_Character_World_C::DashFxLoc' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, NinjaTraceMesh) == 0x000CC0, "Member 'ABP_jRPG_Character_World_C::NinjaTraceMesh' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharaxcterLightBack) == 0x000CC8, "Member 'ABP_jRPG_Character_World_C::CharaxcterLightBack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharacterLightFront) == 0x000CD0, "Member 'ABP_jRPG_Character_World_C::CharacterLightFront' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, WorldStrikeCollision) == 0x000CD8, "Member 'ABP_jRPG_Character_World_C::WorldStrikeCollision' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DialogBox) == 0x000CE0, "Member 'ABP_jRPG_Character_World_C::DialogBox' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_ExplorationAttack_HitBoxTrack_F552019B465836AC171344A345E24AF5) == 0x000CE8, "Member 'ABP_jRPG_Character_World_C::Timeline_ExplorationAttack_HitBoxTrack_F552019B465836AC171344A345E24AF5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_ExplorationAttack_StepForwardTrack_F552019B465836AC171344A345E24AF5) == 0x000CEC, "Member 'ABP_jRPG_Character_World_C::Timeline_ExplorationAttack_StepForwardTrack_F552019B465836AC171344A345E24AF5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_ExplorationAttack__Direction_F552019B465836AC171344A345E24AF5) == 0x000CF0, "Member 'ABP_jRPG_Character_World_C::Timeline_ExplorationAttack__Direction_F552019B465836AC171344A345E24AF5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_ExplorationAttack) == 0x000CF8, "Member 'ABP_jRPG_Character_World_C::Timeline_ExplorationAttack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_1_DistanceMultiplier_530E22E44FEF074B39B902B36F8EE6E0) == 0x000D00, "Member 'ABP_jRPG_Character_World_C::Timeline_1_DistanceMultiplier_530E22E44FEF074B39B902B36F8EE6E0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_1__Direction_530E22E44FEF074B39B902B36F8EE6E0) == 0x000D04, "Member 'ABP_jRPG_Character_World_C::Timeline_1__Direction_530E22E44FEF074B39B902B36F8EE6E0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_1) == 0x000D08, "Member 'ABP_jRPG_Character_World_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EnableIKTimeline_IKAlpha_DDD7A86D4122DF4EACB63E877B021AFE) == 0x000D10, "Member 'ABP_jRPG_Character_World_C::EnableIKTimeline_IKAlpha_DDD7A86D4122DF4EACB63E877B021AFE' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EnableIKTimeline__Direction_DDD7A86D4122DF4EACB63E877B021AFE) == 0x000D14, "Member 'ABP_jRPG_Character_World_C::EnableIKTimeline__Direction_DDD7A86D4122DF4EACB63E877B021AFE' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EnableIKTimeline) == 0x000D18, "Member 'ABP_jRPG_Character_World_C::EnableIKTimeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_0_SpringArmMovement_E5045E2A45345B73800A59A639C19BD6) == 0x000D20, "Member 'ABP_jRPG_Character_World_C::Timeline_0_SpringArmMovement_E5045E2A45345B73800A59A639C19BD6' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_0__Direction_E5045E2A45345B73800A59A639C19BD6) == 0x000D24, "Member 'ABP_jRPG_Character_World_C::Timeline_0__Direction_E5045E2A45345B73800A59A639C19BD6' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_0) == 0x000D28, "Member 'ABP_jRPG_Character_World_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FoV_Control_Timeline_SpringArmMovement_9901529640326D15C1E16593984FA550) == 0x000D30, "Member 'ABP_jRPG_Character_World_C::FoV_Control_Timeline_SpringArmMovement_9901529640326D15C1E16593984FA550' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FoV_Control_Timeline__Direction_9901529640326D15C1E16593984FA550) == 0x000D34, "Member 'ABP_jRPG_Character_World_C::FoV_Control_Timeline__Direction_9901529640326D15C1E16593984FA550' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FoV_Control_Timeline) == 0x000D38, "Member 'ABP_jRPG_Character_World_C::FoV_Control_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmReset_Timeline_SpringArmMovement_97E0D35D46F19FBD762F89AA85055A4E) == 0x000D40, "Member 'ABP_jRPG_Character_World_C::SpringArmReset_Timeline_SpringArmMovement_97E0D35D46F19FBD762F89AA85055A4E' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmReset_Timeline__Direction_97E0D35D46F19FBD762F89AA85055A4E) == 0x000D44, "Member 'ABP_jRPG_Character_World_C::SpringArmReset_Timeline__Direction_97E0D35D46F19FBD762F89AA85055A4E' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmReset_Timeline) == 0x000D48, "Member 'ABP_jRPG_Character_World_C::SpringArmReset_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmControl_Timeline_SpringArmMovement_50E9683048EA6E7F81BD9E94476B74B7) == 0x000D50, "Member 'ABP_jRPG_Character_World_C::SpringArmControl_Timeline_SpringArmMovement_50E9683048EA6E7F81BD9E94476B74B7' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmControl_Timeline__Direction_50E9683048EA6E7F81BD9E94476B74B7) == 0x000D54, "Member 'ABP_jRPG_Character_World_C::SpringArmControl_Timeline__Direction_50E9683048EA6E7F81BD9E94476B74B7' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmControl_Timeline) == 0x000D58, "Member 'ABP_jRPG_Character_World_C::SpringArmControl_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FX_ArmRingColor_0to1_9F591E5949084DB1308311B637BE9513) == 0x000D60, "Member 'ABP_jRPG_Character_World_C::FX_ArmRingColor_0to1_9F591E5949084DB1308311B637BE9513' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FX_ArmRingColor__Direction_9F591E5949084DB1308311B637BE9513) == 0x000D64, "Member 'ABP_jRPG_Character_World_C::FX_ArmRingColor__Direction_9F591E5949084DB1308311B637BE9513' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FX_ArmRingColor) == 0x000D68, "Member 'ABP_jRPG_Character_World_C::FX_ArmRingColor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_GrappeCamera_FieldOfView_CA80C41844AFE0A643BF3BA198223DE5) == 0x000D70, "Member 'ABP_jRPG_Character_World_C::Timeline_GrappeCamera_FieldOfView_CA80C41844AFE0A643BF3BA198223DE5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_GrappeCamera__Direction_CA80C41844AFE0A643BF3BA198223DE5) == 0x000D74, "Member 'ABP_jRPG_Character_World_C::Timeline_GrappeCamera__Direction_CA80C41844AFE0A643BF3BA198223DE5' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Timeline_GrappeCamera) == 0x000D78, "Member 'ABP_jRPG_Character_World_C::Timeline_GrappeCamera' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ActorInInteractionRange) == 0x000D80, "Member 'ABP_jRPG_Character_World_C::ActorInInteractionRange' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ActorToInteract) == 0x000D90, "Member 'ABP_jRPG_Character_World_C::ActorToInteract' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, PlayerController) == 0x000D98, "Member 'ABP_jRPG_Character_World_C::PlayerController' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, UseWidget) == 0x000DA0, "Member 'ABP_jRPG_Character_World_C::UseWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DialogSystemReference) == 0x000DA8, "Member 'ABP_jRPG_Character_World_C::DialogSystemReference' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, HitActor) == 0x000DB0, "Member 'ABP_jRPG_Character_World_C::HitActor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DeltaTime) == 0x000DB8, "Member 'ABP_jRPG_Character_World_C::DeltaTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsTeleporting_) == 0x000DC0, "Member 'ABP_jRPG_Character_World_C::IsTeleporting_' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpeedLinesBlendable) == 0x000DC8, "Member 'ABP_jRPG_Character_World_C::SpeedLinesBlendable' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, reversibleActors) == 0x000DD0, "Member 'ABP_jRPG_Character_World_C::reversibleActors' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, reversibleCharacters) == 0x000DE0, "Member 'ABP_jRPG_Character_World_C::reversibleCharacters' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Particles) == 0x000DF0, "Member 'ABP_jRPG_Character_World_C::Particles' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AllMeshMaterials) == 0x000DF8, "Member 'ABP_jRPG_Character_World_C::AllMeshMaterials' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, JumpCounter) == 0x000E08, "Member 'ABP_jRPG_Character_World_C::JumpCounter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, MovementStruct) == 0x000E10, "Member 'ABP_jRPG_Character_World_C::MovementStruct' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EnemyHit) == 0x000E20, "Member 'ABP_jRPG_Character_World_C::EnemyHit' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashCooldownActive) == 0x000E28, "Member 'ABP_jRPG_Character_World_C::DashCooldownActive' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashDuration) == 0x000E30, "Member 'ABP_jRPG_Character_World_C::DashDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAnimMontage) == 0x000E38, "Member 'ABP_jRPG_Character_World_C::DashAnimMontage' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashForce) == 0x000E40, "Member 'ABP_jRPG_Character_World_C::DashForce' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashVfx) == 0x000E48, "Member 'ABP_jRPG_Character_World_C::DashVfx' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, TrailFx) == 0x000E50, "Member 'ABP_jRPG_Character_World_C::TrailFx' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashZHeight) == 0x000E58, "Member 'ABP_jRPG_Character_World_C::DashZHeight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ShouldAdapteDashMovementToGround) == 0x000E60, "Member 'ABP_jRPG_Character_World_C::ShouldAdapteDashMovementToGround' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashCount) == 0x000E64, "Member 'ABP_jRPG_Character_World_C::DashCount' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, MaxDashCount) == 0x000E68, "Member 'ABP_jRPG_Character_World_C::MaxDashCount' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AdaptativeDashGroundCheck) == 0x000E70, "Member 'ABP_jRPG_Character_World_C::AdaptativeDashGroundCheck' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashInputVectorCache) == 0x000E78, "Member 'ABP_jRPG_Character_World_C::DashInputVectorCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashCamForwardVectorCache) == 0x000E90, "Member 'ABP_jRPG_Character_World_C::DashCamForwardVectorCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashInterupted) == 0x000EA8, "Member 'ABP_jRPG_Character_World_C::DashInterupted' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, PreventingLocationCache) == 0x000EB0, "Member 'ABP_jRPG_Character_World_C::PreventingLocationCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, bIsDashing) == 0x000EC8, "Member 'ABP_jRPG_Character_World_C::bIsDashing' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashUseInputVector) == 0x000EC9, "Member 'ABP_jRPG_Character_World_C::DashUseInputVector' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ShouldNotUseAdaptiveDash) == 0x000ECA, "Member 'ABP_jRPG_Character_World_C::ShouldNotUseAdaptiveDash' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashForwardChekDistance) == 0x000ED0, "Member 'ABP_jRPG_Character_World_C::DashForwardChekDistance' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AdaptativeDashRoofCheck) == 0x000ED8, "Member 'ABP_jRPG_Character_World_C::AdaptativeDashRoofCheck' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashCoolDownAerial) == 0x000EE0, "Member 'ABP_jRPG_Character_World_C::DashCoolDownAerial' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashCoolDownGround) == 0x000EE8, "Member 'ABP_jRPG_Character_World_C::DashCoolDownGround' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, bIsWorldMapPawn) == 0x000EF0, "Member 'ABP_jRPG_Character_World_C::bIsWorldMapPawn' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkForce) == 0x000EF8, "Member 'ABP_jRPG_Character_World_C::DashAtkForce' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkHeight) == 0x000F00, "Member 'ABP_jRPG_Character_World_C::DashAtkHeight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkInputVector) == 0x000F08, "Member 'ABP_jRPG_Character_World_C::DashAtkInputVector' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkCamForwardVector) == 0x000F20, "Member 'ABP_jRPG_Character_World_C::DashAtkCamForwardVector' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkTrailFX) == 0x000F38, "Member 'ABP_jRPG_Character_World_C::DashAtkTrailFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AtkCoolDown) == 0x000F40, "Member 'ABP_jRPG_Character_World_C::AtkCoolDown' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkHitBoxSize) == 0x000F48, "Member 'ABP_jRPG_Character_World_C::DashAtkHitBoxSize' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAttackHitBoxHalf_Size) == 0x000F50, "Member 'ABP_jRPG_Character_World_C::DashAttackHitBoxHalf_Size' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CanDamageLevelElementsLv1) == 0x000F68, "Member 'ABP_jRPG_Character_World_C::CanDamageLevelElementsLv1' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AM_ExplorationAtk) == 0x000F70, "Member 'ABP_jRPG_Character_World_C::AM_ExplorationAtk' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ExplorationAttackStepForwardForce) == 0x000F78, "Member 'ABP_jRPG_Character_World_C::ExplorationAttackStepForwardForce' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CanDamageLevelElementsLv2) == 0x000F80, "Member 'ABP_jRPG_Character_World_C::CanDamageLevelElementsLv2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ExploAtkHitSomething) == 0x000F81, "Member 'ABP_jRPG_Character_World_C::ExploAtkHitSomething' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CanDamageLevelElementsLv3) == 0x000F82, "Member 'ABP_jRPG_Character_World_C::CanDamageLevelElementsLv3' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAttackImpactFX) == 0x000F88, "Member 'ABP_jRPG_Character_World_C::DashAttackImpactFX' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DashAtkRecover) == 0x000F90, "Member 'ABP_jRPG_Character_World_C::DashAtkRecover' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, AmExploAtkInterupted) == 0x000F98, "Member 'ABP_jRPG_Character_World_C::AmExploAtkInterupted' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FreeAimMovementModel) == 0x000FA0, "Member 'ABP_jRPG_Character_World_C::FreeAimMovementModel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, WalkingMovementModel) == 0x000FB0, "Member 'ABP_jRPG_Character_World_C::WalkingMovementModel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DEBUG_IsInvisible) == 0x000FC0, "Member 'ABP_jRPG_Character_World_C::DEBUG_IsInvisible' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, InvisibilityEffectDuration) == 0x000FC8, "Member 'ABP_jRPG_Character_World_C::InvisibilityEffectDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CheckpointLocation) == 0x000FD0, "Member 'ABP_jRPG_Character_World_C::CheckpointLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CheckPointRotation) == 0x000FE8, "Member 'ABP_jRPG_Character_World_C::CheckPointRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsInDebugFlyMode) == 0x001000, "Member 'ABP_jRPG_Character_World_C::IsInDebugFlyMode' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DebugFlyingGravityScale) == 0x001008, "Member 'ABP_jRPG_Character_World_C::DebugFlyingGravityScale' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DebugFlyingMovementModel) == 0x001010, "Member 'ABP_jRPG_Character_World_C::DebugFlyingMovementModel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DebugWalkingMovementModel) == 0x001020, "Member 'ABP_jRPG_Character_World_C::DebugWalkingMovementModel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DebugGravityScaleCache) == 0x001030, "Member 'ABP_jRPG_Character_World_C::DebugGravityScaleCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsSneaking) == 0x001038, "Member 'ABP_jRPG_Character_World_C::IsSneaking' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, StartSneakActorRotCache) == 0x001040, "Member 'ABP_jRPG_Character_World_C::StartSneakActorRotCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, StartSneakActorLocCache) == 0x001058, "Member 'ABP_jRPG_Character_World_C::StartSneakActorLocCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakArrowLoc) == 0x001070, "Member 'ABP_jRPG_Character_World_C::EndSneakArrowLoc' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakArrowRot) == 0x001088, "Member 'ABP_jRPG_Character_World_C::EndSneakArrowRot' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, StartSneaking) == 0x0010A0, "Member 'ABP_jRPG_Character_World_C::StartSneaking' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCamRelativeRotCache) == 0x0010A8, "Member 'ABP_jRPG_Character_World_C::SneakCamRelativeRotCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCameraLocCache) == 0x0010C0, "Member 'ABP_jRPG_Character_World_C::SneakCameraLocCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCameraRotCache) == 0x0010D8, "Member 'ABP_jRPG_Character_World_C::SneakCameraRotCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCamRelativeLocCache) == 0x0010F0, "Member 'ABP_jRPG_Character_World_C::SneakCamRelativeLocCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakCamLocCache) == 0x001108, "Member 'ABP_jRPG_Character_World_C::EndSneakCamLocCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakCamRotCache) == 0x001120, "Member 'ABP_jRPG_Character_World_C::EndSneakCamRotCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsClimbing) == 0x001138, "Member 'ABP_jRPG_Character_World_C::IsClimbing' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Sneak_Spline_to_Follow) == 0x001140, "Member 'ABP_jRPG_Character_World_C::Sneak_Spline_to_Follow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakDistanceValue) == 0x001148, "Member 'ABP_jRPG_Character_World_C::SneakDistanceValue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DistanceOnSpline) == 0x001150, "Member 'ABP_jRPG_Character_World_C::DistanceOnSpline' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, StartSneakFromSplineEnd) == 0x001158, "Member 'ABP_jRPG_Character_World_C::StartSneakFromSplineEnd' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, InputForwardBackwardValue) == 0x001160, "Member 'ABP_jRPG_Character_World_C::InputForwardBackwardValue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakCamWorldLoc) == 0x001168, "Member 'ABP_jRPG_Character_World_C::EndSneakCamWorldLoc' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndSneakCamWorldRot) == 0x001180, "Member 'ABP_jRPG_Character_World_C::EndSneakCamWorldRot' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakEntryArrow) == 0x001198, "Member 'ABP_jRPG_Character_World_C::SneakEntryArrow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCam) == 0x0011A0, "Member 'ABP_jRPG_Character_World_C::SneakCam' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakExitAtSplineEnd) == 0x0011A8, "Member 'ABP_jRPG_Character_World_C::SneakExitAtSplineEnd' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakExitAtSplineStart) == 0x0011B0, "Member 'ABP_jRPG_Character_World_C::SneakExitAtSplineStart' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FluidForceDynamic_Settings) == 0x0011B8, "Member 'ABP_jRPG_Character_World_C::FluidForceDynamic_Settings' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, TutoGameIsPaused) == 0x001228, "Member 'ABP_jRPG_Character_World_C::TutoGameIsPaused' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CurrentTutoPanel) == 0x001230, "Member 'ABP_jRPG_Character_World_C::CurrentTutoPanel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CurrentDialogUI) == 0x001238, "Member 'ABP_jRPG_Character_World_C::CurrentDialogUI' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, EndCombatTransitionDuration) == 0x001240, "Member 'ABP_jRPG_Character_World_C::EndCombatTransitionDuration' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, LightingActiveWhenStartPlaying) == 0x001248, "Member 'ABP_jRPG_Character_World_C::LightingActiveWhenStartPlaying' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, NearestLightingScenario) == 0x001250, "Member 'ABP_jRPG_Character_World_C::NearestLightingScenario' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ClosestDistance) == 0x001258, "Member 'ABP_jRPG_Character_World_C::ClosestDistance' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Min_Distance) == 0x001260, "Member 'ABP_jRPG_Character_World_C::Min_Distance' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Asset_Class) == 0x001268, "Member 'ABP_jRPG_Character_World_C::Asset_Class' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, PreloadedHeads) == 0x001290, "Member 'ABP_jRPG_Character_World_C::PreloadedHeads' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, As_BP_Arm_Ring_V2) == 0x0012E0, "Member 'ABP_jRPG_Character_World_C::As_BP_Arm_Ring_V2' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Starting_from_Spline_Start) == 0x0012E8, "Member 'ABP_jRPG_Character_World_C::Starting_from_Spline_Start' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCamTransformCache) == 0x0012F0, "Member 'ABP_jRPG_Character_World_C::SneakCamTransformCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SneakCamTransformInverseCache) == 0x001350, "Member 'ABP_jRPG_Character_World_C::SneakCamTransformInverseCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ExitFromStartBox) == 0x0013B0, "Member 'ABP_jRPG_Character_World_C::ExitFromStartBox' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Exit_from_Entry_Arrow) == 0x0013B8, "Member 'ABP_jRPG_Character_World_C::Exit_from_Entry_Arrow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Exit_from_Exit_Arrow) == 0x0013C0, "Member 'ABP_jRPG_Character_World_C::Exit_from_Exit_Arrow' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Sneak_Custom_Look_At) == 0x0013C8, "Member 'ABP_jRPG_Character_World_C::Sneak_Custom_Look_At' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BrakingDecelerationFlyingCache) == 0x0013D0, "Member 'ABP_jRPG_Character_World_C::BrakingDecelerationFlyingCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FlyModeWidget) == 0x0013D8, "Member 'ABP_jRPG_Character_World_C::FlyModeWidget' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DeadZoneCameraLagSpeedCache) == 0x0013E0, "Member 'ABP_jRPG_Character_World_C::DeadZoneCameraLagSpeedCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DeadZoneCamera_Lag_Speed) == 0x0013E8, "Member 'ABP_jRPG_Character_World_C::DeadZoneCamera_Lag_Speed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CurrentMovementSettingsCache) == 0x0013F0, "Member 'ABP_jRPG_Character_World_C::CurrentMovementSettingsCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, BrakingDecelerationFallingDeadZoneCache) == 0x001410, "Member 'ABP_jRPG_Character_World_C::BrakingDecelerationFallingDeadZoneCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Sound_Event) == 0x001418, "Member 'ABP_jRPG_Character_World_C::Sound_Event' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Sound_Event_0) == 0x001420, "Member 'ABP_jRPG_Character_World_C::Sound_Event_0' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, WaterBody) == 0x001430, "Member 'ABP_jRPG_Character_World_C::WaterBody' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DEBUG_DashTraceTime) == 0x001438, "Member 'ABP_jRPG_Character_World_C::DEBUG_DashTraceTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DEBUG_DashTraceVisibility) == 0x001440, "Member 'ABP_jRPG_Character_World_C::DEBUG_DashTraceVisibility' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Relative_LocationSpringArmCache) == 0x001448, "Member 'ABP_jRPG_Character_World_C::Relative_LocationSpringArmCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, _CameraCacheRelativeLocation) == 0x001460, "Member 'ABP_jRPG_Character_World_C::_CameraCacheRelativeLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharacterLocationResetInProgress) == 0x001478, "Member 'ABP_jRPG_Character_World_C::CharacterLocationResetInProgress' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsManorCharacter) == 0x001479, "Member 'ABP_jRPG_Character_World_C::IsManorCharacter' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_CharaSwitch) == 0x001480, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_CharaSwitch' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_DoubleJump) == 0x001488, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_DoubleJump' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_Jump) == 0x001490, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_Jump' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_WorldStrike) == 0x001498, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_WorldStrike' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_Dash) == 0x0014A0, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_Dash' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_Landed) == 0x0014A8, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_Landed' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SD_CharacterWorld_MantleReachTop) == 0x0014B0, "Member 'ABP_jRPG_Character_World_C::SD_CharacterWorld_MantleReachTop' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CanHeadRotate) == 0x0014B8, "Member 'ABP_jRPG_Character_World_C::CanHeadRotate' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsUsingDebugTp) == 0x0014B9, "Member 'ABP_jRPG_Character_World_C::IsUsingDebugTp' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CanClimb) == 0x0014BA, "Member 'ABP_jRPG_Character_World_C::CanClimb' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FieldOfViewCache) == 0x0014C0, "Member 'ABP_jRPG_Character_World_C::FieldOfViewCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CameraLagSpeedCache) == 0x0014C8, "Member 'ABP_jRPG_Character_World_C::CameraLagSpeedCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, TargetArmLengthCache) == 0x0014D0, "Member 'ABP_jRPG_Character_World_C::TargetArmLengthCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SocketOffsetCache) == 0x0014D8, "Member 'ABP_jRPG_Character_World_C::SocketOffsetCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, TargetOffsetCache) == 0x0014F0, "Member 'ABP_jRPG_Character_World_C::TargetOffsetCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, PreviousLocation) == 0x001508, "Member 'ABP_jRPG_Character_World_C::PreviousLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DistanceTraveled) == 0x001520, "Member 'ABP_jRPG_Character_World_C::DistanceTraveled' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FreeAimShootingCooldown) == 0x001528, "Member 'ABP_jRPG_Character_World_C::FreeAimShootingCooldown' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, OriginalCameraLocation) == 0x001530, "Member 'ABP_jRPG_Character_World_C::OriginalCameraLocation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharacterExplorationAudioProfile) == 0x001548, "Member 'ABP_jRPG_Character_World_C::CharacterExplorationAudioProfile' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DebugFlySpeedIndex) == 0x001550, "Member 'ABP_jRPG_Character_World_C::DebugFlySpeedIndex' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpawnPointCache) == 0x001558, "Member 'ABP_jRPG_Character_World_C::SpawnPointCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsUsingShortJump) == 0x001560, "Member 'ABP_jRPG_Character_World_C::IsUsingShortJump' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CurrentShortJump) == 0x001568, "Member 'ABP_jRPG_Character_World_C::CurrentShortJump' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ActiveCharacterAtPreload) == 0x001570, "Member 'ABP_jRPG_Character_World_C::ActiveCharacterAtPreload' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DataAsset_ExplorationAudioProfile) == 0x001578, "Member 'ABP_jRPG_Character_World_C::DataAsset_ExplorationAudioProfile' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ActiveRooms) == 0x001580, "Member 'ABP_jRPG_Character_World_C::ActiveRooms' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, OnActiveRoomsChanged) == 0x001590, "Member 'ABP_jRPG_Character_World_C::OnActiveRoomsChanged' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DownRate) == 0x0015A0, "Member 'ABP_jRPG_Character_World_C::DownRate' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, GamepadCameraSpeedUpDown) == 0x0015A8, "Member 'ABP_jRPG_Character_World_C::GamepadCameraSpeedUpDown' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, GamepadCameraSpeedLeftRight) == 0x0015B0, "Member 'ABP_jRPG_Character_World_C::GamepadCameraSpeedLeftRight' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, TransformBeforeTPMenu) == 0x0015C0, "Member 'ABP_jRPG_Character_World_C::TransformBeforeTPMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FogsActivatedBeforeOpeningMenu) == 0x001620, "Member 'ABP_jRPG_Character_World_C::FogsActivatedBeforeOpeningMenu' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsInExplorationAttack) == 0x001630, "Member 'ABP_jRPG_Character_World_C::IsInExplorationAttack' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FXArmRingMaterial) == 0x001638, "Member 'ABP_jRPG_Character_World_C::FXArmRingMaterial' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CurrentFreeaimFeedback) == 0x001640, "Member 'ABP_jRPG_Character_World_C::CurrentFreeaimFeedback' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, SpringArmLengthBeforeMovement) == 0x001644, "Member 'ABP_jRPG_Character_World_C::SpringArmLengthBeforeMovement' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, MaxWalkSpeedCache) == 0x001648, "Member 'ABP_jRPG_Character_World_C::MaxWalkSpeedCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, FovBeforeMovement) == 0x00164C, "Member 'ABP_jRPG_Character_World_C::FovBeforeMovement' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CameraLagMaxDistanceBeforeMovement) == 0x001650, "Member 'ABP_jRPG_Character_World_C::CameraLagMaxDistanceBeforeMovement' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CameraLagMaxDistanceCache) == 0x001654, "Member 'ABP_jRPG_Character_World_C::CameraLagMaxDistanceCache' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, ChangeOverlay) == 0x001658, "Member 'ABP_jRPG_Character_World_C::ChangeOverlay' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharacterCapabilities) == 0x001660, "Member 'ABP_jRPG_Character_World_C::CharacterCapabilities' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Override_Character_Capabilites) == 0x0016B0, "Member 'ABP_jRPG_Character_World_C::Override_Character_Capabilites' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, UseOverrideCharacterCapabilities) == 0x001700, "Member 'ABP_jRPG_Character_World_C::UseOverrideCharacterCapabilities' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IKAlpha) == 0x001708, "Member 'ABP_jRPG_Character_World_C::IKAlpha' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsSprintRequested) == 0x001710, "Member 'ABP_jRPG_Character_World_C::IsSprintRequested' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CharacterMovementDataQueue) == 0x001718, "Member 'ABP_jRPG_Character_World_C::CharacterMovementDataQueue' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, TorchActor) == 0x001728, "Member 'ABP_jRPG_Character_World_C::TorchActor' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, Editor_ChestsRemainingInTheLevel) == 0x001730, "Member 'ABP_jRPG_Character_World_C::Editor_ChestsRemainingInTheLevel' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, UseCachedAimingRotationForInputs) == 0x001734, "Member 'ABP_jRPG_Character_World_C::UseCachedAimingRotationForInputs' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsInPostBattleAggroDelay) == 0x001735, "Member 'ABP_jRPG_Character_World_C::IsInPostBattleAggroDelay' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, OnCharacterCapabilitiesInitialized) == 0x001738, "Member 'ABP_jRPG_Character_World_C::OnCharacterCapabilitiesInitialized' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CachedAimingRotation) == 0x001748, "Member 'ABP_jRPG_Character_World_C::CachedAimingRotation' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, PreCinematicCameraBlendTime) == 0x001760, "Member 'ABP_jRPG_Character_World_C::PreCinematicCameraBlendTime' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, OriginalCamerasTransform) == 0x001768, "Member 'ABP_jRPG_Character_World_C::OriginalCamerasTransform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, OnDialogueStartCamerasTransform) == 0x0017B8, "Member 'ABP_jRPG_Character_World_C::OnDialogueStartCamerasTransform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CurrentHeartRate) == 0x001808, "Member 'ABP_jRPG_Character_World_C::CurrentHeartRate' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, IsAttachedToMovingPlatform) == 0x001810, "Member 'ABP_jRPG_Character_World_C::IsAttachedToMovingPlatform' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CheckpointInputLockBlocker) == 0x001818, "Member 'ABP_jRPG_Character_World_C::CheckpointInputLockBlocker' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CinematicInputLockBlocker) == 0x001838, "Member 'ABP_jRPG_Character_World_C::CinematicInputLockBlocker' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, CinematicInteractionLockBlocker) == 0x001858, "Member 'ABP_jRPG_Character_World_C::CinematicInteractionLockBlocker' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_Character_World_C, DefaultCameraModifierRotationLimiterClass) == 0x001878, "Member 'ABP_jRPG_Character_World_C::DefaultCameraModifierRotationLimiterClass' has a wrong offset!");

}

