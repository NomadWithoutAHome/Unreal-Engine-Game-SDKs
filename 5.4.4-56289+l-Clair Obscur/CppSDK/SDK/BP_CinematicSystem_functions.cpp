#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CinematicSystem

#include "Basic.hpp"

#include "BP_CinematicSystem_classes.hpp"
#include "BP_CinematicSystem_parameters.hpp"


namespace SDK
{

// Function BP_CinematicSystem.BP_CinematicSystem_C.AddLevelSequenceActorToDestroy
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ALevelSequenceActor*              ToDestroy                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::AddLevelSequenceActorToDestroy(class ALevelSequenceActor* ToDestroy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "AddLevelSequenceActorToDestroy");

	Params::BP_CinematicSystem_C_AddLevelSequenceActorToDestroy Parms{};

	Parms.ToDestroy = ToDestroy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ApplyFrameRateLimit
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ApplyFrameRateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ApplyFrameRateLimit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ApplyLODSettingsOnGroom
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ApplyLODSettingsOnGroom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ApplyLODSettingsOnGroom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.CleanUpAfterCinematic
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::CleanUpAfterCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "CleanUpAfterCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.CreateAssetLoadRequest
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::CreateAssetLoadRequest()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "CreateAssetLoadRequest");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.CreateCinematicControlsWidget
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::CreateCinematicControlsWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "CreateCinematicControlsWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.DEBUG_AutoSkipCinematicIfNeeded
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::DEBUG_AutoSkipCinematicIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "DEBUG_AutoSkipCinematicIfNeeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.DEBUG_GetCurrentState
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_CinematicSystem_C::DEBUG_GetCurrentState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "DEBUG_GetCurrentState");

	Params::BP_CinematicSystem_C_DEBUG_GetCurrentState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.DEBUG_ModifyCinematicParameters
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::DEBUG_ModifyCinematicParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "DEBUG_ModifyCinematicParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.DestroyCinematicControlsWidget
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::DestroyCinematicControlsWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "DestroyCinematicControlsWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.DisplayCinematicTransitionWidget
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// EUMGSequencePlayMode                    PlayMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::DisplayCinematicTransitionWidget(EUMGSequencePlayMode PlayMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "DisplayCinematicTransitionWidget");

	Params::BP_CinematicSystem_C_DisplayCinematicTransitionWidget Parms{};

	Parms.PlayMode = PlayMode;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ExecuteExitPointTransition
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ExecuteExitPointTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ExecuteExitPointTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ExecuteGameActionIfNeeded
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ExecuteGameActionIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ExecuteGameActionIfNeeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ExecutePostCinematicTransition
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ExecutePostCinematicTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ExecutePostCinematicTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ExecutePreCinematicTransition
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ExecutePreCinematicTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ExecutePreCinematicTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ExecuteUbergraph_BP_CinematicSystem
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::ExecuteUbergraph_BP_CinematicSystem(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ExecuteUbergraph_BP_CinematicSystem");

	Params::BP_CinematicSystem_C_ExecuteUbergraph_BP_CinematicSystem Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ExitCinematicModeForCharacter
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ExitCinematicModeForCharacter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ExitCinematicModeForCharacter");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.FinishLatentAction
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::FinishLatentAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "FinishLatentAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.FinishPreCinematicTransition
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::FinishPreCinematicTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "FinishPreCinematicTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.GetCharacterWorld
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_jRPG_Character_World_C**      AsBP_J_RPG_Character_World                             (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::GetCharacterWorld(class ABP_jRPG_Character_World_C** AsBP_J_RPG_Character_World)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "GetCharacterWorld");

	Params::BP_CinematicSystem_C_GetCharacterWorld Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AsBP_J_RPG_Character_World != nullptr)
		*AsBP_J_RPG_Character_World = Parms.AsBP_J_RPG_Character_World;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.GetOverlayForPreCinematicTransition
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EALSOverlayState*                       Overlay                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::GetOverlayForPreCinematicTransition(EALSOverlayState* Overlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "GetOverlayForPreCinematicTransition");

	Params::BP_CinematicSystem_C_GetOverlayForPreCinematicTransition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Overlay != nullptr)
		*Overlay = Parms.Overlay;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.GetSequenceTimeDebugInfo
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_CinematicSystem_C::GetSequenceTimeDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "GetSequenceTimeDebugInfo");

	Params::BP_CinematicSystem_C_GetSequenceTimeDebugInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.IsInCinematicTransition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CinematicSystem_C::IsInCinematicTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "IsInCinematicTransition");

	Params::BP_CinematicSystem_C_IsInCinematicTransition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.IsPlayingSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsPlaying                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::IsPlayingSequence(bool* IsPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "IsPlayingSequence");

	Params::BP_CinematicSystem_C_IsPlayingSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlaying != nullptr)
		*IsPlaying = Parms.IsPlaying;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.IsSequenceStarted
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_CinematicSystem_C::IsSequenceStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "IsSequenceStarted");

	Params::BP_CinematicSystem_C_IsSequenceStarted Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.OnPlatformPauseEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bShouldPause                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::OnPlatformPauseEvent(bool bShouldPause)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "OnPlatformPauseEvent");

	Params::BP_CinematicSystem_C_OnPlatformPauseEvent Parms{};

	Parms.bShouldPause = bShouldPause;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.OnPreCinematicInputLockTimerElapsed
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::OnPreCinematicInputLockTimerElapsed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "OnPreCinematicInputLockTimerElapsed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.OnSequenceFinished
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::OnSequenceFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "OnSequenceFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.OnSequenceStarted
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::OnSequenceStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "OnSequenceStarted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.OnUnpauseAnimationFinished
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::OnUnpauseAnimationFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "OnUnpauseAnimationFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.PauseCinematic
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::PauseCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "PauseCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.PauseSound
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::PauseSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "PauseSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.PlayCinematicWithLevelSequence
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::PlayCinematicWithLevelSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "PlayCinematicWithLevelSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.PlayCinematicWithMediaPlayer
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::PlayCinematicWithMediaPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "PlayCinematicWithMediaPlayer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.PrepareWorldToStartCinematic
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::PrepareWorldToStartCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "PrepareWorldToStartCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_CinematicSystem_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ReceiveTick");

	Params::BP_CinematicSystem_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.RegisterExternalAudioComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UAudioComponent*&           AudioComponent                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::RegisterExternalAudioComponent(const class UAudioComponent*& AudioComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "RegisterExternalAudioComponent");

	Params::BP_CinematicSystem_C_RegisterExternalAudioComponent Parms{};

	Parms.AudioComponent = AudioComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.RegisterSpawnedMediaPlayerActor
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_MediaPlayer_C*                MediaPlayer                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::RegisterSpawnedMediaPlayerActor(class ABP_MediaPlayer_C* MediaPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "RegisterSpawnedMediaPlayerActor");

	Params::BP_CinematicSystem_C_RegisterSpawnedMediaPlayerActor Parms{};

	Parms.MediaPlayer = MediaPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.RegisterSpawnedWidget
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      Widget                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::RegisterSpawnedWidget(class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "RegisterSpawnedWidget");

	Params::BP_CinematicSystem_C_RegisterSpawnedWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.RemoveFrameRateLimit
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::RemoveFrameRateLimit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "RemoveFrameRateLimit");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.RemoveLODSettingsOnGroom
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::RemoveLODSettingsOnGroom()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "RemoveLODSettingsOnGroom");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ResetBindings
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ResetBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ResetBindings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ResumeGameAfterCinematic
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::ResumeGameAfterCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ResumeGameAfterCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.SetPauseForSpawnedWidgets
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Paused                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::SetPauseForSpawnedWidgets(bool Paused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "SetPauseForSpawnedWidgets");

	Params::BP_CinematicSystem_C_SetPauseForSpawnedWidgets Parms{};

	Parms.Paused = Paused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.SetPauseMediaPlayerActor
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Paused                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::SetPauseMediaPlayerActor(bool Paused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "SetPauseMediaPlayerActor");

	Params::BP_CinematicSystem_C_SetPauseMediaPlayerActor Parms{};

	Parms.Paused = Paused;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.SetSequencePlayRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  PlayRate                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::SetSequencePlayRate(double PlayRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "SetSequencePlayRate");

	Params::BP_CinematicSystem_C_SetSequencePlayRate Parms{};

	Parms.PlayRate = PlayRate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.SkipCinematic
// (BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::SkipCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "SkipCinematic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.StartLevelSequence
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ULevelSequence*                   LevelSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FMovieSceneSequencePlaybackSettings&Settings                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CinematicSystem_C::StartLevelSequence(class ULevelSequence* LevelSequence, const struct FMovieSceneSequencePlaybackSettings& Settings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "StartLevelSequence");

	Params::BP_CinematicSystem_C_StartLevelSequence Parms{};

	Parms.LevelSequence = LevelSequence;
	Parms.Settings = std::move(Settings);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.StartPostCinematicTransition
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::StartPostCinematicTransition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "StartPostCinematicTransition");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.StartPreCinematicTransitionWithCameraBlend
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::StartPreCinematicTransitionWithCameraBlend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "StartPreCinematicTransitionWithCameraBlend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.StartPreCinematicTransitionWithoutCameraBlend
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::StartPreCinematicTransitionWithoutCameraBlend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "StartPreCinematicTransitionWithoutCameraBlend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.TriggerCinematic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_TriggerCinematicVariables&TriggerCinematicVariableStruct                         (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// class USF_BlueprintLatentAction*        LatentAction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::TriggerCinematic(const struct FS_TriggerCinematicVariables& TriggerCinematicVariableStruct, class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "TriggerCinematic");

	Params::BP_CinematicSystem_C_TriggerCinematic Parms{};

	Parms.TriggerCinematicVariableStruct = std::move(TriggerCinematicVariableStruct);
	Parms.LatentAction = LatentAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UnpauseSound
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::UnpauseSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UnpauseSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UnpauseSoundAfterSkip
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::UnpauseSoundAfterSkip()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UnpauseSoundAfterSkip");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UnregisterExternalAudioComponent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UAudioComponent*&           AudioComponent                                         (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::UnregisterExternalAudioComponent(const class UAudioComponent*& AudioComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UnregisterExternalAudioComponent");

	Params::BP_CinematicSystem_C_UnregisterExternalAudioComponent Parms{};

	Parms.AudioComponent = AudioComponent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UnregisterSpawnedMediaPlayerActor
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::UnregisterSpawnedMediaPlayerActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UnregisterSpawnedMediaPlayerActor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UnregisterSpawnedWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UUserWidget*&               Widget                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, InstancedReference, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::UnregisterSpawnedWidget(const class UUserWidget*& Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UnregisterSpawnedWidget");

	Params::BP_CinematicSystem_C_UnregisterSpawnedWidget Parms{};

	Parms.Widget = Widget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UpdateDynamicResolutionFrameBudget
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FrameRateLimitApplied                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::UpdateDynamicResolutionFrameBudget(bool FrameRateLimitApplied)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UpdateDynamicResolutionFrameBudget");

	Params::BP_CinematicSystem_C_UpdateDynamicResolutionFrameBudget Parms{};

	Parms.FrameRateLimitApplied = FrameRateLimitApplied;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.UpdateWorldCharacterIfNeeded
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CinematicSystem_C::UpdateWorldCharacterIfNeeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "UpdateWorldCharacterIfNeeded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ValidateCinematicContext
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_TriggerCinematicVariables&TriggerCinematicParameters                             (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::ValidateCinematicContext(const struct FS_TriggerCinematicVariables& TriggerCinematicParameters, bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ValidateCinematicContext");

	Params::BP_CinematicSystem_C_ValidateCinematicContext Parms{};

	Parms.TriggerCinematicParameters = std::move(TriggerCinematicParameters);

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}


// Function BP_CinematicSystem.BP_CinematicSystem_C.ValidateCinematicParameters
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsValid                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CinematicSystem_C::ValidateCinematicParameters(bool* IsValid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CinematicSystem_C", "ValidateCinematicParameters");

	Params::BP_CinematicSystem_C_ValidateCinematicParameters Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsValid != nullptr)
		*IsValid = Parms.IsValid;
}

}

