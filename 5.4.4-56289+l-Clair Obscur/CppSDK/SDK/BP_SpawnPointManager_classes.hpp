#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SpawnPointManager

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SpawnPointManager.BP_SpawnPointManager_C
// 0x0068 (0x0090 - 0x0028)
class UBP_SpawnPointManager_C final : public UExtendedObject
{
public:
	TMap<struct FGameplayTag, class ABP_jRPG_MapSpawnPoint_C*> LoadedSpawnPoints;                    // 0x0028(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(class ABP_jRPG_MapSpawnPoint_C* SpawnPoint)> OnSpawnPointRegistered; // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UBP_jRPG_GI_Custom_C*                   GI_Reference;                                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ComputeChangeLevelParameters(struct FS_ChangeLevelParameters* S_ChangeLevelParameters);
	void DEBUG_ActivateLightingScenarioForSpawnPoint(const struct FGameplayTag& SpawnPointTag);
	void GetOnLoadMapTransform(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters);
	void GetOnLoadMapTransformAfterBattle(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters);
	void GetOnLoadMapTransformForWorldMap(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters);
	void GetOnLoadMapTransformRegular(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters);
	void GetOnLoadMapTransformWithStaticSpawnPoint(struct FTransform* SpawnTransform, struct FRotator* CameraRotation, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, TSoftObjectPtr<class ABP_LightingScenarioReference_C>* LightingScenario, struct FS_AreaAudioParameters* AreaAudioParameters);
	void GetSpawnPointByTag(const struct FGameplayTag& SpawnPointTag, class ABP_jRPG_MapSpawnPoint_C** SpawnPoint, bool* Found);
	void GetStaticSpawnPointTag(struct FGameplayTag* SpawnPointTag);
	void IsSpawnPointLoaded(const struct FGameplayTag& SpawnPointTag, bool* IsLoaded);
	bool IsUsingDynamicSpawnPoint();
	void PrepareToChangeMap();
	void RegisterSpawnPoint(class ABP_jRPG_MapSpawnPoint_C* SpawnPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SpawnPointManager_C">();
	}
	static class UBP_SpawnPointManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_SpawnPointManager_C>();
	}
};
static_assert(alignof(UBP_SpawnPointManager_C) == 0x000008, "Wrong alignment on UBP_SpawnPointManager_C");
static_assert(sizeof(UBP_SpawnPointManager_C) == 0x000090, "Wrong size on UBP_SpawnPointManager_C");
static_assert(offsetof(UBP_SpawnPointManager_C, LoadedSpawnPoints) == 0x000028, "Member 'UBP_SpawnPointManager_C::LoadedSpawnPoints' has a wrong offset!");
static_assert(offsetof(UBP_SpawnPointManager_C, OnSpawnPointRegistered) == 0x000078, "Member 'UBP_SpawnPointManager_C::OnSpawnPointRegistered' has a wrong offset!");
static_assert(offsetof(UBP_SpawnPointManager_C, GI_Reference) == 0x000088, "Member 'UBP_SpawnPointManager_C::GI_Reference' has a wrong offset!");

}

