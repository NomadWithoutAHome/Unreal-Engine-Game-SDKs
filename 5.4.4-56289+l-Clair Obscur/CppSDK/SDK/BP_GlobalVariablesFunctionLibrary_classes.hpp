#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GlobalVariablesFunctionLibrary

#include "Basic.hpp"

#include "E_jRPG_ItemSubtype_structs.hpp"
#include "Engine_classes.hpp"
#include "E_CharacterList_structs.hpp"
#include "E_QuestStatus_structs.hpp"
#include "E_ExplorationCapacity_structs.hpp"
#include "E_jRPG_ItemType_structs.hpp"
#include "E_WorldMapExplorationCapacity_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GlobalVariablesFunctionLibrary.BP_GlobalVariablesFunctionLibrary_C
// 0x0000 (0x0028 - 0x0028)
class UBP_GlobalVariablesFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void HasEncounteredEnemy(class FName& EnemyGlobalID, class UObject* __WorldContext, bool* Result);
	static void HasExplorationCapacity(E_ExplorationCapacity Capacity, class UObject* __WorldContext, bool* Result);
	static bool HasUnlockedGradientParry(class UObject* __WorldContext);
	static bool HasUnlockedJump(class UObject* __WorldContext);
	static void HasPlayedTutorial(class FName& TutorialID, class UObject* __WorldContext, bool* Result);
	static void GetPlayedTime(class UObject* __WorldContext, double* PlayedTime);
	static void GetFinishedGameCount(class UObject* __WorldContext, int32* FinishedGameCount);
	static void HasAlreadyFinishedGame(class UObject* __WorldContext, bool* Result);
	static void HasPlayedDialogueStage(struct FGuid& DialogueGUID, int32 Stage, class UObject* __WorldContext, bool* Result);
	static void HasAtLeastGoldAmount(int32 GoldAmount, class UObject* __WorldContext, bool* Result);
	static void GetGoldAmount(class UObject* __WorldContext, int32* GoldAmount);
	static void HasCharacterInParty(E_CharacterList Character, class UObject* __WorldContext, bool* Result);
	static void HasCharacterInPartyByHardcodedName(class FName HardcodedName, class UObject* __WorldContext, bool* Result);
	static void HasCharacterInCollection(E_CharacterList Character, bool CheckExcludedCharacters, class UObject* __WorldContext, bool* Result);
	static void HasCharacterInCollectionByHardcodedName(class FName HardcodedName, bool CheckExcludedCharacters, class UObject* __WorldContext, bool* Result);
	static void HasAtLeastRelationshipLevel(E_CharacterList Character, int32 Level, class UObject* __WorldContext, bool* Result);
	static void GetRelationshipLevel(E_CharacterList Character, class UObject* __WorldContext, int32* Level);
	static void HasWorldMapCapacity(E_WorldMapExplorationCapacity Capacity, class UObject* __WorldContext, bool* Result);
	static void HasPlayedCinematic(class FName& CinematicID, class UObject* __WorldContext, bool* Result);
	static void HasBattledEnemy(class FName& EnemyGlobalID, class UObject* __WorldContext, bool* Result);
	static void HasPlayedDialogue(struct FGuid& DialogueGUID, class UObject* __WorldContext, bool* Result);
	static void HasPersistentFlag(class UNamedID* Flag, class UObject* __WorldContext, bool* Result);
	static void HasAtLeastAmountOfItemInInventory(struct FS_jRPG_Item_StaticData& Item, int32 Amount, class UObject* __WorldContext, bool* Result);
	static void HasItemInInventory(struct FS_jRPG_Item_StaticData& Item, class UObject* __WorldContext, bool* Result);
	static void GetAmountOfItemTypeInInventory(E_jRPG_ItemType ItemType, E_jRPG_ItemSubtype ItemSubtype, class UObject* __WorldContext, int32* ItemAmount);
	static void GetAmountOfItemInInventory(struct FS_jRPG_Item_StaticData& Item, class UObject* __WorldContext, int32* ItemAmount);
	static void ObjectiveHasStatus(struct FQuestObjectiveIdentifier& Objective, E_QuestStatus Status, class UObject* __WorldContext, bool* Result);
	static void QuestHasStatus(class FName& QuestName, E_QuestStatus Status, class UObject* __WorldContext, bool* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GlobalVariablesFunctionLibrary_C">();
	}
	static class UBP_GlobalVariablesFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GlobalVariablesFunctionLibrary_C>();
	}
};
static_assert(alignof(UBP_GlobalVariablesFunctionLibrary_C) == 0x000008, "Wrong alignment on UBP_GlobalVariablesFunctionLibrary_C");
static_assert(sizeof(UBP_GlobalVariablesFunctionLibrary_C) == 0x000028, "Wrong size on UBP_GlobalVariablesFunctionLibrary_C");

}

