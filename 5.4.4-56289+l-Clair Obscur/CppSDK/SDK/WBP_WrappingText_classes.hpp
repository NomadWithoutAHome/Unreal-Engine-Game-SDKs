#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WrappingText

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Slate_structs.hpp"
#include "CommonUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_WrappingText.WBP_WrappingText_C
// 0x00A8 (0x03B0 - 0x0308)
class UWBP_WrappingText_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCommonTextBlock*                       Text;                                              // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               TextSizeBox;                                       // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UClass*                                 TextStyle;                                         // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   ContentText;                                       // 0x0328(0x0010)(Edit, BlueprintVisible)
	double                                        TextMinDesiredWidth;                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TextMaxDesiredWidth;                               // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETextJustify                                  Justification;                                     // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, double>                   OverrideWidthByLanguage;                           // 0x0350(0x0050)(Edit, BlueprintVisible)
	bool                                          ReduceTextSizeWhenWrapping;                        // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A1[0x7];                                      // 0x03A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        WrappingFontSizePercentage;                        // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Construct();
	void Destruct();
	void ExecuteUbergraph_WBP_WrappingText(int32 EntryPoint);
	void FindFinalMaxDesiredWidth(double* FinalMaxDesiredWidth);
	void OnNextTick();
	void PreConstruct(bool IsDesignTime);
	void Set_Text(class FText& InText);
	void SetStyle(class UClass* TextStyle_0);
	void SetTextMaxDesiredWidth(double TextMaxDesiredWidth_0);
	void SetTextMinDesiredWidth(double TextMaxDesiredWidth_0);
	void SetWrappingFontSizePercentage(double WrappingFontSizePercentage_0);
	void UpdateText();
	void UpdateTextSizeIfWrapping(double MaxDesiredWidth);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_WrappingText_C">();
	}
	static class UWBP_WrappingText_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_WrappingText_C>();
	}
};
static_assert(alignof(UWBP_WrappingText_C) == 0x000008, "Wrong alignment on UWBP_WrappingText_C");
static_assert(sizeof(UWBP_WrappingText_C) == 0x0003B0, "Wrong size on UWBP_WrappingText_C");
static_assert(offsetof(UWBP_WrappingText_C, UberGraphFrame) == 0x000308, "Member 'UWBP_WrappingText_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, Text) == 0x000310, "Member 'UWBP_WrappingText_C::Text' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, TextSizeBox) == 0x000318, "Member 'UWBP_WrappingText_C::TextSizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, TextStyle) == 0x000320, "Member 'UWBP_WrappingText_C::TextStyle' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, ContentText) == 0x000328, "Member 'UWBP_WrappingText_C::ContentText' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, TextMinDesiredWidth) == 0x000338, "Member 'UWBP_WrappingText_C::TextMinDesiredWidth' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, TextMaxDesiredWidth) == 0x000340, "Member 'UWBP_WrappingText_C::TextMaxDesiredWidth' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, Justification) == 0x000348, "Member 'UWBP_WrappingText_C::Justification' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, OverrideWidthByLanguage) == 0x000350, "Member 'UWBP_WrappingText_C::OverrideWidthByLanguage' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, ReduceTextSizeWhenWrapping) == 0x0003A0, "Member 'UWBP_WrappingText_C::ReduceTextSizeWhenWrapping' has a wrong offset!");
static_assert(offsetof(UWBP_WrappingText_C, WrappingFontSizePercentage) == 0x0003A8, "Member 'UWBP_WrappingText_C::WrappingFontSizePercentage' has a wrong offset!");

}

