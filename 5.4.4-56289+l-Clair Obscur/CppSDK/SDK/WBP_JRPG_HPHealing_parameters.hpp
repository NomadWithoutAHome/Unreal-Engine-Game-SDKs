#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_JRPG_HPHealing

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_JRPG_HPHealing.WBP_JRPG_HPHealing_C.ExecuteUbergraph_WBP_JRPG_HPHealing
// 0x00D0 (0x00D0 - 0x0000)
struct WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x000C(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       K2Node_DynamicCast_AsBP_J_RPG_Character_Battle_Base; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0078(0x0014)()
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ProjectWorldLocationToScreen_ScreenLocation; // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldLocationToScreen_ReturnValue; // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetHealText_ReturnValue;                  // 0x00A8(0x0010)()
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       K2Node_Select_Default_2;                           // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing) == 0x000008, "Wrong alignment on WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing");
static_assert(sizeof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing) == 0x0000D0, "Wrong size on WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, EntryPoint) == 0x000000, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_byte_Variable) == 0x000004, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_bool_Variable) == 0x000006, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_byte_Variable_2) == 0x000007, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_byte_Variable_3) == 0x000008, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_bool_Variable_1) == 0x000009, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_Event_MyGeometry) == 0x00000C, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_Event_InDeltaTime) == 0x000044, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_GetPlayerController_ReturnValue) == 0x000048, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_DynamicCast_AsBP_J_RPG_Character_Battle_Base) == 0x000050, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_DynamicCast_AsBP_J_RPG_Character_Battle_Base' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_Event_IsDesignTime) == 0x000059, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000060, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_MakeStruct_SlateColor) == 0x000078, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_ProjectWorldLocationToScreen_ScreenLocation) == 0x000090, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_ProjectWorldLocationToScreen_ScreenLocation' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_ProjectWorldLocationToScreen_ReturnValue) == 0x0000A0, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_ProjectWorldLocationToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_GetHealText_ReturnValue) == 0x0000A8, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_GetHealText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0000B8, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, Temp_bool_Variable_2) == 0x0000B9, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_Select_Default) == 0x0000BA, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_Select_Default_1) == 0x0000BB, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x0000BC, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, K2Node_Select_Default_2) == 0x0000C0, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing, CallFunc_PlayAnimationForward_ReturnValue) == 0x0000C8, "Member 'WBP_JRPG_HPHealing_C_ExecuteUbergraph_WBP_JRPG_HPHealing::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");

// Function WBP_JRPG_HPHealing.WBP_JRPG_HPHealing_C.GetHealText
// 0x0088 (0x0088 - 0x0000)
struct WBP_JRPG_HPHealing_C_GetHealText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ReturnParm)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x0010(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0010)()
};
static_assert(alignof(WBP_JRPG_HPHealing_C_GetHealText) == 0x000008, "Wrong alignment on WBP_JRPG_HPHealing_C_GetHealText");
static_assert(sizeof(WBP_JRPG_HPHealing_C_GetHealText) == 0x000088, "Wrong size on WBP_JRPG_HPHealing_C_GetHealText");
static_assert(offsetof(WBP_JRPG_HPHealing_C_GetHealText, ReturnValue) == 0x000000, "Member 'WBP_JRPG_HPHealing_C_GetHealText::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_GetHealText, CallFunc_Conv_DoubleToText_ReturnValue) == 0x000010, "Member 'WBP_JRPG_HPHealing_C_GetHealText::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_GetHealText, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'WBP_JRPG_HPHealing_C_GetHealText::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_GetHealText, K2Node_MakeArray_Array) == 0x000068, "Member 'WBP_JRPG_HPHealing_C_GetHealText::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_GetHealText, CallFunc_Format_ReturnValue) == 0x000078, "Member 'WBP_JRPG_HPHealing_C_GetHealText::CallFunc_Format_ReturnValue' has a wrong offset!");

// Function WBP_JRPG_HPHealing.WBP_JRPG_HPHealing_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_JRPG_HPHealing_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JRPG_HPHealing_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_JRPG_HPHealing_C_PreConstruct");
static_assert(sizeof(WBP_JRPG_HPHealing_C_PreConstruct) == 0x000001, "Wrong size on WBP_JRPG_HPHealing_C_PreConstruct");
static_assert(offsetof(WBP_JRPG_HPHealing_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_JRPG_HPHealing_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_JRPG_HPHealing.WBP_JRPG_HPHealing_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_JRPG_HPHealing_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_JRPG_HPHealing_C_Tick) == 0x000004, "Wrong alignment on WBP_JRPG_HPHealing_C_Tick");
static_assert(sizeof(WBP_JRPG_HPHealing_C_Tick) == 0x00003C, "Wrong size on WBP_JRPG_HPHealing_C_Tick");
static_assert(offsetof(WBP_JRPG_HPHealing_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_JRPG_HPHealing_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_JRPG_HPHealing_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_JRPG_HPHealing_C_Tick::InDeltaTime' has a wrong offset!");

}

