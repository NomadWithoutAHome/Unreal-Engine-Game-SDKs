#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_Character_Battle_Base

#include "Basic.hpp"

#include "BP_jRPG_Character_Battle_Base_classes.hpp"
#include "BP_jRPG_Character_Battle_Base_parameters.hpp"


namespace SDK
{

// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnInstigatedActorSpawned
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           SpawnedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::OnInstigatedActorSpawned(class AActor* SpawnedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnInstigatedActorSpawned");

	Params::BP_jRPG_Character_Battle_Base_C_OnInstigatedActorSpawned Parms{};

	Parms.SpawnedActor = SpawnedActor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BPI_GetDependencies
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TSoftClassPtr<class UClass>>*    Classes                                                (Parm, OutParm)
// TArray<TSoftObjectPtr<class UObject>>*  Assets                                                 (Parm, OutParm)
// TArray<TScriptInterface<class IBPI_LoadingDependenciesSource_C>>*ExternalDependencies                                   (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::BPI_GetDependencies(TArray<TSoftClassPtr<class UClass>>* Classes, TArray<TSoftObjectPtr<class UObject>>* Assets, TArray<TScriptInterface<class IBPI_LoadingDependenciesSource_C>>* ExternalDependencies)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BPI_GetDependencies");

	Params::BP_jRPG_Character_Battle_Base_C_BPI_GetDependencies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Classes != nullptr)
		*Classes = std::move(Parms.Classes);

	if (Assets != nullptr)
		*Assets = std::move(Parms.Assets);

	if (ExternalDependencies != nullptr)
		*ExternalDependencies = std::move(Parms.ExternalDependencies);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleAudioProfile
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CharacterBattleAudioProfile_C**AudioProfile                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetBattleAudioProfile(class UBP_DataAsset_CharacterBattleAudioProfile_C** AudioProfile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleAudioProfile");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleAudioProfile Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AudioProfile != nullptr)
		*AudioProfile = Parms.AudioProfile;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleAudioContainerComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USceneComponent**                 SFX                                                    (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 weapon_l                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 weapon_r                                               (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 Foley                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 Vocal                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 foot_l                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 Foot_R                                                 (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USceneComponent**                 HitBy                                                  (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetBattleAudioContainerComponents(class USceneComponent** SFX, class USceneComponent** weapon_l, class USceneComponent** weapon_r, class USceneComponent** Foley, class USceneComponent** Vocal, class USceneComponent** foot_l, class USceneComponent** Foot_R, class USceneComponent** HitBy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleAudioContainerComponents");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleAudioContainerComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SFX != nullptr)
		*SFX = Parms.SFX;

	if (weapon_l != nullptr)
		*weapon_l = Parms.weapon_l;

	if (weapon_r != nullptr)
		*weapon_r = Parms.weapon_r;

	if (Foley != nullptr)
		*Foley = Parms.Foley;

	if (Vocal != nullptr)
		*Vocal = Parms.Vocal;

	if (foot_l != nullptr)
		*foot_l = Parms.foot_l;

	if (Foot_R != nullptr)
		*Foot_R = Parms.Foot_R;

	if (HitBy != nullptr)
		*HitBy = Parms.HitBy;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleAudioCharacterManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_AudioCharacter_BattleManager_C**AudioCharacterBattleManager                            (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetBattleAudioCharacterManager(class UBP_AudioCharacter_BattleManager_C** AudioCharacterBattleManager)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleAudioCharacterManager");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleAudioCharacterManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (AudioCharacterBattleManager != nullptr)
		*AudioCharacterBattleManager = Parms.AudioCharacterBattleManager;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetTiedObject
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject**                         Object                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetTiedObject(class UObject** Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetTiedObject");

	Params::BP_jRPG_Character_Battle_Base_C_GetTiedObject Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Object != nullptr)
		*Object = Parms.Object;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetIsDead
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Dead                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetIsDead(bool* Dead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetIsDead");

	Params::BP_jRPG_Character_Battle_Base_C_GetIsDead Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Dead != nullptr)
		*Dead = Parms.Dead;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetIsDefending
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Defending                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetIsDefending(bool* Defending)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetIsDefending");

	Params::BP_jRPG_Character_Battle_Base_C_GetIsDefending Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Defending != nullptr)
		*Defending = Parms.Defending;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetCharacterCombatStyle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_jRPG_CombatStyle*                     CombatStyle                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetCharacterCombatStyle(E_jRPG_CombatStyle* CombatStyle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetCharacterCombatStyle");

	Params::BP_jRPG_Character_Battle_Base_C_GetCharacterCombatStyle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CombatStyle != nullptr)
		*CombatStyle = Parms.CombatStyle;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FlushAdditionalTurnEndEvent
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::FlushAdditionalTurnEndEvent(bool* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FlushAdditionalTurnEndEvent");

	Params::BP_jRPG_Character_Battle_Base_C_FlushAdditionalTurnEndEvent Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.RequestAdditionalTurnEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::RequestAdditionalTurnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "RequestAdditionalTurnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HasFinisherSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::HasFinisherSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HasFinisherSequence");

	Params::BP_jRPG_Character_Battle_Base_C_HasFinisherSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetTransformForBattleSequenceSnapping
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FTransform                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

const struct FTransform ABP_jRPG_Character_Battle_Base_C::GetTransformForBattleSequenceSnapping()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetTransformForBattleSequenceSnapping");

	Params::BP_jRPG_Character_Battle_Base_C_GetTransformForBattleSequenceSnapping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.InitializeLifeLinkedCharacters
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::InitializeLifeLinkedCharacters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "InitializeLifeLinkedCharacters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AddLifeLinkedCharacter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* LifeLinkedCharacter                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::AddLifeLinkedCharacter(class ABP_jRPG_Character_Battle_Base_C* LifeLinkedCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AddLifeLinkedCharacter");

	Params::BP_jRPG_Character_Battle_Base_C_AddLifeLinkedCharacter Parms{};

	Parms.LifeLinkedCharacter = LifeLinkedCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsLifeLinkedMaster
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::IsLifeLinkedMaster()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsLifeLinkedMaster");

	Params::BP_jRPG_Character_Battle_Base_C_IsLifeLinkedMaster Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsLifeLinked
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::IsLifeLinked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsLifeLinked");

	Params::BP_jRPG_Character_Battle_Base_C_IsLifeLinked Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetLocationForSequenceSnapping
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector*                         InitialLocation                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetLocationForSequenceSnapping(struct FVector* InitialLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetLocationForSequenceSnapping");

	Params::BP_jRPG_Character_Battle_Base_C_GetLocationForSequenceSnapping Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (InitialLocation != nullptr)
		*InitialLocation = std::move(Parms.InitialLocation);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetCounterDamageLevelMultiplier
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_jRPG_Character_Battle_Base_C::GetCounterDamageLevelMultiplier()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetCounterDamageLevelMultiplier");

	Params::BP_jRPG_Character_Battle_Base_C_GetCounterDamageLevelMultiplier Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PlayBattleDialogueLine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       SoundAsset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PlayBattleDialogueLine(class USoundBase* SoundAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PlayBattleDialogueLine");

	Params::BP_jRPG_Character_Battle_Base_C_PlayBattleDialogueLine Parms{};

	Parms.SoundAsset = SoundAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PlaySkillBattleLine
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USoundBase*                       SoundAsset                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PlaySkillBattleLine(class USoundBase* SoundAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PlaySkillBattleLine");

	Params::BP_jRPG_Character_Battle_Base_C_PlaySkillBattleLine Parms{};

	Parms.SoundAsset = SoundAsset;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleLineModel
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_BattleLinesModel_Base_C*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class UBP_BattleLinesModel_Base_C* ABP_jRPG_Character_Battle_Base_C::GetBattleLineModel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleLineModel");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleLineModel Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ApplyDifficultySettings
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ApplyDifficultySettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ApplyDifficultySettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Internal_SetUniqueMechanicOverpoweredState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Internal_SetUniqueMechanicOverpoweredState(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Internal_SetUniqueMechanicOverpoweredState");

	Params::BP_jRPG_Character_Battle_Base_C_Internal_SetUniqueMechanicOverpoweredState Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetParryImmuneDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_jRPG_Character_Battle_Base_C::GetParryImmuneDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetParryImmuneDuration");

	Params::BP_jRPG_Character_Battle_Base_C_GetParryImmuneDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetDodgeImmuneDuration
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

double ABP_jRPG_Character_Battle_Base_C::GetDodgeImmuneDuration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetDodgeImmuneDuration");

	Params::BP_jRPG_Character_Battle_Base_C_GetDodgeImmuneDuration Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetIsBeingCountered
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsBeingCountered_0                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetIsBeingCountered(bool* IsBeingCountered_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetIsBeingCountered");

	Params::BP_jRPG_Character_Battle_Base_C_GetIsBeingCountered Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsBeingCountered_0 != nullptr)
		*IsBeingCountered_0 = Parms.IsBeingCountered_0;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleSpotIndex
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  BattleSpotIndex_0                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetBattleSpotIndex(int32* BattleSpotIndex_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleSpotIndex");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleSpotIndex Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleSpotIndex_0 != nullptr)
		*BattleSpotIndex_0 = Parms.BattleSpotIndex_0;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetAcquiredTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*Characters                                             (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetAcquiredTargets(TArray<class ABP_jRPG_Character_Battle_Base_C*>* Characters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetAcquiredTargets");

	Params::BP_jRPG_Character_Battle_Base_C_GetAcquiredTargets Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Characters != nullptr)
		*Characters = std::move(Parms.Characters);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ClearAcquiredTargets
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ClearAcquiredTargets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ClearAcquiredTargets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryStopParryAnim
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::TryStopParryAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryStopParryAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnGroupCounterAttackBegin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* CounterAttackTarget                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnGroupCounterAttackBegin(class ABP_jRPG_Character_Battle_Base_C* CounterAttackTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnGroupCounterAttackBegin");

	Params::BP_jRPG_Character_Battle_Base_C_OnGroupCounterAttackBegin Parms{};

	Parms.CounterAttackTarget = CounterAttackTarget;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnCounteredStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnCounteredStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnCounteredStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetHasAimingSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   HasAimingSkill_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetHasAimingSkill(bool* HasAimingSkill_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetHasAimingSkill");

	Params::BP_jRPG_Character_Battle_Base_C_GetHasAimingSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasAimingSkill_0 != nullptr)
		*HasAimingSkill_0 = Parms.HasAimingSkill_0;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetActiveCounterSequence
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_EpicBattleSequenceActor_C*    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class ABP_EpicBattleSequenceActor_C* ABP_jRPG_Character_Battle_Base_C::GetActiveCounterSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetActiveCounterSequence");

	Params::BP_jRPG_Character_Battle_Base_C_GetActiveCounterSequence Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CanCounterAttackCurrentEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::CanCounterAttackCurrentEnemy()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CanCounterAttackCurrentEnemy");

	Params::BP_jRPG_Character_Battle_Base_C_CanCounterAttackCurrentEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HasUnlockedJump
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::HasUnlockedJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HasUnlockedJump");

	Params::BP_jRPG_Character_Battle_Base_C_HasUnlockedJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ActivateLightingScenarioWithTag
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             LightingScenarioTag                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const float                             ChangeSpeedMultiplier                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ActivateLightingScenarioWithTag(class FName LightingScenarioTag, const float ChangeSpeedMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ActivateLightingScenarioWithTag");

	Params::BP_jRPG_Character_Battle_Base_C_ActivateLightingScenarioWithTag Parms{};

	Parms.LightingScenarioTag = LightingScenarioTag;
	Parms.ChangeSpeedMultiplier = ChangeSpeedMultiplier;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleWheel2DOffsetForPage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              WheelPageTag                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       TwoDOffset                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetBattleWheel2DOffsetForPage(const struct FGameplayTag& WheelPageTag, struct FVector2D* TwoDOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleWheel2DOffsetForPage");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleWheel2DOffsetForPage Parms{};

	Parms.WheelPageTag = std::move(WheelPageTag);

	UObject::ProcessEvent(Func, &Parms);

	if (TwoDOffset != nullptr)
		*TwoDOffset = std::move(Parms.TwoDOffset);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetBattleCharacterVisible
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetBattleCharacterVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetBattleCharacterVisible");

	Params::BP_jRPG_Character_Battle_Base_C_SetBattleCharacterVisible Parms{};

	Parms.Visible = Visible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetShouldPlayFinisherAtTurnEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShouldPlayFinisherWhenTurnEnd_0                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetShouldPlayFinisherAtTurnEnd(bool ShouldPlayFinisherWhenTurnEnd_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetShouldPlayFinisherAtTurnEnd");

	Params::BP_jRPG_Character_Battle_Base_C_SetShouldPlayFinisherAtTurnEnd Parms{};

	Parms.ShouldPlayFinisherWhenTurnEnd_0 = ShouldPlayFinisherWhenTurnEnd_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetShouldPlayFinisher
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   ShouldPlayFinisherWhenTurnEnd_0                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetShouldPlayFinisher(bool* ShouldPlayFinisherWhenTurnEnd_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetShouldPlayFinisher");

	Params::BP_jRPG_Character_Battle_Base_C_GetShouldPlayFinisher Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (ShouldPlayFinisherWhenTurnEnd_0 != nullptr)
		*ShouldPlayFinisherWhenTurnEnd_0 = Parms.ShouldPlayFinisherWhenTurnEnd_0;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_BattleMap_C**                 BattleMap                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetBattleMap(class ABP_BattleMap_C** BattleMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleMap");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattleMap != nullptr)
		*BattleMap = Parms.BattleMap;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetCharacterAudioManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_AudioCharacter_BattleManager_C*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UBP_AudioCharacter_BattleManager_C* ABP_jRPG_Character_Battle_Base_C::GetCharacterAudioManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetCharacterAudioManager");

	Params::BP_jRPG_Character_Battle_Base_C_GetCharacterAudioManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.InitializeLODSync
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::InitializeLODSync()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "InitializeLODSync");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.LODSyncBattle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::LODSyncBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "LODSyncBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.LODSyncApplyParameter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UConfigurableGameUserSettings*    UserSettings                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::LODSyncApplyParameter(class UConfigurableGameUserSettings* UserSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "LODSyncApplyParameter");

	Params::BP_jRPG_Character_Battle_Base_C_LODSyncApplyParameter Parms{};

	Parms.UserSettings = UserSettings;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SummonSingleMinion
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       EnemyRow                                               (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// int32                                   BattleSpotIndex_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NotifyBattleStart                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_jRPG_Character_Battle_Base_C**SpawnedCharacter                                       (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         SpawnLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SummonSingleMinion(const struct FDataTableRowHandle& EnemyRow, int32 BattleSpotIndex_0, bool NotifyBattleStart, class ABP_jRPG_Character_Battle_Base_C** SpawnedCharacter, struct FVector* SpawnLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SummonSingleMinion");

	Params::BP_jRPG_Character_Battle_Base_C_SummonSingleMinion Parms{};

	Parms.EnemyRow = std::move(EnemyRow);
	Parms.BattleSpotIndex_0 = BattleSpotIndex_0;
	Parms.NotifyBattleStart = NotifyBattleStart;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedCharacter != nullptr)
		*SpawnedCharacter = Parms.SpawnedCharacter;

	if (SpawnLocation != nullptr)
		*SpawnLocation = std::move(Parms.SpawnLocation);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CleanInstigatedActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::CleanInstigatedActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CleanInstigatedActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.RegisterExternalActor
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::RegisterExternalActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "RegisterExternalActor");

	Params::BP_jRPG_Character_Battle_Base_C_RegisterExternalActor Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ProcessDamageReceivedSound
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*              BattleDamage                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ProcessDamageReceivedSound(class UBP_BattleDamages_C* BattleDamage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ProcessDamageReceivedSound");

	Params::BP_jRPG_Character_Battle_Base_C_ProcessDamageReceivedSound Parms{};

	Parms.BattleDamage = BattleDamage;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SpawnDamagePopupFromDamages
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*              BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UWBP_HUD_DamageFeedback_C**       DamageWidget                                           (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SpawnDamagePopupFromDamages(class UBP_BattleDamages_C* BattleDamages, class UWBP_HUD_DamageFeedback_C** DamageWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SpawnDamagePopupFromDamages");

	Params::BP_jRPG_Character_Battle_Base_C_SpawnDamagePopupFromDamages Parms{};

	Parms.BattleDamages = BattleDamages;

	UObject::ProcessEvent(Func, &Parms);

	if (DamageWidget != nullptr)
		*DamageWidget = Parms.DamageWidget;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ResolveHitSound
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ResolveHitSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ResolveHitSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Attach Weapons to Hands
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_WeaponSkin_C*                 WeaponActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Attach_Weapons_to_Hands(class ABP_WeaponSkin_C* WeaponActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Attach Weapons to Hands");

	Params::BP_jRPG_Character_Battle_Base_C_Attach_Weapons_to_Hands Parms{};

	Parms.WeaponActor = WeaponActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.InitializeCameraFocus
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::InitializeCameraFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "InitializeCameraFocus");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetDamagePopupWorldLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_jRPG_Character_Battle_Base_C::GetDamagePopupWorldLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetDamagePopupWorldLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetDamagePopupWorldLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteSkillAction
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             SkillID                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteSkillAction(class FName SkillID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteSkillAction");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteSkillAction Parms{};

	Parms.SkillID = SkillID;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ClearActionEffectNumber
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ClearActionEffectNumber(const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ClearActionEffectNumber");

	Params::BP_jRPG_Character_Battle_Base_C_ClearActionEffectNumber Parms{};

	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetAttackedLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FVector ABP_jRPG_Character_Battle_Base_C::GetAttackedLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetAttackedLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetAttackedLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HasReceivedBattleStart
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::HasReceivedBattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HasReceivedBattleStart");

	Params::BP_jRPG_Character_Battle_Base_C_HasReceivedBattleStart Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetWeaponActor
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class ABP_WeaponSkin_C*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)

class ABP_WeaponSkin_C* ABP_jRPG_Character_Battle_Base_C::GetWeaponActor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetWeaponActor");

	Params::BP_jRPG_Character_Battle_Base_C_GetWeaponActor Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartCounterableMove
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECounterType                            CounterType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartCounterableMove(ECounterType CounterType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartCounterableMove");

	Params::BP_jRPG_Character_Battle_Base_C_StartCounterableMove Parms{};

	Parms.CounterType = CounterType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PerformActionByAI_Internal
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PerformActionByAI_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PerformActionByAI_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteSkillEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRoutedEventHandle&             SkillHandle                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteSkillEvent(struct FFRoutedEventHandle& SkillHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteSkillEvent");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteSkillEvent Parms{};

	Parms.SkillHandle = std::move(SkillHandle);

	UObject::ProcessEvent(Func, &Parms);

	SkillHandle = std::move(Parms.SkillHandle);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DeclareSkillEvent
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FFRoutedEventHandle&             SkillHandle                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DeclareSkillEvent(struct FFRoutedEventHandle& SkillHandle, const TDelegate<void()>& Event, const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DeclareSkillEvent");

	Params::BP_jRPG_Character_Battle_Base_C_DeclareSkillEvent Parms{};

	Parms.SkillHandle = std::move(SkillHandle);
	Parms.Event = Event;
	Parms.DebugName = std::move(DebugName);

	UObject::ProcessEvent(Func, &Parms);

	SkillHandle = std::move(Parms.SkillHandle);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DeclareCharacterSkillEvents
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::DeclareCharacterSkillEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DeclareCharacterSkillEvents");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteSkillScript
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Battle_SkillScript_C*         SkillScriptInstance                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteSkillScript(class ABP_Battle_SkillScript_C* SkillScriptInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteSkillScript");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteSkillScript Parms{};

	Parms.SkillScriptInstance = SkillScriptInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattleEnded
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnBattleEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattleEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ShouldDoLastStand
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   DoLastStand                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ShouldDoLastStand(bool* DoLastStand)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ShouldDoLastStand");

	Params::BP_jRPG_Character_Battle_Base_C_ShouldDoLastStand Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (DoLastStand != nullptr)
		*DoLastStand = Parms.DoLastStand;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AdjustDefensiveMoveLockTimer
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  NewDuration                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::AdjustDefensiveMoveLockTimer(double NewDuration, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AdjustDefensiveMoveLockTimer");

	Params::BP_jRPG_Character_Battle_Base_C_AdjustDefensiveMoveLockTimer Parms{};

	Parms.NewDuration = NewDuration;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDefenseLockTimerExpired
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnDefenseLockTimerExpired()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDefenseLockTimerExpired");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Acquire Targets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>&Targets                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*AcquiredTargets                                        (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::Acquire_Targets(TArray<class ABP_jRPG_Character_Battle_Base_C*>& Targets, TArray<class ABP_jRPG_Character_Battle_Base_C*>* AcquiredTargets)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Acquire Targets");

	Params::BP_jRPG_Character_Battle_Base_C_Acquire_Targets Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	Targets = std::move(Parms.Targets);

	if (AcquiredTargets != nullptr)
		*AcquiredTargets = std::move(Parms.AcquiredTargets);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsLastActionEffectOfSkill
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::IsLastActionEffectOfSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsLastActionEffectOfSkill");

	Params::BP_jRPG_Character_Battle_Base_C_IsLastActionEffectOfSkill Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ApplyStandardStatusEffectOnTarget
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StatusEffects                         StatusEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TurnDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffApplicationProbability             StatusEffectProbability                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_jRPG_Character_Battle_Base_C* TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ApplyStandardStatusEffectOnTarget(E_StatusEffects StatusEffect, int32 TurnDuration, EBuffApplicationProbability StatusEffectProbability, bool Condition, class ABP_jRPG_Character_Battle_Base_C* TargetCharacter, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ApplyStandardStatusEffectOnTarget");

	Params::BP_jRPG_Character_Battle_Base_C_ApplyStandardStatusEffectOnTarget Parms{};

	Parms.StatusEffect = StatusEffect;
	Parms.TurnDuration = TurnDuration;
	Parms.StatusEffectProbability = StatusEffectProbability;
	Parms.Condition = Condition;
	Parms.TargetCharacter = TargetCharacter;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ApplyStandardStatusEffect
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_StatusEffects                         StatusEffect                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TurnDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBuffApplicationProbability             StatusEffectProbability                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ApplyStandardStatusEffect(E_StatusEffects StatusEffect, int32 TurnDuration, EBuffApplicationProbability StatusEffectProbability, bool Condition, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ApplyStandardStatusEffect");

	Params::BP_jRPG_Character_Battle_Base_C_ApplyStandardStatusEffect Parms{};

	Parms.StatusEffect = StatusEffect;
	Parms.TurnDuration = TurnDuration;
	Parms.StatusEffectProbability = StatusEffectProbability;
	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PerformStandardHit
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanBeCountered_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanBeJumped                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequiresGradientCounter                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DamageMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackType                             DamageElement                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasHit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class UBP_BattleDamages_C*>*     BattleDamages                                          (Parm, OutParm, ContainsInstancedReference)

void ABP_jRPG_Character_Battle_Base_C::PerformStandardHit(bool CanBeCountered_0, bool CanBeJumped, bool RequiresGradientCounter, double DamageMultiplier, EAttackType DamageElement, bool* HasHit, TArray<class UBP_BattleDamages_C*>* BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PerformStandardHit");

	Params::BP_jRPG_Character_Battle_Base_C_PerformStandardHit Parms{};

	Parms.CanBeCountered_0 = CanBeCountered_0;
	Parms.CanBeJumped = CanBeJumped;
	Parms.RequiresGradientCounter = RequiresGradientCounter;
	Parms.DamageMultiplier = DamageMultiplier;
	Parms.DamageElement = DamageElement;

	UObject::ProcessEvent(Func, &Parms);

	if (HasHit != nullptr)
		*HasHit = Parms.HasHit;

	if (BattleDamages != nullptr)
		*BattleDamages = std::move(Parms.BattleDamages);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PerformStandardHitOnCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    CanBeCountered_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CanBeJumped                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RequiresGradientCounter                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DamageMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackType                             DamageElement                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   HasHit                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleDamages_C**             BattleDamages                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PerformStandardHitOnCharacter(class ABP_jRPG_Character_Battle_Base_C* TargetCharacter, bool CanBeCountered_0, bool CanBeJumped, bool RequiresGradientCounter, double DamageMultiplier, EAttackType DamageElement, bool* HasHit, class UBP_BattleDamages_C** BattleDamages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PerformStandardHitOnCharacter");

	Params::BP_jRPG_Character_Battle_Base_C_PerformStandardHitOnCharacter Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.CanBeCountered_0 = CanBeCountered_0;
	Parms.CanBeJumped = CanBeJumped;
	Parms.RequiresGradientCounter = RequiresGradientCounter;
	Parms.DamageMultiplier = DamageMultiplier;
	Parms.DamageElement = DamageElement;

	UObject::ProcessEvent(Func, &Parms);

	if (HasHit != nullptr)
		*HasHit = Parms.HasHit;

	if (BattleDamages != nullptr)
		*BattleDamages = Parms.BattleDamages;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetActiveFreeAimHand
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseRightHand                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             BoneOverride                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetActiveFreeAimHand(bool UseRightHand, class FName BoneOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetActiveFreeAimHand");

	Params::BP_jRPG_Character_Battle_Base_C_SetActiveFreeAimHand Parms{};

	Parms.UseRightHand = UseRightHand;
	Parms.BoneOverride = BoneOverride;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryPerformLastStand
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_LastStandRequest_C*           LastStandRequest                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::TryPerformLastStand(class UBP_LastStandRequest_C* LastStandRequest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryPerformLastStand");

	Params::BP_jRPG_Character_Battle_Base_C_TryPerformLastStand Parms{};

	Parms.LastStandRequest = LastStandRequest;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.EndLastStandMove
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::EndLastStandMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "EndLastStandMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartLastStandMove
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    DebugName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartLastStandMove(const class FString& DebugName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartLastStandMove");

	Params::BP_jRPG_Character_Battle_Base_C_StartLastStandMove Parms{};

	Parms.DebugName = std::move(DebugName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartGradientAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartGradientAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartGradientAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsInImmunityPhase
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_jRPG_Character_Battle_Base_C::IsInImmunityPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsInImmunityPhase");

	Params::BP_jRPG_Character_Battle_Base_C_IsInImmunityPhase Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ResetMoveToStartLocation
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ResetMoveToStartLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ResetMoveToStartLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryStartJump
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::TryStartJump(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryStartJump");

	Params::BP_jRPG_Character_Battle_Base_C_TryStartJump Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ResetCurrentSkill
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ResetCurrentSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ResetCurrentSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteSkillScriptFromState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SkillState_C*                 SkillState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteSkillScriptFromState(class UBP_SkillState_C* SkillState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteSkillScriptFromState");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteSkillScriptFromState Parms{};

	Parms.SkillState = SkillState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnCharacterReintegratesBattle
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnCharacterReintegratesBattle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnCharacterReintegratesBattle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.KickCharacterFromBattle
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGuid*                           KickedCharacterHandle                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::KickCharacterFromBattle(struct FGuid* KickedCharacterHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "KickCharacterFromBattle");

	Params::BP_jRPG_Character_Battle_Base_C_KickCharacterFromBattle Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (KickedCharacterHandle != nullptr)
		*KickedCharacterHandle = std::move(Parms.KickedCharacterHandle);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.RegisterExternalFreeAimTarget
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::RegisterExternalFreeAimTarget(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "RegisterExternalFreeAimTarget");

	Params::BP_jRPG_Character_Battle_Base_C_RegisterExternalFreeAimTarget Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UpdatePermeateFeedback
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::UpdatePermeateFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UpdatePermeateFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetAllEnemiesExceptSelf
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*EnemiesExceptSelf                                      (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetAllEnemiesExceptSelf(TArray<class ABP_jRPG_Character_Battle_Base_C*>* EnemiesExceptSelf)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetAllEnemiesExceptSelf");

	Params::BP_jRPG_Character_Battle_Base_C_GetAllEnemiesExceptSelf Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EnemiesExceptSelf != nullptr)
		*EnemiesExceptSelf = std::move(Parms.EnemiesExceptSelf);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryStartGradientParry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::TryStartGradientParry(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryStartGradientParry");

	Params::BP_jRPG_Character_Battle_Base_C_TryStartGradientParry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartUnblockableAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartUnblockableAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartUnblockableAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartUndodgeableAttack
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartUndodgeableAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartUndodgeableAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetFreeAimTargetPartsComponents
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<class UBP_FreeAimTargetPart_C*>  ReturnValue                                            (Parm, OutParm, ReturnParm, ContainsInstancedReference)

TArray<class UBP_FreeAimTargetPart_C*> ABP_jRPG_Character_Battle_Base_C::GetFreeAimTargetPartsComponents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetFreeAimTargetPartsComponents");

	Params::BP_jRPG_Character_Battle_Base_C_GetFreeAimTargetPartsComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SpawnWeaponAndSetSkin
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::SpawnWeaponAndSetSkin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SpawnWeaponAndSetSkin");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetDynamicMaterialInstance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Material_Index                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UMeshComponent*                   Mesh_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UMaterialInstanceDynamic**        Dynamic_Material_Instance                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetDynamicMaterialInstance(int32 Material_Index, class UMeshComponent* Mesh_0, class UMaterialInstanceDynamic** Dynamic_Material_Instance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetDynamicMaterialInstance");

	Params::BP_jRPG_Character_Battle_Base_C_GetDynamicMaterialInstance Parms{};

	Parms.Material_Index = Material_Index;
	Parms.Mesh_0 = Mesh_0;

	UObject::ProcessEvent(Func, &Parms);

	if (Dynamic_Material_Instance != nullptr)
		*Dynamic_Material_Instance = Parms.Dynamic_Material_Instance;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartMoveToControlledBySequence
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* TargetCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Distance                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartMoveToControlledBySequence(class ABP_jRPG_Character_Battle_Base_C* TargetCharacter, double Distance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartMoveToControlledBySequence");

	Params::BP_jRPG_Character_Battle_Base_C_StartMoveToControlledBySequence Parms{};

	Parms.TargetCharacter = TargetCharacter;
	Parms.Distance = Distance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetMoveToControlForSequence
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  MoveToControlForSequence_0                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetMoveToControlForSequence(double MoveToControlForSequence_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetMoveToControlForSequence");

	Params::BP_jRPG_Character_Battle_Base_C_SetMoveToControlForSequence Parms{};

	Parms.MoveToControlForSequence_0 = MoveToControlForSequence_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetCurrentIdleState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_EnemyIdleState                        CurrentIdleState_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAnimMontage*                     Idle_Transition_AnimMontage                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float*                                  AnimMontageDuration                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetCurrentIdleState(E_EnemyIdleState CurrentIdleState_0, class UAnimMontage* Idle_Transition_AnimMontage, float* AnimMontageDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetCurrentIdleState");

	Params::BP_jRPG_Character_Battle_Base_C_SetCurrentIdleState Parms{};

	Parms.CurrentIdleState_0 = CurrentIdleState_0;
	Parms.Idle_Transition_AnimMontage = Idle_Transition_AnimMontage;

	UObject::ProcessEvent(Func, &Parms);

	if (AnimMontageDuration != nullptr)
		*AnimMontageDuration = Parms.AnimMontageDuration;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SummonMinions
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FDataTableRowHandle&       EncounterRow                                           (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// bool                                    NotifyBattleStart                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*SpawnedCharacters                                      (Parm, OutParm)
// TArray<struct FVector>*                 SpawnLocations                                         (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::SummonMinions(const struct FDataTableRowHandle& EncounterRow, bool NotifyBattleStart, TArray<class ABP_jRPG_Character_Battle_Base_C*>* SpawnedCharacters, TArray<struct FVector>* SpawnLocations)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SummonMinions");

	Params::BP_jRPG_Character_Battle_Base_C_SummonMinions Parms{};

	Parms.EncounterRow = std::move(EncounterRow);
	Parms.NotifyBattleStart = NotifyBattleStart;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedCharacters != nullptr)
		*SpawnedCharacters = std::move(Parms.SpawnedCharacters);

	if (SpawnLocations != nullptr)
		*SpawnLocations = std::move(Parms.SpawnLocations);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnSkipTurnChosen
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnSkipTurnChosen()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnSkipTurnChosen");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReactToBattleEnd
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ReactToBattleEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReactToBattleEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReactToCharacterThatWasAttacked
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  OtherCharacter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReactToCharacterThatWasAttacked(class UAC_jRPG_CharacterBattleStats_C* OtherCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReactToCharacterThatWasAttacked");

	Params::BP_jRPG_Character_Battle_Base_C_ReactToCharacterThatWasAttacked Parms{};

	Parms.OtherCharacter = OtherCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReactToRevivingOther
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  RevivedCharacterStats                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReactToRevivingOther(class UAC_jRPG_CharacterBattleStats_C* RevivedCharacterStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReactToRevivingOther");

	Params::BP_jRPG_Character_Battle_Base_C_ReactToRevivingOther Parms{};

	Parms.RevivedCharacterStats = RevivedCharacterStats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReactToBeingRevived
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  ReviverCharacterStats                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReactToBeingRevived(class UAC_jRPG_CharacterBattleStats_C* ReviverCharacterStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReactToBeingRevived");

	Params::BP_jRPG_Character_Battle_Base_C_ReactToBeingRevived Parms{};

	Parms.ReviverCharacterStats = ReviverCharacterStats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReactToGivingBuff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  TargetCharacterStats                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleBuffInstance_C*         GivenBuffInstance                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReactToGivingBuff(class UAC_jRPG_CharacterBattleStats_C* TargetCharacterStats, class UBP_BattleBuffInstance_C* GivenBuffInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReactToGivingBuff");

	Params::BP_jRPG_Character_Battle_Base_C_ReactToGivingBuff Parms{};

	Parms.TargetCharacterStats = TargetCharacterStats;
	Parms.GivenBuffInstance = GivenBuffInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReactToBuffReceived
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  SourceCharacterStats                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UBP_BattleBuffInstance_C*         BuffInstance                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReactToBuffReceived(class UAC_jRPG_CharacterBattleStats_C* SourceCharacterStats, class UBP_BattleBuffInstance_C* BuffInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReactToBuffReceived");

	Params::BP_jRPG_Character_Battle_Base_C_ReactToBuffReceived Parms{};

	Parms.SourceCharacterStats = SourceCharacterStats;
	Parms.BuffInstance = BuffInstance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnTriedForbiddenAction
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleForbiddenActionReason            ForbiddenActionReason                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnTriedForbiddenAction(EBattleForbiddenActionReason ForbiddenActionReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnTriedForbiddenAction");

	Params::BP_jRPG_Character_Battle_Base_C_OnTriedForbiddenAction Parms{};

	Parms.ForbiddenActionReason = ForbiddenActionReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UI_AppearOnDamagePosition
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget*                      UIElement                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::UI_AppearOnDamagePosition(class UUserWidget* UIElement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UI_AppearOnDamagePosition");

	Params::BP_jRPG_Character_Battle_Base_C_UI_AppearOnDamagePosition Parms{};

	Parms.UIElement = UIElement;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UpdateDamageSkin
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USkeletalMeshComponent*           FaceMesh                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::UpdateDamageSkin(class USkeletalMeshComponent* FaceMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UpdateDamageSkin");

	Params::BP_jRPG_Character_Battle_Base_C_UpdateDamageSkin Parms{};

	Parms.FaceMesh = FaceMesh;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStartAllowQTE
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStartAllowQTE()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStartAllowQTE");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetBaseElementalAffinities
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<EAttackType, EElementalAffinity>&ElementalAffinities                                    (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_jRPG_Character_Battle_Base_C::SetBaseElementalAffinities(const TMap<EAttackType, EElementalAffinity>& ElementalAffinities)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetBaseElementalAffinities");

	Params::BP_jRPG_Character_Battle_Base_C_SetBaseElementalAffinities Parms{};

	Parms.ElementalAffinities = std::move(ElementalAffinities);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.RemoveElementalAllAffinityOverridesFromSource
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::RemoveElementalAllAffinityOverridesFromSource(class UObject* Source)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "RemoveElementalAllAffinityOverridesFromSource");

	Params::BP_jRPG_Character_Battle_Base_C_RemoveElementalAllAffinityOverridesFromSource Parms{};

	Parms.Source = Source;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AddElementalAffinityOverride
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Source                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EAttackType                             Element                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EElementalAffinity                      Affinity                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::AddElementalAffinityOverride(class UObject* Source, EAttackType Element, EElementalAffinity Affinity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AddElementalAffinityOverride");

	Params::BP_jRPG_Character_Battle_Base_C_AddElementalAffinityOverride Parms{};

	Parms.Source = Source;
	Parms.Element = Element;
	Parms.Affinity = Affinity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetElementalAffinity
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EAttackType                             AttackType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EElementalAffinity*                     Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetElementalAffinity(EAttackType AttackType, EElementalAffinity* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetElementalAffinity");

	Params::BP_jRPG_Character_Battle_Base_C_GetElementalAffinity Parms{};

	Parms.AttackType = AttackType;

	UObject::ProcessEvent(Func, &Parms);

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UpdateElementalAffinities
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::UpdateElementalAffinities()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UpdateElementalAffinities");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Shield_Explosion
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Shield_Explosion()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Shield_Explosion");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.RegisterSkillChecks
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ActionName                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::RegisterSkillChecks(class FName ActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "RegisterSkillChecks");

	Params::BP_jRPG_Character_Battle_Base_C_RegisterSkillChecks Parms{};

	Parms.ActionName = ActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Feedback_APLostUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LostAP                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAPChangeReason                         ChangeReason                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Feedback_APLostUI(int32 LostAP, EAPChangeReason ChangeReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Feedback_APLostUI");

	Params::BP_jRPG_Character_Battle_Base_C_Feedback_APLostUI Parms{};

	Parms.LostAP = LostAP;
	Parms.ChangeReason = ChangeReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetOverheadStateWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UWBP_Battle_CharacterOverheadState_Base_C**WBPOverheadState                                       (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetOverheadStateWidget(class UWBP_Battle_CharacterOverheadState_Base_C** WBPOverheadState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetOverheadStateWidget");

	Params::BP_jRPG_Character_Battle_Base_C_GetOverheadStateWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WBPOverheadState != nullptr)
		*WBPOverheadState = Parms.WBPOverheadState;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartDefenseLock
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartDefenseLock(double Duration, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartDefenseLock");

	Params::BP_jRPG_Character_Battle_Base_C_StartDefenseLock Parms{};

	Parms.Duration = Duration;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UpdateFreeAimOnAPChanged
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewAP                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PreviousAP                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*  CharacterStats                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::UpdateFreeAimOnAPChanged(int32 NewAP, int32 PreviousAP, class UAC_jRPG_CharacterBattleStats_C* CharacterStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UpdateFreeAimOnAPChanged");

	Params::BP_jRPG_Character_Battle_Base_C_UpdateFreeAimOnAPChanged Parms{};

	Parms.NewAP = NewAP;
	Parms.PreviousAP = PreviousAP;
	Parms.CharacterStats = CharacterStats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.MakeBoneMap
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TMap<class USceneComponent*, double>*   Map                                                    (ConstParm, Parm, OutParm, ContainsInstancedReference)

void ABP_jRPG_Character_Battle_Base_C::MakeBoneMap(TMap<class USceneComponent*, double>* Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "MakeBoneMap");

	Params::BP_jRPG_Character_Battle_Base_C_MakeBoneMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Map != nullptr)
		*Map = std::move(Parms.Map);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Feedback_APRecoverUI
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  RecoveredAP                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFromTurnStart                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Feedback_APRecoverUI(double RecoveredAP, bool IsFromTurnStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Feedback_APRecoverUI");

	Params::BP_jRPG_Character_Battle_Base_C_Feedback_APRecoverUI Parms{};

	Parms.RecoveredAP = RecoveredAP;
	Parms.IsFromTurnStart = IsFromTurnStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UseDynamicCameraSystem
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::UseDynamicCameraSystem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UseDynamicCameraSystem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsDataValid
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ValidationErrors                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EDataValidationResult*                  Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::IsDataValid(TArray<class FText>& ValidationErrors, EDataValidationResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsDataValid");

	Params::BP_jRPG_Character_Battle_Base_C_IsDataValid Parms{};

	Parms.ValidationErrors = std::move(ValidationErrors);

	UObject::ProcessEvent(Func, &Parms);

	ValidationErrors = std::move(Parms.ValidationErrors);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartFreeAim_Regular
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartFreeAim_Regular()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartFreeAim_Regular");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattleReset
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnBattleReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattleReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDeathPublic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DeathCounter                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnDeathPublic(bool DeathCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDeathPublic");

	Params::BP_jRPG_Character_Battle_Base_C_OnDeathPublic Parms{};

	Parms.DeathCounter = DeathCounter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnResurrectedPublic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnResurrectedPublic(double HealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnResurrectedPublic");

	Params::BP_jRPG_Character_Battle_Base_C_OnResurrectedPublic Parms{};

	Parms.HealAmount = HealAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnInitiativeReducedPublic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ReductionAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnInitiativeReducedPublic(double ReductionAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnInitiativeReducedPublic");

	Params::BP_jRPG_Character_Battle_Base_C_OnInitiativeReducedPublic Parms{};

	Parms.ReductionAmount = ReductionAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnHealedPublic
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RestoredMP_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnHealedPublic(double HealAmount, bool RestoredMP_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnHealedPublic");

	Params::BP_jRPG_Character_Battle_Base_C_OnHealedPublic Parms{};

	Parms.HealAmount = HealAmount;
	Parms.RestoredMP_ = RestoredMP_;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CheckPublicCall
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::CheckPublicCall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CheckPublicCall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CheckParentCall
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::CheckParentCall()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CheckParentCall");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartPublicCall
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    CallContext                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartPublicCall(const class FString& CallContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartPublicCall");

	Params::BP_jRPG_Character_Battle_Base_C_StartPublicCall Parms{};

	Parms.CallContext = std::move(CallContext);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ActivateCharacterDynamicCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleTurnState                        BattleTurnState                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ActivateCharacterDynamicCamera(EBattleTurnState BattleTurnState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ActivateCharacterDynamicCamera");

	Params::BP_jRPG_Character_Battle_Base_C_ActivateCharacterDynamicCamera Parms{};

	Parms.BattleTurnState = BattleTurnState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnCounterAttackFinished
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnCounterAttackFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnCounterAttackFinished");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetIsCounterAttacking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsGradient                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetIsCounterAttacking(class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter, bool IsGradient)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetIsCounterAttacking");

	Params::BP_jRPG_Character_Battle_Base_C_SetIsCounterAttacking Parms{};

	Parms.CounteredCharacter = CounteredCharacter;
	Parms.IsGradient = IsGradient;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.On Action Finished
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   HasMoreActions                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::On_Action_Finished(bool* HasMoreActions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "On Action Finished");

	Params::BP_jRPG_Character_Battle_Base_C_On_Action_Finished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (HasMoreActions != nullptr)
		*HasMoreActions = Parms.HasMoreActions;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ActivateActionEffect
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ActivateActionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ActivateActionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PrintDebugText
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PrintDebugText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PrintDebugText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleTimelineExpiringSoonest
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UBP_BattleSequenceTimeline_C*>*SortedBattleSequenceTimelines                          (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetBattleTimelineExpiringSoonest(TArray<class UBP_BattleSequenceTimeline_C*>* SortedBattleSequenceTimelines)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleTimelineExpiringSoonest");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleTimelineExpiringSoonest Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SortedBattleSequenceTimelines != nullptr)
		*SortedBattleSequenceTimelines = std::move(Parms.SortedBattleSequenceTimelines);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetCurrentBattleSequenceTime
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 Time                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetCurrentBattleSequenceTime(double* Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetCurrentBattleSequenceTime");

	Params::BP_jRPG_Character_Battle_Base_C_GetCurrentBattleSequenceTime Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Time != nullptr)
		*Time = Parms.Time;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UpdateBattleTurnState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::UpdateBattleTurnState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UpdateBattleTurnState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattleTurnStateChanged
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnBattleTurnStateChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattleTurnStateChanged");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PopAllBattleTurnStates
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PopAllBattleTurnStates()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PopAllBattleTurnStates");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PopBattleTurnStates
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EBattleTurnState>&               CurrentState                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void ABP_jRPG_Character_Battle_Base_C::PopBattleTurnStates(TArray<EBattleTurnState>& CurrentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PopBattleTurnStates");

	Params::BP_jRPG_Character_Battle_Base_C_PopBattleTurnStates Parms{};

	Parms.CurrentState = std::move(CurrentState);

	UObject::ProcessEvent(Func, &Parms);

	CurrentState = std::move(Parms.CurrentState);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PopBattleTurnState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleTurnState                        CurrentState                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PopBattleTurnState(EBattleTurnState CurrentState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PopBattleTurnState");

	Params::BP_jRPG_Character_Battle_Base_C_PopBattleTurnState Parms{};

	Parms.CurrentState = CurrentState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PushBattleTurnState
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleTurnState                        TurnState                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PushBattleTurnState(EBattleTurnState TurnState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PushBattleTurnState");

	Params::BP_jRPG_Character_Battle_Base_C_PushBattleTurnState Parms{};

	Parms.TurnState = TurnState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetDebugText
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FText*                            Result                                                 (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetDebugText(class FText* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetDebugText");

	Params::BP_jRPG_Character_Battle_Base_C_GetDebugText Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = std::move(Parms.Result);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetAnim_DefaultSlotAlpha
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Anim_DefaultSlotAlpha_0                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetAnim_DefaultSlotAlpha(double Anim_DefaultSlotAlpha_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetAnim_DefaultSlotAlpha");

	Params::BP_jRPG_Character_Battle_Base_C_SetAnim_DefaultSlotAlpha Parms{};

	Parms.Anim_DefaultSlotAlpha_0 = Anim_DefaultSlotAlpha_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetActionManager
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UAC_jRPG_ActionsManager_C*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)

class UAC_jRPG_ActionsManager_C* ABP_jRPG_Character_Battle_Base_C::GetActionManager()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetActionManager");

	Params::BP_jRPG_Character_Battle_Base_C_GetActionManager Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryCancelFreeAim
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::TryCancelFreeAim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryCancelFreeAim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.EnableFreeAim
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EFreeAimType                            FreeAimType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   AmmoCount                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TimeLimit                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ProjectileClass                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::EnableFreeAim(EFreeAimType FreeAimType, int32 AmmoCount, double TimeLimit, class UClass* ProjectileClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "EnableFreeAim");

	Params::BP_jRPG_Character_Battle_Base_C_EnableFreeAim Parms{};

	Parms.FreeAimType = FreeAimType;
	Parms.AmmoCount = AmmoCount;
	Parms.TimeLimit = TimeLimit;
	Parms.ProjectileClass = ProjectileClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStopTargeting
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStopTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStopTargeting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStartTargeting
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStartTargeting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStartTargeting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExternalTickCurrentBattleSequenceActionTimeline
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ExternalTickCurrentBattleSequenceActionTimeline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExternalTickCurrentBattleSequenceActionTimeline");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DeclareBattleSequenceTimingsAsList
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EpicBattleSequenceActor_C*    BattleSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<struct FBattleSequenceKeyframe>& BattleSequenceKeyframes                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// const TMap<double, EBattleSequenceCameraType>&CameraKeyframes                                        (BlueprintVisible, BlueprintReadOnly, Parm)
// int32                                   TrackIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DeclareBattleSequenceTimingsAsList(class ABP_EpicBattleSequenceActor_C* BattleSequence, TArray<struct FBattleSequenceKeyframe>& BattleSequenceKeyframes, const TMap<double, EBattleSequenceCameraType>& CameraKeyframes, int32 TrackIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DeclareBattleSequenceTimingsAsList");

	Params::BP_jRPG_Character_Battle_Base_C_DeclareBattleSequenceTimingsAsList Parms{};

	Parms.BattleSequence = BattleSequence;
	Parms.BattleSequenceKeyframes = std::move(BattleSequenceKeyframes);
	Parms.CameraKeyframes = std::move(CameraKeyframes);
	Parms.TrackIndex = TrackIndex;

	UObject::ProcessEvent(Func, &Parms);

	BattleSequenceKeyframes = std::move(Parms.BattleSequenceKeyframes);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnSkillComboFailed
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnSkillComboFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnSkillComboFailed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattleSequenceFinished
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EpicBattleSequenceActor_C*    ComboSequence                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnBattleSequenceFinished(class ABP_EpicBattleSequenceActor_C* ComboSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattleSequenceFinished");

	Params::BP_jRPG_Character_Battle_Base_C_OnBattleSequenceFinished Parms{};

	Parms.ComboSequence = ComboSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattleSequenceStarts
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_EpicBattleSequenceActor_C*    BattleSequence                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnBattleSequenceStarts(class ABP_EpicBattleSequenceActor_C* BattleSequence)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattleSequenceStarts");

	Params::BP_jRPG_Character_Battle_Base_C_OnBattleSequenceStarts Parms{};

	Parms.BattleSequence = BattleSequence;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStopChoosingItem
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStopChoosingItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStopChoosingItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStartChoosingItem
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStartChoosingItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStartChoosingItem");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStopChoosingUltimate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStopChoosingUltimate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStopChoosingUltimate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStartChoosingUltimate
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStartChoosingUltimate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStartChoosingUltimate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStopChoosingMagic
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStopChoosingMagic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStopChoosingMagic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStartChoosingSkill
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStartChoosingSkill()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStartChoosingSkill");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AssertIsCurrentTurn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::AssertIsCurrentTurn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AssertIsCurrentTurn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsCurrentTurn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsCurrentTurn_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::IsCurrentTurn(bool* IsCurrentTurn_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsCurrentTurn");

	Params::BP_jRPG_Character_Battle_Base_C_IsCurrentTurn Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsCurrentTurn_0 != nullptr)
		*IsCurrentTurn_0 = Parms.IsCurrentTurn_0;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Try Activate Skill Combo
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Try_Activate_Skill_Combo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Try Activate Skill Combo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDefendSuccess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* DefendedEnemy                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnDefendSuccess(class ABP_jRPG_Character_Battle_Base_C* DefendedEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDefendSuccess");

	Params::BP_jRPG_Character_Battle_Base_C_OnDefendSuccess Parms{};

	Parms.DefendedEnemy = DefendedEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnParrySuccess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* ParriedEnemy                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnParrySuccess(class ABP_jRPG_Character_Battle_Base_C* ParriedEnemy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnParrySuccess");

	Params::BP_jRPG_Character_Battle_Base_C_OnParrySuccess Parms{};

	Parms.ParriedEnemy = ParriedEnemy;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDodgeSuccess
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* DodgedEnemy                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    IsPerfectDodge                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnDodgeSuccess(class ABP_jRPG_Character_Battle_Base_C* DodgedEnemy, bool IsPerfectDodge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDodgeSuccess");

	Params::BP_jRPG_Character_Battle_Base_C_OnDodgeSuccess Parms{};

	Parms.DodgedEnemy = DodgedEnemy;
	Parms.IsPerfectDodge = IsPerfectDodge;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ClearDefensiveMoveLock
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class FString&                    Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ClearDefensiveMoveLock(const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ClearDefensiveMoveLock");

	Params::BP_jRPG_Character_Battle_Base_C_ClearDefensiveMoveLock Parms{};

	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryStartParry
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::TryStartParry(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryStartParry");

	Params::BP_jRPG_Character_Battle_Base_C_TryStartParry Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryStartDodge
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::TryStartDodge(bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryStartDodge");

	Params::BP_jRPG_Character_Battle_Base_C_TryStartDodge Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.EndDefensiveMove
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::EndDefensiveMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "EndDefensiveMove");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartDefensiveMove
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LockDuration                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ImmuneDuration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  WarmUpDuration                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class FString&                    Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartDefensiveMove(double LockDuration, double ImmuneDuration, double WarmUpDuration, const class FString& Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartDefensiveMove");

	Params::BP_jRPG_Character_Battle_Base_C_StartDefensiveMove Parms{};

	Parms.LockDuration = LockDuration;
	Parms.ImmuneDuration = ImmuneDuration;
	Parms.WarmUpDuration = WarmUpDuration;
	Parms.Reason = std::move(Reason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsImmunityByDefensiveMoveFinished
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsFinished                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::IsImmunityByDefensiveMoveFinished(bool* IsFinished)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsImmunityByDefensiveMoveFinished");

	Params::BP_jRPG_Character_Battle_Base_C_IsImmunityByDefensiveMoveFinished Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsFinished != nullptr)
		*IsFinished = Parms.IsFinished;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsLockedByDefensiveMoveTimer
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   IsLocked                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::IsLockedByDefensiveMoveTimer(bool* IsLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsLockedByDefensiveMoveTimer");

	Params::BP_jRPG_Character_Battle_Base_C_IsLockedByDefensiveMoveTimer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsLocked != nullptr)
		*IsLocked = Parms.IsLocked;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CanDoDefensiveMove
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanDoDefensiveMove_0                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::CanDoDefensiveMove(bool* CanDoDefensiveMove_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CanDoDefensiveMove");

	Params::BP_jRPG_Character_Battle_Base_C_CanDoDefensiveMove Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanDoDefensiveMove_0 != nullptr)
		*CanDoDefensiveMove_0 = Parms.CanDoDefensiveMove_0;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OverrideWithShoulderCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OverrideWithShoulderCamera(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OverrideWithShoulderCamera");

	Params::BP_jRPG_Character_Battle_Base_C_OverrideWithShoulderCamera Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnTurnEnded
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnTurnEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnTurnEnded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnTurnStart
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnTurnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnTurnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.QTEFailFXAndSound
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   FXScale                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase*                       SoundBase                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  ParticleSystem                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   FX_Position_Offset                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::QTEFailFXAndSound(const struct FVector& FXScale, class USoundBase* SoundBase, class UParticleSystem* ParticleSystem, const struct FVector& FX_Position_Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "QTEFailFXAndSound");

	Params::BP_jRPG_Character_Battle_Base_C_QTEFailFXAndSound Parms{};

	Parms.FXScale = std::move(FXScale);
	Parms.SoundBase = SoundBase;
	Parms.ParticleSystem = ParticleSystem;
	Parms.FX_Position_Offset = std::move(FX_Position_Offset);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetSingleTargetLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         TargetLocation                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetSingleTargetLocation(struct FVector* TargetLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetSingleTargetLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetSingleTargetLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetLocation != nullptr)
		*TargetLocation = std::move(Parms.TargetLocation);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetTargetHeadLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>*                 TargetsLocation                                        (Parm, OutParm)
// TArray<struct FVector>*                 TargetScaleList                                        (Parm, OutParm)
// TArray<struct FRotator>*                TargetRotationList                                     (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetTargetHeadLocation(TArray<struct FVector>* TargetsLocation, TArray<struct FVector>* TargetScaleList, TArray<struct FRotator>* TargetRotationList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetTargetHeadLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetTargetHeadLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetsLocation != nullptr)
		*TargetsLocation = std::move(Parms.TargetsLocation);

	if (TargetScaleList != nullptr)
		*TargetScaleList = std::move(Parms.TargetScaleList);

	if (TargetRotationList != nullptr)
		*TargetRotationList = std::move(Parms.TargetRotationList);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetTargetMiddleLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>*                 TargetsLocation                                        (Parm, OutParm)
// TArray<struct FVector>*                 TargetScaleList                                        (Parm, OutParm)
// TArray<struct FRotator>*                TargetRotationList                                     (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetTargetMiddleLocation(TArray<struct FVector>* TargetsLocation, TArray<struct FVector>* TargetScaleList, TArray<struct FRotator>* TargetRotationList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetTargetMiddleLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetTargetMiddleLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetsLocation != nullptr)
		*TargetsLocation = std::move(Parms.TargetsLocation);

	if (TargetScaleList != nullptr)
		*TargetScaleList = std::move(Parms.TargetScaleList);

	if (TargetRotationList != nullptr)
		*TargetRotationList = std::move(Parms.TargetRotationList);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetTargetRootLocation
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FVector>*                 TargetsLocation                                        (Parm, OutParm)
// TArray<struct FVector>*                 TargetScaleList                                        (Parm, OutParm)
// TArray<struct FRotator>*                TargetRotationList                                     (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetTargetRootLocation(TArray<struct FVector>* TargetsLocation, TArray<struct FVector>* TargetScaleList, TArray<struct FRotator>* TargetRotationList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetTargetRootLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetTargetRootLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TargetsLocation != nullptr)
		*TargetsLocation = std::move(Parms.TargetsLocation);

	if (TargetScaleList != nullptr)
		*TargetScaleList = std::move(Parms.TargetScaleList);

	if (TargetRotationList != nullptr)
		*TargetRotationList = std::move(Parms.TargetRotationList);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SpawnFXOnSelectedTargets
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UNiagaraSystem*                   VFXNiagara                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   LocationModif                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  RotationModif                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// const struct FVector&                   ScaleModif                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_JRPG_VFXSpawnSpots                    WhereToSpawn                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundBase*                       VFXSound                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  OLDCASCADE_ParticleSystem                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UParticleSystemComponent*         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TArray<class UParticleSystemComponent*>*SpawnedParticleSystems                                 (Parm, OutParm, ContainsInstancedReference)

class UParticleSystemComponent* ABP_jRPG_Character_Battle_Base_C::SpawnFXOnSelectedTargets(class UNiagaraSystem* VFXNiagara, const struct FVector& LocationModif, const struct FRotator& RotationModif, const struct FVector& ScaleModif, E_JRPG_VFXSpawnSpots WhereToSpawn, class USoundBase* VFXSound, class UParticleSystem* OLDCASCADE_ParticleSystem, TArray<class UParticleSystemComponent*>* SpawnedParticleSystems)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SpawnFXOnSelectedTargets");

	Params::BP_jRPG_Character_Battle_Base_C_SpawnFXOnSelectedTargets Parms{};

	Parms.VFXNiagara = VFXNiagara;
	Parms.LocationModif = std::move(LocationModif);
	Parms.RotationModif = std::move(RotationModif);
	Parms.ScaleModif = std::move(ScaleModif);
	Parms.WhereToSpawn = WhereToSpawn;
	Parms.VFXSound = VFXSound;
	Parms.OLDCASCADE_ParticleSystem = OLDCASCADE_ParticleSystem;

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnedParticleSystems != nullptr)
		*SpawnedParticleSystems = std::move(Parms.SpawnedParticleSystems);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AddCharacterParticleSystem
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_jRPG_CharacterAttachmentSlot          AttachmentSlot                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystem*                  ParticleSystemCascade                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FRotator&                  ParticleSystemRotation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class UNiagaraSystem*                   SystemNiagara                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   PositionOffset                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UParticleSystemComponent**        ParticleSystemComponent_Cascade                        (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class UNiagaraComponent**               NiagaraSystem                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::AddCharacterParticleSystem(E_jRPG_CharacterAttachmentSlot AttachmentSlot, class UParticleSystem* ParticleSystemCascade, const struct FRotator& ParticleSystemRotation, class UNiagaraSystem* SystemNiagara, const struct FVector& PositionOffset, class UParticleSystemComponent** ParticleSystemComponent_Cascade, class UNiagaraComponent** NiagaraSystem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AddCharacterParticleSystem");

	Params::BP_jRPG_Character_Battle_Base_C_AddCharacterParticleSystem Parms{};

	Parms.AttachmentSlot = AttachmentSlot;
	Parms.ParticleSystemCascade = ParticleSystemCascade;
	Parms.ParticleSystemRotation = std::move(ParticleSystemRotation);
	Parms.SystemNiagara = SystemNiagara;
	Parms.PositionOffset = std::move(PositionOffset);

	UObject::ProcessEvent(Func, &Parms);

	if (ParticleSystemComponent_Cascade != nullptr)
		*ParticleSystemComponent_Cascade = Parms.ParticleSystemComponent_Cascade;

	if (NiagaraSystem != nullptr)
		*NiagaraSystem = Parms.NiagaraSystem;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetAllEnemies
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*Output                                                 (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetAllEnemies(TArray<class ABP_jRPG_Character_Battle_Base_C*>* Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetAllEnemies");

	Params::BP_jRPG_Character_Battle_Base_C_GetAllEnemies Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = std::move(Parms.Output);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetMiddleEnemy
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C**Output                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetMiddleEnemy(class ABP_jRPG_Character_Battle_Base_C** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetMiddleEnemy");

	Params::BP_jRPG_Character_Battle_Base_C_GetMiddleEnemy Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CameraShakePlay
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           CameraShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::CameraShakePlay(class UClass* CameraShake, double Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CameraShakePlay");

	Params::BP_jRPG_Character_Battle_Base_C_CameraShakePlay Parms{};

	Parms.CameraShake = CameraShake;
	Parms.Scale = Scale;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ChangeCamera
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             CameraName_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ChangeCamera(class FName CameraName_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ChangeCamera");

	Params::BP_jRPG_Character_Battle_Base_C_ChangeCamera Parms{};

	Parms.CameraName_0 = CameraName_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PerformActionByAI
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PerformActionByAI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PerformActionByAI");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Timeline_Targeting__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Timeline_Targeting__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Timeline_Targeting__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Timeline_Targeting__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Timeline_Targeting__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Timeline_Targeting__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Timeline_FreeaimRecoil__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Timeline_FreeaimRecoil__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Timeline_FreeaimRecoil__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Timeline_FreeaimRecoil__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Timeline_FreeaimRecoil__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Timeline_FreeaimRecoil__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ChangeSizeTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ChangeSizeTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ChangeSizeTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ChangeSizeTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ChangeSizeTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ChangeSizeTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AppearDisappearTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::AppearDisappearTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AppearDisappearTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.AppearDisappearTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::AppearDisappearTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "AppearDisappearTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Timeline_GradientAttackPostProcess__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Timeline_GradientAttackPostProcess__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Timeline_GradientAttackPostProcess__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Timeline_GradientAttackPostProcess__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Timeline_GradientAttackPostProcess__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Timeline_GradientAttackPostProcess__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GradientCounterRadius__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::GradientCounterRadius__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GradientCounterRadius__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GradientCounterRadius__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::GradientCounterRadius__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GradientCounterRadius__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.LateralOffsetUIFX__FinishedFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::LateralOffsetUIFX__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "LateralOffsetUIFX__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.LateralOffsetUIFX__UpdateFunc
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::LateralOffsetUIFX__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "LateralOffsetUIFX__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFinished_282BA5C34080385E2DB4D1849738C470
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnFinished_282BA5C34080385E2DB4D1849738C470()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFinished_282BA5C34080385E2DB4D1849738C470");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFinished_77F23D7F4DB17AAB78B820BB808011AB
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnFinished_77F23D7F4DB17AAB78B820BB808011AB()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFinished_77F23D7F4DB17AAB78B820BB808011AB");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.InpActEvt_IA_Battle_FreeAim_Shoot_K2Node_EnhancedInputActionEvent_1
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::InpActEvt_IA_Battle_FreeAim_Shoot_K2Node_EnhancedInputActionEvent_1(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "InpActEvt_IA_Battle_FreeAim_Shoot_K2Node_EnhancedInputActionEvent_1");

	Params::BP_jRPG_Character_Battle_Base_C_InpActEvt_IA_Battle_FreeAim_Shoot_K2Node_EnhancedInputActionEvent_1 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.InpActEvt_IA_Battle_FreeAim_Cancel_K2Node_EnhancedInputActionEvent_0
// (BlueprintEvent)
// Parameters:
// const struct FInputActionValue&         ActionValue                                            (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)
// float                                   ElapsedTime                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TriggeredTime                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const class UInputAction*               SourceAction                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::InpActEvt_IA_Battle_FreeAim_Cancel_K2Node_EnhancedInputActionEvent_0(const struct FInputActionValue& ActionValue, float ElapsedTime, float TriggeredTime, const class UInputAction* SourceAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "InpActEvt_IA_Battle_FreeAim_Cancel_K2Node_EnhancedInputActionEvent_0");

	Params::BP_jRPG_Character_Battle_Base_C_InpActEvt_IA_Battle_FreeAim_Cancel_K2Node_EnhancedInputActionEvent_0 Parms{};

	Parms.ActionValue = std::move(ActionValue);
	Parms.ElapsedTime = ElapsedTime;
	Parms.TriggeredTime = TriggeredTime;
	Parms.SourceAction = SourceAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnLoaded_F2DB9C784493F242341D828551987DA8
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Loaded                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnLoaded_F2DB9C784493F242341D828551987DA8(class UObject* Loaded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnLoaded_F2DB9C784493F242341D828551987DA8");

	Params::BP_jRPG_Character_Battle_Base_C_OnLoaded_F2DB9C784493F242341D828551987DA8 Parms{};

	Parms.Loaded = Loaded;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFinished_B66BF519426C66C6C8336A86B3DB3006
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnFinished_B66BF519426C66C6C8336A86B3DB3006()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFinished_B66BF519426C66C6C8336A86B3DB3006");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnUIAction
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnUIAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnUIAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnInitiativeReduced
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ReductionAmount                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnInitiativeReduced(double ReductionAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnInitiativeReduced");

	Params::BP_jRPG_Character_Battle_Base_C_OnInitiativeReduced Parms{};

	Parms.ReductionAmount = ReductionAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnPowerDebuff
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Debuff_Power                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnPowerDebuff(double Debuff_Power)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnPowerDebuff");

	Params::BP_jRPG_Character_Battle_Base_C_OnPowerDebuff Parms{};

	Parms.Debuff_Power = Debuff_Power;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartAttackInterceptionAnim
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* CharacterToProtect                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::StartAttackInterceptionAnim(class ABP_jRPG_Character_Battle_Base_C* CharacterToProtect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartAttackInterceptionAnim");

	Params::BP_jRPG_Character_Battle_Base_C_StartAttackInterceptionAnim Parms{};

	Parms.CharacterToProtect = CharacterToProtect;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Internal_StartDashBackForInterception
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Internal_StartDashBackForInterception()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Internal_StartDashBackForInterception");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ResetInterceptionMovement
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USF_BlueprintLatentAction*        LatentAction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ResetInterceptionMovement(class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ResetInterceptionMovement");

	Params::BP_jRPG_Character_Battle_Base_C_ResetInterceptionMovement Parms{};

	Parms.LatentAction = LatentAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReceiveTick");

	Params::BP_jRPG_Character_Battle_Base_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Down_K2Node_InputAxisEvent_0
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Down_K2Node_InputAxisEvent_0(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Down_K2Node_InputAxisEvent_0");

	Params::BP_jRPG_Character_Battle_Base_C_Down_K2Node_InputAxisEvent_0 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Right_K2Node_InputAxisEvent_1
// (BlueprintEvent)
// Parameters:
// float                                   AxisValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Right_K2Node_InputAxisEvent_1(float AxisValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Right_K2Node_InputAxisEvent_1");

	Params::BP_jRPG_Character_Battle_Base_C_Right_K2Node_InputAxisEvent_1 Parms{};

	Parms.AxisValue = AxisValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBeginCursorOver_Trace
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TouchedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnBeginCursorOver_Trace(class AActor* TouchedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBeginCursorOver_Trace");

	Params::BP_jRPG_Character_Battle_Base_C_OnBeginCursorOver_Trace Parms{};

	Parms.TouchedActor = TouchedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnEndCursorOver_Trace
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           TouchedActor                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnEndCursorOver_Trace(class AActor* TouchedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnEndCursorOver_Trace");

	Params::BP_jRPG_Character_Battle_Base_C_OnEndCursorOver_Trace Parms{};

	Parms.TouchedActor = TouchedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnClicked_Trace
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnClicked_Trace()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnClicked_Trace");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnTargetingHoverStart
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnTargetingHoverStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnTargetingHoverStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnTargetingHoverEnd
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnTargetingHoverEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnTargetingHoverEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnUINavigationFocusLost
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnUINavigationFocusLost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnUINavigationFocusLost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnUINavigationFocus
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const class UBP_UINavigationFocusEvent_C*FocusEventBP                                           (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnUINavigationFocus(const class UBP_UINavigationFocusEvent_C* FocusEventBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnUINavigationFocus");

	Params::BP_jRPG_Character_Battle_Base_C_OnUINavigationFocus Parms{};

	Parms.FocusEventBP = FocusEventBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ShootFreeAimProjectile
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ShootFreeAimProjectile()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ShootFreeAimProjectile");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_0_ShootFreeAimProjectile__DelegateSignature
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_0_ShootFreeAimProjectile__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_0_ShootFreeAimProjectile__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBeginFreeAimHover
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnBeginFreeAimHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBeginFreeAimHover");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnEndFreeAimHover
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnEndFreeAimHover()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnEndFreeAimHover");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// E_jRPG_ActionType                       ActionType                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FName                             SecondaryActionName                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteAction(E_jRPG_ActionType ActionType, class FName SecondaryActionName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteAction");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteAction Parms{};

	Parms.ActionType = ActionType;
	Parms.SecondaryActionName = SecondaryActionName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteAttackAction
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ExecuteAttackAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteAttackAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteDefendAction
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ExecuteDefendAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteDefendAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteItemAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteItemAction(class FName ItemName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteItemAction");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteItemAction Parms{};

	Parms.ItemName = ItemName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteFleeAction
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ExecuteFleeAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteFleeAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteMagicAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MagicName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteMagicAction(class FName MagicName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteMagicAction");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteMagicAction Parms{};

	Parms.MagicName = MagicName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteMoveAction
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             MoveName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteMoveAction(class FName MoveName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteMoveAction");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteMoveAction Parms{};

	Parms.MoveName = MoveName;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteSoloCounterAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsGradientCounter                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USF_BlueprintLatentAction*        LatentAction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteSoloCounterAttack(bool IsGradientCounter, class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteSoloCounterAttack");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteSoloCounterAttack Parms{};

	Parms.IsGradientCounter = IsGradientCounter;
	Parms.LatentAction = LatentAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CounterAttackActionEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::CounterAttackActionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CounterAttackActionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDeathDamagePrevented
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnDeathDamagePrevented()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDeathDamagePrevented");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteGradientCounterAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteGradientCounterAttack(class ABP_jRPG_Character_Battle_Base_C* CounteredCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteGradientCounterAttack");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteGradientCounterAttack Parms{};

	Parms.CounteredCharacter = CounteredCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GradientCounterAttackActionEffect
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::GradientCounterAttackActionEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GradientCounterAttackActionEffect");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DisableGradientPPFromCounterAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   GradientCenterLocation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DisableGradientPPFromCounterAttack(const struct FVector& GradientCenterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DisableGradientPPFromCounterAttack");

	Params::BP_jRPG_Character_Battle_Base_C_DisableGradientPPFromCounterAttack Parms{};

	Parms.GradientCenterLocation = std::move(GradientCenterLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PlayFreezeFrameInternal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USF_BlueprintLatentAction*        LatentAction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PlayFreezeFrameInternal(class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PlayFreezeFrameInternal");

	Params::BP_jRPG_Character_Battle_Base_C_PlayFreezeFrameInternal Parms{};

	Parms.LatentAction = LatentAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ChangeSize
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  ScaleMultiplier                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      CurveOverride                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ChangeSize(double ScaleMultiplier, double Duration, class UCurveFloat* CurveOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ChangeSize");

	Params::BP_jRPG_Character_Battle_Base_C_ChangeSize Parms{};

	Parms.ScaleMultiplier = ScaleMultiplier;
	Parms.Duration = Duration;
	Parms.CurveOverride = CurveOverride;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Feedback_OnAccuracyDodge
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Feedback_OnAccuracyDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Feedback_OnAccuracyDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.LeadGroupCounter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USF_BlueprintLatentAction*        LatentAction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::LeadGroupCounter(class USF_BlueprintLatentAction* LatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "LeadGroupCounter");

	Params::BP_jRPG_Character_Battle_Base_C_LeadGroupCounter Parms{};

	Parms.LatentAction = LatentAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.CleanPost
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::CleanPost()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "CleanPost");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Feedback_OnUniqueMechanicOverpowerEnable
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Feedback_OnUniqueMechanicOverpowerEnable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Feedback_OnUniqueMechanicOverpowerEnable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Feedback_OnUniqueMechanicOverpowerDisable
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::Feedback_OnUniqueMechanicOverpowerDisable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Feedback_OnUniqueMechanicOverpowerDisable");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDeath
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DeathByCounter                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnDeath(bool DeathByCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDeath");

	Params::BP_jRPG_Character_Battle_Base_C_OnDeath Parms{};

	Parms.DeathByCounter = DeathByCounter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnHealed
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    RestoredMP_                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UAC_jRPG_CharacterBattleStats_C*  SourceCharacter                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// EHealReason                             Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnHealed(double HealAmount, bool RestoredMP_, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, EHealReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnHealed");

	Params::BP_jRPG_Character_Battle_Base_C_OnHealed Parms{};

	Parms.HealAmount = HealAmount;
	Parms.RestoredMP_ = RestoredMP_;
	Parms.SourceCharacter = SourceCharacter;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnResurrected
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  HealAmount                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnResurrected(double HealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnResurrected");

	Params::BP_jRPG_Character_Battle_Base_C_OnResurrected Parms{};

	Parms.HealAmount = HealAmount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDamageReceivedPublic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_BattleDamages_C*              BattleDamages                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// TScriptInterface<class IIBattleDamageSource_C>DamageSourceCharacter                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnDamageReceivedPublic(class UBP_BattleDamages_C* BattleDamages, TScriptInterface<class IIBattleDamageSource_C> DamageSourceCharacter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDamageReceivedPublic");

	Params::BP_jRPG_Character_Battle_Base_C_OnDamageReceivedPublic Parms{};

	Parms.BattleDamages = BattleDamages;
	Parms.DamageSourceCharacter = DamageSourceCharacter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnAPRecovered
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Amount                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsFromTurnStart                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnAPRecovered(int32 Amount, bool IsFromTurnStart)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnAPRecovered");

	Params::BP_jRPG_Character_Battle_Base_C_OnAPRecovered Parms{};

	Parms.Amount = Amount;
	Parms.IsFromTurnStart = IsFromTurnStart;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ShieldAdded
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ShieldAdded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ShieldAdded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnStanceBroken
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnStanceBroken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnStanceBroken");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.MakeDead_Internal
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::MakeDead_Internal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "MakeDead_Internal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattleStart
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnBattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartDodgeFeedback
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartDodgeFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartDodgeFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartParry
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartParry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartParry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartDefend
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartDefend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartDefend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StopDefend
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StopDefend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StopDefend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FeedbackSuccessfulDodge
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::FeedbackSuccessfulDodge()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FeedbackSuccessfulDodge");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FeedbackSuccessfulParry
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::FeedbackSuccessfulParry()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FeedbackSuccessfulParry");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FeedbackSuccessfulDefend
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::FeedbackSuccessfulDefend()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FeedbackSuccessfulDefend");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnDamageReceived
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Critical_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Weakness_                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Resistant_                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EAttackType                             Element                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EDamageReason                           Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_jRPG_Character_Battle_Base_C* DamageCharacterSource                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnDamageReceived(double Damage, bool Critical_, bool Weakness_, bool Resistant_, EAttackType Element, EDamageReason Reason, class ABP_jRPG_Character_Battle_Base_C* DamageCharacterSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnDamageReceived");

	Params::BP_jRPG_Character_Battle_Base_C_OnDamageReceived Parms{};

	Parms.Damage = Damage;
	Parms.Critical_ = Critical_;
	Parms.Weakness_ = Weakness_;
	Parms.Resistant_ = Resistant_;
	Parms.Element = Element;
	Parms.Reason = Reason;
	Parms.DamageCharacterSource = DamageCharacterSource;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BeginRotationOverride
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::BeginRotationOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BeginRotationOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ClearRotationOverride
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ClearRotationOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ClearRotationOverride");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFreeAimHit
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFreeAimBodyPartType                    BodyPart                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class ABP_FreeAimProjectile_Base_C*     Projectile                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnFreeAimHit(EFreeAimBodyPartType BodyPart, class ABP_FreeAimProjectile_Base_C* Projectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFreeAimHit");

	Params::BP_jRPG_Character_Battle_Base_C_OnFreeAimHit Parms{};

	Parms.BodyPart = BodyPart;
	Parms.Projectile = Projectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_2_OnFreeAimHit_Character_Regular__DelegateSignature
// (BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EFreeAimBodyPartType                    BodyPart                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FHitResult&                HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// class UBP_FreeAimTargetPart_C*          TargetBodyPartBP                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_2_OnFreeAimHit_Character_Regular__DelegateSignature(class ABP_jRPG_Character_Battle_Base_C* Character, EFreeAimBodyPartType BodyPart, const struct FHitResult& HitResult, class UBP_FreeAimTargetPart_C* TargetBodyPartBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_2_OnFreeAimHit_Character_Regular__DelegateSignature");

	Params::BP_jRPG_Character_Battle_Base_C_BndEvt__BP_jRPG_Character_Battle_Base_BP_FreeAimShooterBattleComponent_K2Node_ComponentBoundEvent_2_OnFreeAimHit_Character_Regular__DelegateSignature Parms{};

	Parms.Character = Character;
	Parms.BodyPart = BodyPart;
	Parms.HitResult = std::move(HitResult);
	Parms.TargetBodyPartBP = TargetBodyPartBP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HitFeedback
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* OverrideTarget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HasHit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CameraShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX1                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX2                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class USoundBase*                 Sound                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          SoundWwise                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  VolumeMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_FreezeFrame                           FreezeFrame                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnIfCharacterIsDead                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::HitFeedback(class ABP_jRPG_Character_Battle_Base_C* OverrideTarget, bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HitFeedback");

	Params::BP_jRPG_Character_Battle_Base_C_HitFeedback Parms{};

	Parms.OverrideTarget = OverrideTarget;
	Parms.HasHit = HasHit;
	Parms.CameraShake = CameraShake;
	Parms.ShakeScale = ShakeScale;
	Parms.VFX1 = VFX1;
	Parms.VFX2 = VFX2;
	Parms.Sound = Sound;
	Parms.SoundWwise = SoundWwise;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.FreezeFrame = FreezeFrame;
	Parms.SpawnIfCharacterIsDead = SpawnIfCharacterIsDead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DEBUG_CVarChange_ShowBattleDebug
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DEBUG_CVarChange_ShowBattleDebug(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DEBUG_CVarChange_ShowBattleDebug");

	Params::BP_jRPG_Character_Battle_Base_C_DEBUG_CVarChange_ShowBattleDebug Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DEBUG_CVarChange_ShowFreeAimBodyParts
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DEBUG_CVarChange_ShowFreeAimBodyParts(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DEBUG_CVarChange_ShowFreeAimBodyParts");

	Params::BP_jRPG_Character_Battle_Base_C_DEBUG_CVarChange_ShowFreeAimBodyParts Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ResetDefensiveLockAfterTime
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Duration                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ResetDefensiveLockAfterTime(double Duration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ResetDefensiveLockAfterTime");

	Params::BP_jRPG_Character_Battle_Base_C_ResetDefensiveLockAfterTime Parms{};

	Parms.Duration = Duration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TriggerABPHitAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::TriggerABPHitAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TriggerABPHitAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BndEvt__BP_jRPG_Character_Battle_Base_AC_jRPG_CharacterStats_K2Node_ComponentBoundEvent_0_OnCharacterInitialized__DelegateSignature
// (BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::BndEvt__BP_jRPG_Character_Battle_Base_AC_jRPG_CharacterStats_K2Node_ComponentBoundEvent_0_OnCharacterInitialized__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BndEvt__BP_jRPG_Character_Battle_Base_AC_jRPG_CharacterStats_K2Node_ComponentBoundEvent_0_OnCharacterInitialized__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DEBUG_SpawnWeapon
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::DEBUG_SpawnWeapon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DEBUG_SpawnWeapon");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ReceiveEndPlay");

	Params::BP_jRPG_Character_Battle_Base_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartGradientParryFeedback
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartGradientParryFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartGradientParryFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.MoveToInitialLocation2
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USF_BlueprintLatentAction*        CompletedLatentAction                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class FString&                    DebugReason                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::MoveToInitialLocation2(class USF_BlueprintLatentAction* CompletedLatentAction, const class FString& DebugReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "MoveToInitialLocation2");

	Params::BP_jRPG_Character_Battle_Base_C_MoveToInitialLocation2 Parms{};

	Parms.CompletedLatentAction = CompletedLatentAction;
	Parms.DebugReason = std::move(DebugReason);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TEMP_TriggerCounterAttack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAC_jRPG_CharacterBattleStats_C*  TargetCharacterStats                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::TEMP_TriggerCounterAttack(class UAC_jRPG_CharacterBattleStats_C* TargetCharacterStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TEMP_TriggerCounterAttack");

	Params::BP_jRPG_Character_Battle_Base_C_TEMP_TriggerCounterAttack Parms{};

	Parms.TargetCharacterStats = TargetCharacterStats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FeedbackPermeateChange
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EAttackType                             NewPermeateElement                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPermeateIntensity                      NewPermeateIntensity                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::FeedbackPermeateChange(EAttackType NewPermeateElement, EPermeateIntensity NewPermeateIntensity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FeedbackPermeateChange");

	Params::BP_jRPG_Character_Battle_Base_C_FeedbackPermeateChange Parms{};

	Parms.NewPermeateElement = NewPermeateElement;
	Parms.NewPermeateIntensity = NewPermeateIntensity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DashBack
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UAnimMontage*                     DashBackAnimMontage                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class USF_BlueprintLatentAction*        CompletedLatentAction                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DashBack(class UAnimMontage* DashBackAnimMontage, class USF_BlueprintLatentAction* CompletedLatentAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DashBack");

	Params::BP_jRPG_Character_Battle_Base_C_DashBack Parms{};

	Parms.DashBackAnimMontage = DashBackAnimMontage;
	Parms.CompletedLatentAction = CompletedLatentAction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.MakeCharacterDisappear
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::MakeCharacterDisappear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "MakeCharacterDisappear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.MakeCharacterAppear
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::MakeCharacterAppear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "MakeCharacterAppear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartPPGradientAttack
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartPPGradientAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartPPGradientAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.EndPPGradientAttack
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::EndPPGradientAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "EndPPGradientAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.StartJumpFeedback
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::StartJumpFeedback()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "StartJumpFeedback");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BeginJumpCounterAttackWindow
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* Attacker                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::BeginJumpCounterAttackWindow(class ABP_jRPG_Character_Battle_Base_C* Attacker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BeginJumpCounterAttackWindow");

	Params::BP_jRPG_Character_Battle_Base_C_BeginJumpCounterAttackWindow Parms{};

	Parms.Attacker = Attacker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.TryTriggerJumpCounterAttack
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::TryTriggerJumpCounterAttack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "TryTriggerJumpCounterAttack");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PerformBattleStartEvent
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DependencyRefCounter_C*       RefCounter                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PerformBattleStartEvent(class UBP_DependencyRefCounter_C* RefCounter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PerformBattleStartEvent");

	Params::BP_jRPG_Character_Battle_Base_C_PerformBattleStartEvent Parms{};

	Parms.RefCounter = RefCounter;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.EndPPGradientAttackCounter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   GradientCenterLocation                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::EndPPGradientAttackCounter(const struct FVector& GradientCenterLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "EndPPGradientAttackCounter");

	Params::BP_jRPG_Character_Battle_Base_C_EndPPGradientAttackCounter Parms{};

	Parms.GradientCenterLocation = std::move(GradientCenterLocation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PrepareForBattleInternal
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PrepareForBattleInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PrepareForBattleInternal");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Init
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_CharacterCustomization& CharacterCustomization                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Init(const struct FS_CharacterCustomization& CharacterCustomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Init");

	Params::BP_jRPG_Character_Battle_Base_C_Init Parms{};

	Parms.CharacterCustomization = std::move(CharacterCustomization);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PerformDelayedBattleStart
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PerformDelayedBattleStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PerformDelayedBattleStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DTrailsBasedOnVelocity
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::DTrailsBasedOnVelocity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DTrailsBasedOnVelocity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HitFeedbackOnSelf
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasHit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CameraShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX1                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX2                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class USoundBase*                 Sound                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          SoundWwise                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  VolumeMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_FreezeFrame                           FreezeFrame                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnIfCharacterIsDead                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::HitFeedbackOnSelf(bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HitFeedbackOnSelf");

	Params::BP_jRPG_Character_Battle_Base_C_HitFeedbackOnSelf Parms{};

	Parms.HasHit = HasHit;
	Parms.CameraShake = CameraShake;
	Parms.ShakeScale = ShakeScale;
	Parms.VFX1 = VFX1;
	Parms.VFX2 = VFX2;
	Parms.Sound = Sound;
	Parms.SoundWwise = SoundWwise;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.FreezeFrame = FreezeFrame;
	Parms.SpawnIfCharacterIsDead = SpawnIfCharacterIsDead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HitFeedbackOnCurrentTarget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* OverrideTarget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HasHit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CameraShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX1                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX2                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class USoundBase*                 Sound                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          SoundWwise                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  VolumeMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_FreezeFrame                           FreezeFrame                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnIfCharacterIsDead                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::HitFeedbackOnCurrentTarget(class ABP_jRPG_Character_Battle_Base_C* OverrideTarget, bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HitFeedbackOnCurrentTarget");

	Params::BP_jRPG_Character_Battle_Base_C_HitFeedbackOnCurrentTarget Parms{};

	Parms.OverrideTarget = OverrideTarget;
	Parms.HasHit = HasHit;
	Parms.CameraShake = CameraShake;
	Parms.ShakeScale = ShakeScale;
	Parms.VFX1 = VFX1;
	Parms.VFX2 = VFX2;
	Parms.Sound = Sound;
	Parms.SoundWwise = SoundWwise;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.FreezeFrame = FreezeFrame;
	Parms.SpawnIfCharacterIsDead = SpawnIfCharacterIsDead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.HitFeedbackInternal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* OverrideTarget                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    HasHit                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           CameraShake                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  ShakeScale                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX1                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UNiagaraSystem*                   VFX2                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const class USoundBase*                 Sound                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          SoundWwise                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  VolumeMultiplier                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_FreezeFrame                           FreezeFrame                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    SpawnIfCharacterIsDead                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::HitFeedbackInternal(class ABP_jRPG_Character_Battle_Base_C* OverrideTarget, bool HasHit, class UClass* CameraShake, double ShakeScale, class UNiagaraSystem* VFX1, class UNiagaraSystem* VFX2, const class USoundBase* Sound, class UObject* SoundWwise, double VolumeMultiplier, E_FreezeFrame FreezeFrame, bool SpawnIfCharacterIsDead)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "HitFeedbackInternal");

	Params::BP_jRPG_Character_Battle_Base_C_HitFeedbackInternal Parms{};

	Parms.OverrideTarget = OverrideTarget;
	Parms.HasHit = HasHit;
	Parms.CameraShake = CameraShake;
	Parms.ShakeScale = ShakeScale;
	Parms.VFX1 = VFX1;
	Parms.VFX2 = VFX2;
	Parms.Sound = Sound;
	Parms.SoundWwise = SoundWwise;
	Parms.VolumeMultiplier = VolumeMultiplier;
	Parms.FreezeFrame = FreezeFrame;
	Parms.SpawnIfCharacterIsDead = SpawnIfCharacterIsDead;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.SetNiagaraUIEnabled
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::SetNiagaraUIEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "SetNiagaraUIEnabled");

	Params::BP_jRPG_Character_Battle_Base_C_SetNiagaraUIEnabled Parms{};

	Parms.Enabled = Enabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OrientNiagaraUIFromCamera
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OrientNiagaraUIFromCamera()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OrientNiagaraUIFromCamera");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.DEBUG_OnCvarChanged_HideUI
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::DEBUG_OnCvarChanged_HideUI(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "DEBUG_OnCvarChanged_HideUI");

	Params::BP_jRPG_Character_Battle_Base_C_DEBUG_OnCvarChanged_HideUI Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnCharacterTurnEnd
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnCharacterTurnEnd(class ABP_jRPG_Character_Battle_Base_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnCharacterTurnEnd");

	Params::BP_jRPG_Character_Battle_Base_C_OnCharacterTurnEnd Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OffsetFX_UISkillPanel
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OffsetFX_UISkillPanel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OffsetFX_UISkillPanel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PlayFinisherAtTurnEnd
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          CharacterStats                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::PlayFinisherAtTurnEnd(class UObject* CharacterStats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PlayFinisherAtTurnEnd");

	Params::BP_jRPG_Character_Battle_Base_C_PlayFinisherAtTurnEnd Parms{};

	Parms.CharacterStats = CharacterStats;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.PlayFinisherSequence
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::PlayFinisherSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "PlayFinisherSequence");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.Action Effect_Finisher
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActionEffectIndex                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::Action_Effect_Finisher(int32 ActionEffectIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "Action Effect_Finisher");

	Params::BP_jRPG_Character_Battle_Base_C_Action_Effect_Finisher Parms{};

	Parms.ActionEffectIndex = ActionEffectIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ActivateFinisherPossible
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::ActivateFinisherPossible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ActivateFinisherPossible");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.BeginStaggerOnCountered
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::BeginStaggerOnCountered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "BeginStaggerOnCountered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.EndStaggerOnCountered
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::EndStaggerOnCountered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "EndStaggerOnCountered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnBattlePreIntro
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnBattlePreIntro()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnBattlePreIntro");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FreeAimEndTurnInternal
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFreeAimType                            FreeAimType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::FreeAimEndTurnInternal(EFreeAimType FreeAimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FreeAimEndTurnInternal");

	Params::BP_jRPG_Character_Battle_Base_C_FreeAimEndTurnInternal Parms{};

	Parms.FreeAimType = FreeAimType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFreeAimCancelled
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnFreeAimCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFreeAimCancelled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFreeAimEnded
// (HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>&AllHitCharacters                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// EFreeAimType                            FreeAimType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::OnFreeAimEnded(TArray<class ABP_jRPG_Character_Battle_Base_C*>& AllHitCharacters, EFreeAimType FreeAimType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFreeAimEnded");

	Params::BP_jRPG_Character_Battle_Base_C_OnFreeAimEnded Parms{};

	Parms.AllHitCharacters = std::move(AllHitCharacters);
	Parms.FreeAimType = FreeAimType;

	UObject::ProcessEvent(Func, &Parms);

	AllHitCharacters = std::move(Parms.AllHitCharacters);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.OnFreeAimEnabled
// (BlueprintCallable, BlueprintEvent)

void ABP_jRPG_Character_Battle_Base_C::OnFreeAimEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "OnFreeAimEnabled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.ExecuteUbergraph_BP_jRPG_Character_Battle_Base
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::ExecuteUbergraph_BP_jRPG_Character_Battle_Base(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "ExecuteUbergraph_BP_jRPG_Character_Battle_Base");

	Params::BP_jRPG_Character_Battle_Base_C_ExecuteUbergraph_BP_jRPG_Character_Battle_Base Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetCurrentBattlePosture
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// EBattleTurnState*                       CurrentBattlePosture                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetCurrentBattlePosture(EBattleTurnState* CurrentBattlePosture) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetCurrentBattlePosture");

	Params::BP_jRPG_Character_Battle_Base_C_GetCurrentBattlePosture Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CurrentBattlePosture != nullptr)
		*CurrentBattlePosture = Parms.CurrentBattlePosture;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattlePostureAnimations
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// TMap<EBattleTurnState, class UAnimSequenceBase*>*BattlePostureAnimations                                (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::GetBattlePostureAnimations(TMap<EBattleTurnState, class UAnimSequenceBase*>* BattlePostureAnimations) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattlePostureAnimations");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattlePostureAnimations Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (BattlePostureAnimations != nullptr)
		*BattlePostureAnimations = std::move(Parms.BattlePostureAnimations);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetOwnerCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C**Character                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetOwnerCharacter(class ABP_jRPG_Character_Battle_Base_C** Character) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetOwnerCharacter");

	Params::BP_jRPG_Character_Battle_Base_C_GetOwnerCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Character != nullptr)
		*Character = Parms.Character;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetBattleSpotIndexLeftToRight_(WhenFacingCharacters)
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

int32 ABP_jRPG_Character_Battle_Base_C::GetBattleSpotIndexLeftToRight__WhenFacingCharacters_() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetBattleSpotIndexLeftToRight_(WhenFacingCharacters)");

	Params::BP_jRPG_Character_Battle_Base_C_GetBattleSpotIndexLeftToRight__WhenFacingCharacters_ Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetCurrentBattleTurnState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EBattleTurnState                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

EBattleTurnState ABP_jRPG_Character_Battle_Base_C::GetCurrentBattleTurnState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetCurrentBattleTurnState");

	Params::BP_jRPG_Character_Battle_Base_C_GetCurrentBattleTurnState Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.IsPlayerTeamCharacter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   IsPlayerTeam                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::IsPlayerTeamCharacter(bool* IsPlayerTeam) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "IsPlayerTeamCharacter");

	Params::BP_jRPG_Character_Battle_Base_C_IsPlayerTeamCharacter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsPlayerTeam != nullptr)
		*IsPlayerTeam = Parms.IsPlayerTeam;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetLastSkillComboInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool*                                   OnlySuccess                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OnlyFail                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool*                                   OnlyPerfect                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  SuccessCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  FailCount                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32*                                  PerfectCount                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_jRPG_Character_Battle_Base_C::GetLastSkillComboInfo(bool* OnlySuccess, bool* OnlyFail, bool* OnlyPerfect, int32* SuccessCount, int32* FailCount, int32* PerfectCount) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetLastSkillComboInfo");

	Params::BP_jRPG_Character_Battle_Base_C_GetLastSkillComboInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (OnlySuccess != nullptr)
		*OnlySuccess = Parms.OnlySuccess;

	if (OnlyFail != nullptr)
		*OnlyFail = Parms.OnlyFail;

	if (OnlyPerfect != nullptr)
		*OnlyPerfect = Parms.OnlyPerfect;

	if (SuccessCount != nullptr)
		*SuccessCount = Parms.SuccessCount;

	if (FailCount != nullptr)
		*FailCount = Parms.FailCount;

	if (PerfectCount != nullptr)
		*PerfectCount = Parms.PerfectCount;
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.GetRootLocation
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Scale                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_jRPG_Character_Battle_Base_C::GetRootLocation(struct FVector* Location, struct FVector* Scale, struct FRotator* Rotation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "GetRootLocation");

	Params::BP_jRPG_Character_Battle_Base_C_GetRootLocation Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Scale != nullptr)
		*Scale = std::move(Parms.Scale);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_jRPG_Character_Battle_Base.BP_jRPG_Character_Battle_Base_C.FillTargetsWithOtherHeroes
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TArray<class ABP_jRPG_Character_Battle_Base_C*>&OriginalTargets                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ABP_jRPG_Character_Battle_Base_C*>*TargetList                                             (Parm, OutParm)

void ABP_jRPG_Character_Battle_Base_C::FillTargetsWithOtherHeroes(TArray<class ABP_jRPG_Character_Battle_Base_C*>& OriginalTargets, TArray<class ABP_jRPG_Character_Battle_Base_C*>* TargetList) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_jRPG_Character_Battle_Base_C", "FillTargetsWithOtherHeroes");

	Params::BP_jRPG_Character_Battle_Base_C_FillTargetsWithOtherHeroes Parms{};

	Parms.OriginalTargets = std::move(OriginalTargets);

	UObject::ProcessEvent(Func, &Parms);

	OriginalTargets = std::move(Parms.OriginalTargets);

	if (TargetList != nullptr)
		*TargetList = std::move(Parms.TargetList);
}

}

