#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameDirectorComponent

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EGameDirectorTargetType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameDirectorComponent.BP_GameDirectorComponent_C
// 0x0098 (0x0138 - 0x00A0)
class UBP_GameDirectorComponent_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ALevelSequenceActor*                    CurrentBattleTurnSequence;                         // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class ULevelSequence*, class ALevelSequenceActor*> PreloadedLevelSequenceActors;            // 0x00B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class ALevelSequenceActor*                    PreviousBattleTurnSequenceActor;                   // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EGameDirectorTargetType                       CurrentTarget;                                     // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDynamicCamDirty;                                 // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ALevelSequenceActor*                    NextBattleTurnSequenceActor;                       // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 NextBattleTurnSequenceCharacter;                   // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 DEBUG_LogIndent;                                   // 0x0120(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         DEBUG_LogIndentCount;                              // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_VerboseIndent;                               // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBeInterrupted;                                  // 0x0135(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void PrintText(const class FText& InText);
	void OnWorldSkillEnd();
	void OnFreeAimCancelled();
	void OnWorldSkillStart();
	void Unload_Sequence(class ALevelSequenceActor* LevelSequenceActor);
	void PreloadLevelSequence(class ULevelSequence* LevelSequence, class ALevelSequenceActor** OutActor);
	void PlayBattleTurnSequence(class ALevelSequenceActor* BattleTurnSequence, class AActor* Character);
	void OnBattleTurnSequenceStop();
	void OnBattleTurnSequencePaused();
	void StartPreloadingLevelSequence();
	void StopAnyBattleTurnSequence();
	void OnEpicBattleSequencePlay();
	void ReceiveTick(float DeltaSeconds);
	void OnDynamicCameraActivatedInternal();
	void OnDynamicCameraActivated(const class FString& DEBUG_CameraType);
	void ActivateTargetingCamera(class UCameraComponent* TargetingCamera, class AActor* ViewTarget);
	void InterruptDynamicCameraChange();
	void OnBattleEnd();
	void OnEpicBattleSequenceEnds();
	void DisableTargetingCamera(class UActorComponent* TargetingCamera);
	void ExecuteUbergraph_BP_GameDirectorComponent(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameDirectorComponent_C">();
	}
	static class UBP_GameDirectorComponent_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameDirectorComponent_C>();
	}
};
static_assert(alignof(UBP_GameDirectorComponent_C) == 0x000008, "Wrong alignment on UBP_GameDirectorComponent_C");
static_assert(sizeof(UBP_GameDirectorComponent_C) == 0x000138, "Wrong size on UBP_GameDirectorComponent_C");
static_assert(offsetof(UBP_GameDirectorComponent_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_GameDirectorComponent_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, CurrentBattleTurnSequence) == 0x0000A8, "Member 'UBP_GameDirectorComponent_C::CurrentBattleTurnSequence' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, PreloadedLevelSequenceActors) == 0x0000B0, "Member 'UBP_GameDirectorComponent_C::PreloadedLevelSequenceActors' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, PreviousBattleTurnSequenceActor) == 0x000100, "Member 'UBP_GameDirectorComponent_C::PreviousBattleTurnSequenceActor' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, CurrentTarget) == 0x000108, "Member 'UBP_GameDirectorComponent_C::CurrentTarget' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, IsDynamicCamDirty) == 0x000109, "Member 'UBP_GameDirectorComponent_C::IsDynamicCamDirty' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, NextBattleTurnSequenceActor) == 0x000110, "Member 'UBP_GameDirectorComponent_C::NextBattleTurnSequenceActor' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, NextBattleTurnSequenceCharacter) == 0x000118, "Member 'UBP_GameDirectorComponent_C::NextBattleTurnSequenceCharacter' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, DEBUG_LogIndent) == 0x000120, "Member 'UBP_GameDirectorComponent_C::DEBUG_LogIndent' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, DEBUG_LogIndentCount) == 0x000130, "Member 'UBP_GameDirectorComponent_C::DEBUG_LogIndentCount' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, DEBUG_VerboseIndent) == 0x000134, "Member 'UBP_GameDirectorComponent_C::DEBUG_VerboseIndent' has a wrong offset!");
static_assert(offsetof(UBP_GameDirectorComponent_C, CanBeInterrupted) == 0x000135, "Member 'UBP_GameDirectorComponent_C::CanBeInterrupted' has a wrong offset!");

}

