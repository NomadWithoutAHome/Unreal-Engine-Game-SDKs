#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameFlowTransitionSystem

#include "Basic.hpp"

#include "E_GameFlowTransitionPhase_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_GameFlowTransitionState_structs.hpp"
#include "S_GameFlowTransitionType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameFlowTransitionSystem.BP_GameFlowTransitionSystem_C
// 0x00E8 (0x0188 - 0x00A0)
class UBP_GameFlowTransitionSystem_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FS_GameFlowTransitionState             TransitionState;                                   // 0x00A8(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultWaitTime;                                   // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DefaultFadeOutTime;                                // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnWaitCompleted;                                   // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UWBP_BattleTransition_C*                TransitionWidget;                                  // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void()>              OnFadeInCompleted;                                 // 0x0100(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnFadeOutCompleted;                                // 0x0110(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          IsGameplayPaused;                                  // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSF_ReferenceCounterHandle             PauseBlocker;                                      // 0x0128(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             InteractionBlocker;                                // 0x0148(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSF_ReferenceCounterHandle             TransitionInputLockBlockerReference;               // 0x0168(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_BP_GameFlowTransitionSystem(int32 EntryPoint);
	double GetFadeAmountDuringFadeOut();
	void GetTransitionPhase(E_GameFlowTransitionPhase* Phase);
	void HoldTransition();
	bool IsTransitionStateValid();
	void OnTransitionPhaseChange();
	void ReceiveTick(float DeltaSeconds);
	void ReleaseTransition(double OverrideFadeOutTransition);
	void RequestTransition(const struct FS_GameFlowTransitionRequest& TransitionRequest);
	void SetGameplayPaused(bool Paused);
	void SetIsTransitionInHold(bool Hold);
	void SetTransitionPhase(E_GameFlowTransitionPhase Phase);
	void StartNewTransition(const struct FS_GameFlowTransitionRequest& TransitionRequest);
	void StopBlackScreenTransition();
	void StopTransitionOfType(ES_GameFlowTransitionType TransitionType);
	void UpdateBlackScreenFadeIn();
	void UpdateBlackScreenFadeOut();
	void UpdateCurrentTransition(double ElapsedSeconds);
	void UpdateElapsedTime(double ElapsedSeconds);
	void UpdateFadeInOfType(ES_GameFlowTransitionType TransitionType);
	void UpdateFadeOutOfType(ES_GameFlowTransitionType TransitionType);
	void UpdateFadeOutTransitionOfType(ES_GameFlowTransitionType TransitionType);
	void UpdateTransitionSystem(double DeltaSeconds);
	void UpdateWait();
	void ValidateTransitionRequest(struct FS_GameFlowTransitionRequest& TransitionRequest);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameFlowTransitionSystem_C">();
	}
	static class UBP_GameFlowTransitionSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameFlowTransitionSystem_C>();
	}
};
static_assert(alignof(UBP_GameFlowTransitionSystem_C) == 0x000008, "Wrong alignment on UBP_GameFlowTransitionSystem_C");
static_assert(sizeof(UBP_GameFlowTransitionSystem_C) == 0x000188, "Wrong size on UBP_GameFlowTransitionSystem_C");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_GameFlowTransitionSystem_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, TransitionState) == 0x0000A8, "Member 'UBP_GameFlowTransitionSystem_C::TransitionState' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, DefaultWaitTime) == 0x0000D8, "Member 'UBP_GameFlowTransitionSystem_C::DefaultWaitTime' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, DefaultFadeOutTime) == 0x0000E0, "Member 'UBP_GameFlowTransitionSystem_C::DefaultFadeOutTime' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, OnWaitCompleted) == 0x0000E8, "Member 'UBP_GameFlowTransitionSystem_C::OnWaitCompleted' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, TransitionWidget) == 0x0000F8, "Member 'UBP_GameFlowTransitionSystem_C::TransitionWidget' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, OnFadeInCompleted) == 0x000100, "Member 'UBP_GameFlowTransitionSystem_C::OnFadeInCompleted' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, OnFadeOutCompleted) == 0x000110, "Member 'UBP_GameFlowTransitionSystem_C::OnFadeOutCompleted' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, IsGameplayPaused) == 0x000120, "Member 'UBP_GameFlowTransitionSystem_C::IsGameplayPaused' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, PauseBlocker) == 0x000128, "Member 'UBP_GameFlowTransitionSystem_C::PauseBlocker' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, InteractionBlocker) == 0x000148, "Member 'UBP_GameFlowTransitionSystem_C::InteractionBlocker' has a wrong offset!");
static_assert(offsetof(UBP_GameFlowTransitionSystem_C, TransitionInputLockBlockerReference) == 0x000168, "Member 'UBP_GameFlowTransitionSystem_C::TransitionInputLockBlockerReference' has a wrong offset!");

}

