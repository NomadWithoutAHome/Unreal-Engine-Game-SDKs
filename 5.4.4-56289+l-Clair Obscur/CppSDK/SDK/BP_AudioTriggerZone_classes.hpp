#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_AudioTriggerZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_InteractiveMusicContext_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_AudioTriggerZone.BP_AudioTriggerZone_C
// 0x00A0 (0x0330 - 0x0290)
class ABP_AudioTriggerZone_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ConditionCheckerComponent_C*        BP_ConditionCheckerComponent;                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        Arrow;                                             // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        Ambience_AudioComponent;                           // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Outside;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box_Inside;                                        // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Inside1;                                           // 0x02C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Inside2;                                           // 0x02C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CA[0x6];                                      // 0x02CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_DataAsset_Ambience_C*               AmbienceInside;                                    // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicInside;                                       // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_DataAsset_Ambience_C*               AmbienceOutside;                                   // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             MusicOutside;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchMusic;                                       // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchRFX;                                         // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PlayBackPercentAmbience3D;                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MusicFadeOutDuration;                              // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MusicFadeInDuration;                               // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   AudioTriggerParameterNameInside;                   // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractiveMusicContext                     InteractiveMusicContextInside;                     // 0x0310(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AudioTriggerParameterNameOutside;                  // 0x0314(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          SwitchAmbience;                                    // 0x031C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_InteractiveMusicContext                     InteractiveMusicContextOutside;                    // 0x031D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31E[0x2];                                      // 0x031E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundControlBusMix*                    ControlBusMixActivate;                             // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class USoundControlBusMix*                    ControlBusMixDeactivate;                           // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_AudioTriggerZone_Box_Entry_K2Node_ComponentBoundEvent_2_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_AudioTriggerZone_Box_Exit_K2Node_ComponentBoundEvent_1_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_AudioTriggerZone_Box_Exit_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_AudioTriggerZone_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature(bool Condition);
	void ExecuteUbergraph_BP_AudioTriggerZone(int32 EntryPoint);
	void GetCustomGameInstance(class UBP_jRPG_GI_Custom_C** CustomGameInstance);
	void GetPlaybackPercentAmbience3D(const class USoundWave* PlayingSoundWave, const float PlaybackPercent);
	void GetWorldAudioComponent(class UBP_World_Audio_Component_C** WorldAudioCompRef);
	void HandleAmbience(class UBP_DataAsset_Ambience_C* DataAsset_Amb);
	void HandleMusic(const struct FS_InteractiveMusicParameters& InteractiveMusicParameters, float NewMusicFadeIn, float OldMusicFadeOut);
	void HandleRFX(class UBP_DataAsset_Ambience_C* DataAsset_Amb);
	void OnBoxInsideBeginOverlap(class UObject* Actor);
	void OnBoxInsideEndOverlap(class UObject* Actor);
	void OnBoxOutsideBeginOverlap(class UObject* Actor);
	void OnBoxOutsideEndOverlap(class UObject* Actor);
	void ReceiveBeginPlay();
	void SetTriggerComponentsCollisionEnabled(bool Enabled);
	void UpdateTriggerComponentsCollision();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_AudioTriggerZone_C">();
	}
	static class ABP_AudioTriggerZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_AudioTriggerZone_C>();
	}
};
static_assert(alignof(ABP_AudioTriggerZone_C) == 0x000008, "Wrong alignment on ABP_AudioTriggerZone_C");
static_assert(sizeof(ABP_AudioTriggerZone_C) == 0x000330, "Wrong size on ABP_AudioTriggerZone_C");
static_assert(offsetof(ABP_AudioTriggerZone_C, UberGraphFrame) == 0x000290, "Member 'ABP_AudioTriggerZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, BP_ConditionCheckerComponent) == 0x000298, "Member 'ABP_AudioTriggerZone_C::BP_ConditionCheckerComponent' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, Arrow) == 0x0002A0, "Member 'ABP_AudioTriggerZone_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, Ambience_AudioComponent) == 0x0002A8, "Member 'ABP_AudioTriggerZone_C::Ambience_AudioComponent' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, Box_Outside) == 0x0002B0, "Member 'ABP_AudioTriggerZone_C::Box_Outside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, Box_Inside) == 0x0002B8, "Member 'ABP_AudioTriggerZone_C::Box_Inside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, DefaultSceneRoot) == 0x0002C0, "Member 'ABP_AudioTriggerZone_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, Inside1) == 0x0002C8, "Member 'ABP_AudioTriggerZone_C::Inside1' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, Inside2) == 0x0002C9, "Member 'ABP_AudioTriggerZone_C::Inside2' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, AmbienceInside) == 0x0002D0, "Member 'ABP_AudioTriggerZone_C::AmbienceInside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, MusicInside) == 0x0002D8, "Member 'ABP_AudioTriggerZone_C::MusicInside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, AmbienceOutside) == 0x0002E0, "Member 'ABP_AudioTriggerZone_C::AmbienceOutside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, MusicOutside) == 0x0002E8, "Member 'ABP_AudioTriggerZone_C::MusicOutside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, SwitchMusic) == 0x0002F0, "Member 'ABP_AudioTriggerZone_C::SwitchMusic' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, SwitchRFX) == 0x0002F1, "Member 'ABP_AudioTriggerZone_C::SwitchRFX' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, PlayBackPercentAmbience3D) == 0x0002F8, "Member 'ABP_AudioTriggerZone_C::PlayBackPercentAmbience3D' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, MusicFadeOutDuration) == 0x000300, "Member 'ABP_AudioTriggerZone_C::MusicFadeOutDuration' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, MusicFadeInDuration) == 0x000304, "Member 'ABP_AudioTriggerZone_C::MusicFadeInDuration' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, AudioTriggerParameterNameInside) == 0x000308, "Member 'ABP_AudioTriggerZone_C::AudioTriggerParameterNameInside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, InteractiveMusicContextInside) == 0x000310, "Member 'ABP_AudioTriggerZone_C::InteractiveMusicContextInside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, AudioTriggerParameterNameOutside) == 0x000314, "Member 'ABP_AudioTriggerZone_C::AudioTriggerParameterNameOutside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, SwitchAmbience) == 0x00031C, "Member 'ABP_AudioTriggerZone_C::SwitchAmbience' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, InteractiveMusicContextOutside) == 0x00031D, "Member 'ABP_AudioTriggerZone_C::InteractiveMusicContextOutside' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, ControlBusMixActivate) == 0x000320, "Member 'ABP_AudioTriggerZone_C::ControlBusMixActivate' has a wrong offset!");
static_assert(offsetof(ABP_AudioTriggerZone_C, ControlBusMixDeactivate) == 0x000328, "Member 'ABP_AudioTriggerZone_C::ControlBusMixDeactivate' has a wrong offset!");

}

