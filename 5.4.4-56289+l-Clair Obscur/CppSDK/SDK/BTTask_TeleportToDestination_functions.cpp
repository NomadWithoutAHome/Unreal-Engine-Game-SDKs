#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTTask_TeleportToDestination

#include "Basic.hpp"

#include "BTTask_TeleportToDestination_classes.hpp"
#include "BTTask_TeleportToDestination_parameters.hpp"


namespace SDK
{

// Function BTTask_TeleportToDestination.BTTask_TeleportToDestination_C.ExecuteUbergraph_BTTask_TeleportToDestination
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_TeleportToDestination_C::ExecuteUbergraph_BTTask_TeleportToDestination(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_TeleportToDestination_C", "ExecuteUbergraph_BTTask_TeleportToDestination");

	Params::BTTask_TeleportToDestination_C_ExecuteUbergraph_BTTask_TeleportToDestination Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BTTask_TeleportToDestination.BTTask_TeleportToDestination_C.GetDestinationLocation
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotator                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
// bool*                                   Success                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBTTask_TeleportToDestination_C::GetDestinationLocation(class AActor* ControlledPawn, struct FVector* Location, struct FRotator* Rotator, bool* Success)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_TeleportToDestination_C", "GetDestinationLocation");

	Params::BTTask_TeleportToDestination_C_GetDestinationLocation Parms{};

	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Rotator != nullptr)
		*Rotator = std::move(Parms.Rotator);

	if (Success != nullptr)
		*Success = Parms.Success;
}


// Function BTTask_TeleportToDestination.BTTask_TeleportToDestination_C.ReceiveExecuteAI
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AAIController*                    OwnerController                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APawn*                            ControlledPawn                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBTTask_TeleportToDestination_C::ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BTTask_TeleportToDestination_C", "ReceiveExecuteAI");

	Params::BTTask_TeleportToDestination_C_ReceiveExecuteAI Parms{};

	Parms.OwnerController = OwnerController;
	Parms.ControlledPawn = ControlledPawn;

	UObject::ProcessEvent(Func, &Parms);
}

}

