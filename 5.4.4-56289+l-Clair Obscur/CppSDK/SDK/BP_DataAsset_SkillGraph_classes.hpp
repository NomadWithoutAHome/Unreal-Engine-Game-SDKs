#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DataAsset_SkillGraph

#include "Basic.hpp"

#include "FSkillGraphNode_structs.hpp"
#include "FSkillGraphEdge_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DataAsset_SkillGraph.BP_DataAsset_SkillGraph_C
// 0x0030 (0x0060 - 0x0030)
class UBP_DataAsset_SkillGraph_C final : public UPrimaryDataAsset
{
public:
	TArray<struct FFSkillGraphNode>               Nodes;                                             // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FFSkillGraphEdge>               Edges;                                             // 0x0040(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UClass*>                         CustomGroupingPolicies;                            // 0x0050(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void DoesEdgeExist(class UBP_DataAsset_Skill_C* Node1, class UBP_DataAsset_Skill_C* Node2, bool* Exists);
	void FindEdge(class UBP_DataAsset_Skill_C* skill1, class UBP_DataAsset_Skill_C* Skill2, bool* Found, struct FFSkillGraphEdge* Edge, int32* EdgeIndex);
	void FindEdgesFromSkill(class UBP_DataAsset_Skill_C* Skill, TArray<struct FFSkillGraphEdge>* MatchingEdges);
	void FindSkillByNameID(class FName SkillNameID, bool* Found, class UBP_DataAsset_Skill_C** Skill);
	void FindSkillNode(class UBP_DataAsset_Skill_C* Skill, bool* Found, struct FFSkillGraphNode* Node, int32* Index_0);
	void FindSkillNodeSafe(class UBP_DataAsset_Skill_C* Skill, bool* Found, struct FFSkillGraphNode* Node);
	TArray<struct FFSkillGraphNode> FindSkillsUnlockedByItem(class FName ItemId);
	void GetAdjacentSkills(class UBP_DataAsset_Skill_C* Skill, TArray<class UBP_DataAsset_Skill_C*>* Skills);
	TArray<class UClass*> GetCustomGroupingPolicies();
	void GetNodesInsideBox(const struct FVector2D& StartPoint, const struct FVector2D& Size, TArray<struct FFSkillGraphNode>* Nodes_0);
	void GetSkillNodePointUnlockCost(const struct FFSkillUnlockData& FSkillUnlockData, int32* UnlockCost);
	void GetSkillPointUnlockCost(class UBP_DataAsset_Skill_C* Skill, int32* UnlockCost);
	void GetStartingSkills(TArray<class UBP_DataAsset_Skill_C*>* Skills);
	void IsSecretSkill(class UBP_DataAsset_Skill_C* Skill, bool* IsSecret);
	bool IsStartingSkill(class UBP_DataAsset_Skill_C* Skill);
	void RemoveEdge(class UBP_DataAsset_Skill_C* Node1, class UBP_DataAsset_Skill_C* Node2);
	void RemoveSkill(class UBP_DataAsset_Skill_C* Skill);
	void TryFindSkillsByNameIDs(TArray<class FName>& NameIDs, TArray<class UBP_DataAsset_Skill_C*>* SkillAssets, bool* AllFound, TArray<class FName>* MissingNameIDs);
	void UpdateSkillNode(const struct FFSkillGraphNode& Node);
	void UpdateSkillNodeFromSkill(class UBP_DataAsset_Skill_C* Skill, const struct FFSkillGraphNode& Node);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DataAsset_SkillGraph_C">();
	}
	static class UBP_DataAsset_SkillGraph_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_DataAsset_SkillGraph_C>();
	}
};
static_assert(alignof(UBP_DataAsset_SkillGraph_C) == 0x000008, "Wrong alignment on UBP_DataAsset_SkillGraph_C");
static_assert(sizeof(UBP_DataAsset_SkillGraph_C) == 0x000060, "Wrong size on UBP_DataAsset_SkillGraph_C");
static_assert(offsetof(UBP_DataAsset_SkillGraph_C, Nodes) == 0x000030, "Member 'UBP_DataAsset_SkillGraph_C::Nodes' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_SkillGraph_C, Edges) == 0x000040, "Member 'UBP_DataAsset_SkillGraph_C::Edges' has a wrong offset!");
static_assert(offsetof(UBP_DataAsset_SkillGraph_C, CustomGroupingPolicies) == 0x000050, "Member 'UBP_DataAsset_SkillGraph_C::CustomGroupingPolicies' has a wrong offset!");

}

