#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_NPCAnimationComponent

#include "Basic.hpp"

#include "BP_NPCAnimationComponent_classes.hpp"
#include "BP_NPCAnimationComponent_parameters.hpp"


namespace SDK
{

// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ResetLookAtLocation
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_NPCAnimationComponent_C::ResetLookAtLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "ResetLookAtLocation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.UpdateLookAtData
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_NPCAnimationComponent_C::UpdateLookAtData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "UpdateLookAtData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetInteractingNPC
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_NPC_Dialog_C*            InteractingNPC_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetInteractingNPC(class ABP_jRPG_NPC_Dialog_C* InteractingNPC_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetInteractingNPC");

	Params::BP_NPCAnimationComponent_C_SetInteractingNPC Parms{};

	Parms.InteractingNPC_0 = InteractingNPC_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.GetEnvelopeVolume
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// double*                                 EnvelopeVolume_0                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::GetEnvelopeVolume(double* EnvelopeVolume_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "GetEnvelopeVolume");

	Params::BP_NPCAnimationComponent_C_GetEnvelopeVolume Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (EnvelopeVolume_0 != nullptr)
		*EnvelopeVolume_0 = Parms.EnvelopeVolume_0;
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.UpdateEnvelopeVolume
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  SoundWaveVolume                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::UpdateEnvelopeVolume(double SoundWaveVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "UpdateEnvelopeVolume");

	Params::BP_NPCAnimationComponent_C_UpdateEnvelopeVolume Parms{};

	Parms.SoundWaveVolume = SoundWaveVolume;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIdleBase
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_IdleNpcParameters&      IdleOverride_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetIdleBase(const struct FS_IdleNpcParameters& IdleOverride_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetIdleBase");

	Params::BP_NPCAnimationComponent_C_SetIdleBase Parms{};

	Parms.IdleOverride_0 = std::move(IdleOverride_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIsInDialogue
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInDialogue_0                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetIsInDialogue(bool IsInDialogue_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetIsInDialogue");

	Params::BP_NPCAnimationComponent_C_SetIsInDialogue Parms{};

	Parms.IsInDialogue_0 = IsInDialogue_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.GetBaseAnimationStatus
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_Expressions_Metahuman*                Basexpression_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 BaseFacialExpressionStrength_0                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_NPC_Body_IdleType*                    BaseIdleType_0                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::GetBaseAnimationStatus(E_Expressions_Metahuman* Basexpression_0, double* BaseFacialExpressionStrength_0, E_NPC_Body_IdleType* BaseIdleType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "GetBaseAnimationStatus");

	Params::BP_NPCAnimationComponent_C_GetBaseAnimationStatus Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Basexpression_0 != nullptr)
		*Basexpression_0 = Parms.Basexpression_0;

	if (BaseFacialExpressionStrength_0 != nullptr)
		*BaseFacialExpressionStrength_0 = Parms.BaseFacialExpressionStrength_0;

	if (BaseIdleType_0 != nullptr)
		*BaseIdleType_0 = Parms.BaseIdleType_0;
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ResetAnimationState
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCAnimationComponent_C::ResetAnimationState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "ResetAnimationState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetForceHeadDirection
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NPC_ForceHeadDirection                ForceHeadDirection_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetForceHeadDirection(E_NPC_ForceHeadDirection ForceHeadDirection_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetForceHeadDirection");

	Params::BP_NPCAnimationComponent_C_SetForceHeadDirection Parms{};

	Parms.ForceHeadDirection_0 = ForceHeadDirection_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetEnableLookAt
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    AllowNPCLookAt_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetEnableLookAt(bool AllowNPCLookAt_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetEnableLookAt");

	Params::BP_NPCAnimationComponent_C_SetEnableLookAt Parms{};

	Parms.AllowNPCLookAt_0 = AllowNPCLookAt_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetLookAtEndBone
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_NPCAnimationComponent_C::SetLookAtEndBone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetLookAtEndBone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetFacialExpression
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Expressions_Metahuman                 FacialExpression_0                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  FacialExpressionStrength_0                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// E_Facial_LookAt                         EyesLook_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetFacialExpression(E_Expressions_Metahuman FacialExpression_0, double FacialExpressionStrength_0, E_Facial_LookAt EyesLook_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetFacialExpression");

	Params::BP_NPCAnimationComponent_C_SetFacialExpression Parms{};

	Parms.FacialExpression_0 = FacialExpression_0;
	Parms.FacialExpressionStrength_0 = FacialExpressionStrength_0;
	Parms.EyesLook_0 = EyesLook_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIdleType
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_NPC_Body_IdleType                     IdleType_0                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetIdleType(E_NPC_Body_IdleType IdleType_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetIdleType");

	Params::BP_NPCAnimationComponent_C_SetIdleType Parms{};

	Parms.IdleType_0 = IdleType_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.SetIsTalking
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsTalking_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::SetIsTalking(bool IsTalking_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "SetIsTalking");

	Params::BP_NPCAnimationComponent_C_SetIsTalking Parms{};

	Parms.IsTalking_0 = IsTalking_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "ReceiveTick");

	Params::BP_NPCAnimationComponent_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_NPCAnimationComponent_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.HasChangedIdle
// (BlueprintCallable, BlueprintEvent)

void UBP_NPCAnimationComponent_C::HasChangedIdle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "HasChangedIdle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.PreviousIdleIsTheSame
// (BlueprintCallable, BlueprintEvent)

void UBP_NPCAnimationComponent_C::PreviousIdleIsTheSame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "PreviousIdleIsTheSame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.UpdateCustomIdleAndSendToABP
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_IdleNpcParameters&      CustomIdle_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::UpdateCustomIdleAndSendToABP(const struct FS_IdleNpcParameters& CustomIdle_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "UpdateCustomIdleAndSendToABP");

	Params::BP_NPCAnimationComponent_C_UpdateCustomIdleAndSendToABP Parms{};

	Parms.CustomIdle_0 = std::move(CustomIdle_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_NPCAnimationComponent.BP_NPCAnimationComponent_C.ExecuteUbergraph_BP_NPCAnimationComponent
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_NPCAnimationComponent_C::ExecuteUbergraph_BP_NPCAnimationComponent(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_NPCAnimationComponent_C", "ExecuteUbergraph_BP_NPCAnimationComponent");

	Params::BP_NPCAnimationComponent_C_ExecuteUbergraph_BP_NPCAnimationComponent Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}

}

