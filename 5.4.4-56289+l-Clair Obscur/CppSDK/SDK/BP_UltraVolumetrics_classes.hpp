#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UltraVolumetrics

#include "Basic.hpp"

#include "Enum_Fog_Presets_structs.hpp"
#include "Enum_Fog_Quality_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "Struct_FogQualityVars_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UltraVolumetrics.BP_UltraVolumetrics_C
// 0x0128 (0x03B8 - 0x0290)
class ABP_UltraVolumetrics_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   Fog;                                               // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBillboardComponent*                    FogIcon;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          EnableDistanceQuality_;                            // 0x02A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        GridSizeZ;                                         // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GridPixelSize;                                     // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_Distance_Field_;                               // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Distance_Field___Height;                           // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Field___Multiply;                         // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Field___Contrast;                         // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Distance_Field___Self_Shadow_Amount;               // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Opacity;                                           // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Noise_Size;                                        // 0x02F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Noise___Contrast;                                  // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Noise___Multiply;                                  // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x0318(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Panning_speed;                                     // 0x0328(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Far_Fade_Distance;                                 // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Near_Fade_Distance;                                // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	TArray<class UMaterialInstance*>              Materials;                                         // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               Material;                                          // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	Enum_Fog_Quality                              QualityPreset;                                     // 0x0368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        QualityTriggerDistance;                            // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FStruct_FogQualityVars                 QualityVars;                                       // 0x0378(0x0020)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	int32                                         Seed;                                              // 0x0398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_Fog_Presets                              Preset;                                            // 0x039C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39D[0x3];                                      // 0x039D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           EmissiveColor;                                     // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        OpacityMultiplier;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetRandom();
	void SetOpacity(double NewValue);
	void ResetFogQuality();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Randomize();
	void GetDefaultQualityVars();
	void FogQualitySet();
	void FogQuality_GridSizeZ(class FString* Output);
	void FogQuality_GridPixelSize(class FString* Output);
	void ExecuteUbergraph_BP_UltraVolumetrics(int32 EntryPoint);
	void ApplySeed();
	void ApplyPreset();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UltraVolumetrics_C">();
	}
	static class ABP_UltraVolumetrics_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_UltraVolumetrics_C>();
	}
};
static_assert(alignof(ABP_UltraVolumetrics_C) == 0x000008, "Wrong alignment on ABP_UltraVolumetrics_C");
static_assert(sizeof(ABP_UltraVolumetrics_C) == 0x0003B8, "Wrong size on ABP_UltraVolumetrics_C");
static_assert(offsetof(ABP_UltraVolumetrics_C, UberGraphFrame) == 0x000290, "Member 'ABP_UltraVolumetrics_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Fog) == 0x000298, "Member 'ABP_UltraVolumetrics_C::Fog' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, FogIcon) == 0x0002A0, "Member 'ABP_UltraVolumetrics_C::FogIcon' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, EnableDistanceQuality_) == 0x0002A8, "Member 'ABP_UltraVolumetrics_C::EnableDistanceQuality_' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, GridSizeZ) == 0x0002B0, "Member 'ABP_UltraVolumetrics_C::GridSizeZ' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, GridPixelSize) == 0x0002B8, "Member 'ABP_UltraVolumetrics_C::GridPixelSize' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Use_Distance_Field_) == 0x0002C0, "Member 'ABP_UltraVolumetrics_C::Use_Distance_Field_' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Distance_Field___Height) == 0x0002C8, "Member 'ABP_UltraVolumetrics_C::Distance_Field___Height' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Distance_Field___Multiply) == 0x0002D0, "Member 'ABP_UltraVolumetrics_C::Distance_Field___Multiply' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Distance_Field___Contrast) == 0x0002D8, "Member 'ABP_UltraVolumetrics_C::Distance_Field___Contrast' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Distance_Field___Self_Shadow_Amount) == 0x0002E0, "Member 'ABP_UltraVolumetrics_C::Distance_Field___Self_Shadow_Amount' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Opacity) == 0x0002E8, "Member 'ABP_UltraVolumetrics_C::Opacity' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Noise_Size) == 0x0002F0, "Member 'ABP_UltraVolumetrics_C::Noise_Size' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Noise___Contrast) == 0x000308, "Member 'ABP_UltraVolumetrics_C::Noise___Contrast' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Noise___Multiply) == 0x000310, "Member 'ABP_UltraVolumetrics_C::Noise___Multiply' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Color) == 0x000318, "Member 'ABP_UltraVolumetrics_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Panning_speed) == 0x000328, "Member 'ABP_UltraVolumetrics_C::Panning_speed' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Far_Fade_Distance) == 0x000340, "Member 'ABP_UltraVolumetrics_C::Far_Fade_Distance' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Near_Fade_Distance) == 0x000348, "Member 'ABP_UltraVolumetrics_C::Near_Fade_Distance' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Materials) == 0x000350, "Member 'ABP_UltraVolumetrics_C::Materials' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Material) == 0x000360, "Member 'ABP_UltraVolumetrics_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, QualityPreset) == 0x000368, "Member 'ABP_UltraVolumetrics_C::QualityPreset' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, QualityTriggerDistance) == 0x000370, "Member 'ABP_UltraVolumetrics_C::QualityTriggerDistance' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, QualityVars) == 0x000378, "Member 'ABP_UltraVolumetrics_C::QualityVars' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Seed) == 0x000398, "Member 'ABP_UltraVolumetrics_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, Preset) == 0x00039C, "Member 'ABP_UltraVolumetrics_C::Preset' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, EmissiveColor) == 0x0003A0, "Member 'ABP_UltraVolumetrics_C::EmissiveColor' has a wrong offset!");
static_assert(offsetof(ABP_UltraVolumetrics_C, OpacityMultiplier) == 0x0003B0, "Member 'ABP_UltraVolumetrics_C::OpacityMultiplier' has a wrong offset!");

}

