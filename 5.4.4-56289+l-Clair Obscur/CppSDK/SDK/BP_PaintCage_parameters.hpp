#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PaintCage

#include "Basic.hpp"


namespace SDK::Params
{

// Function BP_PaintCage.BP_PaintCage_C.UpdateCageVisuals
// 0x0040 (0x0040 - 0x0000)
struct BP_PaintCage_C_UpdateCageVisuals final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetRemainingActivation_ReturnValue;       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_PaintCageLayer_Master_C*            K2Node_DynamicCast_AsBP_Paint_Cage_Layer_Master;   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_UpdateCageVisuals) == 0x000008, "Wrong alignment on BP_PaintCage_C_UpdateCageVisuals");
static_assert(sizeof(BP_PaintCage_C_UpdateCageVisuals) == 0x000040, "Wrong size on BP_PaintCage_C_UpdateCageVisuals");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, Instant) == 0x000000, "Member 'BP_PaintCage_C_UpdateCageVisuals::Instant' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, CallFunc_GetRemainingActivation_ReturnValue) == 0x000004, "Member 'BP_PaintCage_C_UpdateCageVisuals::CallFunc_GetRemainingActivation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, Temp_int_Variable) == 0x000008, "Member 'BP_PaintCage_C_UpdateCageVisuals::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, CallFunc_LessEqual_IntInt_ReturnValue) == 0x00000C, "Member 'BP_PaintCage_C_UpdateCageVisuals::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, CallFunc_Add_IntInt_ReturnValue) == 0x000010, "Member 'BP_PaintCage_C_UpdateCageVisuals::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_PaintCage_C_UpdateCageVisuals::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_PaintCage_C_UpdateCageVisuals::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, K2Node_DynamicCast_AsBP_Paint_Cage_Layer_Master) == 0x000030, "Member 'BP_PaintCage_C_UpdateCageVisuals::K2Node_DynamicCast_AsBP_Paint_Cage_Layer_Master' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageVisuals, K2Node_DynamicCast_bSuccess) == 0x000038, "Member 'BP_PaintCage_C_UpdateCageVisuals::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.UpdateCageState
// 0x0002 (0x0002 - 0x0000)
struct BP_PaintCage_C_UpdateCageState final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_UpdateCageState) == 0x000001, "Wrong alignment on BP_PaintCage_C_UpdateCageState");
static_assert(sizeof(BP_PaintCage_C_UpdateCageState) == 0x000002, "Wrong size on BP_PaintCage_C_UpdateCageState");
static_assert(offsetof(BP_PaintCage_C_UpdateCageState, Instant) == 0x000000, "Member 'BP_PaintCage_C_UpdateCageState::Instant' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageState, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PaintCage_C_UpdateCageState::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.UpdateCageAudio
// 0x0008 (0x0008 - 0x0000)
struct BP_PaintCage_C_UpdateCageAudio final
{
public:
	int32                                         CallFunc_GetRemainingActivation_ReturnValue;       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_UpdateCageAudio) == 0x000004, "Wrong alignment on BP_PaintCage_C_UpdateCageAudio");
static_assert(sizeof(BP_PaintCage_C_UpdateCageAudio) == 0x000008, "Wrong size on BP_PaintCage_C_UpdateCageAudio");
static_assert(offsetof(BP_PaintCage_C_UpdateCageAudio, CallFunc_GetRemainingActivation_ReturnValue) == 0x000000, "Member 'BP_PaintCage_C_UpdateCageAudio::CallFunc_GetRemainingActivation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_UpdateCageAudio, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'BP_PaintCage_C_UpdateCageAudio::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.PlayActivationAudio
// 0x0008 (0x0008 - 0x0000)
struct BP_PaintCage_C_PlayActivationAudio final
{
public:
	int32                                         CallFunc_GetRemainingActivation_ReturnValue;       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchInteger_CmpSuccess;                   // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_PlayActivationAudio) == 0x000004, "Wrong alignment on BP_PaintCage_C_PlayActivationAudio");
static_assert(sizeof(BP_PaintCage_C_PlayActivationAudio) == 0x000008, "Wrong size on BP_PaintCage_C_PlayActivationAudio");
static_assert(offsetof(BP_PaintCage_C_PlayActivationAudio, CallFunc_GetRemainingActivation_ReturnValue) == 0x000000, "Member 'BP_PaintCage_C_PlayActivationAudio::CallFunc_GetRemainingActivation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_PlayActivationAudio, K2Node_SwitchInteger_CmpSuccess) == 0x000004, "Member 'BP_PaintCage_C_PlayActivationAudio::K2Node_SwitchInteger_CmpSuccess' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.OnActivationReceived
// 0x000C (0x000C - 0x0000)
struct BP_PaintCage_C_OnActivationReceived final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_OnActivationReceived) == 0x000004, "Wrong alignment on BP_PaintCage_C_OnActivationReceived");
static_assert(sizeof(BP_PaintCage_C_OnActivationReceived) == 0x00000C, "Wrong size on BP_PaintCage_C_OnActivationReceived");
static_assert(offsetof(BP_PaintCage_C_OnActivationReceived, Instant) == 0x000000, "Member 'BP_PaintCage_C_OnActivationReceived::Instant' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_OnActivationReceived, Temp_int_Variable) == 0x000004, "Member 'BP_PaintCage_C_OnActivationReceived::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_OnActivationReceived, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_PaintCage_C_OnActivationReceived::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.GetRemainingActivation
// 0x0008 (0x0008 - 0x0000)
struct BP_PaintCage_C_GetRemainingActivation final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_GetRemainingActivation) == 0x000004, "Wrong alignment on BP_PaintCage_C_GetRemainingActivation");
static_assert(sizeof(BP_PaintCage_C_GetRemainingActivation) == 0x000008, "Wrong size on BP_PaintCage_C_GetRemainingActivation");
static_assert(offsetof(BP_PaintCage_C_GetRemainingActivation, ReturnValue) == 0x000000, "Member 'BP_PaintCage_C_GetRemainingActivation::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_GetRemainingActivation, CallFunc_Subtract_IntInt_ReturnValue) == 0x000004, "Member 'BP_PaintCage_C_GetRemainingActivation::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.ExecuteUbergraph_BP_PaintCage
// 0x000C (0x000C - 0x0000)
struct BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Instant;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_CustomEvent_Duration;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage) == 0x000004, "Wrong alignment on BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage");
static_assert(sizeof(BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage) == 0x00000C, "Wrong size on BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage");
static_assert(offsetof(BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage, EntryPoint) == 0x000000, "Member 'BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage, K2Node_Event_Instant) == 0x000004, "Member 'BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage::K2Node_Event_Instant' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage, K2Node_CustomEvent_Duration) == 0x000008, "Member 'BP_PaintCage_C_ExecuteUbergraph_BP_PaintCage::K2Node_CustomEvent_Duration' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.DestroyCageIfNeeded
// 0x0018 (0x0018 - 0x0000)
struct BP_PaintCage_C_DestroyCageIfNeeded final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_AchievementManager_C*               CallFunc_GetAchievementManager_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_DestroyCageIfNeeded) == 0x000008, "Wrong alignment on BP_PaintCage_C_DestroyCageIfNeeded");
static_assert(sizeof(BP_PaintCage_C_DestroyCageIfNeeded) == 0x000018, "Wrong size on BP_PaintCage_C_DestroyCageIfNeeded");
static_assert(offsetof(BP_PaintCage_C_DestroyCageIfNeeded, Instant) == 0x000000, "Member 'BP_PaintCage_C_DestroyCageIfNeeded::Instant' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_DestroyCageIfNeeded, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BP_PaintCage_C_DestroyCageIfNeeded::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_DestroyCageIfNeeded, CallFunc_GetAchievementManager_ReturnValue) == 0x000008, "Member 'BP_PaintCage_C_DestroyCageIfNeeded::CallFunc_GetAchievementManager_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_PaintCage_C_DestroyCageIfNeeded, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000010, "Member 'BP_PaintCage_C_DestroyCageIfNeeded::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.DestroyActorWithDelay
// 0x0004 (0x0004 - 0x0000)
struct BP_PaintCage_C_DestroyActorWithDelay final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_DestroyActorWithDelay) == 0x000004, "Wrong alignment on BP_PaintCage_C_DestroyActorWithDelay");
static_assert(sizeof(BP_PaintCage_C_DestroyActorWithDelay) == 0x000004, "Wrong size on BP_PaintCage_C_DestroyActorWithDelay");
static_assert(offsetof(BP_PaintCage_C_DestroyActorWithDelay, Duration) == 0x000000, "Member 'BP_PaintCage_C_DestroyActorWithDelay::Duration' has a wrong offset!");

// Function BP_PaintCage.BP_PaintCage_C.ButtonTrigger
// 0x0001 (0x0001 - 0x0000)
struct BP_PaintCage_C_ButtonTrigger final
{
public:
	bool                                          Instant;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_PaintCage_C_ButtonTrigger) == 0x000001, "Wrong alignment on BP_PaintCage_C_ButtonTrigger");
static_assert(sizeof(BP_PaintCage_C_ButtonTrigger) == 0x000001, "Wrong size on BP_PaintCage_C_ButtonTrigger");
static_assert(offsetof(BP_PaintCage_C_ButtonTrigger, Instant) == 0x000000, "Member 'BP_PaintCage_C_ButtonTrigger::Instant' has a wrong offset!");

}

