#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CameraConfigBlender

#include "Basic.hpp"

#include "BP_CameraConfigBlender_classes.hpp"
#include "BP_CameraConfigBlender_parameters.hpp"


namespace SDK
{

// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.AddCameraConfig
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraConfigBlender_C::AddCameraConfig(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "AddCameraConfig");

	Params::BP_CameraConfigBlender_C_AddCameraConfig Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.ApplyCameraConfigInstant
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_CameraConfig&           CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::ApplyCameraConfigInstant(const struct FS_CameraConfig& CameraConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "ApplyCameraConfigInstant");

	Params::BP_CameraConfigBlender_C_ApplyCameraConfigInstant Parms{};

	Parms.CameraConfig = std::move(CameraConfig);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.ComputeLerpCameraComponentConfig
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LerpValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_CameraComponentConfig*        CameraComponentConfig                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::ComputeLerpCameraComponentConfig(double LerpValue, struct FS_CameraComponentConfig* CameraComponentConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "ComputeLerpCameraComponentConfig");

	Params::BP_CameraConfigBlender_C_ComputeLerpCameraComponentConfig Parms{};

	Parms.LerpValue = LerpValue;

	UObject::ProcessEvent(Func, &Parms);

	if (CameraComponentConfig != nullptr)
		*CameraComponentConfig = std::move(Parms.CameraComponentConfig);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.ComputeLerpCameraConfig
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_CameraConfig                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FS_CameraConfig UBP_CameraConfigBlender_C::ComputeLerpCameraConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "ComputeLerpCameraConfig");

	Params::BP_CameraConfigBlender_C_ComputeLerpCameraConfig Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.ComputeLerpSpringArmComponentConfig
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  LerpValue                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FS_SpringArmComponentConfig      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FS_SpringArmComponentConfig UBP_CameraConfigBlender_C::ComputeLerpSpringArmComponentConfig(double LerpValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "ComputeLerpSpringArmComponentConfig");

	Params::BP_CameraConfigBlender_C_ComputeLerpSpringArmComponentConfig Parms{};

	Parms.LerpValue = LerpValue;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.ComputeLerpValue
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UBP_CameraConfigBlender_C::ComputeLerpValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "ComputeLerpValue");

	Params::BP_CameraConfigBlender_C_ComputeLerpValue Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.DebugDrawCameraComponent
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CameraConfigBlender_C::DebugDrawCameraComponent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "DebugDrawCameraComponent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.DebugDrawCameraConfigBlender
// (Private, BlueprintCallable, BlueprintEvent)

void UBP_CameraConfigBlender_C::DebugDrawCameraConfigBlender()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "DebugDrawCameraConfigBlender");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.DebugDrawSpringArmComponentConfig
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CameraConfigBlender_C::DebugDrawSpringArmComponentConfig()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "DebugDrawSpringArmComponentConfig");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.GetCurrentCameraConfigFromComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// struct FS_CameraConfig*                 CameraConfig                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::GetCurrentCameraConfigFromComponents(struct FS_CameraConfig* CameraConfig)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "GetCurrentCameraConfigFromComponents");

	Params::BP_CameraConfigBlender_C_GetCurrentCameraConfigFromComponents Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CameraConfig != nullptr)
		*CameraConfig = std::move(Parms.CameraConfig);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.GetDebugString
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash)

class FString UBP_CameraConfigBlender_C::GetDebugString()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "GetDebugString");

	Params::BP_CameraConfigBlender_C_GetDebugString Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.GetLastCameraConfig
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UBP_DataAsset_CameraConfig_C**    Output                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::GetLastCameraConfig(class UBP_DataAsset_CameraConfig_C** Output)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "GetLastCameraConfig");

	Params::BP_CameraConfigBlender_C_GetLastCameraConfig Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Output != nullptr)
		*Output = Parms.Output;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.IsAppliedOnComponents
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UCameraComponent*                 CameraComponent_0                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// class USpringArmComponent*              SpringArmComponent_0                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool*                                   IsApplied                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::IsAppliedOnComponents(class UCameraComponent* CameraComponent_0, class USpringArmComponent* SpringArmComponent_0, bool* IsApplied)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "IsAppliedOnComponents");

	Params::BP_CameraConfigBlender_C_IsAppliedOnComponents Parms{};

	Parms.CameraComponent_0 = CameraComponent_0;
	Parms.SpringArmComponent_0 = SpringArmComponent_0;

	UObject::ProcessEvent(Func, &Parms);

	if (IsApplied != nullptr)
		*IsApplied = Parms.IsApplied;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.IsTransitionDone
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   Done                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::IsTransitionDone(bool* Done)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "IsTransitionDone");

	Params::BP_CameraConfigBlender_C_IsTransitionDone Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Done != nullptr)
		*Done = Parms.Done;
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.OnCameraConfigStackChanged
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraConfigBlender_C::OnCameraConfigStackChanged(const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "OnCameraConfigStackChanged");

	Params::BP_CameraConfigBlender_C_OnCameraConfigStackChanged Parms{};

	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.RemoveCameraConfig
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraConfigBlender_C::RemoveCameraConfig(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "RemoveCameraConfig");

	Params::BP_CameraConfigBlender_C_RemoveCameraConfig Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.SetupCameraConfig
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_DataAsset_CameraConfig_C*     CameraConfig                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FViewTargetTransitionParams&TransitionParameters                                   (BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor)

void UBP_CameraConfigBlender_C::SetupCameraConfig(class UBP_DataAsset_CameraConfig_C* CameraConfig, const struct FViewTargetTransitionParams& TransitionParameters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "SetupCameraConfig");

	Params::BP_CameraConfigBlender_C_SetupCameraConfig Parms{};

	Parms.CameraConfig = CameraConfig;
	Parms.TransitionParameters = std::move(TransitionParameters);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.UpdateCameraConfigBlender
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::UpdateCameraConfigBlender(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "UpdateCameraConfigBlender");

	Params::BP_CameraConfigBlender_C_UpdateCameraConfigBlender Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.UpdateCameraConfigBlenderInternal
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CameraConfigBlender_C::UpdateCameraConfigBlenderInternal(double DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "UpdateCameraConfigBlenderInternal");

	Params::BP_CameraConfigBlender_C_UpdateCameraConfigBlenderInternal Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CameraConfigBlender.BP_CameraConfigBlender_C.ValidateCameraConfigBlender
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_CameraConfigBlender_C::ValidateCameraConfigBlender()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CameraConfigBlender_C", "ValidateCameraConfigBlender");

	UObject::ProcessEvent(Func, nullptr);
}

}

