#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_Spline_Random_Short

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_RuntimeSoundDataWithDelay_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Audio_Spline_Random_Short.BP_Audio_Spline_Random_Short_C
// 0x0038 (0x02C8 - 0x0290)
class ABP_Audio_Spline_Random_Short_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class UBP_DataAsset_SoundWithDelay_C*> SoundData;                                         // 0x02A0(0x0010)(Edit, BlueprintVisible)
	int32                                         _NumberOfPointsToSearch;                           // 0x02B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_DrawPlayedSoundEnable;                       // 0x02B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FS_RuntimeSoundDataWithDelay>   RuntimeSoundData;                                  // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void StartTimerForSoundData(struct FS_RuntimeSoundDataWithDelay& SoundData_0);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PlayRandomSoundAtRandomPosition(struct FS_RuntimeSoundDataWithDelay& RandomSoundData);
	void OnTimerElapsed();
	void GetSplinePointForSound(class USoundBase* Sound, struct FVector* position, bool* Found);
	void GetRandomSplinePointsInDistanceRange(double MinDistance, double MaxDistance, int32 NumberOfPoints, TArray<struct FVector>* Points);
	void GetRandomSplinePointInRange(const struct FVector& position, double Range, TArray<struct FVector>& Points, struct FVector* Point, bool* Found);
	void GetMinMaxDistanceFromLocationInRange(const struct FVector& Location, double Range, bool* Found, double* MinDistance, double* MaxDistance);
	void ExecuteUbergraph_BP_Audio_Spline_Random_Short(int32 EntryPoint);
	void DEBUG_DrawPlayedSound(class USoundBase* Sound, const struct FVector& position);
	void DEBUG_DrawMinMaxPositions();
	bool CheckForErrors(TArray<class FText>& ErrorMessages);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Audio_Spline_Random_Short_C">();
	}
	static class ABP_Audio_Spline_Random_Short_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Audio_Spline_Random_Short_C>();
	}
};
static_assert(alignof(ABP_Audio_Spline_Random_Short_C) == 0x000008, "Wrong alignment on ABP_Audio_Spline_Random_Short_C");
static_assert(sizeof(ABP_Audio_Spline_Random_Short_C) == 0x0002C8, "Wrong size on ABP_Audio_Spline_Random_Short_C");
static_assert(offsetof(ABP_Audio_Spline_Random_Short_C, UberGraphFrame) == 0x000290, "Member 'ABP_Audio_Spline_Random_Short_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Spline_Random_Short_C, Spline) == 0x000298, "Member 'ABP_Audio_Spline_Random_Short_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Spline_Random_Short_C, SoundData) == 0x0002A0, "Member 'ABP_Audio_Spline_Random_Short_C::SoundData' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Spline_Random_Short_C, _NumberOfPointsToSearch) == 0x0002B0, "Member 'ABP_Audio_Spline_Random_Short_C::_NumberOfPointsToSearch' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Spline_Random_Short_C, DEBUG_DrawPlayedSoundEnable) == 0x0002B4, "Member 'ABP_Audio_Spline_Random_Short_C::DEBUG_DrawPlayedSoundEnable' has a wrong offset!");
static_assert(offsetof(ABP_Audio_Spline_Random_Short_C, RuntimeSoundData) == 0x0002B8, "Member 'ABP_Audio_Spline_Random_Short_C::RuntimeSoundData' has a wrong offset!");

}

