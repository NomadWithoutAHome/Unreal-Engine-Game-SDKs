#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS_LookAtTarget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPS_LookAtTarget.BPS_LookAtTarget_C
// 0x0078 (0x0120 - 0x00A8)
class UBPS_LookAtTarget_C final : public UBTTask_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	double                                        StartTime;                                         // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRotation;                                   // 0x00B8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FRotator                               TargetRotation;                                    // 0x00D0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	struct FBlackboardKeySelector                 Key_TargetRotation;                                // 0x00E8(0x0028)(Edit, BlueprintVisible)
	float                                         RotationRateZ;                                     // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        RotationProgress;                                  // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BPS_LookAtTarget(int32 EntryPoint);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPS_LookAtTarget_C">();
	}
	static class UBPS_LookAtTarget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPS_LookAtTarget_C>();
	}
};
static_assert(alignof(UBPS_LookAtTarget_C) == 0x000008, "Wrong alignment on UBPS_LookAtTarget_C");
static_assert(sizeof(UBPS_LookAtTarget_C) == 0x000120, "Wrong size on UBPS_LookAtTarget_C");
static_assert(offsetof(UBPS_LookAtTarget_C, UberGraphFrame) == 0x0000A8, "Member 'UBPS_LookAtTarget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPS_LookAtTarget_C, StartTime) == 0x0000B0, "Member 'UBPS_LookAtTarget_C::StartTime' has a wrong offset!");
static_assert(offsetof(UBPS_LookAtTarget_C, InitialRotation) == 0x0000B8, "Member 'UBPS_LookAtTarget_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(UBPS_LookAtTarget_C, TargetRotation) == 0x0000D0, "Member 'UBPS_LookAtTarget_C::TargetRotation' has a wrong offset!");
static_assert(offsetof(UBPS_LookAtTarget_C, Key_TargetRotation) == 0x0000E8, "Member 'UBPS_LookAtTarget_C::Key_TargetRotation' has a wrong offset!");
static_assert(offsetof(UBPS_LookAtTarget_C, RotationRateZ) == 0x000110, "Member 'UBPS_LookAtTarget_C::RotationRateZ' has a wrong offset!");
static_assert(offsetof(UBPS_LookAtTarget_C, RotationProgress) == 0x000118, "Member 'UBPS_LookAtTarget_C::RotationProgress' has a wrong offset!");

}

