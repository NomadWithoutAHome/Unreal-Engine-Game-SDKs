#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_SliderSelector

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_SliderSelector.WBP_SliderSelector_C.SetCurrentValueWithMapRanged
// 0x0028 (0x0028 - 0x0000)
struct WBP_SliderSelector_C_SetCurrentValueWithMapRanged final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InRangeA;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InRangeB;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DispatchChanges;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_SetCurrentValueWithMapRanged");
static_assert(sizeof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged) == 0x000028, "Wrong size on WBP_SliderSelector_C_SetCurrentValueWithMapRanged");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged, Value) == 0x000000, "Member 'WBP_SliderSelector_C_SetCurrentValueWithMapRanged::Value' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged, InRangeA) == 0x000008, "Member 'WBP_SliderSelector_C_SetCurrentValueWithMapRanged::InRangeA' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged, InRangeB) == 0x000010, "Member 'WBP_SliderSelector_C_SetCurrentValueWithMapRanged::InRangeB' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged, DispatchChanges) == 0x000018, "Member 'WBP_SliderSelector_C_SetCurrentValueWithMapRanged::DispatchChanges' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValueWithMapRanged, CallFunc_MapRangeClamped_ReturnValue) == 0x000020, "Member 'WBP_SliderSelector_C_SetCurrentValueWithMapRanged::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.GetMapRangedClampedValue
// 0x0020 (0x0020 - 0x0000)
struct WBP_SliderSelector_C_GetMapRangedClampedValue final
{
public:
	double                                        OutRangeA;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OutRangeB;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_GetMapRangedClampedValue) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_GetMapRangedClampedValue");
static_assert(sizeof(WBP_SliderSelector_C_GetMapRangedClampedValue) == 0x000020, "Wrong size on WBP_SliderSelector_C_GetMapRangedClampedValue");
static_assert(offsetof(WBP_SliderSelector_C_GetMapRangedClampedValue, OutRangeA) == 0x000000, "Member 'WBP_SliderSelector_C_GetMapRangedClampedValue::OutRangeA' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_GetMapRangedClampedValue, OutRangeB) == 0x000008, "Member 'WBP_SliderSelector_C_GetMapRangedClampedValue::OutRangeB' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_GetMapRangedClampedValue, ReturnValue) == 0x000010, "Member 'WBP_SliderSelector_C_GetMapRangedClampedValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_GetMapRangedClampedValue, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'WBP_SliderSelector_C_GetMapRangedClampedValue::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.GetRangeValue
// 0x0010 (0x0010 - 0x0000)
struct WBP_SliderSelector_C_GetRangeValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_GetRangeValue) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_GetRangeValue");
static_assert(sizeof(WBP_SliderSelector_C_GetRangeValue) == 0x000010, "Wrong size on WBP_SliderSelector_C_GetRangeValue");
static_assert(offsetof(WBP_SliderSelector_C_GetRangeValue, ReturnValue) == 0x000000, "Member 'WBP_SliderSelector_C_GetRangeValue::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_GetRangeValue, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'WBP_SliderSelector_C_GetRangeValue::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.GetCurrentValue
// 0x0008 (0x0008 - 0x0000)
struct WBP_SliderSelector_C_GetCurrentValue final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_GetCurrentValue) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_GetCurrentValue");
static_assert(sizeof(WBP_SliderSelector_C_GetCurrentValue) == 0x000008, "Wrong size on WBP_SliderSelector_C_GetCurrentValue");
static_assert(offsetof(WBP_SliderSelector_C_GetCurrentValue, ReturnValue) == 0x000000, "Member 'WBP_SliderSelector_C_GetCurrentValue::ReturnValue' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.SetCurrentValue
// 0x0010 (0x0010 - 0x0000)
struct WBP_SliderSelector_C_SetCurrentValue final
{
public:
	double                                        Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DispatchChanges;                                   // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_SetCurrentValue) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_SetCurrentValue");
static_assert(sizeof(WBP_SliderSelector_C_SetCurrentValue) == 0x000010, "Wrong size on WBP_SliderSelector_C_SetCurrentValue");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValue, Value) == 0x000000, "Member 'WBP_SliderSelector_C_SetCurrentValue::Value' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SetCurrentValue, DispatchChanges) == 0x000008, "Member 'WBP_SliderSelector_C_SetCurrentValue::DispatchChanges' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.SelectNextValue
// 0x0010 (0x0010 - 0x0000)
struct WBP_SliderSelector_C_SelectNextValue final
{
public:
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_SelectNextValue) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_SelectNextValue");
static_assert(sizeof(WBP_SliderSelector_C_SelectNextValue) == 0x000010, "Wrong size on WBP_SliderSelector_C_SelectNextValue");
static_assert(offsetof(WBP_SliderSelector_C_SelectNextValue, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000000, "Member 'WBP_SliderSelector_C_SelectNextValue::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SelectNextValue, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'WBP_SliderSelector_C_SelectNextValue::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.SelectPreviousValue
// 0x0010 (0x0010 - 0x0000)
struct WBP_SliderSelector_C_SelectPreviousValue final
{
public:
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_SelectPreviousValue) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_SelectPreviousValue");
static_assert(sizeof(WBP_SliderSelector_C_SelectPreviousValue) == 0x000010, "Wrong size on WBP_SliderSelector_C_SelectPreviousValue");
static_assert(offsetof(WBP_SliderSelector_C_SelectPreviousValue, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000000, "Member 'WBP_SliderSelector_C_SelectPreviousValue::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_SelectPreviousValue, CallFunc_FClamp_ReturnValue) == 0x000008, "Member 'WBP_SliderSelector_C_SelectPreviousValue::CallFunc_FClamp_ReturnValue' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.UpdateWidget
// 0x0128 (0x0128 - 0x0000)
struct WBP_SliderSelector_C_UpdateWidget final
{
public:
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0000(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0048(0x0048)(HasGetValueTypeHash)
	double                                        CallFunc_GetRangeValue_ReturnValue;                // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_DoubleToText_ReturnValue;            // 0x00A0(0x0010)()
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x00B8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0100(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0110(0x0010)()
	float                                         CallFunc_SetPercent_InPercent_ImplicitCast;        // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_UpdateWidget) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_UpdateWidget");
static_assert(sizeof(WBP_SliderSelector_C_UpdateWidget) == 0x000128, "Wrong size on WBP_SliderSelector_C_UpdateWidget");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, K2Node_MakeStruct_FormatArgumentData) == 0x000000, "Member 'WBP_SliderSelector_C_UpdateWidget::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, K2Node_MakeStruct_FormatArgumentData_1) == 0x000048, "Member 'WBP_SliderSelector_C_UpdateWidget::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, CallFunc_GetRangeValue_ReturnValue) == 0x000090, "Member 'WBP_SliderSelector_C_UpdateWidget::CallFunc_GetRangeValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000098, "Member 'WBP_SliderSelector_C_UpdateWidget::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, CallFunc_Conv_DoubleToText_ReturnValue) == 0x0000A0, "Member 'WBP_SliderSelector_C_UpdateWidget::CallFunc_Conv_DoubleToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000B0, "Member 'WBP_SliderSelector_C_UpdateWidget::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, K2Node_MakeStruct_FormatArgumentData_2) == 0x0000B8, "Member 'WBP_SliderSelector_C_UpdateWidget::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, K2Node_MakeArray_Array) == 0x000100, "Member 'WBP_SliderSelector_C_UpdateWidget::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, CallFunc_Format_ReturnValue) == 0x000110, "Member 'WBP_SliderSelector_C_UpdateWidget::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_UpdateWidget, CallFunc_SetPercent_InPercent_ImplicitCast) == 0x000120, "Member 'WBP_SliderSelector_C_UpdateWidget::CallFunc_SetPercent_InPercent_ImplicitCast' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Upgrade_K2Node_ComponentBoundEvent_1_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_SliderSelector_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_SliderSelector_C_PreConstruct");
static_assert(sizeof(WBP_SliderSelector_C_PreConstruct) == 0x000001, "Wrong size on WBP_SliderSelector_C_PreConstruct");
static_assert(offsetof(WBP_SliderSelector_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_SliderSelector_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature final
{
public:
	class UCommonButtonBase*                      Button;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(sizeof(WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature) == 0x000008, "Wrong size on WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature");
static_assert(offsetof(WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature, Button) == 0x000000, "Member 'WBP_SliderSelector_C_BndEvt__WBP_NamedFloatSelector_WBP_ArrowButton_Downgrade_K2Node_ComponentBoundEvent_0_CommonButtonBaseClicked__DelegateSignature::Button' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.SetSelectorIsLocked
// 0x0001 (0x0001 - 0x0000)
struct WBP_SliderSelector_C_SetSelectorIsLocked final
{
public:
	bool                                          NewLockStatus;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_SetSelectorIsLocked) == 0x000001, "Wrong alignment on WBP_SliderSelector_C_SetSelectorIsLocked");
static_assert(sizeof(WBP_SliderSelector_C_SetSelectorIsLocked) == 0x000001, "Wrong size on WBP_SliderSelector_C_SetSelectorIsLocked");
static_assert(offsetof(WBP_SliderSelector_C_SetSelectorIsLocked, NewLockStatus) == 0x000000, "Member 'WBP_SliderSelector_C_SetSelectorIsLocked::NewLockStatus' has a wrong offset!");

// Function WBP_SliderSelector.WBP_SliderSelector_C.ExecuteUbergraph_WBP_SliderSelector
// 0x0050 (0x0050 - 0x0000)
struct WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0004(0x0014)()
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button_1;               // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCommonButtonBase*                      K2Node_ComponentBoundEvent_Button;                 // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_NewLockStatus;                        // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0034(0x0014)()
	float                                         CallFunc_SetMinDesiredWidth_InMinDesiredWidth_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector) == 0x000008, "Wrong alignment on WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector");
static_assert(sizeof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector) == 0x000050, "Wrong size on WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, EntryPoint) == 0x000000, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, K2Node_MakeStruct_SlateColor) == 0x000004, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, K2Node_ComponentBoundEvent_Button_1) == 0x000018, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::K2Node_ComponentBoundEvent_Button_1' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, K2Node_Event_IsDesignTime) == 0x000020, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, K2Node_ComponentBoundEvent_Button) == 0x000028, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::K2Node_ComponentBoundEvent_Button' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, K2Node_Event_NewLockStatus) == 0x000030, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::K2Node_Event_NewLockStatus' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, CallFunc_Not_PreBool_ReturnValue) == 0x000031, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, K2Node_MakeStruct_SlateColor_1) == 0x000034, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector, CallFunc_SetMinDesiredWidth_InMinDesiredWidth_ImplicitCast) == 0x000048, "Member 'WBP_SliderSelector_C_ExecuteUbergraph_WBP_SliderSelector::CallFunc_SetMinDesiredWidth_InMinDesiredWidth_ImplicitCast' has a wrong offset!");

}

