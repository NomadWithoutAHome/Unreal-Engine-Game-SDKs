#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MassCrowd

#include "Basic.hpp"

#include "MassEntity_classes.hpp"
#include "MassCrowd_structs.hpp"
#include "MassReplication_classes.hpp"
#include "MassSpawner_classes.hpp"
#include "ZoneGraph_structs.hpp"
#include "Engine_classes.hpp"
#include "ZoneGraphDebug_classes.hpp"
#include "MassSignals_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "MassRepresentation_structs.hpp"
#include "MassRepresentation_classes.hpp"
#include "MassActors_classes.hpp"
#include "MassLOD_classes.hpp"
#include "ZoneGraphAnnotations_classes.hpp"


namespace SDK
{

// Class MassCrowd.MassCrowdClientBubbleInfo
// 0x0288 (0x0530 - 0x02A8)
class AMassCrowdClientBubbleInfo final : public AMassClientBubbleInfoBase
{
public:
	struct FMassCrowdClientBubbleSerializer       CrowdSerializer;                                   // 0x02A8(0x0288)(Net, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdClientBubbleInfo">();
	}
	static class AMassCrowdClientBubbleInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMassCrowdClientBubbleInfo>();
	}
};
static_assert(alignof(AMassCrowdClientBubbleInfo) == 0x000008, "Wrong alignment on AMassCrowdClientBubbleInfo");
static_assert(sizeof(AMassCrowdClientBubbleInfo) == 0x000530, "Wrong size on AMassCrowdClientBubbleInfo");
static_assert(offsetof(AMassCrowdClientBubbleInfo, CrowdSerializer) == 0x0002A8, "Member 'AMassCrowdClientBubbleInfo::CrowdSerializer' has a wrong offset!");

// Class MassCrowd.ZoneGraphCloseCrowdLaneTest
// 0x0080 (0x00B0 - 0x0030)
class UZoneGraphCloseCrowdLaneTest final : public UZoneLaneTest
{
public:
	struct FZoneGraphLaneLocation                 LaneLocation;                                      // 0x0030(0x0070)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	class UMassCrowdSubsystem*                    CrowdSubsystem;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECrowdLaneState                               LaneState;                                         // 0x00A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ECrowdLaneState                               PrevLaneState;                                     // 0x00A9(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphCloseCrowdLaneTest">();
	}
	static class UZoneGraphCloseCrowdLaneTest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphCloseCrowdLaneTest>();
	}
};
static_assert(alignof(UZoneGraphCloseCrowdLaneTest) == 0x000008, "Wrong alignment on UZoneGraphCloseCrowdLaneTest");
static_assert(sizeof(UZoneGraphCloseCrowdLaneTest) == 0x0000B0, "Wrong size on UZoneGraphCloseCrowdLaneTest");
static_assert(offsetof(UZoneGraphCloseCrowdLaneTest, LaneLocation) == 0x000030, "Member 'UZoneGraphCloseCrowdLaneTest::LaneLocation' has a wrong offset!");
static_assert(offsetof(UZoneGraphCloseCrowdLaneTest, CrowdSubsystem) == 0x0000A0, "Member 'UZoneGraphCloseCrowdLaneTest::CrowdSubsystem' has a wrong offset!");
static_assert(offsetof(UZoneGraphCloseCrowdLaneTest, LaneState) == 0x0000A8, "Member 'UZoneGraphCloseCrowdLaneTest::LaneState' has a wrong offset!");
static_assert(offsetof(UZoneGraphCloseCrowdLaneTest, PrevLaneState) == 0x0000A9, "Member 'UZoneGraphCloseCrowdLaneTest::PrevLaneState' has a wrong offset!");

// Class MassCrowd.MassCrowdLaneDataRenderingComponent
// 0x0000 (0x0520 - 0x0520)
class UMassCrowdLaneDataRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdLaneDataRenderingComponent">();
	}
	static class UMassCrowdLaneDataRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdLaneDataRenderingComponent>();
	}
};
static_assert(alignof(UMassCrowdLaneDataRenderingComponent) == 0x000010, "Wrong alignment on UMassCrowdLaneDataRenderingComponent");
static_assert(sizeof(UMassCrowdLaneDataRenderingComponent) == 0x000520, "Wrong size on UMassCrowdLaneDataRenderingComponent");

// Class MassCrowd.MassCrowdMemberTrait
// 0x0000 (0x0028 - 0x0028)
class UMassCrowdMemberTrait final : public UMassEntityTraitBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdMemberTrait">();
	}
	static class UMassCrowdMemberTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdMemberTrait>();
	}
};
static_assert(alignof(UMassCrowdMemberTrait) == 0x000008, "Wrong alignment on UMassCrowdMemberTrait");
static_assert(sizeof(UMassCrowdMemberTrait) == 0x000028, "Wrong size on UMassCrowdMemberTrait");

// Class MassCrowd.MassCrowdLaneTrackingSignalProcessor
// 0x0000 (0x0420 - 0x0420)
class UMassCrowdLaneTrackingSignalProcessor final : public UMassSignalProcessorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdLaneTrackingSignalProcessor">();
	}
	static class UMassCrowdLaneTrackingSignalProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdLaneTrackingSignalProcessor>();
	}
};
static_assert(alignof(UMassCrowdLaneTrackingSignalProcessor) == 0x000008, "Wrong alignment on UMassCrowdLaneTrackingSignalProcessor");
static_assert(sizeof(UMassCrowdLaneTrackingSignalProcessor) == 0x000420, "Wrong size on UMassCrowdLaneTrackingSignalProcessor");

// Class MassCrowd.MassCrowdLaneTrackingDestructor
// 0x02A8 (0x0380 - 0x00D8)
class UMassCrowdLaneTrackingDestructor final : public UMassObserverProcessor
{
public:
	uint8                                         Pad_D8[0x2A8];                                     // 0x00D8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdLaneTrackingDestructor">();
	}
	static class UMassCrowdLaneTrackingDestructor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdLaneTrackingDestructor>();
	}
};
static_assert(alignof(UMassCrowdLaneTrackingDestructor) == 0x000008, "Wrong alignment on UMassCrowdLaneTrackingDestructor");
static_assert(sizeof(UMassCrowdLaneTrackingDestructor) == 0x000380, "Wrong size on UMassCrowdLaneTrackingDestructor");

// Class MassCrowd.MassCrowdDynamicObstacleProcessor
// 0x02B0 (0x0370 - 0x00C0)
class alignas(0x10) UMassCrowdDynamicObstacleProcessor final : public UMassProcessor
{
public:
	uint8                                         Pad_C0[0x2A0];                                     // 0x00C0(0x02A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UZoneGraphAnnotationSubsystem*          ZoneGraphAnnotationSubsystem;                      // 0x0360(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_368[0x8];                                      // 0x0368(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdDynamicObstacleProcessor">();
	}
	static class UMassCrowdDynamicObstacleProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdDynamicObstacleProcessor>();
	}
};
static_assert(alignof(UMassCrowdDynamicObstacleProcessor) == 0x000010, "Wrong alignment on UMassCrowdDynamicObstacleProcessor");
static_assert(sizeof(UMassCrowdDynamicObstacleProcessor) == 0x000370, "Wrong size on UMassCrowdDynamicObstacleProcessor");
static_assert(offsetof(UMassCrowdDynamicObstacleProcessor, ZoneGraphAnnotationSubsystem) == 0x000360, "Member 'UMassCrowdDynamicObstacleProcessor::ZoneGraphAnnotationSubsystem' has a wrong offset!");

// Class MassCrowd.MassCrowdDynamicObstacleInitializer
// 0x02A8 (0x0380 - 0x00D8)
class UMassCrowdDynamicObstacleInitializer final : public UMassObserverProcessor
{
public:
	uint8                                         Pad_D8[0x2A8];                                     // 0x00D8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdDynamicObstacleInitializer">();
	}
	static class UMassCrowdDynamicObstacleInitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdDynamicObstacleInitializer>();
	}
};
static_assert(alignof(UMassCrowdDynamicObstacleInitializer) == 0x000008, "Wrong alignment on UMassCrowdDynamicObstacleInitializer");
static_assert(sizeof(UMassCrowdDynamicObstacleInitializer) == 0x000380, "Wrong size on UMassCrowdDynamicObstacleInitializer");

// Class MassCrowd.MassCrowdDynamicObstacleDeinitializer
// 0x02A8 (0x0380 - 0x00D8)
class alignas(0x10) UMassCrowdDynamicObstacleDeinitializer final : public UMassObserverProcessor
{
public:
	class UZoneGraphAnnotationSubsystem*          ZoneGraphAnnotationSubsystem;                      // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x2A0];                                     // 0x00E0(0x02A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdDynamicObstacleDeinitializer">();
	}
	static class UMassCrowdDynamicObstacleDeinitializer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdDynamicObstacleDeinitializer>();
	}
};
static_assert(alignof(UMassCrowdDynamicObstacleDeinitializer) == 0x000010, "Wrong alignment on UMassCrowdDynamicObstacleDeinitializer");
static_assert(sizeof(UMassCrowdDynamicObstacleDeinitializer) == 0x000380, "Wrong size on UMassCrowdDynamicObstacleDeinitializer");
static_assert(offsetof(UMassCrowdDynamicObstacleDeinitializer, ZoneGraphAnnotationSubsystem) == 0x0000D8, "Member 'UMassCrowdDynamicObstacleDeinitializer::ZoneGraphAnnotationSubsystem' has a wrong offset!");

// Class MassCrowd.MassCrowdReplicator
// 0x0000 (0x0028 - 0x0028)
class UMassCrowdReplicator final : public UMassReplicatorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdReplicator">();
	}
	static class UMassCrowdReplicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdReplicator>();
	}
};
static_assert(alignof(UMassCrowdReplicator) == 0x000008, "Wrong alignment on UMassCrowdReplicator");
static_assert(sizeof(UMassCrowdReplicator) == 0x000028, "Wrong size on UMassCrowdReplicator");

// Class MassCrowd.MassCrowdRepresentationActorManagement
// 0x0000 (0x0028 - 0x0028)
class UMassCrowdRepresentationActorManagement final : public UMassRepresentationActorManagement
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdRepresentationActorManagement">();
	}
	static class UMassCrowdRepresentationActorManagement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdRepresentationActorManagement>();
	}
};
static_assert(alignof(UMassCrowdRepresentationActorManagement) == 0x000008, "Wrong alignment on UMassCrowdRepresentationActorManagement");
static_assert(sizeof(UMassCrowdRepresentationActorManagement) == 0x000028, "Wrong size on UMassCrowdRepresentationActorManagement");

// Class MassCrowd.MassCrowdRepresentationSubsystem
// 0x0000 (0x00D0 - 0x00D0)
class UMassCrowdRepresentationSubsystem final : public UMassRepresentationSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdRepresentationSubsystem">();
	}
	static class UMassCrowdRepresentationSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdRepresentationSubsystem>();
	}
};
static_assert(alignof(UMassCrowdRepresentationSubsystem) == 0x000008, "Wrong alignment on UMassCrowdRepresentationSubsystem");
static_assert(sizeof(UMassCrowdRepresentationSubsystem) == 0x0000D0, "Wrong size on UMassCrowdRepresentationSubsystem");

// Class MassCrowd.MassCrowdServerRepresentationLODProcessor
// 0x22E0 (0x23A0 - 0x00C0)
class UMassCrowdServerRepresentationLODProcessor final : public UMassProcessor
{
public:
	float                                         LODDistance[0x4];                                  // 0x00C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BufferHysteresisOnDistancePercentage;              // 0x00D0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LODMaxCount[0x4];                                  // 0x00D4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E4[0x22BC];                                    // 0x00E4(0x22BC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdServerRepresentationLODProcessor">();
	}
	static class UMassCrowdServerRepresentationLODProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdServerRepresentationLODProcessor>();
	}
};
static_assert(alignof(UMassCrowdServerRepresentationLODProcessor) == 0x000008, "Wrong alignment on UMassCrowdServerRepresentationLODProcessor");
static_assert(sizeof(UMassCrowdServerRepresentationLODProcessor) == 0x0023A0, "Wrong size on UMassCrowdServerRepresentationLODProcessor");
static_assert(offsetof(UMassCrowdServerRepresentationLODProcessor, LODDistance) == 0x0000C0, "Member 'UMassCrowdServerRepresentationLODProcessor::LODDistance' has a wrong offset!");
static_assert(offsetof(UMassCrowdServerRepresentationLODProcessor, BufferHysteresisOnDistancePercentage) == 0x0000D0, "Member 'UMassCrowdServerRepresentationLODProcessor::BufferHysteresisOnDistancePercentage' has a wrong offset!");
static_assert(offsetof(UMassCrowdServerRepresentationLODProcessor, LODMaxCount) == 0x0000D4, "Member 'UMassCrowdServerRepresentationLODProcessor::LODMaxCount' has a wrong offset!");

// Class MassCrowd.MassCrowdServerRepresentationProcessor
// 0x0000 (0x0370 - 0x0370)
class UMassCrowdServerRepresentationProcessor final : public UMassRepresentationProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdServerRepresentationProcessor">();
	}
	static class UMassCrowdServerRepresentationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdServerRepresentationProcessor>();
	}
};
static_assert(alignof(UMassCrowdServerRepresentationProcessor) == 0x000008, "Wrong alignment on UMassCrowdServerRepresentationProcessor");
static_assert(sizeof(UMassCrowdServerRepresentationProcessor) == 0x000370, "Wrong size on UMassCrowdServerRepresentationProcessor");

// Class MassCrowd.MassCrowdServerRepresentationTrait
// 0x0030 (0x0058 - 0x0028)
class UMassCrowdServerRepresentationTrait final : public UMassEntityTraitBase
{
public:
	TSubclassOf<class AActor>                     TemplateActor;                                     // 0x0028(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMassRepresentationParameters          Params_0;                                          // 0x0030(0x0028)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdServerRepresentationTrait">();
	}
	static class UMassCrowdServerRepresentationTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdServerRepresentationTrait>();
	}
};
static_assert(alignof(UMassCrowdServerRepresentationTrait) == 0x000008, "Wrong alignment on UMassCrowdServerRepresentationTrait");
static_assert(sizeof(UMassCrowdServerRepresentationTrait) == 0x000058, "Wrong size on UMassCrowdServerRepresentationTrait");
static_assert(offsetof(UMassCrowdServerRepresentationTrait, TemplateActor) == 0x000028, "Member 'UMassCrowdServerRepresentationTrait::TemplateActor' has a wrong offset!");
static_assert(offsetof(UMassCrowdServerRepresentationTrait, Params_0) == 0x000030, "Member 'UMassCrowdServerRepresentationTrait::Params_0' has a wrong offset!");

// Class MassCrowd.MassCrowdSettings
// 0x0050 (0x0078 - 0x0028)
class UMassCrowdSettings final : public UMassModuleSettings
{
public:
	float                                         LaneBaseLineThickness;                             // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaneRenderZOffset;                                 // 0x002C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IntersectionLaneScaleFactor;                       // 0x0030(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaneDensityScaleFactor;                            // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 OpenedLaneColor;                                   // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ClosedLaneColor;                                   // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneGraphTag                          CrowdTag;                                          // 0x0040(0x0001)(Edit, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FZoneGraphTag                          CrossingTag;                                       // 0x0041(0x0001)(Edit, Config, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        SlotSize;                                          // 0x0044(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlotOffset;                                        // 0x0048(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayTrackingData;                              // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayStates;                                    // 0x004D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayDensities;                                 // 0x004E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F[0x1];                                       // 0x004F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ObstacleStoppingSpeedTolerance;                    // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstacleMovingDistanceTolerance;                   // 0x0054(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstacleTimeToStop;                                // 0x0058(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ObstacleEffectRadius;                              // 0x005C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveDistance;                                      // 0x0060(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveDistanceRandomDeviation;                       // 0x0064(0x0004)(Edit, ZeroConstructor, Config, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMassCrowdLaneDensityDesc>      LaneDensities;                                     // 0x0068(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdSettings">();
	}
	static class UMassCrowdSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdSettings>();
	}
};
static_assert(alignof(UMassCrowdSettings) == 0x000008, "Wrong alignment on UMassCrowdSettings");
static_assert(sizeof(UMassCrowdSettings) == 0x000078, "Wrong size on UMassCrowdSettings");
static_assert(offsetof(UMassCrowdSettings, LaneBaseLineThickness) == 0x000028, "Member 'UMassCrowdSettings::LaneBaseLineThickness' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, LaneRenderZOffset) == 0x00002C, "Member 'UMassCrowdSettings::LaneRenderZOffset' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, IntersectionLaneScaleFactor) == 0x000030, "Member 'UMassCrowdSettings::IntersectionLaneScaleFactor' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, LaneDensityScaleFactor) == 0x000034, "Member 'UMassCrowdSettings::LaneDensityScaleFactor' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, OpenedLaneColor) == 0x000038, "Member 'UMassCrowdSettings::OpenedLaneColor' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, ClosedLaneColor) == 0x00003C, "Member 'UMassCrowdSettings::ClosedLaneColor' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, CrowdTag) == 0x000040, "Member 'UMassCrowdSettings::CrowdTag' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, CrossingTag) == 0x000041, "Member 'UMassCrowdSettings::CrossingTag' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, SlotSize) == 0x000044, "Member 'UMassCrowdSettings::SlotSize' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, SlotOffset) == 0x000048, "Member 'UMassCrowdSettings::SlotOffset' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, bDisplayTrackingData) == 0x00004C, "Member 'UMassCrowdSettings::bDisplayTrackingData' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, bDisplayStates) == 0x00004D, "Member 'UMassCrowdSettings::bDisplayStates' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, bDisplayDensities) == 0x00004E, "Member 'UMassCrowdSettings::bDisplayDensities' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, ObstacleStoppingSpeedTolerance) == 0x000050, "Member 'UMassCrowdSettings::ObstacleStoppingSpeedTolerance' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, ObstacleMovingDistanceTolerance) == 0x000054, "Member 'UMassCrowdSettings::ObstacleMovingDistanceTolerance' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, ObstacleTimeToStop) == 0x000058, "Member 'UMassCrowdSettings::ObstacleTimeToStop' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, ObstacleEffectRadius) == 0x00005C, "Member 'UMassCrowdSettings::ObstacleEffectRadius' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, MoveDistance) == 0x000060, "Member 'UMassCrowdSettings::MoveDistance' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, MoveDistanceRandomDeviation) == 0x000064, "Member 'UMassCrowdSettings::MoveDistanceRandomDeviation' has a wrong offset!");
static_assert(offsetof(UMassCrowdSettings, LaneDensities) == 0x000068, "Member 'UMassCrowdSettings::LaneDensities' has a wrong offset!");

// Class MassCrowd.MassCrowdSpawnerSubsystem
// 0x0000 (0x00F0 - 0x00F0)
class UMassCrowdSpawnerSubsystem final : public UMassActorSpawnerSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdSpawnerSubsystem">();
	}
	static class UMassCrowdSpawnerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdSpawnerSubsystem>();
	}
};
static_assert(alignof(UMassCrowdSpawnerSubsystem) == 0x000008, "Wrong alignment on UMassCrowdSpawnerSubsystem");
static_assert(sizeof(UMassCrowdSpawnerSubsystem) == 0x0000F0, "Wrong size on UMassCrowdSpawnerSubsystem");

// Class MassCrowd.MassCrowdSubsystem
// 0x0040 (0x0078 - 0x0038)
class UMassCrowdSubsystem final : public UMassSubsystemBase
{
public:
	class UZoneGraphSubsystem*                    ZoneGraphSubsystem;                                // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UZoneGraphAnnotationSubsystem*          ZoneGraphAnnotationSubsystem;                      // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMassCrowdSettings*                     MassCrowdSettings;                                 // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_50[0x28];                                      // 0x0050(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdSubsystem">();
	}
	static class UMassCrowdSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdSubsystem>();
	}
};
static_assert(alignof(UMassCrowdSubsystem) == 0x000008, "Wrong alignment on UMassCrowdSubsystem");
static_assert(sizeof(UMassCrowdSubsystem) == 0x000078, "Wrong size on UMassCrowdSubsystem");
static_assert(offsetof(UMassCrowdSubsystem, ZoneGraphSubsystem) == 0x000038, "Member 'UMassCrowdSubsystem::ZoneGraphSubsystem' has a wrong offset!");
static_assert(offsetof(UMassCrowdSubsystem, ZoneGraphAnnotationSubsystem) == 0x000040, "Member 'UMassCrowdSubsystem::ZoneGraphAnnotationSubsystem' has a wrong offset!");
static_assert(offsetof(UMassCrowdSubsystem, MassCrowdSettings) == 0x000048, "Member 'UMassCrowdSubsystem::MassCrowdSettings' has a wrong offset!");

// Class MassCrowd.MassCrowdVisualizationLODProcessor
// 0x0000 (0x0B60 - 0x0B60)
class UMassCrowdVisualizationLODProcessor final : public UMassVisualizationLODProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdVisualizationLODProcessor">();
	}
	static class UMassCrowdVisualizationLODProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdVisualizationLODProcessor>();
	}
};
static_assert(alignof(UMassCrowdVisualizationLODProcessor) == 0x000010, "Wrong alignment on UMassCrowdVisualizationLODProcessor");
static_assert(sizeof(UMassCrowdVisualizationLODProcessor) == 0x000B60, "Wrong size on UMassCrowdVisualizationLODProcessor");

// Class MassCrowd.MassCrowdLODCollectorProcessor
// 0x0000 (0x0B60 - 0x0B60)
class UMassCrowdLODCollectorProcessor final : public UMassLODCollectorProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdLODCollectorProcessor">();
	}
	static class UMassCrowdLODCollectorProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdLODCollectorProcessor>();
	}
};
static_assert(alignof(UMassCrowdLODCollectorProcessor) == 0x000008, "Wrong alignment on UMassCrowdLODCollectorProcessor");
static_assert(sizeof(UMassCrowdLODCollectorProcessor) == 0x000B60, "Wrong size on UMassCrowdLODCollectorProcessor");

// Class MassCrowd.MassCrowdVisualizationProcessor
// 0x0000 (0x0370 - 0x0370)
class UMassCrowdVisualizationProcessor final : public UMassVisualizationProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdVisualizationProcessor">();
	}
	static class UMassCrowdVisualizationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdVisualizationProcessor>();
	}
};
static_assert(alignof(UMassCrowdVisualizationProcessor) == 0x000008, "Wrong alignment on UMassCrowdVisualizationProcessor");
static_assert(sizeof(UMassCrowdVisualizationProcessor) == 0x000370, "Wrong size on UMassCrowdVisualizationProcessor");

// Class MassCrowd.MassDebugCrowdVisualizationProcessor
// 0x02B0 (0x0370 - 0x00C0)
class alignas(0x10) UMassDebugCrowdVisualizationProcessor final : public UMassProcessor
{
public:
	class UWorld*                                 World;                                             // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x2A8];                                     // 0x00C8(0x02A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassDebugCrowdVisualizationProcessor">();
	}
	static class UMassDebugCrowdVisualizationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassDebugCrowdVisualizationProcessor>();
	}
};
static_assert(alignof(UMassDebugCrowdVisualizationProcessor) == 0x000010, "Wrong alignment on UMassDebugCrowdVisualizationProcessor");
static_assert(sizeof(UMassDebugCrowdVisualizationProcessor) == 0x000370, "Wrong size on UMassDebugCrowdVisualizationProcessor");
static_assert(offsetof(UMassDebugCrowdVisualizationProcessor, World) == 0x0000C0, "Member 'UMassDebugCrowdVisualizationProcessor::World' has a wrong offset!");

// Class MassCrowd.MassCrowdVisualizationTrait
// 0x0000 (0x0140 - 0x0140)
class UMassCrowdVisualizationTrait final : public UMassVisualizationTrait
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MassCrowdVisualizationTrait">();
	}
	static class UMassCrowdVisualizationTrait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMassCrowdVisualizationTrait>();
	}
};
static_assert(alignof(UMassCrowdVisualizationTrait) == 0x000010, "Wrong alignment on UMassCrowdVisualizationTrait");
static_assert(sizeof(UMassCrowdVisualizationTrait) == 0x000140, "Wrong size on UMassCrowdVisualizationTrait");

// Class MassCrowd.ZoneGraphCrowdLaneAnnotations
// 0x0020 (0x05B0 - 0x0590)
class UZoneGraphCrowdLaneAnnotations final : public UZoneGraphAnnotationComponent
{
public:
	struct FZoneGraphTag                          CloseLaneTag;                                      // 0x0588(0x0001)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FZoneGraphTag                          WaitingLaneTag;                                    // 0x0589(0x0001)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisplayTags;                                      // 0x058A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58B[0x15];                                     // 0x058B(0x0015)(Fixing Size After Last Property [ Dumper-7 ])
	class UMassCrowdSubsystem*                    CrowdSubsystem;                                    // 0x05A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ZoneGraphCrowdLaneAnnotations">();
	}
	static class UZoneGraphCrowdLaneAnnotations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UZoneGraphCrowdLaneAnnotations>();
	}
};
static_assert(alignof(UZoneGraphCrowdLaneAnnotations) == 0x000010, "Wrong alignment on UZoneGraphCrowdLaneAnnotations");
static_assert(sizeof(UZoneGraphCrowdLaneAnnotations) == 0x0005B0, "Wrong size on UZoneGraphCrowdLaneAnnotations");
static_assert(offsetof(UZoneGraphCrowdLaneAnnotations, CloseLaneTag) == 0x000588, "Member 'UZoneGraphCrowdLaneAnnotations::CloseLaneTag' has a wrong offset!");
static_assert(offsetof(UZoneGraphCrowdLaneAnnotations, WaitingLaneTag) == 0x000589, "Member 'UZoneGraphCrowdLaneAnnotations::WaitingLaneTag' has a wrong offset!");
static_assert(offsetof(UZoneGraphCrowdLaneAnnotations, bDisplayTags) == 0x00058A, "Member 'UZoneGraphCrowdLaneAnnotations::bDisplayTags' has a wrong offset!");
static_assert(offsetof(UZoneGraphCrowdLaneAnnotations, CrowdSubsystem) == 0x0005A0, "Member 'UZoneGraphCrowdLaneAnnotations::CrowdSubsystem' has a wrong offset!");

}

