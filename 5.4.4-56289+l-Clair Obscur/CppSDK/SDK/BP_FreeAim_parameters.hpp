#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeAim

#include "Basic.hpp"

#include "E_jRPG_CharacterWorldCapability_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "S_jRPG_Character_World_Movement_Data_structs.hpp"
#include "GameplayCameras_structs.hpp"
#include "Engine_structs.hpp"
#include "S_InputContextParameters_structs.hpp"


namespace SDK::Params
{

// Function BP_FreeAim.BP_FreeAim_C.ComputeRaycastParameters
// 0x00E0 (0x00E0 - 0x0000)
struct BP_FreeAim_C_ComputeRaycastParameters final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Direction;                                         // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_wildcard_Variable;                            // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Temp_wildcard_Variable_1;                          // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_ComputeRaycastParameters) == 0x000008, "Wrong alignment on BP_FreeAim_C_ComputeRaycastParameters");
static_assert(sizeof(BP_FreeAim_C_ComputeRaycastParameters) == 0x0000E0, "Wrong size on BP_FreeAim_C_ComputeRaycastParameters");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, Start) == 0x000000, "Member 'BP_FreeAim_C_ComputeRaycastParameters::Start' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, End) == 0x000018, "Member 'BP_FreeAim_C_ComputeRaycastParameters::End' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, Direction) == 0x000030, "Member 'BP_FreeAim_C_ComputeRaycastParameters::Direction' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, Temp_wildcard_Variable) == 0x000048, "Member 'BP_FreeAim_C_ComputeRaycastParameters::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, Temp_wildcard_Variable_1) == 0x000060, "Member 'BP_FreeAim_C_ComputeRaycastParameters::Temp_wildcard_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000078, "Member 'BP_FreeAim_C_ComputeRaycastParameters::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000080, "Member 'BP_FreeAim_C_ComputeRaycastParameters::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, CallFunc_Add_VectorVector_ReturnValue) == 0x000098, "Member 'BP_FreeAim_C_ComputeRaycastParameters::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000B0, "Member 'BP_FreeAim_C_ComputeRaycastParameters::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ComputeRaycastParameters, CallFunc_GetForwardVector_ReturnValue) == 0x0000C8, "Member 'BP_FreeAim_C_ComputeRaycastParameters::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.DetectAndUpdateCharacters
// 0x05B8 (0x05B8 - 0x0000)
struct BP_FreeAim_C_DetectAndUpdateCharacters final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ACharacter*>                     local_NewDetectedCharacters;                       // 0x0030(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACharacter*>                     Temp_wildcard_Removed_Variable;                    // 0x0060(0x0010)(ConstParm, ReferenceParm)
	TArray<class ACharacter*>                     Temp_wildcard_Added_Variable;                      // 0x0070(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Array_Get_Item;                           // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x3];                                       // 0x0091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Temp_int_Removed_Indices_Variable;                 // 0x0098(0x0010)(ReferenceParm)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 Temp_int_Added_Indices_Variable;                   // 0x00B0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             CallFunc_Array_Get_Item_1;                         // 0x00C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00D0(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FHitResult>                     CallFunc_LineTraceMulti_OutHits;                   // 0x00E0(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceMulti_ReturnValue;               // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x00FC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FD[0x3];                                       // 0x00FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_Array_Get_Item_2;                         // 0x0108(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0201(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0228(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x0240(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0270(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0278(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0280(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0288(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x0290(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A4[0x4];                                      // 0x02A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x02C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACharacter*                             K2Node_DynamicCast_AsCharacter;                    // 0x02D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x02E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x3];                                      // 0x02E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable_1;                               // 0x02E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Array_Get_Item_3;                         // 0x02F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_ObjectToText_ReturnValue;            // 0x0300(0x0010)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0310(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_311[0x7];                                      // 0x0311(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0318(0x0048)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0360(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0364(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0368(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0370(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0378(0x0048)(HasGetValueTypeHash)
	class ACharacter*                             CallFunc_Array_Get_Item_4;                         // 0x03C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3CC[0x4];                                      // 0x03CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_ObjectToText_ReturnValue_1;          // 0x03D0(0x0010)()
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x03E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_2;            // 0x03E8(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0430(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_431[0x3];                                      // 0x0431(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_LastIndex_ReturnValue_1;            // 0x0434(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue;              // 0x0438(0x0010)()
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_3;            // 0x0450(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0498(0x0010)(ReferenceParm)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x04A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A9[0x7];                                      // 0x04A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x04B0(0x0010)()
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x04C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C1[0x3];                                      // 0x04C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x04C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_BoolToText_ReturnValue_1;            // 0x04C8(0x0010)()
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue_1;            // 0x04D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_4;            // 0x04E0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_5;            // 0x0528(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0570(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0580(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0590(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x05A0(0x0010)()
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x05B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_DetectAndUpdateCharacters) == 0x000008, "Wrong alignment on BP_FreeAim_C_DetectAndUpdateCharacters");
static_assert(sizeof(BP_FreeAim_C_DetectAndUpdateCharacters) == 0x0005B8, "Wrong size on BP_FreeAim_C_DetectAndUpdateCharacters");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Start) == 0x000000, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Start' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, End) == 0x000018, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::End' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, local_NewDetectedCharacters) == 0x000030, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::local_NewDetectedCharacters' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Loop_Counter_Variable) == 0x000040, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Variable) == 0x000044, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Add_IntInt_ReturnValue_1) == 0x00004C, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Loop_Counter_Variable_1) == 0x000050, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Add_IntInt_ReturnValue_2) == 0x000054, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Array_Index_Variable) == 0x000058, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_wildcard_Removed_Variable) == 0x000060, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_wildcard_Removed_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_wildcard_Added_Variable) == 0x000070, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_wildcard_Added_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Length_ReturnValue) == 0x000080, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Get_Item) == 0x000088, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Less_IntInt_ReturnValue) == 0x000090, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Length_ReturnValue_1) == 0x000094, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Removed_Indices_Variable) == 0x000098, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Removed_Indices_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Less_IntInt_ReturnValue_1) == 0x0000A8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Added_Indices_Variable) == 0x0000B0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Added_Indices_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Add_ReturnValue) == 0x0000C0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Array_Index_Variable_1) == 0x0000C4, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Get_Item_1) == 0x0000C8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_object_Variable) == 0x0000D0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_LineTraceMulti_OutHits) == 0x0000E0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_LineTraceMulti_OutHits' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_LineTraceMulti_ReturnValue) == 0x0000F0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_LineTraceMulti_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Length_ReturnValue_2) == 0x0000F4, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Loop_Counter_Variable_2) == 0x0000F8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Less_IntInt_ReturnValue_2) == 0x0000FC, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Add_IntInt_ReturnValue_3) == 0x000100, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Array_Index_Variable_2) == 0x000104, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Get_Item_2) == 0x000108, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_bBlockingHit) == 0x000200, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_bInitialOverlap) == 0x000201, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_Time) == 0x000204, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_Distance) == 0x000208, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_Location) == 0x000210, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_ImpactPoint) == 0x000228, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_Normal) == 0x000240, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_ImpactNormal) == 0x000258, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_PhysMat) == 0x000270, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_HitActor) == 0x000278, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_HitComponent) == 0x000280, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_HitBoneName) == 0x000288, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_BoneName) == 0x000290, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_HitItem) == 0x000298, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_ElementIndex) == 0x00029C, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_FaceIndex) == 0x0002A0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_TraceStart) == 0x0002A8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_BreakHitResult_TraceEnd) == 0x0002C0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_DynamicCast_AsCharacter) == 0x0002D8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_DynamicCast_AsCharacter' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_DynamicCast_bSuccess) == 0x0002E0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, Temp_int_Variable_1) == 0x0002E4, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Add_ReturnValue_1) == 0x0002E8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Get_Item_3) == 0x0002F0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_LastIndex_ReturnValue) == 0x0002F8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Conv_ObjectToText_ReturnValue) == 0x000300, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Conv_ObjectToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000310, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeStruct_FormatArgumentData) == 0x000318, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Add_ReturnValue_2) == 0x000360, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Length_ReturnValue_3) == 0x000364, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000368, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Add_IntInt_ReturnValue_4) == 0x000370, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeStruct_FormatArgumentData_1) == 0x000378, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Get_Item_4) == 0x0003C0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Add_ReturnValue_3) == 0x0003C8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Conv_ObjectToText_ReturnValue_1) == 0x0003D0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Conv_ObjectToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Add_ReturnValue_4) == 0x0003E0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeStruct_FormatArgumentData_2) == 0x0003E8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeStruct_FormatArgumentData_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Contains_ReturnValue) == 0x000430, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_LastIndex_ReturnValue_1) == 0x000434, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_LastIndex_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Conv_BoolToText_ReturnValue) == 0x000438, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Conv_BoolToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000448, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeStruct_FormatArgumentData_3) == 0x000450, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeStruct_FormatArgumentData_3' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeArray_Array) == 0x000498, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Not_PreBool_ReturnValue) == 0x0004A8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Format_ReturnValue) == 0x0004B0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Contains_ReturnValue_1) == 0x0004C0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Array_Length_ReturnValue_4) == 0x0004C4, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Conv_BoolToText_ReturnValue_1) == 0x0004C8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Conv_BoolToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Conv_IntToInt64_ReturnValue_1) == 0x0004D8, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Conv_IntToInt64_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeStruct_FormatArgumentData_4) == 0x0004E0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeStruct_FormatArgumentData_4' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeStruct_FormatArgumentData_5) == 0x000528, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeStruct_FormatArgumentData_5' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeArray_Array_1) == 0x000570, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, K2Node_MakeArray_Array_2) == 0x000580, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Format_ReturnValue_1) == 0x000590, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Format_ReturnValue_2) == 0x0005A0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_DetectAndUpdateCharacters, CallFunc_Not_PreBool_ReturnValue_1) == 0x0005B0, "Member 'BP_FreeAim_C_DetectAndUpdateCharacters::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.EnterFreeAim
// 0x0220 (0x0220 - 0x0000)
struct BP_FreeAim_C_EnterFreeAim final
{
public:
	class ABP_jRPG_Controller_World_C*            CallFunc_GetOwnerController_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_CrossHair_C*                       CallFunc_GetCrosshair_Crosshair;                   // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<E_jRPG_CharacterWorldCapability, bool>   K2Node_MakeMap_Map;                                // 0x0010(0x0050)()
	class ABP_jRPG_Controller_World_C*            CallFunc_GetOwnerController_ReturnValue_1;         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_AudioCharacterManager_C> K2Node_DynamicCast_AsBPI_Audio_Character_Manager; // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USpringArmComponent*                    CallFunc_GetSpringArmFreeAimCamera_SpringArm;      // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x00D0(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x01D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_K2_SetActorRotation_ReturnValue;          // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Character_World_Movement_Data  K2Node_MakeStruct_S_jRPG_Character_World_Movement_Data; // 0x01F8(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_InputContextParameters              K2Node_MakeStruct_S_InputContextParameters;        // 0x0210(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_EnterFreeAim) == 0x000008, "Wrong alignment on BP_FreeAim_C_EnterFreeAim");
static_assert(sizeof(BP_FreeAim_C_EnterFreeAim) == 0x000220, "Wrong size on BP_FreeAim_C_EnterFreeAim");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_GetOwnerController_ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_GetOwnerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_GetCrosshair_Crosshair) == 0x000008, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_GetCrosshair_Crosshair' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, K2Node_MakeMap_Map) == 0x000010, "Member 'BP_FreeAim_C_EnterFreeAim::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_GetOwnerController_ReturnValue_1) == 0x000060, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_GetOwnerController_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000068, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_GetControlRotation_ReturnValue) == 0x000070, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_BreakRotator_Roll) == 0x000088, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_BreakRotator_Pitch) == 0x00008C, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_BreakRotator_Yaw) == 0x000090, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, K2Node_DynamicCast_AsBPI_Audio_Character_Manager) == 0x000098, "Member 'BP_FreeAim_C_EnterFreeAim::K2Node_DynamicCast_AsBPI_Audio_Character_Manager' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'BP_FreeAim_C_EnterFreeAim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_GetSpringArmFreeAimCamera_SpringArm) == 0x0000B0, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_GetSpringArmFreeAimCamera_SpringArm' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000B8, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x0000D0, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_BreakRotator_Roll_1) == 0x0001C8, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_BreakRotator_Pitch_1) == 0x0001CC, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_BreakRotator_Yaw_1) == 0x0001D0, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_MakeRotator_ReturnValue) == 0x0001D8, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_K2_SetActorRotation_ReturnValue) == 0x0001F0, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_K2_SetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, K2Node_MakeStruct_S_jRPG_Character_World_Movement_Data) == 0x0001F8, "Member 'BP_FreeAim_C_EnterFreeAim::K2Node_MakeStruct_S_jRPG_Character_World_Movement_Data' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, CallFunc_Not_PreBool_ReturnValue) == 0x000208, "Member 'BP_FreeAim_C_EnterFreeAim::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_EnterFreeAim, K2Node_MakeStruct_S_InputContextParameters) == 0x000210, "Member 'BP_FreeAim_C_EnterFreeAim::K2Node_MakeStruct_S_InputContextParameters' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.ExecuteUbergraph_BP_FreeAim
// 0x0148 (0x0148 - 0x0000)
struct BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FreeAimCamera_C*                    CallFunc_GetFreeAimCameraActor_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetControlRotation_ReturnValue;           // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetWorldRotation_SweepHitResult;       // 0x0048(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	double                                        CallFunc_UpdateFreeAim_DeltaSeconds_ImplicitCast;  // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim) == 0x000008, "Wrong alignment on BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim");
static_assert(sizeof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim) == 0x000148, "Wrong size on BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, EntryPoint) == 0x000000, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_GetFreeAimCameraActor_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_GetFreeAimCameraActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_GetPlayerController_ReturnValue) == 0x000010, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_GetControlRotation_ReturnValue) == 0x000020, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_GetControlRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, K2Node_Event_DeltaSeconds) == 0x000038, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000040, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_K2_SetWorldRotation_SweepHitResult) == 0x000048, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_K2_SetWorldRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim, CallFunc_UpdateFreeAim_DeltaSeconds_ImplicitCast) == 0x000140, "Member 'BP_FreeAim_C_ExecuteUbergraph_BP_FreeAim::CallFunc_UpdateFreeAim_DeltaSeconds_ImplicitCast' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.ExitFreeAim
// 0x0098 (0x0098 - 0x0000)
struct BP_FreeAim_C_ExitFreeAim final
{
public:
	class UWBP_CrossHair_C*                       CallFunc_GetCrosshair_Crosshair;                   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_AudioCharacterManager_C> K2Node_DynamicCast_AsBPI_Audio_Character_Manager; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FreeAimCamera_C*                    K2Node_DynamicCast_AsBP_Free_Aim_Camera;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_jRPG_CharacterWorldCapability, bool>   K2Node_MakeMap_Map;                                // 0x0038(0x0050)()
	struct FS_jRPG_Character_World_Movement_Data  K2Node_MakeStruct_S_jRPG_Character_World_Movement_Data; // 0x0088(0x0010)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_ExitFreeAim) == 0x000008, "Wrong alignment on BP_FreeAim_C_ExitFreeAim");
static_assert(sizeof(BP_FreeAim_C_ExitFreeAim) == 0x000098, "Wrong size on BP_FreeAim_C_ExitFreeAim");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, CallFunc_GetCrosshair_Crosshair) == 0x000000, "Member 'BP_FreeAim_C_ExitFreeAim::CallFunc_GetCrosshair_Crosshair' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_ExitFreeAim::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, K2Node_DynamicCast_AsBPI_Audio_Character_Manager) == 0x000010, "Member 'BP_FreeAim_C_ExitFreeAim::K2Node_DynamicCast_AsBPI_Audio_Character_Manager' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_FreeAim_C_ExitFreeAim::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, K2Node_DynamicCast_AsBP_Free_Aim_Camera) == 0x000028, "Member 'BP_FreeAim_C_ExitFreeAim::K2Node_DynamicCast_AsBP_Free_Aim_Camera' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'BP_FreeAim_C_ExitFreeAim::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, K2Node_MakeMap_Map) == 0x000038, "Member 'BP_FreeAim_C_ExitFreeAim::K2Node_MakeMap_Map' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ExitFreeAim, K2Node_MakeStruct_S_jRPG_Character_World_Movement_Data) == 0x000088, "Member 'BP_FreeAim_C_ExitFreeAim::K2Node_MakeStruct_S_jRPG_Character_World_Movement_Data' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.GetCrosshair
// 0x0010 (0x0010 - 0x0000)
struct BP_FreeAim_C_GetCrosshair final
{
public:
	class UWBP_CrossHair_C*                       Crosshair;                                         // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            CallFunc_GetOwnerController_ReturnValue;           // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_GetCrosshair) == 0x000008, "Wrong alignment on BP_FreeAim_C_GetCrosshair");
static_assert(sizeof(BP_FreeAim_C_GetCrosshair) == 0x000010, "Wrong size on BP_FreeAim_C_GetCrosshair");
static_assert(offsetof(BP_FreeAim_C_GetCrosshair, Crosshair) == 0x000000, "Member 'BP_FreeAim_C_GetCrosshair::Crosshair' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetCrosshair, CallFunc_GetOwnerController_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_GetCrosshair::CallFunc_GetOwnerController_ReturnValue' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.GetFreeAimCameraActor
// 0x0020 (0x0020 - 0x0000)
struct BP_FreeAim_C_GetFreeAimCameraActor final
{
public:
	class ABP_FreeAimCamera_C*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FreeAimCamera_C*                    K2Node_DynamicCast_AsBP_Free_Aim_Camera;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_GetFreeAimCameraActor) == 0x000008, "Wrong alignment on BP_FreeAim_C_GetFreeAimCameraActor");
static_assert(sizeof(BP_FreeAim_C_GetFreeAimCameraActor) == 0x000020, "Wrong size on BP_FreeAim_C_GetFreeAimCameraActor");
static_assert(offsetof(BP_FreeAim_C_GetFreeAimCameraActor, ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_GetFreeAimCameraActor::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetFreeAimCameraActor, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_GetFreeAimCameraActor::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetFreeAimCameraActor, K2Node_DynamicCast_AsBP_Free_Aim_Camera) == 0x000010, "Member 'BP_FreeAim_C_GetFreeAimCameraActor::K2Node_DynamicCast_AsBP_Free_Aim_Camera' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetFreeAimCameraActor, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_FreeAim_C_GetFreeAimCameraActor::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.GetOwnerAsCharacterWorld
// 0x0020 (0x0020 - 0x0000)
struct BP_FreeAim_C_GetOwnerAsCharacterWorld final
{
public:
	class ABP_jRPG_Character_World_C*             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             K2Node_DynamicCast_AsBP_J_RPG_Character_World;     // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_GetOwnerAsCharacterWorld) == 0x000008, "Wrong alignment on BP_FreeAim_C_GetOwnerAsCharacterWorld");
static_assert(sizeof(BP_FreeAim_C_GetOwnerAsCharacterWorld) == 0x000020, "Wrong size on BP_FreeAim_C_GetOwnerAsCharacterWorld");
static_assert(offsetof(BP_FreeAim_C_GetOwnerAsCharacterWorld, ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_GetOwnerAsCharacterWorld::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerAsCharacterWorld, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_GetOwnerAsCharacterWorld::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerAsCharacterWorld, K2Node_DynamicCast_AsBP_J_RPG_Character_World) == 0x000010, "Member 'BP_FreeAim_C_GetOwnerAsCharacterWorld::K2Node_DynamicCast_AsBP_J_RPG_Character_World' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerAsCharacterWorld, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_FreeAim_C_GetOwnerAsCharacterWorld::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.GetOwnerController
// 0x0028 (0x0028 - 0x0000)
struct BP_FreeAim_C_GetOwnerController final
{
public:
	class ABP_jRPG_Controller_World_C*            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            CallFunc_GetController_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_GetOwnerController) == 0x000008, "Wrong alignment on BP_FreeAim_C_GetOwnerController");
static_assert(sizeof(BP_FreeAim_C_GetOwnerController) == 0x000028, "Wrong size on BP_FreeAim_C_GetOwnerController");
static_assert(offsetof(BP_FreeAim_C_GetOwnerController, ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_GetOwnerController::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerController, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_GetOwnerController::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerController, CallFunc_GetController_ReturnValue) == 0x000010, "Member 'BP_FreeAim_C_GetOwnerController::CallFunc_GetController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerController, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000018, "Member 'BP_FreeAim_C_GetOwnerController::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_GetOwnerController, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_FreeAim_C_GetOwnerController::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.IsInFreeAim
// 0x0001 (0x0001 - 0x0000)
struct BP_FreeAim_C_IsInFreeAim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_IsInFreeAim) == 0x000001, "Wrong alignment on BP_FreeAim_C_IsInFreeAim");
static_assert(sizeof(BP_FreeAim_C_IsInFreeAim) == 0x000001, "Wrong size on BP_FreeAim_C_IsInFreeAim");
static_assert(offsetof(BP_FreeAim_C_IsInFreeAim, ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_IsInFreeAim::ReturnValue' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.PerformFreeAimRaycast
// 0x0238 (0x0238 - 0x0000)
struct BP_FreeAim_C_PerformFreeAimRaycast final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasHit;                                            // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HitDistance;                                       // 0x0034(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitLocation;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 HitActor;                                          // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0058(0x0010)(ConstParm, ReferenceParm)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0068(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x0161(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x0162(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_163[0x1];                                      // 0x0163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x01E0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x01E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_BoneName;                  // 0x01F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_204[0x4];                                      // 0x0204(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0220(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_PerformFreeAimRaycast) == 0x000008, "Wrong alignment on BP_FreeAim_C_PerformFreeAimRaycast");
static_assert(sizeof(BP_FreeAim_C_PerformFreeAimRaycast) == 0x000238, "Wrong size on BP_FreeAim_C_PerformFreeAimRaycast");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, Start) == 0x000000, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::Start' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, End) == 0x000018, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::End' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, HasHit) == 0x000030, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::HasHit' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, HitDistance) == 0x000034, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::HitDistance' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, HitLocation) == 0x000038, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::HitLocation' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, HitActor) == 0x000050, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::HitActor' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, Temp_object_Variable) == 0x000058, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_LineTraceSingle_OutHit) == 0x000068, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_LineTraceSingle_ReturnValue) == 0x000160, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_bBlockingHit) == 0x000161, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_bInitialOverlap) == 0x000162, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_Time) == 0x000164, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_Distance) == 0x000168, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_Location) == 0x000170, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_ImpactPoint) == 0x000188, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_Normal) == 0x0001A0, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_ImpactNormal) == 0x0001B8, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_PhysMat) == 0x0001D0, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_HitActor) == 0x0001D8, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_HitComponent) == 0x0001E0, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_HitBoneName) == 0x0001E8, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_BoneName) == 0x0001F0, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_BoneName' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_HitItem) == 0x0001F8, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_ElementIndex) == 0x0001FC, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_FaceIndex) == 0x000200, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_TraceStart) == 0x000208, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformFreeAimRaycast, CallFunc_BreakHitResult_TraceEnd) == 0x000220, "Member 'BP_FreeAim_C_PerformFreeAimRaycast::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.PerformShoot
// 0x0040 (0x0040 - 0x0000)
struct BP_FreeAim_C_PerformShoot final
{
public:
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_FreeAimTarget_World_C> K2Node_DynamicCast_AsBPI_Free_Aim_Target_World; // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFreeAimTargetDisabled_IsDisabled;       // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_FreeAimTarget_World_C> K2Node_DynamicCast_AsBPI_Free_Aim_Target_World_1; // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_PerformShoot) == 0x000008, "Wrong alignment on BP_FreeAim_C_PerformShoot");
static_assert(sizeof(BP_FreeAim_C_PerformShoot) == 0x000040, "Wrong size on BP_FreeAim_C_PerformShoot");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_PerformShoot::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_PerformShoot::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, K2Node_DynamicCast_AsBPI_Free_Aim_Target_World) == 0x000010, "Member 'BP_FreeAim_C_PerformShoot::K2Node_DynamicCast_AsBPI_Free_Aim_Target_World' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'BP_FreeAim_C_PerformShoot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, CallFunc_IsFreeAimTargetDisabled_IsDisabled) == 0x000021, "Member 'BP_FreeAim_C_PerformShoot::CallFunc_IsFreeAimTargetDisabled_IsDisabled' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, K2Node_DynamicCast_AsBPI_Free_Aim_Target_World_1) == 0x000028, "Member 'BP_FreeAim_C_PerformShoot::K2Node_DynamicCast_AsBPI_Free_Aim_Target_World_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShoot, K2Node_DynamicCast_bSuccess_1) == 0x000038, "Member 'BP_FreeAim_C_PerformShoot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.PerformShootProjectileFeedback
// 0x0088 (0x0088 - 0x0000)
struct BP_FreeAim_C_PerformShootProjectileFeedback final
{
public:
	class ABP_jRPG_Controller_World_C*            CallFunc_GetOwnerController_ReturnValue;           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FCameraAnimationParams                 K2Node_MakeStruct_CameraAnimationParams;           // 0x0008(0x0048)(NoDestructor)
	class UGameplayCamerasSubsystem*              CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FCameraAnimationHandle                 CallFunc_PlayCameraAnimation_ReturnValue;          // 0x0060(0x0004)(NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_PlayAnimMontage_ReturnValue;              // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_PerformShootProjectileFeedback) == 0x000008, "Wrong alignment on BP_FreeAim_C_PerformShootProjectileFeedback");
static_assert(sizeof(BP_FreeAim_C_PerformShootProjectileFeedback) == 0x000088, "Wrong size on BP_FreeAim_C_PerformShootProjectileFeedback");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, CallFunc_GetOwnerController_ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::CallFunc_GetOwnerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, K2Node_MakeStruct_CameraAnimationParams) == 0x000008, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::K2Node_MakeStruct_CameraAnimationParams' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000050, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000058, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, CallFunc_PlayCameraAnimation_ReturnValue) == 0x000060, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::CallFunc_PlayCameraAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_PerformShootProjectileFeedback, CallFunc_PlayAnimMontage_ReturnValue) == 0x000080, "Member 'BP_FreeAim_C_PerformShootProjectileFeedback::CallFunc_PlayAnimMontage_ReturnValue' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_FreeAim_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_FreeAim_C_ReceiveTick");
static_assert(sizeof(BP_FreeAim_C_ReceiveTick) == 0x000004, "Wrong size on BP_FreeAim_C_ReceiveTick");
static_assert(offsetof(BP_FreeAim_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_FreeAim_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.SpawnProjectile
// 0x0140 (0x0140 - 0x0000)
struct BP_FreeAim_C_SpawnProjectile final
{
public:
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue_1;   // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetArmRingMaterialInstance_ArmRingMaterialInstance; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_K2_GetVectorParameterValue_ReturnValue;   // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Temp_wildcard_Variable;                            // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FTransform                             CallFunc_MakeTransform_ReturnValue;                // 0x0070(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_Conv_VectorToRotator_ReturnValue;         // 0x00D0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class AActor*                                 CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue; // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_WorldSkill_Syph_Arrow_C*            CallFunc_FinishSpawningActor_ReturnValue;          // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_FindLookAtRotation_ReturnValue;           // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FLinearColor                           CallFunc_Conv_DoubleToLinearColor_ReturnValue;     // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Divide_LinearColorLinearColor_ReturnValue; // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_SpawnProjectile) == 0x000010, "Wrong alignment on BP_FreeAim_C_SpawnProjectile");
static_assert(sizeof(BP_FreeAim_C_SpawnProjectile) == 0x000140, "Wrong size on BP_FreeAim_C_SpawnProjectile");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_GetOwnerAsCharacterWorld_ReturnValue_1) == 0x000008, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_GetOwnerAsCharacterWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_GetArmRingMaterialInstance_ArmRingMaterialInstance) == 0x000010, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_GetArmRingMaterialInstance_ArmRingMaterialInstance' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_K2_GetVectorParameterValue_ReturnValue) == 0x000030, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_K2_GetVectorParameterValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x000040, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, Temp_wildcard_Variable) == 0x000058, "Member 'BP_FreeAim_C_SpawnProjectile::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_MakeTransform_ReturnValue) == 0x000070, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_MakeTransform_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_Conv_VectorToRotator_ReturnValue) == 0x0000D0, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_Conv_VectorToRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue) == 0x0000E8, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_BeginDeferredActorSpawnFromClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_FinishSpawningActor_ReturnValue) == 0x0000F0, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_FinishSpawningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_Vector_Distance_ReturnValue) == 0x0000F8, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_FindLookAtRotation_ReturnValue) == 0x000100, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_FindLookAtRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_Conv_DoubleToLinearColor_ReturnValue) == 0x000118, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_Conv_DoubleToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_SpawnProjectile, CallFunc_Divide_LinearColorLinearColor_ReturnValue) == 0x000128, "Member 'BP_FreeAim_C_SpawnProjectile::CallFunc_Divide_LinearColorLinearColor_ReturnValue' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.ToggleCamera
// 0x0038 (0x0038 - 0x0000)
struct BP_FreeAim_C_ToggleCamera final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      CallFunc_GetPlayerController_ReturnValue;          // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Controller_World_C*            K2Node_DynamicCast_AsBP_J_RPG_Controller_World;    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_FreeAimCamera_C*                    CallFunc_GetFreeAimCameraActor_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_FreeAimCamera_C*                    CallFunc_GetFreeAimCameraActor_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_ToggleCamera) == 0x000008, "Wrong alignment on BP_FreeAim_C_ToggleCamera");
static_assert(sizeof(BP_FreeAim_C_ToggleCamera) == 0x000038, "Wrong size on BP_FreeAim_C_ToggleCamera");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, Enable) == 0x000000, "Member 'BP_FreeAim_C_ToggleCamera::Enable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, CallFunc_GetPlayerController_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_ToggleCamera::CallFunc_GetPlayerController_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, K2Node_DynamicCast_AsBP_J_RPG_Controller_World) == 0x000010, "Member 'BP_FreeAim_C_ToggleCamera::K2Node_DynamicCast_AsBP_J_RPG_Controller_World' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_FreeAim_C_ToggleCamera::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, CallFunc_GetFreeAimCameraActor_ReturnValue) == 0x000020, "Member 'BP_FreeAim_C_ToggleCamera::CallFunc_GetFreeAimCameraActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, CallFunc_GetOwner_ReturnValue) == 0x000028, "Member 'BP_FreeAim_C_ToggleCamera::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_ToggleCamera, CallFunc_GetFreeAimCameraActor_ReturnValue_1) == 0x000030, "Member 'BP_FreeAim_C_ToggleCamera::CallFunc_GetFreeAimCameraActor_ReturnValue_1' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.UpdateFreeAim
// 0x0088 (0x0088 - 0x0000)
struct BP_FreeAim_C_UpdateFreeAim final
{
public:
	double                                        DeltaSeconds;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRaycastParameters_Start;           // 0x0008(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRaycastParameters_End;             // 0x0020(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ComputeRaycastParameters_Direction;       // 0x0038(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_PerformFreeAimRaycast_HasHit;             // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_PerformFreeAimRaycast_HitDistance;        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_PerformFreeAimRaycast_HitLocation;        // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_PerformFreeAimRaycast_HitActor;           // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_DoesImplementInterface_ReturnValue;       // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_SetFieldsInStruct_HitDistance_4_3A8696044AFD1DDFB618DAAF80EA637C_ImplicitCast; // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_UpdateFreeAim) == 0x000008, "Wrong alignment on BP_FreeAim_C_UpdateFreeAim");
static_assert(sizeof(BP_FreeAim_C_UpdateFreeAim) == 0x000088, "Wrong size on BP_FreeAim_C_UpdateFreeAim");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, DeltaSeconds) == 0x000000, "Member 'BP_FreeAim_C_UpdateFreeAim::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_ComputeRaycastParameters_Start) == 0x000008, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_ComputeRaycastParameters_Start' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_ComputeRaycastParameters_End) == 0x000020, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_ComputeRaycastParameters_End' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_ComputeRaycastParameters_Direction) == 0x000038, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_ComputeRaycastParameters_Direction' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_PerformFreeAimRaycast_HasHit) == 0x000050, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_PerformFreeAimRaycast_HasHit' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_PerformFreeAimRaycast_HitDistance) == 0x000054, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_PerformFreeAimRaycast_HitDistance' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_PerformFreeAimRaycast_HitLocation) == 0x000058, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_PerformFreeAimRaycast_HitLocation' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_PerformFreeAimRaycast_HitActor) == 0x000070, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_PerformFreeAimRaycast_HitActor' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, CallFunc_DoesImplementInterface_ReturnValue) == 0x000078, "Member 'BP_FreeAim_C_UpdateFreeAim::CallFunc_DoesImplementInterface_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAim, K2Node_SetFieldsInStruct_HitDistance_4_3A8696044AFD1DDFB618DAAF80EA637C_ImplicitCast) == 0x000080, "Member 'BP_FreeAim_C_UpdateFreeAim::K2Node_SetFieldsInStruct_HitDistance_4_3A8696044AFD1DDFB618DAAF80EA637C_ImplicitCast' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.UpdateFreeAimArmRing
// 0x0038 (0x0038 - 0x0000)
struct BP_FreeAim_C_UpdateFreeAimArmRing final
{
public:
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue;     // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_FreeAimTarget_World_C> K2Node_DynamicCast_AsBPI_Free_Aim_Target_World; // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsChildOfClass_ReturnValue;               // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsFreeAimTargetDisabled_IsDisabled;       // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue_1;   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue_2;   // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             CallFunc_GetOwnerAsCharacterWorld_ReturnValue_3;   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_UpdateFreeAimArmRing) == 0x000008, "Wrong alignment on BP_FreeAim_C_UpdateFreeAimArmRing");
static_assert(sizeof(BP_FreeAim_C_UpdateFreeAimArmRing) == 0x000038, "Wrong size on BP_FreeAim_C_UpdateFreeAimArmRing");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_GetOwnerAsCharacterWorld_ReturnValue) == 0x000000, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_GetOwnerAsCharacterWorld_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, K2Node_DynamicCast_AsBPI_Free_Aim_Target_World) == 0x000008, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::K2Node_DynamicCast_AsBPI_Free_Aim_Target_World' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_IsChildOfClass_ReturnValue) == 0x000019, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_IsChildOfClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_IsFreeAimTargetDisabled_IsDisabled) == 0x00001A, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_IsFreeAimTargetDisabled_IsDisabled' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_IsValid_ReturnValue) == 0x00001B, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_GetOwnerAsCharacterWorld_ReturnValue_1) == 0x000020, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_GetOwnerAsCharacterWorld_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_GetOwnerAsCharacterWorld_ReturnValue_2) == 0x000028, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_GetOwnerAsCharacterWorld_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimArmRing, CallFunc_GetOwnerAsCharacterWorld_ReturnValue_3) == 0x000030, "Member 'BP_FreeAim_C_UpdateFreeAimArmRing::CallFunc_GetOwnerAsCharacterWorld_ReturnValue_3' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.UpdateFreeAimCrosshair
// 0x0010 (0x0010 - 0x0000)
struct BP_FreeAim_C_UpdateFreeAimCrosshair final
{
public:
	class UWBP_CrossHair_C*                       CallFunc_GetCrosshair_Crosshair;                   // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_UpdateFreeAimCrosshair) == 0x000008, "Wrong alignment on BP_FreeAim_C_UpdateFreeAimCrosshair");
static_assert(sizeof(BP_FreeAim_C_UpdateFreeAimCrosshair) == 0x000010, "Wrong size on BP_FreeAim_C_UpdateFreeAimCrosshair");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimCrosshair, CallFunc_GetCrosshair_Crosshair) == 0x000000, "Member 'BP_FreeAim_C_UpdateFreeAimCrosshair::CallFunc_GetCrosshair_Crosshair' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimCrosshair, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_FreeAim_C_UpdateFreeAimCrosshair::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateFreeAimCrosshair, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000009, "Member 'BP_FreeAim_C_UpdateFreeAimCrosshair::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.UpdateMeshSettingsForDetectedCharacter
// 0x0018 (0x0018 - 0x0000)
struct BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter final
{
public:
	EKinematicBonesUpdateToPhysics                KinematicBonesUpdateType;                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             Character;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EKinematicBonesUpdateToPhysics                Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_1;                              // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            Temp_byte_Variable_2;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionResponse                            K2Node_Select_Default;                             // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter) == 0x000008, "Wrong alignment on BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter");
static_assert(sizeof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter) == 0x000018, "Wrong size on BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, KinematicBonesUpdateType) == 0x000000, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::KinematicBonesUpdateType' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, Character) == 0x000008, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::Character' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, Temp_byte_Variable) == 0x000010, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, CallFunc_IsValid_ReturnValue) == 0x000011, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, Temp_byte_Variable_1) == 0x000012, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, Temp_byte_Variable_2) == 0x000013, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter, K2Node_Select_Default) == 0x000014, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacter::K2Node_Select_Default' has a wrong offset!");

// Function BP_FreeAim.BP_FreeAim_C.UpdateMeshSettingsForDetectedCharacters
// 0x0028 (0x0028 - 0x0000)
struct BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters final
{
public:
	EKinematicBonesUpdateToPhysics                Kinematic_Bones_Update_Type;                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters) == 0x000008, "Wrong alignment on BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters");
static_assert(sizeof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters) == 0x000028, "Wrong size on BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, Kinematic_Bones_Update_Type) == 0x000000, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::Kinematic_Bones_Update_Type' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, Temp_int_Array_Index_Variable) == 0x000004, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, Temp_int_Loop_Counter_Variable) == 0x000008, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, CallFunc_Add_IntInt_ReturnValue) == 0x00000C, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters, CallFunc_Less_IntInt_ReturnValue) == 0x000020, "Member 'BP_FreeAim_C_UpdateMeshSettingsForDetectedCharacters::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");

}

