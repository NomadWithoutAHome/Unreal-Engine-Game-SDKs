#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AC_jRPG_CharactersManager

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "E_jRPG_ItemType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass AC_jRPG_CharactersManager.AC_jRPG_CharactersManager_C
// 0x0060 (0x0100 - 0x00A0)
class UAC_jRPG_CharactersManager_C final : public UActorComponent
{
public:
	int32                                         MaxCharactersAmountInParty;                        // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxCharactersAmountInCollection;                   // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SelectedCharacter;                                 // 0x00A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CharacterMaxLevel;                                 // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SelectedAction;                                    // 0x00B4(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCharacterCollectionChanged;                      // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnCharacterPartyChanged;                           // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnyCharacterHealthPointChanged;                  // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnAnySkillUnlocked;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)

public:
	void AddCharacterToParty(class FName CharacterHardcodedName);
	void AddNewCharacterToCollection(const struct FS_jRPG_CharacterSaveState& CharacterSaveState);
	void CheckIfThereIsCharacterInParty(class FName CharacterHardcodedName, bool* Success_, int32* SlotIndex);
	void ComputePartyWithExclusions();
	void FullHealAllCharacters();
	void GetCharacterData(class FName CharacterId, class UBP_CharacterData_C** CharacterData);
	class UBP_CharacterData_C* InitCharacterData(const struct FS_jRPG_CharacterSaveState& CharacterSaveState);
	void LearnNewAction(class FName Character, class FName ActionName, bool UpgradeIfAlreadyLearned);
	void RemoveCharacterFromCollection(class UBP_CharacterData_C* CharacterData);
	void RemoveCharacterFromParty(class FName CharacterHardcodedName);
	void ReplaceCharacterInParty(class FName CharacterHardcodedName, int32 position);
	void RestoreHP(class FName CharacterHardcodedName, double HP_Amount);
	void RestoreMP(class FName CharacterHardcodedName, double MP_Amount);
	void SetCharacterExclusions(TArray<class FName>& CharactersToExclude, TArray<class FName>& CharactersToInclude);
	void SetCharacterHP(class FName CharacterHardcodedName, double Value);
	void SetParty(TArray<class FName>& InputPin);
	void ValidateCharacterExclusions();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AC_jRPG_CharactersManager_C">();
	}
	static class UAC_jRPG_CharactersManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAC_jRPG_CharactersManager_C>();
	}
};
static_assert(alignof(UAC_jRPG_CharactersManager_C) == 0x000008, "Wrong alignment on UAC_jRPG_CharactersManager_C");
static_assert(sizeof(UAC_jRPG_CharactersManager_C) == 0x000100, "Wrong size on UAC_jRPG_CharactersManager_C");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, MaxCharactersAmountInParty) == 0x0000A0, "Member 'UAC_jRPG_CharactersManager_C::MaxCharactersAmountInParty' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, MaxCharactersAmountInCollection) == 0x0000A4, "Member 'UAC_jRPG_CharactersManager_C::MaxCharactersAmountInCollection' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, SelectedCharacter) == 0x0000A8, "Member 'UAC_jRPG_CharactersManager_C::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, CharacterMaxLevel) == 0x0000B0, "Member 'UAC_jRPG_CharactersManager_C::CharacterMaxLevel' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, SelectedAction) == 0x0000B4, "Member 'UAC_jRPG_CharactersManager_C::SelectedAction' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, OnCharacterCollectionChanged) == 0x0000C0, "Member 'UAC_jRPG_CharactersManager_C::OnCharacterCollectionChanged' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, OnCharacterPartyChanged) == 0x0000D0, "Member 'UAC_jRPG_CharactersManager_C::OnCharacterPartyChanged' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, OnAnyCharacterHealthPointChanged) == 0x0000E0, "Member 'UAC_jRPG_CharactersManager_C::OnAnyCharacterHealthPointChanged' has a wrong offset!");
static_assert(offsetof(UAC_jRPG_CharactersManager_C, OnAnySkillUnlocked) == 0x0000F0, "Member 'UAC_jRPG_CharactersManager_C::OnAnySkillUnlocked' has a wrong offset!");

}

