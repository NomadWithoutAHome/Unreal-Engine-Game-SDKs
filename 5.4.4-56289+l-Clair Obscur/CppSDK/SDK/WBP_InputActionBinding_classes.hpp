#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InputActionBinding

#include "Basic.hpp"

#include "SandFall_classes.hpp"
#include "Engine_structs.hpp"
#include "S_InputBindingParameters_structs.hpp"
#include "InputCore_structs.hpp"
#include "UMG_structs.hpp"
#include "CommonInput_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_InputActionBinding.WBP_InputActionBinding_C
// 0x0090 (0x06D0 - 0x0640)
class alignas(0x10) UWBP_InputActionBinding_C final : public UInputActionBindingWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0640(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Border;                                            // 0x0648(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GamepadIcon;                                       // 0x0650(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               GamepadIconOverlay;                                // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 GamepadProgressMaterial;                           // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               KeyboardKeyOverlay;                                // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 KeyboardProgressMaterial;                          // 0x0670(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_SFKey_C*                           UniversalKeyboardKey;                              // 0x0678(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FS_InputBindingParameters              InputBindingParameters;                            // 0x0680(0x0028)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	bool                                          IsGamepadOnly;                                     // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   CurrentKey;                                        // 0x06B0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	void IsShowingKey(bool* bIsShowingKey);
	void Validate_Preview();
	void SetRadialProgress(double InProgress);
	bool DoesActionRequireBorder();
	void UpdateBorderVisibility();
	void UpdateVisibility();
	void FindInputKey(struct FKey* FoundKey);
	void UpdateInputKey();
	void OnInputMethodChanged(ECommonInputType bNewInputType);
	void UpdateWidget();
	void GetInputName(class FText* Name_0);
	struct FSlateBrush FindInputBrush();
	void Construct();
	void SetInputBindingParameters(const struct FS_InputBindingParameters& InputBindingParameters_0);
	void PreConstruct(bool IsDesignTime);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetupInputBindingParametersFromExternal(const class FName& InLegacyActionName, const struct FDataTableRowHandle& InCommonUIAction, class UInputAction* InEnhancedInputAction, class UInputMappingContext* InIMC);
	void NotifyUpdateNeeded();
	void ExecuteUbergraph_WBP_InputActionBinding(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_InputActionBinding_C">();
	}
	static class UWBP_InputActionBinding_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_InputActionBinding_C>();
	}
};
static_assert(alignof(UWBP_InputActionBinding_C) == 0x000010, "Wrong alignment on UWBP_InputActionBinding_C");
static_assert(sizeof(UWBP_InputActionBinding_C) == 0x0006D0, "Wrong size on UWBP_InputActionBinding_C");
static_assert(offsetof(UWBP_InputActionBinding_C, UberGraphFrame) == 0x000640, "Member 'UWBP_InputActionBinding_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, Border) == 0x000648, "Member 'UWBP_InputActionBinding_C::Border' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, GamepadIcon) == 0x000650, "Member 'UWBP_InputActionBinding_C::GamepadIcon' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, GamepadIconOverlay) == 0x000658, "Member 'UWBP_InputActionBinding_C::GamepadIconOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, GamepadProgressMaterial) == 0x000660, "Member 'UWBP_InputActionBinding_C::GamepadProgressMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, KeyboardKeyOverlay) == 0x000668, "Member 'UWBP_InputActionBinding_C::KeyboardKeyOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, KeyboardProgressMaterial) == 0x000670, "Member 'UWBP_InputActionBinding_C::KeyboardProgressMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, UniversalKeyboardKey) == 0x000678, "Member 'UWBP_InputActionBinding_C::UniversalKeyboardKey' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, InputBindingParameters) == 0x000680, "Member 'UWBP_InputActionBinding_C::InputBindingParameters' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, IsGamepadOnly) == 0x0006A8, "Member 'UWBP_InputActionBinding_C::IsGamepadOnly' has a wrong offset!");
static_assert(offsetof(UWBP_InputActionBinding_C, CurrentKey) == 0x0006B0, "Member 'UWBP_InputActionBinding_C::CurrentKey' has a wrong offset!");

}

