#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_BattleInput_EnemyTurn

#include "Basic.hpp"

#include "WBP_BattleInput_EnemyTurn_classes.hpp"
#include "WBP_BattleInput_EnemyTurn_parameters.hpp"


namespace SDK
{

// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.Appear
// (BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::Appear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "Appear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.DefensiveMoveEnd
// (BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::DefensiveMoveEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "DefensiveMoveEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.DodgeStart
// (BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::DodgeStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "DodgeStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.ExecuteUbergraph_WBP_BattleInput_EnemyTurn
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_BattleInput_EnemyTurn_C::ExecuteUbergraph_WBP_BattleInput_EnemyTurn(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "ExecuteUbergraph_WBP_BattleInput_EnemyTurn");

	Params::WBP_BattleInput_EnemyTurn_C_ExecuteUbergraph_WBP_BattleInput_EnemyTurn Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.OnJumpStart
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_BattleInput_EnemyTurn_C::OnJumpStart(class ABP_jRPG_Character_Battle_Base_C* Character)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "OnJumpStart");

	Params::WBP_BattleInput_EnemyTurn_C_OnJumpStart Parms{};

	Parms.Character = Character;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.OnLockEnd
// (BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::OnLockEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "OnLockEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.OnLockStart
// (BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::OnLockStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "OnLockStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.ParryStart
// (BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::ParryStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "ParryStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.SetCurrentCharacter
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_jRPG_Character_Battle_Base_C* CharacterBattleBaseReference_0                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UWBP_BattleInput_EnemyTurn_C::SetCurrentCharacter(class ABP_jRPG_Character_Battle_Base_C* CharacterBattleBaseReference_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "SetCurrentCharacter");

	Params::WBP_BattleInput_EnemyTurn_C_SetCurrentCharacter Parms{};

	Parms.CharacterBattleBaseReference_0 = CharacterBattleBaseReference_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.UpdateUnlockedFeatures
// (Public, BlueprintCallable, BlueprintEvent)

void UWBP_BattleInput_EnemyTurn_C::UpdateUnlockedFeatures()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "UpdateUnlockedFeatures");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_BattleInput_EnemyTurn.WBP_BattleInput_EnemyTurn_C.UpdateVisibilityAndBindingsFromTargets
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TArray<class ABP_jRPG_Character_Battle_Base_C*>&Targets                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool*                                   IsVisible_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_BattleInput_EnemyTurn_C::UpdateVisibilityAndBindingsFromTargets(const TArray<class ABP_jRPG_Character_Battle_Base_C*>& Targets, bool* IsVisible_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_BattleInput_EnemyTurn_C", "UpdateVisibilityAndBindingsFromTargets");

	Params::WBP_BattleInput_EnemyTurn_C_UpdateVisibilityAndBindingsFromTargets Parms{};

	Parms.Targets = std::move(Targets);

	UObject::ProcessEvent(Func, &Parms);

	if (IsVisible_0 != nullptr)
		*IsVisible_0 = Parms.IsVisible_0;
}

}

