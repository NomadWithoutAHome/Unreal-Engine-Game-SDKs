#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlyingIndicator

#include "Basic.hpp"

#include "BP_FlyingIndicator_classes.hpp"
#include "BP_FlyingIndicator_parameters.hpp"


namespace SDK
{

// Function BP_FlyingIndicator.BP_FlyingIndicator_C.Timeline_0To1__UpdateFunc
// (BlueprintEvent)

void ABP_FlyingIndicator_C::Timeline_0To1__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "Timeline_0To1__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.Timeline_0To1__FinishedFunc
// (BlueprintEvent)

void ABP_FlyingIndicator_C::Timeline_0To1__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "Timeline_0To1__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.Timeline_0__UpdateFunc
// (BlueprintEvent)

void ABP_FlyingIndicator_C::Timeline_0__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "Timeline_0__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.Timeline_0__FinishedFunc
// (BlueprintEvent)

void ABP_FlyingIndicator_C::Timeline_0__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "Timeline_0__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.Timeline_0__ChangeZtrack__EventFunc
// (BlueprintEvent)

void ABP_FlyingIndicator_C::Timeline_0__ChangeZtrack__EventFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "Timeline_0__ChangeZtrack__EventFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_FlyingIndicator_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.OnFlyToTargetDone
// (BlueprintCallable, BlueprintEvent)

void ABP_FlyingIndicator_C::OnFlyToTargetDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "OnFlyToTargetDone");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.FlyToTargetWithSpline
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 Spline                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_FlyingIndicator_C::FlyToTargetWithSpline(class USplineComponent* Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "FlyToTargetWithSpline");

	Params::BP_FlyingIndicator_C_FlyToTargetWithSpline Parms{};

	Parms.Spline = Spline;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.FlyToTarget
// (BlueprintCallable, BlueprintEvent)

void ABP_FlyingIndicator_C::FlyToTarget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "FlyToTarget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.ExecuteUbergraph_BP_FlyingIndicator
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_FlyingIndicator_C::ExecuteUbergraph_BP_FlyingIndicator(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "ExecuteUbergraph_BP_FlyingIndicator");

	Params::BP_FlyingIndicator_C_ExecuteUbergraph_BP_FlyingIndicator Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_FlyingIndicator.BP_FlyingIndicator_C.CopyFollowSpline
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class USplineComponent*                 SplineComponent                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ABP_FlyingIndicator_C::CopyFollowSpline(class USplineComponent* SplineComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_FlyingIndicator_C", "CopyFollowSpline");

	Params::BP_FlyingIndicator_C_CopyFollowSpline Parms{};

	Parms.SplineComponent = SplineComponent;

	UObject::ProcessEvent(Func, &Parms);
}

}

