#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_CustomMoveZone_Climbing

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckEnter
// 0x0040 (0x0040 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_CheckEnter final
{
public:
	struct FVector                                Character_Bottom_Location;                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Input_Direction;                                   // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Scale;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_CheckEnter) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_CheckEnter");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_CheckEnter) == 0x000040, "Wrong size on BPI_CustomMoveZone_Climbing_C_CheckEnter");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnter, Character_Bottom_Location) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnter::Character_Bottom_Location' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnter, Input_Direction) == 0x000018, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnter::Input_Direction' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnter, Input_Scale) == 0x000030, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnter::Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnter, Result) == 0x000038, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnter::Result' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckEnterToTop
// 0x0040 (0x0040 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_CheckEnterToTop final
{
public:
	struct FVector                                Character_Bottom_Location;                         // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Input_Direction;                                   // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Scale;                                       // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0038(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_CheckEnterToTop) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_CheckEnterToTop");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_CheckEnterToTop) == 0x000040, "Wrong size on BPI_CustomMoveZone_Climbing_C_CheckEnterToTop");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnterToTop, Character_Bottom_Location) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnterToTop::Character_Bottom_Location' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnterToTop, Input_Direction) == 0x000018, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnterToTop::Input_Direction' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnterToTop, Input_Scale) == 0x000030, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnterToTop::Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckEnterToTop, Result) == 0x000038, "Member 'BPI_CustomMoveZone_Climbing_C_CheckEnterToTop::Result' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckExitToBottom
// 0x0010 (0x0010 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_CheckExitToBottom final
{
public:
	double                                        Input_Scale;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_CheckExitToBottom) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_CheckExitToBottom");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_CheckExitToBottom) == 0x000010, "Wrong size on BPI_CustomMoveZone_Climbing_C_CheckExitToBottom");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckExitToBottom, Input_Scale) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_CheckExitToBottom::Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckExitToBottom, Result) == 0x000008, "Member 'BPI_CustomMoveZone_Climbing_C_CheckExitToBottom::Result' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckExitToTop
// 0x0010 (0x0010 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_CheckExitToTop final
{
public:
	double                                        Input_Scale;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_CheckExitToTop) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_CheckExitToTop");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_CheckExitToTop) == 0x000010, "Wrong size on BPI_CustomMoveZone_Climbing_C_CheckExitToTop");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckExitToTop, Input_Scale) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_CheckExitToTop::Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckExitToTop, Result) == 0x000008, "Member 'BPI_CustomMoveZone_Climbing_C_CheckExitToTop::Result' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.CheckMoveToNextHold
// 0x0038 (0x0038 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold final
{
public:
	struct FVector                                Input_Direction;                                   // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Input_Scale;                                       // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Result;                                            // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Next_Hold;                                         // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Far_Hold;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold) == 0x000038, "Wrong size on BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold, Input_Direction) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold::Input_Direction' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold, Input_Scale) == 0x000018, "Member 'BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold::Input_Scale' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold, Result) == 0x000020, "Member 'BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold::Result' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold, Next_Hold) == 0x000028, "Member 'BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold::Next_Hold' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold, Is_Far_Hold) == 0x000030, "Member 'BPI_CustomMoveZone_Climbing_C_CheckMoveToNextHold::Is_Far_Hold' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.GetHoldLocation
// 0x0030 (0x0030 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_GetHoldLocation final
{
public:
	struct FVector                                Hold_Location;                                     // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Character_Bottom_Location;                         // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_GetHoldLocation) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_GetHoldLocation");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_GetHoldLocation) == 0x000030, "Wrong size on BPI_CustomMoveZone_Climbing_C_GetHoldLocation");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_GetHoldLocation, Hold_Location) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_GetHoldLocation::Hold_Location' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_GetHoldLocation, Character_Bottom_Location) == 0x000018, "Member 'BPI_CustomMoveZone_Climbing_C_GetHoldLocation::Character_Bottom_Location' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.GetHoldRotation
// 0x0018 (0x0018 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_GetHoldRotation final
{
public:
	struct FRotator                               Hold_Rotation;                                     // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_GetHoldRotation) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_GetHoldRotation");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_GetHoldRotation) == 0x000018, "Wrong size on BPI_CustomMoveZone_Climbing_C_GetHoldRotation");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_GetHoldRotation, Hold_Rotation) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_GetHoldRotation::Hold_Rotation' has a wrong offset!");

// Function BPI_CustomMoveZone_Climbing.BPI_CustomMoveZone_Climbing_C.GetTopEnterLocatoin
// 0x0030 (0x0030 - 0x0000)
struct BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin final
{
public:
	struct FVector                                Top_Enter_Location;                                // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Top_Enter_Rotation;                                // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin) == 0x000008, "Wrong alignment on BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin");
static_assert(sizeof(BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin) == 0x000030, "Wrong size on BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin, Top_Enter_Location) == 0x000000, "Member 'BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin::Top_Enter_Location' has a wrong offset!");
static_assert(offsetof(BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin, Top_Enter_Rotation) == 0x000018, "Member 'BPI_CustomMoveZone_Climbing_C_GetTopEnterLocatoin::Top_Enter_Rotation' has a wrong offset!");

}

