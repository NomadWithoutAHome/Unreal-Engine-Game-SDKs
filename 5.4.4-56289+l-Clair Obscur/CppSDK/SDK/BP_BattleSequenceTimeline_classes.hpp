#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleSequenceTimeline

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "SandFall_classes.hpp"
#include "FBattleSequenceTimelineKeyframe_structs.hpp"
#include "Engine_structs.hpp"
#include "EBattleActionEvent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleSequenceTimeline.BP_BattleSequenceTimeline_C
// 0x0118 (0x0140 - 0x0028)
class UBP_BattleSequenceTimeline_C final : public UExtendedObject
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0028(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ABP_EpicBattleSequenceActor_C*          CurrentBattleSequence;                             // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<double, struct FFBattleSequenceTimelineKeyframe> CurrentBattleSequenceTimeline;             // 0x0038(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        NextBattleSequenceActionTime;                      // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        NextBattleKeyframeRealTime;                        // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBattleActionEvent                            LastBattleSequenceAction;                          // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       BattleCharacter;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsComboWaitingForActionEffect;                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInSkillComboWindow;                              // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkillComboSuccessful;                            // 0x00AA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AB[0x5];                                       // 0x00AB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<bool>                                  ComboSuccessHistory;                               // 0x00B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TArray<double>                                ComboPreTimes;                                     // 0x00C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                ComboWindowStartTimes;                             // 0x00D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TArray<double>                                ComboWindowEndTimes;                               // 0x00E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	double                                        CurrentWindowStartRealTime;                        // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentWindowEndRealTime;                          // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TrackIndex;                                        // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          CanGetInput;                                       // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsQTEInterrupted;                                  // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_106[0x2];                                      // 0x0106(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AnticipationDuration;                              // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ValidityDuration;                                  // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastSkillComboWindowStartTime;                     // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class FString>                         EDITOR_ValidationErrors;                           // 0x0120(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         ActionEffectCount;                                 // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSkillComboPerfect;                               // 0x0134(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TriggerAutoQTEAtTime;                              // 0x0138(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddBattleSequenceActionKeyframe(double Time, EBattleActionEvent ActionType);
	void AddBattleSequenceCameraKeyframe(double Time, EBattleSequenceCameraType CameraType);
	void AddQTEPresetKeyframes(double WindowStartTime, double AnticipationDuration_0, double ValidityDuration_0, double NowTime);
	void AddQTEPresetKeyframes_Legacy(double WindowStartTime, double AnticipationDuration_0, double ValidityDuration_0, double NowTime);
	void DeclareBattleSequenceTimingsAsList(class ABP_EpicBattleSequenceActor_C* BattleSequence, TArray<struct FBattleSequenceKeyframe>& BattleSequenceKeyframes, const TMap<double, EBattleSequenceCameraType>& CameraKeyframes);
	void ExecuteUbergraph_BP_BattleSequenceTimeline(int32 EntryPoint);
	void ExpiresSoonerThan(class UBP_BattleSequenceTimeline_C* Other, bool* Result);
	void ForceStopSequence();
	void GetCurrentBattleSequenceTime(double* Time);
	float GetCurrentBattleSequenceTimeInAsset();
	void GetCurrentTimeForBattleSequenceTimeline(double* NewParam);
	class FText GetDebugText();
	void GetQTEWidget(class UWBP_HUD_QTE_Base_C** Output);
	void GetTiedObject(class UObject** Object);
	void InterruptTimeline();
	bool IsInPerfectWindow();
	void OnBattleSequenceActionReached(EBattleActionEvent KeyframeType);
	void OnBattleSequenceFinished();
	void OnSkillComboExitPointReached();
	void OnSkillComboWindowEndReached();
	void OnSkillComboWindowPreReached();
	void OnSkillComboWindowStartReached();
	void OnSkillEffectReached();
	void OnUIAction();
	void OnUINavigationFocus(const class UBP_UINavigationFocusEvent_C* FocusEventBP);
	void OnUINavigationFocusLost();
	void QueueNextBattleSequenceKeyframe();
	void SetCurrentBattleSequenceAction(EBattleActionEvent BattleSequenceAction);
	void StartAllowSkillCombo();
	void StartEndPhase();
	void StartPrePhase();
	void StartValidityPhase();
	void StopAllowSkillCombo();
	void StopSequence();
	void TickBattleSequenceTimeline();
	void TickCustomTimers();
	void TryActivate(bool* Success, bool* Perfect);
	void VerifyBattleSequenceActionChange(EBattleActionEvent CurrentState, EBattleActionEvent PreviousState, bool* IsValid, TArray<EBattleActionEvent>* ExpectedValue);
	void VerifyBattleSequenceTimeline(const TMap<double, struct FFBattleSequenceTimelineKeyframe>& Timeline);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleSequenceTimeline_C">();
	}
	static class UBP_BattleSequenceTimeline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattleSequenceTimeline_C>();
	}
};
static_assert(alignof(UBP_BattleSequenceTimeline_C) == 0x000008, "Wrong alignment on UBP_BattleSequenceTimeline_C");
static_assert(sizeof(UBP_BattleSequenceTimeline_C) == 0x000140, "Wrong size on UBP_BattleSequenceTimeline_C");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, UberGraphFrame) == 0x000028, "Member 'UBP_BattleSequenceTimeline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, CurrentBattleSequence) == 0x000030, "Member 'UBP_BattleSequenceTimeline_C::CurrentBattleSequence' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, CurrentBattleSequenceTimeline) == 0x000038, "Member 'UBP_BattleSequenceTimeline_C::CurrentBattleSequenceTimeline' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, NextBattleSequenceActionTime) == 0x000088, "Member 'UBP_BattleSequenceTimeline_C::NextBattleSequenceActionTime' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, NextBattleKeyframeRealTime) == 0x000090, "Member 'UBP_BattleSequenceTimeline_C::NextBattleKeyframeRealTime' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, LastBattleSequenceAction) == 0x000098, "Member 'UBP_BattleSequenceTimeline_C::LastBattleSequenceAction' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, BattleCharacter) == 0x0000A0, "Member 'UBP_BattleSequenceTimeline_C::BattleCharacter' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, IsComboWaitingForActionEffect) == 0x0000A8, "Member 'UBP_BattleSequenceTimeline_C::IsComboWaitingForActionEffect' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, IsInSkillComboWindow) == 0x0000A9, "Member 'UBP_BattleSequenceTimeline_C::IsInSkillComboWindow' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, IsSkillComboSuccessful) == 0x0000AA, "Member 'UBP_BattleSequenceTimeline_C::IsSkillComboSuccessful' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, ComboSuccessHistory) == 0x0000B0, "Member 'UBP_BattleSequenceTimeline_C::ComboSuccessHistory' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, ComboPreTimes) == 0x0000C0, "Member 'UBP_BattleSequenceTimeline_C::ComboPreTimes' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, ComboWindowStartTimes) == 0x0000D0, "Member 'UBP_BattleSequenceTimeline_C::ComboWindowStartTimes' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, ComboWindowEndTimes) == 0x0000E0, "Member 'UBP_BattleSequenceTimeline_C::ComboWindowEndTimes' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, CurrentWindowStartRealTime) == 0x0000F0, "Member 'UBP_BattleSequenceTimeline_C::CurrentWindowStartRealTime' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, CurrentWindowEndRealTime) == 0x0000F8, "Member 'UBP_BattleSequenceTimeline_C::CurrentWindowEndRealTime' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, TrackIndex) == 0x000100, "Member 'UBP_BattleSequenceTimeline_C::TrackIndex' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, CanGetInput) == 0x000104, "Member 'UBP_BattleSequenceTimeline_C::CanGetInput' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, IsQTEInterrupted) == 0x000105, "Member 'UBP_BattleSequenceTimeline_C::IsQTEInterrupted' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, AnticipationDuration) == 0x000108, "Member 'UBP_BattleSequenceTimeline_C::AnticipationDuration' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, ValidityDuration) == 0x000110, "Member 'UBP_BattleSequenceTimeline_C::ValidityDuration' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, LastSkillComboWindowStartTime) == 0x000118, "Member 'UBP_BattleSequenceTimeline_C::LastSkillComboWindowStartTime' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, EDITOR_ValidationErrors) == 0x000120, "Member 'UBP_BattleSequenceTimeline_C::EDITOR_ValidationErrors' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, ActionEffectCount) == 0x000130, "Member 'UBP_BattleSequenceTimeline_C::ActionEffectCount' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, IsSkillComboPerfect) == 0x000134, "Member 'UBP_BattleSequenceTimeline_C::IsSkillComboPerfect' has a wrong offset!");
static_assert(offsetof(UBP_BattleSequenceTimeline_C, TriggerAutoQTEAtTime) == 0x000138, "Member 'UBP_BattleSequenceTimeline_C::TriggerAutoQTEAtTime' has a wrong offset!");

}

