#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_EnemyKill_Portrait

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "S_jRPG_Enemy_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_EnemyKill_Portrait.WBP_EnemyKill_Portrait_C.GetEnemyName
// 0x0008 (0x0008 - 0x0000)
struct WBP_EnemyKill_Portrait_C_GetEnemyName final
{
public:
	class FName                                   EnemyName_0;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EnemyKill_Portrait_C_GetEnemyName) == 0x000004, "Wrong alignment on WBP_EnemyKill_Portrait_C_GetEnemyName");
static_assert(sizeof(WBP_EnemyKill_Portrait_C_GetEnemyName) == 0x000008, "Wrong size on WBP_EnemyKill_Portrait_C_GetEnemyName");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_GetEnemyName, EnemyName_0) == 0x000000, "Member 'WBP_EnemyKill_Portrait_C_GetEnemyName::EnemyName_0' has a wrong offset!");

// Function WBP_EnemyKill_Portrait.WBP_EnemyKill_Portrait_C.LoadEnemyFromData
// 0x0200 (0x0200 - 0x0000)
struct WBP_EnemyKill_Portrait_C_LoadEnemyFromData final
{
public:
	struct FS_jRPG_Enemy                          Enemy;                                             // 0x0000(0x0200)(BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EnemyKill_Portrait_C_LoadEnemyFromData) == 0x000008, "Wrong alignment on WBP_EnemyKill_Portrait_C_LoadEnemyFromData");
static_assert(sizeof(WBP_EnemyKill_Portrait_C_LoadEnemyFromData) == 0x000200, "Wrong size on WBP_EnemyKill_Portrait_C_LoadEnemyFromData");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_LoadEnemyFromData, Enemy) == 0x000000, "Member 'WBP_EnemyKill_Portrait_C_LoadEnemyFromData::Enemy' has a wrong offset!");

// Function WBP_EnemyKill_Portrait.WBP_EnemyKill_Portrait_C.LoadEnemyFromHardcodedName
// 0x0210 (0x0210 - 0x0000)
struct WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName final
{
public:
	class FName                                   EnemyHardcodedName;                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetEnemyDataTableRow_Found;               // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FS_jRPG_Enemy                          CallFunc_GetEnemyDataTableRow_EnemyData;           // 0x0010(0x0200)(ContainsInstancedReference, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName) == 0x000008, "Wrong alignment on WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName");
static_assert(sizeof(WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName) == 0x000210, "Wrong size on WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName, EnemyHardcodedName) == 0x000000, "Member 'WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName::EnemyHardcodedName' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName, CallFunc_GetEnemyDataTableRow_Found) == 0x000008, "Member 'WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName::CallFunc_GetEnemyDataTableRow_Found' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName, CallFunc_GetEnemyDataTableRow_EnemyData) == 0x000010, "Member 'WBP_EnemyKill_Portrait_C_LoadEnemyFromHardcodedName::CallFunc_GetEnemyDataTableRow_EnemyData' has a wrong offset!");

// Function WBP_EnemyKill_Portrait.WBP_EnemyKill_Portrait_C.SetCount
// 0x0090 (0x0090 - 0x0000)
struct WBP_EnemyKill_Portrait_C_SetCount final
{
public:
	int32                                         InCount;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0018(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0060(0x0010)(ReferenceParm)
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0078(0x0010)()
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_EnemyKill_Portrait_C_SetCount) == 0x000008, "Wrong alignment on WBP_EnemyKill_Portrait_C_SetCount");
static_assert(sizeof(WBP_EnemyKill_Portrait_C_SetCount) == 0x000090, "Wrong size on WBP_EnemyKill_Portrait_C_SetCount");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, InCount) == 0x000000, "Member 'WBP_EnemyKill_Portrait_C_SetCount::InCount' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, Temp_byte_Variable) == 0x000004, "Member 'WBP_EnemyKill_Portrait_C_SetCount::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000005, "Member 'WBP_EnemyKill_Portrait_C_SetCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000008, "Member 'WBP_EnemyKill_Portrait_C_SetCount::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, Temp_byte_Variable_1) == 0x000010, "Member 'WBP_EnemyKill_Portrait_C_SetCount::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, K2Node_MakeStruct_FormatArgumentData) == 0x000018, "Member 'WBP_EnemyKill_Portrait_C_SetCount::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, K2Node_MakeArray_Array) == 0x000060, "Member 'WBP_EnemyKill_Portrait_C_SetCount::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, Temp_bool_Variable) == 0x000070, "Member 'WBP_EnemyKill_Portrait_C_SetCount::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, CallFunc_Format_ReturnValue) == 0x000078, "Member 'WBP_EnemyKill_Portrait_C_SetCount::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_EnemyKill_Portrait_C_SetCount, K2Node_Select_Default) == 0x000088, "Member 'WBP_EnemyKill_Portrait_C_SetCount::K2Node_Select_Default' has a wrong offset!");

}

