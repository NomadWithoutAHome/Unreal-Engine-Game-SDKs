#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_HUD_BattleScreen

#include "Basic.hpp"

#include "EBattleTurnState_structs.hpp"
#include "Engine_structs.hpp"
#include "SandFall_structs.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_HUD_BattleScreen.WBP_HUD_BattleScreen_C
// 0x0178 (0x05A8 - 0x0430)
class UWBP_HUD_BattleScreen_C final : public UCommonActivatableWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0430(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_VignettingHit;                                // 0x0438(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_Panel_Appear;                                 // 0x0440(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UBackgroundBlur*                        BackgroundBlur_79;                                 // 0x0448(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              BattleWheelTutorialHightlight;                     // 0x0450(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG;                                                // 0x0458(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BG_ArtDeco;                                        // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDynamicEntryBox*                       BossOverheadBox;                                   // 0x0468(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           Canvas_UniqueMechanicsContainer;                   // 0x0470(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x0478(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RedVignetting;                                     // 0x0480(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USafeZone*                              SafeZone;                                          // 0x0488(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Battle_JumpCounterHint_C*          WBP_Battle_JumpCounterHint;                        // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_BattleInput_EnemyTurn_C*           WBP_BattleInput_EnemyTurn;                         // 0x0498(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_BattleInput_PlayerTurn_C*          WBP_BattleInput_PlayerTurn;                        // 0x04A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_BattleInput_SelectTarget_C*        WBP_BattleInput_SelectTarget;                      // 0x04A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CharacterStatusPanel_C*            WBP_CharacterStatusPanel;                          // 0x04B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_GradientChargeGauge_C*             WBP_GradientChargeGauge;                           // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_AimTarget_C*                   WBP_HUD_AimTarget;                                 // 0x04C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_ArrowTargetSelection_C*        WBP_HUD_ArrowTargetSelection;                      // 0x04C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_BattleActionTooltip_C*         WBP_HUD_BattleActionTooltip;                       // 0x04D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DamageFeedback_C*              WBP_HUD_DamageFeedback;                            // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DisplayCharacters_C*           WBP_HUD_DisplayCharacterPortraits;                 // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_DriveG_TimeContainer_C*        WBP_HUD_DriveG_TimeContainer;                      // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_HUD_Battle_TargetingControls_C*    WBP_HUD_TargetingControls;                         // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_PassivePopupContainer_C*           WBP_PassivePopupContainer;                         // 0x04F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_UniqueMechanic_Perfection_C*       WBP_Perfection_Preview;                            // 0x0500(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_Tooltip_BattleScreen_C*            WBP_Tooltip_BattleScreen;                          // 0x0508(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          WIP_Mode;                                          // 0x0510(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_511[0x7];                                      // 0x0511(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAC_jRPG_BattleManager_C*               BattleManagerReference;                            // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          IsTargeting;                                       // 0x0520(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTooltipVisible;                                  // 0x0521(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsInputRegistered;                                 // 0x0522(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsTargetingRegistered;                             // 0x0523(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoundEventDataTableRowHandle          SoundEvent_Skill_Target_Ally_Cancel;               // 0x0528(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SoundEvent_Skill_Target_Enemy_Cancel;              // 0x0538(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SoundEvent_Item_Target_Ally_Cancel;                // 0x0548(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	struct FSoundEventDataTableRowHandle          SoundEvent_Item_Target_Enemy_Cancel;               // 0x0558(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	bool                                          IsLastTurnAlly;                                    // 0x0568(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_569[0x7];                                      // 0x0569(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_Battle_Base_C*       LastCurrentCharacter;                              // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           Timer_TooltipAutoClose;                            // 0x0578(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           ThreeDCurve_Transform;                             // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveVector*                           ThreeDCurve_Shear;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UWBP_HUD_WheelsContainer_C*             WBP_HUD_WheelsContainer;                           // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            DEBUG_BattleOverlay;                               // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            WBP_UniqueMechanic_CurrentCharacter;               // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void AddFullscreenChild(class UUserWidget* Content, int32 InZOrder);
	void AddUniqueMechanicWidget(class UUserWidget* Content);
	void Appear();
	void Bind3DWidget();
	void BindBackButton(const TDelegate<void(class UCommonButtonBase* Button)>& ClickedEvent);
	void BndEvt__WBP_HUD_BattleScreen_WBP_HUD_TargetingControls_K2Node_ComponentBoundEvent_1_OnCancelClicked__DelegateSignature();
	void BndEvt__WBP_HUD_BattleScreen_WBP_HUD_TargetingControls_K2Node_ComponentBoundEvent_3_OnConfirmClicked__DelegateSignature();
	void Construct();
	void DEBUG_OnCvarChanged_HideUI(bool NewValue);
	void Destruct();
	void DisableWheel();
	void EnableWheel();
	void ExecuteUbergraph_WBP_HUD_BattleScreen(int32 EntryPoint);
	void Get_Battle_Wheels_Container(class UWBP_HUD_WheelsContainer_C** WBP_HUD_WheelsContainer_0);
	void GetNextAvailableBossUI(class UAC_jRPG_CharacterBattleStats_C* InCharacterBattleStats, class UWBP_Battle_Boss_OverheadState_C** BossUI);
	void HideBattleMenuTooltip();
	void HitVignetting();
	void OnBattleEnd();
	void OnCancelTargeting();
	void OnCharacterTurnStart(class UAC_jRPG_CharacterBattleStats_C* Character);
	void OnEnemiesTurnEnd();
	void OnEnemiesTurnStart();
	void OnFreeAimEnd();
	void OnFreeAimStart();
	void OnInput_SkipTurnChosen();
	void OnLoaded_78E841414181513F331E47B80E7F176C(TSubclassOf<class UObject> Loaded);
	void OnPauseMenuClosed();
	void OnPauseMenuOpened();
	void OnPlayerChoseAction();
	void OnPlayerTurnEnd();
	void OnPlayerTurnPreStart();
	void OnPlayerTurnStart();
	void OnStartTargeting();
	void PreConstruct(bool IsDesignTime);
	void ProcessOnWheelsPageChanged();
	void RegisterTargetingInput();
	void RegisterWheelInput();
	void RemoveBossUI(class UWBP_Battle_Boss_OverheadState_C* BossUI);
	void ShowMenuTooltip(const class FText& TooltipName, const class FText& TooltipDesc);
	void ShowTooltip(const class FText& ToolTipText_0, bool AutoFadeout);
	void StopTargetingInternal();
	void UnbindBackButton(const TDelegate<void(class UCommonButtonBase* Button)>& ClickedEvent);
	void UnregisterTargetingInput();
	void UnregisterWheelInput();
	void UpdateBossUIScale();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_HUD_BattleScreen_C">();
	}
	static class UWBP_HUD_BattleScreen_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_HUD_BattleScreen_C>();
	}
};
static_assert(alignof(UWBP_HUD_BattleScreen_C) == 0x000008, "Wrong alignment on UWBP_HUD_BattleScreen_C");
static_assert(sizeof(UWBP_HUD_BattleScreen_C) == 0x0005A8, "Wrong size on UWBP_HUD_BattleScreen_C");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, UberGraphFrame) == 0x000430, "Member 'UWBP_HUD_BattleScreen_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, Anim_VignettingHit) == 0x000438, "Member 'UWBP_HUD_BattleScreen_C::Anim_VignettingHit' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, Anim_Panel_Appear) == 0x000440, "Member 'UWBP_HUD_BattleScreen_C::Anim_Panel_Appear' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, BackgroundBlur_79) == 0x000448, "Member 'UWBP_HUD_BattleScreen_C::BackgroundBlur_79' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, BattleWheelTutorialHightlight) == 0x000450, "Member 'UWBP_HUD_BattleScreen_C::BattleWheelTutorialHightlight' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, BG) == 0x000458, "Member 'UWBP_HUD_BattleScreen_C::BG' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, BG_ArtDeco) == 0x000460, "Member 'UWBP_HUD_BattleScreen_C::BG_ArtDeco' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, BossOverheadBox) == 0x000468, "Member 'UWBP_HUD_BattleScreen_C::BossOverheadBox' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, Canvas_UniqueMechanicsContainer) == 0x000470, "Member 'UWBP_HUD_BattleScreen_C::Canvas_UniqueMechanicsContainer' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, CanvasPanel_0) == 0x000478, "Member 'UWBP_HUD_BattleScreen_C::CanvasPanel_0' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, RedVignetting) == 0x000480, "Member 'UWBP_HUD_BattleScreen_C::RedVignetting' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, SafeZone) == 0x000488, "Member 'UWBP_HUD_BattleScreen_C::SafeZone' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_Battle_JumpCounterHint) == 0x000490, "Member 'UWBP_HUD_BattleScreen_C::WBP_Battle_JumpCounterHint' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_BattleInput_EnemyTurn) == 0x000498, "Member 'UWBP_HUD_BattleScreen_C::WBP_BattleInput_EnemyTurn' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_BattleInput_PlayerTurn) == 0x0004A0, "Member 'UWBP_HUD_BattleScreen_C::WBP_BattleInput_PlayerTurn' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_BattleInput_SelectTarget) == 0x0004A8, "Member 'UWBP_HUD_BattleScreen_C::WBP_BattleInput_SelectTarget' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_CharacterStatusPanel) == 0x0004B0, "Member 'UWBP_HUD_BattleScreen_C::WBP_CharacterStatusPanel' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_GradientChargeGauge) == 0x0004B8, "Member 'UWBP_HUD_BattleScreen_C::WBP_GradientChargeGauge' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_AimTarget) == 0x0004C0, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_AimTarget' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_ArrowTargetSelection) == 0x0004C8, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_ArrowTargetSelection' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_BattleActionTooltip) == 0x0004D0, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_BattleActionTooltip' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_DamageFeedback) == 0x0004D8, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_DamageFeedback' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_DisplayCharacterPortraits) == 0x0004E0, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_DisplayCharacterPortraits' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_DriveG_TimeContainer) == 0x0004E8, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_DriveG_TimeContainer' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_TargetingControls) == 0x0004F0, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_TargetingControls' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_PassivePopupContainer) == 0x0004F8, "Member 'UWBP_HUD_BattleScreen_C::WBP_PassivePopupContainer' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_Perfection_Preview) == 0x000500, "Member 'UWBP_HUD_BattleScreen_C::WBP_Perfection_Preview' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_Tooltip_BattleScreen) == 0x000508, "Member 'UWBP_HUD_BattleScreen_C::WBP_Tooltip_BattleScreen' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WIP_Mode) == 0x000510, "Member 'UWBP_HUD_BattleScreen_C::WIP_Mode' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, BattleManagerReference) == 0x000518, "Member 'UWBP_HUD_BattleScreen_C::BattleManagerReference' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, IsTargeting) == 0x000520, "Member 'UWBP_HUD_BattleScreen_C::IsTargeting' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, IsTooltipVisible) == 0x000521, "Member 'UWBP_HUD_BattleScreen_C::IsTooltipVisible' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, IsInputRegistered) == 0x000522, "Member 'UWBP_HUD_BattleScreen_C::IsInputRegistered' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, IsTargetingRegistered) == 0x000523, "Member 'UWBP_HUD_BattleScreen_C::IsTargetingRegistered' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, SoundEvent_Skill_Target_Ally_Cancel) == 0x000528, "Member 'UWBP_HUD_BattleScreen_C::SoundEvent_Skill_Target_Ally_Cancel' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, SoundEvent_Skill_Target_Enemy_Cancel) == 0x000538, "Member 'UWBP_HUD_BattleScreen_C::SoundEvent_Skill_Target_Enemy_Cancel' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, SoundEvent_Item_Target_Ally_Cancel) == 0x000548, "Member 'UWBP_HUD_BattleScreen_C::SoundEvent_Item_Target_Ally_Cancel' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, SoundEvent_Item_Target_Enemy_Cancel) == 0x000558, "Member 'UWBP_HUD_BattleScreen_C::SoundEvent_Item_Target_Enemy_Cancel' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, IsLastTurnAlly) == 0x000568, "Member 'UWBP_HUD_BattleScreen_C::IsLastTurnAlly' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, LastCurrentCharacter) == 0x000570, "Member 'UWBP_HUD_BattleScreen_C::LastCurrentCharacter' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, Timer_TooltipAutoClose) == 0x000578, "Member 'UWBP_HUD_BattleScreen_C::Timer_TooltipAutoClose' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, ThreeDCurve_Transform) == 0x000580, "Member 'UWBP_HUD_BattleScreen_C::ThreeDCurve_Transform' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, ThreeDCurve_Shear) == 0x000588, "Member 'UWBP_HUD_BattleScreen_C::ThreeDCurve_Shear' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_HUD_WheelsContainer) == 0x000590, "Member 'UWBP_HUD_BattleScreen_C::WBP_HUD_WheelsContainer' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, DEBUG_BattleOverlay) == 0x000598, "Member 'UWBP_HUD_BattleScreen_C::DEBUG_BattleOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_HUD_BattleScreen_C, WBP_UniqueMechanic_CurrentCharacter) == 0x0005A0, "Member 'UWBP_HUD_BattleScreen_C::WBP_UniqueMechanic_CurrentCharacter' has a wrong offset!");

}

