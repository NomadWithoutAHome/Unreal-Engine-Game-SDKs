#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_LightingScenarioReference

#include "Basic.hpp"

#include "BP_LightingScenarioReference_classes.hpp"
#include "BP_LightingScenarioReference_parameters.hpp"


namespace SDK
{

// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.ActivateLightingScenarioForCinematics
// (BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::ActivateLightingScenarioForCinematics()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "ActivateLightingScenarioForCinematics");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.ActivateScenario
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// const float                             ChangeSpeedMultiplier_0                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingScenarioReference_C::ActivateScenario(const float ChangeSpeedMultiplier_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "ActivateScenario");

	Params::BP_LightingScenarioReference_C_ActivateScenario Parms{};

	Parms.ChangeSpeedMultiplier_0 = ChangeSpeedMultiplier_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.CheckForErrors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_LightingScenarioReference_C::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "CheckForErrors");

	Params::BP_LightingScenarioReference_C_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.DeactivateAllScenarios
// (BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::DeactivateAllScenarios()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "DeactivateAllScenarios");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.DeactivatePreviousAtmosphere
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::DeactivatePreviousAtmosphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "DeactivatePreviousAtmosphere");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.DeactiveLightingForCinematic
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_LightingScenarioReference_C*  LightingScenarioToActivateAfterCine                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ABP_LightingScenarioReference_C::DeactiveLightingForCinematic(class ABP_LightingScenarioReference_C* LightingScenarioToActivateAfterCine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "DeactiveLightingForCinematic");

	Params::BP_LightingScenarioReference_C_DeactiveLightingForCinematic Parms{};

	Parms.LightingScenarioToActivateAfterCine = LightingScenarioToActivateAfterCine;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.DEBUG_ActivateScenario
// (BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::DEBUG_ActivateScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "DEBUG_ActivateScenario");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.ExecuteUbergraph_BP_LightingScenarioReference
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingScenarioReference_C::ExecuteUbergraph_BP_LightingScenarioReference(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "ExecuteUbergraph_BP_LightingScenarioReference");

	Params::BP_LightingScenarioReference_C_ExecuteUbergraph_BP_LightingScenarioReference Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_LightingScenarioReference_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.ScenarioHide
// (BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::ScenarioHide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "ScenarioHide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.SetNewAtmosphere
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::SetNewAtmosphere()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "SetNewAtmosphere");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.SetSequencer_OverrideLightingScenario
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_LightingScenarioReference_C::SetSequencer_OverrideLightingScenario(bool NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "SetSequencer_OverrideLightingScenario");

	Params::BP_LightingScenarioReference_C_SetSequencer_OverrideLightingScenario Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_LightingScenarioReference.BP_LightingScenarioReference_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_LightingScenarioReference_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_LightingScenarioReference_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}

}

