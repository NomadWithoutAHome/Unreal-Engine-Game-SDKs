#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ConditionChecker_BinaryLogicOperators

#include "Basic.hpp"

#include "BP_ConditionChecker_BinaryLogicOperators_classes.hpp"
#include "BP_ConditionChecker_BinaryLogicOperators_parameters.hpp"


namespace SDK
{

// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.BindEventOnGameStateChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_BinaryLogicOperators_C::BindEventOnGameStateChanged(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "BindEventOnGameStateChanged");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_BindEventOnGameStateChanged Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.Check_AND
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_BinaryLogicOperators_C::Check_AND(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "Check_AND");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_Check_AND Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.Check_OR
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_BinaryLogicOperators_C::Check_OR(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "Check_OR");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_Check_OR Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.Check_XOR
// (Private, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_BinaryLogicOperators_C::Check_XOR(bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "Check_XOR");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_Check_XOR Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.CheckInternal
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UBP_ConditionChecker_BinaryLogicOperators_C::CheckInternal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "CheckInternal");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_CheckInternal Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.UnbindEventOnGameStateChanged
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TDelegate<void()>&                Event                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)

void UBP_ConditionChecker_BinaryLogicOperators_C::UnbindEventOnGameStateChanged(const TDelegate<void()>& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "UnbindEventOnGameStateChanged");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_UnbindEventOnGameStateChanged Parms{};

	Parms.Event = Event;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_ConditionChecker_BinaryLogicOperators.BP_ConditionChecker_BinaryLogicOperators_C.ValidateConditionChecker
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString&                          PropertyPath                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash)

void UBP_ConditionChecker_BinaryLogicOperators_C::ValidateConditionChecker(TArray<class FText>& ErrorMessages, class FString& PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_ConditionChecker_BinaryLogicOperators_C", "ValidateConditionChecker");

	Params::BP_ConditionChecker_BinaryLogicOperators_C_ValidateConditionChecker Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);
	Parms.PropertyPath = std::move(PropertyPath);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);
	PropertyPath = std::move(Parms.PropertyPath);
}

}

