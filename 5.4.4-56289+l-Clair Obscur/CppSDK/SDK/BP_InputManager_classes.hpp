#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_InputManager

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "FInputLayer_structs.hpp"
#include "InputCore_structs.hpp"
#include "EInputType_structs.hpp"
#include "EInputAction_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_InputManager.BP_InputManager_C
// 0x0118 (0x01B8 - 0x00A0)
class UBP_InputManager_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class FName, class UBP_InputKeyState_C*> KeyStates;                                         // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	EInputType                                    CurrentInputType;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          AutoSwitchInputType;                               // 0x00F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFInputLayer>                   InputLayersStack;                                  // 0x0100(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<EInputAction>                          AllowedInputActions;                               // 0x0110(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bLocked;                                           // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<struct FKey>                             ConsumedInputKeys;                                 // 0x0128(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(EInputType NewInputType)> OnInputTypeChanged;                      // 0x0178(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<struct FInputActionKeyMapping>         ActionMappingsByName;                              // 0x0188(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FGuid                                  UINavigationLayerID;                               // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RegisterInUINavigationLayer;                       // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x3];                                      // 0x01A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UINavigationLayerIndex;                            // 0x01AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DEBUG_LogEnabled;                                  // 0x01B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindToActionAxis(EInputAction Action, const TDelegate<void(double Value)>& Event, class UObject* Object);
	void BindToActionPressed(EInputAction Action, const TDelegate<void()>& Event, class UObject* Object);
	void BindToActionPressedKey(EInputAction Action, class UObject* Object, const TDelegate<void(class UBP_InputKeyState_C* KeyState)>& Event);
	void BindToActionPressedReleased(EInputAction Action, const TDelegate<void()>& PressedEvent, const TDelegate<void()>& Released, class UObject* Object);
	void BindToActionReleased(EInputAction Action, const TDelegate<void()>& Event, class UObject* BoundObject);
	void CreateInputLayer(bool IsModal, struct FGuid* Guid);
	void CustomEvent_0(EInputType InputType);
	void DEBUG_SetVerboseEnabled(bool Enabled);
	void DeleteInputLayerByGUID(struct FGuid& Guid);
	void DisplayTutoPanel(class FName RowName);
	void ExecuteUbergraph_BP_InputManager(int32 EntryPoint);
	void FindLayerByGUID(struct FGuid& Guid, struct FFInputLayer* Output, int32* Array_Index);
	void GetActionKeyState(const class FName& ActionName, bool* IsKeyDown, EInputType* InputType, double* AxisValue, struct FKey* Key);
	void GetActionStateObject(EInputAction ActionName, class UBP_InputKeyState_C** Value);
	void GetActionStateObject_FromLayer(EInputAction ActionName, struct FFInputLayer& InputLayer, class UBP_InputKeyState_C** Value);
	void GetActionStateObjectByName(class FName ActionName, class UBP_InputKeyState_C** Value);
	void GetAllActionNames(TArray<class FName>* ActionNames);
	void GetAllActionNamesFromEnum(TArray<class FName>* ActionNames);
	void GetBaseBindingKey(EInputAction GameAction, struct FKey* Key);
	void GetBaseBindingKeyByName(const class FString& InputActionName, struct FKey* Key);
	void GetBaseBindingKeyVisualInfo(EInputAction GameAction, struct FFKeyVisualInfo* KeyVisualInfo);
	void GetCurrentLayer(struct FFInputLayer* Output);
	void GetKeyVisualInfo(const struct FKey& Key, struct FFKeyVisualInfo* KeyVisualInfo);
	void ProcessTextForInlineInputTag(const class FText& Input, class FText* Output);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ResetInputActionRestriction();
	void SetAllInputBlocked(bool bLocked_0);
	void SetInputActionsRestriction(TArray<EInputAction>& InputActions, bool AllowNavigation);
	void SetInputActionsRestriction_NavigationOnly(bool AllowConfirm);
	void UnbindToActionPressed(EInputAction Action, const TDelegate<void()>& Event, class UObject* Object);
	void UnbindToActionPressedByObject(EInputAction Action, class UObject* Object);
	void UnbindToActionReleasedByEvent(EInputAction Action, const TDelegate<void()>& Event);
	void UnbindToActionReleasedByObjectReal(EInputAction Action, class UObject* Object);
	void UpdateLayerForKey(EInputAction InputAction, bool IsKeyDown, double AxisValue, const struct FKey& Key, const struct FFInputLayer& Layer);
	void UpdateLayersForKey(EInputAction InputAction, bool IsKeyDown, double AxisValue, const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_InputManager_C">();
	}
	static class UBP_InputManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_InputManager_C>();
	}
};
static_assert(alignof(UBP_InputManager_C) == 0x000008, "Wrong alignment on UBP_InputManager_C");
static_assert(sizeof(UBP_InputManager_C) == 0x0001B8, "Wrong size on UBP_InputManager_C");
static_assert(offsetof(UBP_InputManager_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_InputManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, KeyStates) == 0x0000A8, "Member 'UBP_InputManager_C::KeyStates' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, CurrentInputType) == 0x0000F8, "Member 'UBP_InputManager_C::CurrentInputType' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, AutoSwitchInputType) == 0x0000F9, "Member 'UBP_InputManager_C::AutoSwitchInputType' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, InputLayersStack) == 0x000100, "Member 'UBP_InputManager_C::InputLayersStack' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, AllowedInputActions) == 0x000110, "Member 'UBP_InputManager_C::AllowedInputActions' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, bLocked) == 0x000120, "Member 'UBP_InputManager_C::bLocked' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, ConsumedInputKeys) == 0x000128, "Member 'UBP_InputManager_C::ConsumedInputKeys' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, OnInputTypeChanged) == 0x000178, "Member 'UBP_InputManager_C::OnInputTypeChanged' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, ActionMappingsByName) == 0x000188, "Member 'UBP_InputManager_C::ActionMappingsByName' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, UINavigationLayerID) == 0x000198, "Member 'UBP_InputManager_C::UINavigationLayerID' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, RegisterInUINavigationLayer) == 0x0001A8, "Member 'UBP_InputManager_C::RegisterInUINavigationLayer' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, UINavigationLayerIndex) == 0x0001AC, "Member 'UBP_InputManager_C::UINavigationLayerIndex' has a wrong offset!");
static_assert(offsetof(UBP_InputManager_C, DEBUG_LogEnabled) == 0x0001B0, "Member 'UBP_InputManager_C::DEBUG_LogEnabled' has a wrong offset!");

}

