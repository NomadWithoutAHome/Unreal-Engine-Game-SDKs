#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_PictoCombatStat

#include "Basic.hpp"

#include "E_jRPG_StatType_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_PictoCombatStat.WBP_PictoCombatStat_C.ExecuteUbergraph_WBP_PictoCombatStat
// 0x0008 (0x0008 - 0x0000)
struct WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat) == 0x000004, "Wrong alignment on WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat");
static_assert(sizeof(WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat) == 0x000008, "Wrong size on WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat");
static_assert(offsetof(WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat, EntryPoint) == 0x000000, "Member 'WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat, K2Node_Event_IsDesignTime) == 0x000004, "Member 'WBP_PictoCombatStat_C_ExecuteUbergraph_WBP_PictoCombatStat::K2Node_Event_IsDesignTime' has a wrong offset!");

// Function WBP_PictoCombatStat.WBP_PictoCombatStat_C.GetStatType
// 0x0001 (0x0001 - 0x0000)
struct WBP_PictoCombatStat_C_GetStatType final
{
public:
	E_jRPG_StatType                               OutStatType;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoCombatStat_C_GetStatType) == 0x000001, "Wrong alignment on WBP_PictoCombatStat_C_GetStatType");
static_assert(sizeof(WBP_PictoCombatStat_C_GetStatType) == 0x000001, "Wrong size on WBP_PictoCombatStat_C_GetStatType");
static_assert(offsetof(WBP_PictoCombatStat_C_GetStatType, OutStatType) == 0x000000, "Member 'WBP_PictoCombatStat_C_GetStatType::OutStatType' has a wrong offset!");

// Function WBP_PictoCombatStat.WBP_PictoCombatStat_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_PictoCombatStat_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoCombatStat_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_PictoCombatStat_C_PreConstruct");
static_assert(sizeof(WBP_PictoCombatStat_C_PreConstruct) == 0x000001, "Wrong size on WBP_PictoCombatStat_C_PreConstruct");
static_assert(offsetof(WBP_PictoCombatStat_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_PictoCombatStat_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_PictoCombatStat.WBP_PictoCombatStat_C.SetStatType
// 0x0001 (0x0001 - 0x0000)
struct WBP_PictoCombatStat_C_SetStatType final
{
public:
	E_jRPG_StatType                               StatType_0;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_PictoCombatStat_C_SetStatType) == 0x000001, "Wrong alignment on WBP_PictoCombatStat_C_SetStatType");
static_assert(sizeof(WBP_PictoCombatStat_C_SetStatType) == 0x000001, "Wrong size on WBP_PictoCombatStat_C_SetStatType");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatType, StatType_0) == 0x000000, "Member 'WBP_PictoCombatStat_C_SetStatType::StatType_0' has a wrong offset!");

// Function WBP_PictoCombatStat.WBP_PictoCombatStat_C.SetStatValue
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_PictoCombatStat_C_SetStatValue final
{
public:
	int32                                         InStatValue;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0008(0x0010)()
	E_jRPG_StatType                               CallFunc_GetStatType_OutStatType;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0020(0x0048)(HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0070(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0080(0x0010)()
	class FText                                   CallFunc_StatTypeToTextLong_Text;                  // 0x0090(0x0010)()
	class FText                                   K2Node_Select_Default;                             // 0x00A0(0x0010)()
};
static_assert(alignof(WBP_PictoCombatStat_C_SetStatValue) == 0x000008, "Wrong alignment on WBP_PictoCombatStat_C_SetStatValue");
static_assert(sizeof(WBP_PictoCombatStat_C_SetStatValue) == 0x0000B0, "Wrong size on WBP_PictoCombatStat_C_SetStatValue");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, InStatValue) == 0x000000, "Member 'WBP_PictoCombatStat_C_SetStatValue::InStatValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, Temp_bool_Variable) == 0x000004, "Member 'WBP_PictoCombatStat_C_SetStatValue::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, CallFunc_Conv_IntToText_ReturnValue) == 0x000008, "Member 'WBP_PictoCombatStat_C_SetStatValue::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, CallFunc_GetStatType_OutStatType) == 0x000018, "Member 'WBP_PictoCombatStat_C_SetStatValue::CallFunc_GetStatType_OutStatType' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, K2Node_MakeStruct_FormatArgumentData) == 0x000020, "Member 'WBP_PictoCombatStat_C_SetStatValue::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000068, "Member 'WBP_PictoCombatStat_C_SetStatValue::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, K2Node_MakeArray_Array) == 0x000070, "Member 'WBP_PictoCombatStat_C_SetStatValue::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, CallFunc_Format_ReturnValue) == 0x000080, "Member 'WBP_PictoCombatStat_C_SetStatValue::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, CallFunc_StatTypeToTextLong_Text) == 0x000090, "Member 'WBP_PictoCombatStat_C_SetStatValue::CallFunc_StatTypeToTextLong_Text' has a wrong offset!");
static_assert(offsetof(WBP_PictoCombatStat_C_SetStatValue, K2Node_Select_Default) == 0x0000A0, "Member 'WBP_PictoCombatStat_C_SetStatValue::K2Node_Select_Default' has a wrong offset!");

}

