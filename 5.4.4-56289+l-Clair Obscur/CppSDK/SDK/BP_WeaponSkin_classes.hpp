#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WeaponSkin

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "EAttackType_structs.hpp"
#include "EPermeateIntensity_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WeaponSkin.BP_WeaponSkin_C
// 0x01E8 (0x0478 - 0x0290)
class ABP_WeaponSkin_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      WeaponFX_R;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      WeaponFX_L;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Weapon_L_SM_Blade;                                 // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Weapon_R_SM_Blade;                                 // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VelocityPointL;                                    // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        VelocityPointR;                                    // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Weapon_R_SM_Handle;                                // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Weapon_L_SM_Handle;                                // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponMesh_L_SK;                                   // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 WeaponMesh_R_SK;                                   // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         RotateWeapon_Rotation_9879069D494C5A58FBA951A87074A7F0; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            RotateWeapon__Direction_9879069D494C5A58FBA951A87074A7F0; // 0x02F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     RotateWeapon;                                      // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponL_A_D_0to1_C1F0AC844476AA8ADF8EC79F0D31F2A4; // 0x0300(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WeaponL_A_D__Direction_C1F0AC844476AA8ADF8EC79F0D31F2A4; // 0x0304(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_305[0x3];                                      // 0x0305(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     D;                                                 // 0x0308(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponR_A_D_0to1_64FFD34640A16987023F0E8DFE88BE4B; // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            WeaponR_A_D__Direction_64FFD34640A16987023F0E8DFE88BE4B; // 0x0314(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_315[0x3];                                      // 0x0315(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     D_0;                                               // 0x0318(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FDataTableRowHandle                    WeaponName;                                        // 0x0320(0x0010)(Edit, BlueprintVisible, NoDestructor)
	struct FLinearColor                           Color;                                             // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Emissive_Color;                                    // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Glow;                                              // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fresnel_Power;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Lifetime;                                          // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Trail_Color;                                       // 0x0368(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Trail_Emissive_Color;                              // 0x0378(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Trail_Glow;                                        // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Trail_Texture;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        TrailRibbonWidthL;                                 // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TrailRibbonWidthR;                                 // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeaponLColorLinkedToSkin;                          // 0x03A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeaponRColorLinkedToSkin;                          // 0x03A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AA[0x2];                                      // 0x03AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           UnlinkedColorL;                                    // 0x03AC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlinkedColorR;                                    // 0x03BC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlinkedEmissiveColorL;                            // 0x03CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           UnlinkedEmissiveColorR;                            // 0x03DC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAttackType                                   CurrentPermeateType;                               // 0x03EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPermeateIntensity                            CurrentPermeateIntensity;                          // 0x03ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDirty;                                           // 0x03EE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3EF[0x1];                                      // 0x03EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PreviousLocationR;                                 // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                PreviousLocationL;                                 // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WeaponDeactivated;                                 // 0x0420(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_421[0x7];                                      // 0x0421(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 MeshComponentArrayR;                               // 0x0428(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 MeshComponentArrayL;                               // 0x0438(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UNiagaraComponent*>              ArrayOfFXAppearanceL;                              // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UNiagaraComponent*>              ArrayOfFXAppearanceR;                              // 0x0458(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UMeshComponent*>                 MeshComponentArrayAll;                             // 0x0468(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void GetAllTrailsOnWeaponL(TArray<class UNiagaraComponent*>* TrailsArrayL);
	void GetAllTrailsOnWeaponR(TArray<class UNiagaraComponent*>* TrailsArrayR);
	void UserConstructionScript();
	void EditorCheckData();
	void EditorValidatePartsGetters(bool* HasErrors, TArray<class FString>* Errors);
	void SpawnFXOnWeaponRParts();
	void SpawnFXOnWeaponLParts();
	void GetAllWeaponLParts(TArray<class UMeshComponent*>* MeshComponentL);
	void GetAllWeaponRParts(TArray<class UMeshComponent*>* MeshComponentR);
	void WeaponSummon_Instant(bool R, bool L, bool Unsummon);
	void GetWeaponR_VelocityAndSpeed(struct FVector* Velocity, double* Speed);
	void GetWeaponL_VelocityAndSpeed(struct FVector* Velocity, double* Speed);
	void SetGlow(double Glow_0);
	void SetEmissive_Color(const struct FLinearColor& Emissive_Color_0);
	void UpdateVisualParameters();
	void SetColor(const struct FLinearColor& Color_0);
	void UpdatePermeate(class USkeletalMeshComponent* SkeletalMesh, EAttackType PermeateType, EPermeateIntensity PermeateIntensity, float TrailWidth);
	void IfNotLinkedUpdateColorR(const struct FLinearColor& Color_0, const struct FLinearColor& EmissiveColor);
	void IfNotLinkedUpdateColorL(const struct FLinearColor& Color_0, const struct FLinearColor& EmissiveColor);
	void SetWeaponTrailParameter(TArray<class UFXSystemComponent*>& Trail);
	void SetWeaponMaterialParameter(class UMeshComponent* weapon);
	void D__FinishedFunc();
	void D__UpdateFunc();
	void D__FinishedFunc_0();
	void D__UpdateFunc_0();
	void RotateWeapon__FinishedFunc();
	void RotateWeapon__UpdateFunc();
	void UpdatePermeateFeedback(EAttackType PermeateType, EPermeateIntensity PermeateIntensity);
	void ActivateTrails(const bool AllTrails, bool R, bool L);
	void DeactivateTrails(const bool AllTrails, bool R, bool L);
	void SetSphereInteractionWithCharaHands(const struct FVector& PositionHandR, const struct FVector& PositionHandL);
	void ActivateFX(const bool AllFX, bool R, bool L);
	void DeactivateFX(const bool AllFX, bool R, bool L);
	void WeaponDisappear(double DisappearTime, bool AllWeapons, bool R, bool L);
	void WeaponAppear(double AppearTime, bool AllWeapons, bool R, bool L);
	void UpdateVisualPermeateFeedback();
	void Func_D_0(bool IsActive);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void RotateWeaponAlongAxis(const double Speed, const struct FVector& Axis, bool WeaponL, double Degree);
	void SetVisibilityOnTrails(const bool AllTrails, bool R, bool L);
	void SetVisibilityOffTrails(const bool AllTrails, bool R, bool L);
	void ExecuteUbergraph_BP_WeaponSkin(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WeaponSkin_C">();
	}
	static class ABP_WeaponSkin_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WeaponSkin_C>();
	}
};
static_assert(alignof(ABP_WeaponSkin_C) == 0x000008, "Wrong alignment on ABP_WeaponSkin_C");
static_assert(sizeof(ABP_WeaponSkin_C) == 0x000478, "Wrong size on ABP_WeaponSkin_C");
static_assert(offsetof(ABP_WeaponSkin_C, UberGraphFrame) == 0x000290, "Member 'ABP_WeaponSkin_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponFX_R) == 0x000298, "Member 'ABP_WeaponSkin_C::WeaponFX_R' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponFX_L) == 0x0002A0, "Member 'ABP_WeaponSkin_C::WeaponFX_L' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Weapon_L_SM_Blade) == 0x0002A8, "Member 'ABP_WeaponSkin_C::Weapon_L_SM_Blade' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Weapon_R_SM_Blade) == 0x0002B0, "Member 'ABP_WeaponSkin_C::Weapon_R_SM_Blade' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, VelocityPointL) == 0x0002B8, "Member 'ABP_WeaponSkin_C::VelocityPointL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, VelocityPointR) == 0x0002C0, "Member 'ABP_WeaponSkin_C::VelocityPointR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Weapon_R_SM_Handle) == 0x0002C8, "Member 'ABP_WeaponSkin_C::Weapon_R_SM_Handle' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Weapon_L_SM_Handle) == 0x0002D0, "Member 'ABP_WeaponSkin_C::Weapon_L_SM_Handle' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponMesh_L_SK) == 0x0002D8, "Member 'ABP_WeaponSkin_C::WeaponMesh_L_SK' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponMesh_R_SK) == 0x0002E0, "Member 'ABP_WeaponSkin_C::WeaponMesh_R_SK' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, DefaultSceneRoot) == 0x0002E8, "Member 'ABP_WeaponSkin_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, RotateWeapon_Rotation_9879069D494C5A58FBA951A87074A7F0) == 0x0002F0, "Member 'ABP_WeaponSkin_C::RotateWeapon_Rotation_9879069D494C5A58FBA951A87074A7F0' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, RotateWeapon__Direction_9879069D494C5A58FBA951A87074A7F0) == 0x0002F4, "Member 'ABP_WeaponSkin_C::RotateWeapon__Direction_9879069D494C5A58FBA951A87074A7F0' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, RotateWeapon) == 0x0002F8, "Member 'ABP_WeaponSkin_C::RotateWeapon' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponL_A_D_0to1_C1F0AC844476AA8ADF8EC79F0D31F2A4) == 0x000300, "Member 'ABP_WeaponSkin_C::WeaponL_A_D_0to1_C1F0AC844476AA8ADF8EC79F0D31F2A4' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponL_A_D__Direction_C1F0AC844476AA8ADF8EC79F0D31F2A4) == 0x000304, "Member 'ABP_WeaponSkin_C::WeaponL_A_D__Direction_C1F0AC844476AA8ADF8EC79F0D31F2A4' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, D) == 0x000308, "Member 'ABP_WeaponSkin_C::D' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponR_A_D_0to1_64FFD34640A16987023F0E8DFE88BE4B) == 0x000310, "Member 'ABP_WeaponSkin_C::WeaponR_A_D_0to1_64FFD34640A16987023F0E8DFE88BE4B' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponR_A_D__Direction_64FFD34640A16987023F0E8DFE88BE4B) == 0x000314, "Member 'ABP_WeaponSkin_C::WeaponR_A_D__Direction_64FFD34640A16987023F0E8DFE88BE4B' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, D_0) == 0x000318, "Member 'ABP_WeaponSkin_C::D_0' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponName) == 0x000320, "Member 'ABP_WeaponSkin_C::WeaponName' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Color) == 0x000330, "Member 'ABP_WeaponSkin_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Emissive_Color) == 0x000340, "Member 'ABP_WeaponSkin_C::Emissive_Color' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Glow) == 0x000350, "Member 'ABP_WeaponSkin_C::Glow' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Fresnel_Power) == 0x000358, "Member 'ABP_WeaponSkin_C::Fresnel_Power' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Lifetime) == 0x000360, "Member 'ABP_WeaponSkin_C::Lifetime' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Trail_Color) == 0x000368, "Member 'ABP_WeaponSkin_C::Trail_Color' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Trail_Emissive_Color) == 0x000378, "Member 'ABP_WeaponSkin_C::Trail_Emissive_Color' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Trail_Glow) == 0x000388, "Member 'ABP_WeaponSkin_C::Trail_Glow' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, Trail_Texture) == 0x000390, "Member 'ABP_WeaponSkin_C::Trail_Texture' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, TrailRibbonWidthL) == 0x000398, "Member 'ABP_WeaponSkin_C::TrailRibbonWidthL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, TrailRibbonWidthR) == 0x0003A0, "Member 'ABP_WeaponSkin_C::TrailRibbonWidthR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponLColorLinkedToSkin) == 0x0003A8, "Member 'ABP_WeaponSkin_C::WeaponLColorLinkedToSkin' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponRColorLinkedToSkin) == 0x0003A9, "Member 'ABP_WeaponSkin_C::WeaponRColorLinkedToSkin' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, UnlinkedColorL) == 0x0003AC, "Member 'ABP_WeaponSkin_C::UnlinkedColorL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, UnlinkedColorR) == 0x0003BC, "Member 'ABP_WeaponSkin_C::UnlinkedColorR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, UnlinkedEmissiveColorL) == 0x0003CC, "Member 'ABP_WeaponSkin_C::UnlinkedEmissiveColorL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, UnlinkedEmissiveColorR) == 0x0003DC, "Member 'ABP_WeaponSkin_C::UnlinkedEmissiveColorR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, CurrentPermeateType) == 0x0003EC, "Member 'ABP_WeaponSkin_C::CurrentPermeateType' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, CurrentPermeateIntensity) == 0x0003ED, "Member 'ABP_WeaponSkin_C::CurrentPermeateIntensity' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, IsDirty) == 0x0003EE, "Member 'ABP_WeaponSkin_C::IsDirty' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, PreviousLocationR) == 0x0003F0, "Member 'ABP_WeaponSkin_C::PreviousLocationR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, PreviousLocationL) == 0x000408, "Member 'ABP_WeaponSkin_C::PreviousLocationL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, WeaponDeactivated) == 0x000420, "Member 'ABP_WeaponSkin_C::WeaponDeactivated' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, MeshComponentArrayR) == 0x000428, "Member 'ABP_WeaponSkin_C::MeshComponentArrayR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, MeshComponentArrayL) == 0x000438, "Member 'ABP_WeaponSkin_C::MeshComponentArrayL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, ArrayOfFXAppearanceL) == 0x000448, "Member 'ABP_WeaponSkin_C::ArrayOfFXAppearanceL' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, ArrayOfFXAppearanceR) == 0x000458, "Member 'ABP_WeaponSkin_C::ArrayOfFXAppearanceR' has a wrong offset!");
static_assert(offsetof(ABP_WeaponSkin_C, MeshComponentArrayAll) == 0x000468, "Member 'ABP_WeaponSkin_C::MeshComponentArrayAll' has a wrong offset!");

}

