#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FreeAim

#include "Basic.hpp"

#include "S_FreeAimTargetData_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_jRPG_CharacterWorldCapability_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FreeAim.BP_FreeAim_C
// 0x00C8 (0x0168 - 0x00A0)
class UBP_FreeAim_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          IsInFreeAimMode;                                   // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        AimReach;                                          // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 FreeAimTarget;                                     // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_FreeAimTargetData                   FreeAimTargetData;                                 // 0x00C0(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FS_FreeAimTargetData                   PreviousFreeAimTargetData;                         // 0x0108(0x0048)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FreeAimShootAnimation;                             // 0x0150(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class ACharacter*>                     DetectedCharacters;                                // 0x0158(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)

public:
	void ComputeRaycastParameters(struct FVector* Start, struct FVector* End, struct FVector* Direction);
	void DetectAndUpdateCharacters(const struct FVector& Start, const struct FVector& End);
	void EnterFreeAim();
	void ExecuteUbergraph_BP_FreeAim(int32 EntryPoint);
	void ExitFreeAim();
	void GetCrosshair(class UWBP_CrossHair_C** Crosshair);
	class ABP_FreeAimCamera_C* GetFreeAimCameraActor();
	class ABP_jRPG_Character_World_C* GetOwnerAsCharacterWorld();
	class ABP_jRPG_Controller_World_C* GetOwnerController();
	bool IsInFreeAim();
	void PerformFreeAimRaycast(const struct FVector& Start, const struct FVector& End, bool* HasHit, float* HitDistance, struct FVector* HitLocation, class AActor** HitActor);
	void PerformShoot();
	void PerformShootProjectileFeedback();
	void ReceiveTick(float DeltaSeconds);
	void ResetFreeAimData();
	void SpawnProjectile();
	void ToggleCamera(bool Enable);
	void ToggleFreeAim();
	void UpdateFreeAim(double DeltaSeconds);
	void UpdateFreeAimArmRing();
	void UpdateFreeAimCrosshair();
	void UpdateFreeAimFeedback();
	void UpdateMeshSettingsForDetectedCharacter(EKinematicBonesUpdateToPhysics KinematicBonesUpdateType, class ACharacter* Character);
	void UpdateMeshSettingsForDetectedCharacters(EKinematicBonesUpdateToPhysics Kinematic_Bones_Update_Type);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FreeAim_C">();
	}
	static class UBP_FreeAim_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_FreeAim_C>();
	}
};
static_assert(alignof(UBP_FreeAim_C) == 0x000008, "Wrong alignment on UBP_FreeAim_C");
static_assert(sizeof(UBP_FreeAim_C) == 0x000168, "Wrong size on UBP_FreeAim_C");
static_assert(offsetof(UBP_FreeAim_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_FreeAim_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, IsInFreeAimMode) == 0x0000A8, "Member 'UBP_FreeAim_C::IsInFreeAimMode' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, AimReach) == 0x0000B0, "Member 'UBP_FreeAim_C::AimReach' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, FreeAimTarget) == 0x0000B8, "Member 'UBP_FreeAim_C::FreeAimTarget' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, FreeAimTargetData) == 0x0000C0, "Member 'UBP_FreeAim_C::FreeAimTargetData' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, PreviousFreeAimTargetData) == 0x000108, "Member 'UBP_FreeAim_C::PreviousFreeAimTargetData' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, FreeAimShootAnimation) == 0x000150, "Member 'UBP_FreeAim_C::FreeAimShootAnimation' has a wrong offset!");
static_assert(offsetof(UBP_FreeAim_C, DetectedCharacters) == 0x000158, "Member 'UBP_FreeAim_C::DetectedCharacters' has a wrong offset!");

}

