#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlyingIndicator

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "FSoundEvent_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FlyingIndicator.BP_FlyingIndicator_C
// 0x0190 (0x0420 - 0x0290)
class ABP_FlyingIndicator_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara1;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_PainCage_Button_Activate;                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_PainCage_Button_Travel;                         // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        AC_FlyingIndicator_FlyToTarget;                    // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        MovableScene;                                      // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       FollowSpline;                                      // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0To1_Float_CE85573544D32266635F3592B77B5E10; // 0x02D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0To1__Direction_CE85573544D32266635F3592B77B5E10; // 0x02DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2DD[0x3];                                      // 0x02DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0To1;                                     // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_ZTrackStart_C3A6DD3C42E75FF2AD7EB99B911C0E8C; // 0x02E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Z_TrackEnd_C3A6DD3C42E75FF2AD7EB99B911C0E8C; // 0x02EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Y_Track_C3A6DD3C42E75FF2AD7EB99B911C0E8C; // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_X_track_C3A6DD3C42E75FF2AD7EB99B911C0E8C; // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_C3A6DD3C42E75FF2AD7EB99B911C0E8C; // 0x02F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x0300(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_308[0x8];                                      // 0x0308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             StartTransform;                                    // 0x0310(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TargetTransform;                                   // 0x0370(0x0060)(Edit, BlueprintVisible, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          Ztrack;                                            // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D1[0x7];                                      // 0x03D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOnAtChanged;                               // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartLoc;                                          // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MidPathHeight;                                     // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	class AActor*                                 Target;                                            // 0x0410(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FFSoundEvent                           AC_FlyingIndicator_Explosion;                      // 0x0418(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)

public:
	void Timeline_0To1__UpdateFunc();
	void Timeline_0To1__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Timeline_0__ChangeZtrack__EventFunc();
	void ReceiveBeginPlay();
	void OnFlyToTargetDone();
	void FlyToTargetWithSpline(class USplineComponent* Spline);
	void FlyToTarget();
	void ExecuteUbergraph_BP_FlyingIndicator(int32 EntryPoint);
	void CopyFollowSpline(class USplineComponent* SplineComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FlyingIndicator_C">();
	}
	static class ABP_FlyingIndicator_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FlyingIndicator_C>();
	}
};
static_assert(alignof(ABP_FlyingIndicator_C) == 0x000010, "Wrong alignment on ABP_FlyingIndicator_C");
static_assert(sizeof(ABP_FlyingIndicator_C) == 0x000420, "Wrong size on ABP_FlyingIndicator_C");
static_assert(offsetof(ABP_FlyingIndicator_C, UberGraphFrame) == 0x000290, "Member 'ABP_FlyingIndicator_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Niagara1) == 0x000298, "Member 'ABP_FlyingIndicator_C::Niagara1' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, AC_PainCage_Button_Activate) == 0x0002A0, "Member 'ABP_FlyingIndicator_C::AC_PainCage_Button_Activate' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, AC_PainCage_Button_Travel) == 0x0002A8, "Member 'ABP_FlyingIndicator_C::AC_PainCage_Button_Travel' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, AC_FlyingIndicator_FlyToTarget) == 0x0002B0, "Member 'ABP_FlyingIndicator_C::AC_FlyingIndicator_FlyToTarget' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Niagara) == 0x0002B8, "Member 'ABP_FlyingIndicator_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, MovableScene) == 0x0002C0, "Member 'ABP_FlyingIndicator_C::MovableScene' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, FollowSpline) == 0x0002C8, "Member 'ABP_FlyingIndicator_C::FollowSpline' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, DefaultSceneRoot) == 0x0002D0, "Member 'ABP_FlyingIndicator_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0To1_Float_CE85573544D32266635F3592B77B5E10) == 0x0002D8, "Member 'ABP_FlyingIndicator_C::Timeline_0To1_Float_CE85573544D32266635F3592B77B5E10' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0To1__Direction_CE85573544D32266635F3592B77B5E10) == 0x0002DC, "Member 'ABP_FlyingIndicator_C::Timeline_0To1__Direction_CE85573544D32266635F3592B77B5E10' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0To1) == 0x0002E0, "Member 'ABP_FlyingIndicator_C::Timeline_0To1' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0_ZTrackStart_C3A6DD3C42E75FF2AD7EB99B911C0E8C) == 0x0002E8, "Member 'ABP_FlyingIndicator_C::Timeline_0_ZTrackStart_C3A6DD3C42E75FF2AD7EB99B911C0E8C' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0_Z_TrackEnd_C3A6DD3C42E75FF2AD7EB99B911C0E8C) == 0x0002EC, "Member 'ABP_FlyingIndicator_C::Timeline_0_Z_TrackEnd_C3A6DD3C42E75FF2AD7EB99B911C0E8C' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0_Y_Track_C3A6DD3C42E75FF2AD7EB99B911C0E8C) == 0x0002F0, "Member 'ABP_FlyingIndicator_C::Timeline_0_Y_Track_C3A6DD3C42E75FF2AD7EB99B911C0E8C' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0_X_track_C3A6DD3C42E75FF2AD7EB99B911C0E8C) == 0x0002F4, "Member 'ABP_FlyingIndicator_C::Timeline_0_X_track_C3A6DD3C42E75FF2AD7EB99B911C0E8C' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0__Direction_C3A6DD3C42E75FF2AD7EB99B911C0E8C) == 0x0002F8, "Member 'ABP_FlyingIndicator_C::Timeline_0__Direction_C3A6DD3C42E75FF2AD7EB99B911C0E8C' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Timeline_0) == 0x000300, "Member 'ABP_FlyingIndicator_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, StartTransform) == 0x000310, "Member 'ABP_FlyingIndicator_C::StartTransform' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, TargetTransform) == 0x000370, "Member 'ABP_FlyingIndicator_C::TargetTransform' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Ztrack) == 0x0003D0, "Member 'ABP_FlyingIndicator_C::Ztrack' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, LocationOnAtChanged) == 0x0003D8, "Member 'ABP_FlyingIndicator_C::LocationOnAtChanged' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, StartLoc) == 0x0003F0, "Member 'ABP_FlyingIndicator_C::StartLoc' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, MidPathHeight) == 0x000408, "Member 'ABP_FlyingIndicator_C::MidPathHeight' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, Target) == 0x000410, "Member 'ABP_FlyingIndicator_C::Target' has a wrong offset!");
static_assert(offsetof(ABP_FlyingIndicator_C, AC_FlyingIndicator_Explosion) == 0x000418, "Member 'ABP_FlyingIndicator_C::AC_FlyingIndicator_Explosion' has a wrong offset!");

}

