#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameDifficultyManager

#include "Basic.hpp"

#include "BP_GameDifficultyManager_classes.hpp"
#include "BP_GameDifficultyManager_parameters.hpp"


namespace SDK
{

// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.ApplySelectedGameDifficulty
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DispatchChanges                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameDifficultyManager_C::ApplySelectedGameDifficulty(bool DispatchChanges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "ApplySelectedGameDifficulty");

	Params::BP_GameDifficultyManager_C_ApplySelectedGameDifficulty Parms{};

	Parms.DispatchChanges = DispatchChanges;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.GetCurrentDifficulty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// E_GameDifficulty                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

E_GameDifficulty UBP_GameDifficultyManager_C::GetCurrentDifficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "GetCurrentDifficulty");

	Params::BP_GameDifficultyManager_C_GetCurrentDifficulty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.IsCurrentDifficultyDirty
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsDirty                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameDifficultyManager_C::IsCurrentDifficultyDirty(bool* IsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "IsCurrentDifficultyDirty");

	Params::BP_GameDifficultyManager_C_IsCurrentDifficultyDirty Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsDirty != nullptr)
		*IsDirty = Parms.IsDirty;
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.LoadState
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FS_GameDifficultySaveData& SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameDifficultyManager_C::LoadState(const struct FS_GameDifficultySaveData& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "LoadState");

	Params::BP_GameDifficultyManager_C_LoadState Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.RevertSelectedGameDiffculty
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_GameDifficultyManager_C::RevertSelectedGameDiffculty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "RevertSelectedGameDiffculty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.SaveState
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FS_GameDifficultySaveData&       SaveData                                               (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameDifficultyManager_C::SaveState(struct FS_GameDifficultySaveData& SaveData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "SaveState");

	Params::BP_GameDifficultyManager_C_SaveState Parms{};

	Parms.SaveData = std::move(SaveData);

	UObject::ProcessEvent(Func, &Parms);

	SaveData = std::move(Parms.SaveData);
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.SelectGameDifficulty
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_GameDifficulty                        Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameDifficultyManager_C::SelectGameDifficulty(E_GameDifficulty Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "SelectGameDifficulty");

	Params::BP_GameDifficultyManager_C_SelectGameDifficulty Parms{};

	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_GameDifficultyManager.BP_GameDifficultyManager_C.SetCurrentDifficulty
// (Private, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_GameDifficulty                        Difficulty                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_GameDifficultyManager_C::SetCurrentDifficulty(E_GameDifficulty Difficulty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_GameDifficultyManager_C", "SetCurrentDifficulty");

	Params::BP_GameDifficultyManager_C_SetCurrentDifficulty Parms{};

	Parms.Difficulty = Difficulty;

	UObject::ProcessEvent(Func, &Parms);
}

}

