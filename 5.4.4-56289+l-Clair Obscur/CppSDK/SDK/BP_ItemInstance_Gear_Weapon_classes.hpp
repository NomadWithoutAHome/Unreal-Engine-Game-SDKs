#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_ItemInstance_Gear_Weapon

#include "Basic.hpp"

#include "S_WeaponInstanceData_structs.hpp"
#include "E_jRPG_StatType_structs.hpp"
#include "ECharacterAttribute_structs.hpp"
#include "EWeaponQuality_structs.hpp"
#include "EAttributeScalingGrade_structs.hpp"
#include "S_WeaponDefinition_structs.hpp"
#include "BP_ItemInstance_Gear_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_ItemInstance_Gear_Weapon.BP_ItemInstance_Gear_Weapon_C
// 0x0250 (0x0470 - 0x0220)
class UBP_ItemInstance_Gear_Weapon_C final : public UBP_ItemInstance_Gear_C
{
public:
	struct FS_WeaponInstanceData                  CurrentWeaponInstanceData;                         // 0x0220(0x0110)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated, HasGetValueTypeHash)
	TMap<ECharacterAttribute, EAttributeScalingGrade> CurrentAttributeScaling;                       // 0x0330(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FS_WeaponDefinition                    WeaponDefinition;                                  // 0x0380(0x00F0)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)

public:
	int32 ComputeUnlockedAttributeUpgradeCount();
	TArray<EWeaponQuality> GetAttributeUpgradeRanks();
	TMap<E_jRPG_StatType, double> GetBaseStatsMultipliers();
	TMap<ECharacterAttribute, EAttributeScalingGrade> GetCurrentAttributeScaling();
	class UDataTable* GetScalingDataTable();
	void GetUnlockedPassiveEffectsIDs(TArray<class FName>* PassiveEffectIDs);
	void GetWeaponDefinition(struct FS_WeaponDefinition* WeaponDefinition_0);
	struct FS_WeaponInstanceData GetWeaponInstanceData();
	struct FS_WeaponInstanceHandle LEGACY_GetWeaponInstanceHandle();
	void LoadItemDefinition();
	void RefreshCurrentGearStats();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_ItemInstance_Gear_Weapon_C">();
	}
	static class UBP_ItemInstance_Gear_Weapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_ItemInstance_Gear_Weapon_C>();
	}
};
static_assert(alignof(UBP_ItemInstance_Gear_Weapon_C) == 0x000008, "Wrong alignment on UBP_ItemInstance_Gear_Weapon_C");
static_assert(sizeof(UBP_ItemInstance_Gear_Weapon_C) == 0x000470, "Wrong size on UBP_ItemInstance_Gear_Weapon_C");
static_assert(offsetof(UBP_ItemInstance_Gear_Weapon_C, CurrentWeaponInstanceData) == 0x000220, "Member 'UBP_ItemInstance_Gear_Weapon_C::CurrentWeaponInstanceData' has a wrong offset!");
static_assert(offsetof(UBP_ItemInstance_Gear_Weapon_C, CurrentAttributeScaling) == 0x000330, "Member 'UBP_ItemInstance_Gear_Weapon_C::CurrentAttributeScaling' has a wrong offset!");
static_assert(offsetof(UBP_ItemInstance_Gear_Weapon_C, WeaponDefinition) == 0x000380, "Member 'UBP_ItemInstance_Gear_Weapon_C::WeaponDefinition' has a wrong offset!");

}

