#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BattleTowerSystem

#include "Basic.hpp"

#include "SandFall_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BattleTowerSystem.BP_BattleTowerSystem_C
// 0x0068 (0x0090 - 0x0028)
class UBP_BattleTowerSystem_C final : public UExtendedObject
{
public:
	int32                                         UnlockedBattleIndex;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      BattleVictoryCount;                                // 0x0030(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UDataTable*                             BattleTowerDataTable;                              // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         MaxNumberOfBattles;                                // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ComputeBattleParametersByIndex(int32 BattleIndex, struct FFBattleStartParams* BattleParameters);
	void ComputeBattleRewardParameters(int32 BattleIndex, const struct FS_BattleTowerStageData& BattleTowerStageData, struct FS_BattleRewardParameters* BattleRewardParameters);
	void DEBUG_UnlockAllBattles();
	void FindBattleIDFromIndex(int32 BattleIndex, class FName* BattleID);
	void Initialize();
	void LoadState(const struct FS_BattleTowerSaveData& SaveData);
	void OnBattleVictory(int32 BattleIndex);
	void ResetState();
	void RetrieveUnlockedBattles(TArray<struct FS_BattleTowerStageData>* BatteTowerStageDatas);
	void SaveState(struct FS_BattleTowerSaveData& SaveData);
	void VerifyBattleIndex(int32 BattleIndex, bool* IsValid);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BattleTowerSystem_C">();
	}
	static class UBP_BattleTowerSystem_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_BattleTowerSystem_C>();
	}
};
static_assert(alignof(UBP_BattleTowerSystem_C) == 0x000008, "Wrong alignment on UBP_BattleTowerSystem_C");
static_assert(sizeof(UBP_BattleTowerSystem_C) == 0x000090, "Wrong size on UBP_BattleTowerSystem_C");
static_assert(offsetof(UBP_BattleTowerSystem_C, UnlockedBattleIndex) == 0x000028, "Member 'UBP_BattleTowerSystem_C::UnlockedBattleIndex' has a wrong offset!");
static_assert(offsetof(UBP_BattleTowerSystem_C, BattleVictoryCount) == 0x000030, "Member 'UBP_BattleTowerSystem_C::BattleVictoryCount' has a wrong offset!");
static_assert(offsetof(UBP_BattleTowerSystem_C, BattleTowerDataTable) == 0x000080, "Member 'UBP_BattleTowerSystem_C::BattleTowerDataTable' has a wrong offset!");
static_assert(offsetof(UBP_BattleTowerSystem_C, MaxNumberOfBattles) == 0x000088, "Member 'UBP_BattleTowerSystem_C::MaxNumberOfBattles' has a wrong offset!");

}

