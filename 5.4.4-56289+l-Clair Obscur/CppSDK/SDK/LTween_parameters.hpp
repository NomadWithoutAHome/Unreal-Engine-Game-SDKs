#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LTween

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "LTween_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function LTween.LTweenBPLibrary.ArrayKillIfIsTweening
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_ArrayKillIfIsTweening final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULTweener*>                      inTweenerArray;                                    // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          callComplete;                                      // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_ArrayKillIfIsTweening) == 0x000008, "Wrong alignment on LTweenBPLibrary_ArrayKillIfIsTweening");
static_assert(sizeof(LTweenBPLibrary_ArrayKillIfIsTweening) == 0x000020, "Wrong size on LTweenBPLibrary_ArrayKillIfIsTweening");
static_assert(offsetof(LTweenBPLibrary_ArrayKillIfIsTweening, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_ArrayKillIfIsTweening::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ArrayKillIfIsTweening, inTweenerArray) == 0x000008, "Member 'LTweenBPLibrary_ArrayKillIfIsTweening::inTweenerArray' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ArrayKillIfIsTweening, callComplete) == 0x000018, "Member 'LTweenBPLibrary_ArrayKillIfIsTweening::callComplete' has a wrong offset!");

// Function LTween.LTweenBPLibrary.ColorTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_ColorTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FColor& Value)>   setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 StartValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 endValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_ColorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_ColorTo");
static_assert(sizeof(LTweenBPLibrary_ColorTo) == 0x000038, "Wrong size on LTweenBPLibrary_ColorTo");
static_assert(offsetof(LTweenBPLibrary_ColorTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_ColorTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, setter) == 0x000008, "Member 'LTweenBPLibrary_ColorTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, StartValue) == 0x000018, "Member 'LTweenBPLibrary_ColorTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, endValue) == 0x00001C, "Member 'LTweenBPLibrary_ColorTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_ColorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_ColorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_ColorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_ColorTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_ColorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.CreateSequence
// 0x0010 (0x0010 - 0x0000)
struct LTweenBPLibrary_CreateSequence final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_CreateSequence) == 0x000008, "Wrong alignment on LTweenBPLibrary_CreateSequence");
static_assert(sizeof(LTweenBPLibrary_CreateSequence) == 0x000010, "Wrong size on LTweenBPLibrary_CreateSequence");
static_assert(offsetof(LTweenBPLibrary_CreateSequence, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_CreateSequence::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_CreateSequence, ReturnValue) == 0x000008, "Member 'LTweenBPLibrary_CreateSequence::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.DelayCall
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_DelayCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             delayComplete;                                     // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          affectByGamePause;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          affectByTimeDilation;                              // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_DelayCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_DelayCall");
static_assert(sizeof(LTweenBPLibrary_DelayCall) == 0x000028, "Wrong size on LTweenBPLibrary_DelayCall");
static_assert(offsetof(LTweenBPLibrary_DelayCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_DelayCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, DelayTime) == 0x000008, "Member 'LTweenBPLibrary_DelayCall::DelayTime' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, delayComplete) == 0x00000C, "Member 'LTweenBPLibrary_DelayCall::delayComplete' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, affectByGamePause) == 0x00001C, "Member 'LTweenBPLibrary_DelayCall::affectByGamePause' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, affectByTimeDilation) == 0x00001D, "Member 'LTweenBPLibrary_DelayCall::affectByTimeDilation' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayCall, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_DelayCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.DelayFrameCall
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_DelayFrameCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameCount;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             delayComplete;                                     // 0x000C(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          affectByGamePause;                                 // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_DelayFrameCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_DelayFrameCall");
static_assert(sizeof(LTweenBPLibrary_DelayFrameCall) == 0x000028, "Wrong size on LTweenBPLibrary_DelayFrameCall");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_DelayFrameCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, FrameCount) == 0x000008, "Member 'LTweenBPLibrary_DelayFrameCall::FrameCount' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, delayComplete) == 0x00000C, "Member 'LTweenBPLibrary_DelayFrameCall::delayComplete' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, affectByGamePause) == 0x00001C, "Member 'LTweenBPLibrary_DelayFrameCall::affectByGamePause' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DelayFrameCall, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_DelayFrameCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.DoubleTo
// 0x0040 (0x0040 - 0x0000)
struct LTweenBPLibrary_DoubleTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(double Value)>                 setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        StartValue;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0020(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_DoubleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_DoubleTo");
static_assert(sizeof(LTweenBPLibrary_DoubleTo) == 0x000040, "Wrong size on LTweenBPLibrary_DoubleTo");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_DoubleTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, setter) == 0x000008, "Member 'LTweenBPLibrary_DoubleTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, StartValue) == 0x000018, "Member 'LTweenBPLibrary_DoubleTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, endValue) == 0x000020, "Member 'LTweenBPLibrary_DoubleTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, Duration) == 0x000028, "Member 'LTweenBPLibrary_DoubleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, Delay) == 0x00002C, "Member 'LTweenBPLibrary_DoubleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, Ease) == 0x000030, "Member 'LTweenBPLibrary_DoubleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_DoubleTo, ReturnValue) == 0x000038, "Member 'LTweenBPLibrary_DoubleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.FloatTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_FloatTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float Value)>                  setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_FloatTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_FloatTo");
static_assert(sizeof(LTweenBPLibrary_FloatTo) == 0x000038, "Wrong size on LTweenBPLibrary_FloatTo");
static_assert(offsetof(LTweenBPLibrary_FloatTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_FloatTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, setter) == 0x000008, "Member 'LTweenBPLibrary_FloatTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, StartValue) == 0x000018, "Member 'LTweenBPLibrary_FloatTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, endValue) == 0x00001C, "Member 'LTweenBPLibrary_FloatTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_FloatTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_FloatTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_FloatTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_FloatTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_FloatTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.IntTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_IntTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(int32 Value)>                  setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         endValue;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_IntTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_IntTo");
static_assert(sizeof(LTweenBPLibrary_IntTo) == 0x000038, "Wrong size on LTweenBPLibrary_IntTo");
static_assert(offsetof(LTweenBPLibrary_IntTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_IntTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, setter) == 0x000008, "Member 'LTweenBPLibrary_IntTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, StartValue) == 0x000018, "Member 'LTweenBPLibrary_IntTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, endValue) == 0x00001C, "Member 'LTweenBPLibrary_IntTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_IntTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_IntTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_IntTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IntTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_IntTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.IsTweening
// 0x0018 (0x0018 - 0x0000)
struct LTweenBPLibrary_IsTweening final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              inTweener;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_IsTweening) == 0x000008, "Wrong alignment on LTweenBPLibrary_IsTweening");
static_assert(sizeof(LTweenBPLibrary_IsTweening) == 0x000018, "Wrong size on LTweenBPLibrary_IsTweening");
static_assert(offsetof(LTweenBPLibrary_IsTweening, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_IsTweening::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IsTweening, inTweener) == 0x000008, "Member 'LTweenBPLibrary_IsTweening::inTweener' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_IsTweening, ReturnValue) == 0x000010, "Member 'LTweenBPLibrary_IsTweening::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.KillIfIsTweening
// 0x0018 (0x0018 - 0x0000)
struct LTweenBPLibrary_KillIfIsTweening final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              inTweener;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          callComplete;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_KillIfIsTweening) == 0x000008, "Wrong alignment on LTweenBPLibrary_KillIfIsTweening");
static_assert(sizeof(LTweenBPLibrary_KillIfIsTweening) == 0x000018, "Wrong size on LTweenBPLibrary_KillIfIsTweening");
static_assert(offsetof(LTweenBPLibrary_KillIfIsTweening, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_KillIfIsTweening::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_KillIfIsTweening, inTweener) == 0x000008, "Member 'LTweenBPLibrary_KillIfIsTweening::inTweener' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_KillIfIsTweening, callComplete) == 0x000010, "Member 'LTweenBPLibrary_KillIfIsTweening::callComplete' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LinearColorTo
// 0x0050 (0x0050 - 0x0000)
struct LTweenBPLibrary_LinearColorTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FLinearColor& Value)> setter;                                        // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           StartValue;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LinearColorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LinearColorTo");
static_assert(sizeof(LTweenBPLibrary_LinearColorTo) == 0x000050, "Wrong size on LTweenBPLibrary_LinearColorTo");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_LinearColorTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, setter) == 0x000008, "Member 'LTweenBPLibrary_LinearColorTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, StartValue) == 0x000018, "Member 'LTweenBPLibrary_LinearColorTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, endValue) == 0x000028, "Member 'LTweenBPLibrary_LinearColorTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Duration) == 0x000038, "Member 'LTweenBPLibrary_LinearColorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Delay) == 0x00003C, "Member 'LTweenBPLibrary_LinearColorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, Ease) == 0x000040, "Member 'LTweenBPLibrary_LinearColorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LinearColorTo, ReturnValue) == 0x000048, "Member 'LTweenBPLibrary_LinearColorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_LocalPositionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionTo) == 0x000038, "Wrong size on LTweenBPLibrary_LocalPositionTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_LocalPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_LocalPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_LocalPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_LocalPositionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionTo_Sweep
// 0x0130 (0x0130 - 0x0000)
struct LTweenBPLibrary_LocalPositionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x011C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0124(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionTo_Sweep) == 0x000130, "Wrong size on LTweenBPLibrary_LocalPositionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, SweepHitResult) == 0x000020, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, sweep) == 0x000118, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Teleport) == 0x000119, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Duration) == 0x00011C, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Delay) == 0x000120, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, Ease) == 0x000124, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionTo_Sweep, ReturnValue) == 0x000128, "Member 'LTweenBPLibrary_LocalPositionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionXTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_LocalPositionXTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionXTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionXTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionXTo) == 0x000028, "Wrong size on LTweenBPLibrary_LocalPositionXTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionXTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionXTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Duration) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionXTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Delay) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionXTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, Ease) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionXTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_LocalPositionXTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionXTo_Sweep
// 0x0120 (0x0120 - 0x0000)
struct LTweenBPLibrary_LocalPositionXTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionXTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionXTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionXTo_Sweep) == 0x000120, "Wrong size on LTweenBPLibrary_LocalPositionXTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, SweepHitResult) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, sweep) == 0x000108, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Teleport) == 0x000109, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Duration) == 0x00010C, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Delay) == 0x000110, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, Ease) == 0x000114, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionXTo_Sweep, ReturnValue) == 0x000118, "Member 'LTweenBPLibrary_LocalPositionXTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionYTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_LocalPositionYTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionYTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionYTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionYTo) == 0x000028, "Wrong size on LTweenBPLibrary_LocalPositionYTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionYTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionYTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Duration) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionYTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Delay) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionYTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, Ease) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionYTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_LocalPositionYTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionYTo_Sweep
// 0x0120 (0x0120 - 0x0000)
struct LTweenBPLibrary_LocalPositionYTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionYTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionYTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionYTo_Sweep) == 0x000120, "Wrong size on LTweenBPLibrary_LocalPositionYTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, SweepHitResult) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, sweep) == 0x000108, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Teleport) == 0x000109, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Duration) == 0x00010C, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Delay) == 0x000110, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, Ease) == 0x000114, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionYTo_Sweep, ReturnValue) == 0x000118, "Member 'LTweenBPLibrary_LocalPositionYTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionZTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_LocalPositionZTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionZTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionZTo");
static_assert(sizeof(LTweenBPLibrary_LocalPositionZTo) == 0x000028, "Wrong size on LTweenBPLibrary_LocalPositionZTo");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionZTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionZTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Duration) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionZTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Delay) == 0x000014, "Member 'LTweenBPLibrary_LocalPositionZTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, Ease) == 0x000018, "Member 'LTweenBPLibrary_LocalPositionZTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_LocalPositionZTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalPositionZTo_Sweep
// 0x0120 (0x0120 - 0x0000)
struct LTweenBPLibrary_LocalPositionZTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalPositionZTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalPositionZTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalPositionZTo_Sweep) == 0x000120, "Wrong size on LTweenBPLibrary_LocalPositionZTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, SweepHitResult) == 0x000010, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, sweep) == 0x000108, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Teleport) == 0x000109, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Duration) == 0x00010C, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Delay) == 0x000110, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, Ease) == 0x000114, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalPositionZTo_Sweep, ReturnValue) == 0x000118, "Member 'LTweenBPLibrary_LocalPositionZTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotateEulerAngleTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_LocalRotateEulerAngleTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                eulerAngle;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotateEulerAngleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotateEulerAngleTo");
static_assert(sizeof(LTweenBPLibrary_LocalRotateEulerAngleTo) == 0x000038, "Wrong size on LTweenBPLibrary_LocalRotateEulerAngleTo");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, eulerAngle) == 0x000008, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::eulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotateEulerAngleTo_Sweep
// 0x0130 (0x0130 - 0x0000)
struct LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                eulerAngle;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x011C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0124(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep) == 0x000130, "Wrong size on LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, eulerAngle) == 0x000008, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::eulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, SweepHitResult) == 0x000020, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, sweep) == 0x000118, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Teleport) == 0x000119, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Duration) == 0x00011C, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Delay) == 0x000120, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, Ease) == 0x000124, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep, ReturnValue) == 0x000128, "Member 'LTweenBPLibrary_LocalRotateEulerAngleTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotationQuaternionTo
// 0x0050 (0x0050 - 0x0000)
struct LTweenBPLibrary_LocalRotationQuaternionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  endValue;                                          // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_LocalRotationQuaternionTo) == 0x000010, "Wrong alignment on LTweenBPLibrary_LocalRotationQuaternionTo");
static_assert(sizeof(LTweenBPLibrary_LocalRotationQuaternionTo) == 0x000050, "Wrong size on LTweenBPLibrary_LocalRotationQuaternionTo");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Duration) == 0x000030, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Delay) == 0x000034, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, Ease) == 0x000038, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo, ReturnValue) == 0x000040, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotationQuaternionTo_Sweep
// 0x0140 (0x0140 - 0x0000)
struct LTweenBPLibrary_LocalRotationQuaternionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  endValue;                                          // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0030(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0128(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0129(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x012C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0134(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0138(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep) == 0x000010, "Wrong alignment on LTweenBPLibrary_LocalRotationQuaternionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep) == 0x000140, "Wrong size on LTweenBPLibrary_LocalRotationQuaternionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, endValue) == 0x000010, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, SweepHitResult) == 0x000030, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, sweep) == 0x000128, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Teleport) == 0x000129, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Duration) == 0x00012C, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Delay) == 0x000130, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, Ease) == 0x000134, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotationQuaternionTo_Sweep, ReturnValue) == 0x000138, "Member 'LTweenBPLibrary_LocalRotationQuaternionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotatorTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_LocalRotatorTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotatorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotatorTo");
static_assert(sizeof(LTweenBPLibrary_LocalRotatorTo) == 0x000038, "Wrong size on LTweenBPLibrary_LocalRotatorTo");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotatorTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalRotatorTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, ShortestPath) == 0x000020, "Member 'LTweenBPLibrary_LocalRotatorTo::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_LocalRotatorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_LocalRotatorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_LocalRotatorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_LocalRotatorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalRotatorTo_Sweep
// 0x0138 (0x0138 - 0x0000)
struct LTweenBPLibrary_LocalRotatorTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0028(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0120(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0121(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0124(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x012C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0130(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalRotatorTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalRotatorTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_LocalRotatorTo_Sweep) == 0x000138, "Wrong size on LTweenBPLibrary_LocalRotatorTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, ShortestPath) == 0x000020, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, SweepHitResult) == 0x000028, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, sweep) == 0x000120, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Teleport) == 0x000121, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Duration) == 0x000124, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Delay) == 0x000128, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, Ease) == 0x00012C, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalRotatorTo_Sweep, ReturnValue) == 0x000130, "Member 'LTweenBPLibrary_LocalRotatorTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.LocalScaleTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_LocalScaleTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_LocalScaleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_LocalScaleTo");
static_assert(sizeof(LTweenBPLibrary_LocalScaleTo) == 0x000038, "Wrong size on LTweenBPLibrary_LocalScaleTo");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Target) == 0x000000, "Member 'LTweenBPLibrary_LocalScaleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_LocalScaleTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_LocalScaleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_LocalScaleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_LocalScaleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_LocalScaleTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_LocalScaleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MaterialScalarParameterTo
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_MaterialScalarParameterTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MaterialScalarParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MaterialScalarParameterTo");
static_assert(sizeof(LTweenBPLibrary_MaterialScalarParameterTo) == 0x000030, "Wrong size on LTweenBPLibrary_MaterialScalarParameterTo");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Target) == 0x000008, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, ParameterName) == 0x000010, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, endValue) == 0x000018, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Duration) == 0x00001C, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Delay) == 0x000020, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, Ease) == 0x000024, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialScalarParameterTo, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_MaterialScalarParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MaterialVectorParameterTo
// 0x0040 (0x0040 - 0x0000)
struct LTweenBPLibrary_MaterialVectorParameterTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MaterialVectorParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MaterialVectorParameterTo");
static_assert(sizeof(LTweenBPLibrary_MaterialVectorParameterTo) == 0x000040, "Wrong size on LTweenBPLibrary_MaterialVectorParameterTo");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Target) == 0x000008, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, ParameterName) == 0x000010, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, endValue) == 0x000018, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Duration) == 0x000028, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Delay) == 0x00002C, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, Ease) == 0x000030, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MaterialVectorParameterTo, ReturnValue) == 0x000038, "Member 'LTweenBPLibrary_MaterialVectorParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MeshMaterialScalarParameterTo
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_MeshMaterialScalarParameterTo final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MeshMaterialScalarParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MeshMaterialScalarParameterTo");
static_assert(sizeof(LTweenBPLibrary_MeshMaterialScalarParameterTo) == 0x000030, "Wrong size on LTweenBPLibrary_MeshMaterialScalarParameterTo");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Target) == 0x000000, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, MaterialIndex) == 0x000008, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::MaterialIndex' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, ParameterName) == 0x00000C, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, endValue) == 0x000014, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Duration) == 0x000018, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Delay) == 0x00001C, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, Ease) == 0x000020, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialScalarParameterTo, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_MeshMaterialScalarParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.MeshMaterialVectorParameterTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_MeshMaterialVectorParameterTo final
{
public:
	class UPrimitiveComponent*                    Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaterialIndex;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_MeshMaterialVectorParameterTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_MeshMaterialVectorParameterTo");
static_assert(sizeof(LTweenBPLibrary_MeshMaterialVectorParameterTo) == 0x000038, "Wrong size on LTweenBPLibrary_MeshMaterialVectorParameterTo");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Target) == 0x000000, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, MaterialIndex) == 0x000008, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::MaterialIndex' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, ParameterName) == 0x00000C, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::ParameterName' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, endValue) == 0x000014, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_MeshMaterialVectorParameterTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_MeshMaterialVectorParameterTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.QuaternionTo
// 0x0080 (0x0080 - 0x0000)
struct LTweenBPLibrary_QuaternionTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FQuat& Value)>    setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  StartValue;                                        // 0x0020(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FQuat                                  endValue;                                          // 0x0040(0x0020)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_QuaternionTo) == 0x000010, "Wrong alignment on LTweenBPLibrary_QuaternionTo");
static_assert(sizeof(LTweenBPLibrary_QuaternionTo) == 0x000080, "Wrong size on LTweenBPLibrary_QuaternionTo");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_QuaternionTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, setter) == 0x000008, "Member 'LTweenBPLibrary_QuaternionTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, StartValue) == 0x000020, "Member 'LTweenBPLibrary_QuaternionTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, endValue) == 0x000040, "Member 'LTweenBPLibrary_QuaternionTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Duration) == 0x000060, "Member 'LTweenBPLibrary_QuaternionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Delay) == 0x000064, "Member 'LTweenBPLibrary_QuaternionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, Ease) == 0x000068, "Member 'LTweenBPLibrary_QuaternionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_QuaternionTo, ReturnValue) == 0x000070, "Member 'LTweenBPLibrary_QuaternionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.RegisterUpdateEvent
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_RegisterUpdateEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float InProgress)>             Update;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLTweenDelegateHandleWrapper           ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_RegisterUpdateEvent) == 0x000008, "Wrong alignment on LTweenBPLibrary_RegisterUpdateEvent");
static_assert(sizeof(LTweenBPLibrary_RegisterUpdateEvent) == 0x000020, "Wrong size on LTweenBPLibrary_RegisterUpdateEvent");
static_assert(offsetof(LTweenBPLibrary_RegisterUpdateEvent, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_RegisterUpdateEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RegisterUpdateEvent, Update) == 0x000008, "Member 'LTweenBPLibrary_RegisterUpdateEvent::Update' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RegisterUpdateEvent, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_RegisterUpdateEvent::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.RepeatCall
// 0x0030 (0x0030 - 0x0000)
struct LTweenBPLibrary_RepeatCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             callFunction;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepeatCount;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_RepeatCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_RepeatCall");
static_assert(sizeof(LTweenBPLibrary_RepeatCall) == 0x000030, "Wrong size on LTweenBPLibrary_RepeatCall");
static_assert(offsetof(LTweenBPLibrary_RepeatCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_RepeatCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RepeatCall, callFunction) == 0x000008, "Member 'LTweenBPLibrary_RepeatCall::callFunction' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RepeatCall, DelayTime) == 0x000018, "Member 'LTweenBPLibrary_RepeatCall::DelayTime' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RepeatCall, Interval) == 0x00001C, "Member 'LTweenBPLibrary_RepeatCall::Interval' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RepeatCall, RepeatCount) == 0x000020, "Member 'LTweenBPLibrary_RepeatCall::RepeatCount' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RepeatCall, ReturnValue) == 0x000028, "Member 'LTweenBPLibrary_RepeatCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.RotatorTo
// 0x0060 (0x0060 - 0x0000)
struct LTweenBPLibrary_RotatorTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FRotator& Value)> setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               StartValue;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               endValue;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_RotatorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_RotatorTo");
static_assert(sizeof(LTweenBPLibrary_RotatorTo) == 0x000060, "Wrong size on LTweenBPLibrary_RotatorTo");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_RotatorTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, setter) == 0x000008, "Member 'LTweenBPLibrary_RotatorTo::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, StartValue) == 0x000018, "Member 'LTweenBPLibrary_RotatorTo::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, endValue) == 0x000030, "Member 'LTweenBPLibrary_RotatorTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Duration) == 0x000048, "Member 'LTweenBPLibrary_RotatorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Delay) == 0x00004C, "Member 'LTweenBPLibrary_RotatorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, Ease) == 0x000050, "Member 'LTweenBPLibrary_RotatorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_RotatorTo, ReturnValue) == 0x000058, "Member 'LTweenBPLibrary_RotatorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_Border_ContentColorAndOpacityTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorder*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo");
static_assert(sizeof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_Border_ContentColorAndOpacityTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_BorderSlot_PaddingTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_BorderSlot_PaddingTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBorderSlot*                            Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_BorderSlot_PaddingTo");
static_assert(sizeof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_BorderSlot_PaddingTo");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_BorderSlot_PaddingTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_BorderSlot_PaddingTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_Button_ColorAndOpacityTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_Button_ColorAndOpacityTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButton*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_Button_ColorAndOpacityTo");
static_assert(sizeof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_Button_ColorAndOpacityTo");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Button_ColorAndOpacityTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_Button_ColorAndOpacityTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_ButtonSlot_PaddingTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_ButtonSlot_PaddingTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UButtonSlot*                            Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_ButtonSlot_PaddingTo");
static_assert(sizeof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_ButtonSlot_PaddingTo");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_ButtonSlot_PaddingTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_ButtonSlot_PaddingTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_CanvasPanelSlot_PositionTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo");
static_assert(sizeof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_PositionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_CanvasPanelSlot_SizeTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo");
static_assert(sizeof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_CanvasPanelSlot_SizeTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_HorizontalBoxSlot_PaddingTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHorizontalBoxSlot*                     Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo");
static_assert(sizeof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_HorizontalBoxSlot_PaddingTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_Image_ColorAndOpacityTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_Image_ColorAndOpacityTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_Image_ColorAndOpacityTo");
static_assert(sizeof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_Image_ColorAndOpacityTo");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_Image_ColorAndOpacityTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_Image_ColorAndOpacityTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_OverlaySlot_PaddingTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_OverlaySlot_PaddingTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOverlaySlot*                           Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_OverlaySlot_PaddingTo");
static_assert(sizeof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_OverlaySlot_PaddingTo");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_OverlaySlot_PaddingTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_OverlaySlot_PaddingTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_RenderOpacityTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_UMG_RenderOpacityTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_RenderOpacityTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_RenderOpacityTo");
static_assert(sizeof(LTweenBPLibrary_UMG_RenderOpacityTo) == 0x000028, "Wrong size on LTweenBPLibrary_UMG_RenderOpacityTo");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderOpacityTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_UMG_RenderOpacityTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_RenderTransform_AngleTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_UMG_RenderTransform_AngleTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         endValue;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_RenderTransform_AngleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_RenderTransform_AngleTo");
static_assert(sizeof(LTweenBPLibrary_UMG_RenderTransform_AngleTo) == 0x000028, "Wrong size on LTweenBPLibrary_UMG_RenderTransform_AngleTo");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, Duration) == 0x000014, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, Delay) == 0x000018, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, Ease) == 0x00001C, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_AngleTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_UMG_RenderTransform_AngleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_RenderTransform_ScaleTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_RenderTransform_ScaleTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_RenderTransform_ScaleTo");
static_assert(sizeof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_RenderTransform_ScaleTo");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ScaleTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_RenderTransform_ScaleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_RenderTransform_ShearTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_RenderTransform_ShearTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_RenderTransform_ShearTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_RenderTransform_ShearTo");
static_assert(sizeof(LTweenBPLibrary_UMG_RenderTransform_ShearTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_RenderTransform_ShearTo");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_ShearTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_RenderTransform_ShearTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_RenderTransform_TranslationTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_RenderTransform_TranslationTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_RenderTransform_TranslationTo");
static_assert(sizeof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_RenderTransform_TranslationTo");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_RenderTransform_TranslationTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_RenderTransform_TranslationTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_UserWidget_ColorAndOpacityTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo");
static_assert(sizeof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_UserWidget_ColorAndOpacityTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UMG_VerticalBoxSlot_PaddingTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBoxSlot*                       Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMargin                                endValue;                                          // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo");
static_assert(sizeof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo) == 0x000038, "Wrong size on LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, Target) == 0x000008, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_UMG_VerticalBoxSlot_PaddingTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UnregisterUpdateEvent
// 0x0010 (0x0010 - 0x0000)
struct LTweenBPLibrary_UnregisterUpdateEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLTweenDelegateHandleWrapper           delegateHandle;                                    // 0x0008(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UnregisterUpdateEvent) == 0x000008, "Wrong alignment on LTweenBPLibrary_UnregisterUpdateEvent");
static_assert(sizeof(LTweenBPLibrary_UnregisterUpdateEvent) == 0x000010, "Wrong size on LTweenBPLibrary_UnregisterUpdateEvent");
static_assert(offsetof(LTweenBPLibrary_UnregisterUpdateEvent, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UnregisterUpdateEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UnregisterUpdateEvent, delegateHandle) == 0x000008, "Member 'LTweenBPLibrary_UnregisterUpdateEvent::delegateHandle' has a wrong offset!");

// Function LTween.LTweenBPLibrary.UpdateCall
// 0x0020 (0x0020 - 0x0000)
struct LTweenBPLibrary_UpdateCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float InProgress)>             Update;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_UpdateCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_UpdateCall");
static_assert(sizeof(LTweenBPLibrary_UpdateCall) == 0x000020, "Wrong size on LTweenBPLibrary_UpdateCall");
static_assert(offsetof(LTweenBPLibrary_UpdateCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_UpdateCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UpdateCall, Update) == 0x000008, "Member 'LTweenBPLibrary_UpdateCall::Update' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_UpdateCall, ReturnValue) == 0x000018, "Member 'LTweenBPLibrary_UpdateCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.Vector2To
// 0x0050 (0x0050 - 0x0000)
struct LTweenBPLibrary_Vector2To final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector2D& Value)> setter;                                           // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              StartValue;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              endValue;                                          // 0x0028(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0048(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_Vector2To) == 0x000008, "Wrong alignment on LTweenBPLibrary_Vector2To");
static_assert(sizeof(LTweenBPLibrary_Vector2To) == 0x000050, "Wrong size on LTweenBPLibrary_Vector2To");
static_assert(offsetof(LTweenBPLibrary_Vector2To, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_Vector2To::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, setter) == 0x000008, "Member 'LTweenBPLibrary_Vector2To::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, StartValue) == 0x000018, "Member 'LTweenBPLibrary_Vector2To::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, endValue) == 0x000028, "Member 'LTweenBPLibrary_Vector2To::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Duration) == 0x000038, "Member 'LTweenBPLibrary_Vector2To::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Delay) == 0x00003C, "Member 'LTweenBPLibrary_Vector2To::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, Ease) == 0x000040, "Member 'LTweenBPLibrary_Vector2To::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector2To, ReturnValue) == 0x000048, "Member 'LTweenBPLibrary_Vector2To::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.Vector3To
// 0x0060 (0x0060 - 0x0000)
struct LTweenBPLibrary_Vector3To final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector& Value)>  setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartValue;                                        // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0030(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x004C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_Vector3To) == 0x000008, "Wrong alignment on LTweenBPLibrary_Vector3To");
static_assert(sizeof(LTweenBPLibrary_Vector3To) == 0x000060, "Wrong size on LTweenBPLibrary_Vector3To");
static_assert(offsetof(LTweenBPLibrary_Vector3To, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_Vector3To::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, setter) == 0x000008, "Member 'LTweenBPLibrary_Vector3To::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, StartValue) == 0x000018, "Member 'LTweenBPLibrary_Vector3To::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, endValue) == 0x000030, "Member 'LTweenBPLibrary_Vector3To::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Duration) == 0x000048, "Member 'LTweenBPLibrary_Vector3To::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Delay) == 0x00004C, "Member 'LTweenBPLibrary_Vector3To::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, Ease) == 0x000050, "Member 'LTweenBPLibrary_Vector3To::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector3To, ReturnValue) == 0x000058, "Member 'LTweenBPLibrary_Vector3To::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.Vector4To
// 0x0080 (0x0080 - 0x0000)
struct LTweenBPLibrary_Vector4To final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(const struct FVector4& Value)> setter;                                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               StartValue;                                        // 0x0020(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               endValue;                                          // 0x0040(0x0020)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0064(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0070(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_Vector4To) == 0x000010, "Wrong alignment on LTweenBPLibrary_Vector4To");
static_assert(sizeof(LTweenBPLibrary_Vector4To) == 0x000080, "Wrong size on LTweenBPLibrary_Vector4To");
static_assert(offsetof(LTweenBPLibrary_Vector4To, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_Vector4To::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, setter) == 0x000008, "Member 'LTweenBPLibrary_Vector4To::setter' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, StartValue) == 0x000020, "Member 'LTweenBPLibrary_Vector4To::StartValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, endValue) == 0x000040, "Member 'LTweenBPLibrary_Vector4To::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Duration) == 0x000060, "Member 'LTweenBPLibrary_Vector4To::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Delay) == 0x000064, "Member 'LTweenBPLibrary_Vector4To::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, Ease) == 0x000068, "Member 'LTweenBPLibrary_Vector4To::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_Vector4To, ReturnValue) == 0x000070, "Member 'LTweenBPLibrary_Vector4To::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.VirtualCall
// 0x0048 (0x0048 - 0x0000)
struct LTweenBPLibrary_VirtualCall final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Start;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(float InProgress)>             Update;                                            // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             complete;                                          // 0x0030(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_VirtualCall) == 0x000008, "Wrong alignment on LTweenBPLibrary_VirtualCall");
static_assert(sizeof(LTweenBPLibrary_VirtualCall) == 0x000048, "Wrong size on LTweenBPLibrary_VirtualCall");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, WorldContextObject) == 0x000000, "Member 'LTweenBPLibrary_VirtualCall::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Duration) == 0x000008, "Member 'LTweenBPLibrary_VirtualCall::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Delay) == 0x00000C, "Member 'LTweenBPLibrary_VirtualCall::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Start) == 0x000010, "Member 'LTweenBPLibrary_VirtualCall::Start' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, Update) == 0x000020, "Member 'LTweenBPLibrary_VirtualCall::Update' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, complete) == 0x000030, "Member 'LTweenBPLibrary_VirtualCall::complete' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_VirtualCall, ReturnValue) == 0x000040, "Member 'LTweenBPLibrary_VirtualCall::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_WorldPositionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionTo) == 0x000038, "Wrong size on LTweenBPLibrary_WorldPositionTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_WorldPositionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_WorldPositionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_WorldPositionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_WorldPositionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionTo_Sweep
// 0x0130 (0x0130 - 0x0000)
struct LTweenBPLibrary_WorldPositionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x011C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0124(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionTo_Sweep) == 0x000130, "Wrong size on LTweenBPLibrary_WorldPositionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, SweepHitResult) == 0x000020, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, sweep) == 0x000118, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Teleport) == 0x000119, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Duration) == 0x00011C, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Delay) == 0x000120, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, Ease) == 0x000124, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionTo_Sweep, ReturnValue) == 0x000128, "Member 'LTweenBPLibrary_WorldPositionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionXTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_WorldPositionXTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionXTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionXTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionXTo) == 0x000028, "Wrong size on LTweenBPLibrary_WorldPositionXTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionXTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionXTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Duration) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionXTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Delay) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionXTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, Ease) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionXTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_WorldPositionXTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionXTo_Sweep
// 0x0120 (0x0120 - 0x0000)
struct LTweenBPLibrary_WorldPositionXTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionXTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionXTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionXTo_Sweep) == 0x000120, "Wrong size on LTweenBPLibrary_WorldPositionXTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, SweepHitResult) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, sweep) == 0x000108, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Teleport) == 0x000109, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Duration) == 0x00010C, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Delay) == 0x000110, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, Ease) == 0x000114, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionXTo_Sweep, ReturnValue) == 0x000118, "Member 'LTweenBPLibrary_WorldPositionXTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionYTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_WorldPositionYTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionYTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionYTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionYTo) == 0x000028, "Wrong size on LTweenBPLibrary_WorldPositionYTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionYTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionYTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Duration) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionYTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Delay) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionYTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, Ease) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionYTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_WorldPositionYTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionYTo_Sweep
// 0x0120 (0x0120 - 0x0000)
struct LTweenBPLibrary_WorldPositionYTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionYTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionYTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionYTo_Sweep) == 0x000120, "Wrong size on LTweenBPLibrary_WorldPositionYTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, SweepHitResult) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, sweep) == 0x000108, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Teleport) == 0x000109, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Duration) == 0x00010C, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Delay) == 0x000110, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, Ease) == 0x000114, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionYTo_Sweep, ReturnValue) == 0x000118, "Member 'LTweenBPLibrary_WorldPositionYTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionZTo
// 0x0028 (0x0028 - 0x0000)
struct LTweenBPLibrary_WorldPositionZTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionZTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionZTo");
static_assert(sizeof(LTweenBPLibrary_WorldPositionZTo) == 0x000028, "Wrong size on LTweenBPLibrary_WorldPositionZTo");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionZTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionZTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Duration) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionZTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Delay) == 0x000014, "Member 'LTweenBPLibrary_WorldPositionZTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, Ease) == 0x000018, "Member 'LTweenBPLibrary_WorldPositionZTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo, ReturnValue) == 0x000020, "Member 'LTweenBPLibrary_WorldPositionZTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldPositionZTo_Sweep
// 0x0120 (0x0120 - 0x0000)
struct LTweenBPLibrary_WorldPositionZTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        endValue;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0010(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0108(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0109(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x010C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0110(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0114(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0118(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldPositionZTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldPositionZTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldPositionZTo_Sweep) == 0x000120, "Wrong size on LTweenBPLibrary_WorldPositionZTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, SweepHitResult) == 0x000010, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, sweep) == 0x000108, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Teleport) == 0x000109, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Duration) == 0x00010C, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Delay) == 0x000110, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, Ease) == 0x000114, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldPositionZTo_Sweep, ReturnValue) == 0x000118, "Member 'LTweenBPLibrary_WorldPositionZTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotateEulerAngleTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_WorldRotateEulerAngleTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                eulerAngle;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotateEulerAngleTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotateEulerAngleTo");
static_assert(sizeof(LTweenBPLibrary_WorldRotateEulerAngleTo) == 0x000038, "Wrong size on LTweenBPLibrary_WorldRotateEulerAngleTo");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, eulerAngle) == 0x000008, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::eulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Duration) == 0x000020, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Delay) == 0x000024, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, Ease) == 0x000028, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotateEulerAngleTo_Sweep
// 0x0130 (0x0130 - 0x0000)
struct LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                eulerAngle;                                        // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0118(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0119(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x011C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0120(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0124(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_125[0x3];                                      // 0x0125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0128(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep) == 0x000130, "Wrong size on LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, eulerAngle) == 0x000008, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::eulerAngle' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, SweepHitResult) == 0x000020, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, sweep) == 0x000118, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Teleport) == 0x000119, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Duration) == 0x00011C, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Delay) == 0x000120, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, Ease) == 0x000124, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep, ReturnValue) == 0x000128, "Member 'LTweenBPLibrary_WorldRotateEulerAngleTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotationQuaternionTo
// 0x0050 (0x0050 - 0x0000)
struct LTweenBPLibrary_WorldRotationQuaternionTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  endValue;                                          // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LTweenBPLibrary_WorldRotationQuaternionTo) == 0x000010, "Wrong alignment on LTweenBPLibrary_WorldRotationQuaternionTo");
static_assert(sizeof(LTweenBPLibrary_WorldRotationQuaternionTo) == 0x000050, "Wrong size on LTweenBPLibrary_WorldRotationQuaternionTo");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, endValue) == 0x000010, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Duration) == 0x000030, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Delay) == 0x000034, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, Ease) == 0x000038, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo, ReturnValue) == 0x000040, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotationQuaternionTo_Sweep
// 0x0140 (0x0140 - 0x0000)
struct LTweenBPLibrary_WorldRotationQuaternionTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  endValue;                                          // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             SweepHitResult;                                    // 0x0030(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0128(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0129(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x012C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0130(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x0134(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_135[0x3];                                      // 0x0135(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0138(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep) == 0x000010, "Wrong alignment on LTweenBPLibrary_WorldRotationQuaternionTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep) == 0x000140, "Wrong size on LTweenBPLibrary_WorldRotationQuaternionTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, endValue) == 0x000010, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, SweepHitResult) == 0x000030, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, sweep) == 0x000128, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Teleport) == 0x000129, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Duration) == 0x00012C, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Delay) == 0x000130, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, Ease) == 0x000134, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotationQuaternionTo_Sweep, ReturnValue) == 0x000138, "Member 'LTweenBPLibrary_WorldRotationQuaternionTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotatorTo
// 0x0038 (0x0038 - 0x0000)
struct LTweenBPLibrary_WorldRotatorTo final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x002C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotatorTo) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotatorTo");
static_assert(sizeof(LTweenBPLibrary_WorldRotatorTo) == 0x000038, "Wrong size on LTweenBPLibrary_WorldRotatorTo");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotatorTo::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldRotatorTo::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, ShortestPath) == 0x000020, "Member 'LTweenBPLibrary_WorldRotatorTo::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Duration) == 0x000024, "Member 'LTweenBPLibrary_WorldRotatorTo::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Delay) == 0x000028, "Member 'LTweenBPLibrary_WorldRotatorTo::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, Ease) == 0x00002C, "Member 'LTweenBPLibrary_WorldRotatorTo::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo, ReturnValue) == 0x000030, "Member 'LTweenBPLibrary_WorldRotatorTo::ReturnValue' has a wrong offset!");

// Function LTween.LTweenBPLibrary.WorldRotatorTo_Sweep
// 0x0138 (0x0138 - 0x0000)
struct LTweenBPLibrary_WorldRotatorTo_Sweep final
{
public:
	class USceneComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               endValue;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ShortestPath;                                      // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0028(0x00F8)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          sweep;                                             // 0x0120(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Teleport;                                          // 0x0121(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0124(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0128(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELTweenEase                                   Ease;                                              // 0x012C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D[0x3];                                      // 0x012D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0130(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenBPLibrary_WorldRotatorTo_Sweep) == 0x000008, "Wrong alignment on LTweenBPLibrary_WorldRotatorTo_Sweep");
static_assert(sizeof(LTweenBPLibrary_WorldRotatorTo_Sweep) == 0x000138, "Wrong size on LTweenBPLibrary_WorldRotatorTo_Sweep");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Target) == 0x000000, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Target' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, endValue) == 0x000008, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::endValue' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, ShortestPath) == 0x000020, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::ShortestPath' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, SweepHitResult) == 0x000028, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::SweepHitResult' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, sweep) == 0x000120, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::sweep' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Teleport) == 0x000121, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Teleport' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Duration) == 0x000124, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Duration' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Delay) == 0x000128, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Delay' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, Ease) == 0x00012C, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::Ease' has a wrong offset!");
static_assert(offsetof(LTweenBPLibrary_WorldRotatorTo_Sweep, ReturnValue) == 0x000130, "Member 'LTweenBPLibrary_WorldRotatorTo_Sweep::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetLoopCount
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetLoopCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetLoopCount) == 0x000004, "Wrong alignment on LTweener_GetLoopCount");
static_assert(sizeof(LTweener_GetLoopCount) == 0x000004, "Wrong size on LTweener_GetLoopCount");
static_assert(offsetof(LTweener_GetLoopCount, ReturnValue) == 0x000000, "Member 'LTweener_GetLoopCount::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.Goto
// 0x0004 (0x0004 - 0x0000)
struct LTweener_Goto final
{
public:
	float                                         timePoint;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_Goto) == 0x000004, "Wrong alignment on LTweener_Goto");
static_assert(sizeof(LTweener_Goto) == 0x000004, "Wrong size on LTweener_Goto");
static_assert(offsetof(LTweener_Goto, timePoint) == 0x000000, "Member 'LTweener_Goto::timePoint' has a wrong offset!");

// Function LTween.LTweener.Kill
// 0x0001 (0x0001 - 0x0000)
struct LTweener_Kill final
{
public:
	bool                                          callComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_Kill) == 0x000001, "Wrong alignment on LTweener_Kill");
static_assert(sizeof(LTweener_Kill) == 0x000001, "Wrong size on LTweener_Kill");
static_assert(offsetof(LTweener_Kill, callComplete) == 0x000000, "Member 'LTweener_Kill::callComplete' has a wrong offset!");

// Function LTween.LTweener.OnComplete
// 0x0018 (0x0018 - 0x0000)
struct LTweener_OnComplete final
{
public:
	TDelegate<void()>                             newComplete;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnComplete) == 0x000008, "Wrong alignment on LTweener_OnComplete");
static_assert(sizeof(LTweener_OnComplete) == 0x000018, "Wrong size on LTweener_OnComplete");
static_assert(offsetof(LTweener_OnComplete, newComplete) == 0x000000, "Member 'LTweener_OnComplete::newComplete' has a wrong offset!");
static_assert(offsetof(LTweener_OnComplete, ReturnValue) == 0x000010, "Member 'LTweener_OnComplete::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnCycleComplete
// 0x0018 (0x0018 - 0x0000)
struct LTweener_OnCycleComplete final
{
public:
	TDelegate<void()>                             newCycleComplete;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnCycleComplete) == 0x000008, "Wrong alignment on LTweener_OnCycleComplete");
static_assert(sizeof(LTweener_OnCycleComplete) == 0x000018, "Wrong size on LTweener_OnCycleComplete");
static_assert(offsetof(LTweener_OnCycleComplete, newCycleComplete) == 0x000000, "Member 'LTweener_OnCycleComplete::newCycleComplete' has a wrong offset!");
static_assert(offsetof(LTweener_OnCycleComplete, ReturnValue) == 0x000010, "Member 'LTweener_OnCycleComplete::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnCycleStart
// 0x0018 (0x0018 - 0x0000)
struct LTweener_OnCycleStart final
{
public:
	TDelegate<void()>                             newCycleStart;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnCycleStart) == 0x000008, "Wrong alignment on LTweener_OnCycleStart");
static_assert(sizeof(LTweener_OnCycleStart) == 0x000018, "Wrong size on LTweener_OnCycleStart");
static_assert(offsetof(LTweener_OnCycleStart, newCycleStart) == 0x000000, "Member 'LTweener_OnCycleStart::newCycleStart' has a wrong offset!");
static_assert(offsetof(LTweener_OnCycleStart, ReturnValue) == 0x000010, "Member 'LTweener_OnCycleStart::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnStart
// 0x0018 (0x0018 - 0x0000)
struct LTweener_OnStart final
{
public:
	TDelegate<void()>                             newStart;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnStart) == 0x000008, "Wrong alignment on LTweener_OnStart");
static_assert(sizeof(LTweener_OnStart) == 0x000018, "Wrong size on LTweener_OnStart");
static_assert(offsetof(LTweener_OnStart, newStart) == 0x000000, "Member 'LTweener_OnStart::newStart' has a wrong offset!");
static_assert(offsetof(LTweener_OnStart, ReturnValue) == 0x000010, "Member 'LTweener_OnStart::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.OnUpdate
// 0x0018 (0x0018 - 0x0000)
struct LTweener_OnUpdate final
{
public:
	TDelegate<void(float InProgress)>             newUpdate;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_OnUpdate) == 0x000008, "Wrong alignment on LTweener_OnUpdate");
static_assert(sizeof(LTweener_OnUpdate) == 0x000018, "Wrong size on LTweener_OnUpdate");
static_assert(offsetof(LTweener_OnUpdate, newUpdate) == 0x000000, "Member 'LTweener_OnUpdate::newUpdate' has a wrong offset!");
static_assert(offsetof(LTweener_OnUpdate, ReturnValue) == 0x000010, "Member 'LTweener_OnUpdate::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetAffectByGamePause
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetAffectByGamePause final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetAffectByGamePause) == 0x000008, "Wrong alignment on LTweener_SetAffectByGamePause");
static_assert(sizeof(LTweener_SetAffectByGamePause) == 0x000010, "Wrong size on LTweener_SetAffectByGamePause");
static_assert(offsetof(LTweener_SetAffectByGamePause, Value) == 0x000000, "Member 'LTweener_SetAffectByGamePause::Value' has a wrong offset!");
static_assert(offsetof(LTweener_SetAffectByGamePause, ReturnValue) == 0x000008, "Member 'LTweener_SetAffectByGamePause::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetAffectByTimeDilation
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetAffectByTimeDilation final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetAffectByTimeDilation) == 0x000008, "Wrong alignment on LTweener_SetAffectByTimeDilation");
static_assert(sizeof(LTweener_SetAffectByTimeDilation) == 0x000010, "Wrong size on LTweener_SetAffectByTimeDilation");
static_assert(offsetof(LTweener_SetAffectByTimeDilation, Value) == 0x000000, "Member 'LTweener_SetAffectByTimeDilation::Value' has a wrong offset!");
static_assert(offsetof(LTweener_SetAffectByTimeDilation, ReturnValue) == 0x000008, "Member 'LTweener_SetAffectByTimeDilation::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetCurveFloat
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetCurveFloat final
{
public:
	class UCurveFloat*                            newCurveFloat;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetCurveFloat) == 0x000008, "Wrong alignment on LTweener_SetCurveFloat");
static_assert(sizeof(LTweener_SetCurveFloat) == 0x000010, "Wrong size on LTweener_SetCurveFloat");
static_assert(offsetof(LTweener_SetCurveFloat, newCurveFloat) == 0x000000, "Member 'LTweener_SetCurveFloat::newCurveFloat' has a wrong offset!");
static_assert(offsetof(LTweener_SetCurveFloat, ReturnValue) == 0x000008, "Member 'LTweener_SetCurveFloat::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetDelay
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetDelay final
{
public:
	float                                         newDelay;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetDelay) == 0x000008, "Wrong alignment on LTweener_SetDelay");
static_assert(sizeof(LTweener_SetDelay) == 0x000010, "Wrong size on LTweener_SetDelay");
static_assert(offsetof(LTweener_SetDelay, newDelay) == 0x000000, "Member 'LTweener_SetDelay::newDelay' has a wrong offset!");
static_assert(offsetof(LTweener_SetDelay, ReturnValue) == 0x000008, "Member 'LTweener_SetDelay::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetEase
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetEase final
{
public:
	ELTweenEase                                   easetype;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetEase) == 0x000008, "Wrong alignment on LTweener_SetEase");
static_assert(sizeof(LTweener_SetEase) == 0x000010, "Wrong size on LTweener_SetEase");
static_assert(offsetof(LTweener_SetEase, easetype) == 0x000000, "Member 'LTweener_SetEase::easetype' has a wrong offset!");
static_assert(offsetof(LTweener_SetEase, ReturnValue) == 0x000008, "Member 'LTweener_SetEase::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetEaseCurve
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetEaseCurve final
{
public:
	class UCurveFloat*                            newCurve;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetEaseCurve) == 0x000008, "Wrong alignment on LTweener_SetEaseCurve");
static_assert(sizeof(LTweener_SetEaseCurve) == 0x000010, "Wrong size on LTweener_SetEaseCurve");
static_assert(offsetof(LTweener_SetEaseCurve, newCurve) == 0x000000, "Member 'LTweener_SetEaseCurve::newCurve' has a wrong offset!");
static_assert(offsetof(LTweener_SetEaseCurve, ReturnValue) == 0x000008, "Member 'LTweener_SetEaseCurve::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetLoop
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetLoop final
{
public:
	ELTweenLoop                                   newLoopType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         newLoopCount;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetLoop) == 0x000008, "Wrong alignment on LTweener_SetLoop");
static_assert(sizeof(LTweener_SetLoop) == 0x000010, "Wrong size on LTweener_SetLoop");
static_assert(offsetof(LTweener_SetLoop, newLoopType) == 0x000000, "Member 'LTweener_SetLoop::newLoopType' has a wrong offset!");
static_assert(offsetof(LTweener_SetLoop, newLoopCount) == 0x000004, "Member 'LTweener_SetLoop::newLoopCount' has a wrong offset!");
static_assert(offsetof(LTweener_SetLoop, ReturnValue) == 0x000008, "Member 'LTweener_SetLoop::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetLoopType
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetLoopType final
{
public:
	ELTweenLoop                                   newLoopType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetLoopType) == 0x000008, "Wrong alignment on LTweener_SetLoopType");
static_assert(sizeof(LTweener_SetLoopType) == 0x000010, "Wrong size on LTweener_SetLoopType");
static_assert(offsetof(LTweener_SetLoopType, newLoopType) == 0x000000, "Member 'LTweener_SetLoopType::newLoopType' has a wrong offset!");
static_assert(offsetof(LTweener_SetLoopType, ReturnValue) == 0x000008, "Member 'LTweener_SetLoopType::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.SetTickType
// 0x0010 (0x0010 - 0x0000)
struct LTweener_SetTickType final
{
public:
	ELTweenTickType                               Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_SetTickType) == 0x000008, "Wrong alignment on LTweener_SetTickType");
static_assert(sizeof(LTweener_SetTickType) == 0x000010, "Wrong size on LTweener_SetTickType");
static_assert(offsetof(LTweener_SetTickType, Value) == 0x000000, "Member 'LTweener_SetTickType::Value' has a wrong offset!");
static_assert(offsetof(LTweener_SetTickType, ReturnValue) == 0x000008, "Member 'LTweener_SetTickType::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetAffectByGamePause
// 0x0001 (0x0001 - 0x0000)
struct LTweener_GetAffectByGamePause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetAffectByGamePause) == 0x000001, "Wrong alignment on LTweener_GetAffectByGamePause");
static_assert(sizeof(LTweener_GetAffectByGamePause) == 0x000001, "Wrong size on LTweener_GetAffectByGamePause");
static_assert(offsetof(LTweener_GetAffectByGamePause, ReturnValue) == 0x000000, "Member 'LTweener_GetAffectByGamePause::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetAffectByTimeDilation
// 0x0001 (0x0001 - 0x0000)
struct LTweener_GetAffectByTimeDilation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetAffectByTimeDilation) == 0x000001, "Wrong alignment on LTweener_GetAffectByTimeDilation");
static_assert(sizeof(LTweener_GetAffectByTimeDilation) == 0x000001, "Wrong size on LTweener_GetAffectByTimeDilation");
static_assert(offsetof(LTweener_GetAffectByTimeDilation, ReturnValue) == 0x000000, "Member 'LTweener_GetAffectByTimeDilation::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetDuration) == 0x000004, "Wrong alignment on LTweener_GetDuration");
static_assert(sizeof(LTweener_GetDuration) == 0x000004, "Wrong size on LTweener_GetDuration");
static_assert(offsetof(LTweener_GetDuration, ReturnValue) == 0x000000, "Member 'LTweener_GetDuration::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetElapsedTime) == 0x000004, "Wrong alignment on LTweener_GetElapsedTime");
static_assert(sizeof(LTweener_GetElapsedTime) == 0x000004, "Wrong size on LTweener_GetElapsedTime");
static_assert(offsetof(LTweener_GetElapsedTime, ReturnValue) == 0x000000, "Member 'LTweener_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetLoopCycleCount
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetLoopCycleCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetLoopCycleCount) == 0x000004, "Wrong alignment on LTweener_GetLoopCycleCount");
static_assert(sizeof(LTweener_GetLoopCycleCount) == 0x000004, "Wrong size on LTweener_GetLoopCycleCount");
static_assert(offsetof(LTweener_GetLoopCycleCount, ReturnValue) == 0x000000, "Member 'LTweener_GetLoopCycleCount::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct LTweener_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetProgress) == 0x000004, "Wrong alignment on LTweener_GetProgress");
static_assert(sizeof(LTweener_GetProgress) == 0x000004, "Wrong size on LTweener_GetProgress");
static_assert(offsetof(LTweener_GetProgress, ReturnValue) == 0x000000, "Member 'LTweener_GetProgress::ReturnValue' has a wrong offset!");

// Function LTween.LTweener.GetTickType
// 0x0001 (0x0001 - 0x0000)
struct LTweener_GetTickType final
{
public:
	ELTweenTickType                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweener_GetTickType) == 0x000001, "Wrong alignment on LTweener_GetTickType");
static_assert(sizeof(LTweener_GetTickType) == 0x000001, "Wrong size on LTweener_GetTickType");
static_assert(offsetof(LTweener_GetTickType, ReturnValue) == 0x000000, "Member 'LTweener_GetTickType::ReturnValue' has a wrong offset!");

// Function LTween.LTweenerSequence.Append
// 0x0018 (0x0018 - 0x0000)
struct LTweenerSequence_Append final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              tweener;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenerSequence_Append) == 0x000008, "Wrong alignment on LTweenerSequence_Append");
static_assert(sizeof(LTweenerSequence_Append) == 0x000018, "Wrong size on LTweenerSequence_Append");
static_assert(offsetof(LTweenerSequence_Append, WorldContextObject) == 0x000000, "Member 'LTweenerSequence_Append::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Append, tweener) == 0x000008, "Member 'LTweenerSequence_Append::tweener' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Append, ReturnValue) == 0x000010, "Member 'LTweenerSequence_Append::ReturnValue' has a wrong offset!");

// Function LTween.LTweenerSequence.AppendInterval
// 0x0018 (0x0018 - 0x0000)
struct LTweenerSequence_AppendInterval final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenerSequence_AppendInterval) == 0x000008, "Wrong alignment on LTweenerSequence_AppendInterval");
static_assert(sizeof(LTweenerSequence_AppendInterval) == 0x000018, "Wrong size on LTweenerSequence_AppendInterval");
static_assert(offsetof(LTweenerSequence_AppendInterval, WorldContextObject) == 0x000000, "Member 'LTweenerSequence_AppendInterval::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_AppendInterval, Interval) == 0x000008, "Member 'LTweenerSequence_AppendInterval::Interval' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_AppendInterval, ReturnValue) == 0x000010, "Member 'LTweenerSequence_AppendInterval::ReturnValue' has a wrong offset!");

// Function LTween.LTweenerSequence.Insert
// 0x0020 (0x0020 - 0x0000)
struct LTweenerSequence_Insert final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         timePosition;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweener*                              tweener;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenerSequence_Insert) == 0x000008, "Wrong alignment on LTweenerSequence_Insert");
static_assert(sizeof(LTweenerSequence_Insert) == 0x000020, "Wrong size on LTweenerSequence_Insert");
static_assert(offsetof(LTweenerSequence_Insert, WorldContextObject) == 0x000000, "Member 'LTweenerSequence_Insert::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Insert, timePosition) == 0x000008, "Member 'LTweenerSequence_Insert::timePosition' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Insert, tweener) == 0x000010, "Member 'LTweenerSequence_Insert::tweener' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Insert, ReturnValue) == 0x000018, "Member 'LTweenerSequence_Insert::ReturnValue' has a wrong offset!");

// Function LTween.LTweenerSequence.Join
// 0x0018 (0x0018 - 0x0000)
struct LTweenerSequence_Join final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              tweener;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenerSequence_Join) == 0x000008, "Wrong alignment on LTweenerSequence_Join");
static_assert(sizeof(LTweenerSequence_Join) == 0x000018, "Wrong size on LTweenerSequence_Join");
static_assert(offsetof(LTweenerSequence_Join, WorldContextObject) == 0x000000, "Member 'LTweenerSequence_Join::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Join, tweener) == 0x000008, "Member 'LTweenerSequence_Join::tweener' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Join, ReturnValue) == 0x000010, "Member 'LTweenerSequence_Join::ReturnValue' has a wrong offset!");

// Function LTween.LTweenerSequence.Prepend
// 0x0018 (0x0018 - 0x0000)
struct LTweenerSequence_Prepend final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweener*                              tweener;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenerSequence_Prepend) == 0x000008, "Wrong alignment on LTweenerSequence_Prepend");
static_assert(sizeof(LTweenerSequence_Prepend) == 0x000018, "Wrong size on LTweenerSequence_Prepend");
static_assert(offsetof(LTweenerSequence_Prepend, WorldContextObject) == 0x000000, "Member 'LTweenerSequence_Prepend::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Prepend, tweener) == 0x000008, "Member 'LTweenerSequence_Prepend::tweener' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_Prepend, ReturnValue) == 0x000010, "Member 'LTweenerSequence_Prepend::ReturnValue' has a wrong offset!");

// Function LTween.LTweenerSequence.PrependInterval
// 0x0018 (0x0018 - 0x0000)
struct LTweenerSequence_PrependInterval final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Interval;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULTweenerSequence*                      ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenerSequence_PrependInterval) == 0x000008, "Wrong alignment on LTweenerSequence_PrependInterval");
static_assert(sizeof(LTweenerSequence_PrependInterval) == 0x000018, "Wrong size on LTweenerSequence_PrependInterval");
static_assert(offsetof(LTweenerSequence_PrependInterval, WorldContextObject) == 0x000000, "Member 'LTweenerSequence_PrependInterval::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_PrependInterval, Interval) == 0x000008, "Member 'LTweenerSequence_PrependInterval::Interval' has a wrong offset!");
static_assert(offsetof(LTweenerSequence_PrependInterval, ReturnValue) == 0x000010, "Member 'LTweenerSequence_PrependInterval::ReturnValue' has a wrong offset!");

// Function LTween.LTweenManager.GetLTweenInstance
// 0x0010 (0x0010 - 0x0000)
struct LTweenManager_GetLTweenInstance final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULTweenManager*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenManager_GetLTweenInstance) == 0x000008, "Wrong alignment on LTweenManager_GetLTweenInstance");
static_assert(sizeof(LTweenManager_GetLTweenInstance) == 0x000010, "Wrong size on LTweenManager_GetLTweenInstance");
static_assert(offsetof(LTweenManager_GetLTweenInstance, WorldContextObject) == 0x000000, "Member 'LTweenManager_GetLTweenInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LTweenManager_GetLTweenInstance, ReturnValue) == 0x000008, "Member 'LTweenManager_GetLTweenInstance::ReturnValue' has a wrong offset!");

// Function LTween.LTweenManager.CustomTick
// 0x0004 (0x0004 - 0x0000)
struct LTweenManager_CustomTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenManager_CustomTick) == 0x000004, "Wrong alignment on LTweenManager_CustomTick");
static_assert(sizeof(LTweenManager_CustomTick) == 0x000004, "Wrong size on LTweenManager_CustomTick");
static_assert(offsetof(LTweenManager_CustomTick, DeltaTime) == 0x000000, "Member 'LTweenManager_CustomTick::DeltaTime' has a wrong offset!");

// Function LTween.LTweenManager.KillAllTweens
// 0x0001 (0x0001 - 0x0000)
struct LTweenManager_KillAllTweens final
{
public:
	bool                                          callComplete;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenManager_KillAllTweens) == 0x000001, "Wrong alignment on LTweenManager_KillAllTweens");
static_assert(sizeof(LTweenManager_KillAllTweens) == 0x000001, "Wrong size on LTweenManager_KillAllTweens");
static_assert(offsetof(LTweenManager_KillAllTweens, callComplete) == 0x000000, "Member 'LTweenManager_KillAllTweens::callComplete' has a wrong offset!");

// Function LTween.LTweenManager.ManualTick
// 0x0004 (0x0004 - 0x0000)
struct LTweenManager_ManualTick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LTweenManager_ManualTick) == 0x000004, "Wrong alignment on LTweenManager_ManualTick");
static_assert(sizeof(LTweenManager_ManualTick) == 0x000004, "Wrong size on LTweenManager_ManualTick");
static_assert(offsetof(LTweenManager_ManualTick, DeltaTime) == 0x000000, "Member 'LTweenManager_ManualTick::DeltaTime' has a wrong offset!");

}

