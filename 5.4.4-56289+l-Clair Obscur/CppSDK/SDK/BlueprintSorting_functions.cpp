#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BlueprintSorting

#include "Basic.hpp"

#include "BlueprintSorting_classes.hpp"
#include "BlueprintSorting_parameters.hpp"


namespace SDK
{

// Function BlueprintSorting.BlueprintSortingHelperLibrary.GreaterThanOrEqualArrayLength
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const TArray<int32>&                    TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintSortingHelperLibrary::GreaterThanOrEqualArrayLength(const TArray<int32>& TargetArray, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "GreaterThanOrEqualArrayLength");

	Params::BlueprintSortingHelperLibrary_GreaterThanOrEqualArrayLength Parms{};

	Parms.TargetArray = std::move(TargetArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	return Parms.ReturnValue;
}


// Function BlueprintSorting.BlueprintSortingHelperLibrary.Increment
// (Final, Native, Static, Public)
// Parameters:
// int32                                   ToIncrement                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UBlueprintSortingHelperLibrary::Increment(int32 ToIncrement)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "Increment");

	Params::BlueprintSortingHelperLibrary_Increment Parms{};

	Parms.ToIncrement = ToIncrement;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintSorting.BlueprintSortingHelperLibrary.LessThanOrEqualArrayLength
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const TArray<int32>&                    TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  Index_0                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBlueprintSortingHelperLibrary::LessThanOrEqualArrayLength(const TArray<int32>& TargetArray, int32* Index_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "LessThanOrEqualArrayLength");

	Params::BlueprintSortingHelperLibrary_LessThanOrEqualArrayLength Parms{};

	Parms.TargetArray = std::move(TargetArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Index_0 != nullptr)
		*Index_0 = Parms.Index_0;

	return Parms.ReturnValue;
}


// Function BlueprintSorting.BlueprintSortingHelperLibrary.SwapItems
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// const TArray<int32>&                    TargetArray                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  index1                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  index2                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintSortingHelperLibrary::SwapItems(const TArray<int32>& TargetArray, int32* index1, int32* index2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "SwapItems");

	Params::BlueprintSortingHelperLibrary_SwapItems Parms{};

	Parms.TargetArray = std::move(TargetArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (index1 != nullptr)
		*index1 = Parms.index1;

	if (index2 != nullptr)
		*index2 = Parms.index2;
}


// Function BlueprintSorting.BlueprintSortingHelperLibrary.TestItem
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// int32*                                  TargetItem                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintSortingHelperLibrary::TestItem(int32* TargetItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "TestItem");

	Params::BlueprintSortingHelperLibrary_TestItem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetItem != nullptr)
		*TargetItem = Parms.TargetItem;
}


// Function BlueprintSorting.BlueprintSortingHelperLibrary.TestThreeItems
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// int32*                                  TargetItem1                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  TargetItem2                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  TargetItem3                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintSortingHelperLibrary::TestThreeItems(int32* TargetItem1, int32* TargetItem2, int32* TargetItem3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "TestThreeItems");

	Params::BlueprintSortingHelperLibrary_TestThreeItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetItem1 != nullptr)
		*TargetItem1 = Parms.TargetItem1;

	if (TargetItem2 != nullptr)
		*TargetItem2 = Parms.TargetItem2;

	if (TargetItem3 != nullptr)
		*TargetItem3 = Parms.TargetItem3;
}


// Function BlueprintSorting.BlueprintSortingHelperLibrary.TestTwoItems
// (Final, Native, Static, Public, HasOutParams)
// Parameters:
// int32*                                  TargetItem1                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  TargetItem2                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlueprintSortingHelperLibrary::TestTwoItems(int32* TargetItem1, int32* TargetItem2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BlueprintSortingHelperLibrary", "TestTwoItems");

	Params::BlueprintSortingHelperLibrary_TestTwoItems Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (TargetItem1 != nullptr)
		*TargetItem1 = Parms.TargetItem1;

	if (TargetItem2 != nullptr)
		*TargetItem2 = Parms.TargetItem2;
}


// Function BlueprintSorting.OrderingResult.IsFirstAfterSecond
// (Final, Native, Static, Public)
// Parameters:
// class UOrderingResult*                  OrderingResult                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortDirection                          SortDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOrderingResult::IsFirstAfterSecond(class UOrderingResult* OrderingResult, ESortDirection SortDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OrderingResult", "IsFirstAfterSecond");

	Params::OrderingResult_IsFirstAfterSecond Parms{};

	Parms.OrderingResult = OrderingResult;
	Parms.SortDirection = SortDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintSorting.OrderingResult.MakeOrderingResult
// (Final, Native, Static, Public)
// Parameters:
// class UOrderingResult*                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOrderingResult* UOrderingResult::MakeOrderingResult()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OrderingResult", "MakeOrderingResult");

	Params::OrderingResult_MakeOrderingResult Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BlueprintSorting.OrderingResult.SetForFloat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   R                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Epsilon                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrderingResult::SetForFloat(float R, float Epsilon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrderingResult", "SetForFloat");

	Params::OrderingResult_SetForFloat Parms{};

	Parms.R = R;
	Parms.Epsilon = Epsilon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BlueprintSorting.OrderingResult.SetForInt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   R                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrderingResult::SetForInt(int32 R)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrderingResult", "SetForInt");

	Params::OrderingResult_SetForInt Parms{};

	Parms.R = R;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BlueprintSorting.OrderingResult.SetForInts
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   A                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrderingResult::SetForInts(int32 A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrderingResult", "SetForInts");

	Params::OrderingResult_SetForInts Parms{};

	Parms.A = A;
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BlueprintSorting.OrderingResult.SetForStrings
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const class FString&                    A                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    B                                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrderingResult::SetForStrings(const class FString& A, const class FString& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrderingResult", "SetForStrings");

	Params::OrderingResult_SetForStrings Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BlueprintSorting.OrderingResult.SetForTexts
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FText&                      B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOrderingResult::SetForTexts(const class FText& A, const class FText& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrderingResult", "SetForTexts");

	Params::OrderingResult_SetForTexts Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

