#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Holds

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "FPromptParams_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Holds.BP_Holds_C.AutoLinkAllHoldsInRange
// 0x0020 (0x0020 - 0x0000)
struct BP_Holds_C_AutoLinkAllHoldsInRange final
{
public:
	TArray<class ABP_Holds_C*>                    local_AllHolds;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	TArray<class ABP_Holds_C*>                    K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_Holds_C_AutoLinkAllHoldsInRange) == 0x000008, "Wrong alignment on BP_Holds_C_AutoLinkAllHoldsInRange");
static_assert(sizeof(BP_Holds_C_AutoLinkAllHoldsInRange) == 0x000020, "Wrong size on BP_Holds_C_AutoLinkAllHoldsInRange");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRange, local_AllHolds) == 0x000000, "Member 'BP_Holds_C_AutoLinkAllHoldsInRange::local_AllHolds' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRange, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_Holds_C_AutoLinkAllHoldsInRange::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.AutoLinkAllHoldsInRangeWithIgnoreList
// 0x0058 (0x0058 - 0x0000)
struct BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList final
{
public:
	TArray<class ABP_Holds_C*>                    ClimbingElementsToIgnore;                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class ABP_Holds_C*>                    local_HoldsToIgnore;                               // 0x0010(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Holds_C*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Holds_C*>                    CallFunc_GetClimbingElementInRange_ClimbingElements; // 0x0048(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList) == 0x000008, "Wrong alignment on BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList");
static_assert(sizeof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList) == 0x000058, "Wrong size on BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, ClimbingElementsToIgnore) == 0x000000, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::ClimbingElementsToIgnore' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, local_HoldsToIgnore) == 0x000010, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::local_HoldsToIgnore' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, Temp_int_Array_Index_Variable) == 0x000020, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, Temp_int_Loop_Counter_Variable) == 0x000024, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_Array_Contains_ReturnValue) == 0x000038, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_Array_Length_ReturnValue) == 0x00003C, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_Not_PreBool_ReturnValue) == 0x000040, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_Less_IntInt_ReturnValue) == 0x000041, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList, CallFunc_GetClimbingElementInRange_ClimbingElements) == 0x000048, "Member 'BP_Holds_C_AutoLinkAllHoldsInRangeWithIgnoreList::CallFunc_GetClimbingElementInRange_ClimbingElements' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.AutoLinkHold
// 0x0048 (0x0048 - 0x0000)
struct BP_Holds_C_AutoLinkHold final
{
public:
	TArray<class ABP_Holds_C*>                    local_AllHolds;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	bool                                          CallFunc_IsEntryOrExit_ReturnValue;                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Holds_C*>                    CallFunc_SortClimbingElementByDistance_SortedArray; // 0x0018(0x0010)(ReferenceParm)
	class ABP_Holds_C*                            CallFunc_LinkToFirstClimbingElementAndRemoveIt_LinkedHold; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Holds_C*                            CallFunc_LinkToFirstClimbingElementAndRemoveIt_LinkedHold_1; // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Holds_C*>                    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0038(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_Holds_C_AutoLinkHold) == 0x000008, "Wrong alignment on BP_Holds_C_AutoLinkHold");
static_assert(sizeof(BP_Holds_C_AutoLinkHold) == 0x000048, "Wrong size on BP_Holds_C_AutoLinkHold");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, local_AllHolds) == 0x000000, "Member 'BP_Holds_C_AutoLinkHold::local_AllHolds' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, CallFunc_IsEntryOrExit_ReturnValue) == 0x000010, "Member 'BP_Holds_C_AutoLinkHold::CallFunc_IsEntryOrExit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BP_Holds_C_AutoLinkHold::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, CallFunc_SortClimbingElementByDistance_SortedArray) == 0x000018, "Member 'BP_Holds_C_AutoLinkHold::CallFunc_SortClimbingElementByDistance_SortedArray' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, CallFunc_LinkToFirstClimbingElementAndRemoveIt_LinkedHold) == 0x000028, "Member 'BP_Holds_C_AutoLinkHold::CallFunc_LinkToFirstClimbingElementAndRemoveIt_LinkedHold' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, CallFunc_LinkToFirstClimbingElementAndRemoveIt_LinkedHold_1) == 0x000030, "Member 'BP_Holds_C_AutoLinkHold::CallFunc_LinkToFirstClimbingElementAndRemoveIt_LinkedHold_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_AutoLinkHold, CallFunc_GetAllActorsOfClass_OutActors) == 0x000038, "Member 'BP_Holds_C_AutoLinkHold::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.CanInteractWithMount
// 0x0001 (0x0001 - 0x0000)
struct BP_Holds_C_CanInteractWithMount final
{
public:
	bool                                          CanInteract;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_CanInteractWithMount) == 0x000001, "Wrong alignment on BP_Holds_C_CanInteractWithMount");
static_assert(sizeof(BP_Holds_C_CanInteractWithMount) == 0x000001, "Wrong size on BP_Holds_C_CanInteractWithMount");
static_assert(offsetof(BP_Holds_C_CanInteractWithMount, CanInteract) == 0x000000, "Member 'BP_Holds_C_CanInteractWithMount::CanInteract' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.CheckCanExitToBottom
// 0x00E8 (0x00E8 - 0x0000)
struct BP_Holds_C_CheckCanExitToBottom final
{
public:
	struct FVector                                InputDirectionVertical;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanExit;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_DoubleToVector_ReturnValue;          // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_CheckCanExitToBottom) == 0x000008, "Wrong alignment on BP_Holds_C_CheckCanExitToBottom");
static_assert(sizeof(BP_Holds_C_CheckCanExitToBottom) == 0x0000E8, "Wrong size on BP_Holds_C_CheckCanExitToBottom");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, InputDirectionVertical) == 0x000000, "Member 'BP_Holds_C_CheckCanExitToBottom::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, InputScale) == 0x000018, "Member 'BP_Holds_C_CheckCanExitToBottom::InputScale' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CanExit) == 0x000020, "Member 'BP_Holds_C_CheckCanExitToBottom::CanExit' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, Location) == 0x000028, "Member 'BP_Holds_C_CheckCanExitToBottom::Location' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, Rotation) == 0x000040, "Member 'BP_Holds_C_CheckCanExitToBottom::Rotation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_Vector_Up_ReturnValue) == 0x000058, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000078, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_Conv_DoubleToVector_ReturnValue) == 0x000090, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_Conv_DoubleToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000A8, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_Multiply_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000D8, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000E0, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_BooleanAND_ReturnValue) == 0x0000E1, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToBottom, CallFunc_BooleanAND_ReturnValue_1) == 0x0000E2, "Member 'BP_Holds_C_CheckCanExitToBottom::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.CheckCanExitToTop
// 0x00C0 (0x00C0 - 0x0000)
struct BP_Holds_C_CheckCanExitToTop final
{
public:
	struct FVector                                InputDirectionVertical;                            // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanExit;                                           // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Vector_Up_ReturnValue;                    // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_CheckCanExitToTop) == 0x000008, "Wrong alignment on BP_Holds_C_CheckCanExitToTop");
static_assert(sizeof(BP_Holds_C_CheckCanExitToTop) == 0x0000C0, "Wrong size on BP_Holds_C_CheckCanExitToTop");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, InputDirectionVertical) == 0x000000, "Member 'BP_Holds_C_CheckCanExitToTop::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, InputScale) == 0x000018, "Member 'BP_Holds_C_CheckCanExitToTop::InputScale' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CanExit) == 0x000020, "Member 'BP_Holds_C_CheckCanExitToTop::CanExit' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, Location) == 0x000028, "Member 'BP_Holds_C_CheckCanExitToTop::Location' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, Rotation) == 0x000040, "Member 'BP_Holds_C_CheckCanExitToTop::Rotation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_Vector_Up_ReturnValue) == 0x000058, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_Vector_Up_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000070, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_Dot_VectorVector_ReturnValue) == 0x000078, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000080, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_BooleanAND_ReturnValue) == 0x000099, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000A0, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckCanExitToTop, CallFunc_BooleanAND_ReturnValue_1) == 0x0000B8, "Member 'BP_Holds_C_CheckCanExitToTop::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.CheckForErrors
// 0x01A8 (0x01A8 - 0x0000)
struct BP_Holds_C_CheckForErrors final
{
public:
	TArray<class FText>                           ErrorMessages;                                     // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEntryOrExit_ReturnValue;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0018(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0028(0x0010)()
	bool                                          CallFunc_EqualEqual_VectorVector_ReturnValue;      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ArrayContainsInvalid_Result;              // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_ArrayContainsInvalid_ArrayIndex;          // 0x0048(0x0010)(ReferenceParm)
	bool                                          CallFunc_ArrayContainsInvalid_Result_1;            // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_ArrayContainsInvalid_ArrayIndex_1;        // 0x0060(0x0010)(ReferenceParm)
	TArray<class FString>                         CallFunc_ToStringArray__integer__StringArray;      // 0x0070(0x0010)(ReferenceParm)
	TArray<class FString>                         CallFunc_ToStringArray__integer__StringArray_1;    // 0x0080(0x0010)(ReferenceParm)
	class FString                                 CallFunc_JoinStringArray_ReturnValue;              // 0x0090(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_JoinStringArray_ReturnValue_1;            // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x00B0(0x0010)()
	class FText                                   CallFunc_Conv_StringToText_ReturnValue_1;          // 0x00C0(0x0010)()
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00D0(0x0048)(HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData_1;            // 0x0118(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_1;                          // 0x0160(0x0010)(ReferenceParm)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array_2;                          // 0x0170(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue_1;                     // 0x0180(0x0010)()
	class FText                                   CallFunc_Format_ReturnValue_2;                     // 0x0190(0x0010)()
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_CheckForErrors) == 0x000008, "Wrong alignment on BP_Holds_C_CheckForErrors");
static_assert(sizeof(BP_Holds_C_CheckForErrors) == 0x0001A8, "Wrong size on BP_Holds_C_CheckForErrors");
static_assert(offsetof(BP_Holds_C_CheckForErrors, ErrorMessages) == 0x000000, "Member 'BP_Holds_C_CheckForErrors::ErrorMessages' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, ReturnValue) == 0x000010, "Member 'BP_Holds_C_CheckForErrors::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_IsEntryOrExit_ReturnValue) == 0x000011, "Member 'BP_Holds_C_CheckForErrors::CallFunc_IsEntryOrExit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, K2Node_MakeArray_Array) == 0x000018, "Member 'BP_Holds_C_CheckForErrors::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Format_ReturnValue) == 0x000028, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_EqualEqual_VectorVector_ReturnValue) == 0x000038, "Member 'BP_Holds_C_CheckForErrors::CallFunc_EqualEqual_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Array_Add_ReturnValue) == 0x00003C, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'BP_Holds_C_CheckForErrors::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_ArrayContainsInvalid_Result) == 0x000041, "Member 'BP_Holds_C_CheckForErrors::CallFunc_ArrayContainsInvalid_Result' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_ArrayContainsInvalid_ArrayIndex) == 0x000048, "Member 'BP_Holds_C_CheckForErrors::CallFunc_ArrayContainsInvalid_ArrayIndex' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_ArrayContainsInvalid_Result_1) == 0x000058, "Member 'BP_Holds_C_CheckForErrors::CallFunc_ArrayContainsInvalid_Result_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_ArrayContainsInvalid_ArrayIndex_1) == 0x000060, "Member 'BP_Holds_C_CheckForErrors::CallFunc_ArrayContainsInvalid_ArrayIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_ToStringArray__integer__StringArray) == 0x000070, "Member 'BP_Holds_C_CheckForErrors::CallFunc_ToStringArray__integer__StringArray' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_ToStringArray__integer__StringArray_1) == 0x000080, "Member 'BP_Holds_C_CheckForErrors::CallFunc_ToStringArray__integer__StringArray_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_JoinStringArray_ReturnValue) == 0x000090, "Member 'BP_Holds_C_CheckForErrors::CallFunc_JoinStringArray_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_JoinStringArray_ReturnValue_1) == 0x0000A0, "Member 'BP_Holds_C_CheckForErrors::CallFunc_JoinStringArray_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Conv_StringToText_ReturnValue) == 0x0000B0, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Conv_StringToText_ReturnValue_1) == 0x0000C0, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Conv_StringToText_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, K2Node_MakeStruct_FormatArgumentData) == 0x0000D0, "Member 'BP_Holds_C_CheckForErrors::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, K2Node_MakeStruct_FormatArgumentData_1) == 0x000118, "Member 'BP_Holds_C_CheckForErrors::K2Node_MakeStruct_FormatArgumentData_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, K2Node_MakeArray_Array_1) == 0x000160, "Member 'BP_Holds_C_CheckForErrors::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, K2Node_MakeArray_Array_2) == 0x000170, "Member 'BP_Holds_C_CheckForErrors::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Format_ReturnValue_1) == 0x000180, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Format_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Format_ReturnValue_2) == 0x000190, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Format_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Array_Add_ReturnValue_1) == 0x0001A0, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckForErrors, CallFunc_Array_Add_ReturnValue_2) == 0x0001A4, "Member 'BP_Holds_C_CheckForErrors::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.CheckMoveToNextClimbingElement
// 0x0170 (0x0170 - 0x0000)
struct BP_Holds_C_CheckMoveToNextClimbingElement final
{
public:
	struct FVector                                InputDirectionHorizontal;                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirectionVertical;                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        InputScale;                                        // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForward;                                     // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanMove;                                           // 0x0068(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IBPI_ClimbingElement_C> NextHold;                                         // 0x0070(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        local_BestCombinedDot;                             // 0x0080(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Holds_C*                            local_BestHold;                                    // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ABP_Holds_C*                            local_EvaluatedHold;                               // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_CameraLocation;                              // 0x0098(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_CameraForward;                               // 0x00B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_InputDirectionVertical;                      // 0x00C8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_InputDirectionHorizontal;                    // 0x00E0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x3];                                       // 0x00F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_wildcard_Variable;                            // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_wildcard_Variable_1;                          // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_wildcard_Variable_2;                          // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Holds_C*                            CallFunc_Array_Get_Item;                           // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x015C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15D[0x3];                                      // 0x015D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_EvaluatePossibleHold_ComputedDot;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_EvaluatePossibleHold_ComputedDot_1;       // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_CheckMoveToNextClimbingElement) == 0x000008, "Wrong alignment on BP_Holds_C_CheckMoveToNextClimbingElement");
static_assert(sizeof(BP_Holds_C_CheckMoveToNextClimbingElement) == 0x000170, "Wrong size on BP_Holds_C_CheckMoveToNextClimbingElement");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, InputDirectionHorizontal) == 0x000000, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, InputDirectionVertical) == 0x000018, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, InputScale) == 0x000030, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::InputScale' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CameraForward) == 0x000038, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CameraForward' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CameraLocation) == 0x000050, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CanMove) == 0x000068, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CanMove' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, NextHold) == 0x000070, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::NextHold' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_BestCombinedDot) == 0x000080, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_BestCombinedDot' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_BestHold) == 0x000088, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_BestHold' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_EvaluatedHold) == 0x000090, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_EvaluatedHold' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_CameraLocation) == 0x000098, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_CameraForward) == 0x0000B0, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_CameraForward' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_InputDirectionVertical) == 0x0000C8, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_InputDirectionVertical' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, local_InputDirectionHorizontal) == 0x0000E0, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::local_InputDirectionHorizontal' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000F8, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, Temp_int_Array_Index_Variable) == 0x0000FC, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, Temp_wildcard_Variable) == 0x000108, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000110, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Add_IntInt_ReturnValue) == 0x000118, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, Temp_wildcard_Variable_1) == 0x000120, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::Temp_wildcard_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000128, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000130, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_IsValid_ReturnValue) == 0x000138, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, Temp_wildcard_Variable_2) == 0x000140, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::Temp_wildcard_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000148, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Array_Get_Item) == 0x000150, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Array_Length_ReturnValue) == 0x000158, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_Less_IntInt_ReturnValue) == 0x00015C, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_EvaluatePossibleHold_ComputedDot) == 0x000160, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_EvaluatePossibleHold_ComputedDot' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_CheckMoveToNextClimbingElement, CallFunc_EvaluatePossibleHold_ComputedDot_1) == 0x000168, "Member 'BP_Holds_C_CheckMoveToNextClimbingElement::CallFunc_EvaluatePossibleHold_ComputedDot_1' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.ConstructObject
// 0x01B0 (0x01B0 - 0x0000)
struct BP_Holds_C_ConstructObject final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedBuild_ReturnValue;              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsNotEmpty_ReturnValue;             // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedBuild_ReturnValue_1;            // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedBuild_ReturnValue_2;            // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsEmpty_ReturnValue;                // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue;             // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRandomStream                          CallFunc_MakeRandomStream_ReturnValue;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_RandomIntegerFromStream_ReturnValue;      // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            CallFunc_Array_Get_Item;                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CallFunc_GetMaterial_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInPlayMode_ReturnValue;                 // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_3;                // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4B[0x1];                                       // 0x004B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Holds_C*>                    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0050(0x0010)(ReferenceParm)
	class ABP_Holds_C*                            CallFunc_Array_Get_Item_1;                         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue;               // 0x006D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_4;                // 0x006E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_1;           // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Contains_ReturnValue_1;             // 0x0075(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0076(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_77[0x1];                                       // 0x0077(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Holds_C*                            CallFunc_Array_Get_Item_2;                         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_RandomRotator_ReturnValue;                // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x00A8(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	const class ABP_Holds_C*                      Temp_object_Variable;                              // 0x01A0(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_RemoveItem_ReturnValue_2;           // 0x01A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_SetStaticMesh_ReturnValue;                // 0x01A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_ConstructObject) == 0x000008, "Wrong alignment on BP_Holds_C_ConstructObject");
static_assert(sizeof(BP_Holds_C_ConstructObject) == 0x0001B0, "Wrong size on BP_Holds_C_ConstructObject");
static_assert(offsetof(BP_Holds_C_ConstructObject, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_Holds_C_ConstructObject::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_Holds_C_ConstructObject::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_Holds_C_ConstructObject::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_IsPackagedBuild_ReturnValue) == 0x00000C, "Member 'BP_Holds_C_ConstructObject::CallFunc_IsPackagedBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Not_PreBool_ReturnValue) == 0x00000D, "Member 'BP_Holds_C_ConstructObject::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_IsNotEmpty_ReturnValue) == 0x00000E, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_IsNotEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Length_ReturnValue) == 0x000010, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_IsPackagedBuild_ReturnValue_1) == 0x000014, "Member 'BP_Holds_C_ConstructObject::CallFunc_IsPackagedBuild_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_IsPackagedBuild_ReturnValue_2) == 0x000015, "Member 'BP_Holds_C_ConstructObject::CallFunc_IsPackagedBuild_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Not_PreBool_ReturnValue_1) == 0x000016, "Member 'BP_Holds_C_ConstructObject::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_Holds_C_ConstructObject::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_IsEmpty_ReturnValue) == 0x00001C, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_IsEmpty_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Not_PreBool_ReturnValue_2) == 0x00001D, "Member 'BP_Holds_C_ConstructObject::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_RemoveItem_ReturnValue) == 0x00001E, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_RemoveItem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_MakeRandomStream_ReturnValue) == 0x000020, "Member 'BP_Holds_C_ConstructObject::CallFunc_MakeRandomStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000028, "Member 'BP_Holds_C_ConstructObject::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_RandomIntegerFromStream_ReturnValue) == 0x00002C, "Member 'BP_Holds_C_ConstructObject::CallFunc_RandomIntegerFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Get_Item) == 0x000030, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_RandomInteger_ReturnValue) == 0x000038, "Member 'BP_Holds_C_ConstructObject::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_GetMaterial_ReturnValue) == 0x000040, "Member 'BP_Holds_C_ConstructObject::CallFunc_GetMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_IsInPlayMode_ReturnValue) == 0x000048, "Member 'BP_Holds_C_ConstructObject::CallFunc_IsInPlayMode_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Not_PreBool_ReturnValue_3) == 0x000049, "Member 'BP_Holds_C_ConstructObject::CallFunc_Not_PreBool_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'BP_Holds_C_ConstructObject::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, Temp_int_Loop_Counter_Variable_1) == 0x00004C, "Member 'BP_Holds_C_ConstructObject::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_GetAllActorsOfClass_OutActors) == 0x000050, "Member 'BP_Holds_C_ConstructObject::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Get_Item_1) == 0x000060, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Length_ReturnValue_1) == 0x000068, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Less_IntInt_ReturnValue) == 0x00006C, "Member 'BP_Holds_C_ConstructObject::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Contains_ReturnValue) == 0x00006D, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Contains_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Not_PreBool_ReturnValue_4) == 0x00006E, "Member 'BP_Holds_C_ConstructObject::CallFunc_Not_PreBool_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Add_IntInt_ReturnValue_1) == 0x000070, "Member 'BP_Holds_C_ConstructObject::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_RemoveItem_ReturnValue_1) == 0x000074, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_RemoveItem_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Contains_ReturnValue_1) == 0x000075, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Contains_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_BooleanAND_ReturnValue_1) == 0x000076, "Member 'BP_Holds_C_ConstructObject::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Get_Item_2) == 0x000078, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_Length_ReturnValue_2) == 0x000080, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_AddUnique_ReturnValue) == 0x000084, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Less_IntInt_ReturnValue_1) == 0x000088, "Member 'BP_Holds_C_ConstructObject::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_RandomRotator_ReturnValue) == 0x000090, "Member 'BP_Holds_C_ConstructObject::CallFunc_RandomRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x0000A8, "Member 'BP_Holds_C_ConstructObject::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, Temp_object_Variable) == 0x0001A0, "Member 'BP_Holds_C_ConstructObject::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_Array_RemoveItem_ReturnValue_2) == 0x0001A8, "Member 'BP_Holds_C_ConstructObject::CallFunc_Array_RemoveItem_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ConstructObject, CallFunc_SetStaticMesh_ReturnValue) == 0x0001A9, "Member 'BP_Holds_C_ConstructObject::CallFunc_SetStaticMesh_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.EvaluatePossibleHold
// 0x00F8 (0x00F8 - 0x0000)
struct BP_Holds_C_EvaluatePossibleHold final
{
public:
	class AActor*                                 HoldToEvaluate;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InputDirection;                                    // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForward;                                     // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ComputedDot;                                       // 0x0050(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_CurrentLocation;                             // 0x0058(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                local_HoldToEvaluateLocation;                      // 0x0070(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        local_CurrentDot;                                  // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectLocationsOnCameraPlane_HoldToEvaluateLocation; // 0x0090(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectLocationsOnCameraPlane_CurrentLocation; // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_EvaluatePossibleHold) == 0x000008, "Wrong alignment on BP_Holds_C_EvaluatePossibleHold");
static_assert(sizeof(BP_Holds_C_EvaluatePossibleHold) == 0x0000F8, "Wrong size on BP_Holds_C_EvaluatePossibleHold");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, HoldToEvaluate) == 0x000000, "Member 'BP_Holds_C_EvaluatePossibleHold::HoldToEvaluate' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, InputDirection) == 0x000008, "Member 'BP_Holds_C_EvaluatePossibleHold::InputDirection' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CameraForward) == 0x000020, "Member 'BP_Holds_C_EvaluatePossibleHold::CameraForward' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CameraLocation) == 0x000038, "Member 'BP_Holds_C_EvaluatePossibleHold::CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, ComputedDot) == 0x000050, "Member 'BP_Holds_C_EvaluatePossibleHold::ComputedDot' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, local_CurrentLocation) == 0x000058, "Member 'BP_Holds_C_EvaluatePossibleHold::local_CurrentLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, local_HoldToEvaluateLocation) == 0x000070, "Member 'BP_Holds_C_EvaluatePossibleHold::local_HoldToEvaluateLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, local_CurrentDot) == 0x000088, "Member 'BP_Holds_C_EvaluatePossibleHold::local_CurrentDot' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CallFunc_ProjectLocationsOnCameraPlane_HoldToEvaluateLocation) == 0x000090, "Member 'BP_Holds_C_EvaluatePossibleHold::CallFunc_ProjectLocationsOnCameraPlane_HoldToEvaluateLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CallFunc_ProjectLocationsOnCameraPlane_CurrentLocation) == 0x0000A8, "Member 'BP_Holds_C_EvaluatePossibleHold::CallFunc_ProjectLocationsOnCameraPlane_CurrentLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000C0, "Member 'BP_Holds_C_EvaluatePossibleHold::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CallFunc_Normal_ReturnValue) == 0x0000D8, "Member 'BP_Holds_C_EvaluatePossibleHold::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_EvaluatePossibleHold, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000F0, "Member 'BP_Holds_C_EvaluatePossibleHold::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.ExecuteUbergraph_BP_Holds
// 0x0080 (0x0080 - 0x0000)
struct BP_Holds_C_ExecuteUbergraph_BP_Holds final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_InteractionState;                     // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_BattleState;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEntryOrExit_ReturnValue;                // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate; // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate_1; // 0x0018(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)> K2Node_CreateDelegate_OutputDelegate_2; // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)> K2Node_CreateDelegate_OutputDelegate_3; // 0x0038(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_World_C*             K2Node_Event_InteractingWorldCharacter;            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Instant;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_ClimbingElement_C> CallFunc_StartClimbing_ClimbingElement_CastInput; // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_RegisterDistantInteractiveObject_InteractiveObject_CastInput; // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_ExecuteUbergraph_BP_Holds) == 0x000008, "Wrong alignment on BP_Holds_C_ExecuteUbergraph_BP_Holds");
static_assert(sizeof(BP_Holds_C_ExecuteUbergraph_BP_Holds) == 0x000080, "Wrong size on BP_Holds_C_ExecuteUbergraph_BP_Holds");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, EntryPoint) == 0x000000, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_Event_InteractionState) == 0x000004, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_Event_InteractionState' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_Event_BattleState) == 0x000005, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_Event_BattleState' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, CallFunc_IsEntryOrExit_ReturnValue) == 0x000006, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::CallFunc_IsEntryOrExit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_Event_EndPlayReason) == 0x000007, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_CreateDelegate_OutputDelegate_1) == 0x000018, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_CreateDelegate_OutputDelegate_2) == 0x000028, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_CreateDelegate_OutputDelegate_3) == 0x000038, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_Event_InteractingWorldCharacter) == 0x000048, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_Event_InteractingWorldCharacter' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, K2Node_Event_Instant) == 0x000050, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::K2Node_Event_Instant' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, CallFunc_GetInteractionSystem_ReturnValue) == 0x000058, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, CallFunc_StartClimbing_ClimbingElement_CastInput) == 0x000060, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::CallFunc_StartClimbing_ClimbingElement_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ExecuteUbergraph_BP_Holds, CallFunc_RegisterDistantInteractiveObject_InteractiveObject_CastInput) == 0x000070, "Member 'BP_Holds_C_ExecuteUbergraph_BP_Holds::CallFunc_RegisterDistantInteractiveObject_InteractiveObject_CastInput' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.GetClimbingElementInRange
// 0x00A0 (0x00A0 - 0x0000)
struct BP_Holds_C_GetClimbingElementInRange final
{
public:
	class ABP_Holds_C*                            ClimbingElement;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Holds_C*>                    ClimbingElements;                                  // 0x0008(0x0010)(Parm, OutParm)
	TArray<class ABP_Holds_C*>                    local_ClimbingElementsInRange;                     // 0x0018(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Holds_C*>                    CallFunc_GetAllActorsOfClass_OutActors;            // 0x0050(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_Holds_C*                            CallFunc_Array_Get_Item;                           // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ObjectObject_ReturnValue;        // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x009A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x009B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_GetClimbingElementInRange) == 0x000008, "Wrong alignment on BP_Holds_C_GetClimbingElementInRange");
static_assert(sizeof(BP_Holds_C_GetClimbingElementInRange) == 0x0000A0, "Wrong size on BP_Holds_C_GetClimbingElementInRange");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, ClimbingElement) == 0x000000, "Member 'BP_Holds_C_GetClimbingElementInRange::ClimbingElement' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, ClimbingElements) == 0x000008, "Member 'BP_Holds_C_GetClimbingElementInRange::ClimbingElements' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, local_ClimbingElementsInRange) == 0x000018, "Member 'BP_Holds_C_GetClimbingElementInRange::local_ClimbingElementsInRange' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, Temp_int_Loop_Counter_Variable) == 0x000028, "Member 'BP_Holds_C_GetClimbingElementInRange::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_Add_IntInt_ReturnValue) == 0x000048, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, Temp_int_Array_Index_Variable) == 0x00004C, "Member 'BP_Holds_C_GetClimbingElementInRange::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_GetAllActorsOfClass_OutActors) == 0x000050, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_GetAllActorsOfClass_OutActors' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_Array_Length_ReturnValue) == 0x000060, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_Array_Get_Item) == 0x000068, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_Less_IntInt_ReturnValue) == 0x000070, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_NotEqual_ObjectObject_ReturnValue) == 0x000071, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_NotEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_Array_AddUnique_ReturnValue) == 0x000074, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000078, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_Vector_Distance_ReturnValue) == 0x000090, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000098, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000099, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_BooleanAND_ReturnValue) == 0x00009A, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementInRange, CallFunc_BooleanAND_ReturnValue_1) == 0x00009B, "Member 'BP_Holds_C_GetClimbingElementInRange::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.GetClimbingElementLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Holds_C_GetClimbingElementLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_GetClimbingElementLocation) == 0x000008, "Wrong alignment on BP_Holds_C_GetClimbingElementLocation");
static_assert(sizeof(BP_Holds_C_GetClimbingElementLocation) == 0x000030, "Wrong size on BP_Holds_C_GetClimbingElementLocation");
static_assert(offsetof(BP_Holds_C_GetClimbingElementLocation, Location) == 0x000000, "Member 'BP_Holds_C_GetClimbingElementLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementLocation, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000018, "Member 'BP_Holds_C_GetClimbingElementLocation::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.GetClimbingElementRotation
// 0x0030 (0x0030 - 0x0000)
struct BP_Holds_C_GetClimbingElementRotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BP_Holds_C_GetClimbingElementRotation) == 0x000008, "Wrong alignment on BP_Holds_C_GetClimbingElementRotation");
static_assert(sizeof(BP_Holds_C_GetClimbingElementRotation) == 0x000030, "Wrong size on BP_Holds_C_GetClimbingElementRotation");
static_assert(offsetof(BP_Holds_C_GetClimbingElementRotation, Rotation) == 0x000000, "Member 'BP_Holds_C_GetClimbingElementRotation::Rotation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetClimbingElementRotation, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'BP_Holds_C_GetClimbingElementRotation::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.GetInteractionPromptParams
// 0x0018 (0x0018 - 0x0000)
struct BP_Holds_C_GetInteractionPromptParams final
{
public:
	struct FFPromptParams                         PromptParams;                                      // 0x0000(0x0018)(Parm, OutParm, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_GetInteractionPromptParams) == 0x000008, "Wrong alignment on BP_Holds_C_GetInteractionPromptParams");
static_assert(sizeof(BP_Holds_C_GetInteractionPromptParams) == 0x000018, "Wrong size on BP_Holds_C_GetInteractionPromptParams");
static_assert(offsetof(BP_Holds_C_GetInteractionPromptParams, PromptParams) == 0x000000, "Member 'BP_Holds_C_GetInteractionPromptParams::PromptParams' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.IsEntryOrExit
// 0x0002 (0x0002 - 0x0000)
struct BP_Holds_C_IsEntryOrExit final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_IsEntryOrExit) == 0x000001, "Wrong alignment on BP_Holds_C_IsEntryOrExit");
static_assert(sizeof(BP_Holds_C_IsEntryOrExit) == 0x000002, "Wrong size on BP_Holds_C_IsEntryOrExit");
static_assert(offsetof(BP_Holds_C_IsEntryOrExit, ReturnValue) == 0x000000, "Member 'BP_Holds_C_IsEntryOrExit::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_IsEntryOrExit, CallFunc_BooleanOR_ReturnValue) == 0x000001, "Member 'BP_Holds_C_IsEntryOrExit::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.IsInteractionAvailable
// 0x0020 (0x0020 - 0x0000)
struct BP_Holds_C_IsInteractionAvailable final
{
public:
	bool                                          Available;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UBP_ClimbingComponent_C*                CallFunc_GetComponentByClass_ReturnValue;          // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CanUseClimbingElement_CanClimb;           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_IsInteractionAvailable) == 0x000008, "Wrong alignment on BP_Holds_C_IsInteractionAvailable");
static_assert(sizeof(BP_Holds_C_IsInteractionAvailable) == 0x000020, "Wrong size on BP_Holds_C_IsInteractionAvailable");
static_assert(offsetof(BP_Holds_C_IsInteractionAvailable, Available) == 0x000000, "Member 'BP_Holds_C_IsInteractionAvailable::Available' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_IsInteractionAvailable, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_Holds_C_IsInteractionAvailable::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_IsInteractionAvailable, CallFunc_GetComponentByClass_ReturnValue) == 0x000010, "Member 'BP_Holds_C_IsInteractionAvailable::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_IsInteractionAvailable, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'BP_Holds_C_IsInteractionAvailable::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_IsInteractionAvailable, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'BP_Holds_C_IsInteractionAvailable::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_IsInteractionAvailable, CallFunc_CanUseClimbingElement_CanClimb) == 0x00001A, "Member 'BP_Holds_C_IsInteractionAvailable::CallFunc_CanUseClimbingElement_CanClimb' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.IsInteractionDone
// 0x0001 (0x0001 - 0x0000)
struct BP_Holds_C_IsInteractionDone final
{
public:
	bool                                          Done;                                              // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_IsInteractionDone) == 0x000001, "Wrong alignment on BP_Holds_C_IsInteractionDone");
static_assert(sizeof(BP_Holds_C_IsInteractionDone) == 0x000001, "Wrong size on BP_Holds_C_IsInteractionDone");
static_assert(offsetof(BP_Holds_C_IsInteractionDone, Done) == 0x000000, "Member 'BP_Holds_C_IsInteractionDone::Done' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.LinkToFirstClimbingElementAndRemoveIt
// 0x0038 (0x0038 - 0x0000)
struct BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt final
{
public:
	TArray<class ABP_Holds_C*>                    Holds;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class ABP_Holds_C*                            LinkedHold;                                        // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ABP_Holds_C*                            CallFunc_Array_Get_Item;                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_Holds_C*                            CallFunc_Array_Get_Item_1;                         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_IntInt_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt) == 0x000008, "Wrong alignment on BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt");
static_assert(sizeof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt) == 0x000038, "Wrong size on BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, Holds) == 0x000000, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::Holds' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, LinkedHold) == 0x000010, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::LinkedHold' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, CallFunc_Array_Get_Item) == 0x000018, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, CallFunc_Array_Add_ReturnValue) == 0x000020, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, CallFunc_Array_Length_ReturnValue) == 0x000024, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, CallFunc_Array_Get_Item_1) == 0x000028, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt, CallFunc_GreaterEqual_IntInt_ReturnValue) == 0x000030, "Member 'BP_Holds_C_LinkToFirstClimbingElementAndRemoveIt::CallFunc_GreaterEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.OnEnemyBattleStateLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_Holds_C_OnEnemyBattleStateLoaded final
{
public:
	bool                                          BattleState;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_OnEnemyBattleStateLoaded) == 0x000001, "Wrong alignment on BP_Holds_C_OnEnemyBattleStateLoaded");
static_assert(sizeof(BP_Holds_C_OnEnemyBattleStateLoaded) == 0x000001, "Wrong size on BP_Holds_C_OnEnemyBattleStateLoaded");
static_assert(offsetof(BP_Holds_C_OnEnemyBattleStateLoaded, BattleState) == 0x000000, "Member 'BP_Holds_C_OnEnemyBattleStateLoaded::BattleState' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.OnInteractionRequested
// 0x0010 (0x0010 - 0x0000)
struct BP_Holds_C_OnInteractionRequested final
{
public:
	class ABP_jRPG_Character_World_C*             InteractingWorldCharacter;                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Instant;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_OnInteractionRequested) == 0x000008, "Wrong alignment on BP_Holds_C_OnInteractionRequested");
static_assert(sizeof(BP_Holds_C_OnInteractionRequested) == 0x000010, "Wrong size on BP_Holds_C_OnInteractionRequested");
static_assert(offsetof(BP_Holds_C_OnInteractionRequested, InteractingWorldCharacter) == 0x000000, "Member 'BP_Holds_C_OnInteractionRequested::InteractingWorldCharacter' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnInteractionRequested, Instant) == 0x000008, "Member 'BP_Holds_C_OnInteractionRequested::Instant' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.OnObjectInteractionStateLoaded
// 0x0001 (0x0001 - 0x0000)
struct BP_Holds_C_OnObjectInteractionStateLoaded final
{
public:
	bool                                          InteractionState;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_OnObjectInteractionStateLoaded) == 0x000001, "Wrong alignment on BP_Holds_C_OnObjectInteractionStateLoaded");
static_assert(sizeof(BP_Holds_C_OnObjectInteractionStateLoaded) == 0x000001, "Wrong size on BP_Holds_C_OnObjectInteractionStateLoaded");
static_assert(offsetof(BP_Holds_C_OnObjectInteractionStateLoaded, InteractionState) == 0x000000, "Member 'BP_Holds_C_OnObjectInteractionStateLoaded::InteractionState' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.OnTriggerBeginOverlap
// 0x0140 (0x0140 - 0x0000)
struct BP_Holds_C_OnTriggerBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0118(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_RegisterInteractiveObject_InteractiveObject_CastInput; // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_OnTriggerBeginOverlap) == 0x000008, "Wrong alignment on BP_Holds_C_OnTriggerBeginOverlap");
static_assert(sizeof(BP_Holds_C_OnTriggerBeginOverlap) == 0x000140, "Wrong size on BP_Holds_C_OnTriggerBeginOverlap");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, OverlappedComponent) == 0x000000, "Member 'BP_Holds_C_OnTriggerBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, OtherActor) == 0x000008, "Member 'BP_Holds_C_OnTriggerBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, OtherComp) == 0x000010, "Member 'BP_Holds_C_OnTriggerBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_Holds_C_OnTriggerBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, bFromSweep) == 0x00001C, "Member 'BP_Holds_C_OnTriggerBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, SweepResult) == 0x000020, "Member 'BP_Holds_C_OnTriggerBeginOverlap::SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, CallFunc_GetInteractionSystem_ReturnValue) == 0x000118, "Member 'BP_Holds_C_OnTriggerBeginOverlap::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, CallFunc_GetPlayerPawn_ReturnValue) == 0x000120, "Member 'BP_Holds_C_OnTriggerBeginOverlap::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, CallFunc_RegisterInteractiveObject_InteractiveObject_CastInput) == 0x000128, "Member 'BP_Holds_C_OnTriggerBeginOverlap::CallFunc_RegisterInteractiveObject_InteractiveObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerBeginOverlap, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000138, "Member 'BP_Holds_C_OnTriggerBeginOverlap::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.OnTriggerEndOverlap
// 0x0048 (0x0048 - 0x0000)
struct BP_Holds_C_OnTriggerEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_InteractionSystem_C*                CallFunc_GetInteractionSystem_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBPI_Interaction_C>    CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput; // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_OnTriggerEndOverlap) == 0x000008, "Wrong alignment on BP_Holds_C_OnTriggerEndOverlap");
static_assert(sizeof(BP_Holds_C_OnTriggerEndOverlap) == 0x000048, "Wrong size on BP_Holds_C_OnTriggerEndOverlap");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, OverlappedComponent) == 0x000000, "Member 'BP_Holds_C_OnTriggerEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, OtherActor) == 0x000008, "Member 'BP_Holds_C_OnTriggerEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, OtherComp) == 0x000010, "Member 'BP_Holds_C_OnTriggerEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BP_Holds_C_OnTriggerEndOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, CallFunc_GetInteractionSystem_ReturnValue) == 0x000020, "Member 'BP_Holds_C_OnTriggerEndOverlap::CallFunc_GetInteractionSystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, CallFunc_GetPlayerPawn_ReturnValue) == 0x000028, "Member 'BP_Holds_C_OnTriggerEndOverlap::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput) == 0x000030, "Member 'BP_Holds_C_OnTriggerEndOverlap::CallFunc_UnregisterInteractiveObject_InteractiveObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_OnTriggerEndOverlap, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000040, "Member 'BP_Holds_C_OnTriggerEndOverlap::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.ProjectLocationsOnCameraPlane
// 0x00C8 (0x00C8 - 0x0000)
struct BP_Holds_C_ProjectLocationsOnCameraPlane final
{
public:
	class AActor*                                 HoldToEvaluate;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraForward;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CameraLocation;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HoldToEvaluateLocation;                            // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocation;                                   // 0x0050(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0080(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnToPlane_ReturnValue;        // 0x0098(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_ProjectPointOnToPlane_ReturnValue_1;      // 0x00B0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_ProjectLocationsOnCameraPlane) == 0x000008, "Wrong alignment on BP_Holds_C_ProjectLocationsOnCameraPlane");
static_assert(sizeof(BP_Holds_C_ProjectLocationsOnCameraPlane) == 0x0000C8, "Wrong size on BP_Holds_C_ProjectLocationsOnCameraPlane");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, HoldToEvaluate) == 0x000000, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::HoldToEvaluate' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CameraForward) == 0x000008, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CameraForward' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CameraLocation) == 0x000020, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CameraLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, HoldToEvaluateLocation) == 0x000038, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::HoldToEvaluateLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CurrentLocation) == 0x000050, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CurrentLocation' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000068, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000080, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CallFunc_ProjectPointOnToPlane_ReturnValue) == 0x000098, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CallFunc_ProjectPointOnToPlane_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_ProjectLocationsOnCameraPlane, CallFunc_ProjectPointOnToPlane_ReturnValue_1) == 0x0000B0, "Member 'BP_Holds_C_ProjectLocationsOnCameraPlane::CallFunc_ProjectPointOnToPlane_ReturnValue_1' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Holds_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Holds_C_ReceiveEndPlay");
static_assert(sizeof(BP_Holds_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Holds_C_ReceiveEndPlay");
static_assert(offsetof(BP_Holds_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Holds_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.ShouldHideDistantInteraction
// 0x0001 (0x0001 - 0x0000)
struct BP_Holds_C_ShouldHideDistantInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_ShouldHideDistantInteraction) == 0x000001, "Wrong alignment on BP_Holds_C_ShouldHideDistantInteraction");
static_assert(sizeof(BP_Holds_C_ShouldHideDistantInteraction) == 0x000001, "Wrong size on BP_Holds_C_ShouldHideDistantInteraction");
static_assert(offsetof(BP_Holds_C_ShouldHideDistantInteraction, ReturnValue) == 0x000000, "Member 'BP_Holds_C_ShouldHideDistantInteraction::ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.SortClimbingElementByDistance
// 0x0148 (0x0148 - 0x0000)
struct BP_Holds_C_SortClimbingElementByDistance final
{
public:
	class ABP_Holds_C*                            Hold;                                              // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_Holds_C*>                    Array;                                             // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	TArray<class ABP_Holds_C*>                    SortedArray;                                       // 0x0018(0x0010)(Parm, OutParm)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Temp_wildcard_Original_index_Variable;             // 0x0048(0x0010)(ConstParm, ReferenceParm)
	int32                                         Temp_int_NextIndex_Variable;                       // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            Temp_wildcard_RemapTable_Variable;                 // 0x0060(0x0050)(ConstParm)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABP_Holds_C*>                    CallFunc_Array_Remap_ResultArray;                  // 0x00B8(0x0010)(ReferenceParm)
	TArray<double>                                Temp_real_Variable;                                // 0x00C8(0x0010)(ReferenceParm)
	TArray<class ABP_Holds_C*>                    Temp_wildcard_Result_array_Variable;               // 0x00D8(0x0010)(ConstParm, ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x00EC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_MinOfFloatArray_IndexOfMinValue;          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MinOfFloatArray_MinValue;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Vector_DistanceSquared_ReturnValue;       // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<float>                                 CallFunc_MinOfFloatArray_FloatArray_ImplicitCast;  // 0x0138(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(BP_Holds_C_SortClimbingElementByDistance) == 0x000008, "Wrong alignment on BP_Holds_C_SortClimbingElementByDistance");
static_assert(sizeof(BP_Holds_C_SortClimbingElementByDistance) == 0x000148, "Wrong size on BP_Holds_C_SortClimbingElementByDistance");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Hold) == 0x000000, "Member 'BP_Holds_C_SortClimbingElementByDistance::Hold' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Array) == 0x000008, "Member 'BP_Holds_C_SortClimbingElementByDistance::Array' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, SortedArray) == 0x000018, "Member 'BP_Holds_C_SortClimbingElementByDistance::SortedArray' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_LastIndex_ReturnValue) == 0x000028, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Length_ReturnValue) == 0x00002C, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Temp_wildcard_Original_index_Variable) == 0x000048, "Member 'BP_Holds_C_SortClimbingElementByDistance::Temp_wildcard_Original_index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Temp_int_NextIndex_Variable) == 0x000058, "Member 'BP_Holds_C_SortClimbingElementByDistance::Temp_int_NextIndex_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Temp_wildcard_RemapTable_Variable) == 0x000060, "Member 'BP_Holds_C_SortClimbingElementByDistance::Temp_wildcard_RemapTable_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Add_IntInt_ReturnValue) == 0x0000B0, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Remap_ResultArray) == 0x0000B8, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Remap_ResultArray' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Temp_real_Variable) == 0x0000C8, "Member 'BP_Holds_C_SortClimbingElementByDistance::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Temp_wildcard_Result_array_Variable) == 0x0000D8, "Member 'BP_Holds_C_SortClimbingElementByDistance::Temp_wildcard_Result_array_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Length_ReturnValue_1) == 0x0000E8, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Greater_IntInt_ReturnValue) == 0x0000EC, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_MinOfFloatArray_IndexOfMinValue) == 0x0000F0, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_MinOfFloatArray_IndexOfMinValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_MinOfFloatArray_MinValue) == 0x0000F4, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_MinOfFloatArray_MinValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Get_Item) == 0x0000F8, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, Temp_int_Variable) == 0x0000FC, "Member 'BP_Holds_C_SortClimbingElementByDistance::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Add_ReturnValue) == 0x000100, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Add_ReturnValue_1) == 0x000104, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000108, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000120, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Vector_DistanceSquared_ReturnValue) == 0x000128, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Vector_DistanceSquared_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Array_Add_ReturnValue_2) == 0x000130, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_Add_IntInt_ReturnValue_1) == 0x000134, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_SortClimbingElementByDistance, CallFunc_MinOfFloatArray_FloatArray_ImplicitCast) == 0x000138, "Member 'BP_Holds_C_SortClimbingElementByDistance::CallFunc_MinOfFloatArray_FloatArray_ImplicitCast' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.UpdateDebugDisplay
// 0x0060 (0x0060 - 0x0000)
struct BP_Holds_C_UpdateDebugDisplay final
{
public:
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsPackagedBuild_ReturnValue;              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsEntryOrExit_ReturnValue;                // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextRenderComponent*                   CallFunc_CreateDistanceTextComponentFromActors_TextRenderComponent; // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_AddUnique_ReturnValue;              // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UArrowComponent*                        CallFunc_CreateArrowComponentFromActors_ArrowComponent; // 0x0040(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_AddUnique_ReturnValue_1;            // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        CallFunc_Array_Get_Item_1;                         // 0x0050(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_UpdateDebugDisplay) == 0x000008, "Wrong alignment on BP_Holds_C_UpdateDebugDisplay");
static_assert(sizeof(BP_Holds_C_UpdateDebugDisplay) == 0x000060, "Wrong size on BP_Holds_C_UpdateDebugDisplay");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, Temp_int_Loop_Counter_Variable) == 0x000000, "Member 'BP_Holds_C_UpdateDebugDisplay::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Add_IntInt_ReturnValue) == 0x000004, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, Temp_int_Array_Index_Variable) == 0x000008, "Member 'BP_Holds_C_UpdateDebugDisplay::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, Temp_int_Loop_Counter_Variable_1) == 0x00000C, "Member 'BP_Holds_C_UpdateDebugDisplay::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Add_IntInt_ReturnValue_1) == 0x000010, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_IsPackagedBuild_ReturnValue) == 0x000014, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_IsPackagedBuild_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_IsEntryOrExit_ReturnValue) == 0x000015, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_IsEntryOrExit_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, Temp_int_Array_Index_Variable_1) == 0x000018, "Member 'BP_Holds_C_UpdateDebugDisplay::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Array_Get_Item) == 0x000020, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_CreateDistanceTextComponentFromActors_TextRenderComponent) == 0x000030, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_CreateDistanceTextComponentFromActors_TextRenderComponent' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Array_AddUnique_ReturnValue) == 0x00003C, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Array_AddUnique_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_CreateArrowComponentFromActors_ArrowComponent) == 0x000040, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_CreateArrowComponentFromActors_ArrowComponent' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Array_AddUnique_ReturnValue_1) == 0x000048, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Array_AddUnique_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Array_Get_Item_1) == 0x000050, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Array_Length_ReturnValue_1) == 0x000058, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateDebugDisplay, CallFunc_Less_IntInt_ReturnValue_1) == 0x00005C, "Member 'BP_Holds_C_UpdateDebugDisplay::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.UpdateEntryExitDefaultLocation
// 0x0228 (0x0228 - 0x0000)
struct BP_Holds_C_UpdateEntryExitDefaultLocation final
{
public:
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue_1;                 // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult;    // 0x0030(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	struct FHitResult                             CallFunc_K2_SetRelativeLocation_SweepHitResult_1;  // 0x0128(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_Vector_IsNearlyZero_ReturnValue;          // 0x0220(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_UpdateEntryExitDefaultLocation) == 0x000008, "Wrong alignment on BP_Holds_C_UpdateEntryExitDefaultLocation");
static_assert(sizeof(BP_Holds_C_UpdateEntryExitDefaultLocation) == 0x000228, "Wrong size on BP_Holds_C_UpdateEntryExitDefaultLocation");
static_assert(offsetof(BP_Holds_C_UpdateEntryExitDefaultLocation, CallFunc_MakeVector_ReturnValue) == 0x000000, "Member 'BP_Holds_C_UpdateEntryExitDefaultLocation::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateEntryExitDefaultLocation, CallFunc_MakeVector_ReturnValue_1) == 0x000018, "Member 'BP_Holds_C_UpdateEntryExitDefaultLocation::CallFunc_MakeVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateEntryExitDefaultLocation, CallFunc_K2_SetRelativeLocation_SweepHitResult) == 0x000030, "Member 'BP_Holds_C_UpdateEntryExitDefaultLocation::CallFunc_K2_SetRelativeLocation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateEntryExitDefaultLocation, CallFunc_K2_SetRelativeLocation_SweepHitResult_1) == 0x000128, "Member 'BP_Holds_C_UpdateEntryExitDefaultLocation::CallFunc_K2_SetRelativeLocation_SweepHitResult_1' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_UpdateEntryExitDefaultLocation, CallFunc_Vector_IsNearlyZero_ReturnValue) == 0x000220, "Member 'BP_Holds_C_UpdateEntryExitDefaultLocation::CallFunc_Vector_IsNearlyZero_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.GetInteractionFeedbackLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Holds_C_GetInteractionFeedbackLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_GetInteractionFeedbackLocation) == 0x000008, "Wrong alignment on BP_Holds_C_GetInteractionFeedbackLocation");
static_assert(sizeof(BP_Holds_C_GetInteractionFeedbackLocation) == 0x000030, "Wrong size on BP_Holds_C_GetInteractionFeedbackLocation");
static_assert(offsetof(BP_Holds_C_GetInteractionFeedbackLocation, Location) == 0x000000, "Member 'BP_Holds_C_GetInteractionFeedbackLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetInteractionFeedbackLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Holds_C_GetInteractionFeedbackLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

// Function BP_Holds.BP_Holds_C.GetInteractionLocation
// 0x0030 (0x0030 - 0x0000)
struct BP_Holds_C_GetInteractionLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Holds_C_GetInteractionLocation) == 0x000008, "Wrong alignment on BP_Holds_C_GetInteractionLocation");
static_assert(sizeof(BP_Holds_C_GetInteractionLocation) == 0x000030, "Wrong size on BP_Holds_C_GetInteractionLocation");
static_assert(offsetof(BP_Holds_C_GetInteractionLocation, Location) == 0x000000, "Member 'BP_Holds_C_GetInteractionLocation::Location' has a wrong offset!");
static_assert(offsetof(BP_Holds_C_GetInteractionLocation, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000018, "Member 'BP_Holds_C_GetInteractionLocation::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");

}

