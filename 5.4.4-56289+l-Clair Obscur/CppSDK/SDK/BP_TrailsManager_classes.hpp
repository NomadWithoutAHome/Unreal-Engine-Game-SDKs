#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TrailsManager

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TrailsManager.BP_TrailsManager_C
// 0x00F0 (0x0380 - 0x0290)
class ABP_TrailsManager_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TrailsLocation;                                    // 0x02A0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<double>                                TrailsRadius;                                      // 0x02B0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<double>                                TrailsHardness;                                    // 0x02C0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	TArray<double>                                TrailsDepth;                                       // 0x02D0(0x0010)(Edit, BlueprintVisible, Transient, DisableEditOnInstance)
	class UTextureRenderTarget2D*                 HistoryRenderTarget;                               // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDistance;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 CurrentRenderTarget;                               // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 TrailsRenderTarget;                                // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              TrailDrawer;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              HistoryMerge;                                      // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterial*                              HistoryCopy;                                       // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               TrailDrawerInstance;                               // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HistoryMergeInstance;                              // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               HistoryCopyInstance;                               // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HistoryLocation;                                   // 0x0330(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TrailsAttenuation;                                 // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CurrentLocation;                                   // 0x0350(0x0018)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LocationCalcHelper;                                // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocationCalculated;                              // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SideFade;                                          // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void RenderTrails();
	void RegisterTrail(const struct FVector& Location, double Radius, double Depth, double Hardness);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void Initialize();
	void ExecuteUbergraph_BP_TrailsManager(int32 EntryPoint);
	void CalculateLocation();

	void VisualizeTrailComponents(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TrailsManager_C">();
	}
	static class ABP_TrailsManager_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TrailsManager_C>();
	}
};
static_assert(alignof(ABP_TrailsManager_C) == 0x000008, "Wrong alignment on ABP_TrailsManager_C");
static_assert(sizeof(ABP_TrailsManager_C) == 0x000380, "Wrong size on ABP_TrailsManager_C");
static_assert(offsetof(ABP_TrailsManager_C, UberGraphFrame) == 0x000290, "Member 'ABP_TrailsManager_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_TrailsManager_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsLocation) == 0x0002A0, "Member 'ABP_TrailsManager_C::TrailsLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsRadius) == 0x0002B0, "Member 'ABP_TrailsManager_C::TrailsRadius' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsHardness) == 0x0002C0, "Member 'ABP_TrailsManager_C::TrailsHardness' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsDepth) == 0x0002D0, "Member 'ABP_TrailsManager_C::TrailsDepth' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryRenderTarget) == 0x0002E0, "Member 'ABP_TrailsManager_C::HistoryRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, MaxDistance) == 0x0002E8, "Member 'ABP_TrailsManager_C::MaxDistance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, CurrentRenderTarget) == 0x0002F0, "Member 'ABP_TrailsManager_C::CurrentRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsRenderTarget) == 0x0002F8, "Member 'ABP_TrailsManager_C::TrailsRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailDrawer) == 0x000300, "Member 'ABP_TrailsManager_C::TrailDrawer' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryMerge) == 0x000308, "Member 'ABP_TrailsManager_C::HistoryMerge' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryCopy) == 0x000310, "Member 'ABP_TrailsManager_C::HistoryCopy' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailDrawerInstance) == 0x000318, "Member 'ABP_TrailsManager_C::TrailDrawerInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryMergeInstance) == 0x000320, "Member 'ABP_TrailsManager_C::HistoryMergeInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryCopyInstance) == 0x000328, "Member 'ABP_TrailsManager_C::HistoryCopyInstance' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, HistoryLocation) == 0x000330, "Member 'ABP_TrailsManager_C::HistoryLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, TrailsAttenuation) == 0x000348, "Member 'ABP_TrailsManager_C::TrailsAttenuation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, CurrentLocation) == 0x000350, "Member 'ABP_TrailsManager_C::CurrentLocation' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, LocationCalcHelper) == 0x000368, "Member 'ABP_TrailsManager_C::LocationCalcHelper' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, IsLocationCalculated) == 0x000370, "Member 'ABP_TrailsManager_C::IsLocationCalculated' has a wrong offset!");
static_assert(offsetof(ABP_TrailsManager_C, SideFade) == 0x000378, "Member 'ABP_TrailsManager_C::SideFade' has a wrong offset!");

}

