#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GA_DistributionMode

#include "Basic.hpp"

#include "GA_DistributionMode_classes.hpp"
#include "GA_DistributionMode_parameters.hpp"


namespace SDK
{

// Function GA_DistributionMode.GA_DistributionMode_C.CustomEvent
// (BlueprintCallable, BlueprintEvent)

void UGA_DistributionMode_C::CustomEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "CustomEvent");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_DistributionMode.GA_DistributionMode_C.ExecuteUbergraph_GA_DistributionMode
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_DistributionMode_C::ExecuteUbergraph_GA_DistributionMode(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "ExecuteUbergraph_GA_DistributionMode");

	Params::GA_DistributionMode_C_ExecuteUbergraph_GA_DistributionMode Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_DistributionMode.GA_DistributionMode_C.K2_ActivateAbility
// (Event, Protected, BlueprintEvent)

void UGA_DistributionMode_C::K2_ActivateAbility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "K2_ActivateAbility");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GA_DistributionMode.GA_DistributionMode_C.K2_OnEndAbility
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bWasCancelled                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_DistributionMode_C::K2_OnEndAbility(bool bWasCancelled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "K2_OnEndAbility");

	Params::GA_DistributionMode_C_K2_OnEndAbility Parms{};

	Parms.bWasCancelled = bWasCancelled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GA_DistributionMode.GA_DistributionMode_C.GetPawnsInRange
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const class AActor*                     AvatarActor                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const float                             Range                                                  (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FTedUtilsPawnFilter&       Filter                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// TArray<class ATedPawn*>*                OutPawns                                               (Parm, OutParm)
// const struct FVector&                   Location                                               (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_DistributionMode_C::GetPawnsInRange(const class AActor* AvatarActor, const float Range, const struct FTedUtilsPawnFilter& Filter, TArray<class ATedPawn*>* OutPawns, const struct FVector& Location) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "GetPawnsInRange");

	Params::GA_DistributionMode_C_GetPawnsInRange Parms{};

	Parms.AvatarActor = AvatarActor;
	Parms.Range = Range;
	Parms.Filter = std::move(Filter);
	Parms.Location = std::move(Location);

	UObject::ProcessEvent(Func, &Parms);

	if (OutPawns != nullptr)
		*OutPawns = std::move(Parms.OutPawns);
}


// Function GA_DistributionMode.GA_DistributionMode_C.K2_CanActivateAbility
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// const struct FGameplayAbilityActorInfo& ActorInfo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ContainsInstancedReference)
// const struct FGameplayAbilitySpecHandle&Handle                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, NoDestructor, HasGetValueTypeHash)
// struct FGameplayTagContainer*           RelevantTags                                           (Parm, OutParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UGA_DistributionMode_C::K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "K2_CanActivateAbility");

	Params::GA_DistributionMode_C_K2_CanActivateAbility Parms{};

	Parms.ActorInfo = std::move(ActorInfo);
	Parms.Handle = std::move(Handle);

	UObject::ProcessEvent(Func, &Parms);

	if (RelevantTags != nullptr)
		*RelevantTags = std::move(Parms.RelevantTags);

	return Parms.ReturnValue;
}


// Function GA_DistributionMode.GA_DistributionMode_C.MeetsPowerRequirements
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ATedPawn*                         Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool*                                   RequirementsMet                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UGA_DistributionMode_C::MeetsPowerRequirements(class ATedPawn* Pawn, bool* RequirementsMet) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GA_DistributionMode_C", "MeetsPowerRequirements");

	Params::GA_DistributionMode_C_MeetsPowerRequirements Parms{};

	Parms.Pawn = Pawn;

	UObject::ProcessEvent(Func, &Parms);

	if (RequirementsMet != nullptr)
		*RequirementsMet = Parms.RequirementsMet;
}

}

