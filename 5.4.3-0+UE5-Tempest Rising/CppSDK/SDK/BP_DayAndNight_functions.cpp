#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DayAndNight

#include "Basic.hpp"

#include "BP_DayAndNight_classes.hpp"
#include "BP_DayAndNight_parameters.hpp"


namespace SDK
{

// Function BP_DayAndNight.BP_DayAndNight_C.Wind
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Manual_Curve                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UCurveFloat*                      Curve                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Construction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Factor                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Base_Value_To_Change                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double&                                 Current_Value__ref_                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Current_Value                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double&                                 Target_Value__ref_                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Target_Value                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Time_Min                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Time_Max                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double&                                 Change_Timer__ref_                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Timer                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double&                                 Change_Speed__ref_                                     (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Change_Speed                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Clamp_Values                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Clamp_Min                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Clamp_Max                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::Wind(bool Manual_Curve, class UCurveFloat* Curve, bool Construction, double Change_Factor, double Base_Value_To_Change, double& Current_Value__ref_, double Current_Value, double& Target_Value__ref_, double Target_Value, double Change_Time_Min, double Change_Time_Max, double& Change_Timer__ref_, double Change_Timer, double& Change_Speed__ref_, double Change_Speed, bool Clamp_Values, double Clamp_Min, double Clamp_Max, double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "Wind");

	Params::BP_DayAndNight_C_Wind Parms{};

	Parms.Manual_Curve = Manual_Curve;
	Parms.Curve = Curve;
	Parms.Construction = Construction;
	Parms.Change_Factor = Change_Factor;
	Parms.Base_Value_To_Change = Base_Value_To_Change;
	Parms.Current_Value__ref_ = Current_Value__ref_;
	Parms.Current_Value = Current_Value;
	Parms.Target_Value__ref_ = Target_Value__ref_;
	Parms.Target_Value = Target_Value;
	Parms.Change_Time_Min = Change_Time_Min;
	Parms.Change_Time_Max = Change_Time_Max;
	Parms.Change_Timer__ref_ = Change_Timer__ref_;
	Parms.Change_Timer = Change_Timer;
	Parms.Change_Speed__ref_ = Change_Speed__ref_;
	Parms.Change_Speed = Change_Speed;
	Parms.Clamp_Values = Clamp_Values;
	Parms.Clamp_Min = Clamp_Min;
	Parms.Clamp_Max = Clamp_Max;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);

	Current_Value__ref_ = Parms.Current_Value__ref_;
	Target_Value__ref_ = Parms.Target_Value__ref_;
	Change_Timer__ref_ = Parms.Change_Timer__ref_;
	Change_Speed__ref_ = Parms.Change_Speed__ref_;
}


// Function BP_DayAndNight.BP_DayAndNight_C.UserConstructionScript
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ABP_DayAndNight_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DayAndNight.BP_DayAndNight_C.UpdateFakeLight
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DayAndNight_C::UpdateFakeLight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "UpdateFakeLight");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DayAndNight.BP_DayAndNight_C.Snow Ground
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::Snow_Ground(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "Snow Ground");

	Params::BP_DayAndNight_C_Snow_Ground Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.Snow
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Construction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::Snow(bool Construction, double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "Snow");

	Params::BP_DayAndNight_C_Snow Parms{};

	Parms.Construction = Construction;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.SetupWind
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DayAndNight_C::SetupWind()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "SetupWind");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DayAndNight.BP_DayAndNight_C.SetSunMoon
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Construction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::SetSunMoon(double Delta, bool Construction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "SetSunMoon");

	Params::BP_DayAndNight_C_SetSunMoon Parms{};

	Parms.Delta = Delta;
	Parms.Construction = Construction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.SetLightParameters
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DayAndNight_C::SetLightParameters()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "SetLightParameters");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DayAndNight.BP_DayAndNight_C.SetDynamicWind
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Construction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::SetDynamicWind(double DeltaTime, bool Construction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "SetDynamicWind");

	Params::BP_DayAndNight_C_SetDynamicWind Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.Construction = Construction;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.RefreshMaterial
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_DayAndNight_C::RefreshMaterial()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "RefreshMaterial");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DayAndNight.BP_DayAndNight_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "ReceiveTick");

	Params::BP_DayAndNight_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_DayAndNight_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_DayAndNight.BP_DayAndNight_C.Rain Wetness
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::Rain_Wetness(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "Rain Wetness");

	Params::BP_DayAndNight_C_Rain_Wetness Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.Rain
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::Rain(double DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "Rain");

	Params::BP_DayAndNight_C_Rain Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.ExecuteUbergraph_BP_DayAndNight
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::ExecuteUbergraph_BP_DayAndNight(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "ExecuteUbergraph_BP_DayAndNight");

	Params::BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.BndEvt__BP_DayAndNight_LiveLink (For Editor Update)_K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature
// (BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "BndEvt__BP_DayAndNight_LiveLink (For Editor Update)_K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature");

	Params::BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature Parms{};

	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_DayAndNight.BP_DayAndNight_C.SetWeatherParameters
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Delta                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Construction                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_DayAndNight_C::SetWeatherParameters(double Delta, bool Construction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_DayAndNight_C", "SetWeatherParameters");

	Params::BP_DayAndNight_C_SetWeatherParameters Parms{};

	Parms.Delta = Delta;
	Parms.Construction = Construction;

	UObject::ProcessEvent(Func, &Parms);
}

}

