#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MenuBar_Highlight

#include "Basic.hpp"

#include "UMG_classes.hpp"
#include "STRUCT_MenuBar_HighlightParams_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MenuBar_Highlight.WBP_MenuBar_Highlight_C
// 0x0090 (0x0378 - 0x02E8)
class UWBP_MenuBar_Highlight_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           CanvasPanel_ClipArea;                              // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 Image_GlowEffect;                                  // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSTRUCT_MenuBar_HighlightParams        TargetParams;                                      // 0x0300(0x0028)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUsePausableTime;                                  // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SizeMargin;                                        // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionStartTime;                               // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TransitionDuration;                                // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEasingFunc                                   TransitionFunction;                                // 0x0348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_349[0x7];                                      // 0x0349(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TransitionBlendExp;                                // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TransitionSteps;                                   // 0x0358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Height;                                            // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        GlowOpacity;                                       // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WidthOverride;                                     // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateGlow(struct FSTRUCT_MenuBar_HighlightParams& InParams, bool bInIgnoreOpacity);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void SetTargetWidget(class UWidget* InWidget);
	void PreConstruct(bool IsDesignTime);
	void InterpGlow(double InAlpha);
	double GetTime();
	void ExecuteUbergraph_WBP_MenuBar_Highlight(int32 EntryPoint);
	void Construct();

	void GetGlowEffectSize(struct FVector2D* OutSize) const;
	void DetermineTargetParams(class UWidget*& InWidget, struct FSTRUCT_MenuBar_HighlightParams* TargetParams_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MenuBar_Highlight_C">();
	}
	static class UWBP_MenuBar_Highlight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MenuBar_Highlight_C>();
	}
};
static_assert(alignof(UWBP_MenuBar_Highlight_C) == 0x000008, "Wrong alignment on UWBP_MenuBar_Highlight_C");
static_assert(sizeof(UWBP_MenuBar_Highlight_C) == 0x000378, "Wrong size on UWBP_MenuBar_Highlight_C");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, UberGraphFrame) == 0x0002E8, "Member 'UWBP_MenuBar_Highlight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, CanvasPanel_ClipArea) == 0x0002F0, "Member 'UWBP_MenuBar_Highlight_C::CanvasPanel_ClipArea' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, Image_GlowEffect) == 0x0002F8, "Member 'UWBP_MenuBar_Highlight_C::Image_GlowEffect' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, TargetParams) == 0x000300, "Member 'UWBP_MenuBar_Highlight_C::TargetParams' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, bUsePausableTime) == 0x000328, "Member 'UWBP_MenuBar_Highlight_C::bUsePausableTime' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, SizeMargin) == 0x000330, "Member 'UWBP_MenuBar_Highlight_C::SizeMargin' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, TransitionStartTime) == 0x000338, "Member 'UWBP_MenuBar_Highlight_C::TransitionStartTime' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, TransitionDuration) == 0x000340, "Member 'UWBP_MenuBar_Highlight_C::TransitionDuration' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, TransitionFunction) == 0x000348, "Member 'UWBP_MenuBar_Highlight_C::TransitionFunction' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, TransitionBlendExp) == 0x000350, "Member 'UWBP_MenuBar_Highlight_C::TransitionBlendExp' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, TransitionSteps) == 0x000358, "Member 'UWBP_MenuBar_Highlight_C::TransitionSteps' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, Height) == 0x000360, "Member 'UWBP_MenuBar_Highlight_C::Height' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, GlowOpacity) == 0x000368, "Member 'UWBP_MenuBar_Highlight_C::GlowOpacity' has a wrong offset!");
static_assert(offsetof(UWBP_MenuBar_Highlight_C, WidthOverride) == 0x000370, "Member 'UWBP_MenuBar_Highlight_C::WidthOverride' has a wrong offset!");

}

