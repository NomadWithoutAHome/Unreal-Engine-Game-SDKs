#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FXSystemAnimNotifies

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class FXSystemAnimNotifies.AnimNotifyState_TimedFXSystem
// 0x0050 (0x0080 - 0x0030)
class UAnimNotifyState_TimedFXSystem : public UAnimNotifyState
{
public:
	class UFXSystemAsset*                         Template;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                PoolingMethod;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x003C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDestroyAtEnd;                                     // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorDestroyed(class AActor* DestroyedActorPtr) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedFXSystem">();
	}
	static class UAnimNotifyState_TimedFXSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedFXSystem>();
	}
};
static_assert(alignof(UAnimNotifyState_TimedFXSystem) == 0x000008, "Wrong alignment on UAnimNotifyState_TimedFXSystem");
static_assert(sizeof(UAnimNotifyState_TimedFXSystem) == 0x000080, "Wrong size on UAnimNotifyState_TimedFXSystem");
static_assert(offsetof(UAnimNotifyState_TimedFXSystem, Template) == 0x000030, "Member 'UAnimNotifyState_TimedFXSystem::Template' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_TimedFXSystem, PoolingMethod) == 0x000038, "Member 'UAnimNotifyState_TimedFXSystem::PoolingMethod' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_TimedFXSystem, SocketName) == 0x00003C, "Member 'UAnimNotifyState_TimedFXSystem::SocketName' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_TimedFXSystem, LocationOffset) == 0x000048, "Member 'UAnimNotifyState_TimedFXSystem::LocationOffset' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_TimedFXSystem, RotationOffset) == 0x000060, "Member 'UAnimNotifyState_TimedFXSystem::RotationOffset' has a wrong offset!");
static_assert(offsetof(UAnimNotifyState_TimedFXSystem, bDestroyAtEnd) == 0x000078, "Member 'UAnimNotifyState_TimedFXSystem::bDestroyAtEnd' has a wrong offset!");

// Class FXSystemAnimNotifies.AnimNotifyState_TimedFXSystemAdvanced
// 0x0050 (0x00D0 - 0x0080)
class UAnimNotifyState_TimedFXSystemAdvanced final : public UAnimNotifyState_TimedFXSystem
{
public:
	uint8                                         Pad_80[0x50];                                      // 0x0080(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetNotifyProgress(class UMeshComponent* MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedFXSystemAdvanced">();
	}
	static class UAnimNotifyState_TimedFXSystemAdvanced* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedFXSystemAdvanced>();
	}
};
static_assert(alignof(UAnimNotifyState_TimedFXSystemAdvanced) == 0x000008, "Wrong alignment on UAnimNotifyState_TimedFXSystemAdvanced");
static_assert(sizeof(UAnimNotifyState_TimedFXSystemAdvanced) == 0x0000D0, "Wrong size on UAnimNotifyState_TimedFXSystemAdvanced");

// Class FXSystemAnimNotifies.AnimNotify_PlayFXSystem
// 0x0098 (0x00D0 - 0x0038)
class alignas(0x10) UAnimNotify_PlayFXSystem : public UAnimNotify
{
public:
	class UFXSystemAsset*                         Template;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPSCPoolMethod                                PoolingMethod;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0078(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAbsoluteScale;                                    // 0x0090(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x2F];                                      // 0x0091(0x002F)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         Attached : 1;                                      // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x00C4(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UFXSystemComponent* GetSpawnedEffect() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayFXSystem">();
	}
	static class UAnimNotify_PlayFXSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayFXSystem>();
	}
};
static_assert(alignof(UAnimNotify_PlayFXSystem) == 0x000010, "Wrong alignment on UAnimNotify_PlayFXSystem");
static_assert(sizeof(UAnimNotify_PlayFXSystem) == 0x0000D0, "Wrong size on UAnimNotify_PlayFXSystem");
static_assert(offsetof(UAnimNotify_PlayFXSystem, Template) == 0x000038, "Member 'UAnimNotify_PlayFXSystem::Template' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayFXSystem, PoolingMethod) == 0x000040, "Member 'UAnimNotify_PlayFXSystem::PoolingMethod' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayFXSystem, LocationOffset) == 0x000048, "Member 'UAnimNotify_PlayFXSystem::LocationOffset' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayFXSystem, RotationOffset) == 0x000060, "Member 'UAnimNotify_PlayFXSystem::RotationOffset' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayFXSystem, Scale) == 0x000078, "Member 'UAnimNotify_PlayFXSystem::Scale' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayFXSystem, bAbsoluteScale) == 0x000090, "Member 'UAnimNotify_PlayFXSystem::bAbsoluteScale' has a wrong offset!");
static_assert(offsetof(UAnimNotify_PlayFXSystem, SocketName) == 0x0000C4, "Member 'UAnimNotify_PlayFXSystem::SocketName' has a wrong offset!");

}

