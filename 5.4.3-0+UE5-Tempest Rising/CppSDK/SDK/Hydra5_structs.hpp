#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Hydra5

#include "Basic.hpp"

#include "ProsSDK_structs.hpp"
#include "Pros_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum Hydra5.EPartyInviteAnswer
// NumValues: 0x0004
enum class EPartyInviteAnswer : uint8
{
	ACCEPT_SUCCESS                           = 0,
	ACCEPT_FAILED                            = 1,
	REJECT                                   = 2,
	EPartyInviteAnswer_MAX                   = 3,
};

// ScriptStruct Hydra5.RatingsGameEntry
// 0x0038 (0x0038 - 0x0000)
struct FRatingsGameEntry final
{
public:
	int32                                         GamesCount;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rating;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Time;                                              // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5MatchResult                            Result;                                            // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRatingsGameEntry) == 0x000008, "Wrong alignment on FRatingsGameEntry");
static_assert(sizeof(FRatingsGameEntry) == 0x000038, "Wrong size on FRatingsGameEntry");
static_assert(offsetof(FRatingsGameEntry, GamesCount) == 0x000000, "Member 'FRatingsGameEntry::GamesCount' has a wrong offset!");
static_assert(offsetof(FRatingsGameEntry, Rating) == 0x000004, "Member 'FRatingsGameEntry::Rating' has a wrong offset!");
static_assert(offsetof(FRatingsGameEntry, SessionId) == 0x000008, "Member 'FRatingsGameEntry::SessionId' has a wrong offset!");
static_assert(offsetof(FRatingsGameEntry, Time) == 0x000018, "Member 'FRatingsGameEntry::Time' has a wrong offset!");
static_assert(offsetof(FRatingsGameEntry, Data) == 0x000020, "Member 'FRatingsGameEntry::Data' has a wrong offset!");
static_assert(offsetof(FRatingsGameEntry, Result) == 0x000030, "Member 'FRatingsGameEntry::Result' has a wrong offset!");

// ScriptStruct Hydra5.AbstractDataRecordHeader
// 0x0010 (0x0010 - 0x0000)
struct FAbstractDataRecordHeader final
{
public:
	int64                                         DataVersion;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         DataLayout;                                        // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAbstractDataRecordHeader) == 0x000008, "Wrong alignment on FAbstractDataRecordHeader");
static_assert(sizeof(FAbstractDataRecordHeader) == 0x000010, "Wrong size on FAbstractDataRecordHeader");
static_assert(offsetof(FAbstractDataRecordHeader, DataVersion) == 0x000000, "Member 'FAbstractDataRecordHeader::DataVersion' has a wrong offset!");
static_assert(offsetof(FAbstractDataRecordHeader, DataLayout) == 0x000008, "Member 'FAbstractDataRecordHeader::DataLayout' has a wrong offset!");

// ScriptStruct Hydra5.AbstractDataRecord
// 0x0030 (0x0030 - 0x0000)
struct FAbstractDataRecord final
{
public:
	struct FAbstractDataRecordHeader              Header;                                            // 0x0000(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Buffer;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbstractDataRecord) == 0x000008, "Wrong alignment on FAbstractDataRecord");
static_assert(sizeof(FAbstractDataRecord) == 0x000030, "Wrong size on FAbstractDataRecord");
static_assert(offsetof(FAbstractDataRecord, Header) == 0x000000, "Member 'FAbstractDataRecord::Header' has a wrong offset!");
static_assert(offsetof(FAbstractDataRecord, Buffer) == 0x000010, "Member 'FAbstractDataRecord::Buffer' has a wrong offset!");

// ScriptStruct Hydra5.AbstractDataContainerRecord
// 0x0050 (0x0050 - 0x0000)
struct FAbstractDataContainerRecord final
{
public:
	class FString                                 ContainerName;                                     // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbstractDataRecord                    AbstractDataRecord;                                // 0x0010(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbstractDataContainerRecord) == 0x000008, "Wrong alignment on FAbstractDataContainerRecord");
static_assert(sizeof(FAbstractDataContainerRecord) == 0x000050, "Wrong size on FAbstractDataContainerRecord");
static_assert(offsetof(FAbstractDataContainerRecord, ContainerName) == 0x000000, "Member 'FAbstractDataContainerRecord::ContainerName' has a wrong offset!");
static_assert(offsetof(FAbstractDataContainerRecord, AbstractDataRecord) == 0x000010, "Member 'FAbstractDataContainerRecord::AbstractDataRecord' has a wrong offset!");

// ScriptStruct Hydra5.ChallengeMilestoneData
// 0x0008 (0x0008 - 0x0000)
struct FChallengeMilestoneData final
{
public:
	int64                                         Milestone;                                         // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeMilestoneData) == 0x000008, "Wrong alignment on FChallengeMilestoneData");
static_assert(sizeof(FChallengeMilestoneData) == 0x000008, "Wrong size on FChallengeMilestoneData");
static_assert(offsetof(FChallengeMilestoneData, Milestone) == 0x000000, "Member 'FChallengeMilestoneData::Milestone' has a wrong offset!");

// ScriptStruct Hydra5.ChallengeCounterData
// 0x0030 (0x0030 - 0x0000)
struct FChallengeCounterData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChallengeMilestoneData>        Milestones;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         Value;                                             // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Goal;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeCounterData) == 0x000008, "Wrong alignment on FChallengeCounterData");
static_assert(sizeof(FChallengeCounterData) == 0x000030, "Wrong size on FChallengeCounterData");
static_assert(offsetof(FChallengeCounterData, ID) == 0x000000, "Member 'FChallengeCounterData::ID' has a wrong offset!");
static_assert(offsetof(FChallengeCounterData, Milestones) == 0x000010, "Member 'FChallengeCounterData::Milestones' has a wrong offset!");
static_assert(offsetof(FChallengeCounterData, Value) == 0x000020, "Member 'FChallengeCounterData::Value' has a wrong offset!");
static_assert(offsetof(FChallengeCounterData, Goal) == 0x000028, "Member 'FChallengeCounterData::Goal' has a wrong offset!");

// ScriptStruct Hydra5.ChallengeClientData
// 0x0040 (0x0040 - 0x0000)
struct FChallengeClientData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Definition;                                        // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeType                                Type;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChallengeState                               State;                                             // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Slot;                                              // 0x0024(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Tick;                                              // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChallengeCounterData>          Counters;                                          // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeClientData) == 0x000008, "Wrong alignment on FChallengeClientData");
static_assert(sizeof(FChallengeClientData) == 0x000040, "Wrong size on FChallengeClientData");
static_assert(offsetof(FChallengeClientData, ID) == 0x000000, "Member 'FChallengeClientData::ID' has a wrong offset!");
static_assert(offsetof(FChallengeClientData, Definition) == 0x000010, "Member 'FChallengeClientData::Definition' has a wrong offset!");
static_assert(offsetof(FChallengeClientData, Type) == 0x000020, "Member 'FChallengeClientData::Type' has a wrong offset!");
static_assert(offsetof(FChallengeClientData, State) == 0x000021, "Member 'FChallengeClientData::State' has a wrong offset!");
static_assert(offsetof(FChallengeClientData, Slot) == 0x000024, "Member 'FChallengeClientData::Slot' has a wrong offset!");
static_assert(offsetof(FChallengeClientData, Tick) == 0x000028, "Member 'FChallengeClientData::Tick' has a wrong offset!");
static_assert(offsetof(FChallengeClientData, Counters) == 0x000030, "Member 'FChallengeClientData::Counters' has a wrong offset!");

// ScriptStruct Hydra5.ChallengeDailySlot
// 0x0010 (0x0010 - 0x0000)
struct FChallengeDailySlot final
{
public:
	int32                                         AvailableRechargeCount;                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingCooldownSec;                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ExpirationSec;                                     // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeDailySlot) == 0x000008, "Wrong alignment on FChallengeDailySlot");
static_assert(sizeof(FChallengeDailySlot) == 0x000010, "Wrong size on FChallengeDailySlot");
static_assert(offsetof(FChallengeDailySlot, AvailableRechargeCount) == 0x000000, "Member 'FChallengeDailySlot::AvailableRechargeCount' has a wrong offset!");
static_assert(offsetof(FChallengeDailySlot, RemainingCooldownSec) == 0x000004, "Member 'FChallengeDailySlot::RemainingCooldownSec' has a wrong offset!");
static_assert(offsetof(FChallengeDailySlot, ExpirationSec) == 0x000008, "Member 'FChallengeDailySlot::ExpirationSec' has a wrong offset!");

// ScriptStruct Hydra5.ChallengeClientStatus
// 0x0028 (0x0028 - 0x0000)
struct FChallengeClientStatus final
{
public:
	int64                                         CurrentTick;                                       // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChallengeClientData>           Challenges;                                        // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChallengeDailySlot>            SlotsInfo;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeClientStatus) == 0x000008, "Wrong alignment on FChallengeClientStatus");
static_assert(sizeof(FChallengeClientStatus) == 0x000028, "Wrong size on FChallengeClientStatus");
static_assert(offsetof(FChallengeClientStatus, CurrentTick) == 0x000000, "Member 'FChallengeClientStatus::CurrentTick' has a wrong offset!");
static_assert(offsetof(FChallengeClientStatus, Challenges) == 0x000008, "Member 'FChallengeClientStatus::Challenges' has a wrong offset!");
static_assert(offsetof(FChallengeClientStatus, SlotsInfo) == 0x000018, "Member 'FChallengeClientStatus::SlotsInfo' has a wrong offset!");

// ScriptStruct Hydra5.RatingsEntry
// 0x0038 (0x0038 - 0x0000)
struct FRatingsEntry final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rating;                                            // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamesCount;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRatingsGameEntry>              History;                                           // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 RatingId;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRatingsEntry) == 0x000008, "Wrong alignment on FRatingsEntry");
static_assert(sizeof(FRatingsEntry) == 0x000038, "Wrong size on FRatingsEntry");
static_assert(offsetof(FRatingsEntry, UserId) == 0x000000, "Member 'FRatingsEntry::UserId' has a wrong offset!");
static_assert(offsetof(FRatingsEntry, Rating) == 0x000010, "Member 'FRatingsEntry::Rating' has a wrong offset!");
static_assert(offsetof(FRatingsEntry, GamesCount) == 0x000014, "Member 'FRatingsEntry::GamesCount' has a wrong offset!");
static_assert(offsetof(FRatingsEntry, History) == 0x000018, "Member 'FRatingsEntry::History' has a wrong offset!");
static_assert(offsetof(FRatingsEntry, RatingId) == 0x000028, "Member 'FRatingsEntry::RatingId' has a wrong offset!");

// ScriptStruct Hydra5.OfferItem
// 0x0030 (0x0030 - 0x0000)
struct FOfferItem final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReferenceId;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOfferItem) == 0x000008, "Wrong alignment on FOfferItem");
static_assert(sizeof(FOfferItem) == 0x000030, "Wrong size on FOfferItem");
static_assert(offsetof(FOfferItem, ID) == 0x000000, "Member 'FOfferItem::ID' has a wrong offset!");
static_assert(offsetof(FOfferItem, ReferenceId) == 0x000010, "Member 'FOfferItem::ReferenceId' has a wrong offset!");

// ScriptStruct Hydra5.EconomyUserStateValue
// 0x0038 (0x0038 - 0x0000)
struct FEconomyUserStateValue final
{
public:
	EUserStateOwnType                             OwnType;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserStateDataType                            DataType;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ValueString;                                       // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ValueInt64;                                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ValueVectorStrings;                                // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              ValueTimeBased;                                    // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUserStateValue) == 0x000008, "Wrong alignment on FEconomyUserStateValue");
static_assert(sizeof(FEconomyUserStateValue) == 0x000038, "Wrong size on FEconomyUserStateValue");
static_assert(offsetof(FEconomyUserStateValue, OwnType) == 0x000000, "Member 'FEconomyUserStateValue::OwnType' has a wrong offset!");
static_assert(offsetof(FEconomyUserStateValue, DataType) == 0x000001, "Member 'FEconomyUserStateValue::DataType' has a wrong offset!");
static_assert(offsetof(FEconomyUserStateValue, ValueString) == 0x000008, "Member 'FEconomyUserStateValue::ValueString' has a wrong offset!");
static_assert(offsetof(FEconomyUserStateValue, ValueInt64) == 0x000018, "Member 'FEconomyUserStateValue::ValueInt64' has a wrong offset!");
static_assert(offsetof(FEconomyUserStateValue, ValueVectorStrings) == 0x000020, "Member 'FEconomyUserStateValue::ValueVectorStrings' has a wrong offset!");
static_assert(offsetof(FEconomyUserStateValue, ValueTimeBased) == 0x000030, "Member 'FEconomyUserStateValue::ValueTimeBased' has a wrong offset!");

// ScriptStruct Hydra5.EconomyTransactionExtendedInfo
// 0x0020 (0x0020 - 0x0000)
struct FEconomyTransactionExtendedInfo final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyTransactionExtendedInfo) == 0x000008, "Wrong alignment on FEconomyTransactionExtendedInfo");
static_assert(sizeof(FEconomyTransactionExtendedInfo) == 0x000020, "Wrong size on FEconomyTransactionExtendedInfo");
static_assert(offsetof(FEconomyTransactionExtendedInfo, Key) == 0x000000, "Member 'FEconomyTransactionExtendedInfo::Key' has a wrong offset!");
static_assert(offsetof(FEconomyTransactionExtendedInfo, Value) == 0x000010, "Member 'FEconomyTransactionExtendedInfo::Value' has a wrong offset!");

// ScriptStruct Hydra5.EconomyTransactionItem
// 0x0098 (0x0098 - 0x0000)
struct FEconomyTransactionItem final
{
public:
	class FString                                 StateId;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUserStateOpType                              OperationType;                                     // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEconomyUserStateValue                 Previous;                                          // 0x0018(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEconomyUserStateValue                 Current;                                           // 0x0050(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FEconomyTransactionExtendedInfo> Infos;                                            // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyTransactionItem) == 0x000008, "Wrong alignment on FEconomyTransactionItem");
static_assert(sizeof(FEconomyTransactionItem) == 0x000098, "Wrong size on FEconomyTransactionItem");
static_assert(offsetof(FEconomyTransactionItem, StateId) == 0x000000, "Member 'FEconomyTransactionItem::StateId' has a wrong offset!");
static_assert(offsetof(FEconomyTransactionItem, OperationType) == 0x000010, "Member 'FEconomyTransactionItem::OperationType' has a wrong offset!");
static_assert(offsetof(FEconomyTransactionItem, Previous) == 0x000018, "Member 'FEconomyTransactionItem::Previous' has a wrong offset!");
static_assert(offsetof(FEconomyTransactionItem, Current) == 0x000050, "Member 'FEconomyTransactionItem::Current' has a wrong offset!");
static_assert(offsetof(FEconomyTransactionItem, Infos) == 0x000088, "Member 'FEconomyTransactionItem::Infos' has a wrong offset!");

// ScriptStruct Hydra5.EconomyTransaction
// 0x0060 (0x0060 - 0x0000)
struct FEconomyTransaction final
{
public:
	int64                                         ID;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOfferItem                             OfferItem;                                         // 0x0008(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FEconomyTransactionItem>        Items;                                             // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEconomyTransactionExtendedInfo> Infos;                                            // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampCreatedAt;                                // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyTransaction) == 0x000008, "Wrong alignment on FEconomyTransaction");
static_assert(sizeof(FEconomyTransaction) == 0x000060, "Wrong size on FEconomyTransaction");
static_assert(offsetof(FEconomyTransaction, ID) == 0x000000, "Member 'FEconomyTransaction::ID' has a wrong offset!");
static_assert(offsetof(FEconomyTransaction, OfferItem) == 0x000008, "Member 'FEconomyTransaction::OfferItem' has a wrong offset!");
static_assert(offsetof(FEconomyTransaction, Items) == 0x000038, "Member 'FEconomyTransaction::Items' has a wrong offset!");
static_assert(offsetof(FEconomyTransaction, Infos) == 0x000048, "Member 'FEconomyTransaction::Infos' has a wrong offset!");
static_assert(offsetof(FEconomyTransaction, TimestampCreatedAt) == 0x000058, "Member 'FEconomyTransaction::TimestampCreatedAt' has a wrong offset!");

// ScriptStruct Hydra5.EconomyUserState
// 0x0048 (0x0048 - 0x0000)
struct FEconomyUserState final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEconomyUserStateValue                 Value;                                             // 0x0010(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUserState) == 0x000008, "Wrong alignment on FEconomyUserState");
static_assert(sizeof(FEconomyUserState) == 0x000048, "Wrong size on FEconomyUserState");
static_assert(offsetof(FEconomyUserState, ID) == 0x000000, "Member 'FEconomyUserState::ID' has a wrong offset!");
static_assert(offsetof(FEconomyUserState, Value) == 0x000010, "Member 'FEconomyUserState::Value' has a wrong offset!");

// ScriptStruct Hydra5.EconomyUpdate
// 0x0020 (0x0020 - 0x0000)
struct FEconomyUpdate final
{
public:
	TArray<struct FEconomyTransaction>            Transactions;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEconomyUserState>              States;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUpdate) == 0x000008, "Wrong alignment on FEconomyUpdate");
static_assert(sizeof(FEconomyUpdate) == 0x000020, "Wrong size on FEconomyUpdate");
static_assert(offsetof(FEconomyUpdate, Transactions) == 0x000000, "Member 'FEconomyUpdate::Transactions' has a wrong offset!");
static_assert(offsetof(FEconomyUpdate, States) == 0x000010, "Member 'FEconomyUpdate::States' has a wrong offset!");

// ScriptStruct Hydra5.PresenceStaticDataSerializable
// 0x0028 (0x0028 - 0x0000)
struct FPresenceStaticDataSerializable final
{
public:
	class FString                                 Nickname;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsProvider                                 Provider;                                          // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ExtendedData;                                      // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceStaticDataSerializable) == 0x000008, "Wrong alignment on FPresenceStaticDataSerializable");
static_assert(sizeof(FPresenceStaticDataSerializable) == 0x000028, "Wrong size on FPresenceStaticDataSerializable");
static_assert(offsetof(FPresenceStaticDataSerializable, Nickname) == 0x000000, "Member 'FPresenceStaticDataSerializable::Nickname' has a wrong offset!");
static_assert(offsetof(FPresenceStaticDataSerializable, Provider) == 0x000010, "Member 'FPresenceStaticDataSerializable::Provider' has a wrong offset!");
static_assert(offsetof(FPresenceStaticDataSerializable, ExtendedData) == 0x000018, "Member 'FPresenceStaticDataSerializable::ExtendedData' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionSettings
// 0x0028 (0x0028 - 0x0000)
struct FMatchmakeSessionSettings final
{
public:
	int32                                         PlayersMaxCount;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakeJipState                            Jip;                                               // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakeJoinDelegation                      JoinDelegation;                                    // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AllowedPlayerIds;                                  // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionSettings) == 0x000008, "Wrong alignment on FMatchmakeSessionSettings");
static_assert(sizeof(FMatchmakeSessionSettings) == 0x000028, "Wrong size on FMatchmakeSessionSettings");
static_assert(offsetof(FMatchmakeSessionSettings, PlayersMaxCount) == 0x000000, "Member 'FMatchmakeSessionSettings::PlayersMaxCount' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionSettings, Jip) == 0x000004, "Member 'FMatchmakeSessionSettings::Jip' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionSettings, JoinDelegation) == 0x000005, "Member 'FMatchmakeSessionSettings::JoinDelegation' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionSettings, AllowedPlayerIds) == 0x000008, "Member 'FMatchmakeSessionSettings::AllowedPlayerIds' has a wrong offset!");

// ScriptStruct Hydra5.SessionControlKeyContainer
// 0x0050 (0x0050 - 0x0000)
struct FSessionControlKeyContainer final
{
public:
	TArray<uint8>                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 HashKey;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 InitVectorValue;                                   // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<uint8>                                 Nonce;                                             // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionControlKeyContainer) == 0x000008, "Wrong alignment on FSessionControlKeyContainer");
static_assert(sizeof(FSessionControlKeyContainer) == 0x000050, "Wrong size on FSessionControlKeyContainer");
static_assert(offsetof(FSessionControlKeyContainer, Key) == 0x000000, "Member 'FSessionControlKeyContainer::Key' has a wrong offset!");
static_assert(offsetof(FSessionControlKeyContainer, HashKey) == 0x000010, "Member 'FSessionControlKeyContainer::HashKey' has a wrong offset!");
static_assert(offsetof(FSessionControlKeyContainer, InitVectorValue) == 0x000020, "Member 'FSessionControlKeyContainer::InitVectorValue' has a wrong offset!");
static_assert(offsetof(FSessionControlKeyContainer, Nonce) == 0x000030, "Member 'FSessionControlKeyContainer::Nonce' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionControlContainerOptional
// 0x0068 (0x0068 - 0x0000)
struct FMatchmakeSessionControlContainerOptional final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionControlKeyContainer            Key;                                               // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionControlContainerOptional) == 0x000008, "Wrong alignment on FMatchmakeSessionControlContainerOptional");
static_assert(sizeof(FMatchmakeSessionControlContainerOptional) == 0x000068, "Wrong size on FMatchmakeSessionControlContainerOptional");
static_assert(offsetof(FMatchmakeSessionControlContainerOptional, bIsValid) == 0x000000, "Member 'FMatchmakeSessionControlContainerOptional::bIsValid' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionControlContainerOptional, Key) == 0x000008, "Member 'FMatchmakeSessionControlContainerOptional::Key' has a wrong offset!");

// ScriptStruct Hydra5.Hy5PresenceProviderData
// 0x0002 (0x0002 - 0x0000)
struct FHy5PresenceProviderData final
{
public:
	EProsBuildPlatform                            Platform;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsProvider                                 Provider;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5PresenceProviderData) == 0x000001, "Wrong alignment on FHy5PresenceProviderData");
static_assert(sizeof(FHy5PresenceProviderData) == 0x000002, "Wrong size on FHy5PresenceProviderData");
static_assert(offsetof(FHy5PresenceProviderData, Platform) == 0x000000, "Member 'FHy5PresenceProviderData::Platform' has a wrong offset!");
static_assert(offsetof(FHy5PresenceProviderData, Provider) == 0x000001, "Member 'FHy5PresenceProviderData::Provider' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionMember
// 0x00D0 (0x00D0 - 0x0000)
struct FMatchmakeSessionMember final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticData;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOwner;                                          // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocal;                                          // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortIndex;                                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GroupId;                                           // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamID;                                            // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchmakeSessionControlContainerOptional KeyContainer;                                   // 0x0050(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	EHydra5MemberState                            State;                                             // 0x00B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHy5PresenceProviderData               UserProvider;                                      // 0x00B9(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x15];                                      // 0x00BB(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionMember) == 0x000008, "Wrong alignment on FMatchmakeSessionMember");
static_assert(sizeof(FMatchmakeSessionMember) == 0x0000D0, "Wrong size on FMatchmakeSessionMember");
static_assert(offsetof(FMatchmakeSessionMember, Hydra5UserId) == 0x000000, "Member 'FMatchmakeSessionMember::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, Data) == 0x000010, "Member 'FMatchmakeSessionMember::Data' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, StaticData) == 0x000020, "Member 'FMatchmakeSessionMember::StaticData' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, bIsOwner) == 0x000030, "Member 'FMatchmakeSessionMember::bIsOwner' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, bIsLocal) == 0x000031, "Member 'FMatchmakeSessionMember::bIsLocal' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, SortIndex) == 0x000034, "Member 'FMatchmakeSessionMember::SortIndex' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, GroupId) == 0x000038, "Member 'FMatchmakeSessionMember::GroupId' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, TeamID) == 0x000048, "Member 'FMatchmakeSessionMember::TeamID' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, KeyContainer) == 0x000050, "Member 'FMatchmakeSessionMember::KeyContainer' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, State) == 0x0000B8, "Member 'FMatchmakeSessionMember::State' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionMember, UserProvider) == 0x0000B9, "Member 'FMatchmakeSessionMember::UserProvider' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUserSessionStatus
// 0x0070 (0x0070 - 0x0000)
struct FPresenceUserSessionStatus final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchmakeSessionSettings              Settings;                                          // 0x0020(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FProsSdkKeyValue>               Variants;                                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakeSessionMember>        Members;                                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EHydra5MatchmakeCrossplaySessionType          CrossplayType;                                     // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPresenceUserSessionStatus) == 0x000008, "Wrong alignment on FPresenceUserSessionStatus");
static_assert(sizeof(FPresenceUserSessionStatus) == 0x000070, "Wrong size on FPresenceUserSessionStatus");
static_assert(offsetof(FPresenceUserSessionStatus, ID) == 0x000000, "Member 'FPresenceUserSessionStatus::ID' has a wrong offset!");
static_assert(offsetof(FPresenceUserSessionStatus, Data) == 0x000010, "Member 'FPresenceUserSessionStatus::Data' has a wrong offset!");
static_assert(offsetof(FPresenceUserSessionStatus, Settings) == 0x000020, "Member 'FPresenceUserSessionStatus::Settings' has a wrong offset!");
static_assert(offsetof(FPresenceUserSessionStatus, Variants) == 0x000048, "Member 'FPresenceUserSessionStatus::Variants' has a wrong offset!");
static_assert(offsetof(FPresenceUserSessionStatus, Members) == 0x000058, "Member 'FPresenceUserSessionStatus::Members' has a wrong offset!");
static_assert(offsetof(FPresenceUserSessionStatus, CrossplayType) == 0x000068, "Member 'FPresenceUserSessionStatus::CrossplayType' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUsersSessionStatusOptional
// 0x0078 (0x0078 - 0x0000)
struct FPresenceUsersSessionStatusOptional final
{
public:
	bool                                          bIsValid;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPresenceUserSessionStatus             Session;                                           // 0x0008(0x0070)(BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceUsersSessionStatusOptional) == 0x000008, "Wrong alignment on FPresenceUsersSessionStatusOptional");
static_assert(sizeof(FPresenceUsersSessionStatusOptional) == 0x000078, "Wrong size on FPresenceUsersSessionStatusOptional");
static_assert(offsetof(FPresenceUsersSessionStatusOptional, bIsValid) == 0x000000, "Member 'FPresenceUsersSessionStatusOptional::bIsValid' has a wrong offset!");
static_assert(offsetof(FPresenceUsersSessionStatusOptional, Session) == 0x000008, "Member 'FPresenceUsersSessionStatusOptional::Session' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUserPresenceData
// 0x00D0 (0x00D0 - 0x0000)
struct FPresenceUserPresenceData final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnline;                                         // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInvitable;                                      // 0x0011(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StaticData;                                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPresenceStaticDataSerializable        StaticDataObject;                                  // 0x0028(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPresenceUsersSessionStatusOptional    SessionStatus;                                     // 0x0050(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FHy5PresenceProviderData               UserProvider;                                      // 0x00C8(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPresenceUserPresenceData) == 0x000008, "Wrong alignment on FPresenceUserPresenceData");
static_assert(sizeof(FPresenceUserPresenceData) == 0x0000D0, "Wrong size on FPresenceUserPresenceData");
static_assert(offsetof(FPresenceUserPresenceData, Hydra5UserId) == 0x000000, "Member 'FPresenceUserPresenceData::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FPresenceUserPresenceData, bIsOnline) == 0x000010, "Member 'FPresenceUserPresenceData::bIsOnline' has a wrong offset!");
static_assert(offsetof(FPresenceUserPresenceData, bIsInvitable) == 0x000011, "Member 'FPresenceUserPresenceData::bIsInvitable' has a wrong offset!");
static_assert(offsetof(FPresenceUserPresenceData, StaticData) == 0x000018, "Member 'FPresenceUserPresenceData::StaticData' has a wrong offset!");
static_assert(offsetof(FPresenceUserPresenceData, StaticDataObject) == 0x000028, "Member 'FPresenceUserPresenceData::StaticDataObject' has a wrong offset!");
static_assert(offsetof(FPresenceUserPresenceData, SessionStatus) == 0x000050, "Member 'FPresenceUserPresenceData::SessionStatus' has a wrong offset!");
static_assert(offsetof(FPresenceUserPresenceData, UserProvider) == 0x0000C8, "Member 'FPresenceUserPresenceData::UserProvider' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUsersPresence
// 0x0010 (0x0010 - 0x0000)
struct FPresenceUsersPresence final
{
public:
	TArray<struct FPresenceUserPresenceData>      Users;                                             // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceUsersPresence) == 0x000008, "Wrong alignment on FPresenceUsersPresence");
static_assert(sizeof(FPresenceUsersPresence) == 0x000010, "Wrong size on FPresenceUsersPresence");
static_assert(offsetof(FPresenceUsersPresence, Users) == 0x000000, "Member 'FPresenceUsersPresence::Users' has a wrong offset!");

// ScriptStruct Hydra5.RatingsUpdateEntry
// 0x0040 (0x0040 - 0x0000)
struct FRatingsUpdateEntry final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rating;                                            // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5MatchResult                            Result;                                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x17];                                      // 0x0029(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRatingsUpdateEntry) == 0x000008, "Wrong alignment on FRatingsUpdateEntry");
static_assert(sizeof(FRatingsUpdateEntry) == 0x000040, "Wrong size on FRatingsUpdateEntry");
static_assert(offsetof(FRatingsUpdateEntry, Hydra5UserId) == 0x000000, "Member 'FRatingsUpdateEntry::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntry, Rating) == 0x000010, "Member 'FRatingsUpdateEntry::Rating' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntry, Data) == 0x000018, "Member 'FRatingsUpdateEntry::Data' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntry, Result) == 0x000028, "Member 'FRatingsUpdateEntry::Result' has a wrong offset!");

// ScriptStruct Hydra5.RatingsUpdateEntryIndividual
// 0x0048 (0x0048 - 0x0000)
struct FRatingsUpdateEntryIndividual final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlacementInGame;                                   // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RatingId;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRatingsUpdateEntryIndividual) == 0x000008, "Wrong alignment on FRatingsUpdateEntryIndividual");
static_assert(sizeof(FRatingsUpdateEntryIndividual) == 0x000048, "Wrong size on FRatingsUpdateEntryIndividual");
static_assert(offsetof(FRatingsUpdateEntryIndividual, Hydra5UserId) == 0x000000, "Member 'FRatingsUpdateEntryIndividual::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryIndividual, PlacementInGame) == 0x000010, "Member 'FRatingsUpdateEntryIndividual::PlacementInGame' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryIndividual, Data) == 0x000018, "Member 'FRatingsUpdateEntryIndividual::Data' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryIndividual, RatingId) == 0x000028, "Member 'FRatingsUpdateEntryIndividual::RatingId' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardEntry
// 0x0038 (0x0038 - 0x0000)
struct FLeaderboardEntry final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Data;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardEntry) == 0x000008, "Wrong alignment on FLeaderboardEntry");
static_assert(sizeof(FLeaderboardEntry) == 0x000038, "Wrong size on FLeaderboardEntry");
static_assert(offsetof(FLeaderboardEntry, Hydra5UserId) == 0x000000, "Member 'FLeaderboardEntry::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FLeaderboardEntry, Value) == 0x000010, "Member 'FLeaderboardEntry::Value' has a wrong offset!");
static_assert(offsetof(FLeaderboardEntry, Data) == 0x000018, "Member 'FLeaderboardEntry::Data' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardPosition
// 0x0048 (0x0048 - 0x0000)
struct FLeaderboardPosition final
{
public:
	struct FLeaderboardEntry                      Entry;                                             // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int64                                         LastUpdated;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         position;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardPosition) == 0x000008, "Wrong alignment on FLeaderboardPosition");
static_assert(sizeof(FLeaderboardPosition) == 0x000048, "Wrong size on FLeaderboardPosition");
static_assert(offsetof(FLeaderboardPosition, Entry) == 0x000000, "Member 'FLeaderboardPosition::Entry' has a wrong offset!");
static_assert(offsetof(FLeaderboardPosition, LastUpdated) == 0x000038, "Member 'FLeaderboardPosition::LastUpdated' has a wrong offset!");
static_assert(offsetof(FLeaderboardPosition, position) == 0x000040, "Member 'FLeaderboardPosition::position' has a wrong offset!");

// ScriptStruct Hydra5.Hy5FriendsListUpdate
// 0x0040 (0x0040 - 0x0000)
struct FHy5FriendsListUpdate final
{
public:
	EHydra5FriendListUpdateType                   Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5FriendState                            State;                                             // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicData;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomData;                                        // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5FriendsListUpdate) == 0x000008, "Wrong alignment on FHy5FriendsListUpdate");
static_assert(sizeof(FHy5FriendsListUpdate) == 0x000040, "Wrong size on FHy5FriendsListUpdate");
static_assert(offsetof(FHy5FriendsListUpdate, Type) == 0x000000, "Member 'FHy5FriendsListUpdate::Type' has a wrong offset!");
static_assert(offsetof(FHy5FriendsListUpdate, UserId) == 0x000008, "Member 'FHy5FriendsListUpdate::UserId' has a wrong offset!");
static_assert(offsetof(FHy5FriendsListUpdate, State) == 0x000018, "Member 'FHy5FriendsListUpdate::State' has a wrong offset!");
static_assert(offsetof(FHy5FriendsListUpdate, DynamicData) == 0x000020, "Member 'FHy5FriendsListUpdate::DynamicData' has a wrong offset!");
static_assert(offsetof(FHy5FriendsListUpdate, CustomData) == 0x000030, "Member 'FHy5FriendsListUpdate::CustomData' has a wrong offset!");

// ScriptStruct Hydra5.LayerProperties
// 0x0030 (0x0030 - 0x0000)
struct FLayerProperties final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLayerProperties) == 0x000008, "Wrong alignment on FLayerProperties");
static_assert(sizeof(FLayerProperties) == 0x000030, "Wrong size on FLayerProperties");
static_assert(offsetof(FLayerProperties, ID) == 0x000000, "Member 'FLayerProperties::ID' has a wrong offset!");
static_assert(offsetof(FLayerProperties, Version) == 0x000010, "Member 'FLayerProperties::Version' has a wrong offset!");

// ScriptStruct Hydra5.LayerInfo
// 0x0040 (0x0040 - 0x0000)
struct FLayerInfo final
{
public:
	struct FLayerProperties                       Properties;                                        // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Hash;                                              // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayerInfo) == 0x000008, "Wrong alignment on FLayerInfo");
static_assert(sizeof(FLayerInfo) == 0x000040, "Wrong size on FLayerInfo");
static_assert(offsetof(FLayerInfo, Properties) == 0x000000, "Member 'FLayerInfo::Properties' has a wrong offset!");
static_assert(offsetof(FLayerInfo, Hash) == 0x000030, "Member 'FLayerInfo::Hash' has a wrong offset!");

// ScriptStruct Hydra5.LayerInfoArray
// 0x0010 (0x0010 - 0x0000)
struct FLayerInfoArray final
{
public:
	TArray<struct FLayerInfo>                     Info;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayerInfoArray) == 0x000008, "Wrong alignment on FLayerInfoArray");
static_assert(sizeof(FLayerInfoArray) == 0x000010, "Wrong size on FLayerInfoArray");
static_assert(offsetof(FLayerInfoArray, Info) == 0x000000, "Member 'FLayerInfoArray::Info' has a wrong offset!");

// ScriptStruct Hydra5.Hy5FriendRequestData
// 0x0038 (0x0038 - 0x0000)
struct FHy5FriendRequestData final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomData;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequestId;                                         // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampCreated;                                  // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5FriendRequestData) == 0x000008, "Wrong alignment on FHy5FriendRequestData");
static_assert(sizeof(FHy5FriendRequestData) == 0x000038, "Wrong size on FHy5FriendRequestData");
static_assert(offsetof(FHy5FriendRequestData, UserId) == 0x000000, "Member 'FHy5FriendRequestData::UserId' has a wrong offset!");
static_assert(offsetof(FHy5FriendRequestData, CustomData) == 0x000010, "Member 'FHy5FriendRequestData::CustomData' has a wrong offset!");
static_assert(offsetof(FHy5FriendRequestData, RequestId) == 0x000020, "Member 'FHy5FriendRequestData::RequestId' has a wrong offset!");
static_assert(offsetof(FHy5FriendRequestData, TimestampCreated) == 0x000030, "Member 'FHy5FriendRequestData::TimestampCreated' has a wrong offset!");

// ScriptStruct Hydra5.Hy5PrivacyRecord
// 0x0010 (0x0010 - 0x0000)
struct FHy5PrivacyRecord final
{
public:
	EHydra5BlockCommunicationType                 Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              TimestampCreated;                                  // 0x0008(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5PrivacyRecord) == 0x000008, "Wrong alignment on FHy5PrivacyRecord");
static_assert(sizeof(FHy5PrivacyRecord) == 0x000010, "Wrong size on FHy5PrivacyRecord");
static_assert(offsetof(FHy5PrivacyRecord, Type) == 0x000000, "Member 'FHy5PrivacyRecord::Type' has a wrong offset!");
static_assert(offsetof(FHy5PrivacyRecord, TimestampCreated) == 0x000008, "Member 'FHy5PrivacyRecord::TimestampCreated' has a wrong offset!");

// ScriptStruct Hydra5.Hy5PrivacyBlockedUser
// 0x0030 (0x0030 - 0x0000)
struct FHy5PrivacyBlockedUser final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHy5PrivacyRecord>              Records;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CustomData;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5PrivacyBlockedUser) == 0x000008, "Wrong alignment on FHy5PrivacyBlockedUser");
static_assert(sizeof(FHy5PrivacyBlockedUser) == 0x000030, "Wrong size on FHy5PrivacyBlockedUser");
static_assert(offsetof(FHy5PrivacyBlockedUser, UserId) == 0x000000, "Member 'FHy5PrivacyBlockedUser::UserId' has a wrong offset!");
static_assert(offsetof(FHy5PrivacyBlockedUser, Records) == 0x000010, "Member 'FHy5PrivacyBlockedUser::Records' has a wrong offset!");
static_assert(offsetof(FHy5PrivacyBlockedUser, CustomData) == 0x000020, "Member 'FHy5PrivacyBlockedUser::CustomData' has a wrong offset!");

// ScriptStruct Hydra5.Hy5PrivacyBlockList
// 0x0018 (0x0018 - 0x0000)
struct FHy5PrivacyBlockList final
{
public:
	int32                                         TotalCount;                                        // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHy5PrivacyBlockedUser>         List;                                              // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5PrivacyBlockList) == 0x000008, "Wrong alignment on FHy5PrivacyBlockList");
static_assert(sizeof(FHy5PrivacyBlockList) == 0x000018, "Wrong size on FHy5PrivacyBlockList");
static_assert(offsetof(FHy5PrivacyBlockList, TotalCount) == 0x000000, "Member 'FHy5PrivacyBlockList::TotalCount' has a wrong offset!");
static_assert(offsetof(FHy5PrivacyBlockList, List) == 0x000008, "Member 'FHy5PrivacyBlockList::List' has a wrong offset!");

// ScriptStruct Hydra5.MessagingMsgIncoming
// 0x0038 (0x0038 - 0x0000)
struct FMessagingMsgIncoming final
{
public:
	class FString                                 ChannelName;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserIDFrom;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MsgText;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampCreatedAt;                                // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMessagingMsgIncoming) == 0x000008, "Wrong alignment on FMessagingMsgIncoming");
static_assert(sizeof(FMessagingMsgIncoming) == 0x000038, "Wrong size on FMessagingMsgIncoming");
static_assert(offsetof(FMessagingMsgIncoming, ChannelName) == 0x000000, "Member 'FMessagingMsgIncoming::ChannelName' has a wrong offset!");
static_assert(offsetof(FMessagingMsgIncoming, UserIDFrom) == 0x000010, "Member 'FMessagingMsgIncoming::UserIDFrom' has a wrong offset!");
static_assert(offsetof(FMessagingMsgIncoming, MsgText) == 0x000020, "Member 'FMessagingMsgIncoming::MsgText' has a wrong offset!");
static_assert(offsetof(FMessagingMsgIncoming, TimestampCreatedAt) == 0x000030, "Member 'FMessagingMsgIncoming::TimestampCreatedAt' has a wrong offset!");

// ScriptStruct Hydra5.ReportResult
// 0x0018 (0x0018 - 0x0000)
struct FReportResult final
{
public:
	EReportRegistrationResult                     ResultCode;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReportID;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportResult) == 0x000008, "Wrong alignment on FReportResult");
static_assert(sizeof(FReportResult) == 0x000018, "Wrong size on FReportResult");
static_assert(offsetof(FReportResult, ResultCode) == 0x000000, "Member 'FReportResult::ResultCode' has a wrong offset!");
static_assert(offsetof(FReportResult, ReportID) == 0x000008, "Member 'FReportResult::ReportID' has a wrong offset!");

// ScriptStruct Hydra5.Hy5RecentPlayersUpdate
// 0x0030 (0x0030 - 0x0000)
struct FHy5RecentPlayersUpdate final
{
public:
	EHydra5RecentPlayersListUpdateType            Type;                                              // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserId;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5RecentPlayerState                      State;                                             // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicData;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5RecentPlayersUpdate) == 0x000008, "Wrong alignment on FHy5RecentPlayersUpdate");
static_assert(sizeof(FHy5RecentPlayersUpdate) == 0x000030, "Wrong size on FHy5RecentPlayersUpdate");
static_assert(offsetof(FHy5RecentPlayersUpdate, Type) == 0x000000, "Member 'FHy5RecentPlayersUpdate::Type' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayersUpdate, UserId) == 0x000008, "Member 'FHy5RecentPlayersUpdate::UserId' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayersUpdate, State) == 0x000018, "Member 'FHy5RecentPlayersUpdate::State' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayersUpdate, DynamicData) == 0x000020, "Member 'FHy5RecentPlayersUpdate::DynamicData' has a wrong offset!");

// ScriptStruct Hydra5.TurnServerConnectionInfo
// 0x0040 (0x0040 - 0x0000)
struct FTurnServerConnectionInfo final
{
public:
	class FString                                 IpAddress;                                         // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogIn;                                             // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Password;                                          // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampExpire;                                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTurnServerConnectionInfo) == 0x000008, "Wrong alignment on FTurnServerConnectionInfo");
static_assert(sizeof(FTurnServerConnectionInfo) == 0x000040, "Wrong size on FTurnServerConnectionInfo");
static_assert(offsetof(FTurnServerConnectionInfo, IpAddress) == 0x000000, "Member 'FTurnServerConnectionInfo::IpAddress' has a wrong offset!");
static_assert(offsetof(FTurnServerConnectionInfo, Port) == 0x000010, "Member 'FTurnServerConnectionInfo::Port' has a wrong offset!");
static_assert(offsetof(FTurnServerConnectionInfo, LogIn) == 0x000018, "Member 'FTurnServerConnectionInfo::LogIn' has a wrong offset!");
static_assert(offsetof(FTurnServerConnectionInfo, Password) == 0x000028, "Member 'FTurnServerConnectionInfo::Password' has a wrong offset!");
static_assert(offsetof(FTurnServerConnectionInfo, TimestampExpire) == 0x000038, "Member 'FTurnServerConnectionInfo::TimestampExpire' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeTurnServerResult
// 0x0048 (0x0048 - 0x0000)
struct FMatchmakeTurnServerResult final
{
public:
	EProsdkErrorCodePresence                      Code;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTurnServerConnectionInfo              Info;                                              // 0x0008(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakeTurnServerResult) == 0x000008, "Wrong alignment on FMatchmakeTurnServerResult");
static_assert(sizeof(FMatchmakeTurnServerResult) == 0x000048, "Wrong size on FMatchmakeTurnServerResult");
static_assert(offsetof(FMatchmakeTurnServerResult, Code) == 0x000000, "Member 'FMatchmakeTurnServerResult::Code' has a wrong offset!");
static_assert(offsetof(FMatchmakeTurnServerResult, Info) == 0x000008, "Member 'FMatchmakeTurnServerResult::Info' has a wrong offset!");

// ScriptStruct Hydra5.UdpEchoResponseStatus
// 0x0008 (0x0008 - 0x0000)
struct FUdpEchoResponseStatus final
{
public:
	EProsdkErrorCodeDefault                       ErrorCode;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResultMs;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdpEchoResponseStatus) == 0x000004, "Wrong alignment on FUdpEchoResponseStatus");
static_assert(sizeof(FUdpEchoResponseStatus) == 0x000008, "Wrong size on FUdpEchoResponseStatus");
static_assert(offsetof(FUdpEchoResponseStatus, ErrorCode) == 0x000000, "Member 'FUdpEchoResponseStatus::ErrorCode' has a wrong offset!");
static_assert(offsetof(FUdpEchoResponseStatus, ResultMs) == 0x000004, "Member 'FUdpEchoResponseStatus::ResultMs' has a wrong offset!");

// ScriptStruct Hydra5.PresencePenaltyInfo
// 0x0010 (0x0010 - 0x0000)
struct FPresencePenaltyInfo final
{
public:
	int64                                         DurationMs;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5PenaltyReason                          Reason;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPresencePenaltyInfo) == 0x000008, "Wrong alignment on FPresencePenaltyInfo");
static_assert(sizeof(FPresencePenaltyInfo) == 0x000010, "Wrong size on FPresencePenaltyInfo");
static_assert(offsetof(FPresencePenaltyInfo, DurationMs) == 0x000000, "Member 'FPresencePenaltyInfo::DurationMs' has a wrong offset!");
static_assert(offsetof(FPresencePenaltyInfo, Reason) == 0x000008, "Member 'FPresencePenaltyInfo::Reason' has a wrong offset!");

// ScriptStruct Hydra5.PresencePendingInfo
// 0x0018 (0x0018 - 0x0000)
struct FPresencePendingInfo final
{
public:
	int64                                         TimerMs;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionId;                                         // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresencePendingInfo) == 0x000008, "Wrong alignment on FPresencePendingInfo");
static_assert(sizeof(FPresencePendingInfo) == 0x000018, "Wrong size on FPresencePendingInfo");
static_assert(offsetof(FPresencePendingInfo, TimerMs) == 0x000000, "Member 'FPresencePendingInfo::TimerMs' has a wrong offset!");
static_assert(offsetof(FPresencePendingInfo, SessionId) == 0x000008, "Member 'FPresencePendingInfo::SessionId' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionBrowseRecord
// 0x0040 (0x0040 - 0x0000)
struct FMatchmakeSessionBrowseRecord final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakeJipState                            Jip;                                               // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakeJoinDelegation                      JoinDelegation;                                    // 0x0021(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProsSdkKeyValue>               Variants;                                          // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlayersMaxCount;                                   // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MembersCount;                                      // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakeSessionBrowseRecord) == 0x000008, "Wrong alignment on FMatchmakeSessionBrowseRecord");
static_assert(sizeof(FMatchmakeSessionBrowseRecord) == 0x000040, "Wrong size on FMatchmakeSessionBrowseRecord");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, ID) == 0x000000, "Member 'FMatchmakeSessionBrowseRecord::ID' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, Data) == 0x000010, "Member 'FMatchmakeSessionBrowseRecord::Data' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, Jip) == 0x000020, "Member 'FMatchmakeSessionBrowseRecord::Jip' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, JoinDelegation) == 0x000021, "Member 'FMatchmakeSessionBrowseRecord::JoinDelegation' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, Variants) == 0x000028, "Member 'FMatchmakeSessionBrowseRecord::Variants' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, PlayersMaxCount) == 0x000038, "Member 'FMatchmakeSessionBrowseRecord::PlayersMaxCount' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRecord, MembersCount) == 0x00003C, "Member 'FMatchmakeSessionBrowseRecord::MembersCount' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionBrowseResult
// 0x0010 (0x0010 - 0x0000)
struct FMatchmakeSessionBrowseResult final
{
public:
	TArray<struct FMatchmakeSessionBrowseRecord>  Sessions;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakeSessionBrowseResult) == 0x000008, "Wrong alignment on FMatchmakeSessionBrowseResult");
static_assert(sizeof(FMatchmakeSessionBrowseResult) == 0x000010, "Wrong size on FMatchmakeSessionBrowseResult");
static_assert(offsetof(FMatchmakeSessionBrowseResult, Sessions) == 0x000000, "Member 'FMatchmakeSessionBrowseResult::Sessions' has a wrong offset!");

// ScriptStruct Hydra5.EconomyApplyOfferItemError
// 0x0018 (0x0018 - 0x0000)
struct FEconomyApplyOfferItemError final
{
public:
	class FString                                 ReferenceId;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsdkErrorCodeEconomy                       Code;                                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEconomyApplyOfferItemError) == 0x000008, "Wrong alignment on FEconomyApplyOfferItemError");
static_assert(sizeof(FEconomyApplyOfferItemError) == 0x000018, "Wrong size on FEconomyApplyOfferItemError");
static_assert(offsetof(FEconomyApplyOfferItemError, ReferenceId) == 0x000000, "Member 'FEconomyApplyOfferItemError::ReferenceId' has a wrong offset!");
static_assert(offsetof(FEconomyApplyOfferItemError, Code) == 0x000010, "Member 'FEconomyApplyOfferItemError::Code' has a wrong offset!");

// ScriptStruct Hydra5.UsersOffersResult
// 0x0020 (0x0020 - 0x0000)
struct FUsersOffersResult final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEconomyApplyOfferItemError>    Errors;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUsersOffersResult) == 0x000008, "Wrong alignment on FUsersOffersResult");
static_assert(sizeof(FUsersOffersResult) == 0x000020, "Wrong size on FUsersOffersResult");
static_assert(offsetof(FUsersOffersResult, UserId) == 0x000000, "Member 'FUsersOffersResult::UserId' has a wrong offset!");
static_assert(offsetof(FUsersOffersResult, Errors) == 0x000010, "Member 'FUsersOffersResult::Errors' has a wrong offset!");

// ScriptStruct Hydra5.JsonOfferItem
// 0x0030 (0x0030 - 0x0000)
struct FJsonOfferItem final
{
public:
	class FString                                 ReferenceId;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferJson;                                         // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FJsonOfferItem) == 0x000008, "Wrong alignment on FJsonOfferItem");
static_assert(sizeof(FJsonOfferItem) == 0x000030, "Wrong size on FJsonOfferItem");
static_assert(offsetof(FJsonOfferItem, ReferenceId) == 0x000000, "Member 'FJsonOfferItem::ReferenceId' has a wrong offset!");
static_assert(offsetof(FJsonOfferItem, OfferJson) == 0x000010, "Member 'FJsonOfferItem::OfferJson' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionStatusUpdateReasons
// 0x0001 (0x0001 - 0x0000)
struct FMatchmakeSessionStatusUpdateReasons final
{
public:
	EGameSessionIdChangeReason                    SessionIdChangeReason;                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakeSessionStatusUpdateReasons) == 0x000001, "Wrong alignment on FMatchmakeSessionStatusUpdateReasons");
static_assert(sizeof(FMatchmakeSessionStatusUpdateReasons) == 0x000001, "Wrong size on FMatchmakeSessionStatusUpdateReasons");
static_assert(offsetof(FMatchmakeSessionStatusUpdateReasons, SessionIdChangeReason) == 0x000000, "Member 'FMatchmakeSessionStatusUpdateReasons::SessionIdChangeReason' has a wrong offset!");

// ScriptStruct Hydra5.EconomyPerUserStates
// 0x0028 (0x0028 - 0x0000)
struct FEconomyPerUserStates final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TransactionID;                                     // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEconomyUserState>              States;                                            // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyPerUserStates) == 0x000008, "Wrong alignment on FEconomyPerUserStates");
static_assert(sizeof(FEconomyPerUserStates) == 0x000028, "Wrong size on FEconomyPerUserStates");
static_assert(offsetof(FEconomyPerUserStates, UserId) == 0x000000, "Member 'FEconomyPerUserStates::UserId' has a wrong offset!");
static_assert(offsetof(FEconomyPerUserStates, TransactionID) == 0x000010, "Member 'FEconomyPerUserStates::TransactionID' has a wrong offset!");
static_assert(offsetof(FEconomyPerUserStates, States) == 0x000018, "Member 'FEconomyPerUserStates::States' has a wrong offset!");

// ScriptStruct Hydra5.Hy5FriendProviderData
// 0x0002 (0x0002 - 0x0000)
struct FHy5FriendProviderData final
{
public:
	EProsBuildPlatform                            Platform;                                          // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsProvider                                 Provider;                                          // 0x0001(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5FriendProviderData) == 0x000001, "Wrong alignment on FHy5FriendProviderData");
static_assert(sizeof(FHy5FriendProviderData) == 0x000002, "Wrong size on FHy5FriendProviderData");
static_assert(offsetof(FHy5FriendProviderData, Platform) == 0x000000, "Member 'FHy5FriendProviderData::Platform' has a wrong offset!");
static_assert(offsetof(FHy5FriendProviderData, Provider) == 0x000001, "Member 'FHy5FriendProviderData::Provider' has a wrong offset!");

// ScriptStruct Hydra5.Hy5FriendRecord
// 0x0050 (0x0050 - 0x0000)
struct FHy5FriendRecord final
{
public:
	struct FDateTime                              TimestampAdded;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomData;                                        // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5FriendState                            State;                                             // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicData;                                       // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampLastOnline;                               // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHy5FriendProviderData                 UserProvider;                                      // 0x0048(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHy5FriendRecord) == 0x000008, "Wrong alignment on FHy5FriendRecord");
static_assert(sizeof(FHy5FriendRecord) == 0x000050, "Wrong size on FHy5FriendRecord");
static_assert(offsetof(FHy5FriendRecord, TimestampAdded) == 0x000000, "Member 'FHy5FriendRecord::TimestampAdded' has a wrong offset!");
static_assert(offsetof(FHy5FriendRecord, UserId) == 0x000008, "Member 'FHy5FriendRecord::UserId' has a wrong offset!");
static_assert(offsetof(FHy5FriendRecord, CustomData) == 0x000018, "Member 'FHy5FriendRecord::CustomData' has a wrong offset!");
static_assert(offsetof(FHy5FriendRecord, State) == 0x000028, "Member 'FHy5FriendRecord::State' has a wrong offset!");
static_assert(offsetof(FHy5FriendRecord, DynamicData) == 0x000030, "Member 'FHy5FriendRecord::DynamicData' has a wrong offset!");
static_assert(offsetof(FHy5FriendRecord, TimestampLastOnline) == 0x000040, "Member 'FHy5FriendRecord::TimestampLastOnline' has a wrong offset!");
static_assert(offsetof(FHy5FriendRecord, UserProvider) == 0x000048, "Member 'FHy5FriendRecord::UserProvider' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUserGameStatus
// 0x0088 (0x0088 - 0x0000)
struct FPresenceUserGameStatus final
{
public:
	struct FPresenceUserSessionStatus             Session;                                           // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 PlaylistId;                                        // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5PresenceSessionType                    Type;                                              // 0x0080(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPresenceUserGameStatus) == 0x000008, "Wrong alignment on FPresenceUserGameStatus");
static_assert(sizeof(FPresenceUserGameStatus) == 0x000088, "Wrong size on FPresenceUserGameStatus");
static_assert(offsetof(FPresenceUserGameStatus, Session) == 0x000000, "Member 'FPresenceUserGameStatus::Session' has a wrong offset!");
static_assert(offsetof(FPresenceUserGameStatus, PlaylistId) == 0x000070, "Member 'FPresenceUserGameStatus::PlaylistId' has a wrong offset!");
static_assert(offsetof(FPresenceUserGameStatus, Type) == 0x000080, "Member 'FPresenceUserGameStatus::Type' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeQueueVariant
// 0x0030 (0x0030 - 0x0000)
struct FMatchmakeQueueVariant final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Values;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeQueueVariant) == 0x000008, "Wrong alignment on FMatchmakeQueueVariant");
static_assert(sizeof(FMatchmakeQueueVariant) == 0x000030, "Wrong size on FMatchmakeQueueVariant");
static_assert(offsetof(FMatchmakeQueueVariant, ID) == 0x000000, "Member 'FMatchmakeQueueVariant::ID' has a wrong offset!");
static_assert(offsetof(FMatchmakeQueueVariant, Values) == 0x000010, "Member 'FMatchmakeQueueVariant::Values' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUserQueueStatus
// 0x0010 (0x0010 - 0x0000)
struct FPresenceUserQueueStatus final
{
public:
	TArray<struct FMatchmakeQueueVariant>         Variants;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceUserQueueStatus) == 0x000008, "Wrong alignment on FPresenceUserQueueStatus");
static_assert(sizeof(FPresenceUserQueueStatus) == 0x000010, "Wrong size on FPresenceUserQueueStatus");
static_assert(offsetof(FPresenceUserQueueStatus, Variants) == 0x000000, "Member 'FPresenceUserQueueStatus::Variants' has a wrong offset!");

// ScriptStruct Hydra5.PresenceUserPendingStatus
// 0x0018 (0x0018 - 0x0000)
struct FPresenceUserPendingStatus final
{
public:
	int64                                         TimerMs;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenceUserPendingStatus) == 0x000008, "Wrong alignment on FPresenceUserPendingStatus");
static_assert(sizeof(FPresenceUserPendingStatus) == 0x000018, "Wrong size on FPresenceUserPendingStatus");
static_assert(offsetof(FPresenceUserPendingStatus, TimerMs) == 0x000000, "Member 'FPresenceUserPendingStatus::TimerMs' has a wrong offset!");
static_assert(offsetof(FPresenceUserPendingStatus, ID) == 0x000008, "Member 'FPresenceUserPendingStatus::ID' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionStatus
// 0x00C8 (0x00C8 - 0x0000)
struct FMatchmakeSessionStatus final
{
public:
	struct FPresenceUserGameStatus                Game;                                              // 0x0000(0x0088)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPresenceUserQueueStatus               Queue;                                             // 0x0088(0x0010)(BlueprintVisible, NativeAccessSpecifierPublic)
	EMatchmakeState                               State;                                             // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPresenceUserPendingStatus             Pending;                                           // 0x00A0(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FPresencePenaltyInfo                   Penalty;                                           // 0x00B8(0x0010)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakeSessionStatus) == 0x000008, "Wrong alignment on FMatchmakeSessionStatus");
static_assert(sizeof(FMatchmakeSessionStatus) == 0x0000C8, "Wrong size on FMatchmakeSessionStatus");
static_assert(offsetof(FMatchmakeSessionStatus, Game) == 0x000000, "Member 'FMatchmakeSessionStatus::Game' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionStatus, Queue) == 0x000088, "Member 'FMatchmakeSessionStatus::Queue' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionStatus, State) == 0x000098, "Member 'FMatchmakeSessionStatus::State' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionStatus, Pending) == 0x0000A0, "Member 'FMatchmakeSessionStatus::Pending' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionStatus, Penalty) == 0x0000B8, "Member 'FMatchmakeSessionStatus::Penalty' has a wrong offset!");

// ScriptStruct Hydra5.ClientData
// 0x0078 (0x0078 - 0x0000)
struct FClientData final
{
public:
	class FString                                 ClientId;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESessionMemberEventType                       Type;                                              // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionControlKeyContainer            KeyInfo;                                           // 0x0028(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientData) == 0x000008, "Wrong alignment on FClientData");
static_assert(sizeof(FClientData) == 0x000078, "Wrong size on FClientData");
static_assert(offsetof(FClientData, ClientId) == 0x000000, "Member 'FClientData::ClientId' has a wrong offset!");
static_assert(offsetof(FClientData, Key) == 0x000010, "Member 'FClientData::Key' has a wrong offset!");
static_assert(offsetof(FClientData, Type) == 0x000020, "Member 'FClientData::Type' has a wrong offset!");
static_assert(offsetof(FClientData, KeyInfo) == 0x000028, "Member 'FClientData::KeyInfo' has a wrong offset!");

// ScriptStruct Hydra5.ServerPendingUsersResult
// 0x0010 (0x0010 - 0x0000)
struct FServerPendingUsersResult final
{
public:
	TArray<struct FClientData>                    Users;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerPendingUsersResult) == 0x000008, "Wrong alignment on FServerPendingUsersResult");
static_assert(sizeof(FServerPendingUsersResult) == 0x000010, "Wrong size on FServerPendingUsersResult");
static_assert(offsetof(FServerPendingUsersResult, Users) == 0x000000, "Member 'FServerPendingUsersResult::Users' has a wrong offset!");

// ScriptStruct Hydra5.SessionControlEchoEndpoint
// 0x0028 (0x0028 - 0x0000)
struct FSessionControlEchoEndpoint final
{
public:
	class FString                                 Ip;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndpointScheme                               Scheme;                                            // 0x0014(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x13];                                      // 0x0015(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionControlEchoEndpoint) == 0x000008, "Wrong alignment on FSessionControlEchoEndpoint");
static_assert(sizeof(FSessionControlEchoEndpoint) == 0x000028, "Wrong size on FSessionControlEchoEndpoint");
static_assert(offsetof(FSessionControlEchoEndpoint, Ip) == 0x000000, "Member 'FSessionControlEchoEndpoint::Ip' has a wrong offset!");
static_assert(offsetof(FSessionControlEchoEndpoint, Port) == 0x000010, "Member 'FSessionControlEchoEndpoint::Port' has a wrong offset!");
static_assert(offsetof(FSessionControlEchoEndpoint, Scheme) == 0x000014, "Member 'FSessionControlEchoEndpoint::Scheme' has a wrong offset!");

// ScriptStruct Hydra5.SessionControlDataCenter
// 0x0020 (0x0020 - 0x0000)
struct FSessionControlDataCenter final
{
public:
	class FString                                 DataCenterId;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSessionControlEchoEndpoint>    Endpoints;                                         // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionControlDataCenter) == 0x000008, "Wrong alignment on FSessionControlDataCenter");
static_assert(sizeof(FSessionControlDataCenter) == 0x000020, "Wrong size on FSessionControlDataCenter");
static_assert(offsetof(FSessionControlDataCenter, DataCenterId) == 0x000000, "Member 'FSessionControlDataCenter::DataCenterId' has a wrong offset!");
static_assert(offsetof(FSessionControlDataCenter, Endpoints) == 0x000010, "Member 'FSessionControlDataCenter::Endpoints' has a wrong offset!");

// ScriptStruct Hydra5.LayerData
// 0x0050 (0x0050 - 0x0000)
struct FLayerData final
{
public:
	struct FLayerInfo                             Info;                                              // 0x0000(0x0040)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLayerData) == 0x000008, "Wrong alignment on FLayerData");
static_assert(sizeof(FLayerData) == 0x000050, "Wrong size on FLayerData");
static_assert(offsetof(FLayerData, Info) == 0x000000, "Member 'FLayerData::Info' has a wrong offset!");
static_assert(offsetof(FLayerData, Data) == 0x000040, "Member 'FLayerData::Data' has a wrong offset!");

// ScriptStruct Hydra5.AbstractDataKeyRecord
// 0x0030 (0x0030 - 0x0000)
struct FAbstractDataKeyRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAbstractDataContainerRecord>   Containers;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbstractDataKeyRecord) == 0x000008, "Wrong alignment on FAbstractDataKeyRecord");
static_assert(sizeof(FAbstractDataKeyRecord) == 0x000030, "Wrong size on FAbstractDataKeyRecord");
static_assert(offsetof(FAbstractDataKeyRecord, Key) == 0x000000, "Member 'FAbstractDataKeyRecord::Key' has a wrong offset!");
static_assert(offsetof(FAbstractDataKeyRecord, Containers) == 0x000010, "Member 'FAbstractDataKeyRecord::Containers' has a wrong offset!");

// ScriptStruct Hydra5.BanInfoRecord
// 0x0050 (0x0050 - 0x0000)
struct FBanInfoRecord final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnbanDescription;                                  // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Created;                                           // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Expire;                                            // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Unban;                                             // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Scope;                                             // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActive;                                         // 0x004C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBanInfoRecord) == 0x000008, "Wrong alignment on FBanInfoRecord");
static_assert(sizeof(FBanInfoRecord) == 0x000050, "Wrong size on FBanInfoRecord");
static_assert(offsetof(FBanInfoRecord, ID) == 0x000000, "Member 'FBanInfoRecord::ID' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, Description) == 0x000010, "Member 'FBanInfoRecord::Description' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, UnbanDescription) == 0x000020, "Member 'FBanInfoRecord::UnbanDescription' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, Created) == 0x000030, "Member 'FBanInfoRecord::Created' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, Expire) == 0x000038, "Member 'FBanInfoRecord::Expire' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, Unban) == 0x000040, "Member 'FBanInfoRecord::Unban' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, Scope) == 0x000048, "Member 'FBanInfoRecord::Scope' has a wrong offset!");
static_assert(offsetof(FBanInfoRecord, bIsActive) == 0x00004C, "Member 'FBanInfoRecord::bIsActive' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeDatacenterPingInfo
// 0x0028 (0x0028 - 0x0000)
struct FMatchmakeDatacenterPingInfo final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Ping;                                              // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x14];                                      // 0x0014(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeDatacenterPingInfo) == 0x000008, "Wrong alignment on FMatchmakeDatacenterPingInfo");
static_assert(sizeof(FMatchmakeDatacenterPingInfo) == 0x000028, "Wrong size on FMatchmakeDatacenterPingInfo");
static_assert(offsetof(FMatchmakeDatacenterPingInfo, Name) == 0x000000, "Member 'FMatchmakeDatacenterPingInfo::Name' has a wrong offset!");
static_assert(offsetof(FMatchmakeDatacenterPingInfo, Ping) == 0x000010, "Member 'FMatchmakeDatacenterPingInfo::Ping' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionOptions
// 0x0038 (0x0038 - 0x0000)
struct FMatchmakeSessionOptions final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakeDatacenterPingInfo>   Pings;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EHydra5MatchmakeCrossplaySearchMode           CrossplaySearchMode;                               // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x17];                                      // 0x0021(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionOptions) == 0x000008, "Wrong alignment on FMatchmakeSessionOptions");
static_assert(sizeof(FMatchmakeSessionOptions) == 0x000038, "Wrong size on FMatchmakeSessionOptions");
static_assert(offsetof(FMatchmakeSessionOptions, PlaylistId) == 0x000000, "Member 'FMatchmakeSessionOptions::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionOptions, Pings) == 0x000010, "Member 'FMatchmakeSessionOptions::Pings' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionOptions, CrossplaySearchMode) == 0x000020, "Member 'FMatchmakeSessionOptions::CrossplaySearchMode' has a wrong offset!");

// ScriptStruct Hydra5.ChallengesUpdate
// 0x0060 (0x0060 - 0x0000)
struct FChallengesUpdate final
{
public:
	struct FChallengeClientStatus                 AllChallenges;                                     // 0x0000(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChallengeClientStatus                 OnlyUpdatedChallenges;                             // 0x0028(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FString>                         RemovedChallenges;                                 // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengesUpdate) == 0x000008, "Wrong alignment on FChallengesUpdate");
static_assert(sizeof(FChallengesUpdate) == 0x000060, "Wrong size on FChallengesUpdate");
static_assert(offsetof(FChallengesUpdate, AllChallenges) == 0x000000, "Member 'FChallengesUpdate::AllChallenges' has a wrong offset!");
static_assert(offsetof(FChallengesUpdate, OnlyUpdatedChallenges) == 0x000028, "Member 'FChallengesUpdate::OnlyUpdatedChallenges' has a wrong offset!");
static_assert(offsetof(FChallengesUpdate, RemovedChallenges) == 0x000050, "Member 'FChallengesUpdate::RemovedChallenges' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeUserRatingOverride
// 0x0030 (0x0030 - 0x0000)
struct FMatchmakeUserRatingOverride final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RatingId;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeUserRatingOverride) == 0x000008, "Wrong alignment on FMatchmakeUserRatingOverride");
static_assert(sizeof(FMatchmakeUserRatingOverride) == 0x000030, "Wrong size on FMatchmakeUserRatingOverride");
static_assert(offsetof(FMatchmakeUserRatingOverride, UserId) == 0x000000, "Member 'FMatchmakeUserRatingOverride::UserId' has a wrong offset!");
static_assert(offsetof(FMatchmakeUserRatingOverride, RatingId) == 0x000010, "Member 'FMatchmakeUserRatingOverride::RatingId' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionCreateOptions
// 0x0090 (0x0090 - 0x0000)
struct FMatchmakeSessionCreateOptions final
{
public:
	struct FMatchmakeSessionOptions               Options;                                           // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchmakeSessionSettings              Settings;                                          // 0x0038(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FProsSdkKeyValue>               Variants;                                          // 0x0060(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakeUserRatingOverride>   UserRatingOverrides;                               // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionCreateOptions) == 0x000008, "Wrong alignment on FMatchmakeSessionCreateOptions");
static_assert(sizeof(FMatchmakeSessionCreateOptions) == 0x000090, "Wrong size on FMatchmakeSessionCreateOptions");
static_assert(offsetof(FMatchmakeSessionCreateOptions, Options) == 0x000000, "Member 'FMatchmakeSessionCreateOptions::Options' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionCreateOptions, Settings) == 0x000038, "Member 'FMatchmakeSessionCreateOptions::Settings' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionCreateOptions, Variants) == 0x000060, "Member 'FMatchmakeSessionCreateOptions::Variants' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionCreateOptions, UserRatingOverrides) == 0x000070, "Member 'FMatchmakeSessionCreateOptions::UserRatingOverrides' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardBoard
// 0x0070 (0x0070 - 0x0000)
struct FLeaderboardBoard final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Total;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLeaderboardPosition>           Positions;                                         // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FLeaderboardPosition                   LocalHydraUser;                                    // 0x0028(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLeaderboardBoard) == 0x000008, "Wrong alignment on FLeaderboardBoard");
static_assert(sizeof(FLeaderboardBoard) == 0x000070, "Wrong size on FLeaderboardBoard");
static_assert(offsetof(FLeaderboardBoard, ID) == 0x000000, "Member 'FLeaderboardBoard::ID' has a wrong offset!");
static_assert(offsetof(FLeaderboardBoard, Total) == 0x000010, "Member 'FLeaderboardBoard::Total' has a wrong offset!");
static_assert(offsetof(FLeaderboardBoard, Positions) == 0x000018, "Member 'FLeaderboardBoard::Positions' has a wrong offset!");
static_assert(offsetof(FLeaderboardBoard, LocalHydraUser) == 0x000028, "Member 'FLeaderboardBoard::LocalHydraUser' has a wrong offset!");

// ScriptStruct Hydra5.UdpEchoAsyncResult
// 0x0020 (0x0020 - 0x0000)
struct FUdpEchoAsyncResult final
{
public:
	class FString                                 DataCenterId;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUdpEchoResponseStatus>         Result;                                            // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUdpEchoAsyncResult) == 0x000008, "Wrong alignment on FUdpEchoAsyncResult");
static_assert(sizeof(FUdpEchoAsyncResult) == 0x000020, "Wrong size on FUdpEchoAsyncResult");
static_assert(offsetof(FUdpEchoAsyncResult, DataCenterId) == 0x000000, "Member 'FUdpEchoAsyncResult::DataCenterId' has a wrong offset!");
static_assert(offsetof(FUdpEchoAsyncResult, Result) == 0x000010, "Member 'FUdpEchoAsyncResult::Result' has a wrong offset!");

// ScriptStruct Hydra5.StandaloneSessionData
// 0x0078 (0x0078 - 0x0000)
struct FStandaloneSessionData final
{
public:
	class FString                                 ServerName;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Mode;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map;                                               // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPasswordProtected;                              // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayers;                                        // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Tags;                                              // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FProsSdkKeyValue>               Properties;                                        // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Members;                                           // 0x0058(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStandaloneSessionData) == 0x000008, "Wrong alignment on FStandaloneSessionData");
static_assert(sizeof(FStandaloneSessionData) == 0x000078, "Wrong size on FStandaloneSessionData");
static_assert(offsetof(FStandaloneSessionData, ServerName) == 0x000000, "Member 'FStandaloneSessionData::ServerName' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, Mode) == 0x000010, "Member 'FStandaloneSessionData::Mode' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, Map) == 0x000020, "Member 'FStandaloneSessionData::Map' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, bIsPasswordProtected) == 0x000030, "Member 'FStandaloneSessionData::bIsPasswordProtected' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, MaxPlayers) == 0x000034, "Member 'FStandaloneSessionData::MaxPlayers' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, Tags) == 0x000038, "Member 'FStandaloneSessionData::Tags' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, Properties) == 0x000048, "Member 'FStandaloneSessionData::Properties' has a wrong offset!");
static_assert(offsetof(FStandaloneSessionData, Members) == 0x000058, "Member 'FStandaloneSessionData::Members' has a wrong offset!");

// ScriptStruct Hydra5.StandaloneServerInfo
// 0x0030 (0x0030 - 0x0000)
struct FStandaloneServerInfo final
{
public:
	class FString                                 ConnectionInfo;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Property;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStandaloneServerInfo) == 0x000008, "Wrong alignment on FStandaloneServerInfo");
static_assert(sizeof(FStandaloneServerInfo) == 0x000030, "Wrong size on FStandaloneServerInfo");
static_assert(offsetof(FStandaloneServerInfo, ConnectionInfo) == 0x000000, "Member 'FStandaloneServerInfo::ConnectionInfo' has a wrong offset!");
static_assert(offsetof(FStandaloneServerInfo, Property) == 0x000010, "Member 'FStandaloneServerInfo::Property' has a wrong offset!");

// ScriptStruct Hydra5.StandaloneServerData
// 0x00B8 (0x00B8 - 0x0000)
struct FStandaloneServerData final
{
public:
	struct FStandaloneSessionData                 Data;                                              // 0x0000(0x0078)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FStandaloneServerInfo                  Info;                                              // 0x0078(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStandaloneServerData) == 0x000008, "Wrong alignment on FStandaloneServerData");
static_assert(sizeof(FStandaloneServerData) == 0x0000B8, "Wrong size on FStandaloneServerData");
static_assert(offsetof(FStandaloneServerData, Data) == 0x000000, "Member 'FStandaloneServerData::Data' has a wrong offset!");
static_assert(offsetof(FStandaloneServerData, Info) == 0x000078, "Member 'FStandaloneServerData::Info' has a wrong offset!");

// ScriptStruct Hydra5.Hy5StandaloneContinuationToken
// 0x0008 (0x0008 - 0x0000)
struct FHy5StandaloneContinuationToken final
{
public:
	int32                                         StartFrom;                                         // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxResults;                                        // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5StandaloneContinuationToken) == 0x000004, "Wrong alignment on FHy5StandaloneContinuationToken");
static_assert(sizeof(FHy5StandaloneContinuationToken) == 0x000008, "Wrong size on FHy5StandaloneContinuationToken");
static_assert(offsetof(FHy5StandaloneContinuationToken, StartFrom) == 0x000000, "Member 'FHy5StandaloneContinuationToken::StartFrom' has a wrong offset!");
static_assert(offsetof(FHy5StandaloneContinuationToken, MaxResults) == 0x000004, "Member 'FHy5StandaloneContinuationToken::MaxResults' has a wrong offset!");

// ScriptStruct Hydra5.StandaloneBrowseResult
// 0x0028 (0x0028 - 0x0000)
struct FStandaloneBrowseResult final
{
public:
	int32                                         SlotsTotal;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotsOccupied;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStandaloneServerData>          Servers;                                           // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ServersTotal;                                      // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHy5StandaloneContinuationToken        ContinuationToken;                                 // 0x001C(0x0008)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStandaloneBrowseResult) == 0x000008, "Wrong alignment on FStandaloneBrowseResult");
static_assert(sizeof(FStandaloneBrowseResult) == 0x000028, "Wrong size on FStandaloneBrowseResult");
static_assert(offsetof(FStandaloneBrowseResult, SlotsTotal) == 0x000000, "Member 'FStandaloneBrowseResult::SlotsTotal' has a wrong offset!");
static_assert(offsetof(FStandaloneBrowseResult, SlotsOccupied) == 0x000004, "Member 'FStandaloneBrowseResult::SlotsOccupied' has a wrong offset!");
static_assert(offsetof(FStandaloneBrowseResult, Servers) == 0x000008, "Member 'FStandaloneBrowseResult::Servers' has a wrong offset!");
static_assert(offsetof(FStandaloneBrowseResult, ServersTotal) == 0x000018, "Member 'FStandaloneBrowseResult::ServersTotal' has a wrong offset!");
static_assert(offsetof(FStandaloneBrowseResult, ContinuationToken) == 0x00001C, "Member 'FStandaloneBrowseResult::ContinuationToken' has a wrong offset!");

// ScriptStruct Hydra5.UserIdentityResolvePlatform
// 0x0002 (0x0002 - 0x0000)
struct FUserIdentityResolvePlatform final
{
public:
	EProsProvider                                 Provider;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsBuildPlatform                            Platform;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserIdentityResolvePlatform) == 0x000001, "Wrong alignment on FUserIdentityResolvePlatform");
static_assert(sizeof(FUserIdentityResolvePlatform) == 0x000002, "Wrong size on FUserIdentityResolvePlatform");
static_assert(offsetof(FUserIdentityResolvePlatform, Provider) == 0x000000, "Member 'FUserIdentityResolvePlatform::Provider' has a wrong offset!");
static_assert(offsetof(FUserIdentityResolvePlatform, Platform) == 0x000001, "Member 'FUserIdentityResolvePlatform::Platform' has a wrong offset!");

// ScriptStruct Hydra5.UserIdentityResolveResult
// 0x0030 (0x0030 - 0x0000)
struct FUserIdentityResolveResult final
{
public:
	class FString                                 ProviderUserIdentity;                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProsUserIdentity;                                  // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FUserIdentityResolvePlatform>   Platforms;                                         // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUserIdentityResolveResult) == 0x000008, "Wrong alignment on FUserIdentityResolveResult");
static_assert(sizeof(FUserIdentityResolveResult) == 0x000030, "Wrong size on FUserIdentityResolveResult");
static_assert(offsetof(FUserIdentityResolveResult, ProviderUserIdentity) == 0x000000, "Member 'FUserIdentityResolveResult::ProviderUserIdentity' has a wrong offset!");
static_assert(offsetof(FUserIdentityResolveResult, ProsUserIdentity) == 0x000010, "Member 'FUserIdentityResolveResult::ProsUserIdentity' has a wrong offset!");
static_assert(offsetof(FUserIdentityResolveResult, Platforms) == 0x000020, "Member 'FUserIdentityResolveResult::Platforms' has a wrong offset!");

// ScriptStruct Hydra5.PartyStatusUpdateReason
// 0x0001 (0x0001 - 0x0000)
struct FPartyStatusUpdateReason final
{
public:
	EPartyIdChangeReason                          PartyIdChangeReason;                               // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyStatusUpdateReason) == 0x000001, "Wrong alignment on FPartyStatusUpdateReason");
static_assert(sizeof(FPartyStatusUpdateReason) == 0x000001, "Wrong size on FPartyStatusUpdateReason");
static_assert(offsetof(FPartyStatusUpdateReason, PartyIdChangeReason) == 0x000000, "Member 'FPartyStatusUpdateReason::PartyIdChangeReason' has a wrong offset!");

// ScriptStruct Hydra5.PartySettings
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FPartySettings final
{
public:
	int32                                         MembersMaxCount;                                   // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyInviteDelegation                        InviteDelegation;                                  // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPartyJoinDelegation                          JoinDelegation;                                    // 0x0005(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5PartyJoin                              bJoinable;                                         // 0x0006(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisbandOnOwnerLeave;                              // 0x0007(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartySettings) == 0x000008, "Wrong alignment on FPartySettings");
static_assert(sizeof(FPartySettings) == 0x000018, "Wrong size on FPartySettings");
static_assert(offsetof(FPartySettings, MembersMaxCount) == 0x000000, "Member 'FPartySettings::MembersMaxCount' has a wrong offset!");
static_assert(offsetof(FPartySettings, InviteDelegation) == 0x000004, "Member 'FPartySettings::InviteDelegation' has a wrong offset!");
static_assert(offsetof(FPartySettings, JoinDelegation) == 0x000005, "Member 'FPartySettings::JoinDelegation' has a wrong offset!");
static_assert(offsetof(FPartySettings, bJoinable) == 0x000006, "Member 'FPartySettings::bJoinable' has a wrong offset!");
static_assert(offsetof(FPartySettings, bDisbandOnOwnerLeave) == 0x000007, "Member 'FPartySettings::bDisbandOnOwnerLeave' has a wrong offset!");

// ScriptStruct Hydra5.PartyMemberHydra
// 0x0078 (0x0078 - 0x0000)
struct FPartyMemberHydra final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StaticData;                                        // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPresenceStaticDataSerializable        StaticDataObject;                                  // 0x0030(0x0028)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bIsOwner;                                          // 0x0058(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SortIndex;                                         // 0x005C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLocal;                                          // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchmakeState                               State;                                             // 0x0061(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHy5PresenceProviderData               UserProvider;                                      // 0x0062(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x14];                                      // 0x0064(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMemberHydra) == 0x000008, "Wrong alignment on FPartyMemberHydra");
static_assert(sizeof(FPartyMemberHydra) == 0x000078, "Wrong size on FPartyMemberHydra");
static_assert(offsetof(FPartyMemberHydra, Hydra5UserId) == 0x000000, "Member 'FPartyMemberHydra::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, Data) == 0x000010, "Member 'FPartyMemberHydra::Data' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, StaticData) == 0x000020, "Member 'FPartyMemberHydra::StaticData' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, StaticDataObject) == 0x000030, "Member 'FPartyMemberHydra::StaticDataObject' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, bIsOwner) == 0x000058, "Member 'FPartyMemberHydra::bIsOwner' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, SortIndex) == 0x00005C, "Member 'FPartyMemberHydra::SortIndex' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, bIsLocal) == 0x000060, "Member 'FPartyMemberHydra::bIsLocal' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, State) == 0x000061, "Member 'FPartyMemberHydra::State' has a wrong offset!");
static_assert(offsetof(FPartyMemberHydra, UserProvider) == 0x000062, "Member 'FPartyMemberHydra::UserProvider' has a wrong offset!");

// ScriptStruct Hydra5.PartyStatus
// 0x0058 (0x0058 - 0x0000)
struct FPartyStatus final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoinCode;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPartySettings                         Settings;                                          // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FPartyMemberHydra>              Members;                                           // 0x0048(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyStatus) == 0x000008, "Wrong alignment on FPartyStatus");
static_assert(sizeof(FPartyStatus) == 0x000058, "Wrong size on FPartyStatus");
static_assert(offsetof(FPartyStatus, ID) == 0x000000, "Member 'FPartyStatus::ID' has a wrong offset!");
static_assert(offsetof(FPartyStatus, Data) == 0x000010, "Member 'FPartyStatus::Data' has a wrong offset!");
static_assert(offsetof(FPartyStatus, JoinCode) == 0x000020, "Member 'FPartyStatus::JoinCode' has a wrong offset!");
static_assert(offsetof(FPartyStatus, Settings) == 0x000030, "Member 'FPartyStatus::Settings' has a wrong offset!");
static_assert(offsetof(FPartyStatus, Members) == 0x000048, "Member 'FPartyStatus::Members' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionInfo
// 0x0078 (0x0078 - 0x0000)
struct FMatchmakeSessionInfo final
{
public:
	struct FPresenceUserSessionStatus             Status;                                            // 0x0000(0x0070)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bIsJoinable;                                       // 0x0070(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionInfo) == 0x000008, "Wrong alignment on FMatchmakeSessionInfo");
static_assert(sizeof(FMatchmakeSessionInfo) == 0x000078, "Wrong size on FMatchmakeSessionInfo");
static_assert(offsetof(FMatchmakeSessionInfo, Status) == 0x000000, "Member 'FMatchmakeSessionInfo::Status' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionInfo, bIsJoinable) == 0x000070, "Member 'FMatchmakeSessionInfo::bIsJoinable' has a wrong offset!");

// ScriptStruct Hydra5.SessionControlAcceptData
// 0x0050 (0x0050 - 0x0000)
struct FSessionControlAcceptData final
{
public:
	struct FSessionControlKeyContainer            KeyInfo;                                           // 0x0000(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionControlAcceptData) == 0x000008, "Wrong alignment on FSessionControlAcceptData");
static_assert(sizeof(FSessionControlAcceptData) == 0x000050, "Wrong size on FSessionControlAcceptData");
static_assert(offsetof(FSessionControlAcceptData, KeyInfo) == 0x000000, "Member 'FSessionControlAcceptData::KeyInfo' has a wrong offset!");

// ScriptStruct Hydra5.SessionControlServerInfo
// 0x0030 (0x0030 - 0x0000)
struct FSessionControlServerInfo final
{
public:
	class FString                                 ConnectionInfo;                                    // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerProperty;                                    // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSessionControlServerInfo) == 0x000008, "Wrong alignment on FSessionControlServerInfo");
static_assert(sizeof(FSessionControlServerInfo) == 0x000030, "Wrong size on FSessionControlServerInfo");
static_assert(offsetof(FSessionControlServerInfo, ConnectionInfo) == 0x000000, "Member 'FSessionControlServerInfo::ConnectionInfo' has a wrong offset!");
static_assert(offsetof(FSessionControlServerInfo, ServerProperty) == 0x000010, "Member 'FSessionControlServerInfo::ServerProperty' has a wrong offset!");

// ScriptStruct Hydra5.SessionControlAcceptClientResult
// 0x0088 (0x0088 - 0x0000)
struct FSessionControlAcceptClientResult final
{
public:
	ESessionControlAcceptStatus                   Status;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSessionControlAcceptData              Data;                                              // 0x0008(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSessionControlServerInfo              ServerInfo;                                        // 0x0058(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSessionControlAcceptClientResult) == 0x000008, "Wrong alignment on FSessionControlAcceptClientResult");
static_assert(sizeof(FSessionControlAcceptClientResult) == 0x000088, "Wrong size on FSessionControlAcceptClientResult");
static_assert(offsetof(FSessionControlAcceptClientResult, Status) == 0x000000, "Member 'FSessionControlAcceptClientResult::Status' has a wrong offset!");
static_assert(offsetof(FSessionControlAcceptClientResult, Data) == 0x000008, "Member 'FSessionControlAcceptClientResult::Data' has a wrong offset!");
static_assert(offsetof(FSessionControlAcceptClientResult, ServerInfo) == 0x000058, "Member 'FSessionControlAcceptClientResult::ServerInfo' has a wrong offset!");

// ScriptStruct Hydra5.Hy5RecentPlayerRecord
// 0x0040 (0x0040 - 0x0000)
struct FHy5RecentPlayerRecord final
{
public:
	struct FDateTime                              TimestampAdded;                                    // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UserId;                                            // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5RecentPlayerState                      State;                                             // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DynamicData;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              TimestampLastOnline;                               // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHy5FriendProviderData                 UserProvider;                                      // 0x0038(0x0002)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHy5RecentPlayerRecord) == 0x000008, "Wrong alignment on FHy5RecentPlayerRecord");
static_assert(sizeof(FHy5RecentPlayerRecord) == 0x000040, "Wrong size on FHy5RecentPlayerRecord");
static_assert(offsetof(FHy5RecentPlayerRecord, TimestampAdded) == 0x000000, "Member 'FHy5RecentPlayerRecord::TimestampAdded' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayerRecord, UserId) == 0x000008, "Member 'FHy5RecentPlayerRecord::UserId' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayerRecord, State) == 0x000018, "Member 'FHy5RecentPlayerRecord::State' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayerRecord, DynamicData) == 0x000020, "Member 'FHy5RecentPlayerRecord::DynamicData' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayerRecord, TimestampLastOnline) == 0x000030, "Member 'FHy5RecentPlayerRecord::TimestampLastOnline' has a wrong offset!");
static_assert(offsetof(FHy5RecentPlayerRecord, UserProvider) == 0x000038, "Member 'FHy5RecentPlayerRecord::UserProvider' has a wrong offset!");

// ScriptStruct Hydra5.AbstractDataGetRequestRecord
// 0x0030 (0x0030 - 0x0000)
struct FAbstractDataGetRequestRecord final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Containers;                                        // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAbstractDataGetRequestRecord) == 0x000008, "Wrong alignment on FAbstractDataGetRequestRecord");
static_assert(sizeof(FAbstractDataGetRequestRecord) == 0x000030, "Wrong size on FAbstractDataGetRequestRecord");
static_assert(offsetof(FAbstractDataGetRequestRecord, Key) == 0x000000, "Member 'FAbstractDataGetRequestRecord::Key' has a wrong offset!");
static_assert(offsetof(FAbstractDataGetRequestRecord, Containers) == 0x000010, "Member 'FAbstractDataGetRequestRecord::Containers' has a wrong offset!");

// ScriptStruct Hydra5.ChallengeEventBasicData
// 0x0030 (0x0030 - 0x0000)
struct FChallengeEventBasicData final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsSdkKeyValue>               Filters;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeEventBasicData) == 0x000008, "Wrong alignment on FChallengeEventBasicData");
static_assert(sizeof(FChallengeEventBasicData) == 0x000030, "Wrong size on FChallengeEventBasicData");
static_assert(offsetof(FChallengeEventBasicData, Name) == 0x000000, "Member 'FChallengeEventBasicData::Name' has a wrong offset!");
static_assert(offsetof(FChallengeEventBasicData, Filters) == 0x000010, "Member 'FChallengeEventBasicData::Filters' has a wrong offset!");

// ScriptStruct Hydra5.ChallengePerUserEvent
// 0x0030 (0x0030 - 0x0000)
struct FChallengePerUserEvent final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChallengeEventBasicData>       Data;                                              // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengePerUserEvent) == 0x000008, "Wrong alignment on FChallengePerUserEvent");
static_assert(sizeof(FChallengePerUserEvent) == 0x000030, "Wrong size on FChallengePerUserEvent");
static_assert(offsetof(FChallengePerUserEvent, UserId) == 0x000000, "Member 'FChallengePerUserEvent::UserId' has a wrong offset!");
static_assert(offsetof(FChallengePerUserEvent, Data) == 0x000010, "Member 'FChallengePerUserEvent::Data' has a wrong offset!");

// ScriptStruct Hydra5.DiagnosticsCrashDumpData
// 0x0040 (0x0040 - 0x0000)
struct FDiagnosticsCrashDumpData final
{
public:
	TArray<uint8>                                 DumpData;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DumpHash;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsSdkKeyValue>               Properties;                                        // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDiagnosticsCrashDumpData) == 0x000008, "Wrong alignment on FDiagnosticsCrashDumpData");
static_assert(sizeof(FDiagnosticsCrashDumpData) == 0x000040, "Wrong size on FDiagnosticsCrashDumpData");
static_assert(offsetof(FDiagnosticsCrashDumpData, DumpData) == 0x000000, "Member 'FDiagnosticsCrashDumpData::DumpData' has a wrong offset!");
static_assert(offsetof(FDiagnosticsCrashDumpData, DumpHash) == 0x000010, "Member 'FDiagnosticsCrashDumpData::DumpHash' has a wrong offset!");
static_assert(offsetof(FDiagnosticsCrashDumpData, Properties) == 0x000020, "Member 'FDiagnosticsCrashDumpData::Properties' has a wrong offset!");

// ScriptStruct Hydra5.EconomyUserStates
// 0x0010 (0x0010 - 0x0000)
struct FEconomyUserStates final
{
public:
	TArray<struct FEconomyUserState>              States;                                            // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEconomyUserStates) == 0x000008, "Wrong alignment on FEconomyUserStates");
static_assert(sizeof(FEconomyUserStates) == 0x000010, "Wrong size on FEconomyUserStates");
static_assert(offsetof(FEconomyUserStates, States) == 0x000000, "Member 'FEconomyUserStates::States' has a wrong offset!");

// ScriptStruct Hydra5.IdOfferItem
// 0x0030 (0x0030 - 0x0000)
struct FIdOfferItem final
{
public:
	class FString                                 ReferenceId;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OfferId;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FIdOfferItem) == 0x000008, "Wrong alignment on FIdOfferItem");
static_assert(sizeof(FIdOfferItem) == 0x000030, "Wrong size on FIdOfferItem");
static_assert(offsetof(FIdOfferItem, ReferenceId) == 0x000000, "Member 'FIdOfferItem::ReferenceId' has a wrong offset!");
static_assert(offsetof(FIdOfferItem, OfferId) == 0x000010, "Member 'FIdOfferItem::OfferId' has a wrong offset!");

// ScriptStruct Hydra5.UserIdOffers
// 0x0030 (0x0030 - 0x0000)
struct FUserIdOffers final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIdOfferItem>                   Offers;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FUserIdOffers) == 0x000008, "Wrong alignment on FUserIdOffers");
static_assert(sizeof(FUserIdOffers) == 0x000030, "Wrong size on FUserIdOffers");
static_assert(offsetof(FUserIdOffers, UserId) == 0x000000, "Member 'FUserIdOffers::UserId' has a wrong offset!");
static_assert(offsetof(FUserIdOffers, Offers) == 0x000010, "Member 'FUserIdOffers::Offers' has a wrong offset!");

// ScriptStruct Hydra5.Hy5FriendsList
// 0x0010 (0x0010 - 0x0000)
struct FHy5FriendsList final
{
public:
	TArray<struct FHy5FriendRecord>               List;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5FriendsList) == 0x000008, "Wrong alignment on FHy5FriendsList");
static_assert(sizeof(FHy5FriendsList) == 0x000010, "Wrong size on FHy5FriendsList");
static_assert(offsetof(FHy5FriendsList, List) == 0x000000, "Member 'FHy5FriendsList::List' has a wrong offset!");

// ScriptStruct Hydra5.Hy5FriendsRequests
// 0x0010 (0x0010 - 0x0000)
struct FHy5FriendsRequests final
{
public:
	TArray<struct FHy5FriendRequestData>          Reqs;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5FriendsRequests) == 0x000008, "Wrong alignment on FHy5FriendsRequests");
static_assert(sizeof(FHy5FriendsRequests) == 0x000010, "Wrong size on FHy5FriendsRequests");
static_assert(offsetof(FHy5FriendsRequests, Reqs) == 0x000000, "Member 'FHy5FriendsRequests::Reqs' has a wrong offset!");

// ScriptStruct Hydra5.Hy5RecentPlayerNew
// 0x0010 (0x0010 - 0x0000)
struct FHy5RecentPlayerNew final
{
public:
	class FString                                 UserId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5RecentPlayerNew) == 0x000008, "Wrong alignment on FHy5RecentPlayerNew");
static_assert(sizeof(FHy5RecentPlayerNew) == 0x000010, "Wrong size on FHy5RecentPlayerNew");
static_assert(offsetof(FHy5RecentPlayerNew, UserId) == 0x000000, "Member 'FHy5RecentPlayerNew::UserId' has a wrong offset!");

// ScriptStruct Hydra5.Hy5RecentPlayersList
// 0x0010 (0x0010 - 0x0000)
struct FHy5RecentPlayersList final
{
public:
	TArray<struct FHy5RecentPlayerRecord>         List;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHy5RecentPlayersList) == 0x000008, "Wrong alignment on FHy5RecentPlayersList");
static_assert(sizeof(FHy5RecentPlayersList) == 0x000010, "Wrong size on FHy5RecentPlayersList");
static_assert(offsetof(FHy5RecentPlayersList, List) == 0x000000, "Member 'FHy5RecentPlayersList::List' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardGetRequest
// 0x0030 (0x0030 - 0x0000)
struct FLeaderboardGetRequest final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartPosition;                                     // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResultsCount;                                      // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlatformSpecific;                                // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x17];                                      // 0x0019(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardGetRequest) == 0x000008, "Wrong alignment on FLeaderboardGetRequest");
static_assert(sizeof(FLeaderboardGetRequest) == 0x000030, "Wrong size on FLeaderboardGetRequest");
static_assert(offsetof(FLeaderboardGetRequest, ID) == 0x000000, "Member 'FLeaderboardGetRequest::ID' has a wrong offset!");
static_assert(offsetof(FLeaderboardGetRequest, StartPosition) == 0x000010, "Member 'FLeaderboardGetRequest::StartPosition' has a wrong offset!");
static_assert(offsetof(FLeaderboardGetRequest, ResultsCount) == 0x000014, "Member 'FLeaderboardGetRequest::ResultsCount' has a wrong offset!");
static_assert(offsetof(FLeaderboardGetRequest, IsPlatformSpecific) == 0x000018, "Member 'FLeaderboardGetRequest::IsPlatformSpecific' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardProsPlatformEntry
// 0x0038 (0x0038 - 0x0000)
struct FLeaderboardProsPlatformEntry final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsBuildPlatform                            Platform;                                          // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsProvider                                 Provider;                                          // 0x0011(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Score;                                             // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomData;                                        // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x10];                                      // 0x0028(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardProsPlatformEntry) == 0x000008, "Wrong alignment on FLeaderboardProsPlatformEntry");
static_assert(sizeof(FLeaderboardProsPlatformEntry) == 0x000038, "Wrong size on FLeaderboardProsPlatformEntry");
static_assert(offsetof(FLeaderboardProsPlatformEntry, Hydra5UserId) == 0x000000, "Member 'FLeaderboardProsPlatformEntry::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FLeaderboardProsPlatformEntry, Platform) == 0x000010, "Member 'FLeaderboardProsPlatformEntry::Platform' has a wrong offset!");
static_assert(offsetof(FLeaderboardProsPlatformEntry, Provider) == 0x000011, "Member 'FLeaderboardProsPlatformEntry::Provider' has a wrong offset!");
static_assert(offsetof(FLeaderboardProsPlatformEntry, Score) == 0x000014, "Member 'FLeaderboardProsPlatformEntry::Score' has a wrong offset!");
static_assert(offsetof(FLeaderboardProsPlatformEntry, CustomData) == 0x000018, "Member 'FLeaderboardProsPlatformEntry::CustomData' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardProsUpdate
// 0x0030 (0x0030 - 0x0000)
struct FLeaderboardProsUpdate final
{
public:
	class FString                                 LeaderboardName;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLeaderboardProsPlatformEntry>  Entries;                                           // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardProsUpdate) == 0x000008, "Wrong alignment on FLeaderboardProsUpdate");
static_assert(sizeof(FLeaderboardProsUpdate) == 0x000030, "Wrong size on FLeaderboardProsUpdate");
static_assert(offsetof(FLeaderboardProsUpdate, LeaderboardName) == 0x000000, "Member 'FLeaderboardProsUpdate::LeaderboardName' has a wrong offset!");
static_assert(offsetof(FLeaderboardProsUpdate, Entries) == 0x000010, "Member 'FLeaderboardProsUpdate::Entries' has a wrong offset!");

// ScriptStruct Hydra5.LeaderboardPlatformEntry
// 0x0050 (0x0050 - 0x0000)
struct FLeaderboardPlatformEntry final
{
public:
	struct FLeaderboardEntry                      Entry;                                             // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	EProsBuildPlatform                            Platform;                                          // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProsProvider                                 Provider;                                          // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x16];                                      // 0x003A(0x0016)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLeaderboardPlatformEntry) == 0x000008, "Wrong alignment on FLeaderboardPlatformEntry");
static_assert(sizeof(FLeaderboardPlatformEntry) == 0x000050, "Wrong size on FLeaderboardPlatformEntry");
static_assert(offsetof(FLeaderboardPlatformEntry, Entry) == 0x000000, "Member 'FLeaderboardPlatformEntry::Entry' has a wrong offset!");
static_assert(offsetof(FLeaderboardPlatformEntry, Platform) == 0x000038, "Member 'FLeaderboardPlatformEntry::Platform' has a wrong offset!");
static_assert(offsetof(FLeaderboardPlatformEntry, Provider) == 0x000039, "Member 'FLeaderboardPlatformEntry::Provider' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeQueueOptions
// 0x0068 (0x0068 - 0x0000)
struct FMatchmakeQueueOptions final
{
public:
	struct FMatchmakeSessionOptions               SessionOptions;                                    // 0x0000(0x0038)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakeQueueVariant>         Variants;                                          // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMatchmakeUserRatingOverride>   UserRatingOverrides;                               // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeQueueOptions) == 0x000008, "Wrong alignment on FMatchmakeQueueOptions");
static_assert(sizeof(FMatchmakeQueueOptions) == 0x000068, "Wrong size on FMatchmakeQueueOptions");
static_assert(offsetof(FMatchmakeQueueOptions, SessionOptions) == 0x000000, "Member 'FMatchmakeQueueOptions::SessionOptions' has a wrong offset!");
static_assert(offsetof(FMatchmakeQueueOptions, Variants) == 0x000038, "Member 'FMatchmakeQueueOptions::Variants' has a wrong offset!");
static_assert(offsetof(FMatchmakeQueueOptions, UserRatingOverrides) == 0x000048, "Member 'FMatchmakeQueueOptions::UserRatingOverrides' has a wrong offset!");

// ScriptStruct Hydra5.MatchmakeSessionBrowseRequest
// 0x0030 (0x0030 - 0x0000)
struct FMatchmakeSessionBrowseRequest final
{
public:
	class FString                                 PlaylistId;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FProsSdkKeyValue>               Variants;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakeSessionBrowseRequest) == 0x000008, "Wrong alignment on FMatchmakeSessionBrowseRequest");
static_assert(sizeof(FMatchmakeSessionBrowseRequest) == 0x000030, "Wrong size on FMatchmakeSessionBrowseRequest");
static_assert(offsetof(FMatchmakeSessionBrowseRequest, PlaylistId) == 0x000000, "Member 'FMatchmakeSessionBrowseRequest::PlaylistId' has a wrong offset!");
static_assert(offsetof(FMatchmakeSessionBrowseRequest, Variants) == 0x000010, "Member 'FMatchmakeSessionBrowseRequest::Variants' has a wrong offset!");

// ScriptStruct Hydra5.MessagingChannel
// 0x0018 (0x0018 - 0x0000)
struct FMessagingChannel final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMessagingChannelType                         Type;                                              // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMessagingChannel) == 0x000008, "Wrong alignment on FMessagingChannel");
static_assert(sizeof(FMessagingChannel) == 0x000018, "Wrong size on FMessagingChannel");
static_assert(offsetof(FMessagingChannel, Name) == 0x000000, "Member 'FMessagingChannel::Name' has a wrong offset!");
static_assert(offsetof(FMessagingChannel, Type) == 0x000010, "Member 'FMessagingChannel::Type' has a wrong offset!");

// ScriptStruct Hydra5.ReportProperty
// 0x0030 (0x0030 - 0x0000)
struct FReportProperty final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReportProperty) == 0x000008, "Wrong alignment on FReportProperty");
static_assert(sizeof(FReportProperty) == 0x000030, "Wrong size on FReportProperty");
static_assert(offsetof(FReportProperty, Name) == 0x000000, "Member 'FReportProperty::Name' has a wrong offset!");
static_assert(offsetof(FReportProperty, Value) == 0x000010, "Member 'FReportProperty::Value' has a wrong offset!");

// ScriptStruct Hydra5.ReportToUser
// 0x0040 (0x0040 - 0x0000)
struct FReportToUser final
{
public:
	class FString                                 UserIDTo;                                          // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MsgText;                                           // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FReportProperty>                Props;                                             // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportToUser) == 0x000008, "Wrong alignment on FReportToUser");
static_assert(sizeof(FReportToUser) == 0x000040, "Wrong size on FReportToUser");
static_assert(offsetof(FReportToUser, UserIDTo) == 0x000000, "Member 'FReportToUser::UserIDTo' has a wrong offset!");
static_assert(offsetof(FReportToUser, Reason) == 0x000010, "Member 'FReportToUser::Reason' has a wrong offset!");
static_assert(offsetof(FReportToUser, MsgText) == 0x000020, "Member 'FReportToUser::MsgText' has a wrong offset!");
static_assert(offsetof(FReportToUser, Props) == 0x000030, "Member 'FReportToUser::Props' has a wrong offset!");

// ScriptStruct Hydra5.PartyCreateData
// 0x0048 (0x0048 - 0x0000)
struct FPartyCreateData final
{
public:
	struct FPartySettings                         Settings;                                          // 0x0000(0x0018)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 PartyData;                                         // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyMemberData;                                   // 0x0028(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyCreateData) == 0x000008, "Wrong alignment on FPartyCreateData");
static_assert(sizeof(FPartyCreateData) == 0x000048, "Wrong size on FPartyCreateData");
static_assert(offsetof(FPartyCreateData, Settings) == 0x000000, "Member 'FPartyCreateData::Settings' has a wrong offset!");
static_assert(offsetof(FPartyCreateData, PartyData) == 0x000018, "Member 'FPartyCreateData::PartyData' has a wrong offset!");
static_assert(offsetof(FPartyCreateData, PartyMemberData) == 0x000028, "Member 'FPartyCreateData::PartyMemberData' has a wrong offset!");

// ScriptStruct Hydra5.RatingsUpdateEntryTeam
// 0x0050 (0x0050 - 0x0000)
struct FRatingsUpdateEntryTeam final
{
public:
	class FString                                 Hydra5UserId;                                      // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndividualPlacementInTeam;                         // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TeamPlacementInGame;                               // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHydra5TeamId                                 TeamID;                                            // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RatingId;                                          // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRatingsUpdateEntryTeam) == 0x000008, "Wrong alignment on FRatingsUpdateEntryTeam");
static_assert(sizeof(FRatingsUpdateEntryTeam) == 0x000050, "Wrong size on FRatingsUpdateEntryTeam");
static_assert(offsetof(FRatingsUpdateEntryTeam, Hydra5UserId) == 0x000000, "Member 'FRatingsUpdateEntryTeam::Hydra5UserId' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryTeam, IndividualPlacementInTeam) == 0x000010, "Member 'FRatingsUpdateEntryTeam::IndividualPlacementInTeam' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryTeam, TeamPlacementInGame) == 0x000014, "Member 'FRatingsUpdateEntryTeam::TeamPlacementInGame' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryTeam, Data) == 0x000018, "Member 'FRatingsUpdateEntryTeam::Data' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryTeam, TeamID) == 0x000028, "Member 'FRatingsUpdateEntryTeam::TeamID' has a wrong offset!");
static_assert(offsetof(FRatingsUpdateEntryTeam, RatingId) == 0x000030, "Member 'FRatingsUpdateEntryTeam::RatingId' has a wrong offset!");

// ScriptStruct Hydra5.ClientDetails
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FClientDetails final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientDetails) == 0x000008, "Wrong alignment on FClientDetails");
static_assert(sizeof(FClientDetails) == 0x000030, "Wrong size on FClientDetails");

// ScriptStruct Hydra5.ClientDataRatingId
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FClientDataRatingId final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FClientDataRatingId) == 0x000008, "Wrong alignment on FClientDataRatingId");
static_assert(sizeof(FClientDataRatingId) == 0x000018, "Wrong size on FClientDataRatingId");

// ScriptStruct Hydra5.ServerSimpleInitOptions
// 0x0030 (0x0030 - 0x0000)
struct FServerSimpleInitOptions final
{
public:
	class FString                                 ConnectionInfo;                                    // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Property;                                          // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerSimpleInitOptions) == 0x000008, "Wrong alignment on FServerSimpleInitOptions");
static_assert(sizeof(FServerSimpleInitOptions) == 0x000030, "Wrong size on FServerSimpleInitOptions");
static_assert(offsetof(FServerSimpleInitOptions, ConnectionInfo) == 0x000000, "Member 'FServerSimpleInitOptions::ConnectionInfo' has a wrong offset!");
static_assert(offsetof(FServerSimpleInitOptions, Property) == 0x000010, "Member 'FServerSimpleInitOptions::Property' has a wrong offset!");

// ScriptStruct Hydra5.ClientDetailsWithRating
// 0x0048 (0x0048 - 0x0000)
struct FClientDetailsWithRating final
{
public:
	struct FClientDetails                         Details;                                           // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FClientDataRatingId                    Rating;                                            // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientDetailsWithRating) == 0x000008, "Wrong alignment on FClientDetailsWithRating");
static_assert(sizeof(FClientDetailsWithRating) == 0x000048, "Wrong size on FClientDetailsWithRating");
static_assert(offsetof(FClientDetailsWithRating, Details) == 0x000000, "Member 'FClientDetailsWithRating::Details' has a wrong offset!");
static_assert(offsetof(FClientDetailsWithRating, Rating) == 0x000030, "Member 'FClientDetailsWithRating::Rating' has a wrong offset!");

// ScriptStruct Hydra5.ServerTicket
// 0x0040 (0x0040 - 0x0000)
struct FServerTicket final
{
public:
	class FString                                 Ticket;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Token;                                             // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Domain;                                            // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Port;                                              // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSecured;                                          // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerTicket) == 0x000008, "Wrong alignment on FServerTicket");
static_assert(sizeof(FServerTicket) == 0x000040, "Wrong size on FServerTicket");
static_assert(offsetof(FServerTicket, Ticket) == 0x000000, "Member 'FServerTicket::Ticket' has a wrong offset!");
static_assert(offsetof(FServerTicket, Token) == 0x000010, "Member 'FServerTicket::Token' has a wrong offset!");
static_assert(offsetof(FServerTicket, Domain) == 0x000020, "Member 'FServerTicket::Domain' has a wrong offset!");
static_assert(offsetof(FServerTicket, Port) == 0x000030, "Member 'FServerTicket::Port' has a wrong offset!");
static_assert(offsetof(FServerTicket, bSecured) == 0x000038, "Member 'FServerTicket::bSecured' has a wrong offset!");

// ScriptStruct Hydra5.ServerDataManaged
// 0x0030 (0x0030 - 0x0000)
struct FServerDataManaged final
{
public:
	TArray<struct FProsSdkKeyValue>               Variants;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 SessionData;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Playlist;                                          // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerDataManaged) == 0x000008, "Wrong alignment on FServerDataManaged");
static_assert(sizeof(FServerDataManaged) == 0x000030, "Wrong size on FServerDataManaged");
static_assert(offsetof(FServerDataManaged, Variants) == 0x000000, "Member 'FServerDataManaged::Variants' has a wrong offset!");
static_assert(offsetof(FServerDataManaged, SessionData) == 0x000010, "Member 'FServerDataManaged::SessionData' has a wrong offset!");
static_assert(offsetof(FServerDataManaged, Playlist) == 0x000020, "Member 'FServerDataManaged::Playlist' has a wrong offset!");

// ScriptStruct Hydra5.ServerDataUnmanaged
// 0x0010 (0x0010 - 0x0000)
struct FServerDataUnmanaged final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerDataUnmanaged) == 0x000008, "Wrong alignment on FServerDataUnmanaged");
static_assert(sizeof(FServerDataUnmanaged) == 0x000010, "Wrong size on FServerDataUnmanaged");
static_assert(offsetof(FServerDataUnmanaged, Data) == 0x000000, "Member 'FServerDataUnmanaged::Data' has a wrong offset!");

// ScriptStruct Hydra5.ServerData
// 0x0048 (0x0048 - 0x0000)
struct FServerData final
{
public:
	bool                                          IsManaged;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FServerDataUnmanaged                   ServerDataUnmanaged;                               // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FServerDataManaged                     ServerDataManaged;                                 // 0x0018(0x0030)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerData) == 0x000008, "Wrong alignment on FServerData");
static_assert(sizeof(FServerData) == 0x000048, "Wrong size on FServerData");
static_assert(offsetof(FServerData, IsManaged) == 0x000000, "Member 'FServerData::IsManaged' has a wrong offset!");
static_assert(offsetof(FServerData, ServerDataUnmanaged) == 0x000008, "Member 'FServerData::ServerDataUnmanaged' has a wrong offset!");
static_assert(offsetof(FServerData, ServerDataManaged) == 0x000018, "Member 'FServerData::ServerDataManaged' has a wrong offset!");

// ScriptStruct Hydra5.ServerContextData
// 0x0010 (0x0010 - 0x0000)
struct FServerContextData final
{
public:
	TArray<uint8>                                 Data;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FServerContextData) == 0x000008, "Wrong alignment on FServerContextData");
static_assert(sizeof(FServerContextData) == 0x000010, "Wrong size on FServerContextData");
static_assert(offsetof(FServerContextData, Data) == 0x000000, "Member 'FServerContextData::Data' has a wrong offset!");

// ScriptStruct Hydra5.ServerCreateOnceOptions
// 0x0048 (0x0048 - 0x0000)
struct FServerCreateOnceOptions final
{
public:
	class FString                                 TitleSecret;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPluginVersioned>               Plugins;                                           // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 DsmEndPoint;                                       // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DsmIsSecure;                                       // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x17];                                      // 0x0031(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerCreateOnceOptions) == 0x000008, "Wrong alignment on FServerCreateOnceOptions");
static_assert(sizeof(FServerCreateOnceOptions) == 0x000048, "Wrong size on FServerCreateOnceOptions");
static_assert(offsetof(FServerCreateOnceOptions, TitleSecret) == 0x000000, "Member 'FServerCreateOnceOptions::TitleSecret' has a wrong offset!");
static_assert(offsetof(FServerCreateOnceOptions, Plugins) == 0x000010, "Member 'FServerCreateOnceOptions::Plugins' has a wrong offset!");
static_assert(offsetof(FServerCreateOnceOptions, DsmEndPoint) == 0x000020, "Member 'FServerCreateOnceOptions::DsmEndPoint' has a wrong offset!");
static_assert(offsetof(FServerCreateOnceOptions, DsmIsSecure) == 0x000030, "Member 'FServerCreateOnceOptions::DsmIsSecure' has a wrong offset!");

// ScriptStruct Hydra5.ServerHeatedOptions
// 0x0020 (0x0020 - 0x0000)
struct FServerHeatedOptions final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FServerHeatedOptions) == 0x000008, "Wrong alignment on FServerHeatedOptions");
static_assert(sizeof(FServerHeatedOptions) == 0x000020, "Wrong size on FServerHeatedOptions");
static_assert(offsetof(FServerHeatedOptions, ID) == 0x000000, "Member 'FServerHeatedOptions::ID' has a wrong offset!");

// ScriptStruct Hydra5.HeatdDedicatedServerCommandLineArguments
// 0x0070 (0x0070 - 0x0000)
struct FHeatdDedicatedServerCommandLineArguments final
{
public:
	class FString                                 PublicIpAddress;                                   // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PublicIpAddressV6;                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FileLogsDirectory;                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UDPPortRange;                                      // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerID;                                          // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GRPCEndpoint;                                      // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildVersion;                                      // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeatdDedicatedServerCommandLineArguments) == 0x000008, "Wrong alignment on FHeatdDedicatedServerCommandLineArguments");
static_assert(sizeof(FHeatdDedicatedServerCommandLineArguments) == 0x000070, "Wrong size on FHeatdDedicatedServerCommandLineArguments");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, PublicIpAddress) == 0x000000, "Member 'FHeatdDedicatedServerCommandLineArguments::PublicIpAddress' has a wrong offset!");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, PublicIpAddressV6) == 0x000010, "Member 'FHeatdDedicatedServerCommandLineArguments::PublicIpAddressV6' has a wrong offset!");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, FileLogsDirectory) == 0x000020, "Member 'FHeatdDedicatedServerCommandLineArguments::FileLogsDirectory' has a wrong offset!");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, UDPPortRange) == 0x000030, "Member 'FHeatdDedicatedServerCommandLineArguments::UDPPortRange' has a wrong offset!");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, ServerID) == 0x000040, "Member 'FHeatdDedicatedServerCommandLineArguments::ServerID' has a wrong offset!");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, GRPCEndpoint) == 0x000050, "Member 'FHeatdDedicatedServerCommandLineArguments::GRPCEndpoint' has a wrong offset!");
static_assert(offsetof(FHeatdDedicatedServerCommandLineArguments, BuildVersion) == 0x000060, "Member 'FHeatdDedicatedServerCommandLineArguments::BuildVersion' has a wrong offset!");

// ScriptStruct Hydra5.SignalingEvent
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSignalingEvent final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSignalingEvent) == 0x000008, "Wrong alignment on FSignalingEvent");
static_assert(sizeof(FSignalingEvent) == 0x000030, "Wrong size on FSignalingEvent");

// ScriptStruct Hydra5.SignalingSendResult
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FSignalingSendResult final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSignalingSendResult) == 0x000008, "Wrong alignment on FSignalingSendResult");
static_assert(sizeof(FSignalingSendResult) == 0x000018, "Wrong size on FSignalingSendResult");

// ScriptStruct Hydra5.SignalingHandler
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSignalingHandler final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSignalingHandler) == 0x000008, "Wrong alignment on FSignalingHandler");
static_assert(sizeof(FSignalingHandler) == 0x000008, "Wrong size on FSignalingHandler");

// ScriptStruct Hydra5.SignalingHandlerCreateResult
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSignalingHandlerCreateResult final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSignalingHandlerCreateResult) == 0x000008, "Wrong alignment on FSignalingHandlerCreateResult");
static_assert(sizeof(FSignalingHandlerCreateResult) == 0x000010, "Wrong size on FSignalingHandlerCreateResult");

// ScriptStruct Hydra5.TurnConnectionManual
// 0x0028 (0x0028 - 0x0000)
struct FTurnConnectionManual final
{
public:
	EHydra5TurnConnectionUsage                    Usage;                                             // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DataCenterId;                                      // 0x0008(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurnConnectionManual) == 0x000008, "Wrong alignment on FTurnConnectionManual");
static_assert(sizeof(FTurnConnectionManual) == 0x000028, "Wrong size on FTurnConnectionManual");
static_assert(offsetof(FTurnConnectionManual, Usage) == 0x000000, "Member 'FTurnConnectionManual::Usage' has a wrong offset!");
static_assert(offsetof(FTurnConnectionManual, DataCenterId) == 0x000008, "Member 'FTurnConnectionManual::DataCenterId' has a wrong offset!");

// ScriptStruct Hydra5.MemoryStatusResult
// 0x0018 (0x0018 - 0x0000)
struct FMemoryStatusResult final
{
public:
	int64                                         AllocationsCount;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AllocationsSizeBytes;                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         MaxMemoryUsageBytes;                               // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMemoryStatusResult) == 0x000008, "Wrong alignment on FMemoryStatusResult");
static_assert(sizeof(FMemoryStatusResult) == 0x000018, "Wrong size on FMemoryStatusResult");
static_assert(offsetof(FMemoryStatusResult, AllocationsCount) == 0x000000, "Member 'FMemoryStatusResult::AllocationsCount' has a wrong offset!");
static_assert(offsetof(FMemoryStatusResult, AllocationsSizeBytes) == 0x000008, "Member 'FMemoryStatusResult::AllocationsSizeBytes' has a wrong offset!");
static_assert(offsetof(FMemoryStatusResult, MaxMemoryUsageBytes) == 0x000010, "Member 'FMemoryStatusResult::MaxMemoryUsageBytes' has a wrong offset!");

}

