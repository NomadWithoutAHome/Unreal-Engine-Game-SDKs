#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FogOfWar

#include "Basic.hpp"

#include "NubCore_structs.hpp"


namespace SDK
{

// Enum FogOfWar.EFogOfWarInitMode
// NumValues: 0x0005
enum class EFogOfWarInitMode : uint8
{
	Default                                  = 0,
	VisibleTerrain                           = 1,
	VisibleAll                               = 2,
	Disabled                                 = 3,
	EFogOfWarInitMode_MAX                    = 4,
};

// Enum FogOfWar.EFogOfWarRenderOptions
// NumValues: 0x0005
enum class EFogOfWarRenderOptions : uint8
{
	None                                     = 0,
	Permanent                                = 1,
	Temporary                                = 2,
	Full                                     = 3,
	EFogOfWarRenderOptions_MAX               = 4,
};

// Enum FogOfWar.EFogOfWarRenderSize
// NumValues: 0x0004
enum class EFogOfWarRenderSize : uint8
{
	FullSize                                 = 0,
	HalfSize                                 = 1,
	QuarterSize                              = 2,
	EFogOfWarRenderSize_MAX                  = 3,
};

// ScriptStruct FogOfWar.FogOfWarVisibility
// 0x0018 (0x0028 - 0x0010)
struct FFogOfWarVisibility : public FOwnedStruct
{
public:
	uint8                                         Pad_10[0xC];                                       // 0x0010(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDefaultGameplayVisibility;                        // 0x001C(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMasterVisibility;                                 // 0x001D(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E[0xA];                                       // 0x001E(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFogOfWarVisibility) == 0x000008, "Wrong alignment on FFogOfWarVisibility");
static_assert(sizeof(FFogOfWarVisibility) == 0x000028, "Wrong size on FFogOfWarVisibility");
static_assert(offsetof(FFogOfWarVisibility, bDefaultGameplayVisibility) == 0x00001C, "Member 'FFogOfWarVisibility::bDefaultGameplayVisibility' has a wrong offset!");
static_assert(offsetof(FFogOfWarVisibility, bMasterVisibility) == 0x00001D, "Member 'FFogOfWarVisibility::bMasterVisibility' has a wrong offset!");

// ScriptStruct FogOfWar.FogOfWarPingPongRT
// 0x0018 (0x0018 - 0x0000)
struct FFogOfWarPingPongRT final
{
public:
	class UTextureRenderTarget2D*                 PingRT;                                            // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PongRT;                                            // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10[0x8];                                       // 0x0010(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFogOfWarPingPongRT) == 0x000008, "Wrong alignment on FFogOfWarPingPongRT");
static_assert(sizeof(FFogOfWarPingPongRT) == 0x000018, "Wrong size on FFogOfWarPingPongRT");
static_assert(offsetof(FFogOfWarPingPongRT, PingRT) == 0x000000, "Member 'FFogOfWarPingPongRT::PingRT' has a wrong offset!");
static_assert(offsetof(FFogOfWarPingPongRT, PongRT) == 0x000008, "Member 'FFogOfWarPingPongRT::PongRT' has a wrong offset!");

// ScriptStruct FogOfWar.FogOfWarRenderTarget
// 0x0038 (0x0038 - 0x0000)
struct FFogOfWarRenderTarget final
{
public:
	EFogOfWarRenderOptions                        RenderOptions;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFogOfWarRenderSize                           RenderSize;                                        // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFogOfWarPingPongRT                    PingPongRT;                                        // 0x0008(0x0018)(Edit, DisableEditOnTemplate, Transient, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PreviousRenderTarget;                              // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 FinalRenderTarget;                                 // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendAlpha;                                        // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFogOfWarRenderTarget) == 0x000008, "Wrong alignment on FFogOfWarRenderTarget");
static_assert(sizeof(FFogOfWarRenderTarget) == 0x000038, "Wrong size on FFogOfWarRenderTarget");
static_assert(offsetof(FFogOfWarRenderTarget, RenderOptions) == 0x000000, "Member 'FFogOfWarRenderTarget::RenderOptions' has a wrong offset!");
static_assert(offsetof(FFogOfWarRenderTarget, RenderSize) == 0x000001, "Member 'FFogOfWarRenderTarget::RenderSize' has a wrong offset!");
static_assert(offsetof(FFogOfWarRenderTarget, PingPongRT) == 0x000008, "Member 'FFogOfWarRenderTarget::PingPongRT' has a wrong offset!");
static_assert(offsetof(FFogOfWarRenderTarget, PreviousRenderTarget) == 0x000020, "Member 'FFogOfWarRenderTarget::PreviousRenderTarget' has a wrong offset!");
static_assert(offsetof(FFogOfWarRenderTarget, FinalRenderTarget) == 0x000028, "Member 'FFogOfWarRenderTarget::FinalRenderTarget' has a wrong offset!");
static_assert(offsetof(FFogOfWarRenderTarget, BlendAlpha) == 0x000030, "Member 'FFogOfWarRenderTarget::BlendAlpha' has a wrong offset!");

// ScriptStruct FogOfWar.FogOfWarAgentData
// 0x0028 (0x0028 - 0x0000)
struct FFogOfWarAgentData final
{
public:
	float                                         AgentRadius;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RevealRadius;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VisionRadius;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 ChannelIds;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, SaveGame, NativeAccessSpecifierPublic)
	uint8                                         bCheckFieldOfViewForVision : 1;                    // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCalculateVisibility : 1;                          // 0x0020(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCalculateVisibilityWhenRegistering : 1;           // 0x0020(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFogOfWarAgentData) == 0x000008, "Wrong alignment on FFogOfWarAgentData");
static_assert(sizeof(FFogOfWarAgentData) == 0x000028, "Wrong size on FFogOfWarAgentData");
static_assert(offsetof(FFogOfWarAgentData, AgentRadius) == 0x000000, "Member 'FFogOfWarAgentData::AgentRadius' has a wrong offset!");
static_assert(offsetof(FFogOfWarAgentData, RevealRadius) == 0x000004, "Member 'FFogOfWarAgentData::RevealRadius' has a wrong offset!");
static_assert(offsetof(FFogOfWarAgentData, VisionRadius) == 0x000008, "Member 'FFogOfWarAgentData::VisionRadius' has a wrong offset!");
static_assert(offsetof(FFogOfWarAgentData, ChannelIds) == 0x000010, "Member 'FFogOfWarAgentData::ChannelIds' has a wrong offset!");

}

