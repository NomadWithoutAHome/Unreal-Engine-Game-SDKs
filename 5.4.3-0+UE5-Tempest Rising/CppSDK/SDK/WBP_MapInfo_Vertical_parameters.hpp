#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MapInfo_Vertical

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "Tempest_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.UpdatePlayerStarts
// 0x0198 (0x0198 - 0x0000)
struct WBP_MapInfo_Vertical_C_UpdatePlayerStarts final
{
public:
	class UTedMapInfo*                            InMapInfo;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWBP_GlowingWidget_Text_Core_C*         CurrentPlayerStartWidget;                          // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetMinimap_ReturnValue;                   // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_GlowingWidget_Text_Core_C*         CallFunc_Array_Get_Item;                           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTedPlayerSlot>                 CallFunc_GetHumanPlayerSlots_OutSlots;             // 0x0048(0x0010)(ReferenceParm)
	bool                                          CallFunc_GetHumanPlayerSlots_ReturnValue;          // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_IsValidIndex_ReturnValue;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Conv_ByteToInt_ReturnValue;               // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_GetMinimap_ReturnValue_1;                 // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0080(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00D8(0x0010)()
	struct FBox                                   CallFunc_GetCachedWorldBounds_ReturnValue;         // 0x00E8(0x0038)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0120(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0158(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_CalculateMinimapLocation_OutResult;       // 0x0168(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0188(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts) == 0x000008, "Wrong alignment on WBP_MapInfo_Vertical_C_UpdatePlayerStarts");
static_assert(sizeof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts) == 0x000198, "Wrong size on WBP_MapInfo_Vertical_C_UpdatePlayerStarts");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, InMapInfo) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::InMapInfo' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CurrentPlayerStartWidget) == 0x000008, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CurrentPlayerStartWidget' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, Temp_int_Array_Index_Variable) == 0x000010, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetMinimap_ReturnValue) == 0x000018, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetMinimap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000028, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Add_IntInt_ReturnValue) == 0x000034, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Array_Get_Item) == 0x000038, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Array_Length_ReturnValue) == 0x000040, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Less_IntInt_ReturnValue) == 0x000044, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetHumanPlayerSlots_OutSlots) == 0x000048, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetHumanPlayerSlots_OutSlots' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetHumanPlayerSlots_ReturnValue) == 0x000058, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetHumanPlayerSlots_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Array_IsValidIndex_ReturnValue) == 0x000059, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Array_IsValidIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Conv_ByteToInt_ReturnValue) == 0x00005C, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Conv_ByteToInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Add_IntInt_ReturnValue_1) == 0x000060, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetMinimap_ReturnValue_1) == 0x000068, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetMinimap_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000070, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_IsValid_ReturnValue_1) == 0x000078, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, K2Node_MakeStruct_FormatArgumentData) == 0x000080, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, K2Node_MakeArray_Array) == 0x0000C8, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_Format_ReturnValue) == 0x0000D8, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetCachedWorldBounds_ReturnValue) == 0x0000E8, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetCachedWorldBounds_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetCachedGeometry_ReturnValue) == 0x000120, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_GetLocalSize_ReturnValue) == 0x000158, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_CalculateMinimapLocation_OutResult) == 0x000168, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_CalculateMinimapLocation_OutResult' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_BreakVector2D_X) == 0x000178, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_BreakVector2D_Y) == 0x000180, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_UpdatePlayerStarts, CallFunc_MakeVector2D_ReturnValue) == 0x000188, "Member 'WBP_MapInfo_Vertical_C_UpdatePlayerStarts::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_MapInfo_Vertical_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_Tick) == 0x000004, "Wrong alignment on WBP_MapInfo_Vertical_C_Tick");
static_assert(sizeof(WBP_MapInfo_Vertical_C_Tick) == 0x00003C, "Wrong size on WBP_MapInfo_Vertical_C_Tick");
static_assert(offsetof(WBP_MapInfo_Vertical_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_MapInfo_Vertical_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.SetShowMapName
// 0x0005 (0x0005 - 0x0000)
struct WBP_MapInfo_Vertical_C_SetShowMapName final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_SetShowMapName) == 0x000001, "Wrong alignment on WBP_MapInfo_Vertical_C_SetShowMapName");
static_assert(sizeof(WBP_MapInfo_Vertical_C_SetShowMapName) == 0x000005, "Wrong size on WBP_MapInfo_Vertical_C_SetShowMapName");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapName, bInShow) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_SetShowMapName::bInShow' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapName, Temp_bool_Variable) == 0x000001, "Member 'WBP_MapInfo_Vertical_C_SetShowMapName::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapName, Temp_byte_Variable) == 0x000002, "Member 'WBP_MapInfo_Vertical_C_SetShowMapName::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapName, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_MapInfo_Vertical_C_SetShowMapName::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapName, K2Node_Select_Default) == 0x000004, "Member 'WBP_MapInfo_Vertical_C_SetShowMapName::K2Node_Select_Default' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.SetShowMapLocation
// 0x0005 (0x0005 - 0x0000)
struct WBP_MapInfo_Vertical_C_SetShowMapLocation final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_SetShowMapLocation) == 0x000001, "Wrong alignment on WBP_MapInfo_Vertical_C_SetShowMapLocation");
static_assert(sizeof(WBP_MapInfo_Vertical_C_SetShowMapLocation) == 0x000005, "Wrong size on WBP_MapInfo_Vertical_C_SetShowMapLocation");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapLocation, bInShow) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_SetShowMapLocation::bInShow' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapLocation, Temp_bool_Variable) == 0x000001, "Member 'WBP_MapInfo_Vertical_C_SetShowMapLocation::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapLocation, Temp_byte_Variable) == 0x000002, "Member 'WBP_MapInfo_Vertical_C_SetShowMapLocation::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapLocation, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_MapInfo_Vertical_C_SetShowMapLocation::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapLocation, K2Node_Select_Default) == 0x000004, "Member 'WBP_MapInfo_Vertical_C_SetShowMapLocation::K2Node_Select_Default' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.SetShowMapDescription
// 0x0005 (0x0005 - 0x0000)
struct WBP_MapInfo_Vertical_C_SetShowMapDescription final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_SetShowMapDescription) == 0x000001, "Wrong alignment on WBP_MapInfo_Vertical_C_SetShowMapDescription");
static_assert(sizeof(WBP_MapInfo_Vertical_C_SetShowMapDescription) == 0x000005, "Wrong size on WBP_MapInfo_Vertical_C_SetShowMapDescription");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapDescription, bInShow) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_SetShowMapDescription::bInShow' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapDescription, Temp_bool_Variable) == 0x000001, "Member 'WBP_MapInfo_Vertical_C_SetShowMapDescription::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapDescription, Temp_byte_Variable) == 0x000002, "Member 'WBP_MapInfo_Vertical_C_SetShowMapDescription::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapDescription, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_MapInfo_Vertical_C_SetShowMapDescription::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowMapDescription, K2Node_Select_Default) == 0x000004, "Member 'WBP_MapInfo_Vertical_C_SetShowMapDescription::K2Node_Select_Default' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.SetShowDisplayFrame
// 0x0040 (0x0040 - 0x0000)
struct WBP_MapInfo_Vertical_C_SetShowDisplayFrame final
{
public:
	bool                                          bInShow;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UOverlaySlot*                           CallFunc_SlotAsOverlaySlot_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FMargin                                K2Node_Select_Default_1;                           // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame) == 0x000008, "Wrong alignment on WBP_MapInfo_Vertical_C_SetShowDisplayFrame");
static_assert(sizeof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame) == 0x000040, "Wrong size on WBP_MapInfo_Vertical_C_SetShowDisplayFrame");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, bInShow) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::bInShow' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, Temp_bool_Variable) == 0x000001, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, Temp_byte_Variable) == 0x000002, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, Temp_byte_Variable_1) == 0x000003, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, K2Node_MakeStruct_Margin) == 0x000004, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, K2Node_MakeStruct_Margin_1) == 0x000014, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, K2Node_Select_Default) == 0x000024, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, Temp_bool_Variable_1) == 0x000025, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, CallFunc_SlotAsOverlaySlot_ReturnValue) == 0x000028, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::CallFunc_SlotAsOverlaySlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetShowDisplayFrame, K2Node_Select_Default_1) == 0x000030, "Member 'WBP_MapInfo_Vertical_C_SetShowDisplayFrame::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.SetMapInfoVisibility
// 0x0001 (0x0001 - 0x0000)
struct WBP_MapInfo_Vertical_C_SetMapInfoVisibility final
{
public:
	bool                                          NewVisibility;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_SetMapInfoVisibility) == 0x000001, "Wrong alignment on WBP_MapInfo_Vertical_C_SetMapInfoVisibility");
static_assert(sizeof(WBP_MapInfo_Vertical_C_SetMapInfoVisibility) == 0x000001, "Wrong size on WBP_MapInfo_Vertical_C_SetMapInfoVisibility");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfoVisibility, NewVisibility) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_SetMapInfoVisibility::NewVisibility' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.SetMapInfo
// 0x0048 (0x0048 - 0x0000)
struct WBP_MapInfo_Vertical_C_SetMapInfo final
{
public:
	class UTedMapInfo*                            InMapInfo;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_GetLocation_ReturnValue;                  // 0x0010(0x0010)(ConstParm)
	class FText                                   CallFunc_GetDisplayName_ReturnValue;               // 0x0020(0x0010)(ConstParm)
	class UTexture2D*                             CallFunc_GetMinimap_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FText                                   CallFunc_GetDescription_ReturnValue;               // 0x0038(0x0010)(ConstParm)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_SetMapInfo) == 0x000008, "Wrong alignment on WBP_MapInfo_Vertical_C_SetMapInfo");
static_assert(sizeof(WBP_MapInfo_Vertical_C_SetMapInfo) == 0x000048, "Wrong size on WBP_MapInfo_Vertical_C_SetMapInfo");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfo, InMapInfo) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_SetMapInfo::InMapInfo' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfo, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_MapInfo_Vertical_C_SetMapInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfo, CallFunc_GetLocation_ReturnValue) == 0x000010, "Member 'WBP_MapInfo_Vertical_C_SetMapInfo::CallFunc_GetLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfo, CallFunc_GetDisplayName_ReturnValue) == 0x000020, "Member 'WBP_MapInfo_Vertical_C_SetMapInfo::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfo, CallFunc_GetMinimap_ReturnValue) == 0x000030, "Member 'WBP_MapInfo_Vertical_C_SetMapInfo::CallFunc_GetMinimap_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_SetMapInfo, CallFunc_GetDescription_ReturnValue) == 0x000038, "Member 'WBP_MapInfo_Vertical_C_SetMapInfo::CallFunc_GetDescription_ReturnValue' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_MapInfo_Vertical_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_MapInfo_Vertical_C_PreConstruct");
static_assert(sizeof(WBP_MapInfo_Vertical_C_PreConstruct) == 0x000001, "Wrong size on WBP_MapInfo_Vertical_C_PreConstruct");
static_assert(offsetof(WBP_MapInfo_Vertical_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.ExecuteUbergraph_WBP_MapInfo_Vertical
// 0x0050 (0x0050 - 0x0000)
struct WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Has_Been_Initd_Variable;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0008(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsClosed_Variable;                       // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable; // 0x0047(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewVisibility;                  // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x004A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x004B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x004C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical) == 0x000004, "Wrong alignment on WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical");
static_assert(sizeof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical) == 0x000050, "Wrong size on WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, EntryPoint) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, Temp_bool_Has_Been_Initd_Variable) == 0x000004, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::Temp_bool_Has_Been_Initd_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, Temp_bool_Variable) == 0x000005, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, K2Node_Event_IsDesignTime) == 0x000006, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, K2Node_Event_MyGeometry) == 0x000008, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, K2Node_Event_InDeltaTime) == 0x000040, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::K2Node_Event_InDeltaTime' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, Temp_byte_Variable) == 0x000044, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, Temp_bool_IsClosed_Variable) == 0x000045, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::Temp_bool_IsClosed_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, CallFunc_IsValid_ReturnValue) == 0x000046, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable) == 0x000047, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::Temp_bool_Whether_the_gate_is_currently_open_or_close_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, CallFunc_IsValid_ReturnValue_1) == 0x000048, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, K2Node_CustomEvent_NewVisibility) == 0x000049, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::K2Node_CustomEvent_NewVisibility' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, CallFunc_BooleanAND_ReturnValue) == 0x00004A, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, Temp_byte_Variable_1) == 0x00004B, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical, K2Node_Select_Default) == 0x00004C, "Member 'WBP_MapInfo_Vertical_C_ExecuteUbergraph_WBP_MapInfo_Vertical::K2Node_Select_Default' has a wrong offset!");

// Function WBP_MapInfo_Vertical.WBP_MapInfo_Vertical_C.CachePlayerStartWidgets
// 0x0048 (0x0048 - 0x0000)
struct WBP_MapInfo_Vertical_C_CachePlayerStartWidgets final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_GlowingWidget_Text_Core_C*         K2Node_DynamicCast_AsWBP_Glowing_Widget_Text_Core; // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets) == 0x000008, "Wrong alignment on WBP_MapInfo_Vertical_C_CachePlayerStartWidgets");
static_assert(sizeof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets) == 0x000048, "Wrong size on WBP_MapInfo_Vertical_C_CachePlayerStartWidgets");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, Temp_int_Array_Index_Variable) == 0x000000, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, CallFunc_GetAllChildren_ReturnValue) == 0x000010, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, CallFunc_Array_Get_Item) == 0x000028, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, K2Node_DynamicCast_AsWBP_Glowing_Widget_Text_Core) == 0x000038, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::K2Node_DynamicCast_AsWBP_Glowing_Widget_Text_Core' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_MapInfo_Vertical_C_CachePlayerStartWidgets, CallFunc_Array_Add_ReturnValue) == 0x000044, "Member 'WBP_MapInfo_Vertical_C_CachePlayerStartWidgets::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

}

