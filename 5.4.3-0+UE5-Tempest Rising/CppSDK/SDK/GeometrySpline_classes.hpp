#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GeometrySpline

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "GeometrySpline_structs.hpp"


namespace SDK
{

// Class GeometrySpline.GeometrySpline
// 0x0058 (0x02E8 - 0x0290)
class AGeometrySpline final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGeometrySplineComponent*               SplineComp;                                        // 0x0298(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGeometrySplineCollisionComponent*      VolumeCollisionComp;                               // 0x02A0(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGeometrySplineCollisionComponent*      SurfaceCollisionComp;                              // 0x02A8(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGenerateVolumeCollision;                          // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGenerateSurfaceCollision;                         // 0x02B1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B2[0x2];                                      // 0x02B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumeColisionDepth;                               // 0x02B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VolumeCollisionOffset;                             // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SurfaceCollisionScale;                             // 0x02BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SurfaceCollisionDepth;                             // 0x02C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SurfaceCollisionOffset;                            // 0x02C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   VolumeCollisionProfileName;                        // 0x02C8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SurfaceCollisionProfileName;                       // 0x02D0(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UNavArea>                   NavAreaClass;                                      // 0x02D8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanVolumeAffectNavigation;                        // 0x02E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSurfaceAffectNavigation;                       // 0x02E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActAsNavModifierOnly;                             // 0x02E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFillCollisionUnderneathForNavmesh;                // 0x02E3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E4[0x4];                                      // 0x02E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetNavAreaClass(TSubclassOf<class UNavArea> NavAreaClass_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometrySpline">();
	}
	static class AGeometrySpline* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometrySpline>();
	}
};
static_assert(alignof(AGeometrySpline) == 0x000008, "Wrong alignment on AGeometrySpline");
static_assert(sizeof(AGeometrySpline) == 0x0002E8, "Wrong size on AGeometrySpline");
static_assert(offsetof(AGeometrySpline, SplineComp) == 0x000298, "Member 'AGeometrySpline::SplineComp' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, VolumeCollisionComp) == 0x0002A0, "Member 'AGeometrySpline::VolumeCollisionComp' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, SurfaceCollisionComp) == 0x0002A8, "Member 'AGeometrySpline::SurfaceCollisionComp' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, bGenerateVolumeCollision) == 0x0002B0, "Member 'AGeometrySpline::bGenerateVolumeCollision' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, bGenerateSurfaceCollision) == 0x0002B1, "Member 'AGeometrySpline::bGenerateSurfaceCollision' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, VolumeColisionDepth) == 0x0002B4, "Member 'AGeometrySpline::VolumeColisionDepth' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, VolumeCollisionOffset) == 0x0002B8, "Member 'AGeometrySpline::VolumeCollisionOffset' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, SurfaceCollisionScale) == 0x0002BC, "Member 'AGeometrySpline::SurfaceCollisionScale' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, SurfaceCollisionDepth) == 0x0002C0, "Member 'AGeometrySpline::SurfaceCollisionDepth' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, SurfaceCollisionOffset) == 0x0002C4, "Member 'AGeometrySpline::SurfaceCollisionOffset' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, VolumeCollisionProfileName) == 0x0002C8, "Member 'AGeometrySpline::VolumeCollisionProfileName' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, SurfaceCollisionProfileName) == 0x0002D0, "Member 'AGeometrySpline::SurfaceCollisionProfileName' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, NavAreaClass) == 0x0002D8, "Member 'AGeometrySpline::NavAreaClass' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, bCanVolumeAffectNavigation) == 0x0002E0, "Member 'AGeometrySpline::bCanVolumeAffectNavigation' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, bCanSurfaceAffectNavigation) == 0x0002E1, "Member 'AGeometrySpline::bCanSurfaceAffectNavigation' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, bActAsNavModifierOnly) == 0x0002E2, "Member 'AGeometrySpline::bActAsNavModifierOnly' has a wrong offset!");
static_assert(offsetof(AGeometrySpline, bFillCollisionUnderneathForNavmesh) == 0x0002E3, "Member 'AGeometrySpline::bFillCollisionUnderneathForNavmesh' has a wrong offset!");

// Class GeometrySpline.GeometrySplineCollisionComponent
// 0x0020 (0x0550 - 0x0530)
class UGeometrySplineCollisionComponent final : public UPrimitiveComponent
{
public:
	class UBodySetup*                             CachedBodySetup;                                   // 0x0528(0x0008)(ZeroConstructor, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                BoxExtent;                                         // 0x0530(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EGeometrySplineCollisionType                  CollisionType;                                     // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_549[0x7];                                      // 0x0549(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometrySplineCollisionComponent">();
	}
	static class UGeometrySplineCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometrySplineCollisionComponent>();
	}
};
static_assert(alignof(UGeometrySplineCollisionComponent) == 0x000010, "Wrong alignment on UGeometrySplineCollisionComponent");
static_assert(sizeof(UGeometrySplineCollisionComponent) == 0x000550, "Wrong size on UGeometrySplineCollisionComponent");
static_assert(offsetof(UGeometrySplineCollisionComponent, CachedBodySetup) == 0x000528, "Member 'UGeometrySplineCollisionComponent::CachedBodySetup' has a wrong offset!");
static_assert(offsetof(UGeometrySplineCollisionComponent, BoxExtent) == 0x000530, "Member 'UGeometrySplineCollisionComponent::BoxExtent' has a wrong offset!");
static_assert(offsetof(UGeometrySplineCollisionComponent, CollisionType) == 0x000548, "Member 'UGeometrySplineCollisionComponent::CollisionType' has a wrong offset!");

// Class GeometrySpline.GeometrySplineComponent
// 0x0000 (0x0630 - 0x0630)
class UGeometrySplineComponent final : public USplineComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometrySplineComponent">();
	}
	static class UGeometrySplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeometrySplineComponent>();
	}
};
static_assert(alignof(UGeometrySplineComponent) == 0x000010, "Wrong alignment on UGeometrySplineComponent");
static_assert(sizeof(UGeometrySplineComponent) == 0x000630, "Wrong size on UGeometrySplineComponent");

// Class GeometrySpline.GeometrySplineExclusion
// 0x0000 (0x0290 - 0x0290)
class AGeometrySplineExclusion final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeometrySplineExclusion">();
	}
	static class AGeometrySplineExclusion* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGeometrySplineExclusion>();
	}
};
static_assert(alignof(AGeometrySplineExclusion) == 0x000008, "Wrong alignment on AGeometrySplineExclusion");
static_assert(sizeof(AGeometrySplineExclusion) == 0x000290, "Wrong size on AGeometrySplineExclusion");

}

