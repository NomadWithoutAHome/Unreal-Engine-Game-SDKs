#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FogOfWar

#include "Basic.hpp"

#include "FogOfWar_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class FogOfWar.FogOfWarActor
// 0x01A8 (0x0438 - 0x0290)
class AFogOfWarActor : public AActor
{
public:
	uint8                                         Pad_290[0x58];                                     // 0x0290(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     FOWMaterial;                                       // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CombineMaterial;                                   // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CopyMaterial;                                      // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     BlurMaterial;                                      // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     BlendMaterial;                                     // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             SourceMaskOutput_Permanent;                        // 0x0310(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             SourceMaskOutput_Temporar;                         // 0x0318(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             MaskOutput_Permanent;                              // 0x0320(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             MaskOutput_Temporar;                               // 0x0328(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             MaskOutput_ForcedPermanent;                        // 0x0330(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTexture2D*                             DebugTerrainTexture;                               // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FFogOfWarRenderTarget>          RenderTargets;                                     // 0x0340(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	float                                         TextureBlendRate;                                  // 0x0350(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnforceTextureBlendComplete;                      // 0x0354(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPerformBlur;                                      // 0x0355(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_356[0x2];                                      // 0x0356(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 KawaseKernel;                                      // 0x0358(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	bool                                          bPerformKawaseBlur_ForcedPermanent;                // 0x0368(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 KawaseKernel_ForcedPermanent;                      // 0x0370(0x0010)(Edit, ZeroConstructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	float                                         ForcedPermanentBlurKernel;                         // 0x0380(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpscaleBuffers;                                   // 0x0384(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_385[0x3];                                      // 0x0385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnexploredAreaColor;                               // 0x0388(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InvisibleAreaColor;                                // 0x038C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FogOfWarAlphaLerpSpeed;                            // 0x0390(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFogOfWarManager*                       OwningManager;                                     // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SourceMaskSize;                                    // 0x03A0(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SourceBufferSize;                                  // 0x03A4(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              SourceWBounds;                                     // 0x03A8(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FIntPoint                              SourceHBounds;                                     // 0x03B0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetMaskSize;                                    // 0x03B8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TargetBufferSize;                                  // 0x03BC(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TexelSize;                                         // 0x03C0(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C4[0x4];                                      // 0x03C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FOWRegionCenter;                                   // 0x03C8(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              FOWRegionSize;                                     // 0x03E0(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDebugTerrainBuffer;                               // 0x03F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F1[0x7];                                      // 0x03F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               FogOfWarMID;                                       // 0x03F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               CombineMID;                                        // 0x0400(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               CopyMID;                                           // 0x0408(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BlurMID;                                           // 0x0410(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               BlendMID;                                          // 0x0418(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPostProcessComponent*                  PPComponent;                                       // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428[0x10];                                     // 0x0428(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class AFogOfWarActor* K2_Get(const class UObject* WorldContextObject);

	void K2_SetTemporarilyUnfog(const class UObject* WorldContextObject, bool bUnfog);

	class UTextureRenderTarget2D* GetFogOfWarTexture() const;
	class UTextureRenderTarget2D* GetFogOfWarTextureNoPermanent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarActor">();
	}
	static class AFogOfWarActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFogOfWarActor>();
	}
};
static_assert(alignof(AFogOfWarActor) == 0x000008, "Wrong alignment on AFogOfWarActor");
static_assert(sizeof(AFogOfWarActor) == 0x000438, "Wrong size on AFogOfWarActor");
static_assert(offsetof(AFogOfWarActor, FOWMaterial) == 0x0002E8, "Member 'AFogOfWarActor::FOWMaterial' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, CombineMaterial) == 0x0002F0, "Member 'AFogOfWarActor::CombineMaterial' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, CopyMaterial) == 0x0002F8, "Member 'AFogOfWarActor::CopyMaterial' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, BlurMaterial) == 0x000300, "Member 'AFogOfWarActor::BlurMaterial' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, BlendMaterial) == 0x000308, "Member 'AFogOfWarActor::BlendMaterial' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, SourceMaskOutput_Permanent) == 0x000310, "Member 'AFogOfWarActor::SourceMaskOutput_Permanent' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, SourceMaskOutput_Temporar) == 0x000318, "Member 'AFogOfWarActor::SourceMaskOutput_Temporar' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, MaskOutput_Permanent) == 0x000320, "Member 'AFogOfWarActor::MaskOutput_Permanent' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, MaskOutput_Temporar) == 0x000328, "Member 'AFogOfWarActor::MaskOutput_Temporar' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, MaskOutput_ForcedPermanent) == 0x000330, "Member 'AFogOfWarActor::MaskOutput_ForcedPermanent' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, DebugTerrainTexture) == 0x000338, "Member 'AFogOfWarActor::DebugTerrainTexture' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, RenderTargets) == 0x000340, "Member 'AFogOfWarActor::RenderTargets' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, TextureBlendRate) == 0x000350, "Member 'AFogOfWarActor::TextureBlendRate' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, bEnforceTextureBlendComplete) == 0x000354, "Member 'AFogOfWarActor::bEnforceTextureBlendComplete' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, bPerformBlur) == 0x000355, "Member 'AFogOfWarActor::bPerformBlur' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, KawaseKernel) == 0x000358, "Member 'AFogOfWarActor::KawaseKernel' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, bPerformKawaseBlur_ForcedPermanent) == 0x000368, "Member 'AFogOfWarActor::bPerformKawaseBlur_ForcedPermanent' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, KawaseKernel_ForcedPermanent) == 0x000370, "Member 'AFogOfWarActor::KawaseKernel_ForcedPermanent' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, ForcedPermanentBlurKernel) == 0x000380, "Member 'AFogOfWarActor::ForcedPermanentBlurKernel' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, bUpscaleBuffers) == 0x000384, "Member 'AFogOfWarActor::bUpscaleBuffers' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, UnexploredAreaColor) == 0x000388, "Member 'AFogOfWarActor::UnexploredAreaColor' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, InvisibleAreaColor) == 0x00038C, "Member 'AFogOfWarActor::InvisibleAreaColor' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, FogOfWarAlphaLerpSpeed) == 0x000390, "Member 'AFogOfWarActor::FogOfWarAlphaLerpSpeed' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, OwningManager) == 0x000398, "Member 'AFogOfWarActor::OwningManager' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, SourceMaskSize) == 0x0003A0, "Member 'AFogOfWarActor::SourceMaskSize' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, SourceBufferSize) == 0x0003A4, "Member 'AFogOfWarActor::SourceBufferSize' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, SourceWBounds) == 0x0003A8, "Member 'AFogOfWarActor::SourceWBounds' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, SourceHBounds) == 0x0003B0, "Member 'AFogOfWarActor::SourceHBounds' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, TargetMaskSize) == 0x0003B8, "Member 'AFogOfWarActor::TargetMaskSize' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, TargetBufferSize) == 0x0003BC, "Member 'AFogOfWarActor::TargetBufferSize' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, TexelSize) == 0x0003C0, "Member 'AFogOfWarActor::TexelSize' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, FOWRegionCenter) == 0x0003C8, "Member 'AFogOfWarActor::FOWRegionCenter' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, FOWRegionSize) == 0x0003E0, "Member 'AFogOfWarActor::FOWRegionSize' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, bDebugTerrainBuffer) == 0x0003F0, "Member 'AFogOfWarActor::bDebugTerrainBuffer' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, FogOfWarMID) == 0x0003F8, "Member 'AFogOfWarActor::FogOfWarMID' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, CombineMID) == 0x000400, "Member 'AFogOfWarActor::CombineMID' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, CopyMID) == 0x000408, "Member 'AFogOfWarActor::CopyMID' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, BlurMID) == 0x000410, "Member 'AFogOfWarActor::BlurMID' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, BlendMID) == 0x000418, "Member 'AFogOfWarActor::BlendMID' has a wrong offset!");
static_assert(offsetof(AFogOfWarActor, PPComponent) == 0x000420, "Member 'AFogOfWarActor::PPComponent' has a wrong offset!");

// Class FogOfWar.FogOfWarAgentActor
// 0x0018 (0x02A8 - 0x0290)
class AFogOfWarAgentActor final : public AActor
{
public:
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ChannelId;                                         // 0x0298(0x0001)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RevealRadius;                                      // 0x029C(0x0004)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VisionRadius;                                      // 0x02A0(0x0004)(Edit, ZeroConstructor, SaveGame, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bStartEnabled : 1;                                 // 0x02A4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnTemplate, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bCheckFieldOfViewForVision : 1;                    // 0x02A4(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bEnabled : 1;                                      // 0x02A4(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (SaveGame, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2A5[0x3];                                      // 0x02A5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetChannelId(const uint8 InChannelId);
	void SetCheckFieldOfViewForVision(const float bInCheckFieldOfViewForVision);
	void SetEnabled(const bool bInEnabled);
	void SetRevealRadius(const float InRevealRadius);
	void SetVisionRadius(const float InVisionsRadius);

	uint8 GetChannelId() const;
	bool GetCheckFieldOfViewForVision() const;
	float GetRevealRadius() const;
	float GetVisionRadius() const;
	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarAgentActor">();
	}
	static class AFogOfWarAgentActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFogOfWarAgentActor>();
	}
};
static_assert(alignof(AFogOfWarAgentActor) == 0x000008, "Wrong alignment on AFogOfWarAgentActor");
static_assert(sizeof(AFogOfWarAgentActor) == 0x0002A8, "Wrong size on AFogOfWarAgentActor");
static_assert(offsetof(AFogOfWarAgentActor, ChannelId) == 0x000298, "Member 'AFogOfWarAgentActor::ChannelId' has a wrong offset!");
static_assert(offsetof(AFogOfWarAgentActor, RevealRadius) == 0x00029C, "Member 'AFogOfWarAgentActor::RevealRadius' has a wrong offset!");
static_assert(offsetof(AFogOfWarAgentActor, VisionRadius) == 0x0002A0, "Member 'AFogOfWarAgentActor::VisionRadius' has a wrong offset!");

// Class FogOfWar.FogOfWarAgentActorRenderingComponent
// 0x0000 (0x0530 - 0x0530)
class UFogOfWarAgentActorRenderingComponent final : public UPrimitiveComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarAgentActorRenderingComponent">();
	}
	static class UFogOfWarAgentActorRenderingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFogOfWarAgentActorRenderingComponent>();
	}
};
static_assert(alignof(UFogOfWarAgentActorRenderingComponent) == 0x000010, "Wrong alignment on UFogOfWarAgentActorRenderingComponent");
static_assert(sizeof(UFogOfWarAgentActorRenderingComponent) == 0x000530, "Wrong size on UFogOfWarAgentActorRenderingComponent");

// Class FogOfWar.FogOfWarAgentInterface
// 0x0000 (0x0000 - 0x0000)
class IFogOfWarAgentInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarAgentInterface">();
	}
	static class IFogOfWarAgentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFogOfWarAgentInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IFogOfWarAgentInterface) == 0x000001, "Wrong alignment on IFogOfWarAgentInterface");
static_assert(sizeof(IFogOfWarAgentInterface) == 0x000001, "Wrong size on IFogOfWarAgentInterface");

// Class FogOfWar.FogOfWarManager
// 0x01F8 (0x0228 - 0x0030)
class UFogOfWarManager : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AFogOfWarActor>             FogOfWarActorClass;                                // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DesiredTexelSize;                                  // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxTextureSizeXY;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<uint8>                                 PersistentBufferChannelBlackList;                  // 0x0048(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x58];                                      // 0x0058(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class AFogOfWarActor*                         FogOfWarActor;                                     // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x150];                                     // 0x00B8(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftClassPath                         ManagerClassName;                                  // 0x0208(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static bool K2_IsEnabled(const class UObject* WorldContextObject);
	static void K2_RegisterFogOfWarAgent(const class UObject* WorldContextObject, TScriptInterface<class IFogOfWarAgentInterface> Agent);
	static void K2_SetEnabled(const class UObject* WorldContextObject, bool bInEnabled);
	static void K2_UnregisterFogOfWarAgent(const class UObject* WorldContextObject, TScriptInterface<class IFogOfWarAgentInterface> Agent);

	bool K2_IsVisibleUnderFog(const uint8 ChannelId, const struct FVector& WorldLocation, const float Radius, const bool bFullyVisible) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarManager">();
	}
	static class UFogOfWarManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFogOfWarManager>();
	}
};
static_assert(alignof(UFogOfWarManager) == 0x000008, "Wrong alignment on UFogOfWarManager");
static_assert(sizeof(UFogOfWarManager) == 0x000228, "Wrong size on UFogOfWarManager");
static_assert(offsetof(UFogOfWarManager, FogOfWarActorClass) == 0x000038, "Member 'UFogOfWarManager::FogOfWarActorClass' has a wrong offset!");
static_assert(offsetof(UFogOfWarManager, DesiredTexelSize) == 0x000040, "Member 'UFogOfWarManager::DesiredTexelSize' has a wrong offset!");
static_assert(offsetof(UFogOfWarManager, MaxTextureSizeXY) == 0x000044, "Member 'UFogOfWarManager::MaxTextureSizeXY' has a wrong offset!");
static_assert(offsetof(UFogOfWarManager, PersistentBufferChannelBlackList) == 0x000048, "Member 'UFogOfWarManager::PersistentBufferChannelBlackList' has a wrong offset!");
static_assert(offsetof(UFogOfWarManager, FogOfWarActor) == 0x0000B0, "Member 'UFogOfWarManager::FogOfWarActor' has a wrong offset!");
static_assert(offsetof(UFogOfWarManager, ManagerClassName) == 0x000208, "Member 'UFogOfWarManager::ManagerClassName' has a wrong offset!");

// Class FogOfWar.FogOfWarVisibilityAgentInterface
// 0x0000 (0x0000 - 0x0000)
class IFogOfWarVisibilityAgentInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarVisibilityAgentInterface">();
	}
	static class IFogOfWarVisibilityAgentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IFogOfWarVisibilityAgentInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(IFogOfWarVisibilityAgentInterface) == 0x000001, "Wrong alignment on IFogOfWarVisibilityAgentInterface");
static_assert(sizeof(IFogOfWarVisibilityAgentInterface) == 0x000001, "Wrong size on IFogOfWarVisibilityAgentInterface");

// Class FogOfWar.FogOfWarVolume
// 0x0000 (0x02C8 - 0x02C8)
class AFogOfWarVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FogOfWarVolume">();
	}
	static class AFogOfWarVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFogOfWarVolume>();
	}
};
static_assert(alignof(AFogOfWarVolume) == 0x000008, "Wrong alignment on AFogOfWarVolume");
static_assert(sizeof(AFogOfWarVolume) == 0x0002C8, "Wrong size on AFogOfWarVolume");

}

