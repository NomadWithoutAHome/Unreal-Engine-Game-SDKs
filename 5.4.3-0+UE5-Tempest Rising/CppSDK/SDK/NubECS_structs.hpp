#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NubECS

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum NubECS.EEcsTransformSyncType
// NumValues: 0x0005
enum class EEcsTransformSyncType : uint8
{
	ActorToEcs                               = 0,
	EcsToActor                               = 1,
	BothWays                                 = 2,
	Disabled                                 = 3,
	EEcsTransformSyncType_MAX                = 4,
};

// Enum NubECS.EEcsMovementPlane
// NumValues: 0x0004
enum class EEcsMovementPlane : uint32
{
	Ground                                   = 0,
	Air                                      = 1,
	Water                                    = 2,
	EEcsMovementPlane_MAX                    = 3,
};

// Enum NubECS.EMovementColliderType
// NumValues: 0x0004
enum class EMovementColliderType : uint8
{
	Circle                                   = 0,
	Pill                                     = 1,
	Ellipse                                  = 2,
	EMovementColliderType_MAX                = 3,
};

// ScriptStruct NubECS.EcsEntityView
// 0x0010 (0x0010 - 0x0000)
struct FEcsEntityView
{
public:
	uint64                                        WorldPtr;                                          // 0x0000(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        ID;                                                // 0x0008(0x0008)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsEntityView) == 0x000008, "Wrong alignment on FEcsEntityView");
static_assert(sizeof(FEcsEntityView) == 0x000010, "Wrong size on FEcsEntityView");
static_assert(offsetof(FEcsEntityView, WorldPtr) == 0x000000, "Member 'FEcsEntityView::WorldPtr' has a wrong offset!");
static_assert(offsetof(FEcsEntityView, ID) == 0x000008, "Member 'FEcsEntityView::ID' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_ActorRef
// 0x0008 (0x0008 - 0x0000)
struct FEcsComp_ActorRef final
{
public:
	TWeakObjectPtr<class AActor>                  Actor;                                             // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_ActorRef) == 0x000004, "Wrong alignment on FEcsComp_ActorRef");
static_assert(sizeof(FEcsComp_ActorRef) == 0x000008, "Wrong size on FEcsComp_ActorRef");
static_assert(offsetof(FEcsComp_ActorRef, Actor) == 0x000000, "Member 'FEcsComp_ActorRef::Actor' has a wrong offset!");

// ScriptStruct NubECS.NubEllipseCollision
// 0x0050 (0x0050 - 0x0000)
struct alignas(0x10) FNubEllipseCollision final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNubEllipseCollision) == 0x000010, "Wrong alignment on FNubEllipseCollision");
static_assert(sizeof(FNubEllipseCollision) == 0x000050, "Wrong size on FNubEllipseCollision");

// ScriptStruct NubECS.EcsEntity
// 0x0000 (0x0010 - 0x0010)
struct FEcsEntity final : public FEcsEntityView
{
};
static_assert(alignof(FEcsEntity) == 0x000008, "Wrong alignment on FEcsEntity");
static_assert(sizeof(FEcsEntity) == 0x000010, "Wrong size on FEcsEntity");

// ScriptStruct NubECS.EcsComp_TeamId
// 0x0001 (0x0001 - 0x0000)
struct FEcsComp_TeamId final
{
public:
	struct FGenericTeamId                         TeamID;                                            // 0x0000(0x0001)(Edit, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_TeamId) == 0x000001, "Wrong alignment on FEcsComp_TeamId");
static_assert(sizeof(FEcsComp_TeamId) == 0x000001, "Wrong size on FEcsComp_TeamId");
static_assert(offsetof(FEcsComp_TeamId, TeamID) == 0x000000, "Member 'FEcsComp_TeamId::TeamID' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_CollisionSettings
// 0x0001 (0x0001 - 0x0000)
struct FEcsComp_CollisionSettings final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_CollisionSettings) == 0x000001, "Wrong alignment on FEcsComp_CollisionSettings");
static_assert(sizeof(FEcsComp_CollisionSettings) == 0x000001, "Wrong size on FEcsComp_CollisionSettings");

// ScriptStruct NubECS.EcsComp_ColliderData
// 0x000C (0x000C - 0x0000)
struct FEcsComp_ColliderData final
{
public:
	TWeakObjectPtr<class UPrimitiveComponent>     CollisionPrimitive;                                // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreOtherCollisionRadius;                       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGenerateOverlapEvents;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_ColliderData) == 0x000004, "Wrong alignment on FEcsComp_ColliderData");
static_assert(sizeof(FEcsComp_ColliderData) == 0x00000C, "Wrong size on FEcsComp_ColliderData");
static_assert(offsetof(FEcsComp_ColliderData, CollisionPrimitive) == 0x000000, "Member 'FEcsComp_ColliderData::CollisionPrimitive' has a wrong offset!");
static_assert(offsetof(FEcsComp_ColliderData, bIgnoreOtherCollisionRadius) == 0x000008, "Member 'FEcsComp_ColliderData::bIgnoreOtherCollisionRadius' has a wrong offset!");
static_assert(offsetof(FEcsComp_ColliderData, bGenerateOverlapEvents) == 0x000009, "Member 'FEcsComp_ColliderData::bGenerateOverlapEvents' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_Location
// 0x0018 (0x0018 - 0x0000)
struct FEcsComp_Location final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_Location) == 0x000008, "Wrong alignment on FEcsComp_Location");
static_assert(sizeof(FEcsComp_Location) == 0x000018, "Wrong size on FEcsComp_Location");
static_assert(offsetof(FEcsComp_Location, Location) == 0x000000, "Member 'FEcsComp_Location::Location' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_Rotation
// 0x0018 (0x0018 - 0x0000)
struct FEcsComp_Rotation final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_Rotation) == 0x000008, "Wrong alignment on FEcsComp_Rotation");
static_assert(sizeof(FEcsComp_Rotation) == 0x000018, "Wrong size on FEcsComp_Rotation");
static_assert(offsetof(FEcsComp_Rotation, Rotation) == 0x000000, "Member 'FEcsComp_Rotation::Rotation' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_Scale
// 0x0018 (0x0018 - 0x0000)
struct FEcsComp_Scale final
{
public:
	struct FVector                                Scale;                                             // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_Scale) == 0x000008, "Wrong alignment on FEcsComp_Scale");
static_assert(sizeof(FEcsComp_Scale) == 0x000018, "Wrong size on FEcsComp_Scale");
static_assert(offsetof(FEcsComp_Scale, Scale) == 0x000000, "Member 'FEcsComp_Scale::Scale' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_CollisionRadius
// 0x0004 (0x0004 - 0x0000)
struct FEcsComp_CollisionRadius final
{
public:
	float                                         Radius;                                            // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_CollisionRadius) == 0x000004, "Wrong alignment on FEcsComp_CollisionRadius");
static_assert(sizeof(FEcsComp_CollisionRadius) == 0x000004, "Wrong size on FEcsComp_CollisionRadius");
static_assert(offsetof(FEcsComp_CollisionRadius, Radius) == 0x000000, "Member 'FEcsComp_CollisionRadius::Radius' has a wrong offset!");

// ScriptStruct NubECS.MovementCollider
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FMovementCollider final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovementCollider) == 0x000010, "Wrong alignment on FMovementCollider");
static_assert(sizeof(FMovementCollider) == 0x000080, "Wrong size on FMovementCollider");

// ScriptStruct NubECS.EcsSpatialQueryElementPayload
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FEcsSpatialQueryElementPayload
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsSpatialQueryElementPayload) == 0x000008, "Wrong alignment on FEcsSpatialQueryElementPayload");
static_assert(sizeof(FEcsSpatialQueryElementPayload) == 0x000008, "Wrong size on FEcsSpatialQueryElementPayload");

// ScriptStruct NubECS.EcsSpatialQueryElementPayload_MovementObstacle
// 0x0128 (0x0130 - 0x0008)
struct alignas(0x10) FEcsSpatialQueryElementPayload_MovementObstacle final : public FEcsSpatialQueryElementPayload
{
public:
	uint8                                         Pad_8[0x128];                                      // 0x0008(0x0128)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsSpatialQueryElementPayload_MovementObstacle) == 0x000010, "Wrong alignment on FEcsSpatialQueryElementPayload_MovementObstacle");
static_assert(sizeof(FEcsSpatialQueryElementPayload_MovementObstacle) == 0x000130, "Wrong size on FEcsSpatialQueryElementPayload_MovementObstacle");

// ScriptStruct NubECS.NavigationAvoidanceEdge
// 0x0048 (0x0048 - 0x0000)
struct FNavigationAvoidanceEdge final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LeftDir;                                           // 0x0030(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNavigationAvoidanceEdge) == 0x000008, "Wrong alignment on FNavigationAvoidanceEdge");
static_assert(sizeof(FNavigationAvoidanceEdge) == 0x000048, "Wrong size on FNavigationAvoidanceEdge");
static_assert(offsetof(FNavigationAvoidanceEdge, Start) == 0x000000, "Member 'FNavigationAvoidanceEdge::Start' has a wrong offset!");
static_assert(offsetof(FNavigationAvoidanceEdge, End) == 0x000018, "Member 'FNavigationAvoidanceEdge::End' has a wrong offset!");
static_assert(offsetof(FNavigationAvoidanceEdge, LeftDir) == 0x000030, "Member 'FNavigationAvoidanceEdge::LeftDir' has a wrong offset!");

// ScriptStruct NubECS.MovementEnvironmentContact
// 0x0038 (0x0038 - 0x0000)
struct FMovementEnvironmentContact final
{
public:
	struct FVector                                position;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovementEnvironmentContact) == 0x000008, "Wrong alignment on FMovementEnvironmentContact");
static_assert(sizeof(FMovementEnvironmentContact) == 0x000038, "Wrong size on FMovementEnvironmentContact");
static_assert(offsetof(FMovementEnvironmentContact, position) == 0x000000, "Member 'FMovementEnvironmentContact::position' has a wrong offset!");
static_assert(offsetof(FMovementEnvironmentContact, Normal) == 0x000018, "Member 'FMovementEnvironmentContact::Normal' has a wrong offset!");
static_assert(offsetof(FMovementEnvironmentContact, Distance) == 0x000030, "Member 'FMovementEnvironmentContact::Distance' has a wrong offset!");

// ScriptStruct NubECS.MovementAvoidanceObstacle
// 0x0090 (0x0090 - 0x0000)
struct FMovementAvoidanceObstacle final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Velocity;                                          // 0x0018(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistSq;                                            // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0034(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0038(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNubEllipseCollision                   EllipseCollision;                                  // 0x0040(0x0050)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMovementAvoidanceObstacle) == 0x000010, "Wrong alignment on FMovementAvoidanceObstacle");
static_assert(sizeof(FMovementAvoidanceObstacle) == 0x000090, "Wrong size on FMovementAvoidanceObstacle");
static_assert(offsetof(FMovementAvoidanceObstacle, Location) == 0x000000, "Member 'FMovementAvoidanceObstacle::Location' has a wrong offset!");
static_assert(offsetof(FMovementAvoidanceObstacle, Velocity) == 0x000018, "Member 'FMovementAvoidanceObstacle::Velocity' has a wrong offset!");
static_assert(offsetof(FMovementAvoidanceObstacle, DistSq) == 0x000030, "Member 'FMovementAvoidanceObstacle::DistSq' has a wrong offset!");
static_assert(offsetof(FMovementAvoidanceObstacle, Radius) == 0x000034, "Member 'FMovementAvoidanceObstacle::Radius' has a wrong offset!");
static_assert(offsetof(FMovementAvoidanceObstacle, bIsMoving) == 0x000038, "Member 'FMovementAvoidanceObstacle::bIsMoving' has a wrong offset!");
static_assert(offsetof(FMovementAvoidanceObstacle, EllipseCollision) == 0x000040, "Member 'FMovementAvoidanceObstacle::EllipseCollision' has a wrong offset!");

// ScriptStruct NubECS.MovementSeparationContact
// 0x0038 (0x0038 - 0x0000)
struct FMovementSeparationContact final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Normal2D;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistSq;                                            // 0x0028(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CombinedRadius;                                    // 0x002C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSeparationDistance;                             // 0x0030(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMovementSeparationContact) == 0x000008, "Wrong alignment on FMovementSeparationContact");
static_assert(sizeof(FMovementSeparationContact) == 0x000038, "Wrong size on FMovementSeparationContact");
static_assert(offsetof(FMovementSeparationContact, Location) == 0x000000, "Member 'FMovementSeparationContact::Location' has a wrong offset!");
static_assert(offsetof(FMovementSeparationContact, Normal2D) == 0x000018, "Member 'FMovementSeparationContact::Normal2D' has a wrong offset!");
static_assert(offsetof(FMovementSeparationContact, DistSq) == 0x000028, "Member 'FMovementSeparationContact::DistSq' has a wrong offset!");
static_assert(offsetof(FMovementSeparationContact, CombinedRadius) == 0x00002C, "Member 'FMovementSeparationContact::CombinedRadius' has a wrong offset!");
static_assert(offsetof(FMovementSeparationContact, MinSeparationDistance) == 0x000030, "Member 'FMovementSeparationContact::MinSeparationDistance' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_MovementCollider
// 0x0080 (0x0080 - 0x0000)
struct FEcsComp_MovementCollider final
{
public:
	struct FMovementCollider                      Collider;                                          // 0x0000(0x0080)(Edit, EditConst, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_MovementCollider) == 0x000010, "Wrong alignment on FEcsComp_MovementCollider");
static_assert(sizeof(FEcsComp_MovementCollider) == 0x000080, "Wrong size on FEcsComp_MovementCollider");
static_assert(offsetof(FEcsComp_MovementCollider, Collider) == 0x000000, "Member 'FEcsComp_MovementCollider::Collider' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_Velocity
// 0x0018 (0x0018 - 0x0000)
struct FEcsComp_Velocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_Velocity) == 0x000008, "Wrong alignment on FEcsComp_Velocity");
static_assert(sizeof(FEcsComp_Velocity) == 0x000018, "Wrong size on FEcsComp_Velocity");
static_assert(offsetof(FEcsComp_Velocity, Velocity) == 0x000000, "Member 'FEcsComp_Velocity::Velocity' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_PreferredVelocity
// 0x0018 (0x0018 - 0x0000)
struct FEcsComp_PreferredVelocity final
{
public:
	struct FVector                                Velocity;                                          // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_PreferredVelocity) == 0x000008, "Wrong alignment on FEcsComp_PreferredVelocity");
static_assert(sizeof(FEcsComp_PreferredVelocity) == 0x000018, "Wrong size on FEcsComp_PreferredVelocity");
static_assert(offsetof(FEcsComp_PreferredVelocity, Velocity) == 0x000000, "Member 'FEcsComp_PreferredVelocity::Velocity' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SteeringFollow
// 0x0038 (0x0038 - 0x0000)
struct FEcsComp_SteeringFollow final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x20];                                      // 0x0018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_SteeringFollow) == 0x000008, "Wrong alignment on FEcsComp_SteeringFollow");
static_assert(sizeof(FEcsComp_SteeringFollow) == 0x000038, "Wrong size on FEcsComp_SteeringFollow");
static_assert(offsetof(FEcsComp_SteeringFollow, Force) == 0x000000, "Member 'FEcsComp_SteeringFollow::Force' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SteeringSeparation
// 0x0050 (0x0050 - 0x0000)
struct FEcsComp_SteeringSeparation final
{
public:
	struct FVector2D                              Force;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0010(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationCharge;                                  // 0x0014(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparationChargeLifetime;                          // 0x0018(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              displacement;                                      // 0x0020(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMovementSeparationContact>     ObstacleContacts;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<struct FMovementEnvironmentContact>    EnviroContacts;                                    // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_SteeringSeparation) == 0x000008, "Wrong alignment on FEcsComp_SteeringSeparation");
static_assert(sizeof(FEcsComp_SteeringSeparation) == 0x000050, "Wrong size on FEcsComp_SteeringSeparation");
static_assert(offsetof(FEcsComp_SteeringSeparation, Force) == 0x000000, "Member 'FEcsComp_SteeringSeparation::Force' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringSeparation, Radius) == 0x000010, "Member 'FEcsComp_SteeringSeparation::Radius' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringSeparation, SeparationCharge) == 0x000014, "Member 'FEcsComp_SteeringSeparation::SeparationCharge' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringSeparation, SeparationChargeLifetime) == 0x000018, "Member 'FEcsComp_SteeringSeparation::SeparationChargeLifetime' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringSeparation, displacement) == 0x000020, "Member 'FEcsComp_SteeringSeparation::displacement' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringSeparation, ObstacleContacts) == 0x000030, "Member 'FEcsComp_SteeringSeparation::ObstacleContacts' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringSeparation, EnviroContacts) == 0x000040, "Member 'FEcsComp_SteeringSeparation::EnviroContacts' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SteeringCohesion
// 0x0020 (0x0020 - 0x0000)
struct FEcsComp_SteeringCohesion final
{
public:
	struct FVector2D                              Force;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      CohereLocations;                                   // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_SteeringCohesion) == 0x000008, "Wrong alignment on FEcsComp_SteeringCohesion");
static_assert(sizeof(FEcsComp_SteeringCohesion) == 0x000020, "Wrong size on FEcsComp_SteeringCohesion");
static_assert(offsetof(FEcsComp_SteeringCohesion, Force) == 0x000000, "Member 'FEcsComp_SteeringCohesion::Force' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringCohesion, CohereLocations) == 0x000010, "Member 'FEcsComp_SteeringCohesion::CohereLocations' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SteeringAlignment
// 0x0020 (0x0020 - 0x0000)
struct FEcsComp_SteeringAlignment final
{
public:
	struct FVector2D                              Force;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      AlignHeadings;                                     // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_SteeringAlignment) == 0x000008, "Wrong alignment on FEcsComp_SteeringAlignment");
static_assert(sizeof(FEcsComp_SteeringAlignment) == 0x000020, "Wrong size on FEcsComp_SteeringAlignment");
static_assert(offsetof(FEcsComp_SteeringAlignment, Force) == 0x000000, "Member 'FEcsComp_SteeringAlignment::Force' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringAlignment, AlignHeadings) == 0x000010, "Member 'FEcsComp_SteeringAlignment::AlignHeadings' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SteeringRVO
// 0x00A8 (0x00A8 - 0x0000)
struct FEcsComp_SteeringRVO final
{
public:
	struct FVector2D                              Force;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              PrevForce;                                         // 0x0010(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LastFinalMoveDestination;                          // 0x0020(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearEndScaling;                                    // 0x003C(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasAvoidingStaticObstacle;                        // 0x0040(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMovementAvoidanceObstacle>     NearbyObstacles;                                   // 0x0048(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x50];                                      // 0x0058(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_SteeringRVO) == 0x000008, "Wrong alignment on FEcsComp_SteeringRVO");
static_assert(sizeof(FEcsComp_SteeringRVO) == 0x0000A8, "Wrong size on FEcsComp_SteeringRVO");
static_assert(offsetof(FEcsComp_SteeringRVO, Force) == 0x000000, "Member 'FEcsComp_SteeringRVO::Force' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringRVO, PrevForce) == 0x000010, "Member 'FEcsComp_SteeringRVO::PrevForce' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringRVO, LastFinalMoveDestination) == 0x000020, "Member 'FEcsComp_SteeringRVO::LastFinalMoveDestination' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringRVO, Radius) == 0x000038, "Member 'FEcsComp_SteeringRVO::Radius' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringRVO, NearEndScaling) == 0x00003C, "Member 'FEcsComp_SteeringRVO::NearEndScaling' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringRVO, bWasAvoidingStaticObstacle) == 0x000040, "Member 'FEcsComp_SteeringRVO::bWasAvoidingStaticObstacle' has a wrong offset!");
static_assert(offsetof(FEcsComp_SteeringRVO, NearbyObstacles) == 0x000048, "Member 'FEcsComp_SteeringRVO::NearbyObstacles' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SteeringForce
// 0x0018 (0x0018 - 0x0000)
struct FEcsComp_SteeringForce final
{
public:
	struct FVector                                Force;                                             // 0x0000(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_SteeringForce) == 0x000008, "Wrong alignment on FEcsComp_SteeringForce");
static_assert(sizeof(FEcsComp_SteeringForce) == 0x000018, "Wrong size on FEcsComp_SteeringForce");
static_assert(offsetof(FEcsComp_SteeringForce, Force) == 0x000000, "Member 'FEcsComp_SteeringForce::Force' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_MovementParameters
// 0x0008 (0x0008 - 0x0000)
struct FEcsComp_MovementParameters final
{
public:
	float                                         MaxAcceleration;                                   // 0x0000(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_MovementParameters) == 0x000004, "Wrong alignment on FEcsComp_MovementParameters");
static_assert(sizeof(FEcsComp_MovementParameters) == 0x000008, "Wrong size on FEcsComp_MovementParameters");
static_assert(offsetof(FEcsComp_MovementParameters, MaxAcceleration) == 0x000000, "Member 'FEcsComp_MovementParameters::MaxAcceleration' has a wrong offset!");
static_assert(offsetof(FEcsComp_MovementParameters, MaxSpeed) == 0x000004, "Member 'FEcsComp_MovementParameters::MaxSpeed' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_NavigationPath
// 0x00F0 (0x00F0 - 0x0000)
struct FEcsComp_NavigationPath final
{
public:
	bool                                          bFollowingPath;                                    // 0x0000(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitingForPath;                                   // 0x0001(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FeetLocation;                                      // 0x0008(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinalMoveDestination;                              // 0x0020(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImmediateMoveDestination;                          // 0x0038(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NextMoveDestination;                               // 0x0050(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveSegmentDirection;                              // 0x0068(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveSegmentStart;                                  // 0x0080(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MoveSegmentEnd;                                    // 0x0098(0x0018)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveSegmentStartIndex;                             // 0x00B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveSegmentEndIndex;                               // 0x00B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FinalMoveSegmentEndIndex;                          // 0x00B8(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DecelerationSegmentIndex;                          // 0x00BC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDistance;                                   // 0x00C0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasNavLinkOnNextSegment;                          // 0x00C4(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasNavLinkOnCurrentSegment;                       // 0x00C5(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PathId;                                            // 0x00C6(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LastPathId;                                        // 0x00C7(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint16                                        LastPathCommandId;                                 // 0x00C8(0x0002)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ARecastNavMesh*                         NavMesh;                                           // 0x00D0(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x18];                                      // 0x00D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_NavigationPath) == 0x000008, "Wrong alignment on FEcsComp_NavigationPath");
static_assert(sizeof(FEcsComp_NavigationPath) == 0x0000F0, "Wrong size on FEcsComp_NavigationPath");
static_assert(offsetof(FEcsComp_NavigationPath, bFollowingPath) == 0x000000, "Member 'FEcsComp_NavigationPath::bFollowingPath' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, bWaitingForPath) == 0x000001, "Member 'FEcsComp_NavigationPath::bWaitingForPath' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, FeetLocation) == 0x000008, "Member 'FEcsComp_NavigationPath::FeetLocation' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, FinalMoveDestination) == 0x000020, "Member 'FEcsComp_NavigationPath::FinalMoveDestination' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, ImmediateMoveDestination) == 0x000038, "Member 'FEcsComp_NavigationPath::ImmediateMoveDestination' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, NextMoveDestination) == 0x000050, "Member 'FEcsComp_NavigationPath::NextMoveDestination' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, MoveSegmentDirection) == 0x000068, "Member 'FEcsComp_NavigationPath::MoveSegmentDirection' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, MoveSegmentStart) == 0x000080, "Member 'FEcsComp_NavigationPath::MoveSegmentStart' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, MoveSegmentEnd) == 0x000098, "Member 'FEcsComp_NavigationPath::MoveSegmentEnd' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, MoveSegmentStartIndex) == 0x0000B0, "Member 'FEcsComp_NavigationPath::MoveSegmentStartIndex' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, MoveSegmentEndIndex) == 0x0000B4, "Member 'FEcsComp_NavigationPath::MoveSegmentEndIndex' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, FinalMoveSegmentEndIndex) == 0x0000B8, "Member 'FEcsComp_NavigationPath::FinalMoveSegmentEndIndex' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, DecelerationSegmentIndex) == 0x0000BC, "Member 'FEcsComp_NavigationPath::DecelerationSegmentIndex' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, BrakingDistance) == 0x0000C0, "Member 'FEcsComp_NavigationPath::BrakingDistance' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, bHasNavLinkOnNextSegment) == 0x0000C4, "Member 'FEcsComp_NavigationPath::bHasNavLinkOnNextSegment' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, bHasNavLinkOnCurrentSegment) == 0x0000C5, "Member 'FEcsComp_NavigationPath::bHasNavLinkOnCurrentSegment' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, PathId) == 0x0000C6, "Member 'FEcsComp_NavigationPath::PathId' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, LastPathId) == 0x0000C7, "Member 'FEcsComp_NavigationPath::LastPathId' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, LastPathCommandId) == 0x0000C8, "Member 'FEcsComp_NavigationPath::LastPathCommandId' has a wrong offset!");
static_assert(offsetof(FEcsComp_NavigationPath, NavMesh) == 0x0000D0, "Member 'FEcsComp_NavigationPath::NavMesh' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_NavEdges
// 0x0010 (0x0010 - 0x0000)
struct FEcsComp_NavEdges final
{
public:
	TArray<struct FNavigationAvoidanceEdge>       Edges;                                             // 0x0000(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_NavEdges) == 0x000008, "Wrong alignment on FEcsComp_NavEdges");
static_assert(sizeof(FEcsComp_NavEdges) == 0x000010, "Wrong size on FEcsComp_NavEdges");
static_assert(offsetof(FEcsComp_NavEdges, Edges) == 0x000000, "Member 'FEcsComp_NavEdges::Edges' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_NavMesh
// 0x0008 (0x0008 - 0x0000)
struct FEcsComp_NavMesh final
{
public:
	class ARecastNavMesh*                         NavMesh;                                           // 0x0000(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_NavMesh) == 0x000008, "Wrong alignment on FEcsComp_NavMesh");
static_assert(sizeof(FEcsComp_NavMesh) == 0x000008, "Wrong size on FEcsComp_NavMesh");
static_assert(offsetof(FEcsComp_NavMesh, NavMesh) == 0x000000, "Member 'FEcsComp_NavMesh::NavMesh' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_Obstacle
// 0x0010 (0x0010 - 0x0000)
struct FEcsComp_Obstacle final
{
public:
	TArray<struct FVector>                        Vertices;                                          // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEcsComp_Obstacle) == 0x000008, "Wrong alignment on FEcsComp_Obstacle");
static_assert(sizeof(FEcsComp_Obstacle) == 0x000010, "Wrong size on FEcsComp_Obstacle");
static_assert(offsetof(FEcsComp_Obstacle, Vertices) == 0x000000, "Member 'FEcsComp_Obstacle::Vertices' has a wrong offset!");

// ScriptStruct NubECS.EcsComp_SpatialQueryElement
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FEcsComp_SpatialQueryElement final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_SpatialQueryElement) == 0x000008, "Wrong alignment on FEcsComp_SpatialQueryElement");
static_assert(sizeof(FEcsComp_SpatialQueryElement) == 0x000030, "Wrong size on FEcsComp_SpatialQueryElement");

// ScriptStruct NubECS.EcsComp_SpatialQuery
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEcsComp_SpatialQuery final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_SpatialQuery) == 0x000008, "Wrong alignment on FEcsComp_SpatialQuery");
static_assert(sizeof(FEcsComp_SpatialQuery) == 0x000010, "Wrong size on FEcsComp_SpatialQuery");

// ScriptStruct NubECS.EcsComp_SpatialQueryResult
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEcsComp_SpatialQueryResult final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_SpatialQueryResult) == 0x000008, "Wrong alignment on FEcsComp_SpatialQueryResult");
static_assert(sizeof(FEcsComp_SpatialQueryResult) == 0x000010, "Wrong size on FEcsComp_SpatialQueryResult");

// ScriptStruct NubECS.EcsComp_SpatialQueryResultElementIdx
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FEcsComp_SpatialQueryResultElementIdx final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_SpatialQueryResultElementIdx) == 0x000008, "Wrong alignment on FEcsComp_SpatialQueryResultElementIdx");
static_assert(sizeof(FEcsComp_SpatialQueryResultElementIdx) == 0x000010, "Wrong size on FEcsComp_SpatialQueryResultElementIdx");

// ScriptStruct NubECS.EcsComp_ScriptStruct
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FEcsComp_ScriptStruct final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsComp_ScriptStruct) == 0x000008, "Wrong alignment on FEcsComp_ScriptStruct");
static_assert(sizeof(FEcsComp_ScriptStruct) == 0x000008, "Wrong size on FEcsComp_ScriptStruct");

// ScriptStruct NubECS.EcsEntityHandle
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FEcsEntityHandle final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEcsEntityHandle) == 0x000008, "Wrong alignment on FEcsEntityHandle");
static_assert(sizeof(FEcsEntityHandle) == 0x000008, "Wrong size on FEcsEntityHandle");

}

