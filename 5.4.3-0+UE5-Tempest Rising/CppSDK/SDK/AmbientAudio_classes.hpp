#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"

#include "AmbientAudio_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class AmbientAudio.AmbientAudioActor
// 0x0020 (0x02B0 - 0x0290)
class AAmbientAudioActor final : public AActor
{
public:
	struct FAmbientAudioActorData                 Configuration;                                     // 0x0290(0x0020)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioActor">();
	}
	static class AAmbientAudioActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAmbientAudioActor>();
	}
};
static_assert(alignof(AAmbientAudioActor) == 0x000008, "Wrong alignment on AAmbientAudioActor");
static_assert(sizeof(AAmbientAudioActor) == 0x0002B0, "Wrong size on AAmbientAudioActor");
static_assert(offsetof(AAmbientAudioActor, Configuration) == 0x000290, "Member 'AAmbientAudioActor::Configuration' has a wrong offset!");

// Class AmbientAudio.AmbientAudioData
// 0x0050 (0x0080 - 0x0030)
class UAmbientAudioData final : public UDataAsset
{
public:
	struct FAmbientAudioConfig                    Config;                                            // 0x0030(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioData">();
	}
	static class UAmbientAudioData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioData>();
	}
};
static_assert(alignof(UAmbientAudioData) == 0x000008, "Wrong alignment on UAmbientAudioData");
static_assert(sizeof(UAmbientAudioData) == 0x000080, "Wrong size on UAmbientAudioData");
static_assert(offsetof(UAmbientAudioData, Config) == 0x000030, "Member 'UAmbientAudioData::Config' has a wrong offset!");

// Class AmbientAudio.AmbientAudioFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UAmbientAudioFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void PlayAudioActorSounds(class AAmbientAudioActor* AmbientAudioActor);
	static void SetAllAmbientParam(const class UObject* WorldContextObject, const class FName& ParamName, float Value);
	static void SetAllAmbientVolume(const class UObject* WorldContextObject, float Value);
	static void SetAmbientAudioParam(const class AAmbientAudioActor* AudioActor, const class FName& ParamName, float Value);
	static void SetAmbientAudioVolume(const class AAmbientAudioActor* AudioActor, float Value);
	static void SetGlobalAmbientParam(const class UObject* WorldContextObject, const class FName& ParamName, float Value);
	static void SetGlobalAmbientVolume(const class UObject* WorldContextObject, float Value);
	static void StopAudioActorSounds(class AAmbientAudioActor* AmbientAudioActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioFunctionLibrary">();
	}
	static class UAmbientAudioFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioFunctionLibrary>();
	}
};
static_assert(alignof(UAmbientAudioFunctionLibrary) == 0x000008, "Wrong alignment on UAmbientAudioFunctionLibrary");
static_assert(sizeof(UAmbientAudioFunctionLibrary) == 0x000028, "Wrong size on UAmbientAudioFunctionLibrary");

// Class AmbientAudio.AmbientAudioManager
// 0x0148 (0x0178 - 0x0030)
class UAmbientAudioManager : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AmbientLoopsAttenuation;                           // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundConcurrency*                      AmbientLoopsConcurrency;                           // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundAttenuation*                      AmbientEffectsAttenuation;                         // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USoundConcurrency*                      AmbientEffectsConcurrency;                         // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class AAmbientAudioActor*, struct FAmbientAudio> ActiveAmbientAudio;                        // 0x0058(0x0050)(Transient, DuplicateTransient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         GlobalAmbienceVolumeOverride;                      // 0x00A8(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      GlobalAmbienceParams;                              // 0x00B0(0x0050)(Transient, DuplicateTransient, Protected, NativeAccessSpecifierProtected)
	float                                         AmbienceVolumeOverride;                            // 0x0100(0x0004)(ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      AmbienceParams;                                    // 0x0108(0x0050)(Transient, DuplicateTransient, Protected, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         AudioManagerName;                                  // 0x0158(0x0020)(ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void K2_Tick(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioManager">();
	}
	static class UAmbientAudioManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioManager>();
	}
};
static_assert(alignof(UAmbientAudioManager) == 0x000008, "Wrong alignment on UAmbientAudioManager");
static_assert(sizeof(UAmbientAudioManager) == 0x000178, "Wrong size on UAmbientAudioManager");
static_assert(offsetof(UAmbientAudioManager, AmbientLoopsAttenuation) == 0x000038, "Member 'UAmbientAudioManager::AmbientLoopsAttenuation' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, AmbientLoopsConcurrency) == 0x000040, "Member 'UAmbientAudioManager::AmbientLoopsConcurrency' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, AmbientEffectsAttenuation) == 0x000048, "Member 'UAmbientAudioManager::AmbientEffectsAttenuation' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, AmbientEffectsConcurrency) == 0x000050, "Member 'UAmbientAudioManager::AmbientEffectsConcurrency' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, ActiveAmbientAudio) == 0x000058, "Member 'UAmbientAudioManager::ActiveAmbientAudio' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, GlobalAmbienceVolumeOverride) == 0x0000A8, "Member 'UAmbientAudioManager::GlobalAmbienceVolumeOverride' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, GlobalAmbienceParams) == 0x0000B0, "Member 'UAmbientAudioManager::GlobalAmbienceParams' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, AmbienceVolumeOverride) == 0x000100, "Member 'UAmbientAudioManager::AmbienceVolumeOverride' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, AmbienceParams) == 0x000108, "Member 'UAmbientAudioManager::AmbienceParams' has a wrong offset!");
static_assert(offsetof(UAmbientAudioManager, AudioManagerName) == 0x000158, "Member 'UAmbientAudioManager::AudioManagerName' has a wrong offset!");

}

