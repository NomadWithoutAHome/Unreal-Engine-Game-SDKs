#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Conformation_Wood_Bridge

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_Conformation_Bridge_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Conformation_Wood_Bridge.BP_Conformation_Wood_Bridge_C
// 0x00E0 (0x1C50 - 0x1B70)
class ABP_Conformation_Wood_Bridge_C final : public ABP_Conformation_Bridge_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_Conformation_Wood_Bridge_C;      // 0x1B70(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      PS_SmokeRepairedBridge_01_Wind;                    // 0x1B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_WaterExplosion_01;                              // 0x1B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_ExplosionBridge_01_Wind;                        // 0x1B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BridgeDest_03;                                  // 0x1B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BridgeDest_01;                                  // 0x1B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BridgeDest_02;                                  // 0x1BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh_Deployed_0;                                   // 0x1BA8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            Mesh_Broken_0;                                     // 0x1BB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DeployDuration_0;                                  // 0x1BB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FTransform                             TransformCache;                                    // 0x1BC0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                DebrisInitialLocation;                             // 0x1C20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitPart1;                                          // 0x1C38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitPart2;                                          // 0x1C3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitPart3;                                          // 0x1C40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         HitLimit;                                          // 0x1C44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          OnWaterSurface;                                    // 0x1C48(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Conformation_Wood_Bridge_SM_BridgeDest_01_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_Conformation_Wood_Bridge_SM_BridgeDest_02_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_Conformation_Wood_Bridge_SM_BridgeDest_03_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_Conformation_Wood_Bridge(int32 EntryPoint);
	void HidePreview();
	void OnStateChangeCosmetic(const struct FGameplayTag& InState, const float InValue);
	void ReceiveOnDeath();
	void Remove_clutter();
	void ShowPreview(const class AActor* InInstigator, const struct FGameplayTag& InState, const float InValue);

	bool CanChangeState(const class AActor* InInstigator, const struct FGameplayTag& InState, const float InValue) const;
	class UStreamableRenderAsset* GetConformationPreviewMesh(struct FTransform* Offset) const;
	void GetLocationsForActivator(TArray<struct FVector>* OutLocations) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Conformation_Wood_Bridge_C">();
	}
	static class ABP_Conformation_Wood_Bridge_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Conformation_Wood_Bridge_C>();
	}
};
static_assert(alignof(ABP_Conformation_Wood_Bridge_C) == 0x000010, "Wrong alignment on ABP_Conformation_Wood_Bridge_C");
static_assert(sizeof(ABP_Conformation_Wood_Bridge_C) == 0x001C50, "Wrong size on ABP_Conformation_Wood_Bridge_C");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, UberGraphFrame_BP_Conformation_Wood_Bridge_C) == 0x001B70, "Member 'ABP_Conformation_Wood_Bridge_C::UberGraphFrame_BP_Conformation_Wood_Bridge_C' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, PS_SmokeRepairedBridge_01_Wind) == 0x001B78, "Member 'ABP_Conformation_Wood_Bridge_C::PS_SmokeRepairedBridge_01_Wind' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, PS_WaterExplosion_01) == 0x001B80, "Member 'ABP_Conformation_Wood_Bridge_C::PS_WaterExplosion_01' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, PS_ExplosionBridge_01_Wind) == 0x001B88, "Member 'ABP_Conformation_Wood_Bridge_C::PS_ExplosionBridge_01_Wind' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, SM_BridgeDest_03) == 0x001B90, "Member 'ABP_Conformation_Wood_Bridge_C::SM_BridgeDest_03' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, SM_BridgeDest_01) == 0x001B98, "Member 'ABP_Conformation_Wood_Bridge_C::SM_BridgeDest_01' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, SM_BridgeDest_02) == 0x001BA0, "Member 'ABP_Conformation_Wood_Bridge_C::SM_BridgeDest_02' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, Mesh_Deployed_0) == 0x001BA8, "Member 'ABP_Conformation_Wood_Bridge_C::Mesh_Deployed_0' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, Mesh_Broken_0) == 0x001BB0, "Member 'ABP_Conformation_Wood_Bridge_C::Mesh_Broken_0' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, DeployDuration_0) == 0x001BB8, "Member 'ABP_Conformation_Wood_Bridge_C::DeployDuration_0' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, TransformCache) == 0x001BC0, "Member 'ABP_Conformation_Wood_Bridge_C::TransformCache' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, DebrisInitialLocation) == 0x001C20, "Member 'ABP_Conformation_Wood_Bridge_C::DebrisInitialLocation' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, HitPart1) == 0x001C38, "Member 'ABP_Conformation_Wood_Bridge_C::HitPart1' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, HitPart2) == 0x001C3C, "Member 'ABP_Conformation_Wood_Bridge_C::HitPart2' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, HitPart3) == 0x001C40, "Member 'ABP_Conformation_Wood_Bridge_C::HitPart3' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, HitLimit) == 0x001C44, "Member 'ABP_Conformation_Wood_Bridge_C::HitLimit' has a wrong offset!");
static_assert(offsetof(ABP_Conformation_Wood_Bridge_C, OnWaterSurface) == 0x001C48, "Member 'ABP_Conformation_Wood_Bridge_C::OnWaterSurface' has a wrong offset!");

}

