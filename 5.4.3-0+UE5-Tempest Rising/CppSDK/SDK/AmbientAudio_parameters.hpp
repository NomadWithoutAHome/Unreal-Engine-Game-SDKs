#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"


namespace SDK::Params
{

// Function AmbientAudio.AmbientAudioFunctionLibrary.PlayAudioActorSounds
// 0x0008 (0x0008 - 0x0000)
struct AmbientAudioFunctionLibrary_PlayAudioActorSounds final
{
public:
	class AAmbientAudioActor*                     AmbientAudioActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioFunctionLibrary_PlayAudioActorSounds) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_PlayAudioActorSounds");
static_assert(sizeof(AmbientAudioFunctionLibrary_PlayAudioActorSounds) == 0x000008, "Wrong size on AmbientAudioFunctionLibrary_PlayAudioActorSounds");
static_assert(offsetof(AmbientAudioFunctionLibrary_PlayAudioActorSounds, AmbientAudioActor) == 0x000000, "Member 'AmbientAudioFunctionLibrary_PlayAudioActorSounds::AmbientAudioActor' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.SetAllAmbientParam
// 0x0018 (0x0018 - 0x0000)
struct AmbientAudioFunctionLibrary_SetAllAmbientParam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioFunctionLibrary_SetAllAmbientParam) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_SetAllAmbientParam");
static_assert(sizeof(AmbientAudioFunctionLibrary_SetAllAmbientParam) == 0x000018, "Wrong size on AmbientAudioFunctionLibrary_SetAllAmbientParam");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAllAmbientParam, WorldContextObject) == 0x000000, "Member 'AmbientAudioFunctionLibrary_SetAllAmbientParam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAllAmbientParam, ParamName) == 0x000008, "Member 'AmbientAudioFunctionLibrary_SetAllAmbientParam::ParamName' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAllAmbientParam, Value) == 0x000010, "Member 'AmbientAudioFunctionLibrary_SetAllAmbientParam::Value' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.SetAllAmbientVolume
// 0x0010 (0x0010 - 0x0000)
struct AmbientAudioFunctionLibrary_SetAllAmbientVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioFunctionLibrary_SetAllAmbientVolume) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_SetAllAmbientVolume");
static_assert(sizeof(AmbientAudioFunctionLibrary_SetAllAmbientVolume) == 0x000010, "Wrong size on AmbientAudioFunctionLibrary_SetAllAmbientVolume");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAllAmbientVolume, WorldContextObject) == 0x000000, "Member 'AmbientAudioFunctionLibrary_SetAllAmbientVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAllAmbientVolume, Value) == 0x000008, "Member 'AmbientAudioFunctionLibrary_SetAllAmbientVolume::Value' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.SetAmbientAudioParam
// 0x0018 (0x0018 - 0x0000)
struct AmbientAudioFunctionLibrary_SetAmbientAudioParam final
{
public:
	const class AAmbientAudioActor*               AudioActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioFunctionLibrary_SetAmbientAudioParam) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_SetAmbientAudioParam");
static_assert(sizeof(AmbientAudioFunctionLibrary_SetAmbientAudioParam) == 0x000018, "Wrong size on AmbientAudioFunctionLibrary_SetAmbientAudioParam");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAmbientAudioParam, AudioActor) == 0x000000, "Member 'AmbientAudioFunctionLibrary_SetAmbientAudioParam::AudioActor' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAmbientAudioParam, ParamName) == 0x000008, "Member 'AmbientAudioFunctionLibrary_SetAmbientAudioParam::ParamName' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAmbientAudioParam, Value) == 0x000010, "Member 'AmbientAudioFunctionLibrary_SetAmbientAudioParam::Value' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.SetAmbientAudioVolume
// 0x0010 (0x0010 - 0x0000)
struct AmbientAudioFunctionLibrary_SetAmbientAudioVolume final
{
public:
	const class AAmbientAudioActor*               AudioActor;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioFunctionLibrary_SetAmbientAudioVolume) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_SetAmbientAudioVolume");
static_assert(sizeof(AmbientAudioFunctionLibrary_SetAmbientAudioVolume) == 0x000010, "Wrong size on AmbientAudioFunctionLibrary_SetAmbientAudioVolume");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAmbientAudioVolume, AudioActor) == 0x000000, "Member 'AmbientAudioFunctionLibrary_SetAmbientAudioVolume::AudioActor' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetAmbientAudioVolume, Value) == 0x000008, "Member 'AmbientAudioFunctionLibrary_SetAmbientAudioVolume::Value' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.SetGlobalAmbientParam
// 0x0018 (0x0018 - 0x0000)
struct AmbientAudioFunctionLibrary_SetGlobalAmbientParam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamName;                                         // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioFunctionLibrary_SetGlobalAmbientParam) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_SetGlobalAmbientParam");
static_assert(sizeof(AmbientAudioFunctionLibrary_SetGlobalAmbientParam) == 0x000018, "Wrong size on AmbientAudioFunctionLibrary_SetGlobalAmbientParam");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetGlobalAmbientParam, WorldContextObject) == 0x000000, "Member 'AmbientAudioFunctionLibrary_SetGlobalAmbientParam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetGlobalAmbientParam, ParamName) == 0x000008, "Member 'AmbientAudioFunctionLibrary_SetGlobalAmbientParam::ParamName' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetGlobalAmbientParam, Value) == 0x000010, "Member 'AmbientAudioFunctionLibrary_SetGlobalAmbientParam::Value' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.SetGlobalAmbientVolume
// 0x0010 (0x0010 - 0x0000)
struct AmbientAudioFunctionLibrary_SetGlobalAmbientVolume final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AmbientAudioFunctionLibrary_SetGlobalAmbientVolume) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_SetGlobalAmbientVolume");
static_assert(sizeof(AmbientAudioFunctionLibrary_SetGlobalAmbientVolume) == 0x000010, "Wrong size on AmbientAudioFunctionLibrary_SetGlobalAmbientVolume");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetGlobalAmbientVolume, WorldContextObject) == 0x000000, "Member 'AmbientAudioFunctionLibrary_SetGlobalAmbientVolume::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AmbientAudioFunctionLibrary_SetGlobalAmbientVolume, Value) == 0x000008, "Member 'AmbientAudioFunctionLibrary_SetGlobalAmbientVolume::Value' has a wrong offset!");

// Function AmbientAudio.AmbientAudioFunctionLibrary.StopAudioActorSounds
// 0x0008 (0x0008 - 0x0000)
struct AmbientAudioFunctionLibrary_StopAudioActorSounds final
{
public:
	class AAmbientAudioActor*                     AmbientAudioActor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioFunctionLibrary_StopAudioActorSounds) == 0x000008, "Wrong alignment on AmbientAudioFunctionLibrary_StopAudioActorSounds");
static_assert(sizeof(AmbientAudioFunctionLibrary_StopAudioActorSounds) == 0x000008, "Wrong size on AmbientAudioFunctionLibrary_StopAudioActorSounds");
static_assert(offsetof(AmbientAudioFunctionLibrary_StopAudioActorSounds, AmbientAudioActor) == 0x000000, "Member 'AmbientAudioFunctionLibrary_StopAudioActorSounds::AmbientAudioActor' has a wrong offset!");

// Function AmbientAudio.AmbientAudioManager.K2_Tick
// 0x0004 (0x0004 - 0x0000)
struct AmbientAudioManager_K2_Tick final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AmbientAudioManager_K2_Tick) == 0x000004, "Wrong alignment on AmbientAudioManager_K2_Tick");
static_assert(sizeof(AmbientAudioManager_K2_Tick) == 0x000004, "Wrong size on AmbientAudioManager_K2_Tick");
static_assert(offsetof(AmbientAudioManager_K2_Tick, DeltaTime) == 0x000000, "Member 'AmbientAudioManager_K2_Tick::DeltaTime' has a wrong offset!");

}

