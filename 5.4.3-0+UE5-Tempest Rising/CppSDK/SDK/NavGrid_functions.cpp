#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NavGrid

#include "Basic.hpp"

#include "NavGrid_classes.hpp"
#include "NavGrid_parameters.hpp"


namespace SDK
{

// Function NavGrid.GridMeshComponent.SetFromHexNavGrid
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class AHexNavGrid*                InHexNavGrid                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FAxialCoords>&      OptionalRelevantCoords                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGridMeshComponent::SetFromHexNavGrid(const class AHexNavGrid* InHexNavGrid, const TArray<struct FAxialCoords>& OptionalRelevantCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshComponent", "SetFromHexNavGrid");

	Params::GridMeshComponent_SetFromHexNavGrid Parms{};

	Parms.InHexNavGrid = InHexNavGrid;
	Parms.OptionalRelevantCoords = std::move(OptionalRelevantCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.GridMeshComponent.SetFromSquareNavGrid
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class ASquareNavGrid*             InSquareNavGrid                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FOffsetCoords>&     OptionalRelevantCoords                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGridMeshComponent::SetFromSquareNavGrid(const class ASquareNavGrid* InSquareNavGrid, const TArray<struct FOffsetCoords>& OptionalRelevantCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshComponent", "SetFromSquareNavGrid");

	Params::GridMeshComponent_SetFromSquareNavGrid Parms{};

	Parms.InSquareNavGrid = InSquareNavGrid;
	Parms.OptionalRelevantCoords = std::move(OptionalRelevantCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.GridMeshComponent.SetRenderingOffset
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InRenderingOffset                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGridMeshComponent::SetRenderingOffset(const struct FVector& InRenderingOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GridMeshComponent", "SetRenderingOffset");

	Params::GridMeshComponent_SetRenderingOffset Parms{};

	Parms.InRenderingOffset = std::move(InRenderingOffset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.NavGridBlueprintLibrary.Add_AxialCoordsAxialCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAxialCoords&              B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAxialCoords                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAxialCoords UNavGridBlueprintLibrary::Add_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Add_AxialCoordsAxialCoords");

	Params::NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Add_OffsetCoordsOffsetCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::Add_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Add_OffsetCoordsOffsetCoords");

	Params::NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.AxialCoords_Invalid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAxialCoords                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAxialCoords UNavGridBlueprintLibrary::AxialCoords_Invalid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "AxialCoords_Invalid");

	Params::NavGridBlueprintLibrary_AxialCoords_Invalid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.AxialCoords_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              AxialCoords                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::AxialCoords_IsValid(const struct FAxialCoords& AxialCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "AxialCoords_IsValid");

	Params::NavGridBlueprintLibrary_AxialCoords_IsValid Parms{};

	Parms.AxialCoords = std::move(AxialCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Conv_AxialCoordsToIntPoint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              InAxialCoords                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UNavGridBlueprintLibrary::Conv_AxialCoordsToIntPoint(const struct FAxialCoords& InAxialCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Conv_AxialCoordsToIntPoint");

	Params::NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint Parms{};

	Parms.InAxialCoords = std::move(InAxialCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Conv_AxialCoordsToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              AxialCoords                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNavGridBlueprintLibrary::Conv_AxialCoordsToString(const struct FAxialCoords& AxialCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Conv_AxialCoordsToString");

	Params::NavGridBlueprintLibrary_Conv_AxialCoordsToString Parms{};

	Parms.AxialCoords = std::move(AxialCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Conv_IntPointToAxialCoords
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntPoint&                 InIntPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAxialCoords                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAxialCoords UNavGridBlueprintLibrary::Conv_IntPointToAxialCoords(const struct FIntPoint& InIntPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Conv_IntPointToAxialCoords");

	Params::NavGridBlueprintLibrary_Conv_IntPointToAxialCoords Parms{};

	Parms.InIntPoint = std::move(InIntPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Conv_IntPointToOffsetCoords
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FIntPoint&                 InIntPoint                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::Conv_IntPointToOffsetCoords(const struct FIntPoint& InIntPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Conv_IntPointToOffsetCoords");

	Params::NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords Parms{};

	Parms.InIntPoint = std::move(InIntPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Conv_OffsetCoordsToIntPoint
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             InOffsetCoords                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntPoint                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FIntPoint UNavGridBlueprintLibrary::Conv_OffsetCoordsToIntPoint(const struct FOffsetCoords& InOffsetCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Conv_OffsetCoordsToIntPoint");

	Params::NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint Parms{};

	Parms.InOffsetCoords = std::move(InOffsetCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Conv_OffsetCoordsToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             OffsetCoords                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNavGridBlueprintLibrary::Conv_OffsetCoordsToString(const struct FOffsetCoords& OffsetCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Conv_OffsetCoordsToString");

	Params::NavGridBlueprintLibrary_Conv_OffsetCoordsToString Parms{};

	Parms.OffsetCoords = std::move(OffsetCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Equal_AxialCoordsAxialCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAxialCoords&              B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::Equal_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Equal_AxialCoordsAxialCoords");

	Params::NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Equal_OffsetCoordsOffsetCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::Equal_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Equal_OffsetCoordsOffsetCoords");

	Params::NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.FindReachableTiles
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const int32                             Range                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>*           OutReachableTileCoords                                 (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const TSubclassOf<class UNavigationQueryFilter>FilterClass                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::FindReachableTiles(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const int32 Range, TArray<struct FOffsetCoords>* OutReachableTileCoords, const TSubclassOf<class UNavigationQueryFilter> FilterClass, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "FindReachableTiles");

	Params::NavGridBlueprintLibrary_FindReachableTiles Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Range = Range;
	Parms.FilterClass = FilterClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutReachableTileCoords != nullptr)
		*OutReachableTileCoords = std::move(Parms.OutReachableTileCoords);

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetAllTileCoords
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FOffsetCoords> UNavGridBlueprintLibrary::GetAllTileCoords(const class UObject* WorldContextObject, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetAllTileCoords");

	Params::NavGridBlueprintLibrary_GetAllTileCoords Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetCoordsAtWorldLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::GetCoordsAtWorldLocation(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetCoordsAtWorldLocation");

	Params::NavGridBlueprintLibrary_GetCoordsAtWorldLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetCoordsRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FOffsetCoords> UNavGridBlueprintLibrary::GetCoordsRange(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, int32 Range, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetCoordsRange");

	Params::NavGridBlueprintLibrary_GetCoordsRange Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Range = Range;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetHexNavGrid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHexNavGrid*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHexNavGrid* UNavGridBlueprintLibrary::GetHexNavGrid(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetHexNavGrid");

	Params::NavGridBlueprintLibrary_GetHexNavGrid Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetNeighbourCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// uint8                                   NeiIndex                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::GetNeighbourCoords(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, uint8 NeiIndex, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetNeighbourCoords");

	Params::NavGridBlueprintLibrary_GetNeighbourCoords Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.NeiIndex = NeiIndex;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetNeighbourCoordsInWorldDirection
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::GetNeighbourCoordsInWorldDirection(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const struct FVector& WorldDirection, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetNeighbourCoordsInWorldDirection");

	Params::NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetNeighbourCoordsInWorldDirection_Coords
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldDirection                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::GetNeighbourCoordsInWorldDirection_Coords(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const struct FVector& WorldDirection, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetNeighbourCoordsInWorldDirection_Coords");

	Params::NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.WorldDirection = std::move(WorldDirection);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetNeighboursCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FOffsetCoords> UNavGridBlueprintLibrary::GetNeighboursCoords(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetNeighboursCoords");

	Params::NavGridBlueprintLibrary_GetNeighboursCoords Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetRecastNavMesh
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ARecastNavMesh*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ARecastNavMesh* UNavGridBlueprintLibrary::GetRecastNavMesh(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetRecastNavMesh");

	Params::NavGridBlueprintLibrary_GetRecastNavMesh Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>         ActorClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UNavGridBlueprintLibrary::GetRegisteredTileActor(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetRegisteredTileActor");

	Params::NavGridBlueprintLibrary_GetRegisteredTileActor Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.ActorClass = ActorClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActorCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class AActor*                     TileActor                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>*           OutTileActorCoords                                     (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::GetRegisteredTileActorCoords(const class UObject* WorldContextObject, const class AActor* TileActor, TArray<struct FOffsetCoords>* OutTileActorCoords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetRegisteredTileActorCoords");

	Params::NavGridBlueprintLibrary_GetRegisteredTileActorCoords Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.TileActor = TileActor;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTileActorCoords != nullptr)
		*OutTileActorCoords = std::move(Parms.OutTileActorCoords);

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActors
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>         ActorClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UNavGridBlueprintLibrary::GetRegisteredTileActors(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetRegisteredTileActors");

	Params::NavGridBlueprintLibrary_GetRegisteredTileActors Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.ActorClass = ActorClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActorsInRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<struct FOffsetCoords>&     CoordsRange                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>         ActorClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AActor*> UNavGridBlueprintLibrary::GetRegisteredTileActorsInRange(const class UObject* WorldContextObject, const TArray<struct FOffsetCoords>& CoordsRange, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetRegisteredTileActorsInRange");

	Params::NavGridBlueprintLibrary_GetRegisteredTileActorsInRange Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.CoordsRange = std::move(CoordsRange);
	Parms.ActorClass = ActorClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetSquareNavGrid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ASquareNavGrid*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASquareNavGrid* UNavGridBlueprintLibrary::GetSquareNavGrid(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetSquareNavGrid");

	Params::NavGridBlueprintLibrary_GetSquareNavGrid Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileAreaClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UNavArea>             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UNavArea> UNavGridBlueprintLibrary::GetTileAreaClass(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileAreaClass");

	Params::NavGridBlueprintLibrary_GetTileAreaClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileCenter
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UNavGridBlueprintLibrary::GetTileCenter(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileCenter");

	Params::NavGridBlueprintLibrary_GetTileCenter Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileCenter2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UNavGridBlueprintLibrary::GetTileCenter2D(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileCenter2D");

	Params::NavGridBlueprintLibrary_GetTileCenter2D Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileCenterAtWorldLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UNavGridBlueprintLibrary::GetTileCenterAtWorldLocation(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileCenterAtWorldLocation");

	Params::NavGridBlueprintLibrary_GetTileCenterAtWorldLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileCoordsRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Range                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FOffsetCoords> UNavGridBlueprintLibrary::GetTileCoordsRange(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, int32 Range, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileCoordsRange");

	Params::NavGridBlueprintLibrary_GetTileCoordsRange Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Range = Range;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileNormal
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UNavGridBlueprintLibrary::GetTileNormal(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileNormal");

	Params::NavGridBlueprintLibrary_GetTileNormal Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileRotation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UNavGridBlueprintLibrary::GetTileRotation(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileRotation");

	Params::NavGridBlueprintLibrary_GetTileRotation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.GetTileSize
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNavGridBlueprintLibrary::GetTileSize(const class UObject* WorldContextObject, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "GetTileSize");

	Params::NavGridBlueprintLibrary_GetTileSize Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.HasLineOfSight_Square
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             StartCoords                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             EndCoords                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::HasLineOfSight_Square(const class UObject* WorldContextObject, const struct FOffsetCoords& StartCoords, const struct FOffsetCoords& EndCoords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "HasLineOfSight_Square");

	Params::NavGridBlueprintLibrary_HasLineOfSight_Square Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.StartCoords = std::move(StartCoords);
	Parms.EndCoords = std::move(EndCoords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.HasTileAt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::HasTileAt(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "HasTileAt");

	Params::NavGridBlueprintLibrary_HasTileAt Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.HasTileAtWorldLocation
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::HasTileAtWorldLocation(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "HasTileAtWorldLocation");

	Params::NavGridBlueprintLibrary_HasTileAtWorldLocation Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.IsNavGridDataProviderRegistered
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const TScriptInterface<class INavGridDataProvider>DataProvider                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::IsNavGridDataProviderRegistered(const TScriptInterface<class INavGridDataProvider> DataProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "IsNavGridDataProviderRegistered");

	Params::NavGridBlueprintLibrary_IsNavGridDataProviderRegistered Parms{};

	Parms.DataProvider = DataProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.IsTileAreaOfClass
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class UNavArea>       NavAreaClass                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::IsTileAreaOfClass(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class UNavArea> NavAreaClass, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "IsTileAreaOfClass");

	Params::NavGridBlueprintLibrary_IsTileAreaOfClass Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.NavAreaClass = NavAreaClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.IsTileEmpty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::IsTileEmpty(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "IsTileEmpty");

	Params::NavGridBlueprintLibrary_IsTileEmpty Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.IsTileOccupied
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TSubclassOf<class AActor>         ActorClass                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::IsTileOccupied(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const TSubclassOf<class AActor> ActorClass, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "IsTileOccupied");

	Params::NavGridBlueprintLibrary_IsTileOccupied Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.ActorClass = ActorClass;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.IsTileWalkable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::IsTileWalkable(const class UObject* WorldContextObject, const struct FOffsetCoords& Coords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "IsTileWalkable");

	Params::NavGridBlueprintLibrary_IsTileWalkable Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Coords = std::move(Coords);
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.MarkNavGridDataProviderDirty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class INavGridDataProvider>DataProvider                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavGridBlueprintLibrary::MarkNavGridDataProviderDirty(TScriptInterface<class INavGridDataProvider> DataProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "MarkNavGridDataProviderDirty");

	Params::NavGridBlueprintLibrary_MarkNavGridDataProviderDirty Parms{};

	Parms.DataProvider = DataProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.NavGridBlueprintLibrary.NotEqual_AxialCoordsAxialCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAxialCoords&              B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::NotEqual_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "NotEqual_AxialCoordsAxialCoords");

	Params::NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.NotEqual_OffsetCoordsOffsetCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::NotEqual_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "NotEqual_OffsetCoordsOffsetCoords");

	Params::NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_Distance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             OtherCoords                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNavGridBlueprintLibrary::OffsetCoords_Distance(const struct FOffsetCoords& Coords, const struct FOffsetCoords& OtherCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "OffsetCoords_Distance");

	Params::NavGridBlueprintLibrary_OffsetCoords_Distance Parms{};

	Parms.Coords = std::move(Coords);
	Parms.OtherCoords = std::move(OtherCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_Invalid
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::OffsetCoords_Invalid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "OffsetCoords_Invalid");

	Params::NavGridBlueprintLibrary_OffsetCoords_Invalid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_IsValid
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             OffsetCoords                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::OffsetCoords_IsValid(const struct FOffsetCoords& OffsetCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "OffsetCoords_IsValid");

	Params::NavGridBlueprintLibrary_OffsetCoords_IsValid Parms{};

	Parms.OffsetCoords = std::move(OffsetCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_ManhattanDistance
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             Coords                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             OtherCoords                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNavGridBlueprintLibrary::OffsetCoords_ManhattanDistance(const struct FOffsetCoords& Coords, const struct FOffsetCoords& OtherCoords)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "OffsetCoords_ManhattanDistance");

	Params::NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance Parms{};

	Parms.Coords = std::move(Coords);
	Parms.OtherCoords = std::move(OtherCoords);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Overlap_Square
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldLocation                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             Radius                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FOffsetCoords>*           OutOverlappedTileCoords                                (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// const class ASquareNavGrid*             Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNavGridBlueprintLibrary::Overlap_Square(const class UObject* WorldContextObject, const struct FVector& WorldLocation, const float Radius, TArray<struct FOffsetCoords>* OutOverlappedTileCoords, const class ASquareNavGrid* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Overlap_Square");

	Params::NavGridBlueprintLibrary_Overlap_Square Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldLocation = std::move(WorldLocation);
	Parms.Radius = Radius;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOverlappedTileCoords != nullptr)
		*OutOverlappedTileCoords = std::move(Parms.OutOverlappedTileCoords);

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.RegisterNavGridDataProvider
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class INavGridDataProvider>DataProvider                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavGridBlueprintLibrary::RegisterNavGridDataProvider(TScriptInterface<class INavGridDataProvider> DataProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "RegisterNavGridDataProvider");

	Params::NavGridBlueprintLibrary_RegisterNavGridDataProvider Parms{};

	Parms.DataProvider = DataProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.NavGridBlueprintLibrary.Subtract_AxialCoordsAxialCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FAxialCoords&              A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FAxialCoords&              B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FAxialCoords                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FAxialCoords UNavGridBlueprintLibrary::Subtract_AxialCoordsAxialCoords(const struct FAxialCoords& A, const struct FAxialCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Subtract_AxialCoordsAxialCoords");

	Params::NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.Subtract_OffsetCoordsOffsetCoords
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FOffsetCoords&             A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FOffsetCoords&             B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOffsetCoords                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FOffsetCoords UNavGridBlueprintLibrary::Subtract_OffsetCoordsOffsetCoords(const struct FOffsetCoords& A, const struct FOffsetCoords& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "Subtract_OffsetCoordsOffsetCoords");

	Params::NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridBlueprintLibrary.UnregisterNavGridDataProvider
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class INavGridDataProvider>DataProvider                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNavGridBlueprintLibrary::UnregisterNavGridDataProvider(TScriptInterface<class INavGridDataProvider> DataProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NavGridBlueprintLibrary", "UnregisterNavGridDataProvider");

	Params::NavGridBlueprintLibrary_UnregisterNavGridDataProvider Parms{};

	Parms.DataProvider = DataProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.NavGridDataProvider.GetNavGridRelevantData
// (Native, Event, Public, HasOutParams, BlueprintEvent, Const)
// Parameters:
// struct FNavGridRelevantData*            OutNavigationData                                      (Parm, OutParm, NativeAccessSpecifierPublic)

void INavGridDataProvider::GetNavGridRelevantData(struct FNavGridRelevantData* OutNavigationData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavGridDataProvider", "GetNavGridRelevantData");

	Params::NavGridDataProvider_GetNavGridRelevantData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNavigationData != nullptr)
		*OutNavigationData = std::move(Parms.OutNavigationData);
}


// Function NavGrid.NavGridDataProvider.IsNavGridRelevant
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// const class ANavGrid*                   NavData                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool INavGridDataProvider::IsNavGridRelevant(const class ANavGrid* NavData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("NavGridDataProvider", "IsNavGridRelevant");

	Params::NavGridDataProvider_IsNavGridRelevant Parms{};

	Parms.NavData = NavData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NavGrid.NavGridTriggerVolume.SetIsEnabled
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInIsEnabled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANavGridTriggerVolume::SetIsEnabled(bool bInIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavGridTriggerVolume", "SetIsEnabled");

	Params::NavGridTriggerVolume_SetIsEnabled Parms{};

	Parms.bInIsEnabled = bInIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NavGrid.NavGridTriggerVolume.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ANavGridTriggerVolume::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavGridTriggerVolume", "IsEnabled");

	Params::NavGridTriggerVolume_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

