#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_BD_DYN_SensorArray

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "ABP_BD_DYN_SensorArray_structs.hpp"
#include "Tempest_structs.hpp"
#include "Tempest_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_BD_DYN_SensorArray.ABP_BD_DYN_SensorArray_C
// 0x02B0 (0x0640 - 0x0390)
class UABP_BD_DYN_SensorArray_C final : public UTedAnimInstance
{
public:
	uint8                                         Pad_388[0x8];                                      // 0x0388(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0390(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_BD_DYN_SensorArray::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;       // 0x0398(0x000C)(HasGetValueTypeHash)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03A8(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03B0(0x0008)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03B8(0x0048)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0400(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0420(0x0048)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x0468(0x0010)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0478(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x05A0(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x05C0(0x0048)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x0608(0x0020)()
	bool                                          Powered;                                           // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasTarget;                                         // 0x0629(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62A[0x6];                                      // 0x062A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Playrate_Idle;                                     // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_ABP_BD_DYN_SensorArray(int32 EntryPoint);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_BD_DYN_SensorArray_AnimGraphNode_ModifyBone_511C57C643661C15C1F3068B8CC30768();
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_BD_DYN_SensorArray_C">();
	}
	static class UABP_BD_DYN_SensorArray_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_BD_DYN_SensorArray_C>();
	}
};
static_assert(alignof(UABP_BD_DYN_SensorArray_C) == 0x000010, "Wrong alignment on UABP_BD_DYN_SensorArray_C");
static_assert(sizeof(UABP_BD_DYN_SensorArray_C) == 0x000640, "Wrong size on UABP_BD_DYN_SensorArray_C");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, UberGraphFrame) == 0x000390, "Member 'UABP_BD_DYN_SensorArray_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, __AnimBlueprintMutables) == 0x000398, "Member 'UABP_BD_DYN_SensorArray_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimBlueprintExtension_PropertyAccess) == 0x0003A8, "Member 'UABP_BD_DYN_SensorArray_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimBlueprintExtension_Base) == 0x0003B0, "Member 'UABP_BD_DYN_SensorArray_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_Slot) == 0x0003B8, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_Root) == 0x000400, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_SequencePlayer) == 0x000420, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_LocalRefPose) == 0x000468, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_ModifyBone) == 0x000478, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_LocalToComponentSpace) == 0x0005A0, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_BlendListByBool) == 0x0005C0, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, AnimGraphNode_ComponentToLocalSpace) == 0x000608, "Member 'UABP_BD_DYN_SensorArray_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, Powered) == 0x000628, "Member 'UABP_BD_DYN_SensorArray_C::Powered' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, HasTarget) == 0x000629, "Member 'UABP_BD_DYN_SensorArray_C::HasTarget' has a wrong offset!");
static_assert(offsetof(UABP_BD_DYN_SensorArray_C, Playrate_Idle) == 0x000630, "Member 'UABP_BD_DYN_SensorArray_C::Playrate_Idle' has a wrong offset!");

}

