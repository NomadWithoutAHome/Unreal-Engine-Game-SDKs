#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_WireSpline

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_WireSpline.BP_WireSpline_C
// 0x0088 (0x0318 - 0x0290)
class ABP_WireSpline_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline;                                            // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_Alpha_3D66B94147A7DA9A41A2D289C2B84059;   // 0x02A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_3D66B94147A7DA9A41A2D289C2B84059; // 0x02AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESplineMeshAxis                               Forward_Axis;                                      // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMesh*                            Spline_Mesh;                                       // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Spline_Material;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        SectionLength;                                     // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Stretching;                                 // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x7];                                      // 0x02D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Mesh_length;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Value;                                             // 0x02E8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Emissive_On_by_Default;                            // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               DynMatVar;                                         // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Emissive;                                      // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void Toggle_Cable_Emissive(bool Off);
	void Timeline__UpdateFunc();
	void Timeline__FinishedFunc();
	void ExecuteUbergraph_BP_WireSpline(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_WireSpline_C">();
	}
	static class ABP_WireSpline_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_WireSpline_C>();
	}
};
static_assert(alignof(ABP_WireSpline_C) == 0x000008, "Wrong alignment on ABP_WireSpline_C");
static_assert(sizeof(ABP_WireSpline_C) == 0x000318, "Wrong size on ABP_WireSpline_C");
static_assert(offsetof(ABP_WireSpline_C, UberGraphFrame) == 0x000290, "Member 'ABP_WireSpline_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Spline) == 0x000298, "Member 'ABP_WireSpline_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_WireSpline_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Timeline_Alpha_3D66B94147A7DA9A41A2D289C2B84059) == 0x0002A8, "Member 'ABP_WireSpline_C::Timeline_Alpha_3D66B94147A7DA9A41A2D289C2B84059' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Timeline__Direction_3D66B94147A7DA9A41A2D289C2B84059) == 0x0002AC, "Member 'ABP_WireSpline_C::Timeline__Direction_3D66B94147A7DA9A41A2D289C2B84059' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Timeline) == 0x0002B0, "Member 'ABP_WireSpline_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Forward_Axis) == 0x0002B8, "Member 'ABP_WireSpline_C::Forward_Axis' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Spline_Mesh) == 0x0002C0, "Member 'ABP_WireSpline_C::Spline_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Spline_Material) == 0x0002C8, "Member 'ABP_WireSpline_C::Spline_Material' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, SectionLength) == 0x0002D0, "Member 'ABP_WireSpline_C::SectionLength' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Enable_Stretching) == 0x0002D8, "Member 'ABP_WireSpline_C::Enable_Stretching' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Mesh_length) == 0x0002E0, "Member 'ABP_WireSpline_C::Mesh_length' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Value) == 0x0002E8, "Member 'ABP_WireSpline_C::Value' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Emissive_On_by_Default) == 0x000300, "Member 'ABP_WireSpline_C::Emissive_On_by_Default' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, DynMatVar) == 0x000308, "Member 'ABP_WireSpline_C::DynMatVar' has a wrong offset!");
static_assert(offsetof(ABP_WireSpline_C, Max_Emissive) == 0x000310, "Member 'ABP_WireSpline_C::Max_Emissive' has a wrong offset!");

}

