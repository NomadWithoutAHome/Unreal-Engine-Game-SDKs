#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_GDF_Aircraft

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "ABP_GDF_Aircraft_structs.hpp"
#include "Tempest_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass ABP_GDF_Aircraft.ABP_GDF_Aircraft_C
// 0x06D0 (0x0AA0 - 0x03D0)
class UABP_GDF_Aircraft_C final : public UTedAnimInstance_Vehicle
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03D0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct ABP_GDF_Aircraft::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;             // 0x03D8(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x03E0(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x03E8(0x0008)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03F0(0x0048)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_3;                      // 0x0438(0x0010)()
	struct FAnimNode_ApplyAdditive                AnimGraphNode_ApplyAdditive;                       // 0x0448(0x00C8)()
	struct FAnimNode_ModifyBone                   AnimGraphNode_ModifyBone;                          // 0x0510(0x0128)()
	struct FAnimNode_ConvertLocalToComponentSpace AnimGraphNode_LocalToComponentSpace;               // 0x0638(0x0020)()
	struct FAnimNode_BlendListByBool              AnimGraphNode_BlendListByBool;                     // 0x0658(0x0048)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x06A0(0x0080)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x0720(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0748(0x0028)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_2;                      // 0x0770(0x0010)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0780(0x0020)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x07A0(0x0048)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x07E8(0x00C8)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose_1;                      // 0x08B0(0x0010)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x08C0(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x08E0(0x00C8)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x09A8(0x0020)()
	struct FAnimNode_ConvertComponentToLocalSpace AnimGraphNode_ComponentToLocalSpace;               // 0x09C8(0x0020)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x09E8(0x0028)()
	struct FAnimNode_RefPose                      AnimGraphNode_LocalRefPose;                        // 0x0A10(0x0010)()
	bool                                          bIsLanding;                                        // 0x0A20(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsTakingOff;                                      // 0x0A21(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A22[0xE];                                      // 0x0A22(0x000E)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BodyTransform;                                     // 0x0A30(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayingMontage;                                    // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AnimGraph(struct FPoseLink* AnimGraph_0);
	void BlueprintUpdateAnimation(float DeltaTimeX);
	void EvaluateGraphExposedInputs_ExecuteUbergraph_ABP_GDF_Aircraft_AnimGraphNode_ModifyBone_581C9170418E978106FB4FB608503C9C();
	void ExecuteUbergraph_ABP_GDF_Aircraft(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"ABP_GDF_Aircraft_C">();
	}
	static class UABP_GDF_Aircraft_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UABP_GDF_Aircraft_C>();
	}
};
static_assert(alignof(UABP_GDF_Aircraft_C) == 0x000010, "Wrong alignment on UABP_GDF_Aircraft_C");
static_assert(sizeof(UABP_GDF_Aircraft_C) == 0x000AA0, "Wrong size on UABP_GDF_Aircraft_C");
static_assert(offsetof(UABP_GDF_Aircraft_C, UberGraphFrame) == 0x0003D0, "Member 'UABP_GDF_Aircraft_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, __AnimBlueprintMutables) == 0x0003D8, "Member 'UABP_GDF_Aircraft_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimBlueprintExtension_PropertyAccess) == 0x0003E0, "Member 'UABP_GDF_Aircraft_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimBlueprintExtension_Base) == 0x0003E8, "Member 'UABP_GDF_Aircraft_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_Slot) == 0x0003F0, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_LocalRefPose_3) == 0x000438, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_LocalRefPose_3' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_ApplyAdditive) == 0x000448, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_ApplyAdditive' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_ModifyBone) == 0x000510, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_ModifyBone' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_LocalToComponentSpace) == 0x000638, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_LocalToComponentSpace' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_BlendListByBool) == 0x000658, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_BlendListByBool' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_SaveCachedPose) == 0x0006A0, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_TransitionResult_1) == 0x000720, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_TransitionResult) == 0x000748, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_LocalRefPose_2) == 0x000770, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_LocalRefPose_2' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_StateResult_1) == 0x000780, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_SequencePlayer) == 0x0007A0, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_TwoWayBlend) == 0x0007E8, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_LocalRefPose_1) == 0x0008B0, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_LocalRefPose_1' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_StateResult) == 0x0008C0, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_StateMachine) == 0x0008E0, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_Root) == 0x0009A8, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_ComponentToLocalSpace) == 0x0009C8, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_ComponentToLocalSpace' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_UseCachedPose) == 0x0009E8, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_UseCachedPose' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, AnimGraphNode_LocalRefPose) == 0x000A10, "Member 'UABP_GDF_Aircraft_C::AnimGraphNode_LocalRefPose' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, bIsLanding) == 0x000A20, "Member 'UABP_GDF_Aircraft_C::bIsLanding' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, bIsTakingOff) == 0x000A21, "Member 'UABP_GDF_Aircraft_C::bIsTakingOff' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, BodyTransform) == 0x000A30, "Member 'UABP_GDF_Aircraft_C::BodyTransform' has a wrong offset!");
static_assert(offsetof(UABP_GDF_Aircraft_C, PlayingMontage) == 0x000A90, "Member 'UABP_GDF_Aircraft_C::PlayingMontage' has a wrong offset!");

}

