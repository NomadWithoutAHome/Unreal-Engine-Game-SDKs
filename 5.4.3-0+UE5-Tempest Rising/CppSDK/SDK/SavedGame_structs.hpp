#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SavedGame

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum SavedGame.ESavedGameSupportedWorkType
// NumValues: 0x0004
enum class ESavedGameSupportedWorkType : uint8
{
	Async                                    = 0,
	Sync                                     = 1,
	SyncOrAsync                              = 2,
	ESavedGameSupportedWorkType_MAX          = 3,
};

// Enum SavedGame.ESavedGameTaskResult
// NumValues: 0x0006
enum class ESavedGameTaskResult : uint8
{
	NotStarted                               = 0,
	Succeeded                                = 1,
	Failed                                   = 2,
	Cancelled                                = 3,
	InProgress                               = 4,
	ESavedGameTaskResult_MAX                 = 5,
};

// Enum SavedGame.ESavedGameSlotType
// NumValues: 0x0005
enum class ESavedGameSlotType : uint8
{
	Invalid                                  = 0,
	ManualSave                               = 1,
	AutoSave                                 = 2,
	QuickSave                                = 3,
	ESavedGameSlotType_MAX                   = 4,
};

// Enum SavedGame.ESavedGameActionResult
// NumValues: 0x0005
enum class ESavedGameActionResult : uint8
{
	NotStarted                               = 0,
	InProgress                               = 1,
	Succeeded                                = 2,
	Failed                                   = 3,
	ESavedGameActionResult_MAX               = 4,
};

// Enum SavedGame.ESavedGameYesNo
// NumValues: 0x0003
enum class ESavedGameYesNo : uint8
{
	Yes                                      = 0,
	No                                       = 1,
	ESavedGameYesNo_MAX                      = 2,
};

// ScriptStruct SavedGame.SavedGameFileOptions
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FSavedGameFileOptions final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedGameFileOptions) == 0x000008, "Wrong alignment on FSavedGameFileOptions");
static_assert(sizeof(FSavedGameFileOptions) == 0x000030, "Wrong size on FSavedGameFileOptions");

// ScriptStruct SavedGame.SavedGameClassFilterBase
// 0x00A8 (0x00A8 - 0x0000)
struct FSavedGameClassFilterBase
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TSoftClassPtr<class UClass>>             CombinedClasses;                                   // 0x0008(0x0050)(Edit, Transient, EditConst, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TSet<class UClass*>                           BakedAllowedClasses;                               // 0x0058(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSavedGameClassFilterBase) == 0x000008, "Wrong alignment on FSavedGameClassFilterBase");
static_assert(sizeof(FSavedGameClassFilterBase) == 0x0000A8, "Wrong size on FSavedGameClassFilterBase");
static_assert(offsetof(FSavedGameClassFilterBase, CombinedClasses) == 0x000008, "Member 'FSavedGameClassFilterBase::CombinedClasses' has a wrong offset!");
static_assert(offsetof(FSavedGameClassFilterBase, BakedAllowedClasses) == 0x000058, "Member 'FSavedGameClassFilterBase::BakedAllowedClasses' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameActorClassFilter
// 0x00A0 (0x0148 - 0x00A8)
struct FSavedGameActorClassFilter final : public FSavedGameClassFilterBase
{
public:
	TSet<struct FSoftClassPath>                   AllowedClasses;                                    // 0x00A8(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TSet<struct FSoftClassPath>                   IgnoredClasses;                                    // 0x00F8(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSavedGameActorClassFilter) == 0x000008, "Wrong alignment on FSavedGameActorClassFilter");
static_assert(sizeof(FSavedGameActorClassFilter) == 0x000148, "Wrong size on FSavedGameActorClassFilter");
static_assert(offsetof(FSavedGameActorClassFilter, AllowedClasses) == 0x0000A8, "Member 'FSavedGameActorClassFilter::AllowedClasses' has a wrong offset!");
static_assert(offsetof(FSavedGameActorClassFilter, IgnoredClasses) == 0x0000F8, "Member 'FSavedGameActorClassFilter::IgnoredClasses' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameComponentClassFilter
// 0x00A0 (0x0148 - 0x00A8)
struct FSavedGameComponentClassFilter final : public FSavedGameClassFilterBase
{
public:
	TSet<struct FSoftClassPath>                   AllowedClasses;                                    // 0x00A8(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TSet<struct FSoftClassPath>                   IgnoredClasses;                                    // 0x00F8(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSavedGameComponentClassFilter) == 0x000008, "Wrong alignment on FSavedGameComponentClassFilter");
static_assert(sizeof(FSavedGameComponentClassFilter) == 0x000148, "Wrong size on FSavedGameComponentClassFilter");
static_assert(offsetof(FSavedGameComponentClassFilter, AllowedClasses) == 0x0000A8, "Member 'FSavedGameComponentClassFilter::AllowedClasses' has a wrong offset!");
static_assert(offsetof(FSavedGameComponentClassFilter, IgnoredClasses) == 0x0000F8, "Member 'FSavedGameComponentClassFilter::IgnoredClasses' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameFilter
// 0x0290 (0x0290 - 0x0000)
struct FSavedGameFilter final
{
public:
	struct FSavedGameActorClassFilter             ActorFilter;                                       // 0x0000(0x0148)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FSavedGameComponentClassFilter         ComponentFilter;                                   // 0x0148(0x0148)(Edit, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSavedGameFilter) == 0x000008, "Wrong alignment on FSavedGameFilter");
static_assert(sizeof(FSavedGameFilter) == 0x000290, "Wrong size on FSavedGameFilter");
static_assert(offsetof(FSavedGameFilter, ActorFilter) == 0x000000, "Member 'FSavedGameFilter::ActorFilter' has a wrong offset!");
static_assert(offsetof(FSavedGameFilter, ComponentFilter) == 0x000148, "Member 'FSavedGameFilter::ComponentFilter' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameGenericData
// 0x0018 (0x0018 - 0x0000)
struct FSavedGameGenericData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Data;                                              // 0x0008(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSavedGameGenericData) == 0x000008, "Wrong alignment on FSavedGameGenericData");
static_assert(sizeof(FSavedGameGenericData) == 0x000018, "Wrong size on FSavedGameGenericData");
static_assert(offsetof(FSavedGameGenericData, Data) == 0x000008, "Member 'FSavedGameGenericData::Data' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameComponentRecord
// 0x0028 (0x0028 - 0x0000)
struct FSavedGameComponentRecord final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ClassName;                                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSavedGameGenericData                  Data;                                              // 0x0010(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGameComponentRecord) == 0x000008, "Wrong alignment on FSavedGameComponentRecord");
static_assert(sizeof(FSavedGameComponentRecord) == 0x000028, "Wrong size on FSavedGameComponentRecord");
static_assert(offsetof(FSavedGameComponentRecord, Name) == 0x000000, "Member 'FSavedGameComponentRecord::Name' has a wrong offset!");
static_assert(offsetof(FSavedGameComponentRecord, ClassName) == 0x000008, "Member 'FSavedGameComponentRecord::ClassName' has a wrong offset!");
static_assert(offsetof(FSavedGameComponentRecord, Data) == 0x000010, "Member 'FSavedGameComponentRecord::Data' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameLatentActionRecord
// 0x0020 (0x0020 - 0x0000)
struct FSavedGameLatentActionRecord final
{
public:
	struct FLatentActionSaveGameData              Data;                                              // 0x0000(0x0020)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGameLatentActionRecord) == 0x000008, "Wrong alignment on FSavedGameLatentActionRecord");
static_assert(sizeof(FSavedGameLatentActionRecord) == 0x000020, "Wrong size on FSavedGameLatentActionRecord");
static_assert(offsetof(FSavedGameLatentActionRecord, Data) == 0x000000, "Member 'FSavedGameLatentActionRecord::Data' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameActorRecord
// 0x00A8 (0x00A8 - 0x0000)
struct FSavedGameActorRecord final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClassPathName;                                     // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDynamicActor;                                     // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  DynamicActorGuid;                                  // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSavedGameGenericData                  Data;                                              // 0x0030(0x0018)(NativeAccessSpecifierPublic)
	TMap<class FName, struct FSavedGameComponentRecord> ComponentRecords;                            // 0x0048(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FSavedGameLatentActionRecord>   LatentActionRecords;                               // 0x0098(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGameActorRecord) == 0x000008, "Wrong alignment on FSavedGameActorRecord");
static_assert(sizeof(FSavedGameActorRecord) == 0x0000A8, "Wrong size on FSavedGameActorRecord");
static_assert(offsetof(FSavedGameActorRecord, Name) == 0x000000, "Member 'FSavedGameActorRecord::Name' has a wrong offset!");
static_assert(offsetof(FSavedGameActorRecord, ClassPathName) == 0x000008, "Member 'FSavedGameActorRecord::ClassPathName' has a wrong offset!");
static_assert(offsetof(FSavedGameActorRecord, bDynamicActor) == 0x000018, "Member 'FSavedGameActorRecord::bDynamicActor' has a wrong offset!");
static_assert(offsetof(FSavedGameActorRecord, DynamicActorGuid) == 0x00001C, "Member 'FSavedGameActorRecord::DynamicActorGuid' has a wrong offset!");
static_assert(offsetof(FSavedGameActorRecord, Data) == 0x000030, "Member 'FSavedGameActorRecord::Data' has a wrong offset!");
static_assert(offsetof(FSavedGameActorRecord, ComponentRecords) == 0x000048, "Member 'FSavedGameActorRecord::ComponentRecords' has a wrong offset!");
static_assert(offsetof(FSavedGameActorRecord, LatentActionRecords) == 0x000098, "Member 'FSavedGameActorRecord::LatentActionRecords' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameLevelStreamingStateRecord
// 0x0001 (0x0001 - 0x0000)
struct FSavedGameLevelStreamingStateRecord final
{
public:
	uint8                                         bShouldBeLoaded : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldBeVisible : 1;                              // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
};
static_assert(alignof(FSavedGameLevelStreamingStateRecord) == 0x000001, "Wrong alignment on FSavedGameLevelStreamingStateRecord");
static_assert(sizeof(FSavedGameLevelStreamingStateRecord) == 0x000001, "Wrong size on FSavedGameLevelStreamingStateRecord");

// ScriptStruct SavedGame.SavedGameLevelRecord
// 0x00C8 (0x00C8 - 0x0000)
struct FSavedGameLevelRecord
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Name;                                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSavedGameActorRecord> ActorRecords;                                    // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	TSet<class FName>                             DestroyedActors;                                   // 0x0060(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedGameLevelRecord) == 0x000008, "Wrong alignment on FSavedGameLevelRecord");
static_assert(sizeof(FSavedGameLevelRecord) == 0x0000C8, "Wrong size on FSavedGameLevelRecord");
static_assert(offsetof(FSavedGameLevelRecord, Name) == 0x000008, "Member 'FSavedGameLevelRecord::Name' has a wrong offset!");
static_assert(offsetof(FSavedGameLevelRecord, ActorRecords) == 0x000010, "Member 'FSavedGameLevelRecord::ActorRecords' has a wrong offset!");
static_assert(offsetof(FSavedGameLevelRecord, DestroyedActors) == 0x000060, "Member 'FSavedGameLevelRecord::DestroyedActors' has a wrong offset!");

// ScriptStruct SavedGame.SavedGamePersistentLevelRecord
// 0x0018 (0x00E0 - 0x00C8)
struct FSavedGamePersistentLevelRecord final : public FSavedGameLevelRecord
{
public:
	struct FSavedGameGenericData                  CustomData;                                        // 0x00C8(0x0018)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSavedGamePersistentLevelRecord) == 0x000008, "Wrong alignment on FSavedGamePersistentLevelRecord");
static_assert(sizeof(FSavedGamePersistentLevelRecord) == 0x0000E0, "Wrong size on FSavedGamePersistentLevelRecord");
static_assert(offsetof(FSavedGamePersistentLevelRecord, CustomData) == 0x0000C8, "Member 'FSavedGamePersistentLevelRecord::CustomData' has a wrong offset!");

// ScriptStruct SavedGame.SavedGameStandaloneGenericData
// 0x0018 (0x0030 - 0x0018)
struct FSavedGameStandaloneGenericData : public FSavedGameGenericData
{
public:
	uint8                                         Pad_18[0x18];                                      // 0x0018(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSavedGameStandaloneGenericData) == 0x000008, "Wrong alignment on FSavedGameStandaloneGenericData");
static_assert(sizeof(FSavedGameStandaloneGenericData) == 0x000030, "Wrong size on FSavedGameStandaloneGenericData");

// ScriptStruct SavedGame.SavedGameStandaloneObjectData
// 0x0000 (0x0030 - 0x0030)
struct FSavedGameStandaloneObjectData final : public FSavedGameStandaloneGenericData
{
};
static_assert(alignof(FSavedGameStandaloneObjectData) == 0x000008, "Wrong alignment on FSavedGameStandaloneObjectData");
static_assert(sizeof(FSavedGameStandaloneObjectData) == 0x000030, "Wrong size on FSavedGameStandaloneObjectData");

}

