#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DayAndNight

#include "Basic.hpp"

#include "Enum_DayAndNight_SnowIntensity_structs.hpp"
#include "Enum_DayAndNight_WindTypes_structs.hpp"
#include "Enum_DayAndNight_RainIntensity_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_DayAndNight.BP_DayAndNight_C.Wind
// 0x0188 (0x0188 - 0x0000)
struct BP_DayAndNight_C_Wind final
{
public:
	bool                                          Manual_Curve;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Construction;                                      // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Change_Factor;                                     // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Base_Value_To_Change;                              // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Value__ref_;                               // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Value;                                     // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Value__ref_;                                // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Target_Value;                                      // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Time_Min;                                   // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Time_Max;                                   // 0x0050(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Timer__ref_;                                // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Timer;                                      // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Speed__ref_;                                // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Change_Speed;                                      // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clamp_Values;                                      // 0x0078(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Clamp_Min;                                         // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Clamp_Max;                                         // 0x0088(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DeltaTime;                                         // 0x0090(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_NewChangeTime;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        L_NewTargetValue;                                  // 0x00A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable;                                // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue;                          // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetGameTimeSinceCreation_ReturnValue;     // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableGet_Current_Value__ref__ImplicitCast; // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_ReturnValue; // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue_2;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatFromStream_ReturnValue;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast; // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_A_ImplicitCast;       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSetRef_Value_ImplicitCast;          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast; // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_L_NewChangeTime_ImplicitCast;   // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_A_ImplicitCast;     // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_Wind) == 0x000008, "Wrong alignment on BP_DayAndNight_C_Wind");
static_assert(sizeof(BP_DayAndNight_C_Wind) == 0x000188, "Wrong size on BP_DayAndNight_C_Wind");
static_assert(offsetof(BP_DayAndNight_C_Wind, Manual_Curve) == 0x000000, "Member 'BP_DayAndNight_C_Wind::Manual_Curve' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Curve) == 0x000008, "Member 'BP_DayAndNight_C_Wind::Curve' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Construction) == 0x000010, "Member 'BP_DayAndNight_C_Wind::Construction' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Factor) == 0x000018, "Member 'BP_DayAndNight_C_Wind::Change_Factor' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Base_Value_To_Change) == 0x000020, "Member 'BP_DayAndNight_C_Wind::Base_Value_To_Change' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Current_Value__ref_) == 0x000028, "Member 'BP_DayAndNight_C_Wind::Current_Value__ref_' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Current_Value) == 0x000030, "Member 'BP_DayAndNight_C_Wind::Current_Value' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Target_Value__ref_) == 0x000038, "Member 'BP_DayAndNight_C_Wind::Target_Value__ref_' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Target_Value) == 0x000040, "Member 'BP_DayAndNight_C_Wind::Target_Value' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Time_Min) == 0x000048, "Member 'BP_DayAndNight_C_Wind::Change_Time_Min' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Time_Max) == 0x000050, "Member 'BP_DayAndNight_C_Wind::Change_Time_Max' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Timer__ref_) == 0x000058, "Member 'BP_DayAndNight_C_Wind::Change_Timer__ref_' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Timer) == 0x000060, "Member 'BP_DayAndNight_C_Wind::Change_Timer' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Speed__ref_) == 0x000068, "Member 'BP_DayAndNight_C_Wind::Change_Speed__ref_' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Change_Speed) == 0x000070, "Member 'BP_DayAndNight_C_Wind::Change_Speed' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Clamp_Values) == 0x000078, "Member 'BP_DayAndNight_C_Wind::Clamp_Values' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Clamp_Min) == 0x000080, "Member 'BP_DayAndNight_C_Wind::Clamp_Min' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Clamp_Max) == 0x000088, "Member 'BP_DayAndNight_C_Wind::Clamp_Max' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, DeltaTime) == 0x000090, "Member 'BP_DayAndNight_C_Wind::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, L_NewChangeTime) == 0x000098, "Member 'BP_DayAndNight_C_Wind::L_NewChangeTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, L_NewTargetValue) == 0x0000A0, "Member 'BP_DayAndNight_C_Wind::L_NewTargetValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_DayAndNight_C_Wind::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Not_PreBool_ReturnValue) == 0x0000A9, "Member 'BP_DayAndNight_C_Wind::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_BooleanAND_ReturnValue) == 0x0000AA, "Member 'BP_DayAndNight_C_Wind::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Temp_byte_Variable) == 0x0000AB, "Member 'BP_DayAndNight_C_Wind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x0000AC, "Member 'BP_DayAndNight_C_Wind::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Abs_ReturnValue) == 0x0000B0, "Member 'BP_DayAndNight_C_Wind::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_DayAndNight_C_Wind::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_FInterpTo_Constant_ReturnValue) == 0x0000C0, "Member 'BP_DayAndNight_C_Wind::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, Temp_bool_Variable) == 0x0000C8, "Member 'BP_DayAndNight_C_Wind::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_GetGameTimeSinceCreation_ReturnValue) == 0x0000CC, "Member 'BP_DayAndNight_C_Wind::CallFunc_GetGameTimeSinceCreation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0000D0, "Member 'BP_DayAndNight_C_Wind::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_GetFloatValue_ReturnValue) == 0x0000D8, "Member 'BP_DayAndNight_C_Wind::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, K2Node_VariableGet_Current_Value__ref__ImplicitCast) == 0x0000E0, "Member 'BP_DayAndNight_C_Wind::K2Node_VariableGet_Current_Value__ref__ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_RandomFloatInRangeFromStream_ReturnValue) == 0x0000E8, "Member 'BP_DayAndNight_C_Wind::CallFunc_RandomFloatInRangeFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Abs_ReturnValue_1) == 0x0000F0, "Member 'BP_DayAndNight_C_Wind::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000F8, "Member 'BP_DayAndNight_C_Wind::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Abs_ReturnValue_2) == 0x000100, "Member 'BP_DayAndNight_C_Wind::CallFunc_Abs_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000108, "Member 'BP_DayAndNight_C_Wind::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_RandomFloatFromStream_ReturnValue) == 0x000110, "Member 'BP_DayAndNight_C_Wind::CallFunc_RandomFloatFromStream_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000118, "Member 'BP_DayAndNight_C_Wind::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000120, "Member 'BP_DayAndNight_C_Wind::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, K2Node_Select_Default) == 0x000128, "Member 'BP_DayAndNight_C_Wind::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000130, "Member 'BP_DayAndNight_C_Wind::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000138, "Member 'BP_DayAndNight_C_Wind::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_FClamp_ReturnValue) == 0x000140, "Member 'BP_DayAndNight_C_Wind::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, K2Node_Select_Default_1) == 0x000148, "Member 'BP_DayAndNight_C_Wind::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast) == 0x000150, "Member 'BP_DayAndNight_C_Wind::CallFunc_RandomFloatInRangeFromStream_Min_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Divide_DoubleDouble_A_ImplicitCast) == 0x000158, "Member 'BP_DayAndNight_C_Wind::CallFunc_Divide_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000160, "Member 'BP_DayAndNight_C_Wind::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, K2Node_VariableSetRef_Value_ImplicitCast) == 0x000168, "Member 'BP_DayAndNight_C_Wind::K2Node_VariableSetRef_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast) == 0x000170, "Member 'BP_DayAndNight_C_Wind::CallFunc_RandomFloatInRangeFromStream_Max_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, K2Node_VariableSet_L_NewChangeTime_ImplicitCast) == 0x000178, "Member 'BP_DayAndNight_C_Wind::K2Node_VariableSet_L_NewChangeTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Wind, CallFunc_Subtract_DoubleDouble_A_ImplicitCast) == 0x000180, "Member 'BP_DayAndNight_C_Wind::CallFunc_Subtract_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.UserConstructionScript
// 0x00D8 (0x00D8 - 0x0000)
struct BP_DayAndNight_C_UserConstructionScript final
{
public:
	double                                        Temp_real_Variable;                                // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_RainIntensity                Temp_byte_Variable;                                // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_5;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_SnowIntensity                Temp_byte_Variable_1;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x005A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B[0x5];                                       // 0x005B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput; // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1; // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	TScriptInterface<class IBlendableInterface>   CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_2; // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_RandomInteger_ReturnValue;                // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_Select_Default_2;                           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_DayAndNight_C_UserConstructionScript");
static_assert(sizeof(BP_DayAndNight_C_UserConstructionScript) == 0x0000D8, "Wrong size on BP_DayAndNight_C_UserConstructionScript");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable) == 0x000000, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_1) == 0x000008, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_2) == 0x000010, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_3) == 0x000018, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_4) == 0x000020, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_byte_Variable) == 0x000028, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_5) == 0x000030, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_6) == 0x000038, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_7) == 0x000040, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_8) == 0x000048, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_real_Variable_9) == 0x000050, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_bool_Variable) == 0x000058, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, Temp_byte_Variable_1) == 0x000059, "Member 'BP_DayAndNight_C_UserConstructionScript::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x00005A, "Member 'BP_DayAndNight_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, K2Node_Select_Default) == 0x000060, "Member 'BP_DayAndNight_C_UserConstructionScript::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000068, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_SelectFloat_ReturnValue) == 0x000070, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000078, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput) == 0x000080, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000090, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1) == 0x000098, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_2) == 0x0000A8, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_AddOrUpdateBlendable_InBlendableObject_CastInput_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, K2Node_Select_Default_1) == 0x0000B8, "Member 'BP_DayAndNight_C_UserConstructionScript::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_SelectFloat_ReturnValue_1) == 0x0000C0, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_RandomInteger_ReturnValue) == 0x0000C8, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_RandomInteger_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, K2Node_Select_Default_2) == 0x0000CC, "Member 'BP_DayAndNight_C_UserConstructionScript::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UserConstructionScript, CallFunc_SelectFloat_ReturnValue_2) == 0x0000D0, "Member 'BP_DayAndNight_C_UserConstructionScript::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.UpdateFakeLight
// 0x0078 (0x0078 - 0x0000)
struct BP_DayAndNight_C_UpdateFakeLight final
{
public:
	class FName                                   CallFunc_MakeLiteralName_ReturnValue;              // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_MakeLiteralName_ReturnValue_1;            // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_1;            // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue_2;            // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0058(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast;    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_1;  // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_2;  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_UpdateFakeLight) == 0x000008, "Wrong alignment on BP_DayAndNight_C_UpdateFakeLight");
static_assert(sizeof(BP_DayAndNight_C_UpdateFakeLight) == 0x000078, "Wrong size on BP_DayAndNight_C_UpdateFakeLight");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_MakeLiteralName_ReturnValue) == 0x000000, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_MakeLiteralName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_MakeLiteralName_ReturnValue_1) == 0x000008, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_MakeLiteralName_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_RotateAngleAxis_ReturnValue) == 0x000010, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_RotateAngleAxis_ReturnValue_1) == 0x000028, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_RotateAngleAxis_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_RotateAngleAxis_ReturnValue_2) == 0x000040, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_RotateAngleAxis_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000058, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast) == 0x000068, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_1) == 0x00006C, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_UpdateFakeLight, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_2) == 0x000070, "Member 'BP_DayAndNight_C_UpdateFakeLight::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast_2' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.Snow Ground
// 0x0168 (0x0168 - 0x0000)
struct BP_DayAndNight_C_Snow_Ground final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_2;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_4;                              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_5;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x6];                                       // 0x005A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_6;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_8;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x008A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x008B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_4;       // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_1;                           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_5;       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_6;       // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_2;                           // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_7;       // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_10;                             // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_8;       // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_8;                              // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default_3;                           // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_4;                           // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_5;                           // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_6;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_7;                           // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_8;                           // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue_1;         // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_Snow_Ground) == 0x000008, "Wrong alignment on BP_DayAndNight_C_Snow_Ground");
static_assert(sizeof(BP_DayAndNight_C_Snow_Ground) == 0x000168, "Wrong size on BP_DayAndNight_C_Snow_Ground");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, DeltaTime) == 0x000000, "Member 'BP_DayAndNight_C_Snow_Ground::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable) == 0x000008, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable) == 0x000010, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_1) == 0x000018, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_1) == 0x000020, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_2) == 0x000028, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_3) == 0x000030, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_2) == 0x000038, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_4) == 0x000040, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_3) == 0x000048, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_5) == 0x000050, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_4) == 0x000058, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_5) == 0x000059, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_6) == 0x000060, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_7) == 0x000068, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_6) == 0x000070, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_7) == 0x000071, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_8) == 0x000078, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_9) == 0x000080, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000088, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000089, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x00008A, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x00008B, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default) == 0x000090, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x000098, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_4) == 0x000099, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_1) == 0x0000A0, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_5) == 0x0000A8, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_6) == 0x0000A9, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_2) == 0x0000B0, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x0000B8, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_7) == 0x0000C0, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_real_Variable_10) == 0x0000D0, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Greater_DoubleDouble_ReturnValue_8) == 0x0000D8, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Greater_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, Temp_bool_Variable_8) == 0x0000D9, "Member 'BP_DayAndNight_C_Snow_Ground::Temp_bool_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_BooleanAND_ReturnValue) == 0x0000DA, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_BooleanAND_ReturnValue_1) == 0x0000DB, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_3) == 0x0000E0, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_4) == 0x0000E8, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_5) == 0x0000F0, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x0000F8, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_FClamp_ReturnValue) == 0x000100, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000108, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000110, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000118, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_6) == 0x000120, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000128, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000130, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_FFloor_ReturnValue) == 0x000138, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000140, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_7) == 0x000148, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000150, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, K2Node_Select_Default_8) == 0x000158, "Member 'BP_DayAndNight_C_Snow_Ground::K2Node_Select_Default_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow_Ground, CallFunc_FInterpTo_Constant_ReturnValue_1) == 0x000160, "Member 'BP_DayAndNight_C_Snow_Ground::CallFunc_FInterpTo_Constant_ReturnValue_1' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.Snow
// 0x0050 (0x0050 - 0x0000)
struct BP_DayAndNight_C_Snow final
{
public:
	bool                                          Construction;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        DeltaTime;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_SnowIntensity                Temp_byte_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_Snow) == 0x000008, "Wrong alignment on BP_DayAndNight_C_Snow");
static_assert(sizeof(BP_DayAndNight_C_Snow) == 0x000050, "Wrong size on BP_DayAndNight_C_Snow");
static_assert(offsetof(BP_DayAndNight_C_Snow, Construction) == 0x000000, "Member 'BP_DayAndNight_C_Snow::Construction' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, DeltaTime) == 0x000008, "Member 'BP_DayAndNight_C_Snow::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, Temp_byte_Variable) == 0x000010, "Member 'BP_DayAndNight_C_Snow::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, Temp_real_Variable) == 0x000018, "Member 'BP_DayAndNight_C_Snow::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, Temp_real_Variable_1) == 0x000020, "Member 'BP_DayAndNight_C_Snow::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, Temp_real_Variable_2) == 0x000028, "Member 'BP_DayAndNight_C_Snow::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, Temp_real_Variable_3) == 0x000030, "Member 'BP_DayAndNight_C_Snow::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, Temp_real_Variable_4) == 0x000038, "Member 'BP_DayAndNight_C_Snow::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, K2Node_Select_Default) == 0x000040, "Member 'BP_DayAndNight_C_Snow::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Snow, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000048, "Member 'BP_DayAndNight_C_Snow::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.SetupWind
// 0x0038 (0x0038 - 0x0000)
struct BP_DayAndNight_C_SetupWind final
{
public:
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_SetupWind) == 0x000008, "Wrong alignment on BP_DayAndNight_C_SetupWind");
static_assert(sizeof(BP_DayAndNight_C_SetupWind) == 0x000038, "Wrong size on BP_DayAndNight_C_SetupWind");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, Temp_byte_Variable) == 0x000000, "Member 'BP_DayAndNight_C_SetupWind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, Temp_real_Variable) == 0x000008, "Member 'BP_DayAndNight_C_SetupWind::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, Temp_real_Variable_1) == 0x000010, "Member 'BP_DayAndNight_C_SetupWind::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, Temp_real_Variable_2) == 0x000018, "Member 'BP_DayAndNight_C_SetupWind::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, Temp_real_Variable_3) == 0x000020, "Member 'BP_DayAndNight_C_SetupWind::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, Temp_real_Variable_4) == 0x000028, "Member 'BP_DayAndNight_C_SetupWind::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetupWind, K2Node_Select_Default) == 0x000030, "Member 'BP_DayAndNight_C_SetupWind::K2Node_Select_Default' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.SetSunMoon
// 0x0240 (0x0240 - 0x0000)
struct BP_DayAndNight_C_SetSunMoon final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Construction;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue;              // 0x0060(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_2;                // 0x0078(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0091(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_2;                // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_3;                // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue_1;          // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_4;                // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_3;                // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_ComposeRotators_ReturnValue_1;            // 0x00F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               K2Node_Select_Default;                             // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FHitResult                             CallFunc_K2_SetRelativeRotation_SweepHitResult;    // 0x0128(0x00F8)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0220(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_1;         // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast;             // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_2;         // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast_3;         // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Yaw_ImplicitCast_1;           // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_SetSunMoon) == 0x000008, "Wrong alignment on BP_DayAndNight_C_SetSunMoon");
static_assert(sizeof(BP_DayAndNight_C_SetSunMoon) == 0x000240, "Wrong size on BP_DayAndNight_C_SetSunMoon");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, Delta) == 0x000000, "Member 'BP_DayAndNight_C_SetSunMoon::Delta' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, Construction) == 0x000008, "Member 'BP_DayAndNight_C_SetSunMoon::Construction' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_ReturnValue) == 0x000010, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000028, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, Temp_bool_Variable) == 0x000038, "Member 'BP_DayAndNight_C_SetSunMoon::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_SelectFloat_ReturnValue) == 0x000040, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_ReturnValue_1) == 0x000048, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_ComposeRotators_ReturnValue) == 0x000060, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_ComposeRotators_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_ReturnValue_2) == 0x000078, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000091, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000092, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_SelectFloat_ReturnValue_1) == 0x0000A0, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_SelectFloat_ReturnValue_2) == 0x0000A8, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_SelectFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000B0, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x0000B8, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_SelectFloat_ReturnValue_3) == 0x0000C0, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_SelectFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Less_DoubleDouble_ReturnValue_1) == 0x0000C8, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Less_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x0000D0, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_SelectFloat_ReturnValue_4) == 0x0000D8, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_SelectFloat_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_ReturnValue_3) == 0x0000E0, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_ComposeRotators_ReturnValue_1) == 0x0000F8, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_ComposeRotators_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, K2Node_Select_Default) == 0x000110, "Member 'BP_DayAndNight_C_SetSunMoon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_K2_SetRelativeRotation_SweepHitResult) == 0x000128, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_K2_SetRelativeRotation_SweepHitResult' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000220, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000228, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_Pitch_ImplicitCast_1) == 0x00022C, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_Pitch_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_Yaw_ImplicitCast) == 0x000230, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_Yaw_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_Pitch_ImplicitCast_2) == 0x000234, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_Pitch_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_Pitch_ImplicitCast_3) == 0x000238, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_Pitch_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetSunMoon, CallFunc_MakeRotator_Yaw_ImplicitCast_1) == 0x00023C, "Member 'BP_DayAndNight_C_SetSunMoon::CallFunc_MakeRotator_Yaw_ImplicitCast_1' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.SetLightParameters
// 0x0050 (0x0050 - 0x0000)
struct BP_DayAndNight_C_SetLightParameters final
{
public:
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetLightColor_ReturnValue;                // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Multiply_LinearColorFloat_ReturnValue;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast; // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetVolumetricFogExtinctionScale_NewValue_ImplicitCast; // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_A_ImplicitCast;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_SetFieldsInStruct_AmbientCubemapIntensity_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_SetLightParameters) == 0x000008, "Wrong alignment on BP_DayAndNight_C_SetLightParameters");
static_assert(sizeof(BP_DayAndNight_C_SetLightParameters) == 0x000050, "Wrong size on BP_DayAndNight_C_SetLightParameters");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000000, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_GetLightColor_ReturnValue) == 0x000010, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_GetLightColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_Multiply_LinearColorFloat_ReturnValue) == 0x000020, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_Multiply_LinearColorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000030, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast) == 0x000038, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_SetVolumetricFogExtinctionScale_NewValue_ImplicitCast) == 0x00003C, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_SetVolumetricFogExtinctionScale_NewValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, CallFunc_Multiply_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'BP_DayAndNight_C_SetLightParameters::CallFunc_Multiply_DoubleDouble_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetLightParameters, K2Node_SetFieldsInStruct_AmbientCubemapIntensity_ImplicitCast) == 0x000048, "Member 'BP_DayAndNight_C_SetLightParameters::K2Node_SetFieldsInStruct_AmbientCubemapIntensity_ImplicitCast' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.SetDynamicWind
// 0x0130 (0x0130 - 0x0000)
struct BP_DayAndNight_C_SetDynamicWind final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Construction;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable;                                // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable_1;                              // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable_2;                              // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable_3;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable_4;                              // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    Temp_byte_Variable_5;                              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_1;                         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_2;                         // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_3;                         // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_4;                         // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_5;                         // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_6;                         // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_7;                         // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_8;                         // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_9;                         // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_10;                        // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_11;                        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_12;                        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_13;                        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_14;                        // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_15;                        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_16;                        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_17;                        // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_18;                        // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_19;                        // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_20;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_21;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_22;                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_23;                        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_24;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_25;                        // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_26;                        // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_27;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_28;                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Array_Get_Item_29;                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0108(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_2;                           // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_3;                           // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_4;                           // 0x0120(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_5;                           // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_SetDynamicWind) == 0x000008, "Wrong alignment on BP_DayAndNight_C_SetDynamicWind");
static_assert(sizeof(BP_DayAndNight_C_SetDynamicWind) == 0x000130, "Wrong size on BP_DayAndNight_C_SetDynamicWind");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, DeltaTime) == 0x000000, "Member 'BP_DayAndNight_C_SetDynamicWind::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Construction) == 0x000008, "Member 'BP_DayAndNight_C_SetDynamicWind::Construction' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Temp_byte_Variable) == 0x000009, "Member 'BP_DayAndNight_C_SetDynamicWind::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Temp_byte_Variable_1) == 0x00000A, "Member 'BP_DayAndNight_C_SetDynamicWind::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Temp_byte_Variable_2) == 0x00000B, "Member 'BP_DayAndNight_C_SetDynamicWind::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Temp_byte_Variable_3) == 0x00000C, "Member 'BP_DayAndNight_C_SetDynamicWind::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Temp_byte_Variable_4) == 0x00000D, "Member 'BP_DayAndNight_C_SetDynamicWind::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, Temp_byte_Variable_5) == 0x00000E, "Member 'BP_DayAndNight_C_SetDynamicWind::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item) == 0x000010, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_1) == 0x000018, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_2) == 0x000020, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_3) == 0x000028, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_4) == 0x000030, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_5) == 0x000038, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_6) == 0x000040, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_7) == 0x000048, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_8) == 0x000050, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_9) == 0x000058, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_9' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_10) == 0x000060, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_10' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_11) == 0x000068, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_11' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_12) == 0x000070, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_12' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_13) == 0x000078, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_13' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_14) == 0x000080, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_14' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_15) == 0x000088, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_15' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_16) == 0x000090, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_16' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_17) == 0x000098, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_17' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_18) == 0x0000A0, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_18' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_19) == 0x0000A8, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_19' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_20) == 0x0000B0, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_20' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_21) == 0x0000B8, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_21' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_22) == 0x0000C0, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_22' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_23) == 0x0000C8, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_23' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_24) == 0x0000D0, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_24' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_25) == 0x0000D8, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_25' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_26) == 0x0000E0, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_26' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_27) == 0x0000E8, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_27' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_28) == 0x0000F0, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_28' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, CallFunc_Array_Get_Item_29) == 0x0000F8, "Member 'BP_DayAndNight_C_SetDynamicWind::CallFunc_Array_Get_Item_29' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, K2Node_Select_Default) == 0x000100, "Member 'BP_DayAndNight_C_SetDynamicWind::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, K2Node_Select_Default_1) == 0x000108, "Member 'BP_DayAndNight_C_SetDynamicWind::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, K2Node_Select_Default_2) == 0x000110, "Member 'BP_DayAndNight_C_SetDynamicWind::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, K2Node_Select_Default_3) == 0x000118, "Member 'BP_DayAndNight_C_SetDynamicWind::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, K2Node_Select_Default_4) == 0x000120, "Member 'BP_DayAndNight_C_SetDynamicWind::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetDynamicWind, K2Node_Select_Default_5) == 0x000128, "Member 'BP_DayAndNight_C_SetDynamicWind::K2Node_Select_Default_5' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.RefreshMaterial
// 0x01A8 (0x01A8 - 0x0000)
struct BP_DayAndNight_C_RefreshMaterial final
{
public:
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_ColorToLinearColor_ReturnValue;      // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue_1;    // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue;         // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue;            // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Abs_ReturnValue;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetClampedLinearColorValue_ReturnValue;   // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Abs_ReturnValue_1;                        // 0x00B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_ReturnValue_1;          // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x00C8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll_1;                      // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch_1;                     // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw_1;                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Conv_RotatorToVector_ReturnValue_1;       // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetClampedLinearColorValue_ReturnValue_1; // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetClampedLinearColorValue_ReturnValue_2; // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0158(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0160(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeUnclamped_Value_ImplicitCast;     // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_1; // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_2; // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast; // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_3; // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_4; // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_MakeRotator_Pitch_ImplicitCast;           // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast_1; // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast_2; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_5; // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast_6; // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_RefreshMaterial) == 0x000008, "Wrong alignment on BP_DayAndNight_C_RefreshMaterial");
static_assert(sizeof(BP_DayAndNight_C_RefreshMaterial) == 0x0001A8, "Wrong size on BP_DayAndNight_C_RefreshMaterial");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_IsValid_ReturnValue) == 0x000000, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Conv_ColorToLinearColor_ReturnValue) == 0x000004, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Conv_ColorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x000018, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_K2_GetComponentRotation_ReturnValue_1) == 0x000030, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_K2_GetComponentRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_BreakRotator_Roll) == 0x000048, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_BreakRotator_Pitch) == 0x00004C, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_BreakRotator_Yaw) == 0x000050, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Conv_RotatorToVector_ReturnValue) == 0x000058, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Conv_RotatorToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_MapRangeUnclamped_ReturnValue) == 0x000070, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_MapRangeUnclamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x000078, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Abs_ReturnValue) == 0x000088, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_GetClampedLinearColorValue_ReturnValue) == 0x000090, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_GetClampedLinearColorValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Lerp_ReturnValue) == 0x0000A0, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Less_DoubleDouble_ReturnValue) == 0x0000A8, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Abs_ReturnValue_1) == 0x0000B0, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Abs_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SelectFloat_ReturnValue) == 0x0000B8, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_MapRangeUnclamped_ReturnValue_1) == 0x0000C0, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_MapRangeUnclamped_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_K2_GetActorRotation_ReturnValue) == 0x0000C8, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_BreakRotator_Roll_1) == 0x0000E0, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_BreakRotator_Roll_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_BreakRotator_Pitch_1) == 0x0000E4, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_BreakRotator_Pitch_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_BreakRotator_Yaw_1) == 0x0000E8, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_BreakRotator_Yaw_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_MakeRotator_ReturnValue) == 0x0000F0, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Conv_RotatorToVector_ReturnValue_1) == 0x000108, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Conv_RotatorToVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x000120, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_GetClampedLinearColorValue_ReturnValue_1) == 0x000130, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_GetClampedLinearColorValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_GetClampedLinearColorValue_ReturnValue_2) == 0x000140, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_GetClampedLinearColorValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000150, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_FClamp_ReturnValue) == 0x000158, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_LinearColorLerp_ReturnValue) == 0x000160, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_MapRangeUnclamped_Value_ImplicitCast) == 0x000170, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_MapRangeUnclamped_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000178, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast_1) == 0x00017C, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast_2) == 0x000180, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast) == 0x000184, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast_3) == 0x000188, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast_4) == 0x00018C, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_MakeRotator_Pitch_ImplicitCast) == 0x000190, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_MakeRotator_Pitch_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast_1) == 0x000194, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast_2) == 0x000198, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_GetClampedLinearColorValue_InTime_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x00019C, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast_5) == 0x0001A0, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_RefreshMaterial, CallFunc_SetScalarParameterValue_Value_ImplicitCast_6) == 0x0001A4, "Member 'BP_DayAndNight_C_RefreshMaterial::CallFunc_SetScalarParameterValue_Value_ImplicitCast_6' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_DayAndNight_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_DayAndNight_C_ReceiveTick");
static_assert(sizeof(BP_DayAndNight_C_ReceiveTick) == 0x000004, "Wrong size on BP_DayAndNight_C_ReceiveTick");
static_assert(offsetof(BP_DayAndNight_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_DayAndNight_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.Rain Wetness
// 0x0080 (0x0080 - 0x0000)
struct BP_DayAndNight_C_Rain_Wetness final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FFloor_ReturnValue;                       // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_2;                           // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_Rain_Wetness) == 0x000008, "Wrong alignment on BP_DayAndNight_C_Rain_Wetness");
static_assert(sizeof(BP_DayAndNight_C_Rain_Wetness) == 0x000080, "Wrong size on BP_DayAndNight_C_Rain_Wetness");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, DeltaTime) == 0x000000, "Member 'BP_DayAndNight_C_Rain_Wetness::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, Temp_bool_Variable) == 0x000008, "Member 'BP_DayAndNight_C_Rain_Wetness::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, Temp_real_Variable) == 0x000010, "Member 'BP_DayAndNight_C_Rain_Wetness::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, Temp_bool_Variable_1) == 0x000018, "Member 'BP_DayAndNight_C_Rain_Wetness::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, Temp_bool_Variable_2) == 0x000019, "Member 'BP_DayAndNight_C_Rain_Wetness::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x00001A, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, K2Node_Select_Default) == 0x000020, "Member 'BP_DayAndNight_C_Rain_Wetness::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000030, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_FFloor_ReturnValue) == 0x000038, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_FFloor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000040, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, K2Node_Select_Default_1) == 0x000048, "Member 'BP_DayAndNight_C_Rain_Wetness::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000050, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Multiply_IntFloat_ReturnValue) == 0x000058, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000060, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000068, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, K2Node_Select_Default_2) == 0x000070, "Member 'BP_DayAndNight_C_Rain_Wetness::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain_Wetness, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000078, "Member 'BP_DayAndNight_C_Rain_Wetness::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.Rain
// 0x0048 (0x0048 - 0x0000)
struct BP_DayAndNight_C_Rain final
{
public:
	double                                        DeltaTime;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_RainIntensity                Temp_byte_Variable;                                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FInterpTo_Constant_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_Rain) == 0x000008, "Wrong alignment on BP_DayAndNight_C_Rain");
static_assert(sizeof(BP_DayAndNight_C_Rain) == 0x000048, "Wrong size on BP_DayAndNight_C_Rain");
static_assert(offsetof(BP_DayAndNight_C_Rain, DeltaTime) == 0x000000, "Member 'BP_DayAndNight_C_Rain::DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, Temp_byte_Variable) == 0x000008, "Member 'BP_DayAndNight_C_Rain::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, Temp_real_Variable) == 0x000010, "Member 'BP_DayAndNight_C_Rain::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, Temp_real_Variable_1) == 0x000018, "Member 'BP_DayAndNight_C_Rain::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, Temp_real_Variable_2) == 0x000020, "Member 'BP_DayAndNight_C_Rain::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, Temp_real_Variable_3) == 0x000028, "Member 'BP_DayAndNight_C_Rain::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, Temp_real_Variable_4) == 0x000030, "Member 'BP_DayAndNight_C_Rain::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, K2Node_Select_Default) == 0x000038, "Member 'BP_DayAndNight_C_Rain::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_Rain, CallFunc_FInterpTo_Constant_ReturnValue) == 0x000040, "Member 'BP_DayAndNight_C_Rain::CallFunc_FInterpTo_Constant_ReturnValue' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.ExecuteUbergraph_BP_DayAndNight
// 0x0048 (0x0048 - 0x0000)
struct BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsDedicatedServer_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_ComponentBoundEvent_DeltaTime;              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x000D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_CheckIfSelected_ReturnValue;              // 0x000E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F[0x1];                                        // 0x000F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetWeatherParameters_Delta_ImplicitCast;  // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetSunMoon_Delta_ImplicitCast;            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetWeatherParameters_Delta_ImplicitCast_1; // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_A_ImplicitCast;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight) == 0x000008, "Wrong alignment on BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight");
static_assert(sizeof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight) == 0x000048, "Wrong size on BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, EntryPoint) == 0x000000, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_IsDedicatedServer_ReturnValue) == 0x000004, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_IsDedicatedServer_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_IsValid_ReturnValue) == 0x000005, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, K2Node_ComponentBoundEvent_DeltaTime) == 0x000008, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::K2Node_ComponentBoundEvent_DeltaTime' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_IsValid_ReturnValue_1) == 0x00000C, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00000D, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_CheckIfSelected_ReturnValue) == 0x00000E, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_CheckIfSelected_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, K2Node_Event_DeltaSeconds) == 0x000010, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000018, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_IsValid_ReturnValue_2) == 0x000020, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_SetWeatherParameters_Delta_ImplicitCast) == 0x000028, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_SetWeatherParameters_Delta_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_SetSunMoon_Delta_ImplicitCast) == 0x000030, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_SetSunMoon_Delta_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_SetWeatherParameters_Delta_ImplicitCast_1) == 0x000038, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_SetWeatherParameters_Delta_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight, CallFunc_Add_DoubleDouble_A_ImplicitCast) == 0x000040, "Member 'BP_DayAndNight_C_ExecuteUbergraph_BP_DayAndNight::CallFunc_Add_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.BndEvt__BP_DayAndNight_LiveLink (For Editor Update)_K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature) == 0x000004, "Wrong alignment on BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature");
static_assert(sizeof(BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature) == 0x000004, "Wrong size on BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature");
static_assert(offsetof(BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature, DeltaTime) == 0x000000, "Member 'BP_DayAndNight_C_BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature::DeltaTime' has a wrong offset!");

// Function BP_DayAndNight.BP_DayAndNight_C.SetWeatherParameters
// 0x01D0 (0x01D0 - 0x0000)
struct BP_DayAndNight_C_SetWeatherParameters final
{
public:
	double                                        Delta;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Construction;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue;     // 0x000C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraParameterCollectionInstance*    CallFunc_GetNiagaraParameterCollection_ReturnValue; // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Conv_VectorToLinearColor_ReturnValue_1;   // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable;                                // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_1;                              // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_RainIntensity                Temp_byte_Variable;                                // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable_5;                              // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_6;                              // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_7;                              // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_8;                              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_9;                              // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_SnowIntensity                Temp_byte_Variable_1;                              // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_10;                             // 0x009C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_11;                             // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_12;                             // 0x00AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_Select_Default;                             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default_1;                           // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_1;       // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_2;       // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue_3;       // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_2;                           // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_13;                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_3;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraParameterCollectionInstance*    CallFunc_GetNiagaraParameterCollection_ReturnValue_1; // 0x00E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraParameterCollectionInstance*    CallFunc_GetNiagaraParameterCollection_ReturnValue_2; // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x0118(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_2;                     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_3;                     // 0x0150(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_4;                           // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_5;                           // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UNiagaraParameterCollectionInstance*    CallFunc_GetNiagaraParameterCollection_ReturnValue_3; // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_RotateAngleAxis_ReturnValue;              // 0x0178(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast; // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1; // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_2; // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast;               // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InValue_ImplicitCast;   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast_1;             // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InValue_ImplicitCast_1; // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_3; // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast;    // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InValue_ImplicitCast_2; // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_4; // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetFloatParameter_InValue_ImplicitCast_3; // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast_2;             // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Option_1_ImplicitCast_3;             // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_5; // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_6; // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_DayAndNight_C_SetWeatherParameters) == 0x000008, "Wrong alignment on BP_DayAndNight_C_SetWeatherParameters");
static_assert(sizeof(BP_DayAndNight_C_SetWeatherParameters) == 0x0001D0, "Wrong size on BP_DayAndNight_C_SetWeatherParameters");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Delta) == 0x000000, "Member 'BP_DayAndNight_C_SetWeatherParameters::Delta' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Construction) == 0x000008, "Member 'BP_DayAndNight_C_SetWeatherParameters::Construction' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Conv_VectorToLinearColor_ReturnValue) == 0x00000C, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Conv_VectorToLinearColor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_GetNiagaraParameterCollection_ReturnValue) == 0x000020, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_GetNiagaraParameterCollection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Conv_VectorToLinearColor_ReturnValue_1) == 0x000028, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Conv_VectorToLinearColor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable) == 0x000038, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_SwitchEnum_CmpSuccess) == 0x000040, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_1) == 0x000048, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_2) == 0x000050, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_3) == 0x000058, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_4) == 0x000060, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000068, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_byte_Variable) == 0x000069, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_5) == 0x000070, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_6) == 0x000078, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_6' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_7) == 0x000080, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_7' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_8) == 0x000088, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_8' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_9) == 0x000090, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_9' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_byte_Variable_1) == 0x000098, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_10) == 0x00009C, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_10' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_bool_Variable) == 0x0000A0, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_11) == 0x0000A4, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_11' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_bool_Variable_1) == 0x0000A8, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_12) == 0x0000AC, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_12' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_bool_Variable_2) == 0x0000B0, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Default) == 0x0000B8, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Default_1) == 0x0000C0, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x0000C8, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Greater_DoubleDouble_ReturnValue_1) == 0x0000C9, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Greater_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Greater_DoubleDouble_ReturnValue_2) == 0x0000CA, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Greater_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Greater_DoubleDouble_ReturnValue_3) == 0x0000CB, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Greater_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Default_2) == 0x0000CC, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_FClamp_ReturnValue) == 0x0000D0, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_real_Variable_13) == 0x0000D8, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_real_Variable_13' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Default_3) == 0x0000DC, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_GetNiagaraParameterCollection_ReturnValue_1) == 0x0000E0, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_GetNiagaraParameterCollection_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_FClamp_ReturnValue_1) == 0x0000E8, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_GetNiagaraParameterCollection_ReturnValue_2) == 0x0000F0, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_GetNiagaraParameterCollection_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, Temp_bool_Variable_3) == 0x0000F8, "Member 'BP_DayAndNight_C_SetWeatherParameters::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000100, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x000118, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Add_VectorVector_ReturnValue) == 0x000130, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_FClamp_ReturnValue_2) == 0x000148, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_FClamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_FClamp_ReturnValue_3) == 0x000150, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_FClamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Default_4) == 0x000158, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Default_5) == 0x00015C, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_GetNiagaraParameterCollection_ReturnValue_3) == 0x000160, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_GetNiagaraParameterCollection_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000168, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000170, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_RotateAngleAxis_ReturnValue) == 0x000178, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_RotateAngleAxis_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast) == 0x000190, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1) == 0x000194, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_2) == 0x000198, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Option_1_ImplicitCast) == 0x00019C, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Option_1_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetFloatParameter_InValue_ImplicitCast) == 0x0001A0, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetFloatParameter_InValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Option_1_ImplicitCast_1) == 0x0001A4, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Option_1_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetFloatParameter_InValue_ImplicitCast_1) == 0x0001A8, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetFloatParameter_InValue_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_3) == 0x0001AC, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast) == 0x0001B0, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_RotateAngleAxis_AngleDeg_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetFloatParameter_InValue_ImplicitCast_2) == 0x0001B4, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetFloatParameter_InValue_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_4) == 0x0001B8, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_4' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetFloatParameter_InValue_ImplicitCast_3) == 0x0001BC, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetFloatParameter_InValue_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Option_1_ImplicitCast_2) == 0x0001C0, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Option_1_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, K2Node_Select_Option_1_ImplicitCast_3) == 0x0001C4, "Member 'BP_DayAndNight_C_SetWeatherParameters::K2Node_Select_Option_1_ImplicitCast_3' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_5) == 0x0001C8, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_5' has a wrong offset!");
static_assert(offsetof(BP_DayAndNight_C_SetWeatherParameters, CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_6) == 0x0001CC, "Member 'BP_DayAndNight_C_SetWeatherParameters::CallFunc_SetScalarParameterValue_ParameterValue_ImplicitCast_6' has a wrong offset!");

}

