#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NavGrid

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "NavGrid_structs.hpp"


namespace SDK::Params
{

// Function NavGrid.GridMeshComponent.SetFromHexNavGrid
// 0x0018 (0x0018 - 0x0000)
struct GridMeshComponent_SetFromHexNavGrid final
{
public:
	const class AHexNavGrid*                      InHexNavGrid;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAxialCoords>                   OptionalRelevantCoords;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshComponent_SetFromHexNavGrid) == 0x000008, "Wrong alignment on GridMeshComponent_SetFromHexNavGrid");
static_assert(sizeof(GridMeshComponent_SetFromHexNavGrid) == 0x000018, "Wrong size on GridMeshComponent_SetFromHexNavGrid");
static_assert(offsetof(GridMeshComponent_SetFromHexNavGrid, InHexNavGrid) == 0x000000, "Member 'GridMeshComponent_SetFromHexNavGrid::InHexNavGrid' has a wrong offset!");
static_assert(offsetof(GridMeshComponent_SetFromHexNavGrid, OptionalRelevantCoords) == 0x000008, "Member 'GridMeshComponent_SetFromHexNavGrid::OptionalRelevantCoords' has a wrong offset!");

// Function NavGrid.GridMeshComponent.SetFromSquareNavGrid
// 0x0018 (0x0018 - 0x0000)
struct GridMeshComponent_SetFromSquareNavGrid final
{
public:
	const class ASquareNavGrid*                   InSquareNavGrid;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  OptionalRelevantCoords;                            // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshComponent_SetFromSquareNavGrid) == 0x000008, "Wrong alignment on GridMeshComponent_SetFromSquareNavGrid");
static_assert(sizeof(GridMeshComponent_SetFromSquareNavGrid) == 0x000018, "Wrong size on GridMeshComponent_SetFromSquareNavGrid");
static_assert(offsetof(GridMeshComponent_SetFromSquareNavGrid, InSquareNavGrid) == 0x000000, "Member 'GridMeshComponent_SetFromSquareNavGrid::InSquareNavGrid' has a wrong offset!");
static_assert(offsetof(GridMeshComponent_SetFromSquareNavGrid, OptionalRelevantCoords) == 0x000008, "Member 'GridMeshComponent_SetFromSquareNavGrid::OptionalRelevantCoords' has a wrong offset!");

// Function NavGrid.GridMeshComponent.SetRenderingOffset
// 0x0018 (0x0018 - 0x0000)
struct GridMeshComponent_SetRenderingOffset final
{
public:
	struct FVector                                InRenderingOffset;                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GridMeshComponent_SetRenderingOffset) == 0x000008, "Wrong alignment on GridMeshComponent_SetRenderingOffset");
static_assert(sizeof(GridMeshComponent_SetRenderingOffset) == 0x000018, "Wrong size on GridMeshComponent_SetRenderingOffset");
static_assert(offsetof(GridMeshComponent_SetRenderingOffset, InRenderingOffset) == 0x000000, "Member 'GridMeshComponent_SetRenderingOffset::InRenderingOffset' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Add_AxialCoordsAxialCoords
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords final
{
public:
	struct FAxialCoords                           A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords) == 0x000018, "Wrong size on NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_Add_AxialCoordsAxialCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Add_OffsetCoordsOffsetCoords
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords final
{
public:
	struct FOffsetCoords                          A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords) == 0x000018, "Wrong size on NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_Add_OffsetCoordsOffsetCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.AxialCoords_Invalid
// 0x0008 (0x0008 - 0x0000)
struct NavGridBlueprintLibrary_AxialCoords_Invalid final
{
public:
	struct FAxialCoords                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_AxialCoords_Invalid) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_AxialCoords_Invalid");
static_assert(sizeof(NavGridBlueprintLibrary_AxialCoords_Invalid) == 0x000008, "Wrong size on NavGridBlueprintLibrary_AxialCoords_Invalid");
static_assert(offsetof(NavGridBlueprintLibrary_AxialCoords_Invalid, ReturnValue) == 0x000000, "Member 'NavGridBlueprintLibrary_AxialCoords_Invalid::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.AxialCoords_IsValid
// 0x000C (0x000C - 0x0000)
struct NavGridBlueprintLibrary_AxialCoords_IsValid final
{
public:
	struct FAxialCoords                           AxialCoords;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_AxialCoords_IsValid) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_AxialCoords_IsValid");
static_assert(sizeof(NavGridBlueprintLibrary_AxialCoords_IsValid) == 0x00000C, "Wrong size on NavGridBlueprintLibrary_AxialCoords_IsValid");
static_assert(offsetof(NavGridBlueprintLibrary_AxialCoords_IsValid, AxialCoords) == 0x000000, "Member 'NavGridBlueprintLibrary_AxialCoords_IsValid::AxialCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_AxialCoords_IsValid, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_AxialCoords_IsValid::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Conv_AxialCoordsToIntPoint
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint final
{
public:
	struct FAxialCoords                           InAxialCoords;                                     // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint");
static_assert(sizeof(NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint) == 0x000010, "Wrong size on NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint, InAxialCoords) == 0x000000, "Member 'NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint::InAxialCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_Conv_AxialCoordsToIntPoint::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Conv_AxialCoordsToString
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_Conv_AxialCoordsToString final
{
public:
	struct FAxialCoords                           AxialCoords;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Conv_AxialCoordsToString) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_Conv_AxialCoordsToString");
static_assert(sizeof(NavGridBlueprintLibrary_Conv_AxialCoordsToString) == 0x000018, "Wrong size on NavGridBlueprintLibrary_Conv_AxialCoordsToString");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_AxialCoordsToString, AxialCoords) == 0x000000, "Member 'NavGridBlueprintLibrary_Conv_AxialCoordsToString::AxialCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_AxialCoordsToString, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_Conv_AxialCoordsToString::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Conv_IntPointToAxialCoords
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_Conv_IntPointToAxialCoords final
{
public:
	struct FIntPoint                              InIntPoint;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Conv_IntPointToAxialCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Conv_IntPointToAxialCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Conv_IntPointToAxialCoords) == 0x000010, "Wrong size on NavGridBlueprintLibrary_Conv_IntPointToAxialCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_IntPointToAxialCoords, InIntPoint) == 0x000000, "Member 'NavGridBlueprintLibrary_Conv_IntPointToAxialCoords::InIntPoint' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_IntPointToAxialCoords, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_Conv_IntPointToAxialCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Conv_IntPointToOffsetCoords
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords final
{
public:
	struct FIntPoint                              InIntPoint;                                        // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords) == 0x000010, "Wrong size on NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords, InIntPoint) == 0x000000, "Member 'NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords::InIntPoint' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_Conv_IntPointToOffsetCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Conv_OffsetCoordsToIntPoint
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint final
{
public:
	struct FOffsetCoords                          InOffsetCoords;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint");
static_assert(sizeof(NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint) == 0x000010, "Wrong size on NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint, InOffsetCoords) == 0x000000, "Member 'NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint::InOffsetCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_Conv_OffsetCoordsToIntPoint::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Conv_OffsetCoordsToString
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_Conv_OffsetCoordsToString final
{
public:
	struct FOffsetCoords                          OffsetCoords;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Conv_OffsetCoordsToString) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_Conv_OffsetCoordsToString");
static_assert(sizeof(NavGridBlueprintLibrary_Conv_OffsetCoordsToString) == 0x000018, "Wrong size on NavGridBlueprintLibrary_Conv_OffsetCoordsToString");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_OffsetCoordsToString, OffsetCoords) == 0x000000, "Member 'NavGridBlueprintLibrary_Conv_OffsetCoordsToString::OffsetCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Conv_OffsetCoordsToString, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_Conv_OffsetCoordsToString::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Equal_AxialCoordsAxialCoords
// 0x0014 (0x0014 - 0x0000)
struct NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords final
{
public:
	struct FAxialCoords                           A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords) == 0x000014, "Wrong size on NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_Equal_AxialCoordsAxialCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Equal_OffsetCoordsOffsetCoords
// 0x0014 (0x0014 - 0x0000)
struct NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords final
{
public:
	struct FOffsetCoords                          A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords) == 0x000014, "Wrong size on NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_Equal_OffsetCoordsOffsetCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.FindReachableTiles
// 0x0050 (0x0050 - 0x0000)
struct NavGridBlueprintLibrary_FindReachableTiles final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOffsetCoords>                  OutReachableTileCoords;                            // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0040(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_FindReachableTiles) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_FindReachableTiles");
static_assert(sizeof(NavGridBlueprintLibrary_FindReachableTiles) == 0x000050, "Wrong size on NavGridBlueprintLibrary_FindReachableTiles");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_FindReachableTiles::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, WorldLocation) == 0x000008, "Member 'NavGridBlueprintLibrary_FindReachableTiles::WorldLocation' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, Range) == 0x000020, "Member 'NavGridBlueprintLibrary_FindReachableTiles::Range' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, OutReachableTileCoords) == 0x000028, "Member 'NavGridBlueprintLibrary_FindReachableTiles::OutReachableTileCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, FilterClass) == 0x000038, "Member 'NavGridBlueprintLibrary_FindReachableTiles::FilterClass' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, Target) == 0x000040, "Member 'NavGridBlueprintLibrary_FindReachableTiles::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_FindReachableTiles, ReturnValue) == 0x000048, "Member 'NavGridBlueprintLibrary_FindReachableTiles::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetAllTileCoords
// 0x0020 (0x0020 - 0x0000)
struct NavGridBlueprintLibrary_GetAllTileCoords final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetAllTileCoords) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetAllTileCoords");
static_assert(sizeof(NavGridBlueprintLibrary_GetAllTileCoords) == 0x000020, "Wrong size on NavGridBlueprintLibrary_GetAllTileCoords");
static_assert(offsetof(NavGridBlueprintLibrary_GetAllTileCoords, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetAllTileCoords::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetAllTileCoords, Target) == 0x000008, "Member 'NavGridBlueprintLibrary_GetAllTileCoords::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetAllTileCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_GetAllTileCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetCoordsAtWorldLocation
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetCoordsAtWorldLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetCoordsAtWorldLocation) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetCoordsAtWorldLocation");
static_assert(sizeof(NavGridBlueprintLibrary_GetCoordsAtWorldLocation) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetCoordsAtWorldLocation");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsAtWorldLocation, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetCoordsAtWorldLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsAtWorldLocation, WorldLocation) == 0x000008, "Member 'NavGridBlueprintLibrary_GetCoordsAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsAtWorldLocation, Target) == 0x000020, "Member 'NavGridBlueprintLibrary_GetCoordsAtWorldLocation::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsAtWorldLocation, ReturnValue) == 0x000028, "Member 'NavGridBlueprintLibrary_GetCoordsAtWorldLocation::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetCoordsRange
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetCoordsRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetCoordsRange) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetCoordsRange");
static_assert(sizeof(NavGridBlueprintLibrary_GetCoordsRange) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetCoordsRange");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsRange, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetCoordsRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsRange, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetCoordsRange::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsRange, Range) == 0x000010, "Member 'NavGridBlueprintLibrary_GetCoordsRange::Range' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsRange, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_GetCoordsRange::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetCoordsRange, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_GetCoordsRange::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetHexNavGrid
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_GetHexNavGrid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHexNavGrid*                            ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetHexNavGrid) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetHexNavGrid");
static_assert(sizeof(NavGridBlueprintLibrary_GetHexNavGrid) == 0x000010, "Wrong size on NavGridBlueprintLibrary_GetHexNavGrid");
static_assert(offsetof(NavGridBlueprintLibrary_GetHexNavGrid, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetHexNavGrid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetHexNavGrid, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_GetHexNavGrid::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetNeighbourCoords
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_GetNeighbourCoords final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NeiIndex;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetNeighbourCoords) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetNeighbourCoords");
static_assert(sizeof(NavGridBlueprintLibrary_GetNeighbourCoords) == 0x000028, "Wrong size on NavGridBlueprintLibrary_GetNeighbourCoords");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoords, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetNeighbourCoords::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoords, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetNeighbourCoords::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoords, NeiIndex) == 0x000010, "Member 'NavGridBlueprintLibrary_GetNeighbourCoords::NeiIndex' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoords, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_GetNeighbourCoords::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoords, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_GetNeighbourCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetNeighbourCoordsInWorldDirection
// 0x0048 (0x0048 - 0x0000)
struct NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection");
static_assert(sizeof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection) == 0x000048, "Wrong size on NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection, WorldLocation) == 0x000008, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection::WorldLocation' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection, WorldDirection) == 0x000020, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection::WorldDirection' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection, Target) == 0x000038, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection, ReturnValue) == 0x000040, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetNeighbourCoordsInWorldDirection_Coords
// 0x0038 (0x0038 - 0x0000)
struct NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords");
static_assert(sizeof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords) == 0x000038, "Wrong size on NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords, WorldDirection) == 0x000010, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords::WorldDirection' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords, Target) == 0x000028, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords, ReturnValue) == 0x000030, "Member 'NavGridBlueprintLibrary_GetNeighbourCoordsInWorldDirection_Coords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetNeighboursCoords
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_GetNeighboursCoords final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetNeighboursCoords) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetNeighboursCoords");
static_assert(sizeof(NavGridBlueprintLibrary_GetNeighboursCoords) == 0x000028, "Wrong size on NavGridBlueprintLibrary_GetNeighboursCoords");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighboursCoords, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetNeighboursCoords::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighboursCoords, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetNeighboursCoords::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighboursCoords, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_GetNeighboursCoords::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetNeighboursCoords, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_GetNeighboursCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetRecastNavMesh
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_GetRecastNavMesh final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ARecastNavMesh*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetRecastNavMesh) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetRecastNavMesh");
static_assert(sizeof(NavGridBlueprintLibrary_GetRecastNavMesh) == 0x000010, "Wrong size on NavGridBlueprintLibrary_GetRecastNavMesh");
static_assert(offsetof(NavGridBlueprintLibrary_GetRecastNavMesh, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetRecastNavMesh::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRecastNavMesh, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_GetRecastNavMesh::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActor
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_GetRegisteredTileActor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetRegisteredTileActor) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetRegisteredTileActor");
static_assert(sizeof(NavGridBlueprintLibrary_GetRegisteredTileActor) == 0x000028, "Wrong size on NavGridBlueprintLibrary_GetRegisteredTileActor");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActor, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActor, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActor::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActor, ActorClass) == 0x000010, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActor::ActorClass' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActor, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActor::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActor, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActor::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActorCoords
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetRegisteredTileActorCoords final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           TileActor;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  OutTileActorCoords;                                // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetRegisteredTileActorCoords");
static_assert(sizeof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetRegisteredTileActorCoords");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorCoords::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords, TileActor) == 0x000008, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorCoords::TileActor' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords, OutTileActorCoords) == 0x000010, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorCoords::OutTileActorCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords, Target) == 0x000020, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorCoords::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorCoords, ReturnValue) == 0x000028, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActors
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetRegisteredTileActors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetRegisteredTileActors) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetRegisteredTileActors");
static_assert(sizeof(NavGridBlueprintLibrary_GetRegisteredTileActors) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetRegisteredTileActors");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActors, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActors, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActors::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActors, ActorClass) == 0x000010, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActors::ActorClass' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActors, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActors::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActors, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActors::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetRegisteredTileActorsInRange
// 0x0038 (0x0038 - 0x0000)
struct NavGridBlueprintLibrary_GetRegisteredTileActorsInRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  CoordsRange;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ReturnValue;                                       // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetRegisteredTileActorsInRange");
static_assert(sizeof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange) == 0x000038, "Wrong size on NavGridBlueprintLibrary_GetRegisteredTileActorsInRange");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorsInRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange, CoordsRange) == 0x000008, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorsInRange::CoordsRange' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange, ActorClass) == 0x000018, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorsInRange::ActorClass' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange, Target) == 0x000020, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorsInRange::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetRegisteredTileActorsInRange, ReturnValue) == 0x000028, "Member 'NavGridBlueprintLibrary_GetRegisteredTileActorsInRange::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetSquareNavGrid
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_GetSquareNavGrid final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASquareNavGrid*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetSquareNavGrid) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetSquareNavGrid");
static_assert(sizeof(NavGridBlueprintLibrary_GetSquareNavGrid) == 0x000010, "Wrong size on NavGridBlueprintLibrary_GetSquareNavGrid");
static_assert(offsetof(NavGridBlueprintLibrary_GetSquareNavGrid, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetSquareNavGrid::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetSquareNavGrid, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_GetSquareNavGrid::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileAreaClass
// 0x0020 (0x0020 - 0x0000)
struct NavGridBlueprintLibrary_GetTileAreaClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileAreaClass) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileAreaClass");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileAreaClass) == 0x000020, "Wrong size on NavGridBlueprintLibrary_GetTileAreaClass");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileAreaClass, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileAreaClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileAreaClass, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileAreaClass::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileAreaClass, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileAreaClass::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileAreaClass, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_GetTileAreaClass::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileCenter
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetTileCenter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileCenter) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileCenter");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileCenter) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetTileCenter");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileCenter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileCenter::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileCenter::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_GetTileCenter::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileCenter2D
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_GetTileCenter2D final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileCenter2D) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileCenter2D");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileCenter2D) == 0x000028, "Wrong size on NavGridBlueprintLibrary_GetTileCenter2D");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter2D, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileCenter2D::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter2D, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileCenter2D::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter2D, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileCenter2D::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenter2D, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_GetTileCenter2D::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileCenterAtWorldLocation
// 0x0040 (0x0040 - 0x0000)
struct NavGridBlueprintLibrary_GetTileCenterAtWorldLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0028(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileCenterAtWorldLocation) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileCenterAtWorldLocation");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileCenterAtWorldLocation) == 0x000040, "Wrong size on NavGridBlueprintLibrary_GetTileCenterAtWorldLocation");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenterAtWorldLocation, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileCenterAtWorldLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenterAtWorldLocation, WorldLocation) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileCenterAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenterAtWorldLocation, Target) == 0x000020, "Member 'NavGridBlueprintLibrary_GetTileCenterAtWorldLocation::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCenterAtWorldLocation, ReturnValue) == 0x000028, "Member 'NavGridBlueprintLibrary_GetTileCenterAtWorldLocation::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileCoordsRange
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetTileCoordsRange final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Range;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FOffsetCoords>                  ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileCoordsRange) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileCoordsRange");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileCoordsRange) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetTileCoordsRange");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCoordsRange, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileCoordsRange::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCoordsRange, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileCoordsRange::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCoordsRange, Range) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileCoordsRange::Range' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCoordsRange, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_GetTileCoordsRange::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileCoordsRange, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_GetTileCoordsRange::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileNormal
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetTileNormal final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileNormal) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileNormal");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileNormal) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetTileNormal");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileNormal, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileNormal::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileNormal, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileNormal::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileNormal, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileNormal::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileNormal, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_GetTileNormal::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileRotation
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_GetTileRotation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileRotation) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileRotation");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileRotation) == 0x000030, "Wrong size on NavGridBlueprintLibrary_GetTileRotation");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileRotation, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileRotation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileRotation, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileRotation::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileRotation, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileRotation::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileRotation, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_GetTileRotation::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.GetTileSize
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_GetTileSize final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_GetTileSize) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_GetTileSize");
static_assert(sizeof(NavGridBlueprintLibrary_GetTileSize) == 0x000018, "Wrong size on NavGridBlueprintLibrary_GetTileSize");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileSize, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_GetTileSize::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileSize, Target) == 0x000008, "Member 'NavGridBlueprintLibrary_GetTileSize::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_GetTileSize, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_GetTileSize::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.HasLineOfSight_Square
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_HasLineOfSight_Square final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          StartCoords;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          EndCoords;                                         // 0x0010(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_HasLineOfSight_Square) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_HasLineOfSight_Square");
static_assert(sizeof(NavGridBlueprintLibrary_HasLineOfSight_Square) == 0x000028, "Wrong size on NavGridBlueprintLibrary_HasLineOfSight_Square");
static_assert(offsetof(NavGridBlueprintLibrary_HasLineOfSight_Square, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_HasLineOfSight_Square::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasLineOfSight_Square, StartCoords) == 0x000008, "Member 'NavGridBlueprintLibrary_HasLineOfSight_Square::StartCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasLineOfSight_Square, EndCoords) == 0x000010, "Member 'NavGridBlueprintLibrary_HasLineOfSight_Square::EndCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasLineOfSight_Square, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_HasLineOfSight_Square::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasLineOfSight_Square, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_HasLineOfSight_Square::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.HasTileAt
// 0x0020 (0x0020 - 0x0000)
struct NavGridBlueprintLibrary_HasTileAt final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_HasTileAt) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_HasTileAt");
static_assert(sizeof(NavGridBlueprintLibrary_HasTileAt) == 0x000020, "Wrong size on NavGridBlueprintLibrary_HasTileAt");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAt, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_HasTileAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAt, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_HasTileAt::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAt, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_HasTileAt::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAt, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_HasTileAt::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.HasTileAtWorldLocation
// 0x0030 (0x0030 - 0x0000)
struct NavGridBlueprintLibrary_HasTileAtWorldLocation final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_HasTileAtWorldLocation) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_HasTileAtWorldLocation");
static_assert(sizeof(NavGridBlueprintLibrary_HasTileAtWorldLocation) == 0x000030, "Wrong size on NavGridBlueprintLibrary_HasTileAtWorldLocation");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAtWorldLocation, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_HasTileAtWorldLocation::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAtWorldLocation, WorldLocation) == 0x000008, "Member 'NavGridBlueprintLibrary_HasTileAtWorldLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAtWorldLocation, Target) == 0x000020, "Member 'NavGridBlueprintLibrary_HasTileAtWorldLocation::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_HasTileAtWorldLocation, ReturnValue) == 0x000028, "Member 'NavGridBlueprintLibrary_HasTileAtWorldLocation::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.IsNavGridDataProviderRegistered
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_IsNavGridDataProviderRegistered final
{
public:
	TScriptInterface<class INavGridDataProvider>  DataProvider;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_IsNavGridDataProviderRegistered) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_IsNavGridDataProviderRegistered");
static_assert(sizeof(NavGridBlueprintLibrary_IsNavGridDataProviderRegistered) == 0x000018, "Wrong size on NavGridBlueprintLibrary_IsNavGridDataProviderRegistered");
static_assert(offsetof(NavGridBlueprintLibrary_IsNavGridDataProviderRegistered, DataProvider) == 0x000000, "Member 'NavGridBlueprintLibrary_IsNavGridDataProviderRegistered::DataProvider' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsNavGridDataProviderRegistered, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_IsNavGridDataProviderRegistered::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.IsTileAreaOfClass
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_IsTileAreaOfClass final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavArea>                   NavAreaClass;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_IsTileAreaOfClass) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_IsTileAreaOfClass");
static_assert(sizeof(NavGridBlueprintLibrary_IsTileAreaOfClass) == 0x000028, "Wrong size on NavGridBlueprintLibrary_IsTileAreaOfClass");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileAreaOfClass, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_IsTileAreaOfClass::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileAreaOfClass, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_IsTileAreaOfClass::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileAreaOfClass, NavAreaClass) == 0x000010, "Member 'NavGridBlueprintLibrary_IsTileAreaOfClass::NavAreaClass' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileAreaOfClass, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_IsTileAreaOfClass::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileAreaOfClass, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_IsTileAreaOfClass::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.IsTileEmpty
// 0x0020 (0x0020 - 0x0000)
struct NavGridBlueprintLibrary_IsTileEmpty final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_IsTileEmpty) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_IsTileEmpty");
static_assert(sizeof(NavGridBlueprintLibrary_IsTileEmpty) == 0x000020, "Wrong size on NavGridBlueprintLibrary_IsTileEmpty");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileEmpty, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_IsTileEmpty::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileEmpty, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_IsTileEmpty::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileEmpty, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_IsTileEmpty::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileEmpty, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_IsTileEmpty::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.IsTileOccupied
// 0x0028 (0x0028 - 0x0000)
struct NavGridBlueprintLibrary_IsTileOccupied final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_IsTileOccupied) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_IsTileOccupied");
static_assert(sizeof(NavGridBlueprintLibrary_IsTileOccupied) == 0x000028, "Wrong size on NavGridBlueprintLibrary_IsTileOccupied");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileOccupied, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_IsTileOccupied::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileOccupied, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_IsTileOccupied::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileOccupied, ActorClass) == 0x000010, "Member 'NavGridBlueprintLibrary_IsTileOccupied::ActorClass' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileOccupied, Target) == 0x000018, "Member 'NavGridBlueprintLibrary_IsTileOccupied::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileOccupied, ReturnValue) == 0x000020, "Member 'NavGridBlueprintLibrary_IsTileOccupied::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.IsTileWalkable
// 0x0020 (0x0020 - 0x0000)
struct NavGridBlueprintLibrary_IsTileWalkable final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          Coords;                                            // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_IsTileWalkable) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_IsTileWalkable");
static_assert(sizeof(NavGridBlueprintLibrary_IsTileWalkable) == 0x000020, "Wrong size on NavGridBlueprintLibrary_IsTileWalkable");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileWalkable, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_IsTileWalkable::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileWalkable, Coords) == 0x000008, "Member 'NavGridBlueprintLibrary_IsTileWalkable::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileWalkable, Target) == 0x000010, "Member 'NavGridBlueprintLibrary_IsTileWalkable::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_IsTileWalkable, ReturnValue) == 0x000018, "Member 'NavGridBlueprintLibrary_IsTileWalkable::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.MarkNavGridDataProviderDirty
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_MarkNavGridDataProviderDirty final
{
public:
	TScriptInterface<class INavGridDataProvider>  DataProvider;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_MarkNavGridDataProviderDirty) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_MarkNavGridDataProviderDirty");
static_assert(sizeof(NavGridBlueprintLibrary_MarkNavGridDataProviderDirty) == 0x000010, "Wrong size on NavGridBlueprintLibrary_MarkNavGridDataProviderDirty");
static_assert(offsetof(NavGridBlueprintLibrary_MarkNavGridDataProviderDirty, DataProvider) == 0x000000, "Member 'NavGridBlueprintLibrary_MarkNavGridDataProviderDirty::DataProvider' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.NotEqual_AxialCoordsAxialCoords
// 0x0014 (0x0014 - 0x0000)
struct NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords final
{
public:
	struct FAxialCoords                           A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords");
static_assert(sizeof(NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords) == 0x000014, "Wrong size on NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords");
static_assert(offsetof(NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_NotEqual_AxialCoordsAxialCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.NotEqual_OffsetCoordsOffsetCoords
// 0x0014 (0x0014 - 0x0000)
struct NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords final
{
public:
	struct FOffsetCoords                          A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords");
static_assert(sizeof(NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords) == 0x000014, "Wrong size on NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords");
static_assert(offsetof(NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_NotEqual_OffsetCoordsOffsetCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_Distance
// 0x0014 (0x0014 - 0x0000)
struct NavGridBlueprintLibrary_OffsetCoords_Distance final
{
public:
	struct FOffsetCoords                          Coords;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          OtherCoords;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_OffsetCoords_Distance) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_OffsetCoords_Distance");
static_assert(sizeof(NavGridBlueprintLibrary_OffsetCoords_Distance) == 0x000014, "Wrong size on NavGridBlueprintLibrary_OffsetCoords_Distance");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_Distance, Coords) == 0x000000, "Member 'NavGridBlueprintLibrary_OffsetCoords_Distance::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_Distance, OtherCoords) == 0x000008, "Member 'NavGridBlueprintLibrary_OffsetCoords_Distance::OtherCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_Distance, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_OffsetCoords_Distance::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_Invalid
// 0x0008 (0x0008 - 0x0000)
struct NavGridBlueprintLibrary_OffsetCoords_Invalid final
{
public:
	struct FOffsetCoords                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_OffsetCoords_Invalid) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_OffsetCoords_Invalid");
static_assert(sizeof(NavGridBlueprintLibrary_OffsetCoords_Invalid) == 0x000008, "Wrong size on NavGridBlueprintLibrary_OffsetCoords_Invalid");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_Invalid, ReturnValue) == 0x000000, "Member 'NavGridBlueprintLibrary_OffsetCoords_Invalid::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_IsValid
// 0x000C (0x000C - 0x0000)
struct NavGridBlueprintLibrary_OffsetCoords_IsValid final
{
public:
	struct FOffsetCoords                          OffsetCoords;                                      // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_OffsetCoords_IsValid) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_OffsetCoords_IsValid");
static_assert(sizeof(NavGridBlueprintLibrary_OffsetCoords_IsValid) == 0x00000C, "Wrong size on NavGridBlueprintLibrary_OffsetCoords_IsValid");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_IsValid, OffsetCoords) == 0x000000, "Member 'NavGridBlueprintLibrary_OffsetCoords_IsValid::OffsetCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_IsValid, ReturnValue) == 0x000008, "Member 'NavGridBlueprintLibrary_OffsetCoords_IsValid::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.OffsetCoords_ManhattanDistance
// 0x0014 (0x0014 - 0x0000)
struct NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance final
{
public:
	struct FOffsetCoords                          Coords;                                            // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          OtherCoords;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance");
static_assert(sizeof(NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance) == 0x000014, "Wrong size on NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance, Coords) == 0x000000, "Member 'NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance::Coords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance, OtherCoords) == 0x000008, "Member 'NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance::OtherCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_OffsetCoords_ManhattanDistance::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Overlap_Square
// 0x0048 (0x0048 - 0x0000)
struct NavGridBlueprintLibrary_Overlap_Square final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                WorldLocation;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOffsetCoords>                  OutOverlappedTileCoords;                           // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	const class ASquareNavGrid*                   Target;                                            // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0040(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridBlueprintLibrary_Overlap_Square) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_Overlap_Square");
static_assert(sizeof(NavGridBlueprintLibrary_Overlap_Square) == 0x000048, "Wrong size on NavGridBlueprintLibrary_Overlap_Square");
static_assert(offsetof(NavGridBlueprintLibrary_Overlap_Square, WorldContextObject) == 0x000000, "Member 'NavGridBlueprintLibrary_Overlap_Square::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Overlap_Square, WorldLocation) == 0x000008, "Member 'NavGridBlueprintLibrary_Overlap_Square::WorldLocation' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Overlap_Square, Radius) == 0x000020, "Member 'NavGridBlueprintLibrary_Overlap_Square::Radius' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Overlap_Square, OutOverlappedTileCoords) == 0x000028, "Member 'NavGridBlueprintLibrary_Overlap_Square::OutOverlappedTileCoords' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Overlap_Square, Target) == 0x000038, "Member 'NavGridBlueprintLibrary_Overlap_Square::Target' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Overlap_Square, ReturnValue) == 0x000040, "Member 'NavGridBlueprintLibrary_Overlap_Square::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.RegisterNavGridDataProvider
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_RegisterNavGridDataProvider final
{
public:
	TScriptInterface<class INavGridDataProvider>  DataProvider;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_RegisterNavGridDataProvider) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_RegisterNavGridDataProvider");
static_assert(sizeof(NavGridBlueprintLibrary_RegisterNavGridDataProvider) == 0x000010, "Wrong size on NavGridBlueprintLibrary_RegisterNavGridDataProvider");
static_assert(offsetof(NavGridBlueprintLibrary_RegisterNavGridDataProvider, DataProvider) == 0x000000, "Member 'NavGridBlueprintLibrary_RegisterNavGridDataProvider::DataProvider' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Subtract_AxialCoordsAxialCoords
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords final
{
public:
	struct FAxialCoords                           A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAxialCoords                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords) == 0x000018, "Wrong size on NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_Subtract_AxialCoordsAxialCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.Subtract_OffsetCoordsOffsetCoords
// 0x0018 (0x0018 - 0x0000)
struct NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords final
{
public:
	struct FOffsetCoords                          A;                                                 // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          B;                                                 // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOffsetCoords                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords) == 0x000004, "Wrong alignment on NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords");
static_assert(sizeof(NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords) == 0x000018, "Wrong size on NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords");
static_assert(offsetof(NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords, A) == 0x000000, "Member 'NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords::A' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords, B) == 0x000008, "Member 'NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords::B' has a wrong offset!");
static_assert(offsetof(NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords, ReturnValue) == 0x000010, "Member 'NavGridBlueprintLibrary_Subtract_OffsetCoordsOffsetCoords::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridBlueprintLibrary.UnregisterNavGridDataProvider
// 0x0010 (0x0010 - 0x0000)
struct NavGridBlueprintLibrary_UnregisterNavGridDataProvider final
{
public:
	TScriptInterface<class INavGridDataProvider>  DataProvider;                                      // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridBlueprintLibrary_UnregisterNavGridDataProvider) == 0x000008, "Wrong alignment on NavGridBlueprintLibrary_UnregisterNavGridDataProvider");
static_assert(sizeof(NavGridBlueprintLibrary_UnregisterNavGridDataProvider) == 0x000010, "Wrong size on NavGridBlueprintLibrary_UnregisterNavGridDataProvider");
static_assert(offsetof(NavGridBlueprintLibrary_UnregisterNavGridDataProvider, DataProvider) == 0x000000, "Member 'NavGridBlueprintLibrary_UnregisterNavGridDataProvider::DataProvider' has a wrong offset!");

// Function NavGrid.NavGridDataProvider.GetNavGridRelevantData
// 0x00E0 (0x00E0 - 0x0000)
struct NavGridDataProvider_GetNavGridRelevantData final
{
public:
	struct FNavGridRelevantData                   OutNavigationData;                                 // 0x0000(0x00E0)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridDataProvider_GetNavGridRelevantData) == 0x000008, "Wrong alignment on NavGridDataProvider_GetNavGridRelevantData");
static_assert(sizeof(NavGridDataProvider_GetNavGridRelevantData) == 0x0000E0, "Wrong size on NavGridDataProvider_GetNavGridRelevantData");
static_assert(offsetof(NavGridDataProvider_GetNavGridRelevantData, OutNavigationData) == 0x000000, "Member 'NavGridDataProvider_GetNavGridRelevantData::OutNavigationData' has a wrong offset!");

// Function NavGrid.NavGridDataProvider.IsNavGridRelevant
// 0x0010 (0x0010 - 0x0000)
struct NavGridDataProvider_IsNavGridRelevant final
{
public:
	const class ANavGrid*                         NavData;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavGridDataProvider_IsNavGridRelevant) == 0x000008, "Wrong alignment on NavGridDataProvider_IsNavGridRelevant");
static_assert(sizeof(NavGridDataProvider_IsNavGridRelevant) == 0x000010, "Wrong size on NavGridDataProvider_IsNavGridRelevant");
static_assert(offsetof(NavGridDataProvider_IsNavGridRelevant, NavData) == 0x000000, "Member 'NavGridDataProvider_IsNavGridRelevant::NavData' has a wrong offset!");
static_assert(offsetof(NavGridDataProvider_IsNavGridRelevant, ReturnValue) == 0x000008, "Member 'NavGridDataProvider_IsNavGridRelevant::ReturnValue' has a wrong offset!");

// Function NavGrid.NavGridTriggerVolume.SetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct NavGridTriggerVolume_SetIsEnabled final
{
public:
	bool                                          bInIsEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridTriggerVolume_SetIsEnabled) == 0x000001, "Wrong alignment on NavGridTriggerVolume_SetIsEnabled");
static_assert(sizeof(NavGridTriggerVolume_SetIsEnabled) == 0x000001, "Wrong size on NavGridTriggerVolume_SetIsEnabled");
static_assert(offsetof(NavGridTriggerVolume_SetIsEnabled, bInIsEnabled) == 0x000000, "Member 'NavGridTriggerVolume_SetIsEnabled::bInIsEnabled' has a wrong offset!");

// Function NavGrid.NavGridTriggerVolume.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct NavGridTriggerVolume_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavGridTriggerVolume_IsEnabled) == 0x000001, "Wrong alignment on NavGridTriggerVolume_IsEnabled");
static_assert(sizeof(NavGridTriggerVolume_IsEnabled) == 0x000001, "Wrong size on NavGridTriggerVolume_IsEnabled");
static_assert(offsetof(NavGridTriggerVolume_IsEnabled, ReturnValue) == 0x000000, "Member 'NavGridTriggerVolume_IsEnabled::ReturnValue' has a wrong offset!");

}

