#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_GlowingWidget_Text_Core

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Tempest_classes.hpp"
#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_GlowingWidget_Text_Core.WBP_GlowingWidget_Text_Core_C
// 0x0090 (0x04A0 - 0x0410)
class UWBP_GlowingWidget_Text_Core_C : public UTedGlowWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0410(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class FText                                   Text;                                              // 0x0418(0x0010)(Edit, BlueprintVisible)
	bool                                          bUpperCase;                                        // 0x0428(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                TextPadding;                                       // 0x042C(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         Font;                                              // 0x0440(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)

public:
	void ShowGlow(bool bInShow);
	void SetTextColor(const struct FSlateColor& InColor);
	void SetText(const class FText& InText, bool bInUpperCase);
	void PreConstruct(bool IsDesignTime);
	void OnSetStyleAsset(class USlateWidgetStyleAsset* InAsset);
	void K2_OnTextWidgetSetUseSecondaryColor(const bool bInUseSecondaryColor);
	void K2_OnTextWidgetSetText(const class FText& InText);
	void K2_OnTextWidgetSetSecondaryColor(const struct FLinearColor& InColor);
	void K2_OnTextWidgetSetPrimaryColor(const struct FLinearColor& InColor);
	void GetTextWidgets(TArray<class UTextBlock*>* OutTextWidgets);
	void GetGlowTextWidget(class UTextBlock** OutText);
	class UMaterialInstanceDynamic* GetGlowEffect();
	void GetForegroundTextWidget(class UTextBlock** OutText);
	void ExecuteUbergraph_WBP_GlowingWidget_Text_Core(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_GlowingWidget_Text_Core_C">();
	}
	static class UWBP_GlowingWidget_Text_Core_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_GlowingWidget_Text_Core_C>();
	}
};
static_assert(alignof(UWBP_GlowingWidget_Text_Core_C) == 0x000008, "Wrong alignment on UWBP_GlowingWidget_Text_Core_C");
static_assert(sizeof(UWBP_GlowingWidget_Text_Core_C) == 0x0004A0, "Wrong size on UWBP_GlowingWidget_Text_Core_C");
static_assert(offsetof(UWBP_GlowingWidget_Text_Core_C, UberGraphFrame) == 0x000410, "Member 'UWBP_GlowingWidget_Text_Core_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_GlowingWidget_Text_Core_C, Text) == 0x000418, "Member 'UWBP_GlowingWidget_Text_Core_C::Text' has a wrong offset!");
static_assert(offsetof(UWBP_GlowingWidget_Text_Core_C, bUpperCase) == 0x000428, "Member 'UWBP_GlowingWidget_Text_Core_C::bUpperCase' has a wrong offset!");
static_assert(offsetof(UWBP_GlowingWidget_Text_Core_C, TextPadding) == 0x00042C, "Member 'UWBP_GlowingWidget_Text_Core_C::TextPadding' has a wrong offset!");
static_assert(offsetof(UWBP_GlowingWidget_Text_Core_C, Font) == 0x000440, "Member 'UWBP_GlowingWidget_Text_Core_C::Font' has a wrong offset!");

}

