#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SmartDataAsset

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum SmartDataAsset.ESmartDataSearchMethod
// NumValues: 0x0003
enum class ESmartDataSearchMethod : uint8
{
	SelectedAssets                           = 0,
	SearchPaths                              = 1,
	MAX                                      = 2,
};

// ScriptStruct SmartDataAsset.SmartDataAssetHandle
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FSmartDataAssetHandle
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSmartDataAssetHandle) == 0x000008, "Wrong alignment on FSmartDataAssetHandle");
static_assert(sizeof(FSmartDataAssetHandle) == 0x000020, "Wrong size on FSmartDataAssetHandle");

// ScriptStruct SmartDataAsset.MyDataStruct
// 0x0018 (0x0018 - 0x0000)
struct FMyDataStruct final
{
public:
	class FString                                 StringField;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IntField;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMyDataStruct) == 0x000008, "Wrong alignment on FMyDataStruct");
static_assert(sizeof(FMyDataStruct) == 0x000018, "Wrong size on FMyDataStruct");
static_assert(offsetof(FMyDataStruct, StringField) == 0x000000, "Member 'FMyDataStruct::StringField' has a wrong offset!");
static_assert(offsetof(FMyDataStruct, IntField) == 0x000010, "Member 'FMyDataStruct::IntField' has a wrong offset!");

// ScriptStruct SmartDataAsset.MyInheritableDataStruct
// 0x0030 (0x0030 - 0x0000)
struct FMyInheritableDataStruct final
{
public:
	TArray<class FName>                           Combined;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	TArray<class FName>                           Added;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           Removed;                                           // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyInheritableDataStruct) == 0x000008, "Wrong alignment on FMyInheritableDataStruct");
static_assert(sizeof(FMyInheritableDataStruct) == 0x000030, "Wrong size on FMyInheritableDataStruct");
static_assert(offsetof(FMyInheritableDataStruct, Combined) == 0x000000, "Member 'FMyInheritableDataStruct::Combined' has a wrong offset!");
static_assert(offsetof(FMyInheritableDataStruct, Added) == 0x000010, "Member 'FMyInheritableDataStruct::Added' has a wrong offset!");
static_assert(offsetof(FMyInheritableDataStruct, Removed) == 0x000020, "Member 'FMyInheritableDataStruct::Removed' has a wrong offset!");

// ScriptStruct SmartDataAsset.MyInheritableArray
// 0x0010 (0x0010 - 0x0000)
struct FMyInheritableArray final
{
public:
	TArray<class FName>                           Combined;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyInheritableArray) == 0x000008, "Wrong alignment on FMyInheritableArray");
static_assert(sizeof(FMyInheritableArray) == 0x000010, "Wrong size on FMyInheritableArray");
static_assert(offsetof(FMyInheritableArray, Combined) == 0x000000, "Member 'FMyInheritableArray::Combined' has a wrong offset!");

// ScriptStruct SmartDataAsset.MyInheritableSet
// 0x0050 (0x0050 - 0x0000)
struct FMyInheritableSet final
{
public:
	TSet<class FName>                             Combined;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyInheritableSet) == 0x000008, "Wrong alignment on FMyInheritableSet");
static_assert(sizeof(FMyInheritableSet) == 0x000050, "Wrong size on FMyInheritableSet");
static_assert(offsetof(FMyInheritableSet, Combined) == 0x000000, "Member 'FMyInheritableSet::Combined' has a wrong offset!");

// ScriptStruct SmartDataAsset.MyInheritableMap
// 0x0050 (0x0050 - 0x0000)
struct FMyInheritableMap final
{
public:
	TMap<int32, class FName>                      Combined;                                          // 0x0000(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMyInheritableMap) == 0x000008, "Wrong alignment on FMyInheritableMap");
static_assert(sizeof(FMyInheritableMap) == 0x000050, "Wrong size on FMyInheritableMap");
static_assert(offsetof(FMyInheritableMap, Combined) == 0x000000, "Member 'FMyInheritableMap::Combined' has a wrong offset!");

// ScriptStruct SmartDataAsset.SmartDataSearchConfig
// 0x0040 (0x0040 - 0x0000)
struct FSmartDataSearchConfig final
{
public:
	int32                                         Priority;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESmartDataSearchMethod                        SearchMethod;                                      // 0x0004(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDataAsset*>                     AssetsToRegister;                                  // 0x0008(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         AssetScanPaths;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         ExcludePatterns;                                   // 0x0028(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AssetBaseClass;                                    // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartDataSearchConfig) == 0x000008, "Wrong alignment on FSmartDataSearchConfig");
static_assert(sizeof(FSmartDataSearchConfig) == 0x000040, "Wrong size on FSmartDataSearchConfig");
static_assert(offsetof(FSmartDataSearchConfig, Priority) == 0x000000, "Member 'FSmartDataSearchConfig::Priority' has a wrong offset!");
static_assert(offsetof(FSmartDataSearchConfig, SearchMethod) == 0x000004, "Member 'FSmartDataSearchConfig::SearchMethod' has a wrong offset!");
static_assert(offsetof(FSmartDataSearchConfig, AssetsToRegister) == 0x000008, "Member 'FSmartDataSearchConfig::AssetsToRegister' has a wrong offset!");
static_assert(offsetof(FSmartDataSearchConfig, AssetScanPaths) == 0x000018, "Member 'FSmartDataSearchConfig::AssetScanPaths' has a wrong offset!");
static_assert(offsetof(FSmartDataSearchConfig, ExcludePatterns) == 0x000028, "Member 'FSmartDataSearchConfig::ExcludePatterns' has a wrong offset!");
static_assert(offsetof(FSmartDataSearchConfig, AssetBaseClass) == 0x000038, "Member 'FSmartDataSearchConfig::AssetBaseClass' has a wrong offset!");

// ScriptStruct SmartDataAsset.SmartDataBinding
// 0x0010 (0x0010 - 0x0000)
struct FSmartDataBinding final
{
public:
	struct FGameplayTag                           AssetIdentifier;                                   // 0x0000(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataAsset*                             DataAsset;                                         // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSmartDataBinding) == 0x000008, "Wrong alignment on FSmartDataBinding");
static_assert(sizeof(FSmartDataBinding) == 0x000010, "Wrong size on FSmartDataBinding");
static_assert(offsetof(FSmartDataBinding, AssetIdentifier) == 0x000000, "Member 'FSmartDataBinding::AssetIdentifier' has a wrong offset!");
static_assert(offsetof(FSmartDataBinding, DataAsset) == 0x000008, "Member 'FSmartDataBinding::DataAsset' has a wrong offset!");

}

