#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AmbientAudio

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct AmbientAudio.AmbientAudioActorData
// 0x0020 (0x0020 - 0x0000)
struct FAmbientAudioActorData final
{
public:
	class UAmbientAudioData*                      AmbientAudioConfigAsset;                           // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomXYOffset;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeMultiplier;                                  // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayFrequency;                                     // 0x0010(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRandomDeviation;                               // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAudioOnBeginPlay;                             // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbientAudioActorData) == 0x000008, "Wrong alignment on FAmbientAudioActorData");
static_assert(sizeof(FAmbientAudioActorData) == 0x000020, "Wrong size on FAmbientAudioActorData");
static_assert(offsetof(FAmbientAudioActorData, AmbientAudioConfigAsset) == 0x000000, "Member 'FAmbientAudioActorData::AmbientAudioConfigAsset' has a wrong offset!");
static_assert(offsetof(FAmbientAudioActorData, RandomXYOffset) == 0x000008, "Member 'FAmbientAudioActorData::RandomXYOffset' has a wrong offset!");
static_assert(offsetof(FAmbientAudioActorData, VolumeMultiplier) == 0x00000C, "Member 'FAmbientAudioActorData::VolumeMultiplier' has a wrong offset!");
static_assert(offsetof(FAmbientAudioActorData, PlayFrequency) == 0x000010, "Member 'FAmbientAudioActorData::PlayFrequency' has a wrong offset!");
static_assert(offsetof(FAmbientAudioActorData, PlayRandomDeviation) == 0x000014, "Member 'FAmbientAudioActorData::PlayRandomDeviation' has a wrong offset!");
static_assert(offsetof(FAmbientAudioActorData, bPlayAudioOnBeginPlay) == 0x000018, "Member 'FAmbientAudioActorData::bPlayAudioOnBeginPlay' has a wrong offset!");

// ScriptStruct AmbientAudio.AmbientAudioConfig
// 0x0050 (0x0050 - 0x0000)
struct FAmbientAudioConfig final
{
public:
	bool                                          bGlobalAmbientLoop;                                // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USoundBase>>      AmbientLoops;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class USoundBase>>      AmbientEffects;                                    // 0x0018(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FColor                                 DebugColor;                                        // 0x0028(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundAttenuation*                      AmbientLoopsAttenuationOverride;                   // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      AmbientLoopsConcurrencyOverride;                   // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundAttenuation*                      AmbientEffectsAttenuationOverride;                 // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USoundConcurrency*                      AmbientEffectsConcurrencyOverride;                 // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmbientAudioConfig) == 0x000008, "Wrong alignment on FAmbientAudioConfig");
static_assert(sizeof(FAmbientAudioConfig) == 0x000050, "Wrong size on FAmbientAudioConfig");
static_assert(offsetof(FAmbientAudioConfig, bGlobalAmbientLoop) == 0x000000, "Member 'FAmbientAudioConfig::bGlobalAmbientLoop' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, AmbientLoops) == 0x000008, "Member 'FAmbientAudioConfig::AmbientLoops' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, AmbientEffects) == 0x000018, "Member 'FAmbientAudioConfig::AmbientEffects' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, DebugColor) == 0x000028, "Member 'FAmbientAudioConfig::DebugColor' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, AmbientLoopsAttenuationOverride) == 0x000030, "Member 'FAmbientAudioConfig::AmbientLoopsAttenuationOverride' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, AmbientLoopsConcurrencyOverride) == 0x000038, "Member 'FAmbientAudioConfig::AmbientLoopsConcurrencyOverride' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, AmbientEffectsAttenuationOverride) == 0x000040, "Member 'FAmbientAudioConfig::AmbientEffectsAttenuationOverride' has a wrong offset!");
static_assert(offsetof(FAmbientAudioConfig, AmbientEffectsConcurrencyOverride) == 0x000048, "Member 'FAmbientAudioConfig::AmbientEffectsConcurrencyOverride' has a wrong offset!");

// ScriptStruct AmbientAudio.AmbientAudio
// 0x0018 (0x0018 - 0x0000)
struct FAmbientAudio final
{
public:
	class UAudioComponent*                        ActiveAmbientLoop;                                 // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAudioComponent*                        ActiveAmbientEffect;                               // 0x0008(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           AmbientEffectTimer;                                // 0x0010(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAmbientAudio) == 0x000008, "Wrong alignment on FAmbientAudio");
static_assert(sizeof(FAmbientAudio) == 0x000018, "Wrong size on FAmbientAudio");
static_assert(offsetof(FAmbientAudio, ActiveAmbientLoop) == 0x000000, "Member 'FAmbientAudio::ActiveAmbientLoop' has a wrong offset!");
static_assert(offsetof(FAmbientAudio, ActiveAmbientEffect) == 0x000008, "Member 'FAmbientAudio::ActiveAmbientEffect' has a wrong offset!");
static_assert(offsetof(FAmbientAudio, AmbientEffectTimer) == 0x000010, "Member 'FAmbientAudio::AmbientEffectTimer' has a wrong offset!");

}

