#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SlipgateCheats

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "SlipgateCheats_structs.hpp"
#include "Engine_classes.hpp"
#include "UMG_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class SlipgateCheats.SgCheatManager
// 0x0018 (0x00A0 - 0x0088)
class USgCheatManager : public UCheatManager
{
public:
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSgCheat>                       CachedCheats;                                      // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SgCheatManager">();
	}
	static class USgCheatManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USgCheatManager>();
	}
};
static_assert(alignof(USgCheatManager) == 0x000008, "Wrong alignment on USgCheatManager");
static_assert(sizeof(USgCheatManager) == 0x0000A0, "Wrong size on USgCheatManager");
static_assert(offsetof(USgCheatManager, CachedCheats) == 0x000090, "Member 'USgCheatManager::CachedCheats' has a wrong offset!");

// Class SlipgateCheats.SgCheatsDevSettings
// 0x0060 (0x0098 - 0x0038)
class USgCheatsDevSettings final : public UDeveloperSettings
{
public:
	TSubclassOf<class UCheatManager>              CheatManagerToReflect;                             // 0x0038(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreDefaultCheats;                              // 0x0040(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         BannedCheats;                                      // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     CheatScriptClass;                                  // 0x0058(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheatScriptColumnAmount;                           // 0x0060(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFont>                   CheatMenuFont;                                     // 0x0068(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheatMenuFontScale;                                // 0x0090(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SgCheatsDevSettings">();
	}
	static class USgCheatsDevSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USgCheatsDevSettings>();
	}
};
static_assert(alignof(USgCheatsDevSettings) == 0x000008, "Wrong alignment on USgCheatsDevSettings");
static_assert(sizeof(USgCheatsDevSettings) == 0x000098, "Wrong size on USgCheatsDevSettings");
static_assert(offsetof(USgCheatsDevSettings, CheatManagerToReflect) == 0x000038, "Member 'USgCheatsDevSettings::CheatManagerToReflect' has a wrong offset!");
static_assert(offsetof(USgCheatsDevSettings, bIgnoreDefaultCheats) == 0x000040, "Member 'USgCheatsDevSettings::bIgnoreDefaultCheats' has a wrong offset!");
static_assert(offsetof(USgCheatsDevSettings, BannedCheats) == 0x000048, "Member 'USgCheatsDevSettings::BannedCheats' has a wrong offset!");
static_assert(offsetof(USgCheatsDevSettings, CheatScriptClass) == 0x000058, "Member 'USgCheatsDevSettings::CheatScriptClass' has a wrong offset!");
static_assert(offsetof(USgCheatsDevSettings, CheatScriptColumnAmount) == 0x000060, "Member 'USgCheatsDevSettings::CheatScriptColumnAmount' has a wrong offset!");
static_assert(offsetof(USgCheatsDevSettings, CheatMenuFont) == 0x000068, "Member 'USgCheatsDevSettings::CheatMenuFont' has a wrong offset!");
static_assert(offsetof(USgCheatsDevSettings, CheatMenuFontScale) == 0x000090, "Member 'USgCheatsDevSettings::CheatMenuFontScale' has a wrong offset!");

// Class SlipgateCheats.SgDevMenu
// 0x0010 (0x0190 - 0x0180)
class USgDevMenu final : public UWidget
{
public:
	uint8                                         Pad_180[0x10];                                     // 0x0180(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SgDevMenu">();
	}
	static class USgDevMenu* GetDefaultObj()
	{
		return GetDefaultObjImpl<USgDevMenu>();
	}
};
static_assert(alignof(USgDevMenu) == 0x000008, "Wrong alignment on USgDevMenu");
static_assert(sizeof(USgDevMenu) == 0x000190, "Wrong size on USgDevMenu");

// Class SlipgateCheats.SgDevPanelInterface
// 0x0000 (0x0000 - 0x0000)
class ISgDevPanelInterface final
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SgDevPanelInterface">();
	}
	static class ISgDevPanelInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISgDevPanelInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
static_assert(alignof(ISgDevPanelInterface) == 0x000001, "Wrong alignment on ISgDevPanelInterface");
static_assert(sizeof(ISgDevPanelInterface) == 0x000001, "Wrong size on ISgDevPanelInterface");

}

