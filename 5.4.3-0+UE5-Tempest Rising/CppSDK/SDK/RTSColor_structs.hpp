#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RTSColor

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum RTSColor.ERTSColor
// NumValues: 0x002D
enum class ERTSColor : uint8
{
	Default                                  = 0,
	Color1                                   = 1,
	Color2                                   = 2,
	Color3                                   = 3,
	Color4                                   = 4,
	Color5                                   = 5,
	Color6                                   = 6,
	Color7                                   = 7,
	Color8                                   = 8,
	Color9                                   = 9,
	Color10                                  = 10,
	Color11                                  = 11,
	Color12                                  = 12,
	Color13                                  = 13,
	Color14                                  = 14,
	Color15                                  = 15,
	Color16                                  = 16,
	Friendly                                 = 17,
	Neutral                                  = 18,
	Hostile                                  = 19,
	Self                                     = 20,
	Friendly_ColorBlind                      = 21,
	Neutral_ColorBlind                       = 22,
	Hostile_ColorBlind                       = 23,
	Self_ColorBlind                          = 24,
	CustomColor1                             = 25,
	CustomColor2                             = 26,
	CustomColor3                             = 27,
	CustomColor4                             = 28,
	CustomColor5                             = 29,
	CustomColor6                             = 30,
	CustomColor7                             = 31,
	CustomColor8                             = 32,
	Max                                      = 33,
	FirstExplicitColor                       = 1,
	LastExplicitColor                        = 16,
	FirstCustomColor                         = 25,
	LastCustomColor                          = 32,
	FirstAttitudeColor                       = 17,
	FirstAttitudeColor_ColorBlind            = 21,
	LastAttitudeColor                        = 24,
	FirstConfigurableColor                   = 1,
	LastConfigurableColor                    = 24,
	FirstColor                               = 1,
	LastColor                                = 32,
};

// Enum RTSColor.ERTSAttitudeType
// NumValues: 0x0006
enum class ERTSAttitudeType : uint8
{
	Friendly                                 = 0,
	Neutral                                  = 1,
	Hostile                                  = 2,
	Self                                     = 3,
	Max                                      = 4,
	Last                                     = 3,
};

// Enum RTSColor.ERTSCustomColor
// NumValues: 0x000A
enum class ERTSCustomColor : uint8
{
	CustomColor1                             = 0,
	CustomColor2                             = 1,
	CustomColor3                             = 2,
	CustomColor4                             = 3,
	CustomColor5                             = 4,
	CustomColor6                             = 5,
	CustomColor7                             = 6,
	CustomColor8                             = 7,
	Max                                      = 8,
	Last                                     = 7,
};

// ScriptStruct RTSColor.RTSPlayerColorPreset
// 0x0024 (0x0024 - 0x0000)
struct FRTSPlayerColorPreset final
{
public:
	ERTSColor                                     ColorType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           PrimaryColor;                                      // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTSPlayerColorPreset) == 0x000004, "Wrong alignment on FRTSPlayerColorPreset");
static_assert(sizeof(FRTSPlayerColorPreset) == 0x000024, "Wrong size on FRTSPlayerColorPreset");
static_assert(offsetof(FRTSPlayerColorPreset, ColorType) == 0x000000, "Member 'FRTSPlayerColorPreset::ColorType' has a wrong offset!");
static_assert(offsetof(FRTSPlayerColorPreset, PrimaryColor) == 0x000004, "Member 'FRTSPlayerColorPreset::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FRTSPlayerColorPreset, SecondaryColor) == 0x000014, "Member 'FRTSPlayerColorPreset::SecondaryColor' has a wrong offset!");

// ScriptStruct RTSColor.RTSSelectionColorPreset
// 0x0024 (0x0024 - 0x0000)
struct FRTSSelectionColorPreset final
{
public:
	ERTSColor                                     ColorType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, Transient, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           SelectionColor;                                    // 0x0004(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HoverColor;                                        // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTSSelectionColorPreset) == 0x000004, "Wrong alignment on FRTSSelectionColorPreset");
static_assert(sizeof(FRTSSelectionColorPreset) == 0x000024, "Wrong size on FRTSSelectionColorPreset");
static_assert(offsetof(FRTSSelectionColorPreset, ColorType) == 0x000000, "Member 'FRTSSelectionColorPreset::ColorType' has a wrong offset!");
static_assert(offsetof(FRTSSelectionColorPreset, SelectionColor) == 0x000004, "Member 'FRTSSelectionColorPreset::SelectionColor' has a wrong offset!");
static_assert(offsetof(FRTSSelectionColorPreset, HoverColor) == 0x000014, "Member 'FRTSSelectionColorPreset::HoverColor' has a wrong offset!");

// ScriptStruct RTSColor.RTSCustomPlayerColorPresets
// 0x0120 (0x0120 - 0x0000)
struct FRTSCustomPlayerColorPresets final
{
public:
	struct FRTSPlayerColorPreset                  CustomPlayerColorPresets[0x8];                     // 0x0000(0x0024)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTSCustomPlayerColorPresets) == 0x000004, "Wrong alignment on FRTSCustomPlayerColorPresets");
static_assert(sizeof(FRTSCustomPlayerColorPresets) == 0x000120, "Wrong size on FRTSCustomPlayerColorPresets");
static_assert(offsetof(FRTSCustomPlayerColorPresets, CustomPlayerColorPresets) == 0x000000, "Member 'FRTSCustomPlayerColorPresets::CustomPlayerColorPresets' has a wrong offset!");

// ScriptStruct RTSColor.RTSColorTextMapping
// 0x0018 (0x0018 - 0x0000)
struct FRTSColorTextMapping final
{
public:
	ERTSColor                                     ColorType;                                         // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ColorText;                                         // 0x0008(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTSColorTextMapping) == 0x000008, "Wrong alignment on FRTSColorTextMapping");
static_assert(sizeof(FRTSColorTextMapping) == 0x000018, "Wrong size on FRTSColorTextMapping");
static_assert(offsetof(FRTSColorTextMapping, ColorType) == 0x000000, "Member 'FRTSColorTextMapping::ColorType' has a wrong offset!");
static_assert(offsetof(FRTSColorTextMapping, ColorText) == 0x000008, "Member 'FRTSColorTextMapping::ColorText' has a wrong offset!");

// ScriptStruct RTSColor.RTSColorUIData
// 0x0028 (0x0028 - 0x0000)
struct FRTSColorUIData final
{
public:
	ERTSColor                                     ColorType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ColorText;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, EditConst, NativeAccessSpecifierPublic)
	struct FLinearColor                           PreviewColor;                                      // 0x0018(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTSColorUIData) == 0x000008, "Wrong alignment on FRTSColorUIData");
static_assert(sizeof(FRTSColorUIData) == 0x000028, "Wrong size on FRTSColorUIData");
static_assert(offsetof(FRTSColorUIData, ColorType) == 0x000000, "Member 'FRTSColorUIData::ColorType' has a wrong offset!");
static_assert(offsetof(FRTSColorUIData, ColorText) == 0x000008, "Member 'FRTSColorUIData::ColorText' has a wrong offset!");
static_assert(offsetof(FRTSColorUIData, PreviewColor) == 0x000018, "Member 'FRTSColorUIData::PreviewColor' has a wrong offset!");

// ScriptStruct RTSColor.RTSPlayerColorDefaults
// 0x0020 (0x0020 - 0x0000)
struct FRTSPlayerColorDefaults final
{
public:
	struct FLinearColor                           PrimaryColor;                                      // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SecondaryColor;                                    // 0x0010(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTSPlayerColorDefaults) == 0x000004, "Wrong alignment on FRTSPlayerColorDefaults");
static_assert(sizeof(FRTSPlayerColorDefaults) == 0x000020, "Wrong size on FRTSPlayerColorDefaults");
static_assert(offsetof(FRTSPlayerColorDefaults, PrimaryColor) == 0x000000, "Member 'FRTSPlayerColorDefaults::PrimaryColor' has a wrong offset!");
static_assert(offsetof(FRTSPlayerColorDefaults, SecondaryColor) == 0x000010, "Member 'FRTSPlayerColorDefaults::SecondaryColor' has a wrong offset!");

// ScriptStruct RTSColor.RTSColorReceiverData
// 0x0088 (0x0088 - 0x0000)
struct FRTSColorReceiverData final
{
public:
	int32                                         PlayerIdx;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       PlayerColorMIDs;                                   // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class UMaterialInstanceDynamic*, struct FRTSPlayerColorDefaults> PlayerColorDefaults;       // 0x0018(0x0050)(NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       SelectionMIDs;                                     // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x10];                                      // 0x0078(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTSColorReceiverData) == 0x000008, "Wrong alignment on FRTSColorReceiverData");
static_assert(sizeof(FRTSColorReceiverData) == 0x000088, "Wrong size on FRTSColorReceiverData");
static_assert(offsetof(FRTSColorReceiverData, PlayerIdx) == 0x000000, "Member 'FRTSColorReceiverData::PlayerIdx' has a wrong offset!");
static_assert(offsetof(FRTSColorReceiverData, PlayerColorMIDs) == 0x000008, "Member 'FRTSColorReceiverData::PlayerColorMIDs' has a wrong offset!");
static_assert(offsetof(FRTSColorReceiverData, PlayerColorDefaults) == 0x000018, "Member 'FRTSColorReceiverData::PlayerColorDefaults' has a wrong offset!");
static_assert(offsetof(FRTSColorReceiverData, SelectionMIDs) == 0x000068, "Member 'FRTSColorReceiverData::SelectionMIDs' has a wrong offset!");

// ScriptStruct RTSColor.RTSColorTransitionData
// 0x002C (0x002C - 0x0000)
struct alignas(0x04) FRTSColorTransitionData final
{
public:
	uint8                                         Pad_0[0x2C];                                       // 0x0000(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTSColorTransitionData) == 0x000004, "Wrong alignment on FRTSColorTransitionData");
static_assert(sizeof(FRTSColorTransitionData) == 0x00002C, "Wrong size on FRTSColorTransitionData");

// ScriptStruct RTSColor.RTSColorTransitions
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FRTSColorTransitions final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRTSColorTransitions) == 0x000008, "Wrong alignment on FRTSColorTransitions");
static_assert(sizeof(FRTSColorTransitions) == 0x000010, "Wrong size on FRTSColorTransitions");

}

