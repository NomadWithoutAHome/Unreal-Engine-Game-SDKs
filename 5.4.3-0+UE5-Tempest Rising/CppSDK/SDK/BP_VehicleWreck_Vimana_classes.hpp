#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleWreck_Vimana

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Tempest_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleWreck_Vimana.BP_VehicleWreck_Vimana_C
// 0x0138 (0x04D8 - 0x03A0)
class ABP_VehicleWreck_Vimana_C final : public ATedVehicleWreckActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      PS_DissolvePart_PillarBR;                          // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckVETVimana_PillarBR;                        // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_DissolvePart_PillarBL;                          // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckVETVimana_PillarBL;                        // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_ExplosionVETIAircraft_01_Dissolve;              // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckVETVimana_vfxRef;                          // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_DissolvePart_PillarFR;                          // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_DissolvePart_PillarFL;                          // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      PS_DissolvePart_Sphere;                            // 0x03E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckVETVimana_PillarFR;                        // 0x03F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckVETVimana_PillarFL;                        // 0x03F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckVETVimana_Sphere;                          // 0x0400(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 SkeletalMesh;                                      // 0x0408(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Dissolve_Parts_Dissolve_Parts_6ADA4A62401E13C0A8AF209D83BBAC61; // 0x0410(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Dissolve_Parts__Direction_6ADA4A62401E13C0A8AF209D83BBAC61; // 0x0414(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_415[0x3];                                      // 0x0415(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Dissolve_Parts;                                    // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Dissolve_Main_Vines_Rotting_45451A0F4572D6FAED2BA5941433031F; // 0x0420(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dissolve_Main_Pod_Death_45451A0F4572D6FAED2BA5941433031F; // 0x0424(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Dissolve_Main_Dissolve_Main_45451A0F4572D6FAED2BA5941433031F; // 0x0428(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Dissolve_Main__Direction_45451A0F4572D6FAED2BA5941433031F; // 0x042C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Dissolve_Main;                                     // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          Hit;                                               // 0x0438(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Rotation_Force_Multiplier;                         // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Forward_Force;                                     // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Rotation_Force_Axis;                               // 0x0450(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<bool>                                  Rotation_Force_Locked_Axis;                        // 0x0468(0x0010)(Edit, BlueprintVisible)
	struct FVector                                Forward_Force_Direction;                           // 0x0478(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentLinearDamping;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentAngularDamping;                             // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          StopGravity;                                       // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A1[0x7];                                      // 0x04A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Bones_to_Hide;                                     // 0x04A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Dest_Parts_Explosion_Force_Angle;                  // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dest_Parts_Explosion_Force_Mul;                    // 0x04C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Dest_Parts_Explosion_Angular_Force_Mul;            // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dissolved;                                         // 0x04D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_VehicleWreck_Peacekeeper_SkeletalMesh_K2Node_ComponentBoundEvent_0_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit_0);
	void Dissolve_Main__FinishedFunc();
	void Dissolve_Main__Treat_as_Dissolved__EventFunc();
	void Dissolve_Main__UpdateFunc();
	void Dissolve_Parts__FinishedFunc();
	void Dissolve_Parts__UpdateFunc();
	void ExecuteUbergraph_BP_VehicleWreck_Vimana(int32 EntryPoint);
	void Initial_VETI_Aircraft_Destruction_Force(TArray<class FName>& Bones_to_Hide_0, class USkeletalMeshComponent* Skeletal_Mesh, class FName Bone_Name, class UStaticMeshComponent* Static_Mesh__TEMP_, const struct FVector& Rotation_Force_Axis_0, double Rotation_Force_Multiplier_0, TArray<bool>& Rotation_Force_Locked_Axis_0, const struct FVector& Forward_Force_Direction_0, double Forward_Force_0, TArray<bool>& Apply_Forward_Force_to_Parts, TArray<double>& Forward_Force_to_Parts_Multiplier, TArray<class UStaticMeshComponent*>& Parts_Meshes, double Parts_Meshes_Dir_Force_Angle, double Parts_Meshes_Dir_Force_Multiplier, double Parts_Meshes_Ang_Force_Multiplier);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleWreck_Vimana_C">();
	}
	static class ABP_VehicleWreck_Vimana_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleWreck_Vimana_C>();
	}
};
static_assert(alignof(ABP_VehicleWreck_Vimana_C) == 0x000008, "Wrong alignment on ABP_VehicleWreck_Vimana_C");
static_assert(sizeof(ABP_VehicleWreck_Vimana_C) == 0x0004D8, "Wrong size on ABP_VehicleWreck_Vimana_C");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, UberGraphFrame) == 0x0003A0, "Member 'ABP_VehicleWreck_Vimana_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, PS_DissolvePart_PillarBR) == 0x0003A8, "Member 'ABP_VehicleWreck_Vimana_C::PS_DissolvePart_PillarBR' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SM_WreckVETVimana_PillarBR) == 0x0003B0, "Member 'ABP_VehicleWreck_Vimana_C::SM_WreckVETVimana_PillarBR' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, PS_DissolvePart_PillarBL) == 0x0003B8, "Member 'ABP_VehicleWreck_Vimana_C::PS_DissolvePart_PillarBL' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SM_WreckVETVimana_PillarBL) == 0x0003C0, "Member 'ABP_VehicleWreck_Vimana_C::SM_WreckVETVimana_PillarBL' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, PS_ExplosionVETIAircraft_01_Dissolve) == 0x0003C8, "Member 'ABP_VehicleWreck_Vimana_C::PS_ExplosionVETIAircraft_01_Dissolve' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SM_WreckVETVimana_vfxRef) == 0x0003D0, "Member 'ABP_VehicleWreck_Vimana_C::SM_WreckVETVimana_vfxRef' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, PS_DissolvePart_PillarFR) == 0x0003D8, "Member 'ABP_VehicleWreck_Vimana_C::PS_DissolvePart_PillarFR' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, PS_DissolvePart_PillarFL) == 0x0003E0, "Member 'ABP_VehicleWreck_Vimana_C::PS_DissolvePart_PillarFL' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, PS_DissolvePart_Sphere) == 0x0003E8, "Member 'ABP_VehicleWreck_Vimana_C::PS_DissolvePart_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SM_WreckVETVimana_PillarFR) == 0x0003F0, "Member 'ABP_VehicleWreck_Vimana_C::SM_WreckVETVimana_PillarFR' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SM_WreckVETVimana_PillarFL) == 0x0003F8, "Member 'ABP_VehicleWreck_Vimana_C::SM_WreckVETVimana_PillarFL' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SM_WreckVETVimana_Sphere) == 0x000400, "Member 'ABP_VehicleWreck_Vimana_C::SM_WreckVETVimana_Sphere' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, SkeletalMesh) == 0x000408, "Member 'ABP_VehicleWreck_Vimana_C::SkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Parts_Dissolve_Parts_6ADA4A62401E13C0A8AF209D83BBAC61) == 0x000410, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Parts_Dissolve_Parts_6ADA4A62401E13C0A8AF209D83BBAC61' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Parts__Direction_6ADA4A62401E13C0A8AF209D83BBAC61) == 0x000414, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Parts__Direction_6ADA4A62401E13C0A8AF209D83BBAC61' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Parts) == 0x000418, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Parts' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Main_Vines_Rotting_45451A0F4572D6FAED2BA5941433031F) == 0x000420, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Main_Vines_Rotting_45451A0F4572D6FAED2BA5941433031F' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Main_Pod_Death_45451A0F4572D6FAED2BA5941433031F) == 0x000424, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Main_Pod_Death_45451A0F4572D6FAED2BA5941433031F' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Main_Dissolve_Main_45451A0F4572D6FAED2BA5941433031F) == 0x000428, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Main_Dissolve_Main_45451A0F4572D6FAED2BA5941433031F' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Main__Direction_45451A0F4572D6FAED2BA5941433031F) == 0x00042C, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Main__Direction_45451A0F4572D6FAED2BA5941433031F' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolve_Main) == 0x000430, "Member 'ABP_VehicleWreck_Vimana_C::Dissolve_Main' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Hit) == 0x000438, "Member 'ABP_VehicleWreck_Vimana_C::Hit' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Rotation_Force_Multiplier) == 0x000440, "Member 'ABP_VehicleWreck_Vimana_C::Rotation_Force_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Forward_Force) == 0x000448, "Member 'ABP_VehicleWreck_Vimana_C::Forward_Force' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Rotation_Force_Axis) == 0x000450, "Member 'ABP_VehicleWreck_Vimana_C::Rotation_Force_Axis' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Rotation_Force_Locked_Axis) == 0x000468, "Member 'ABP_VehicleWreck_Vimana_C::Rotation_Force_Locked_Axis' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Forward_Force_Direction) == 0x000478, "Member 'ABP_VehicleWreck_Vimana_C::Forward_Force_Direction' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, CurrentLinearDamping) == 0x000490, "Member 'ABP_VehicleWreck_Vimana_C::CurrentLinearDamping' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, CurrentAngularDamping) == 0x000498, "Member 'ABP_VehicleWreck_Vimana_C::CurrentAngularDamping' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, StopGravity) == 0x0004A0, "Member 'ABP_VehicleWreck_Vimana_C::StopGravity' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Bones_to_Hide) == 0x0004A8, "Member 'ABP_VehicleWreck_Vimana_C::Bones_to_Hide' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dest_Parts_Explosion_Force_Angle) == 0x0004B8, "Member 'ABP_VehicleWreck_Vimana_C::Dest_Parts_Explosion_Force_Angle' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dest_Parts_Explosion_Force_Mul) == 0x0004C0, "Member 'ABP_VehicleWreck_Vimana_C::Dest_Parts_Explosion_Force_Mul' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dest_Parts_Explosion_Angular_Force_Mul) == 0x0004C8, "Member 'ABP_VehicleWreck_Vimana_C::Dest_Parts_Explosion_Angular_Force_Mul' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Vimana_C, Dissolved) == 0x0004D0, "Member 'ABP_VehicleWreck_Vimana_C::Dissolved' has a wrong offset!");

}

