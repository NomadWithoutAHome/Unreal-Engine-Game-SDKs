#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_VehicleWreck_Porcupine

#include "Basic.hpp"

#include "PhysicsCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Tempest_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_VehicleWreck_Porcupine.BP_VehicleWreck_Porcupine_C
// 0x00F0 (0x0490 - 0x03A0)
class ABP_VehicleWreck_Porcupine_C final : public ATedVehicleWreckActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x03A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UAudioComponent*                        FireSFX;                                           // 0x03A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckPorcupine_04;                              // 0x03B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckPorcupine_03;                              // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_FireAircraftDestruction_1;                      // 0x03C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_WreckPorcupine_02;                              // 0x03C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               PS_SmokeVehicleDestroyed;                          // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ActorTransformCache;                               // 0x03E0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VelocityVectorLength;                              // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                VelocityToTransfer;                                // 0x0448(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitBaseMesh;                                       // 0x0460(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitPart1;                                          // 0x0461(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MaxBaseVelocityVectorLength;                       // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HitPart2;                                          // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BrokenPart1;                                       // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MeshLocationCache;                                 // 0x0478(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_VehicleWreck_MediumTank_Mesh_K2Node_ComponentBoundEvent_2_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void BndEvt__BP_VehicleWreck_MediumTank_SM_WreckMediumTank_02_K2Node_ComponentBoundEvent_1_ComponentHitSignature__DelegateSignature(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void ExecuteUbergraph_BP_VehicleWreck_Porcupine(int32 EntryPoint);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_VehicleWreck_Porcupine_C">();
	}
	static class ABP_VehicleWreck_Porcupine_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_VehicleWreck_Porcupine_C>();
	}
};
static_assert(alignof(ABP_VehicleWreck_Porcupine_C) == 0x000010, "Wrong alignment on ABP_VehicleWreck_Porcupine_C");
static_assert(sizeof(ABP_VehicleWreck_Porcupine_C) == 0x000490, "Wrong size on ABP_VehicleWreck_Porcupine_C");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, UberGraphFrame) == 0x0003A0, "Member 'ABP_VehicleWreck_Porcupine_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, FireSFX) == 0x0003A8, "Member 'ABP_VehicleWreck_Porcupine_C::FireSFX' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, SM_WreckPorcupine_04) == 0x0003B0, "Member 'ABP_VehicleWreck_Porcupine_C::SM_WreckPorcupine_04' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, SM_WreckPorcupine_03) == 0x0003B8, "Member 'ABP_VehicleWreck_Porcupine_C::SM_WreckPorcupine_03' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, PS_FireAircraftDestruction_1) == 0x0003C0, "Member 'ABP_VehicleWreck_Porcupine_C::PS_FireAircraftDestruction_1' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, SM_WreckPorcupine_02) == 0x0003C8, "Member 'ABP_VehicleWreck_Porcupine_C::SM_WreckPorcupine_02' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, PS_SmokeVehicleDestroyed) == 0x0003D0, "Member 'ABP_VehicleWreck_Porcupine_C::PS_SmokeVehicleDestroyed' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, ActorTransformCache) == 0x0003E0, "Member 'ABP_VehicleWreck_Porcupine_C::ActorTransformCache' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, VelocityVectorLength) == 0x000440, "Member 'ABP_VehicleWreck_Porcupine_C::VelocityVectorLength' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, VelocityToTransfer) == 0x000448, "Member 'ABP_VehicleWreck_Porcupine_C::VelocityToTransfer' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, HitBaseMesh) == 0x000460, "Member 'ABP_VehicleWreck_Porcupine_C::HitBaseMesh' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, HitPart1) == 0x000461, "Member 'ABP_VehicleWreck_Porcupine_C::HitPart1' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, MaxBaseVelocityVectorLength) == 0x000468, "Member 'ABP_VehicleWreck_Porcupine_C::MaxBaseVelocityVectorLength' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, HitPart2) == 0x000470, "Member 'ABP_VehicleWreck_Porcupine_C::HitPart2' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, BrokenPart1) == 0x000471, "Member 'ABP_VehicleWreck_Porcupine_C::BrokenPart1' has a wrong offset!");
static_assert(offsetof(ABP_VehicleWreck_Porcupine_C, MeshLocationCache) == 0x000478, "Member 'ABP_VehicleWreck_Porcupine_C::MeshLocationCache' has a wrong offset!");

}

