#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_DayAndNight

#include "Basic.hpp"

#include "Enum_DayAndNight_RainIntensity_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Enum_DayAndNight_SnowIntensity_structs.hpp"
#include "Enum_DayAndNight_WindTypes_structs.hpp"
#include "Tempest_classes.hpp"
#include "Enum_DayAndNight_WeatherType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_DayAndNight.BP_DayAndNight_C
// 0x04B8 (0x0758 - 0x02A0)
class ABP_DayAndNight_C final : public ALightingBPBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class ULiveLinkComponentController*           LiveLink__For_Editor_Update_;                      // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PostProcess;                                       // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  PPM_Rain_Snow;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         ExponentialHeightFog;                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             DayLight;                                          // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     SkyLight;                                          // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkySphereMesh;                                     // 0x02D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        base;                                              // 0x02E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Sky_material;                                      // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_material;                                  // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Colors_determined_by_sun_position;                 // 0x02F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_2F2[0x6];                                      // 0x02F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_height;                                        // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_brightness;                                    // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Horizon_falloff;                                   // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zenith_color;                                      // 0x0310(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Horizon_color;                                     // 0x0320(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_color;                                       // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           Overall_Color;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cloud_speed;                                       // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Cloud_opacity;                                     // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Stars_brightness;                                  // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UCurveLinearColor*                      Horizon_color_curve;                               // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Zenith_color_curve;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Cloud_color_curve;                                 // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Moon_Movement_Perpendicular;                       // 0x0380(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_381[0x7];                                      // 0x0381(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Horizontal_Angle;                              // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Vertical_Angle;                                // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Tilt_Angle;                                    // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_Speed;                                         // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fake_Sun_Horizontal_Angle;                         // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Current_Sun_Angle;                                 // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Base_PostProcess_Material;                         // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Rain_PostProcess_Material;                         // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInterface*                     Snow_PostProcess_Material;                         // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FRandomStream                          Weather_Random_Stream;                             // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	struct FVector                                Wind_Base_Direction;                               // 0x03D8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wind_Direction;                                    // 0x03F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Wind_Direction_w_Time_and_Strength;                // 0x0408(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Wind_Angle_Change_Time_Min_Presets;                // 0x0420(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Wind_Angle_Change_Time_Max_Presets;                // 0x0430(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wind_Angle_Change_Timer;                           // 0x0440(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Angle;                                        // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Angle_New;                                    // 0x0450(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Angle_Change_Factor;                          // 0x0458(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Wind_Angle_Change_Factor_Presets;                  // 0x0460(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wind_Angle_Change_Speed;                           // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Wind_Strength_Change_Time_Min_Presets;             // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Wind_Strength_Change_Time_Max_Presets;             // 0x0488(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wind_Strength_Change_Timer;                        // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_New;                                 // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_Change_Factor;                       // 0x04B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Wind_Strength_Change_Factor_Presets;               // 0x04B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wind_Strength_Change_Speed;                        // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Wind_Strength_Clamp_Min_Presets;                   // 0x04D0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Wind_Strength_Clamp_Max_Presets;                   // 0x04E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wind_Strength_w_Time;                              // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Rain_Probability_Presets;                          // 0x04F8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Rain_Intensity;                                    // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Rain_Max_Intensity_Presets;                        // 0x0510(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Wetness;                                           // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Set_Weather_Random_Seed;                           // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_529[0x3];                                      // 0x0529(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Weather_Random_Seed;                               // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Manual_Angle_Curve;                                // 0x0530(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Manual_Strength_Curve;                             // 0x0531(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WindTypes                    WindType;                                          // 0x0532(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_533[0x5];                                      // 0x0533(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wind_Base_Angle;                                   // 0x0538(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Clamp_Wind_Angle;                                  // 0x0540(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_541[0x7];                                      // 0x0541(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wind_Angle_Clamp_Min;                              // 0x0548(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Angle_Clamp_Max;                              // 0x0550(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Base_Strength;                                // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_Clamp_Min__Custom_;                  // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_Clamp_Max__Custom_;                  // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Rain___Snow;                                // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_WeatherType                  Weather_Type;                                      // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_SnowIntensity                Snow_Intensity_Preset;                             // 0x0572(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	Enum_DayAndNight_RainIntensity                Rain_Intensity_Preset;                             // 0x0573(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Rain_Affects_Wetness;                              // 0x0574(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Dry_To_Base_Wetness;                               // 0x0575(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_576[0x2];                                      // 0x0576(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Base_Wetness;                                      // 0x0578(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Wetness;                                       // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Wetness_Material_Clamp;                        // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Air_Humidity;                                      // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temperature;                                       // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Rain_Check_Timer;                                  // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Raining_Timer;                                     // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          is_Raining;                                        // 0x05B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5B1[0x7];                                      // 0x05B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Wind_Angle_Change_Time_Min__s___Custom_;           // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Angle_Change_Time_Max__s___Custom_;           // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Angle_Change_Factor__degrees___Custom_;       // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_Change_Time_Min__s___Custom_;        // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_Change_Time_Max__s___Custom_;        // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Wind_Strength_Change_Factor__Custom_;              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                _Stop_Time_Presets;                                // 0x05E8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Snowing_Intensity;                                 // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snow_Check_Timer;                                  // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Snowing_Timer;                                     // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          is_Snowing;                                        // 0x0610(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_611[0x7];                                      // 0x0611(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Snow_Base_Amount;                                  // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Snow_Probability_Presets;                          // 0x0620(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Snow_Max_Intensity_Presets;                        // 0x0630(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Snow_Amount;                                       // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<double>                                Snow_Fall_Speed_Presets;                           // 0x0648(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                _Stop_Time_Presets_0;                              // 0x0658(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UCurveFloat*                            Wind_Angle_Curve;                                  // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            Wind_Strength_Curve;                               // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	double                                        Snow_Speed;                                        // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          is_First_Check;                                    // 0x0680(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_681[0x7];                                      // 0x0681(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_Intensity_Multiplier;                          // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        Skylight_Intensity_Multiplier;                     // 0x0690(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Occlusion_Tint_Multiplier;                         // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Ambient_Cubemap_Intensity_Multiplier;              // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Fake_Sun_Vertical_Angle;                           // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTextureCube*                           Cubemap_Texture;                                   // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PostProcess_MID_Material;                          // 0x06B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Snow_Dynamic_Tint;                                 // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CachedWorldTimeSeconds;                            // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, SaveGame, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Fake_Sun_Color;                                    // 0x06D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ULightingPreset*                        LightPreset;                                       // 0x06E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           LightDataMPC;                                      // 0x06F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class ULightingPreset*                        LastLightPreset;                                   // 0x06F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdatePresetFromBP;                                // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDynamicWind;                                   // 0x0701(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUpdateWeatherInEditor;                            // 0x0702(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_703[0x1];                                      // 0x0703(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           TempLightColor;                                    // 0x0704(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempLightTemperature;                              // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempLightIntensity;                                // 0x0720(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempNightIntensity;                                // 0x0728(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempSkyLightIntensity;                             // 0x0730(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 TempSkyLightOcclusionTint;                         // 0x0738(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        TempAmbientCubemapIntensity;                       // 0x0740(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        TempRainDayIntensity;                              // 0x0748(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNightLight;                                       // 0x0750(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseDynamicWeather;                                // 0x0751(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          TickEditorUpdate;                                  // 0x0752(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Wind(bool Manual_Curve, class UCurveFloat* Curve, bool Construction, double Change_Factor, double Base_Value_To_Change, double& Current_Value__ref_, double Current_Value, double& Target_Value__ref_, double Target_Value, double Change_Time_Min, double Change_Time_Max, double& Change_Timer__ref_, double Change_Timer, double& Change_Speed__ref_, double Change_Speed, bool Clamp_Values, double Clamp_Min, double Clamp_Max, double DeltaTime);
	void UserConstructionScript();
	void UpdateFakeLight();
	void Snow_Ground(double DeltaTime);
	void Snow(bool Construction, double DeltaTime);
	void SetupWind();
	void SetSunMoon(double Delta, bool Construction);
	void SetLightParameters();
	void SetDynamicWind(double DeltaTime, bool Construction);
	void RefreshMaterial();
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void Rain_Wetness(double DeltaTime);
	void Rain(double DeltaTime);
	void ExecuteUbergraph_BP_DayAndNight(int32 EntryPoint);
	void BndEvt__BP_DayAndNight_LiveLink__For_Editor_Update__K2Node_ComponentBoundEvent_0_LiveLinkTickDelegate__DelegateSignature(float DeltaTime);
	void SetWeatherParameters(double Delta, bool Construction);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_DayAndNight_C">();
	}
	static class ABP_DayAndNight_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_DayAndNight_C>();
	}
};
static_assert(alignof(ABP_DayAndNight_C) == 0x000008, "Wrong alignment on ABP_DayAndNight_C");
static_assert(sizeof(ABP_DayAndNight_C) == 0x000758, "Wrong size on ABP_DayAndNight_C");
static_assert(offsetof(ABP_DayAndNight_C, UberGraphFrame) == 0x0002A0, "Member 'ABP_DayAndNight_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, LiveLink__For_Editor_Update_) == 0x0002A8, "Member 'ABP_DayAndNight_C::LiveLink__For_Editor_Update_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, PostProcess) == 0x0002B0, "Member 'ABP_DayAndNight_C::PostProcess' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, PPM_Rain_Snow) == 0x0002B8, "Member 'ABP_DayAndNight_C::PPM_Rain_Snow' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, ExponentialHeightFog) == 0x0002C0, "Member 'ABP_DayAndNight_C::ExponentialHeightFog' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, DayLight) == 0x0002C8, "Member 'ABP_DayAndNight_C::DayLight' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, SkyLight) == 0x0002D0, "Member 'ABP_DayAndNight_C::SkyLight' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, SkySphereMesh) == 0x0002D8, "Member 'ABP_DayAndNight_C::SkySphereMesh' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, base) == 0x0002E0, "Member 'ABP_DayAndNight_C::base' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sky_material) == 0x0002E8, "Member 'ABP_DayAndNight_C::Sky_material' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Refresh_material) == 0x0002F0, "Member 'ABP_DayAndNight_C::Refresh_material' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Colors_determined_by_sun_position) == 0x0002F1, "Member 'ABP_DayAndNight_C::Colors_determined_by_sun_position' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_height) == 0x0002F8, "Member 'ABP_DayAndNight_C::Sun_height' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_brightness) == 0x000300, "Member 'ABP_DayAndNight_C::Sun_brightness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Horizon_falloff) == 0x000308, "Member 'ABP_DayAndNight_C::Horizon_falloff' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Zenith_color) == 0x000310, "Member 'ABP_DayAndNight_C::Zenith_color' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Horizon_color) == 0x000320, "Member 'ABP_DayAndNight_C::Horizon_color' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Cloud_color) == 0x000330, "Member 'ABP_DayAndNight_C::Cloud_color' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Overall_Color) == 0x000340, "Member 'ABP_DayAndNight_C::Overall_Color' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Cloud_speed) == 0x000350, "Member 'ABP_DayAndNight_C::Cloud_speed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Cloud_opacity) == 0x000358, "Member 'ABP_DayAndNight_C::Cloud_opacity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Stars_brightness) == 0x000360, "Member 'ABP_DayAndNight_C::Stars_brightness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Horizon_color_curve) == 0x000368, "Member 'ABP_DayAndNight_C::Horizon_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Zenith_color_curve) == 0x000370, "Member 'ABP_DayAndNight_C::Zenith_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Cloud_color_curve) == 0x000378, "Member 'ABP_DayAndNight_C::Cloud_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Moon_Movement_Perpendicular) == 0x000380, "Member 'ABP_DayAndNight_C::Moon_Movement_Perpendicular' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_Horizontal_Angle) == 0x000388, "Member 'ABP_DayAndNight_C::Sun_Horizontal_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_Vertical_Angle) == 0x000390, "Member 'ABP_DayAndNight_C::Sun_Vertical_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_Tilt_Angle) == 0x000398, "Member 'ABP_DayAndNight_C::Sun_Tilt_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_Speed) == 0x0003A0, "Member 'ABP_DayAndNight_C::Sun_Speed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Fake_Sun_Horizontal_Angle) == 0x0003A8, "Member 'ABP_DayAndNight_C::Fake_Sun_Horizontal_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Current_Sun_Angle) == 0x0003B0, "Member 'ABP_DayAndNight_C::Current_Sun_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Base_PostProcess_Material) == 0x0003B8, "Member 'ABP_DayAndNight_C::Base_PostProcess_Material' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_PostProcess_Material) == 0x0003C0, "Member 'ABP_DayAndNight_C::Rain_PostProcess_Material' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_PostProcess_Material) == 0x0003C8, "Member 'ABP_DayAndNight_C::Snow_PostProcess_Material' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Weather_Random_Stream) == 0x0003D0, "Member 'ABP_DayAndNight_C::Weather_Random_Stream' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Base_Direction) == 0x0003D8, "Member 'ABP_DayAndNight_C::Wind_Base_Direction' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Direction) == 0x0003F0, "Member 'ABP_DayAndNight_C::Wind_Direction' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Direction_w_Time_and_Strength) == 0x000408, "Member 'ABP_DayAndNight_C::Wind_Direction_w_Time_and_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Time_Min_Presets) == 0x000420, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Time_Min_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Time_Max_Presets) == 0x000430, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Time_Max_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Timer) == 0x000440, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Timer' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle) == 0x000448, "Member 'ABP_DayAndNight_C::Wind_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_New) == 0x000450, "Member 'ABP_DayAndNight_C::Wind_Angle_New' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Factor) == 0x000458, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Factor' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Factor_Presets) == 0x000460, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Factor_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Speed) == 0x000470, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Speed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Time_Min_Presets) == 0x000478, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Time_Min_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Time_Max_Presets) == 0x000488, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Time_Max_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Timer) == 0x000498, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Timer' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength) == 0x0004A0, "Member 'ABP_DayAndNight_C::Wind_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_New) == 0x0004A8, "Member 'ABP_DayAndNight_C::Wind_Strength_New' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Factor) == 0x0004B0, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Factor' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Factor_Presets) == 0x0004B8, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Factor_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Speed) == 0x0004C8, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Speed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Clamp_Min_Presets) == 0x0004D0, "Member 'ABP_DayAndNight_C::Wind_Strength_Clamp_Min_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Clamp_Max_Presets) == 0x0004E0, "Member 'ABP_DayAndNight_C::Wind_Strength_Clamp_Max_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_w_Time) == 0x0004F0, "Member 'ABP_DayAndNight_C::Wind_Strength_w_Time' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_Probability_Presets) == 0x0004F8, "Member 'ABP_DayAndNight_C::Rain_Probability_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_Intensity) == 0x000508, "Member 'ABP_DayAndNight_C::Rain_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_Max_Intensity_Presets) == 0x000510, "Member 'ABP_DayAndNight_C::Rain_Max_Intensity_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wetness) == 0x000520, "Member 'ABP_DayAndNight_C::Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Set_Weather_Random_Seed) == 0x000528, "Member 'ABP_DayAndNight_C::Set_Weather_Random_Seed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Weather_Random_Seed) == 0x00052C, "Member 'ABP_DayAndNight_C::Weather_Random_Seed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Manual_Angle_Curve) == 0x000530, "Member 'ABP_DayAndNight_C::Manual_Angle_Curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Manual_Strength_Curve) == 0x000531, "Member 'ABP_DayAndNight_C::Manual_Strength_Curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, WindType) == 0x000532, "Member 'ABP_DayAndNight_C::WindType' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Base_Angle) == 0x000538, "Member 'ABP_DayAndNight_C::Wind_Base_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Clamp_Wind_Angle) == 0x000540, "Member 'ABP_DayAndNight_C::Clamp_Wind_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Clamp_Min) == 0x000548, "Member 'ABP_DayAndNight_C::Wind_Angle_Clamp_Min' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Clamp_Max) == 0x000550, "Member 'ABP_DayAndNight_C::Wind_Angle_Clamp_Max' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Base_Strength) == 0x000558, "Member 'ABP_DayAndNight_C::Wind_Base_Strength' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Clamp_Min__Custom_) == 0x000560, "Member 'ABP_DayAndNight_C::Wind_Strength_Clamp_Min__Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Clamp_Max__Custom_) == 0x000568, "Member 'ABP_DayAndNight_C::Wind_Strength_Clamp_Max__Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Enable_Rain___Snow) == 0x000570, "Member 'ABP_DayAndNight_C::Enable_Rain___Snow' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Weather_Type) == 0x000571, "Member 'ABP_DayAndNight_C::Weather_Type' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Intensity_Preset) == 0x000572, "Member 'ABP_DayAndNight_C::Snow_Intensity_Preset' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_Intensity_Preset) == 0x000573, "Member 'ABP_DayAndNight_C::Rain_Intensity_Preset' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_Affects_Wetness) == 0x000574, "Member 'ABP_DayAndNight_C::Rain_Affects_Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Dry_To_Base_Wetness) == 0x000575, "Member 'ABP_DayAndNight_C::Dry_To_Base_Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Base_Wetness) == 0x000578, "Member 'ABP_DayAndNight_C::Base_Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Max_Wetness) == 0x000580, "Member 'ABP_DayAndNight_C::Max_Wetness' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Max_Wetness_Material_Clamp) == 0x000588, "Member 'ABP_DayAndNight_C::Max_Wetness_Material_Clamp' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Air_Humidity) == 0x000590, "Member 'ABP_DayAndNight_C::Air_Humidity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Temperature) == 0x000598, "Member 'ABP_DayAndNight_C::Temperature' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Rain_Check_Timer) == 0x0005A0, "Member 'ABP_DayAndNight_C::Rain_Check_Timer' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Raining_Timer) == 0x0005A8, "Member 'ABP_DayAndNight_C::Raining_Timer' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, is_Raining) == 0x0005B0, "Member 'ABP_DayAndNight_C::is_Raining' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Time_Min__s___Custom_) == 0x0005B8, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Time_Min__s___Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Time_Max__s___Custom_) == 0x0005C0, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Time_Max__s___Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Change_Factor__degrees___Custom_) == 0x0005C8, "Member 'ABP_DayAndNight_C::Wind_Angle_Change_Factor__degrees___Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Time_Min__s___Custom_) == 0x0005D0, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Time_Min__s___Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Time_Max__s___Custom_) == 0x0005D8, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Time_Max__s___Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Change_Factor__Custom_) == 0x0005E0, "Member 'ABP_DayAndNight_C::Wind_Strength_Change_Factor__Custom_' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, _Stop_Time_Presets) == 0x0005E8, "Member 'ABP_DayAndNight_C::_Stop_Time_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snowing_Intensity) == 0x0005F8, "Member 'ABP_DayAndNight_C::Snowing_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Check_Timer) == 0x000600, "Member 'ABP_DayAndNight_C::Snow_Check_Timer' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snowing_Timer) == 0x000608, "Member 'ABP_DayAndNight_C::Snowing_Timer' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, is_Snowing) == 0x000610, "Member 'ABP_DayAndNight_C::is_Snowing' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Base_Amount) == 0x000618, "Member 'ABP_DayAndNight_C::Snow_Base_Amount' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Probability_Presets) == 0x000620, "Member 'ABP_DayAndNight_C::Snow_Probability_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Max_Intensity_Presets) == 0x000630, "Member 'ABP_DayAndNight_C::Snow_Max_Intensity_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Amount) == 0x000640, "Member 'ABP_DayAndNight_C::Snow_Amount' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Fall_Speed_Presets) == 0x000648, "Member 'ABP_DayAndNight_C::Snow_Fall_Speed_Presets' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, _Stop_Time_Presets_0) == 0x000658, "Member 'ABP_DayAndNight_C::_Stop_Time_Presets_0' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Angle_Curve) == 0x000668, "Member 'ABP_DayAndNight_C::Wind_Angle_Curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Wind_Strength_Curve) == 0x000670, "Member 'ABP_DayAndNight_C::Wind_Strength_Curve' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Speed) == 0x000678, "Member 'ABP_DayAndNight_C::Snow_Speed' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, is_First_Check) == 0x000680, "Member 'ABP_DayAndNight_C::is_First_Check' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Sun_Intensity_Multiplier) == 0x000688, "Member 'ABP_DayAndNight_C::Sun_Intensity_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Skylight_Intensity_Multiplier) == 0x000690, "Member 'ABP_DayAndNight_C::Skylight_Intensity_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Occlusion_Tint_Multiplier) == 0x000698, "Member 'ABP_DayAndNight_C::Occlusion_Tint_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Ambient_Cubemap_Intensity_Multiplier) == 0x0006A0, "Member 'ABP_DayAndNight_C::Ambient_Cubemap_Intensity_Multiplier' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Fake_Sun_Vertical_Angle) == 0x0006A8, "Member 'ABP_DayAndNight_C::Fake_Sun_Vertical_Angle' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Cubemap_Texture) == 0x0006B0, "Member 'ABP_DayAndNight_C::Cubemap_Texture' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, PostProcess_MID_Material) == 0x0006B8, "Member 'ABP_DayAndNight_C::PostProcess_MID_Material' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Snow_Dynamic_Tint) == 0x0006C0, "Member 'ABP_DayAndNight_C::Snow_Dynamic_Tint' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, CachedWorldTimeSeconds) == 0x0006D0, "Member 'ABP_DayAndNight_C::CachedWorldTimeSeconds' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, Fake_Sun_Color) == 0x0006D8, "Member 'ABP_DayAndNight_C::Fake_Sun_Color' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, LightPreset) == 0x0006E8, "Member 'ABP_DayAndNight_C::LightPreset' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, LightDataMPC) == 0x0006F0, "Member 'ABP_DayAndNight_C::LightDataMPC' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, LastLightPreset) == 0x0006F8, "Member 'ABP_DayAndNight_C::LastLightPreset' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, UpdatePresetFromBP) == 0x000700, "Member 'ABP_DayAndNight_C::UpdatePresetFromBP' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, bUseDynamicWind) == 0x000701, "Member 'ABP_DayAndNight_C::bUseDynamicWind' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, bUpdateWeatherInEditor) == 0x000702, "Member 'ABP_DayAndNight_C::bUpdateWeatherInEditor' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempLightColor) == 0x000704, "Member 'ABP_DayAndNight_C::TempLightColor' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempLightTemperature) == 0x000718, "Member 'ABP_DayAndNight_C::TempLightTemperature' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempLightIntensity) == 0x000720, "Member 'ABP_DayAndNight_C::TempLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempNightIntensity) == 0x000728, "Member 'ABP_DayAndNight_C::TempNightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempSkyLightIntensity) == 0x000730, "Member 'ABP_DayAndNight_C::TempSkyLightIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempSkyLightOcclusionTint) == 0x000738, "Member 'ABP_DayAndNight_C::TempSkyLightOcclusionTint' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempAmbientCubemapIntensity) == 0x000740, "Member 'ABP_DayAndNight_C::TempAmbientCubemapIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TempRainDayIntensity) == 0x000748, "Member 'ABP_DayAndNight_C::TempRainDayIntensity' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, bNightLight) == 0x000750, "Member 'ABP_DayAndNight_C::bNightLight' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, bUseDynamicWeather) == 0x000751, "Member 'ABP_DayAndNight_C::bUseDynamicWeather' has a wrong offset!");
static_assert(offsetof(ABP_DayAndNight_C, TickEditorUpdate) == 0x000752, "Member 'ABP_DayAndNight_C::TickEditorUpdate' has a wrong offset!");

}

