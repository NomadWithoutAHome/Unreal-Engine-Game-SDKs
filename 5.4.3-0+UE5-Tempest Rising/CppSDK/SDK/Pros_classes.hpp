#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Pros

#include "Basic.hpp"

#include "ProsSDK_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Pros_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class Pros.ProsAccountService
// 0x00E0 (0x0108 - 0x0028)
class UProsAccountService final : public UObject
{
public:
	TMulticastInlineDelegate<void(int32 LocalUserNum, EProsAccountLinkStatus State)> OnAccountStateChanged; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LocalUserNum)> OnAccountStatusUpdated;                       // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FProsAccountServiceStatus& State)> OnQrReceived;      // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0xB0];                                      // 0x0058(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProsAccountService* Get();
	static class UProsAccountService* TryGet();

	void Connect(int32 LocalUserNum);
	void Disconnect(int32 LocalUserNum);
	void ExpiredQrCode(int32 LocalUserNum);
	EProsdkErrorCodeAccount GetLink(int32 LocalUserNum);
	struct FProsAccountServiceStatus GetStatus(int32 LocalUserNum);
	bool RequestQRLink(int32 LocalUserNum);
	EProsdkErrorCodeAccount TryToFetchStatus(int32 LocalUserNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsAccountService">();
	}
	static class UProsAccountService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsAccountService>();
	}
};
static_assert(alignof(UProsAccountService) == 0x000008, "Wrong alignment on UProsAccountService");
static_assert(sizeof(UProsAccountService) == 0x000108, "Wrong size on UProsAccountService");
static_assert(offsetof(UProsAccountService, OnAccountStateChanged) == 0x000028, "Member 'UProsAccountService::OnAccountStateChanged' has a wrong offset!");
static_assert(offsetof(UProsAccountService, OnAccountStatusUpdated) == 0x000038, "Member 'UProsAccountService::OnAccountStatusUpdated' has a wrong offset!");
static_assert(offsetof(UProsAccountService, OnQrReceived) == 0x000048, "Member 'UProsAccountService::OnQrReceived' has a wrong offset!");

// Class Pros.ProsAuthorizationService
// 0x01E0 (0x0208 - 0x0028)
class UProsAuthorizationService final : public UObject
{
public:
	TMulticastInlineDelegate<void(int32 LocalUserNum, EProsServiceState State, EProsdkErrorCodeAuthorization ResultCode, const class FString& ErrorMessage)> OnProsClientServiceStateChanged; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LocalUserNum, const class FString& DevString, EProsdkErrorCodeAuthorization ResultCode)> OnProsXboxXstoreCustomDevString; // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x1C0];                                     // 0x0048(0x01C0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProsAuthorizationService* Get();
	static class FString GetDefaultDeveloperLogin(int32 LocalUserNum);
	static struct FProsXSTSTokenConf GetXSTSTokenConf();
	static class UProsAuthorizationService* TryGet();

	EProsdkErrorCodeAuthorization ClientConnectAmazonLuna(int32 LocalUserNum, const class FString& IdentityToken);
	EProsdkErrorCodeAuthorization ClientConnectDeveloper(int32 LocalUserNum, const class FString& LogIn, EProsProvider ProviderOverride);
	EProsdkErrorCodeAuthorization ClientConnectEpicOnlineServices(int32 LocalUserNum, const class FString& AuthAccessToken);
	EProsdkErrorCodeAuthorization ClientConnectNintendo(int32 LocalUserNum, const class FString& IdentityToken);
	EProsdkErrorCodeAuthorization ClientConnectOculus(int32 LocalUserNum, const class FString& Nonce, int64 UserId);
	EProsdkErrorCodeAuthorization ClientConnectPsnCode(int32 LocalUserNum, const class FString& AuthCode, int32 IssuerId);
	EProsdkErrorCodeAuthorization ClientConnectPsnToken(int32 LocalUserNum, const class FString& IdToken);
	EProsdkErrorCodeAuthorization ClientConnectSecondary(int32 LocalUserNum, const class FString& PrimaryToken);
	EProsdkErrorCodeAuthorization ClientConnectStadia(int32 LocalUserNum, const class FString& PlayerJwt);
	EProsdkErrorCodeAuthorization ClientConnectSteam(int32 LocalUserNum, const class FString& SteamAuthSessionTicket);
	EProsdkErrorCodeAuthorization ClientConnectXbox(int32 LocalUserNum, const class FString& XboxToken);
	EProsdkErrorCodeAuthorization ClientConnectXboxXstore(int32 LocalUserNum, const class FString& XboxToken, const class FString& XstoreLicenseToken);
	bool ClientCreate(int32 LocalUserNum, const class FString& TitleSecret, const TArray<struct FPluginVersioned>& Plugins);
	bool ClientCreateFromConfig(int32 LocalUserNum);
	class FString ClientCreatePrimaryToken(int32 LocalUserNum);
	void ClientDisconnect(int32 LocalUserNum);
	class FString ClientGetAccessTokenBare(int32 LocalUserNum);
	class FString ClientGetAccessTokenForHeader(int32 LocalUserNum);
	EProsServiceState ClientGetConnectionState(int32 LocalUserNum);
	class FString ClientGetDeveloperLogin(int32 LocalUserNum);
	class FString ClientGetExternalIdentityToken(int32 LocalUserNum);
	class FString ClientGetKernelSessionIdString(int32 LocalUserNum);
	class FString ClientGetKernelSessionIdVisualAlias(int32 LocalUserNum);
	struct FProsMaintInfo ClientGetMaintenanceInfo(int32 LocalUserNum);
	struct FPluginEndpoint ClientGetPluginEndpoint(int32 LocalUserNum, const class FString& PluginName);
	EProsServiceState ClientGetProsServiceState(int32 LocalUserNum);
	class FString ClientGetProsUserId(int32 LocalUserNum);
	int64 ClientGetUserContextSize(int32 LocalUserNum);
	EProsdkErrorCodeAuthorization GetUserBackendTime(int32 LocalUserNum, const TDelegate<void(const struct FDateTime& Timestamp, EProsdkErrorCodeAuthorization ResultCode)>& Delegate);
	EProsdkErrorCodeAuthorization XboxXstoreCustomDevStringRequest(int32 LocalUserNum, const class FString& XboxToken);

	int32 GetAuthorizationIndex(int32 LocalUserNum) const;
	int32 GetLocalUserNum(int32 AuthorizationIndex) const;
	bool IsClientCreated(int32 LocalUserNum) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsAuthorizationService">();
	}
	static class UProsAuthorizationService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsAuthorizationService>();
	}
};
static_assert(alignof(UProsAuthorizationService) == 0x000008, "Wrong alignment on UProsAuthorizationService");
static_assert(sizeof(UProsAuthorizationService) == 0x000208, "Wrong size on UProsAuthorizationService");
static_assert(offsetof(UProsAuthorizationService, OnProsClientServiceStateChanged) == 0x000028, "Member 'UProsAuthorizationService::OnProsClientServiceStateChanged' has a wrong offset!");
static_assert(offsetof(UProsAuthorizationService, OnProsXboxXstoreCustomDevString) == 0x000038, "Member 'UProsAuthorizationService::OnProsXboxXstoreCustomDevString' has a wrong offset!");

// Class Pros.ProsBannerService
// 0x0050 (0x0078 - 0x0028)
class UProsBannerService final : public UObject
{
public:
	uint8                                         Pad_28[0x50];                                      // 0x0028(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProsBannerService* Get();
	static class UProsBannerService* TryGet();

	EProsdkErrorCodeBanners GetBanners(int32 LocalUserNum, const TArray<class FString>& ContentIds, TDelegate<void(EProsdkErrorCodeBanners ErrorCode, const struct FProsBannerConfig& Config, const TArray<struct FProsBanner>& Banners)> Delegate);
	EProsdkErrorCodeBanners GetBannersDep(int32 LocalUserNum, const TArray<class FString>& ContentIds);
	EProsdkErrorCodeBanners GetBannersFromCache(int32 LocalUserNum, TDelegate<void(EProsdkErrorCodeBanners ErrorCode, const struct FProsBannerConfig& Config, const TArray<struct FProsBanner>& Banners)> Delegate);
	EProsdkErrorCodeBanners GetBannersFromCacheDep(int32 LocalUserNum);
	EProsdkErrorCodeBanners GetConfigForSpaces(int32 LocalUserNum, TDelegate<void(EProsdkErrorCodeBanners ErrorCode, const struct FProsBannerConfig& Config)> Delegate);
	int32 GetSizeX(class UTexture2DDynamic* InTex);
	int32 GetSizeY(class UTexture2DDynamic* InTex);
	EProsdkErrorCodeBanners GetSpaces(int32 LocalUserNum, const TArray<class FString>& ContentIds, const TArray<class FString>& SpaceFilters, TDelegate<void(EProsdkErrorCodeBanners ErrorCode, const struct FProsBannerConfig& Config, const TArray<struct FProsSpaceWithBanners>& Spaces)> Delegate);
	EProsdkErrorCodeBanners GetSpacesFromCache(int32 LocalUserNum, TDelegate<void(EProsdkErrorCodeBanners ErrorCode, const struct FProsBannerConfig& Config, const TArray<struct FProsSpaceWithBanners>& Spaces)> Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsBannerService">();
	}
	static class UProsBannerService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsBannerService>();
	}
};
static_assert(alignof(UProsBannerService) == 0x000008, "Wrong alignment on UProsBannerService");
static_assert(sizeof(UProsBannerService) == 0x000078, "Wrong size on UProsBannerService");

// Class Pros.ProsContainerTransferService
// 0x0000 (0x0028 - 0x0028)
class UProsContainerTransferService final : public UObject
{
public:
	static class UProsContainerTransferService* Get();

	EProsdkErrorCodeContainerTransfer CommitUpload(int32 LocalUserNum, const struct FProsContainerUploadId& UploadId, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeContainerTransfer ResultCode, const class FString& UploadId, const class FString& ContainerId)>& Delegate);
	EProsdkErrorCodeContainerTransfer DownloadChunks(int32 LocalUserNum, const struct FProsContainerDownloadRequest& ContainerInfo, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeContainerTransfer ResultCode, const struct FProsContainerDownloadResponse& DownloadResponse)>& Delegate);
	EProsdkErrorCodeContainerTransfer GetContainerInfo(int32 LocalUserNum, const class FString& ContainerId, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeContainerTransfer ResultCode, const struct FProsContainerInfo& ContainerInfo)>& Delegate);
	EProsdkErrorCodeContainerTransfer UploadChunks(int32 LocalUserNum, const struct FProsContainer& Container, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeContainerTransfer ResultCode, const class FString& UploadId)>& Delegate);
	EProsdkErrorCodeContainerTransfer UploadRawData(int32 LocalUserNum, const struct FProsContainerRawdata& ContainerRawData, const TDelegate<void(EProsdkErrorCodeContainerTransfer ResultCode, const class FString& UploadId, const class FString& ContainerId)>& Delegate, const TDelegate<void(EProsdkErrorCodeContainerTransfer ResultCode, const class FString& UploadId, int64 UploadedChunks, int64 TotalChunks, int64 UploadedSize)>& ProgressDelegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsContainerTransferService">();
	}
	static class UProsContainerTransferService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsContainerTransferService>();
	}
};
static_assert(alignof(UProsContainerTransferService) == 0x000008, "Wrong alignment on UProsContainerTransferService");
static_assert(sizeof(UProsContainerTransferService) == 0x000028, "Wrong size on UProsContainerTransferService");

// Class Pros.ProsCrossSaveService
// 0x0000 (0x0028 - 0x0028)
class UProsCrossSaveService final : public UObject
{
public:
	static class UProsCrossSaveService* Get();

	EProsdkErrorCodeCrossSaves CompleteTransfer(int32 LocalUserNum, const class FString& TransferId, const struct FProsCrossSaveSnapshot& Snapshot, const TDelegate<void(EProsdkErrorCodeCrossSaves ResultCode, const struct FProsCrossSaveCompleteTransferResult& TransferResult)>& Delegate);
	EProsdkErrorCodeCrossSaves CompleteTransferContainer(int32 LocalUserNum, const class FString& TransferId, const struct FProsCrossSaveSnapshotContainer& SnapshotContainer, const TDelegate<void(EProsdkErrorCodeCrossSaves ResultCode, const struct FProsCrossSaveCompleteTransferResult& TransferResult)>& Delegate);
	int64 GetCooldownMs(int32 LocalUserNum);
	EProsdkErrorCodeCrossSaves GetTransferInfo(int32 LocalUserNum, const TDelegate<void(EProsdkErrorCodeCrossSaves ResultCode, const struct FProsCrossSaveTransferInfo& TransferInfo)>& Delegate);
	EProsdkErrorCodeCrossSaves SkipTransfer(int32 LocalUserNum, const class FString& TransferId, const TDelegate<void(EProsdkErrorCodeCrossSaves ResultCode)>& Delegate);
	EProsdkErrorCodeCrossSaves Submit(int32 LocalUserNum, const struct FProsCrossSaveSnapshot& Snapshot, const TDelegate<void(EProsdkErrorCodeCrossSaves ResultCode, int64 CooldownMs)>& Delegate);
	EProsdkErrorCodeCrossSaves SubmitContainer(int32 LocalUserNum, const struct FProsCrossSaveSnapshotContainer& SnapshotSontainer, const TDelegate<void(EProsdkErrorCodeCrossSaves ResultCode, int64 CooldownMs)>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsCrossSaveService">();
	}
	static class UProsCrossSaveService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsCrossSaveService>();
	}
};
static_assert(alignof(UProsCrossSaveService) == 0x000008, "Wrong alignment on UProsCrossSaveService");
static_assert(sizeof(UProsCrossSaveService) == 0x000028, "Wrong size on UProsCrossSaveService");

// Class Pros.ProsEntitlementsService
// 0x0028 (0x0050 - 0x0028)
class UProsEntitlementsService final : public UObject
{
public:
	TMulticastInlineDelegate<void(EProsdkErrorCodeDefault ErrorCode, const TArray<struct FProsEntitlement>& Entitlements)> OnGetEntitlements; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProsEntitlementsService* Get();
	static class UProsEntitlementsService* TryGet();

	EProsdkErrorCodeDefault ConsumeEntitlements(int32 LocalUserNum, const TArray<struct FProsEntitlementConsumeRequest>& ConsumeRequest, TDelegate<void(int32 LocalUserNum, struct FProsEntitlementConsumeResult* Result)> Delegate);
	EProsdkErrorCodeDefault GetEntitlements(int32 LocalUserNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsEntitlementsService">();
	}
	static class UProsEntitlementsService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsEntitlementsService>();
	}
};
static_assert(alignof(UProsEntitlementsService) == 0x000008, "Wrong alignment on UProsEntitlementsService");
static_assert(sizeof(UProsEntitlementsService) == 0x000050, "Wrong size on UProsEntitlementsService");
static_assert(offsetof(UProsEntitlementsService, OnGetEntitlements) == 0x000028, "Member 'UProsEntitlementsService::OnGetEntitlements' has a wrong offset!");

// Class Pros.ProsHttpFileCache
// 0x0000 (0x0028 - 0x0028)
class UProsHttpFileCache final : public UObject
{
public:
	static void Clear(const int64 KeepLastHours);
	static void Remove(const class FString& URL);
	static EProsdkErrorCodeDefault RequestGet(const struct FProsHttpFileCacheGetRequest& Request, const TDelegate<void(const struct FProsHttpFileCacheResponse& Response)>& Delegate);
	static EProsdkErrorCodeDefault RequestPost(const struct FProsHttpFileCachePostRequest& Request, const TDelegate<void(const struct FProsHttpFileCacheResponse& Response)>& Delegate);
	static void SetQuotaAmount(const int64 MaxFilesToKeep);
	static void SetQuotaSize(const int64 MaxKbToKeep);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsHttpFileCache">();
	}
	static class UProsHttpFileCache* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsHttpFileCache>();
	}
};
static_assert(alignof(UProsHttpFileCache) == 0x000008, "Wrong alignment on UProsHttpFileCache");
static_assert(sizeof(UProsHttpFileCache) == 0x000028, "Wrong size on UProsHttpFileCache");

// Class Pros.JsonUtils
// 0x0000 (0x0028 - 0x0028)
class UJsonUtils final : public UBlueprintFunctionLibrary
{
public:
	static class FString Cast_JsonBPToPrettyString(const struct FJsonObjBP& JsonObject);
	static class FString Cast_JsonBPToString(const struct FJsonObjBP& JsonObject);
	static TArray<struct FJsonValBP> Cast_JsonValToArray(const struct FJsonValBP& JsonValue);
	static bool Cast_JsonValToBool(const struct FJsonValBP& JsonValue);
	static float Cast_JsonValToFloat(const struct FJsonValBP& JsonValue);
	static int32 Cast_JsonValToInteger(const struct FJsonValBP& JsonValue);
	static struct FJsonObjBP Cast_JsonValToObject(const struct FJsonValBP& JsonValue);
	static class FString Cast_JsonValToString(const struct FJsonValBP& JsonValue);
	static void CopyToClipboard(const class FString& ToClipboard);
	static bool EquaEqual_JsonValue(const struct FJsonValBP& A, const struct FJsonValBP& B);
	static void GetFromClipboard(class FString* FromClipboard);
	static struct FJsonValBP GetValue(const struct FJsonObjBP& JsonObject, const class FString& FieldName);
	static bool JsonHasField(const struct FJsonObjBP& JsonObject, const class FString& FieldName);
	static bool JsonHasTypedField(const struct FJsonObjBP& JsonObject, const class FString& FieldName, EJsonType Type);
	static bool JsonIsNull(const struct FJsonValBP& JsonValue);
	static struct FJsonObjBP JsonMake();
	static struct FJsonValBP JsonMakeArray(const TArray<struct FJsonValBP>& Value);
	static struct FJsonValBP JsonMakeBool(bool Value);
	static const struct FJsonObjBP JsonMakeField(const struct FJsonObjBP& JsonObject, const class FString& FieldName, const struct FJsonValBP& Value);
	static struct FJsonValBP JsonMakeFloat(float Value);
	static struct FJsonObjBP JsonMakeFromString(const class FString& JsonString);
	static struct FJsonValBP JsonMakeInt(int32 Value);
	static struct FJsonValBP JsonMakeNull();
	static struct FJsonValBP JsonMakeObject(const struct FJsonObjBP& Value);
	static struct FJsonValBP JsonMakeString(const class FString& Value);
	static const struct FJsonObjBP JsonRemoveField(const struct FJsonObjBP& JsonObject, const class FString& FieldName);
	static const struct FJsonObjBP JsonSetField(const struct FJsonObjBP& JsonObject, const class FString& FieldName, const struct FJsonValBP& JsonValue);
	static EJsonType JsonType(const struct FJsonValBP& JsonValue);
	static bool NotEqual_JsonValue(const struct FJsonValBP& A, const struct FJsonValBP& B);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JsonUtils">();
	}
	static class UJsonUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJsonUtils>();
	}
};
static_assert(alignof(UJsonUtils) == 0x000008, "Wrong alignment on UJsonUtils");
static_assert(sizeof(UJsonUtils) == 0x000028, "Wrong size on UJsonUtils");

// Class Pros.ProsLeaderboardsService
// 0x0000 (0x0028 - 0x0028)
class UProsLeaderboardsService final : public UObject
{
public:
	static class UProsLeaderboardsService* Get();

	EProsdkErrorCodeLeaderboards GetCatalog(int32 LocalUserNum, const struct FProsLeaderboardsContinuationToken& Token, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeLeaderboards ResultCode, const struct FProsLeaderboardsGetCatalogResult& CatalogResult)>& Delegate);
	EProsdkErrorCodeLeaderboards GetEntries(int32 LocalUserNum, const class FString& LeaderboardId, const struct FProsLeaderboardsContinuationToken& Token, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeLeaderboards ResultCode, const struct FProsLeaderboardsGetEntriesResult& EntriesResult)>& Delegate);
	EProsdkErrorCodeLeaderboards GetLeaderboards(int32 LocalUserNum, const TArray<struct FProsLeaderboardsSearch>& Leaderboards, const TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeLeaderboards ResultCode, const struct FProsLeaderboardsGetResult& GetResult)>& Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsLeaderboardsService">();
	}
	static class UProsLeaderboardsService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsLeaderboardsService>();
	}
};
static_assert(alignof(UProsLeaderboardsService) == 0x000008, "Wrong alignment on UProsLeaderboardsService");
static_assert(sizeof(UProsLeaderboardsService) == 0x000028, "Wrong size on UProsLeaderboardsService");

// Class Pros.ProsModsService
// 0x0078 (0x00A0 - 0x0028)
class UProsModsService final : public UObject
{
public:
	TMulticastInlineDelegate<void(int32 LocalUserNum, EProsServiceState State, EProsdkErrorCodeMods ResultCode, const class FString& ErrorMessage)> OnProsModsStateChanged; // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x68];                                      // 0x0038(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProsModsService* Get();
	static class UProsModsService* TryGet();

	EProsdkErrorCodeMods AddMod(int32 LocalUserNum, const struct FProsModsMandatoryFields& MandatoryFields, const struct FProsModsAdditionalFields& AdditionalFields, TDelegate<void(int32 LocalUserNum, const class FString& ModID, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods AddModVersion(int32 LocalUserNum, const struct FProsModsAddVersion& VersionData, TDelegate<void(int32 LocalUserNum, const class FString& ModID, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods CheckForExistingProfileUrl(int32 LocalUserNum, const class FString& ProfileUrl, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods Connect(int32 LocalUserNum);
	void Disconnect(int32 LocalUserNum);
	EProsdkErrorCodeMods GetComplaintTypeArray(int32 LocalUserNum, TDelegate<void(int32 LocalUserNum, const struct FProsModsComplaintTypeArray& ComplaintTypes, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsServiceState GetConnectionState(int32 LocalUserNum);
	EProsdkErrorCodeMods GetMod(int32 LocalUserNum, const class FString& ModID, TDelegate<void(int32 LocalUserNum, const struct FProsModsItem& Mod, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModCollectionGroupArray(int32 LocalUserNum, TDelegate<void(int32 LocalUserNum, const struct FProsModsCollectionGroupArray& CollectionGroups, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModsBySearchFilter(int32 LocalUserNum, const struct FProsModsSearchFilter& SearchFilter, TDelegate<void(int32 LocalUserNum, const TArray<struct FProsModsItem>& Mods, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModsByUrl(int32 LocalUserNum, const struct FProsModsProfileUrl& ProfileUrl, TDelegate<void(int32 LocalUserNum, const TArray<struct FProsModsItem>& Mods, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModsStat(int32 LocalUserNum, TDelegate<void(int32 LocalUserNum, const struct FProsModsStat& ModsStat, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModTagGroupArray(int32 LocalUserNum, TDelegate<void(int32 LocalUserNum, const TArray<struct FProsModsTagGroup>& TagGroups, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModTypeArray(int32 LocalUserNum, TDelegate<void(int32 LocalUserNum, const struct FProsModsTypeArray& ModTypes, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods GetModUploadParameters(int32 LocalUserNum, TDelegate<void(int32 LocalUserNum, const struct FProsModsUploadParameters& UploadParams, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods HideModsForUser(int32 LocalUserNum, const struct FProsModsHideInfo& HideInfo, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods RateMod(int32 LocalUserNum, const struct FProsModsRateModID& RateMod_0, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods SubmitModComplaint(int32 LocalUserNum, const struct FProsModsComplaint& Complaint, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods SubscribeToMod(int32 LocalUserNum, const TArray<class FString>& ModIDs, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods UndoHideModsForUser(int32 LocalUserNum, const struct FProsModsHideInfo& HideInfo, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods UnsubscribeFromMod(int32 LocalUserNum, const TArray<class FString>& ModIDs, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods UpdateModDownloads(int32 LocalUserNum, const class FString& ModID, const class FString& VersionTag, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode)> Delegate);
	EProsdkErrorCodeMods UploadModImage(int32 LocalUserNum, const struct FProsModsImage& Image, TDelegate<void(int32 LocalUserNum, EProsdkErrorCodeMods ErrorCode, const struct FProsModsGalleryImage& Image)> Delegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsModsService">();
	}
	static class UProsModsService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsModsService>();
	}
};
static_assert(alignof(UProsModsService) == 0x000008, "Wrong alignment on UProsModsService");
static_assert(sizeof(UProsModsService) == 0x0000A0, "Wrong size on UProsModsService");
static_assert(offsetof(UProsModsService, OnProsModsStateChanged) == 0x000028, "Member 'UProsModsService::OnProsModsStateChanged' has a wrong offset!");

// Class Pros.ProsInterface
// 0x0108 (0x0130 - 0x0028)
class alignas(0x10) UProsInterface final : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& Message)> OnProsLog;                          // 0x0028(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 LocalUserNum)> OnStartQRFlow;                                // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 LocalUserNum)> OnGetEntitlements;                            // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	EProsdkErrorCodeDefault                       InitResultCode;                                    // 0x00A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x8F];                                      // 0x00A1(0x008F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool CleanupFileAccessLocalStorage();
	static void Disconnect();
	static class UProsInterface* Get();
	static void Terminate();
	static void Update();

	class FString ClientGetProsUserId(int32 LocalUserNum);
	class FString GetApplicationVersion();
	struct FDateTime GetBackendTime();
	struct FTimespan GetBackendTimeOffset();
	class FString GetKernelSessionIdString(int32 LocalUserNum);
	class FString GetKernelSessionIdVisualAlias(int32 LocalUserNum);
	class FString GetRuntimeSeanseID();
	class FString GetSdkVersion();
	class FString GetTitleID();
	bool Init(const struct FProsInitSettings& InitOptions);
	bool InitUsingConfig();
	bool IsBackendTimeSynced();
	bool IsExecutingRequests();
	bool IsInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsInterface">();
	}
	static class UProsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsInterface>();
	}
};
static_assert(alignof(UProsInterface) == 0x000010, "Wrong alignment on UProsInterface");
static_assert(sizeof(UProsInterface) == 0x000130, "Wrong size on UProsInterface");
static_assert(offsetof(UProsInterface, OnProsLog) == 0x000028, "Member 'UProsInterface::OnProsLog' has a wrong offset!");
static_assert(offsetof(UProsInterface, OnStartQRFlow) == 0x000050, "Member 'UProsInterface::OnStartQRFlow' has a wrong offset!");
static_assert(offsetof(UProsInterface, OnGetEntitlements) == 0x000078, "Member 'UProsInterface::OnGetEntitlements' has a wrong offset!");
static_assert(offsetof(UProsInterface, InitResultCode) == 0x0000A0, "Member 'UProsInterface::InitResultCode' has a wrong offset!");

// Class Pros.ProsSettings
// 0x0080 (0x00A8 - 0x0028)
class UProsSettings final : public UObject
{
public:
	float                                         SessionUpdateInterval;                             // 0x0028(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TitleName;                                         // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleId;                                           // 0x0040(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TitleSecret;                                       // 0x0050(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Version;                                           // 0x0060(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubmissiveOSSName;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSubmissiveOSSEnabledAutoLoginInEditor;            // 0x0080(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 UserLogin;                                         // 0x0088(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPluginVersioned>               Plugins;                                           // 0x0098(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsSettings">();
	}
	static class UProsSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsSettings>();
	}
};
static_assert(alignof(UProsSettings) == 0x000008, "Wrong alignment on UProsSettings");
static_assert(sizeof(UProsSettings) == 0x0000A8, "Wrong size on UProsSettings");
static_assert(offsetof(UProsSettings, SessionUpdateInterval) == 0x000028, "Member 'UProsSettings::SessionUpdateInterval' has a wrong offset!");
static_assert(offsetof(UProsSettings, TitleName) == 0x000030, "Member 'UProsSettings::TitleName' has a wrong offset!");
static_assert(offsetof(UProsSettings, TitleId) == 0x000040, "Member 'UProsSettings::TitleId' has a wrong offset!");
static_assert(offsetof(UProsSettings, TitleSecret) == 0x000050, "Member 'UProsSettings::TitleSecret' has a wrong offset!");
static_assert(offsetof(UProsSettings, Version) == 0x000060, "Member 'UProsSettings::Version' has a wrong offset!");
static_assert(offsetof(UProsSettings, SubmissiveOSSName) == 0x000070, "Member 'UProsSettings::SubmissiveOSSName' has a wrong offset!");
static_assert(offsetof(UProsSettings, bSubmissiveOSSEnabledAutoLoginInEditor) == 0x000080, "Member 'UProsSettings::bSubmissiveOSSEnabledAutoLoginInEditor' has a wrong offset!");
static_assert(offsetof(UProsSettings, UserLogin) == 0x000088, "Member 'UProsSettings::UserLogin' has a wrong offset!");
static_assert(offsetof(UProsSettings, Plugins) == 0x000098, "Member 'UProsSettings::Plugins' has a wrong offset!");

// Class Pros.ProsSystemTelemetry
// 0x0018 (0x0040 - 0x0028)
class UProsSystemTelemetry final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProsSystemTelemetry* Get();
	static class UProsSystemTelemetry* TryGet();

	void AddBackendFactError(const class FString& FactCategory, const class FString& Line, const class FString& ErrorMarker);
	void AddBackendFactRaw(const class FString& Line);
	void AddBackendFactSimple(const class FString& FactCategory, const class FString& Line);
	void AddBackendFactWarning(const class FString& FactCategory, const class FString& Line, const class FString& WarningMarker);
	EProsdkErrorCodeDefault AddFactsContext(const class FString& Name_0, const class FString& Value);
	EProsdkErrorCodeDefault AddServerContext(const class FString& Name_0, const class FString& Value);
	EProsdkErrorCodeDefault AddUserContext(int32 LocalUserNum, const class FString& Name_0, const class FString& Value);
	EProsdkErrorCodeDefault ImmediateSendFacts(const class FString& Reason);
	bool IsQueueEmpty();
	EProsdkErrorCodeDefault RemoveFactsContext(const class FString& Name_0);
	EProsdkErrorCodeDefault RemoveServerContext(const class FString& Name_0);
	EProsdkErrorCodeDefault RemoveUserContext(int32 LocalUserNum, const class FString& Name_0);
	void RequestFactsSending();
	void Resume();
	EProsdkErrorCodeDefault SendServerEvent(const class FString& EventType, int32 EventTypeVersion, const class FString& EventParams);
	EProsdkErrorCodeDefault SendUserEvent(int32 LocalUserNum, const class FString& EventType, int32 EventTypeVersion, const class FString& EventParams);
	void Suspend();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProsSystemTelemetry">();
	}
	static class UProsSystemTelemetry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProsSystemTelemetry>();
	}
};
static_assert(alignof(UProsSystemTelemetry) == 0x000008, "Wrong alignment on UProsSystemTelemetry");
static_assert(sizeof(UProsSystemTelemetry) == 0x000040, "Wrong size on UProsSystemTelemetry");

}

